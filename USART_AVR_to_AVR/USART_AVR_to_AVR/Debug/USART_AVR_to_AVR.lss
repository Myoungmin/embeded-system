
USART_AVR_to_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000404  00800100  00800100  0000032c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a2  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d2  00000000  00000000  00000c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e8  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d0  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000274  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	48 c0       	rjmp	.+144    	; 0xda <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	af c0       	rjmp	.+350    	; 0x1d8 <__vector_30>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	25 e0       	ldi	r18, 0x05	; 5
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	04 c1       	rjmp	.+520    	; 0x2b4 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
void main(void)
{
	//DDRD = 0b00001000; TX RX 이거 써주면 안 된다
	//DDRE = 0b00000010;
	// USART 초기화
	UCSR0A = 0x0;
  ae:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0b10011000;	 // RXCIE0 : 수신 완료 인터럽트 인에이블
  b0:	28 e9       	ldi	r18, 0x98	; 152
  b2:	2a b9       	out	0x0a, r18	; 10
	// 송수신 인에이블 TXEN0 = 1, RXEN0=1
	UCSR0C = 0b00000110; // 비동기 데이터 8비트 모드
  b4:	96 e0       	ldi	r25, 0x06	; 6
  b6:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0;// X-TAL = 16MHz 일때, BAUD = 9600
  ba:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 103;
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	89 b9       	out	0x09, r24	; 9

	UCSR1A = 0x0;
  c2:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B = 0b10011000;	 // RXCIE1 : 수신 완료 인터럽트 인에이블
  c6:	20 93 9a 00 	sts	0x009A, r18	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	// 송수신 인에이블 TXEN1 = 1, RXEN1=1
	UCSR1C = 0b00000110; // 비동기 데이터 8비트 모드
  ca:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1H = 0;// X-TAL = 16MHz 일때, BAUD = 9600
  ce:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 103;
  d2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>


	sei();
  d6:	78 94       	sei
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <main+0x2a>

000000da <__vector_18>:

	
}

ISR(USART0_RX_vect)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	0b b6       	in	r0, 0x3b	; 59
  e6:	0f 92       	push	r0
  e8:	cf 92       	push	r12
  ea:	df 92       	push	r13
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	4f 93       	push	r20
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	
	string[i] = UDR0; // USART0으로 수신
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 114:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 118:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 11c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 120:	2c b1       	in	r18, 0x0c	; 12
 122:	fc 01       	movw	r30, r24
 124:	ec 5f       	subi	r30, 0xFC	; 252
 126:	fe 4f       	sbci	r31, 0xFE	; 254
 128:	20 83       	st	Z, r18

	if(string[i] == '\n')
 12a:	2a 30       	cpi	r18, 0x0A	; 10
 12c:	79 f5       	brne	.+94     	; 0x18c <__vector_18+0xb2>
 12e:	a4 e0       	ldi	r26, 0x04	; 4
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	70 e0       	ldi	r23, 0x00	; 0
	{
		
		for(int j = 0; j <= i;j++ )
		{
			while((UCSR1A & 0x20) == 0x0); //UERE1=1 될 때까지 대기
 13a:	eb e9       	ldi	r30, 0x9B	; 155
 13c:	f0 e0       	ldi	r31, 0x00	; 0
			UDR1 = string[j]; // USART1로 송신
 13e:	cc e9       	ldi	r28, 0x9C	; 156
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <__vector_18+0x6e>
 144:	b7 01       	movw	r22, r14
 146:	a6 01       	movw	r20, r12
	if(string[i] == '\n')
	{
		
		for(int j = 0; j <= i;j++ )
		{
			while((UCSR1A & 0x20) == 0x0); //UERE1=1 될 때까지 대기
 148:	80 81       	ld	r24, Z
 14a:	85 ff       	sbrs	r24, 5
 14c:	fd cf       	rjmp	.-6      	; 0x148 <__vector_18+0x6e>
			UDR1 = string[j]; // USART1로 송신
 14e:	8d 91       	ld	r24, X+
 150:	88 83       	st	Y, r24
 152:	6a 01       	movw	r12, r20
 154:	7b 01       	movw	r14, r22
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	c8 1a       	sub	r12, r24
 15a:	d8 0a       	sbc	r13, r24
 15c:	e8 0a       	sbc	r14, r24
 15e:	f8 0a       	sbc	r15, r24
	string[i] = UDR0; // USART0으로 수신

	if(string[i] == '\n')
	{
		
		for(int j = 0; j <= i;j++ )
 160:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <_edata>
 164:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <_edata+0x1>
 168:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_edata+0x2>
 16c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_edata+0x3>
 170:	04 17       	cp	r16, r20
 172:	15 07       	cpc	r17, r21
 174:	26 07       	cpc	r18, r22
 176:	37 07       	cpc	r19, r23
 178:	28 f7       	brcc	.-54     	; 0x144 <__vector_18+0x6a>
		{
			while((UCSR1A & 0x20) == 0x0); //UERE1=1 될 때까지 대기
			UDR1 = string[j]; // USART1로 송신
		}
		i = 0;
 17a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 17e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 182:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 186:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
 18a:	0b c0       	rjmp	.+22     	; 0x1a2 <__vector_18+0xc8>
	}
	else i++;
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	a1 1d       	adc	r26, r1
 190:	b1 1d       	adc	r27, r1
 192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 196:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 19a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 19e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
}
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	bf 91       	pop	r27
 1ac:	af 91       	pop	r26
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	7f 91       	pop	r23
 1b4:	6f 91       	pop	r22
 1b6:	5f 91       	pop	r21
 1b8:	4f 91       	pop	r20
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	ff 90       	pop	r15
 1c4:	ef 90       	pop	r14
 1c6:	df 90       	pop	r13
 1c8:	cf 90       	pop	r12
 1ca:	0f 90       	pop	r0
 1cc:	0b be       	out	0x3b, r0	; 59
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_30>:

ISR(USART1_RX_vect)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	0b b6       	in	r0, 0x3b	; 59
 1e4:	0f 92       	push	r0
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
	
	string[i] = UDR1; // USART1로 수신
 202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 206:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 20a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 20e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 212:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 216:	fc 01       	movw	r30, r24
 218:	ec 5f       	subi	r30, 0xFC	; 252
 21a:	fe 4f       	sbci	r31, 0xFE	; 254
 21c:	20 83       	st	Z, r18

	if(string[i] == '\n')
 21e:	2a 30       	cpi	r18, 0x0A	; 10
 220:	49 f5       	brne	.+82     	; 0x274 <__vector_30+0x9c>
 222:	e4 e0       	ldi	r30, 0x04	; 4
 224:	f1 e0       	ldi	r31, 0x01	; 1
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	a0 e0       	ldi	r26, 0x00	; 0
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <__vector_30+0x5c>
 230:	d9 01       	movw	r26, r18
 232:	c8 01       	movw	r24, r16
	{
		
		for(int j = 0; j <= i;j++ )
		{
			while((UCSR0A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 234:	5d 9b       	sbis	0x0b, 5	; 11
 236:	fe cf       	rjmp	.-4      	; 0x234 <__vector_30+0x5c>
			UDR0 = string[j]; // USART0으로 송신
 238:	21 91       	ld	r18, Z+
 23a:	2c b9       	out	0x0c, r18	; 12
 23c:	8c 01       	movw	r16, r24
 23e:	9d 01       	movw	r18, r26
 240:	0f 5f       	subi	r16, 0xFF	; 255
 242:	1f 4f       	sbci	r17, 0xFF	; 255
 244:	2f 4f       	sbci	r18, 0xFF	; 255
 246:	3f 4f       	sbci	r19, 0xFF	; 255
	string[i] = UDR1; // USART1로 수신

	if(string[i] == '\n')
	{
		
		for(int j = 0; j <= i;j++ )
 248:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 24c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
 250:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_edata+0x2>
 254:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <_edata+0x3>
 258:	48 17       	cp	r20, r24
 25a:	59 07       	cpc	r21, r25
 25c:	6a 07       	cpc	r22, r26
 25e:	7b 07       	cpc	r23, r27
 260:	38 f7       	brcc	.-50     	; 0x230 <__vector_30+0x58>
		{
			while((UCSR0A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
			UDR0 = string[j]; // USART0으로 송신
		}
		i = 0;
 262:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 266:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 26a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 26e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
 272:	0b c0       	rjmp	.+22     	; 0x28a <__vector_30+0xb2>
	}
	else i++;
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	a1 1d       	adc	r26, r1
 278:	b1 1d       	adc	r27, r1
 27a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 27e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 282:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 286:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
}
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	0f 90       	pop	r0
 2a8:	0b be       	out	0x3b, r0	; 59
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
