
DFplayer_education.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  000001ce  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c21  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d5  00000000  00000000  0000102d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000421  00000000  00000000  00001902  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001d24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000468  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ad  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000023e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	75 d0       	rcall	.+234    	; 0x19e <main>
  b4:	8a c0       	rjmp	.+276    	; 0x1ca <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <UART_Init>:
};


void UART_Init(void)
{
	UCSR0B = 0x18;
  b8:	88 e1       	ldi	r24, 0x18	; 24
  ba:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
  bc:	96 e0       	ldi	r25, 0x06	; 6
  be:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0L = 103;
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	89 b9       	out	0x09, r24	; 9

	UCSR1B = 0x08;
  c6:	28 e0       	ldi	r18, 0x08	; 8
  c8:	20 93 9a 00 	sts	0x009A, r18	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0x06;
  cc:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1L = 103;
  d0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  d4:	08 95       	ret

000000d6 <UART0_Putch>:
}

void UART0_Putch(char ch)
{
	while(!(UCSR0A & 0x20));
  d6:	5d 9b       	sbis	0x0b, 5	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <UART0_Putch>

	UDR0 = ch;
  da:	8c b9       	out	0x0c, r24	; 12
  dc:	08 95       	ret

000000de <UART0_Getch>:
}

char UART0_Getch(void)
{
	while(!(UCSR0A & 0x80));
  de:	5f 9b       	sbis	0x0b, 7	; 11
  e0:	fe cf       	rjmp	.-4      	; 0xde <UART0_Getch>

	return UDR0;
  e2:	8c b1       	in	r24, 0x0c	; 12
}
  e4:	08 95       	ret

000000e6 <UART0_Puts>:

void UART0_Puts(char str[])
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	ec 01       	movw	r28, r24
	int i=0;

	while(str[i] != 0)
  ec:	88 81       	ld	r24, Y
  ee:	88 23       	and	r24, r24
  f0:	29 f0       	breq	.+10     	; 0xfc <UART0_Puts+0x16>
  f2:	21 96       	adiw	r28, 0x01	; 1
	UART0_Putch(str[i++]);
  f4:	f0 df       	rcall	.-32     	; 0xd6 <UART0_Putch>

void UART0_Puts(char str[])
{
	int i=0;

	while(str[i] != 0)
  f6:	89 91       	ld	r24, Y+
  f8:	81 11       	cpse	r24, r1
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <UART0_Puts+0xe>
	UART0_Putch(str[i++]);
}
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <UART1_Putch>:

void UART1_Putch(char ch)
{
	while(!(UCSR1A & 0x20));
 102:	eb e9       	ldi	r30, 0x9B	; 155
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	90 81       	ld	r25, Z
 108:	95 ff       	sbrs	r25, 5
 10a:	fd cf       	rjmp	.-6      	; 0x106 <UART1_Putch+0x4>

	UDR1 = ch;
 10c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 110:	08 95       	ret

00000112 <SendCommand>:
}

void SendCommand(unsigned char cmd)
{
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	18 2f       	mov	r17, r24
	unsigned int checksum = 0;
	char temp[20];

	UART1_Putch(0x7E);
 11a:	8e e7       	ldi	r24, 0x7E	; 126
 11c:	f2 df       	rcall	.-28     	; 0x102 <UART1_Putch>
	UART1_Putch(0xFF);
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	f0 df       	rcall	.-32     	; 0x102 <UART1_Putch>
	UART1_Putch(0x06);
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	ee df       	rcall	.-36     	; 0x102 <UART1_Putch>
	UART1_Putch(cmd);
 126:	81 2f       	mov	r24, r17
 128:	ec df       	rcall	.-40     	; 0x102 <UART1_Putch>
	UART1_Putch(0x00);
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	ea df       	rcall	.-44     	; 0x102 <UART1_Putch>
 12e:	80 e0       	ldi	r24, 0x00	; 0
	UART1_Putch(0x00);
 130:	e8 df       	rcall	.-48     	; 0x102 <UART1_Putch>
 132:	19 30       	cpi	r17, 0x09	; 9
	
	if(cmd != CMD_TF){
 134:	39 f0       	breq	.+14     	; 0x144 <SendCommand+0x32>
 136:	80 e0       	ldi	r24, 0x00	; 0
		UART1_Putch(0x00);
 138:	e4 df       	rcall	.-56     	; 0x102 <UART1_Putch>
 13a:	cb ef       	ldi	r28, 0xFB	; 251
		checksum = 0 - (0xFF + 0x06 + cmd);
 13c:	de ef       	ldi	r29, 0xFE	; 254
 13e:	c1 1b       	sub	r28, r17
 140:	d1 09       	sbc	r29, r1
 142:	04 c0       	rjmp	.+8      	; 0x14c <SendCommand+0x3a>
	}
	else{
		UART1_Putch(0x02);
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	dd df       	rcall	.-70     	; 0x102 <UART1_Putch>
		checksum = 0 - (0xFF + 0x06 + cmd + 0x02);
 148:	c0 ef       	ldi	r28, 0xF0	; 240
 14a:	de ef       	ldi	r29, 0xFE	; 254
	}

	UART1_Putch((char)(checksum >> 8));
 14c:	8d 2f       	mov	r24, r29
 14e:	d9 df       	rcall	.-78     	; 0x102 <UART1_Putch>
 150:	8c 2f       	mov	r24, r28
	UART1_Putch(checksum&0xFF);
 152:	d7 df       	rcall	.-82     	; 0x102 <UART1_Putch>
 154:	8f ee       	ldi	r24, 0xEF	; 239
 156:	d5 df       	rcall	.-86     	; 0x102 <UART1_Putch>
	UART1_Putch(0xEF);
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17

	UART1_Putch(checksum.arrayChecksum[1]);
	UART1_Putch(checksum.arrayChecksum[0]);
	UART1_Putch(0xEF);
	*/
}
 15e:	08 95       	ret

00000160 <DisplayMenu>:
 160:	8a e0       	ldi	r24, 0x0A	; 10
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	c0 df       	rcall	.-128    	; 0xe6 <UART0_Puts>

void DisplayMenu(void)
{
	UART0_Puts("\r\n===========================");
	UART0_Puts("\r\n= 1 : Play Music          =");
 166:	88 e2       	ldi	r24, 0x28	; 40
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	bd df       	rcall	.-134    	; 0xe6 <UART0_Puts>
	UART0_Puts("\r\n= 2 : Stop Music          =");
 16c:	86 e4       	ldi	r24, 0x46	; 70
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	ba df       	rcall	.-140    	; 0xe6 <UART0_Puts>
	UART0_Puts("\r\n= 3 : Pause Music         =");
 172:	84 e6       	ldi	r24, 0x64	; 100
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	b7 df       	rcall	.-146    	; 0xe6 <UART0_Puts>
	UART0_Puts("\r\n= 4 : Next Music          =");
 178:	82 e8       	ldi	r24, 0x82	; 130
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	b4 df       	rcall	.-152    	; 0xe6 <UART0_Puts>
	UART0_Puts("\r\n= 5 : Previous Music      =");
 17e:	80 ea       	ldi	r24, 0xA0	; 160
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	b1 df       	rcall	.-158    	; 0xe6 <UART0_Puts>
	UART0_Puts("\r\n= 6 : volume up      =");
 184:	8e eb       	ldi	r24, 0xBE	; 190
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	ae df       	rcall	.-164    	; 0xe6 <UART0_Puts>
	UART0_Puts("\r\n= 7 : volume down       =");
 18a:	87 ed       	ldi	r24, 0xD7	; 215
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	ab df       	rcall	.-170    	; 0xe6 <UART0_Puts>
	UART0_Puts("\r\n===========================");
 190:	8a e0       	ldi	r24, 0x0A	; 10
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	a8 df       	rcall	.-176    	; 0xe6 <UART0_Puts>
 196:	83 ef       	ldi	r24, 0xF3	; 243
	UART0_Puts("\r\n\r\nCommand > ");
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	a5 cf       	rjmp	.-182    	; 0xe6 <UART0_Puts>
 19c:	08 95       	ret

0000019e <main>:
 19e:	8c df       	rcall	.-232    	; 0xb8 <UART_Init>
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	83 ec       	ldi	r24, 0xC3	; 195
 1a4:	99 e0       	ldi	r25, 0x09	; 9
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x8>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x12>
 1b0:	00 00       	nop

	UART_Init();

	_delay_ms(200);

	SendCommand(CMD_TF);
 1b2:	89 e0       	ldi	r24, 0x09	; 9
	
	while(1){
		DisplayMenu();
 1b4:	ae df       	rcall	.-164    	; 0x112 <SendCommand>
 1b6:	d4 df       	rcall	.-88     	; 0x160 <DisplayMenu>
		cmd = UART0_Getch();
 1b8:	92 df       	rcall	.-220    	; 0xde <UART0_Getch>
 1ba:	e8 2f       	mov	r30, r24
		SendCommand(cmd_list[cmd - '0' - 1]);
 1bc:	88 0f       	add	r24, r24
 1be:	ff 0b       	sbc	r31, r31
 1c0:	e1 53       	subi	r30, 0x31	; 49
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	80 81       	ld	r24, Z
 1c6:	a5 df       	rcall	.-182    	; 0x112 <SendCommand>
 1c8:	f6 cf       	rjmp	.-20     	; 0x1b6 <main+0x18>

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
