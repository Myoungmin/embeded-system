
AVR_Test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00002b6c  00002c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080012a  0080012a  00002c2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00002ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018b8  00000000  00000000  00002d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097f  00000000  00000000  00004618  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000142e  00000000  00000000  00004f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000063c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ed  00000000  00000000  00006630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054f  00000000  00000000  00006b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7a c2       	rjmp	.+1268   	; 0x536 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e6       	ldi	r30, 0x6C	; 108
      a0:	fb e2       	ldi	r31, 0x2B	; 43
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 32       	cpi	r26, 0x2A	; 42
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	aa e2       	ldi	r26, 0x2A	; 42
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 34       	cpi	r26, 0x4B	; 75
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	4f d5       	rcall	.+2718   	; 0xb62 <main>
      c4:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <UART_Init>:
void UART1_Putch(char ch)	//송신 기본함수
{
	while(!(UCSR1A & 0x20));

	UDR1 = ch;
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	8a e2       	ldi	r24, 0x2A	; 42
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	28 e1       	ldi	r18, 0x18	; 24
      d8:	fc 01       	movw	r30, r24
      da:	20 83       	st	Z, r18
      dc:	85 e9       	ldi	r24, 0x95	; 149
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	26 e0       	ldi	r18, 0x06	; 6
      e2:	fc 01       	movw	r30, r24
      e4:	20 83       	st	Z, r18
      e6:	80 e9       	ldi	r24, 0x90	; 144
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	fc 01       	movw	r30, r24
      ec:	10 82       	st	Z, r1
      ee:	89 e2       	ldi	r24, 0x29	; 41
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	27 e6       	ldi	r18, 0x67	; 103
      f4:	fc 01       	movw	r30, r24
      f6:	20 83       	st	Z, r18
      f8:	8a e9       	ldi	r24, 0x9A	; 154
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	2a e9       	ldi	r18, 0x9A	; 154
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	f9 01       	movw	r30, r18
     102:	20 81       	ld	r18, Z
     104:	20 69       	ori	r18, 0x90	; 144
     106:	fc 01       	movw	r30, r24
     108:	20 83       	st	Z, r18
     10a:	8d e9       	ldi	r24, 0x9D	; 157
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	26 e0       	ldi	r18, 0x06	; 6
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18
     114:	88 e9       	ldi	r24, 0x98	; 152
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	fc 01       	movw	r30, r24
     11a:	10 82       	st	Z, r1
     11c:	89 e9       	ldi	r24, 0x99	; 153
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	27 e6       	ldi	r18, 0x67	; 103
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18
     126:	00 00       	nop
     128:	df 91       	pop	r29
     12a:	cf 91       	pop	r28
     12c:	08 95       	ret

0000012e <UART0_Putch>:
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	1f 92       	push	r1
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	89 83       	std	Y+1, r24	; 0x01
     13a:	00 00       	nop
     13c:	8b e2       	ldi	r24, 0x2B	; 43
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	fc 01       	movw	r30, r24
     142:	80 81       	ld	r24, Z
     144:	88 2f       	mov	r24, r24
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	80 72       	andi	r24, 0x20	; 32
     14a:	99 27       	eor	r25, r25
     14c:	89 2b       	or	r24, r25
     14e:	b1 f3       	breq	.-20     	; 0x13c <UART0_Putch+0xe>
     150:	8c e2       	ldi	r24, 0x2C	; 44
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	29 81       	ldd	r18, Y+1	; 0x01
     156:	fc 01       	movw	r30, r24
     158:	20 83       	st	Z, r18
     15a:	00 00       	nop
     15c:	0f 90       	pop	r0
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	08 95       	ret

00000164 <SendCommand>:


void SendCommand(unsigned char cmd)
{
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	67 97       	sbiw	r28, 0x17	; 23
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	8f 8b       	std	Y+23, r24	; 0x17
	unsigned int checksum = 0;
     17a:	1a 82       	std	Y+2, r1	; 0x02
     17c:	19 82       	std	Y+1, r1	; 0x01
	char temp[20];

	UART0_Putch(0x7E);
     17e:	8e e7       	ldi	r24, 0x7E	; 126
     180:	d6 df       	rcall	.-84     	; 0x12e <UART0_Putch>
	UART0_Putch(0xFF);
     182:	8f ef       	ldi	r24, 0xFF	; 255
     184:	d4 df       	rcall	.-88     	; 0x12e <UART0_Putch>
	UART0_Putch(0x06);
     186:	86 e0       	ldi	r24, 0x06	; 6
     188:	d2 df       	rcall	.-92     	; 0x12e <UART0_Putch>
	UART0_Putch(cmd);
     18a:	8f 89       	ldd	r24, Y+23	; 0x17
     18c:	d0 df       	rcall	.-96     	; 0x12e <UART0_Putch>
	UART0_Putch(0x00);
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	ce df       	rcall	.-100    	; 0x12e <UART0_Putch>
     192:	80 e0       	ldi	r24, 0x00	; 0
	UART0_Putch(0x00);
     194:	cc df       	rcall	.-104    	; 0x12e <UART0_Putch>
     196:	8f 89       	ldd	r24, Y+23	; 0x17
	
	if(cmd != CMD_TF){
     198:	89 30       	cpi	r24, 0x09	; 9
     19a:	71 f0       	breq	.+28     	; 0x1b8 <SendCommand+0x54>
     19c:	80 e0       	ldi	r24, 0x00	; 0
		UART0_Putch(0x00);
     19e:	c7 df       	rcall	.-114    	; 0x12e <UART0_Putch>
     1a0:	8f 89       	ldd	r24, Y+23	; 0x17
     1a2:	88 2f       	mov	r24, r24
		checksum = 0 - (0xFF + 0x06 + cmd);
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	2b ef       	ldi	r18, 0xFB	; 251
     1a8:	3e ef       	ldi	r19, 0xFE	; 254
     1aa:	a9 01       	movw	r20, r18
     1ac:	48 1b       	sub	r20, r24
     1ae:	59 0b       	sbc	r21, r25
     1b0:	ca 01       	movw	r24, r20
     1b2:	9a 83       	std	Y+2, r25	; 0x02
     1b4:	89 83       	std	Y+1, r24	; 0x01
     1b6:	0d c0       	rjmp	.+26     	; 0x1d2 <SendCommand+0x6e>
     1b8:	82 e0       	ldi	r24, 0x02	; 2
	}
	else{
		UART0_Putch(0x02);
     1ba:	b9 df       	rcall	.-142    	; 0x12e <UART0_Putch>
     1bc:	8f 89       	ldd	r24, Y+23	; 0x17
     1be:	88 2f       	mov	r24, r24
		checksum = 0 - (0xFF + 0x06 + cmd + 0x02);
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	29 ef       	ldi	r18, 0xF9	; 249
     1c4:	3e ef       	ldi	r19, 0xFE	; 254
     1c6:	a9 01       	movw	r20, r18
     1c8:	48 1b       	sub	r20, r24
     1ca:	59 0b       	sbc	r21, r25
     1cc:	ca 01       	movw	r24, r20
     1ce:	9a 83       	std	Y+2, r25	; 0x02
     1d0:	89 83       	std	Y+1, r24	; 0x01
	}

	UART0_Putch((char)(checksum >> 8));
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	9a 81       	ldd	r25, Y+2	; 0x02
     1d6:	89 2f       	mov	r24, r25
     1d8:	99 27       	eor	r25, r25
     1da:	a9 df       	rcall	.-174    	; 0x12e <UART0_Putch>
	UART0_Putch(checksum&0xFF);
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	a7 df       	rcall	.-178    	; 0x12e <UART0_Putch>
     1e0:	8f ee       	ldi	r24, 0xEF	; 239
	UART0_Putch(0xEF);
     1e2:	a5 df       	rcall	.-182    	; 0x12e <UART0_Putch>
     1e4:	00 00       	nop
     1e6:	67 96       	adiw	r28, 0x17	; 23
}
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <SendCommand01>:
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29


void SendCommand01(unsigned char cmd, unsigned char param1, unsigned char param2)
{
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	69 97       	sbiw	r28, 0x19	; 25
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	8f 8b       	std	Y+23, r24	; 0x17
     20e:	68 8f       	std	Y+24, r22	; 0x18
     210:	49 8f       	std	Y+25, r20	; 0x19
	unsigned int checksum = 0;
     212:	1a 82       	std	Y+2, r1	; 0x02
     214:	19 82       	std	Y+1, r1	; 0x01
	char temp[20];

	UART0_Putch(0x7E);
     216:	8e e7       	ldi	r24, 0x7E	; 126
     218:	8a df       	rcall	.-236    	; 0x12e <UART0_Putch>
	UART0_Putch(0xFF);
     21a:	8f ef       	ldi	r24, 0xFF	; 255
     21c:	88 df       	rcall	.-240    	; 0x12e <UART0_Putch>
	UART0_Putch(0x06);
     21e:	86 e0       	ldi	r24, 0x06	; 6
     220:	86 df       	rcall	.-244    	; 0x12e <UART0_Putch>
	UART0_Putch(cmd);
     222:	8f 89       	ldd	r24, Y+23	; 0x17
     224:	84 df       	rcall	.-248    	; 0x12e <UART0_Putch>
	UART0_Putch(0x00);
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	82 df       	rcall	.-252    	; 0x12e <UART0_Putch>
	UART0_Putch(param1);
     22a:	88 8d       	ldd	r24, Y+24	; 0x18
     22c:	80 df       	rcall	.-256    	; 0x12e <UART0_Putch>
     22e:	89 8d       	ldd	r24, Y+25	; 0x19
	UART0_Putch(param2);
     230:	7e df       	rcall	.-260    	; 0x12e <UART0_Putch>
     232:	8f 89       	ldd	r24, Y+23	; 0x17
     234:	88 2f       	mov	r24, r24
	

	checksum = 0 - (0xFF + 0x06 + cmd + param1 + param2);
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	9c 01       	movw	r18, r24
     23a:	2b 5f       	subi	r18, 0xFB	; 251
     23c:	3e 4f       	sbci	r19, 0xFE	; 254
     23e:	88 8d       	ldd	r24, Y+24	; 0x18
     240:	88 2f       	mov	r24, r24
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	28 0f       	add	r18, r24
     246:	39 1f       	adc	r19, r25
     248:	89 8d       	ldd	r24, Y+25	; 0x19
     24a:	88 2f       	mov	r24, r24
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	82 0f       	add	r24, r18
     250:	93 1f       	adc	r25, r19
     252:	91 95       	neg	r25
     254:	81 95       	neg	r24
     256:	91 09       	sbc	r25, r1
     258:	9a 83       	std	Y+2, r25	; 0x02
     25a:	89 83       	std	Y+1, r24	; 0x01
     25c:	89 81       	ldd	r24, Y+1	; 0x01

	UART0_Putch((char)(checksum >> 8));
     25e:	9a 81       	ldd	r25, Y+2	; 0x02
     260:	89 2f       	mov	r24, r25
     262:	99 27       	eor	r25, r25
     264:	64 df       	rcall	.-312    	; 0x12e <UART0_Putch>
     266:	89 81       	ldd	r24, Y+1	; 0x01
	UART0_Putch(checksum&0xFF);
     268:	62 df       	rcall	.-316    	; 0x12e <UART0_Putch>
     26a:	8f ee       	ldi	r24, 0xEF	; 239
     26c:	60 df       	rcall	.-320    	; 0x12e <UART0_Putch>
	UART0_Putch(0xEF);
     26e:	00 00       	nop
     270:	69 96       	adiw	r28, 0x19	; 25
     272:	0f b6       	in	r0, 0x3f	; 63
}
     274:	f8 94       	cli
     276:	de bf       	out	0x3e, r29	; 62
     278:	0f be       	out	0x3f, r0	; 63
     27a:	cd bf       	out	0x3d, r28	; 61
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <__vector_30>:
     282:	1f 92       	push	r1
     284:	0f 92       	push	r0
     286:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
enum{close, open};	//도어락 상태


ISR(USART1_RX_vect)

{
     28a:	0f 92       	push	r0
     28c:	11 24       	eor	r1, r1
     28e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     292:	0f 92       	push	r0
     294:	2f 93       	push	r18
     296:	3f 93       	push	r19
     298:	4f 93       	push	r20
     29a:	5f 93       	push	r21
     29c:	6f 93       	push	r22
     29e:	7f 93       	push	r23
     2a0:	8f 93       	push	r24
     2a2:	9f 93       	push	r25
     2a4:	af 93       	push	r26
     2a6:	bf 93       	push	r27
     2a8:	ef 93       	push	r30
     2aa:	ff 93       	push	r31
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	28 97       	sbiw	r28, 0x08	; 8
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	cd bf       	out	0x3d, r28	; 61
	unsigned char ch;	//수신저장변수
	static char input_spot = 0;	//비밀번호 자리

	ch = UDR1; // 수신
     2ba:	8c e9       	ldi	r24, 0x9C	; 156
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	fc 01       	movw	r30, r24
     2c0:	80 81       	ld	r24, Z
     2c2:	88 87       	std	Y+8, r24	; 0x08

	if(RX == 0 && ch == 'C') //C를 받았을때
     2c4:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <RX>
     2c8:	88 23       	and	r24, r24
     2ca:	31 f5       	brne	.+76     	; 0x318 <__vector_30+0x96>
     2cc:	88 85       	ldd	r24, Y+8	; 0x08
     2ce:	83 34       	cpi	r24, 0x43	; 67
     2d0:	19 f5       	brne	.+70     	; 0x318 <__vector_30+0x96>
	{
		RX = 1;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <RX>
		for(int i = 0; i < 11; i++)
     2d8:	1a 82       	std	Y+2, r1	; 0x02
     2da:	19 82       	std	Y+1, r1	; 0x01
     2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <__vector_30+0x72>
		{
			input[i] = 0;	////뒤에서 에러나서 프로토콜이 초기화 될 경우 지금까지 저장된걸 지워서 비밀번호 겹치는거 방지
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	9a 81       	ldd	r25, Y+2	; 0x02
     2e2:	80 5c       	subi	r24, 0xC0	; 192
     2e4:	9e 4f       	sbci	r25, 0xFE	; 254
     2e6:	fc 01       	movw	r30, r24
     2e8:	10 82       	st	Z, r1
	ch = UDR1; // 수신

	if(RX == 0 && ch == 'C') //C를 받았을때
	{
		RX = 1;
		for(int i = 0; i < 11; i++)
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	9a 81       	ldd	r25, Y+2	; 0x02
     2ee:	01 96       	adiw	r24, 0x01	; 1
     2f0:	9a 83       	std	Y+2, r25	; 0x02
     2f2:	89 83       	std	Y+1, r24	; 0x01
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	0b 97       	sbiw	r24, 0x0b	; 11
     2fa:	8c f3       	brlt	.-30     	; 0x2de <__vector_30+0x5c>
		{
			input[i] = 0;	////뒤에서 에러나서 프로토콜이 초기화 될 경우 지금까지 저장된걸 지워서 비밀번호 겹치는거 방지
		}
		Command(ALLCLR);
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	2c d7       	rcall	.+3672   	; 0x1158 <Command>
		LCD_String("PW :");
     300:	8b e0       	ldi	r24, 0x0B	; 11
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	fe d6       	rcall	.+3580   	; 0x1102 <LCD_String>
		LCD_String(password);
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	91 e0       	ldi	r25, 0x01	; 1
		Command(LINE2);
     30a:	fb d6       	rcall	.+3574   	; 0x1102 <LCD_String>
     30c:	80 ec       	ldi	r24, 0xC0	; 192
		LCD_String("RX = 1");	//단계 LCD에서 확인하기 위해
     30e:	24 d7       	rcall	.+3656   	; 0x1158 <Command>
     310:	80 e1       	ldi	r24, 0x10	; 16
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	f6 d6       	rcall	.+3564   	; 0x1102 <LCD_String>
     316:	99 c0       	rjmp	.+306    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	}
	
	else if(RX == 1)
     318:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <RX>
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	09 f0       	breq	.+2      	; 0x322 <__vector_30+0xa0>
     320:	55 c0       	rjmp	.+170    	; 0x3cc <__vector_30+0x14a>
	{
		if(ch == 'E')	//E를 받았을때 아직 프로토콜이 완료 안된 상태라 초기화
     322:	88 85       	ldd	r24, Y+8	; 0x08
     324:	85 34       	cpi	r24, 0x45	; 69
     326:	91 f4       	brne	.+36     	; 0x34c <__vector_30+0xca>
		{
			RX = 0;	//다시 대기 단계로
     328:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <RX>
			input_spot = 0;
			Command(ALLCLR);
     32c:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <input_spot.1961>
			LCD_String("PW :");
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	12 d7       	rcall	.+3620   	; 0x1158 <Command>
     334:	8b e0       	ldi	r24, 0x0B	; 11
			LCD_String(password);
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	e4 d6       	rcall	.+3528   	; 0x1102 <LCD_String>
     33a:	80 e0       	ldi	r24, 0x00	; 0
			Command(LINE2);
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	e1 d6       	rcall	.+3522   	; 0x1102 <LCD_String>
     340:	80 ec       	ldi	r24, 0xC0	; 192
			LCD_String("RX = 0");
     342:	0a d7       	rcall	.+3604   	; 0x1158 <Command>
     344:	87 e1       	ldi	r24, 0x17	; 23
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	dc d6       	rcall	.+3512   	; 0x1102 <LCD_String>
     34a:	7f c0       	rjmp	.+254    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		}
		else if(ch == 'R')	//비밀번호가 맞는지 확인하는 단계
     34c:	88 85       	ldd	r24, Y+8	; 0x08
     34e:	82 35       	cpi	r24, 0x52	; 82
		{
			if(strcmp(password, input) == 0)
     350:	69 f5       	brne	.+90     	; 0x3ac <__vector_30+0x12a>
     352:	60 e4       	ldi	r22, 0x40	; 64
     354:	71 e0       	ldi	r23, 0x01	; 1
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	0e 94 92 15 	call	0x2b24	; 0x2b24 <strcmp>
			{
				Command(ALLCLR);
     35e:	89 2b       	or	r24, r25
				LCD_String("PW :");
     360:	99 f4       	brne	.+38     	; 0x388 <__vector_30+0x106>
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	f9 d6       	rcall	.+3570   	; 0x1158 <Command>
     366:	8b e0       	ldi	r24, 0x0B	; 11
				LCD_String(password);
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	cb d6       	rcall	.+3478   	; 0x1102 <LCD_String>
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	91 e0       	ldi	r25, 0x01	; 1
				Command(LINE2);
     370:	c8 d6       	rcall	.+3472   	; 0x1102 <LCD_String>
     372:	80 ec       	ldi	r24, 0xC0	; 192
     374:	f1 d6       	rcall	.+3554   	; 0x1158 <Command>
				LCD_String("RX = 2");	//맞으면 입력하는 단계 갔다고 확인하기 위해
     376:	8e e1       	ldi	r24, 0x1E	; 30
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	c3 d6       	rcall	.+3462   	; 0x1102 <LCD_String>
				RX = 2;
     37c:	82 e0       	ldi	r24, 0x02	; 2
     37e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <RX>
				input_spot = 0;
     382:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <input_spot.1961>
			}
			else	//비밀번호 틀리면 초기화
			{
				RX = 0;
				input_spot = 0;
     386:	61 c0       	rjmp	.+194    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     388:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <RX>
				Command(ALLCLR);
     38c:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <input_spot.1961>
				LCD_String("PW :");
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	e2 d6       	rcall	.+3524   	; 0x1158 <Command>
     394:	8b e0       	ldi	r24, 0x0B	; 11
     396:	91 e0       	ldi	r25, 0x01	; 1
				LCD_String(password);
     398:	b4 d6       	rcall	.+3432   	; 0x1102 <LCD_String>
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	b1 d6       	rcall	.+3426   	; 0x1102 <LCD_String>
				Command(LINE2);
     3a0:	80 ec       	ldi	r24, 0xC0	; 192
     3a2:	da d6       	rcall	.+3508   	; 0x1158 <Command>
     3a4:	87 e1       	ldi	r24, 0x17	; 23
				LCD_String("RX = 0");
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	ac d6       	rcall	.+3416   	; 0x1102 <LCD_String>
     3aa:	4f c0       	rjmp	.+158    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3ac:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <input_spot.1961>
			}
		}
		else  //명령어가 아니면 비밀번호로 간주하여 입력값에 넣는다
		{
			input[input_spot] = ch;
     3b0:	08 2e       	mov	r0, r24
     3b2:	00 0c       	add	r0, r0
     3b4:	99 0b       	sbc	r25, r25
     3b6:	28 85       	ldd	r18, Y+8	; 0x08
     3b8:	80 5c       	subi	r24, 0xC0	; 192
     3ba:	9e 4f       	sbci	r25, 0xFE	; 254
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18
     3c0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <input_spot.1961>
			input_spot++;
     3c4:	8f 5f       	subi	r24, 0xFF	; 255
     3c6:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <input_spot.1961>
     3ca:	3f c0       	rjmp	.+126    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		}
	}
	else if(RX == 2)	//단계 2일 경우
     3cc:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <RX>
     3d0:	82 30       	cpi	r24, 0x02	; 2
	{
		if(ch == 'E')	//E를 받았을때 블루투스 완료 플래그 온
     3d2:	09 f0       	breq	.+2      	; 0x3d6 <__vector_30+0x154>
     3d4:	3a c0       	rjmp	.+116    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		{
			rx_complete = 1;
     3d6:	88 85       	ldd	r24, Y+8	; 0x08
     3d8:	85 34       	cpi	r24, 0x45	; 69
     3da:	99 f4       	brne	.+38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			RX = 0;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <rx_complete>
			Command(ALLCLR);
     3e2:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <RX>
			LCD_String("PW :");
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	b7 d6       	rcall	.+3438   	; 0x1158 <Command>
			LCD_String(password);
     3ea:	8b e0       	ldi	r24, 0x0B	; 11
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	89 d6       	rcall	.+3346   	; 0x1102 <LCD_String>
			Command(LINE2);
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	91 e0       	ldi	r25, 0x01	; 1
			LCD_String("RX = 0");
     3f4:	86 d6       	rcall	.+3340   	; 0x1102 <LCD_String>
     3f6:	80 ec       	ldi	r24, 0xC0	; 192
     3f8:	af d6       	rcall	.+3422   	; 0x1158 <Command>
     3fa:	87 e1       	ldi	r24, 0x17	; 23
     3fc:	91 e0       	ldi	r25, 0x01	; 1
		}
		else if(ch == 'R')	//R이 나올 단계 아니므로 초기화
     3fe:	81 d6       	rcall	.+3330   	; 0x1102 <LCD_String>
     400:	24 c0       	rjmp	.+72     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     402:	88 85       	ldd	r24, Y+8	; 0x08
		{
			RX = 0;
     404:	82 35       	cpi	r24, 0x52	; 82
     406:	91 f4       	brne	.+36     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			input_spot = 0;
     408:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <RX>
			Command(ALLCLR);
     40c:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <input_spot.1961>
     410:	81 e0       	ldi	r24, 0x01	; 1
			LCD_String("PW :");
     412:	a2 d6       	rcall	.+3396   	; 0x1158 <Command>
     414:	8b e0       	ldi	r24, 0x0B	; 11
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	74 d6       	rcall	.+3304   	; 0x1102 <LCD_String>
			LCD_String(password);
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	71 d6       	rcall	.+3298   	; 0x1102 <LCD_String>
     420:	80 ec       	ldi	r24, 0xC0	; 192
			Command(LINE2);
     422:	9a d6       	rcall	.+3380   	; 0x1158 <Command>
     424:	87 e1       	ldi	r24, 0x17	; 23
     426:	91 e0       	ldi	r25, 0x01	; 1
			LCD_String("RX = 0");
     428:	6c d6       	rcall	.+3288   	; 0x1102 <LCD_String>
     42a:	0f c0       	rjmp	.+30     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     42c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <input_spot.1961>
     430:	08 2e       	mov	r0, r24
		}
		else  //명령어가 아니면 새로운 비밀번호로 간주하여 입력값에 넣는다
		{
			new_password[input_spot] = ch;
     432:	00 0c       	add	r0, r0
     434:	99 0b       	sbc	r25, r25
     436:	28 85       	ldd	r18, Y+8	; 0x08
     438:	84 5d       	subi	r24, 0xD4	; 212
     43a:	9e 4f       	sbci	r25, 0xFE	; 254
     43c:	fc 01       	movw	r30, r24
     43e:	20 83       	st	Z, r18
     440:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <input_spot.1961>
     444:	8f 5f       	subi	r24, 0xFF	; 255
			input_spot++;
     446:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <input_spot.1961>
     44a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rx_complete>
     44e:	81 30       	cpi	r24, 0x01	; 1
		}
	}

	if(rx_complete == 1)	//블루투스 완료시 새로운 비밀번호 입력하고 eeprom에도 저장
     450:	09 f0       	breq	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     452:	53 c0       	rjmp	.+166    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     454:	1c 82       	std	Y+4, r1	; 0x04
     456:	1b 82       	std	Y+3, r1	; 0x03
     458:	11 c0       	rjmp	.+34     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	{
		for(int i = 0; i <= input_spot; i++)
     45a:	8b 81       	ldd	r24, Y+3	; 0x03
     45c:	9c 81       	ldd	r25, Y+4	; 0x04
     45e:	84 5d       	subi	r24, 0xD4	; 212
		{
			password[i] = new_password[i];
     460:	9e 4f       	sbci	r25, 0xFE	; 254
     462:	fc 01       	movw	r30, r24
     464:	20 81       	ld	r18, Z
     466:	8b 81       	ldd	r24, Y+3	; 0x03
     468:	9c 81       	ldd	r25, Y+4	; 0x04
     46a:	80 50       	subi	r24, 0x00	; 0
     46c:	9f 4f       	sbci	r25, 0xFF	; 255
     46e:	fc 01       	movw	r30, r24
     470:	20 83       	st	Z, r18
     472:	8b 81       	ldd	r24, Y+3	; 0x03
     474:	9c 81       	ldd	r25, Y+4	; 0x04
     476:	01 96       	adiw	r24, 0x01	; 1
		}
	}

	if(rx_complete == 1)	//블루투스 완료시 새로운 비밀번호 입력하고 eeprom에도 저장
	{
		for(int i = 0; i <= input_spot; i++)
     478:	9c 83       	std	Y+4, r25	; 0x04
     47a:	8b 83       	std	Y+3, r24	; 0x03
     47c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <input_spot.1961>
     480:	28 2f       	mov	r18, r24
     482:	88 0f       	add	r24, r24
     484:	33 0b       	sbc	r19, r19
     486:	8b 81       	ldd	r24, Y+3	; 0x03
     488:	9c 81       	ldd	r25, Y+4	; 0x04
     48a:	28 17       	cp	r18, r24
     48c:	39 07       	cpc	r19, r25
     48e:	2c f7       	brge	.-54     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     490:	1e 82       	std	Y+6, r1	; 0x06
     492:	1d 82       	std	Y+5, r1	; 0x05
     494:	0b c0       	rjmp	.+22     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		{
			password[i] = new_password[i];
		}
		for(int i = 0; i < 11; i++)
     496:	8d 81       	ldd	r24, Y+5	; 0x05
     498:	9e 81       	ldd	r25, Y+6	; 0x06
     49a:	84 5d       	subi	r24, 0xD4	; 212
		{
			new_password[i] = 0;
     49c:	9e 4f       	sbci	r25, 0xFE	; 254
     49e:	fc 01       	movw	r30, r24
     4a0:	10 82       	st	Z, r1
     4a2:	8d 81       	ldd	r24, Y+5	; 0x05
     4a4:	9e 81       	ldd	r25, Y+6	; 0x06
     4a6:	01 96       	adiw	r24, 0x01	; 1
	{
		for(int i = 0; i <= input_spot; i++)
		{
			password[i] = new_password[i];
		}
		for(int i = 0; i < 11; i++)
     4a8:	9e 83       	std	Y+6, r25	; 0x06
     4aa:	8d 83       	std	Y+5, r24	; 0x05
     4ac:	8d 81       	ldd	r24, Y+5	; 0x05
     4ae:	9e 81       	ldd	r25, Y+6	; 0x06
     4b0:	0b 97       	sbiw	r24, 0x0b	; 11
     4b2:	8c f3       	brlt	.-30     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     4b4:	1f 82       	std	Y+7, r1	; 0x07
		{
			new_password[i] = 0;
		}
		for(uint8_t i = 0; i < 11; i++)
     4b6:	12 c0       	rjmp	.+36     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		{
			eeprom_update_byte(EEPROM + i,password[i]);
     4b8:	8f 81       	ldd	r24, Y+7	; 0x07
     4ba:	88 2f       	mov	r24, r24
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	80 50       	subi	r24, 0x00	; 0
     4c0:	9f 4f       	sbci	r25, 0xFF	; 255
     4c2:	fc 01       	movw	r30, r24
     4c4:	80 81       	ld	r24, Z
     4c6:	28 2f       	mov	r18, r24
     4c8:	8f 81       	ldd	r24, Y+7	; 0x07
     4ca:	88 2f       	mov	r24, r24
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	62 2f       	mov	r22, r18
     4d2:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <eeprom_update_byte>
		}
		for(int i = 0; i < 11; i++)
		{
			new_password[i] = 0;
		}
		for(uint8_t i = 0; i < 11; i++)
     4d6:	8f 81       	ldd	r24, Y+7	; 0x07
     4d8:	8f 5f       	subi	r24, 0xFF	; 255
     4da:	8f 83       	std	Y+7, r24	; 0x07
     4dc:	8f 81       	ldd	r24, Y+7	; 0x07
     4de:	8b 30       	cpi	r24, 0x0B	; 11
     4e0:	58 f3       	brcs	.-42     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		{
			eeprom_update_byte(EEPROM + i,password[i]);
		}
		Command(ALLCLR);
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	39 d6       	rcall	.+3186   	; 0x1158 <Command>
     4e6:	8b e0       	ldi	r24, 0x0B	; 11
		LCD_String("PW :");
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	0b d6       	rcall	.+3094   	; 0x1102 <LCD_String>
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	91 e0       	ldi	r25, 0x01	; 1
		LCD_String(password);
     4f0:	08 d6       	rcall	.+3088   	; 0x1102 <LCD_String>
     4f2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <input_spot.1961>
     4f6:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <rx_complete>
		input_spot = 0;	//비밀번호 자리 초기화
     4fa:	00 00       	nop
		rx_complete = 0;	//신호분석 플래그 지움
     4fc:	28 96       	adiw	r28, 0x08	; 8
     4fe:	0f b6       	in	r0, 0x3f	; 63
	}
}
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	ff 91       	pop	r31
     50e:	ef 91       	pop	r30
     510:	bf 91       	pop	r27
     512:	af 91       	pop	r26
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	7f 91       	pop	r23
     51a:	6f 91       	pop	r22
     51c:	5f 91       	pop	r21
     51e:	4f 91       	pop	r20
     520:	3f 91       	pop	r19
     522:	2f 91       	pop	r18
     524:	0f 90       	pop	r0
     526:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     52a:	0f 90       	pop	r0
     52c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     530:	0f 90       	pop	r0
     532:	1f 90       	pop	r1
     534:	18 95       	reti

00000536 <__vector_16>:
     536:	1f 92       	push	r1
     538:	0f 92       	push	r0
     53a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>


ISR(TIMER0_OVF_vect)
{
     53e:	0f 92       	push	r0
     540:	11 24       	eor	r1, r1
     542:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     546:	0f 92       	push	r0
     548:	2f 93       	push	r18
     54a:	3f 93       	push	r19
     54c:	4f 93       	push	r20
     54e:	5f 93       	push	r21
     550:	6f 93       	push	r22
     552:	7f 93       	push	r23
     554:	8f 93       	push	r24
     556:	9f 93       	push	r25
     558:	af 93       	push	r26
     55a:	bf 93       	push	r27
     55c:	ef 93       	push	r30
     55e:	ff 93       	push	r31
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	26 97       	sbiw	r28, 0x06	; 6
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	cd bf       	out	0x3d, r28	; 61
	static char scan = 0;	//스캔하는 줄, 타이버 인터럽트 발생때마다 스캔줄이 바뀌어서 static으로 초기화 방지
	static char input_spot = 0;	//비밀번호 자리
	char Key=0;	//키패드 입력값 저장소
     56e:	19 82       	std	Y+1, r1	; 0x01
	static char sw1 = 0;	//스위치가 눌리는 거 확인 플래그
	static char sw2 = 0;
	static char sw3 = 0;
	static char sw4 = 0;

	DDRA=0xF0;         // 비트0,1,2,3 출력으로 지정
     570:	8a e3       	ldi	r24, 0x3A	; 58
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	20 ef       	ldi	r18, 0xF0	; 240
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
	PORTA = 0xFF;
     57a:	8b e3       	ldi	r24, 0x3B	; 59
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	2f ef       	ldi	r18, 0xFF	; 255
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18

	if(scan == 0)
     584:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <scan.1983>
     588:	88 23       	and	r24, r24
     58a:	09 f0       	breq	.+2      	; 0x58e <__vector_16+0x58>
     58c:	49 c0       	rjmp	.+146    	; 0x620 <__vector_16+0xea>
	{
		PORTA &= ~0x10; // 1번째 줄 선택
     58e:	8b e3       	ldi	r24, 0x3B	; 59
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	2b e3       	ldi	r18, 0x3B	; 59
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	f9 01       	movw	r30, r18
     598:	20 81       	ld	r18, Z
     59a:	2f 7e       	andi	r18, 0xEF	; 239
     59c:	fc 01       	movw	r30, r24
     59e:	20 83       	st	Z, r18
		if((PINA & 0x01)==0){
     5a0:	89 e3       	ldi	r24, 0x39	; 57
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	fc 01       	movw	r30, r24
     5a6:	80 81       	ld	r24, Z
     5a8:	88 2f       	mov	r24, r24
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	81 70       	andi	r24, 0x01	; 1
     5ae:	99 27       	eor	r25, r25
     5b0:	89 2b       	or	r24, r25
     5b2:	31 f4       	brne	.+12     	; 0x5c0 <__vector_16+0x8a>
			Key='1';
     5b4:	81 e3       	ldi	r24, 0x31	; 49
     5b6:	89 83       	std	Y+1, r24	; 0x01
			sw1 = 1;
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <sw1.1986>
     5be:	1f c0       	rjmp	.+62     	; 0x5fe <__vector_16+0xc8>
		}
		else if((PINA & 0x02)==0){
     5c0:	89 e3       	ldi	r24, 0x39	; 57
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	fc 01       	movw	r30, r24
     5c6:	80 81       	ld	r24, Z
     5c8:	88 2f       	mov	r24, r24
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	82 70       	andi	r24, 0x02	; 2
     5ce:	99 27       	eor	r25, r25
     5d0:	89 2b       	or	r24, r25
     5d2:	31 f4       	brne	.+12     	; 0x5e0 <__vector_16+0xaa>
			Key='2';
     5d4:	82 e3       	ldi	r24, 0x32	; 50
     5d6:	89 83       	std	Y+1, r24	; 0x01
			sw1 = 1;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <sw1.1986>
     5de:	0f c0       	rjmp	.+30     	; 0x5fe <__vector_16+0xc8>
		}
		else if((PINA & 0x04)==0){
     5e0:	89 e3       	ldi	r24, 0x39	; 57
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	fc 01       	movw	r30, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	88 2f       	mov	r24, r24
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	84 70       	andi	r24, 0x04	; 4
     5ee:	99 27       	eor	r25, r25
     5f0:	89 2b       	or	r24, r25
     5f2:	29 f4       	brne	.+10     	; 0x5fe <__vector_16+0xc8>
			Key='3';
     5f4:	83 e3       	ldi	r24, 0x33	; 51
     5f6:	89 83       	std	Y+1, r24	; 0x01
			sw1 = 1;
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <sw1.1986>
		}
		if((PINA & 0b00000111) == 0b00000111) sw1 = 0;
     5fe:	89 e3       	ldi	r24, 0x39	; 57
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	fc 01       	movw	r30, r24
     604:	80 81       	ld	r24, Z
     606:	88 2f       	mov	r24, r24
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	87 70       	andi	r24, 0x07	; 7
     60c:	99 27       	eor	r25, r25
     60e:	07 97       	sbiw	r24, 0x07	; 7
     610:	11 f4       	brne	.+4      	; 0x616 <__vector_16+0xe0>
     612:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <sw1.1986>
		PORTA = 0xFF; // 1번째 줄 해제
     616:	8b e3       	ldi	r24, 0x3B	; 59
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	2f ef       	ldi	r18, 0xFF	; 255
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18
	}
	
	if(scan == 1)
     620:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <scan.1983>
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	09 f0       	breq	.+2      	; 0x62a <__vector_16+0xf4>
     628:	49 c0       	rjmp	.+146    	; 0x6bc <__vector_16+0x186>
	{
		PORTA &= ~0x20; // 2번째 줄 선택
     62a:	8b e3       	ldi	r24, 0x3B	; 59
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	2b e3       	ldi	r18, 0x3B	; 59
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	f9 01       	movw	r30, r18
     634:	20 81       	ld	r18, Z
     636:	2f 7d       	andi	r18, 0xDF	; 223
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
		if((PINA & 0x01)==0){
     63c:	89 e3       	ldi	r24, 0x39	; 57
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	fc 01       	movw	r30, r24
     642:	80 81       	ld	r24, Z
     644:	88 2f       	mov	r24, r24
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	81 70       	andi	r24, 0x01	; 1
     64a:	99 27       	eor	r25, r25
     64c:	89 2b       	or	r24, r25
     64e:	31 f4       	brne	.+12     	; 0x65c <__vector_16+0x126>
			Key='4';
     650:	84 e3       	ldi	r24, 0x34	; 52
     652:	89 83       	std	Y+1, r24	; 0x01
			sw2 = 1;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <sw2.1987>
     65a:	1f c0       	rjmp	.+62     	; 0x69a <__vector_16+0x164>
		}
		else if((PINA & 0x02)==0){
     65c:	89 e3       	ldi	r24, 0x39	; 57
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	fc 01       	movw	r30, r24
     662:	80 81       	ld	r24, Z
     664:	88 2f       	mov	r24, r24
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	82 70       	andi	r24, 0x02	; 2
     66a:	99 27       	eor	r25, r25
     66c:	89 2b       	or	r24, r25
     66e:	31 f4       	brne	.+12     	; 0x67c <__vector_16+0x146>
			Key='5';
     670:	85 e3       	ldi	r24, 0x35	; 53
     672:	89 83       	std	Y+1, r24	; 0x01
			sw2 = 1;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <sw2.1987>
     67a:	0f c0       	rjmp	.+30     	; 0x69a <__vector_16+0x164>
		}
		else if((PINA & 0x04)==0){
     67c:	89 e3       	ldi	r24, 0x39	; 57
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	fc 01       	movw	r30, r24
     682:	80 81       	ld	r24, Z
     684:	88 2f       	mov	r24, r24
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	84 70       	andi	r24, 0x04	; 4
     68a:	99 27       	eor	r25, r25
     68c:	89 2b       	or	r24, r25
     68e:	29 f4       	brne	.+10     	; 0x69a <__vector_16+0x164>
			Key='6';
     690:	86 e3       	ldi	r24, 0x36	; 54
     692:	89 83       	std	Y+1, r24	; 0x01
			sw2 = 1;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <sw2.1987>
		}
		if((PINA & 0b00000111) == 0b00000111) sw2 = 0;
     69a:	89 e3       	ldi	r24, 0x39	; 57
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	fc 01       	movw	r30, r24
     6a0:	80 81       	ld	r24, Z
     6a2:	88 2f       	mov	r24, r24
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	87 70       	andi	r24, 0x07	; 7
     6a8:	99 27       	eor	r25, r25
     6aa:	07 97       	sbiw	r24, 0x07	; 7
     6ac:	11 f4       	brne	.+4      	; 0x6b2 <__vector_16+0x17c>
     6ae:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <sw2.1987>
		PORTA=0xFF; // 2번째 줄 해제
     6b2:	8b e3       	ldi	r24, 0x3B	; 59
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	2f ef       	ldi	r18, 0xFF	; 255
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 83       	st	Z, r18
	}
	
	if(scan == 2)
     6bc:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <scan.1983>
     6c0:	82 30       	cpi	r24, 0x02	; 2
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <__vector_16+0x190>
     6c4:	49 c0       	rjmp	.+146    	; 0x758 <__vector_16+0x222>
	{
		PORTA &= ~0x40; // 3번째 줄 선택
     6c6:	8b e3       	ldi	r24, 0x3B	; 59
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	2b e3       	ldi	r18, 0x3B	; 59
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	f9 01       	movw	r30, r18
     6d0:	20 81       	ld	r18, Z
     6d2:	2f 7b       	andi	r18, 0xBF	; 191
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 83       	st	Z, r18
		if((PINA & 0x01)==0){
     6d8:	89 e3       	ldi	r24, 0x39	; 57
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	fc 01       	movw	r30, r24
     6de:	80 81       	ld	r24, Z
     6e0:	88 2f       	mov	r24, r24
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	81 70       	andi	r24, 0x01	; 1
     6e6:	99 27       	eor	r25, r25
     6e8:	89 2b       	or	r24, r25
     6ea:	31 f4       	brne	.+12     	; 0x6f8 <__vector_16+0x1c2>
			Key='7';
     6ec:	87 e3       	ldi	r24, 0x37	; 55
     6ee:	89 83       	std	Y+1, r24	; 0x01
			sw3 = 1;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <sw3.1988>
     6f6:	1f c0       	rjmp	.+62     	; 0x736 <__vector_16+0x200>
		}
		else if((PINA & 0x02)==0){
     6f8:	89 e3       	ldi	r24, 0x39	; 57
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	fc 01       	movw	r30, r24
     6fe:	80 81       	ld	r24, Z
     700:	88 2f       	mov	r24, r24
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	82 70       	andi	r24, 0x02	; 2
     706:	99 27       	eor	r25, r25
     708:	89 2b       	or	r24, r25
     70a:	31 f4       	brne	.+12     	; 0x718 <__vector_16+0x1e2>
			Key='8';
     70c:	88 e3       	ldi	r24, 0x38	; 56
     70e:	89 83       	std	Y+1, r24	; 0x01
			sw3 = 1;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <sw3.1988>
     716:	0f c0       	rjmp	.+30     	; 0x736 <__vector_16+0x200>
		}
		else if((PINA & 0x04)==0){
     718:	89 e3       	ldi	r24, 0x39	; 57
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	fc 01       	movw	r30, r24
     71e:	80 81       	ld	r24, Z
     720:	88 2f       	mov	r24, r24
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	84 70       	andi	r24, 0x04	; 4
     726:	99 27       	eor	r25, r25
     728:	89 2b       	or	r24, r25
     72a:	29 f4       	brne	.+10     	; 0x736 <__vector_16+0x200>
			Key='9';
     72c:	89 e3       	ldi	r24, 0x39	; 57
     72e:	89 83       	std	Y+1, r24	; 0x01
			sw3 = 1;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <sw3.1988>
		}
		if((PINA & 0b00000111) == 0b00000111) sw3 = 0;
     736:	89 e3       	ldi	r24, 0x39	; 57
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	fc 01       	movw	r30, r24
     73c:	80 81       	ld	r24, Z
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	87 70       	andi	r24, 0x07	; 7
     744:	99 27       	eor	r25, r25
     746:	07 97       	sbiw	r24, 0x07	; 7
     748:	11 f4       	brne	.+4      	; 0x74e <__vector_16+0x218>
     74a:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <sw3.1988>
		PORTA=0xFF; // 3번째 줄 해제
     74e:	8b e3       	ldi	r24, 0x3B	; 59
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	2f ef       	ldi	r18, 0xFF	; 255
     754:	fc 01       	movw	r30, r24
     756:	20 83       	st	Z, r18
	}
	
	if(scan == 3)
     758:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <scan.1983>
     75c:	83 30       	cpi	r24, 0x03	; 3
     75e:	09 f0       	breq	.+2      	; 0x762 <__vector_16+0x22c>
     760:	49 c0       	rjmp	.+146    	; 0x7f4 <__vector_16+0x2be>
	{
		PORTA &= ~0x80; // 4번째 줄 선택
     762:	8b e3       	ldi	r24, 0x3B	; 59
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	2b e3       	ldi	r18, 0x3B	; 59
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	f9 01       	movw	r30, r18
     76c:	20 81       	ld	r18, Z
     76e:	2f 77       	andi	r18, 0x7F	; 127
     770:	fc 01       	movw	r30, r24
     772:	20 83       	st	Z, r18
		if((PINA & 0x01)==0){
     774:	89 e3       	ldi	r24, 0x39	; 57
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	fc 01       	movw	r30, r24
     77a:	80 81       	ld	r24, Z
     77c:	88 2f       	mov	r24, r24
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	81 70       	andi	r24, 0x01	; 1
     782:	99 27       	eor	r25, r25
     784:	89 2b       	or	r24, r25
     786:	31 f4       	brne	.+12     	; 0x794 <__vector_16+0x25e>
			Key='0';
     788:	80 e3       	ldi	r24, 0x30	; 48
     78a:	89 83       	std	Y+1, r24	; 0x01
			sw4 = 1;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <sw4.1989>
     792:	1f c0       	rjmp	.+62     	; 0x7d2 <__vector_16+0x29c>
		}
		else if((PINA & 0x02)==0){
     794:	89 e3       	ldi	r24, 0x39	; 57
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	fc 01       	movw	r30, r24
     79a:	80 81       	ld	r24, Z
     79c:	88 2f       	mov	r24, r24
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	82 70       	andi	r24, 0x02	; 2
     7a2:	99 27       	eor	r25, r25
     7a4:	89 2b       	or	r24, r25
     7a6:	31 f4       	brne	.+12     	; 0x7b4 <__vector_16+0x27e>
			Key='Y';
     7a8:	89 e5       	ldi	r24, 0x59	; 89
     7aa:	89 83       	std	Y+1, r24	; 0x01
			sw4 = 1;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <sw4.1989>
     7b2:	0f c0       	rjmp	.+30     	; 0x7d2 <__vector_16+0x29c>
		}
		else if((PINA & 0x04)==0){
     7b4:	89 e3       	ldi	r24, 0x39	; 57
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	fc 01       	movw	r30, r24
     7ba:	80 81       	ld	r24, Z
     7bc:	88 2f       	mov	r24, r24
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	84 70       	andi	r24, 0x04	; 4
     7c2:	99 27       	eor	r25, r25
     7c4:	89 2b       	or	r24, r25
     7c6:	29 f4       	brne	.+10     	; 0x7d2 <__vector_16+0x29c>
			Key='N';
     7c8:	8e e4       	ldi	r24, 0x4E	; 78
     7ca:	89 83       	std	Y+1, r24	; 0x01
			sw4 = 1;
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <sw4.1989>
		}
		if((PINA & 0b00000111) == 0b00000111) sw4 = 0;
     7d2:	89 e3       	ldi	r24, 0x39	; 57
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	fc 01       	movw	r30, r24
     7d8:	80 81       	ld	r24, Z
     7da:	88 2f       	mov	r24, r24
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	87 70       	andi	r24, 0x07	; 7
     7e0:	99 27       	eor	r25, r25
     7e2:	07 97       	sbiw	r24, 0x07	; 7
     7e4:	11 f4       	brne	.+4      	; 0x7ea <__vector_16+0x2b4>
     7e6:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <sw4.1989>
		PORTA=0xFF; // 4번째 줄 해제
     7ea:	8b e3       	ldi	r24, 0x3B	; 59
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	2f ef       	ldi	r18, 0xFF	; 255
     7f0:	fc 01       	movw	r30, r24
     7f2:	20 83       	st	Z, r18
	}
	scan++;
     7f4:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <scan.1983>
     7f8:	8f 5f       	subi	r24, 0xFF	; 255
     7fa:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <scan.1983>
	if(scan == 4) scan = 0;
     7fe:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <scan.1983>
     802:	84 30       	cpi	r24, 0x04	; 4
     804:	11 f4       	brne	.+4      	; 0x80a <__vector_16+0x2d4>
     806:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <scan.1983>
	ch = Key;
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>

	if(state == close)	//닫혀있는 상태
     810:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <state>
     814:	88 23       	and	r24, r24
     816:	09 f0       	breq	.+2      	; 0x81a <__vector_16+0x2e4>
     818:	a8 c0       	rjmp	.+336    	; 0x96a <__vector_16+0x434>
	{
		OCR1A = 2000;	//1ms 펄스, 서보모터 제어
     81a:	8a e4       	ldi	r24, 0x4A	; 74
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	20 ed       	ldi	r18, 0xD0	; 208
     820:	37 e0       	ldi	r19, 0x07	; 7
     822:	fc 01       	movw	r30, r24
     824:	31 83       	std	Z+1, r19	; 0x01
     826:	20 83       	st	Z, r18
		if(ch == 'Y'  && sw1 == 0 && sw2 == 0 && sw3 == 0 && sw4 == 0)	//확인버튼 비밀번호 확인
     828:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     82c:	89 35       	cpi	r24, 0x59	; 89
     82e:	09 f0       	breq	.+2      	; 0x832 <__vector_16+0x2fc>
     830:	39 c0       	rjmp	.+114    	; 0x8a4 <__vector_16+0x36e>
     832:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sw1.1986>
     836:	88 23       	and	r24, r24
     838:	a9 f5       	brne	.+106    	; 0x8a4 <__vector_16+0x36e>
     83a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <sw2.1987>
     83e:	88 23       	and	r24, r24
     840:	89 f5       	brne	.+98     	; 0x8a4 <__vector_16+0x36e>
     842:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <sw3.1988>
     846:	88 23       	and	r24, r24
     848:	69 f5       	brne	.+90     	; 0x8a4 <__vector_16+0x36e>
     84a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <sw4.1989>
     84e:	88 23       	and	r24, r24
     850:	49 f5       	brne	.+82     	; 0x8a4 <__vector_16+0x36e>
		{
			Command(ALLCLR);
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	81 d4       	rcall	.+2306   	; 0x1158 <Command>
			input[input_spot] = '\0';
     856:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <input_spot.1984>
     85a:	08 2e       	mov	r0, r24
     85c:	00 0c       	add	r0, r0
     85e:	99 0b       	sbc	r25, r25
     860:	80 5c       	subi	r24, 0xC0	; 192
     862:	9e 4f       	sbci	r25, 0xFE	; 254
     864:	fc 01       	movw	r30, r24
     866:	10 82       	st	Z, r1
			if(strcmp(password, input) == 0)	//맞으면 열려있는 상태로 전환
     868:	60 e4       	ldi	r22, 0x40	; 64
     86a:	71 e0       	ldi	r23, 0x01	; 1
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 92 15 	call	0x2b24	; 0x2b24 <strcmp>
     874:	89 2b       	or	r24, r25
     876:	59 f4       	brne	.+22     	; 0x88e <__vector_16+0x358>
			{
				state = open;
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <state>
				input_spot = 0;
     87e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <input_spot.1984>
				LCD_String("OPEN");
     882:	85 e2       	ldi	r24, 0x25	; 37
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	3d d4       	rcall	.+2170   	; 0x1102 <LCD_String>
				Command(LINE2);
     888:	80 ec       	ldi	r24, 0xC0	; 192
     88a:	66 d4       	rcall	.+2252   	; 0x1158 <Command>
     88c:	4c c1       	rjmp	.+664    	; 0xb26 <__vector_16+0x5f0>
		OCR1A = 2000;	//1ms 펄스, 서보모터 제어
		if(ch == 'Y'  && sw1 == 0 && sw2 == 0 && sw3 == 0 && sw4 == 0)	//확인버튼 비밀번호 확인
		{
			Command(ALLCLR);
			input[input_spot] = '\0';
			if(strcmp(password, input) == 0)	//맞으면 열려있는 상태로 전환
     88e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <input_spot.1984>
				Command(LINE2);
			}
			else  //틀리면 초기화
			{
				input_spot = 0;
				LCD_String("PW :");
     892:	8b e0       	ldi	r24, 0x0B	; 11
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	35 d4       	rcall	.+2154   	; 0x1102 <LCD_String>
				LCD_String(password);
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	32 d4       	rcall	.+2148   	; 0x1102 <LCD_String>
				Command(LINE2);
     89e:	80 ec       	ldi	r24, 0xC0	; 192
     8a0:	5b d4       	rcall	.+2230   	; 0x1158 <Command>
     8a2:	41 c1       	rjmp	.+642    	; 0xb26 <__vector_16+0x5f0>
		OCR1A = 2000;	//1ms 펄스, 서보모터 제어
		if(ch == 'Y'  && sw1 == 0 && sw2 == 0 && sw3 == 0 && sw4 == 0)	//확인버튼 비밀번호 확인
		{
			Command(ALLCLR);
			input[input_spot] = '\0';
			if(strcmp(password, input) == 0)	//맞으면 열려있는 상태로 전환
     8a4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
				Command(LINE2);
			}


		}
		else if(ch == 'N' && sw1 == 0 && sw2 == 0 && sw3 == 0 && sw4 == 0)	//취소버튼 초기화
     8a8:	8e 34       	cpi	r24, 0x4E	; 78
     8aa:	d9 f4       	brne	.+54     	; 0x8e2 <__vector_16+0x3ac>
     8ac:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sw1.1986>
     8b0:	88 23       	and	r24, r24
     8b2:	b9 f4       	brne	.+46     	; 0x8e2 <__vector_16+0x3ac>
     8b4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <sw2.1987>
     8b8:	88 23       	and	r24, r24
     8ba:	99 f4       	brne	.+38     	; 0x8e2 <__vector_16+0x3ac>
     8bc:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <sw3.1988>
     8c0:	88 23       	and	r24, r24
     8c2:	79 f4       	brne	.+30     	; 0x8e2 <__vector_16+0x3ac>
     8c4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <sw4.1989>
     8c8:	88 23       	and	r24, r24
		{
			Command(ALLCLR);
     8ca:	59 f4       	brne	.+22     	; 0x8e2 <__vector_16+0x3ac>
     8cc:	81 e0       	ldi	r24, 0x01	; 1
			LCD_String("PW :");
     8ce:	44 d4       	rcall	.+2184   	; 0x1158 <Command>
     8d0:	8b e0       	ldi	r24, 0x0B	; 11
     8d2:	91 e0       	ldi	r25, 0x01	; 1
			LCD_String(password);
     8d4:	16 d4       	rcall	.+2092   	; 0x1102 <LCD_String>
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	13 d4       	rcall	.+2086   	; 0x1102 <LCD_String>
			Command(LINE2);
     8dc:	80 ec       	ldi	r24, 0xC0	; 192
     8de:	3c d4       	rcall	.+2168   	; 0x1158 <Command>
     8e0:	22 c1       	rjmp	.+580    	; 0xb26 <__vector_16+0x5f0>
     8e2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
		}
		else if(ch != 0 && sw1 == 0 && sw2 == 0 && sw3 == 0 && sw4 == 0)	//앞에경우와 가만히 있는경우(ch = 0) 제외하면 비밀번호 입력
     8e6:	88 23       	and	r24, r24
     8e8:	09 f4       	brne	.+2      	; 0x8ec <__vector_16+0x3b6>
     8ea:	1d c1       	rjmp	.+570    	; 0xb26 <__vector_16+0x5f0>
     8ec:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sw1.1986>
     8f0:	88 23       	and	r24, r24
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <__vector_16+0x3c0>
     8f4:	18 c1       	rjmp	.+560    	; 0xb26 <__vector_16+0x5f0>
     8f6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <sw2.1987>
     8fa:	88 23       	and	r24, r24
     8fc:	09 f0       	breq	.+2      	; 0x900 <__vector_16+0x3ca>
     8fe:	13 c1       	rjmp	.+550    	; 0xb26 <__vector_16+0x5f0>
     900:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <sw3.1988>
     904:	88 23       	and	r24, r24
     906:	09 f0       	breq	.+2      	; 0x90a <__vector_16+0x3d4>
     908:	0e c1       	rjmp	.+540    	; 0xb26 <__vector_16+0x5f0>
     90a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <sw4.1989>
     90e:	88 23       	and	r24, r24
     910:	09 f0       	breq	.+2      	; 0x914 <__vector_16+0x3de>
		{
			
			if(input_spot == 10)	//입력자리가 11번째일때 다시 1번째 자리로
     912:	09 c1       	rjmp	.+530    	; 0xb26 <__vector_16+0x5f0>
     914:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <input_spot.1984>
			{
				Command(ALLCLR);
     918:	8a 30       	cpi	r24, 0x0A	; 10
     91a:	61 f4       	brne	.+24     	; 0x934 <__vector_16+0x3fe>
     91c:	81 e0       	ldi	r24, 0x01	; 1
				LCD_String("PW :");
     91e:	1c d4       	rcall	.+2104   	; 0x1158 <Command>
     920:	8b e0       	ldi	r24, 0x0B	; 11
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	ee d3       	rcall	.+2012   	; 0x1102 <LCD_String>
				LCD_String(password);
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	eb d3       	rcall	.+2006   	; 0x1102 <LCD_String>
     92c:	80 ec       	ldi	r24, 0xC0	; 192
				Command(LINE2);
     92e:	14 d4       	rcall	.+2088   	; 0x1158 <Command>
     930:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <input_spot.1984>
				input_spot = 0;	//입력자리 초기화
     934:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
			}
			Data(ch);	//입력한거 화면표시
     938:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <Data>
     93c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <input_spot.1984>
			input[input_spot] = ch;	//입력값 추가
     940:	08 2e       	mov	r0, r24
     942:	00 0c       	add	r0, r0
     944:	99 0b       	sbc	r25, r25
     946:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
     94a:	80 5c       	subi	r24, 0xC0	; 192
     94c:	9e 4f       	sbci	r25, 0xFE	; 254
     94e:	fc 01       	movw	r30, r24
     950:	20 83       	st	Z, r18
     952:	43 e0       	ldi	r20, 0x03	; 3
			SendCommand01(0x0F, 0x01, 0x03);	//입력될때 mp3 스위치음
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	8f e0       	ldi	r24, 0x0F	; 15
     958:	4f dc       	rcall	.-1890   	; 0x1f8 <SendCommand01>
     95a:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <input_spot.1984>
			input_spot++;	//입력자리 증가
     95e:	8f 5f       	subi	r24, 0xFF	; 255
     960:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <input_spot.1984>
     964:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
			ch = 0;	//입력값 초기화
     968:	de c0       	rjmp	.+444    	; 0xb26 <__vector_16+0x5f0>
     96a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <state>
		}
	}

	else if(state == open)	//열려있는 상태
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	09 f0       	breq	.+2      	; 0x974 <__vector_16+0x43e>
     972:	d9 c0       	rjmp	.+434    	; 0xb26 <__vector_16+0x5f0>
     974:	8a e4       	ldi	r24, 0x4A	; 74
     976:	90 e0       	ldi	r25, 0x00	; 0
	{
		OCR1A = 4000;	//2ms 펄스, 서보모터 제어
     978:	20 ea       	ldi	r18, 0xA0	; 160
     97a:	3f e0       	ldi	r19, 0x0F	; 15
     97c:	fc 01       	movw	r30, r24
     97e:	31 83       	std	Z+1, r19	; 0x01
     980:	20 83       	st	Z, r18
     982:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
		if(ch == 'Y' && sw1 == 0 && sw2 == 0 && sw3 == 0 && sw4 == 0)	//새로운 비밀번호 입력 완료
     986:	89 35       	cpi	r24, 0x59	; 89
     988:	09 f0       	breq	.+2      	; 0x98c <__vector_16+0x456>
     98a:	6a c0       	rjmp	.+212    	; 0xa60 <__vector_16+0x52a>
     98c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sw1.1986>
     990:	88 23       	and	r24, r24
     992:	09 f0       	breq	.+2      	; 0x996 <__vector_16+0x460>
     994:	65 c0       	rjmp	.+202    	; 0xa60 <__vector_16+0x52a>
     996:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <sw2.1987>
     99a:	88 23       	and	r24, r24
     99c:	09 f0       	breq	.+2      	; 0x9a0 <__vector_16+0x46a>
     99e:	60 c0       	rjmp	.+192    	; 0xa60 <__vector_16+0x52a>
     9a0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <sw3.1988>
     9a4:	88 23       	and	r24, r24
     9a6:	09 f0       	breq	.+2      	; 0x9aa <__vector_16+0x474>
     9a8:	5b c0       	rjmp	.+182    	; 0xa60 <__vector_16+0x52a>
     9aa:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <sw4.1989>
     9ae:	88 23       	and	r24, r24
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <__vector_16+0x47e>
     9b2:	56 c0       	rjmp	.+172    	; 0xa60 <__vector_16+0x52a>
     9b4:	1b 82       	std	Y+3, r1	; 0x03
     9b6:	1a 82       	std	Y+2, r1	; 0x02
		{
			
			for(int i = 0; i <= input_spot; i++)
     9b8:	11 c0       	rjmp	.+34     	; 0x9dc <__vector_16+0x4a6>
     9ba:	8a 81       	ldd	r24, Y+2	; 0x02
     9bc:	9b 81       	ldd	r25, Y+3	; 0x03
			{
				password[i] = new_password[i];	//새로운 비밀번호로 갱신
     9be:	84 5d       	subi	r24, 0xD4	; 212
     9c0:	9e 4f       	sbci	r25, 0xFE	; 254
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 81       	ld	r18, Z
     9c6:	8a 81       	ldd	r24, Y+2	; 0x02
     9c8:	9b 81       	ldd	r25, Y+3	; 0x03
     9ca:	80 50       	subi	r24, 0x00	; 0
     9cc:	9f 4f       	sbci	r25, 0xFF	; 255
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 83       	st	Z, r18
     9d2:	8a 81       	ldd	r24, Y+2	; 0x02
     9d4:	9b 81       	ldd	r25, Y+3	; 0x03
	{
		OCR1A = 4000;	//2ms 펄스, 서보모터 제어
		if(ch == 'Y' && sw1 == 0 && sw2 == 0 && sw3 == 0 && sw4 == 0)	//새로운 비밀번호 입력 완료
		{
			
			for(int i = 0; i <= input_spot; i++)
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	9b 83       	std	Y+3, r25	; 0x03
     9da:	8a 83       	std	Y+2, r24	; 0x02
     9dc:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <input_spot.1984>
     9e0:	28 2f       	mov	r18, r24
     9e2:	88 0f       	add	r24, r24
     9e4:	33 0b       	sbc	r19, r19
     9e6:	8a 81       	ldd	r24, Y+2	; 0x02
     9e8:	9b 81       	ldd	r25, Y+3	; 0x03
     9ea:	28 17       	cp	r18, r24
     9ec:	39 07       	cpc	r19, r25
     9ee:	2c f7       	brge	.-54     	; 0x9ba <__vector_16+0x484>
     9f0:	1d 82       	std	Y+5, r1	; 0x05
     9f2:	1c 82       	std	Y+4, r1	; 0x04
			{
				password[i] = new_password[i];	//새로운 비밀번호로 갱신
			}
			for(int i = 0; i < 11; i++)
     9f4:	0b c0       	rjmp	.+22     	; 0xa0c <__vector_16+0x4d6>
     9f6:	8c 81       	ldd	r24, Y+4	; 0x04
     9f8:	9d 81       	ldd	r25, Y+5	; 0x05
			{
				new_password[i] = 0;	//새로운 비밀번호 받는 자리 초기화 마지막 Null값이 되게
     9fa:	84 5d       	subi	r24, 0xD4	; 212
     9fc:	9e 4f       	sbci	r25, 0xFE	; 254
     9fe:	fc 01       	movw	r30, r24
     a00:	10 82       	st	Z, r1
     a02:	8c 81       	ldd	r24, Y+4	; 0x04
     a04:	9d 81       	ldd	r25, Y+5	; 0x05
			
			for(int i = 0; i <= input_spot; i++)
			{
				password[i] = new_password[i];	//새로운 비밀번호로 갱신
			}
			for(int i = 0; i < 11; i++)
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	9d 83       	std	Y+5, r25	; 0x05
     a0a:	8c 83       	std	Y+4, r24	; 0x04
     a0c:	8c 81       	ldd	r24, Y+4	; 0x04
     a0e:	9d 81       	ldd	r25, Y+5	; 0x05
     a10:	0b 97       	sbiw	r24, 0x0b	; 11
     a12:	8c f3       	brlt	.-30     	; 0x9f6 <__vector_16+0x4c0>
     a14:	1e 82       	std	Y+6, r1	; 0x06
     a16:	12 c0       	rjmp	.+36     	; 0xa3c <__vector_16+0x506>
			{
				new_password[i] = 0;	//새로운 비밀번호 받는 자리 초기화 마지막 Null값이 되게
			}
			for(uint8_t i = 0; i < 11; i++)
     a18:	8e 81       	ldd	r24, Y+6	; 0x06
     a1a:	88 2f       	mov	r24, r24
			{
				eeprom_update_byte(EEPROM + i,password[i]);	//새로운 비밀번호 eeprom으로 저장
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	80 50       	subi	r24, 0x00	; 0
     a20:	9f 4f       	sbci	r25, 0xFF	; 255
     a22:	fc 01       	movw	r30, r24
     a24:	80 81       	ld	r24, Z
     a26:	28 2f       	mov	r18, r24
     a28:	8e 81       	ldd	r24, Y+6	; 0x06
     a2a:	88 2f       	mov	r24, r24
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	62 2f       	mov	r22, r18
     a32:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <eeprom_update_byte>
     a36:	8e 81       	ldd	r24, Y+6	; 0x06
			}
			for(int i = 0; i < 11; i++)
			{
				new_password[i] = 0;	//새로운 비밀번호 받는 자리 초기화 마지막 Null값이 되게
			}
			for(uint8_t i = 0; i < 11; i++)
     a38:	8f 5f       	subi	r24, 0xFF	; 255
     a3a:	8e 83       	std	Y+6, r24	; 0x06
     a3c:	8e 81       	ldd	r24, Y+6	; 0x06
     a3e:	8b 30       	cpi	r24, 0x0B	; 11
			{
				eeprom_update_byte(EEPROM + i,password[i]);	//새로운 비밀번호 eeprom으로 저장
			}

			Command(ALLCLR);	//화면 초기화
     a40:	58 f3       	brcs	.-42     	; 0xa18 <__vector_16+0x4e2>
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	89 d3       	rcall	.+1810   	; 0x1158 <Command>
			state = close;	//새로운 비밀번호 입력후 다시 닫힌상태로
     a46:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <state>
			
			input_spot = 0;	//입력자리 초기화
     a4a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <input_spot.1984>
			LCD_String("PW :");	//닫힌상태 화면 표시
     a4e:	8b e0       	ldi	r24, 0x0B	; 11
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	57 d3       	rcall	.+1710   	; 0x1102 <LCD_String>
     a54:	80 e0       	ldi	r24, 0x00	; 0
			LCD_String(password);
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	54 d3       	rcall	.+1704   	; 0x1102 <LCD_String>
     a5a:	80 ec       	ldi	r24, 0xC0	; 192
     a5c:	7d d3       	rcall	.+1786   	; 0x1158 <Command>
			Command(LINE2);
     a5e:	63 c0       	rjmp	.+198    	; 0xb26 <__vector_16+0x5f0>
     a60:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     a64:	8e 34       	cpi	r24, 0x4E	; 78
		}
		else if(ch == 'N' && sw1 == 0 && sw2 == 0 && sw3 == 0 && sw4 == 0)	//취소버튼
     a66:	f9 f4       	brne	.+62     	; 0xaa6 <__vector_16+0x570>
     a68:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sw1.1986>
     a6c:	88 23       	and	r24, r24
     a6e:	d9 f4       	brne	.+54     	; 0xaa6 <__vector_16+0x570>
     a70:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <sw2.1987>
     a74:	88 23       	and	r24, r24
     a76:	b9 f4       	brne	.+46     	; 0xaa6 <__vector_16+0x570>
     a78:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <sw3.1988>
     a7c:	88 23       	and	r24, r24
     a7e:	99 f4       	brne	.+38     	; 0xaa6 <__vector_16+0x570>
     a80:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <sw4.1989>
     a84:	88 23       	and	r24, r24
		{
			Command(ALLCLR);
     a86:	79 f4       	brne	.+30     	; 0xaa6 <__vector_16+0x570>
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	66 d3       	rcall	.+1740   	; 0x1158 <Command>
			LCD_String("PW :");
     a8c:	8b e0       	ldi	r24, 0x0B	; 11
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	38 d3       	rcall	.+1648   	; 0x1102 <LCD_String>
     a92:	80 e0       	ldi	r24, 0x00	; 0
			LCD_String(password);
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	35 d3       	rcall	.+1642   	; 0x1102 <LCD_String>
     a98:	80 ec       	ldi	r24, 0xC0	; 192
     a9a:	5e d3       	rcall	.+1724   	; 0x1158 <Command>
			Command(LINE2);
     a9c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <state>
     aa0:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <input_spot.1984>
			state = close;	//닫힌상태로
     aa4:	40 c0       	rjmp	.+128    	; 0xb26 <__vector_16+0x5f0>
			input_spot = 0;	//입력자리 초기화
     aa6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     aaa:	88 23       	and	r24, r24
		}
		else if(ch != 0 && sw1 == 0 && sw2 == 0 && sw3 == 0 && sw4 == 0)
     aac:	09 f4       	brne	.+2      	; 0xab0 <__vector_16+0x57a>
     aae:	3b c0       	rjmp	.+118    	; 0xb26 <__vector_16+0x5f0>
     ab0:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <sw1.1986>
     ab4:	88 23       	and	r24, r24
     ab6:	b9 f5       	brne	.+110    	; 0xb26 <__vector_16+0x5f0>
     ab8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <sw2.1987>
     abc:	88 23       	and	r24, r24
     abe:	99 f5       	brne	.+102    	; 0xb26 <__vector_16+0x5f0>
     ac0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <sw3.1988>
     ac4:	88 23       	and	r24, r24
     ac6:	79 f5       	brne	.+94     	; 0xb26 <__vector_16+0x5f0>
     ac8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <sw4.1989>
     acc:	88 23       	and	r24, r24
		{
			
			if(input_spot == 10)	//입력자리 초기화
     ace:	59 f5       	brne	.+86     	; 0xb26 <__vector_16+0x5f0>
     ad0:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <input_spot.1984>
     ad4:	8a 30       	cpi	r24, 0x0A	; 10
			{
				Command(ALLCLR);
     ad6:	61 f4       	brne	.+24     	; 0xaf0 <__vector_16+0x5ba>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	3e d3       	rcall	.+1660   	; 0x1158 <Command>
				LCD_String("PW :");
     adc:	8b e0       	ldi	r24, 0x0B	; 11
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	10 d3       	rcall	.+1568   	; 0x1102 <LCD_String>
     ae2:	80 e0       	ldi	r24, 0x00	; 0
				LCD_String(password);
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	0d d3       	rcall	.+1562   	; 0x1102 <LCD_String>
     ae8:	80 ec       	ldi	r24, 0xC0	; 192
				Command(LINE2);
     aea:	36 d3       	rcall	.+1644   	; 0x1158 <Command>
     aec:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <input_spot.1984>
				input_spot = 0;
     af0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
			}
			Data(ch);	//입력한거 화면표시
     af4:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <Data>
     af8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <input_spot.1984>
			new_password[input_spot] = ch;	//입력값 새로운 비밀번호에 추가
     afc:	08 2e       	mov	r0, r24
     afe:	00 0c       	add	r0, r0
     b00:	99 0b       	sbc	r25, r25
     b02:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
     b06:	84 5d       	subi	r24, 0xD4	; 212
     b08:	9e 4f       	sbci	r25, 0xFE	; 254
     b0a:	fc 01       	movw	r30, r24
     b0c:	20 83       	st	Z, r18
     b0e:	43 e0       	ldi	r20, 0x03	; 3
     b10:	61 e0       	ldi	r22, 0x01	; 1
			SendCommand01(0x0F, 0x01, 0x03);	//입력될때 mp3 스위치 음
     b12:	8f e0       	ldi	r24, 0x0F	; 15
     b14:	71 db       	rcall	.-2334   	; 0x1f8 <SendCommand01>
     b16:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <input_spot.1984>
     b1a:	8f 5f       	subi	r24, 0xFF	; 255
			input_spot++;	//입력자리 증가
     b1c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <input_spot.1984>
     b20:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <__vector_16+0x5f0>
			ch = 0;	//입력값 초기화
     b26:	00 00       	nop
     b28:	26 96       	adiw	r28, 0x06	; 6
		}
	}
	
}
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	de bf       	out	0x3e, r29	; 62
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	ff 91       	pop	r31
     b3a:	ef 91       	pop	r30
     b3c:	bf 91       	pop	r27
     b3e:	af 91       	pop	r26
     b40:	9f 91       	pop	r25
     b42:	8f 91       	pop	r24
     b44:	7f 91       	pop	r23
     b46:	6f 91       	pop	r22
     b48:	5f 91       	pop	r21
     b4a:	4f 91       	pop	r20
     b4c:	3f 91       	pop	r19
     b4e:	2f 91       	pop	r18
     b50:	0f 90       	pop	r0
     b52:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b56:	0f 90       	pop	r0
     b58:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b5c:	0f 90       	pop	r0
     b5e:	1f 90       	pop	r1
     b60:	18 95       	reti

00000b62 <main>:
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28



int main(void)
{
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	2f 97       	sbiw	r28, 0x0f	; 15
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
	char cmd;

	UART_Init();	//UART 초기화
     b7a:	a7 da       	rcall	.-2738   	; 0xca <UART_Init>

	SendCommand(CMD_TF);	//mp3 준비
     b7c:	89 e0       	ldi	r24, 0x09	; 9
     b7e:	f2 da       	rcall	.-2588   	; 0x164 <SendCommand>
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 ea       	ldi	r26, 0xA0	; 160
     b86:	b1 e4       	ldi	r27, 0x41	; 65
     b88:	8a 83       	std	Y+2, r24	; 0x02
     b8a:	9b 83       	std	Y+3, r25	; 0x03
     b8c:	ac 83       	std	Y+4, r26	; 0x04
     b8e:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	4a e7       	ldi	r20, 0x7A	; 122
     b96:	55 e4       	ldi	r21, 0x45	; 69
     b98:	6a 81       	ldd	r22, Y+2	; 0x02
     b9a:	7b 81       	ldd	r23, Y+3	; 0x03
     b9c:	8c 81       	ldd	r24, Y+4	; 0x04
     b9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ba0:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     ba4:	dc 01       	movw	r26, r24
     ba6:	cb 01       	movw	r24, r22
     ba8:	8e 83       	std	Y+6, r24	; 0x06
     baa:	9f 83       	std	Y+7, r25	; 0x07
     bac:	a8 87       	std	Y+8, r26	; 0x08
     bae:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	6e 81       	ldd	r22, Y+6	; 0x06
     bba:	7f 81       	ldd	r23, Y+7	; 0x07
     bbc:	88 85       	ldd	r24, Y+8	; 0x08
     bbe:	99 85       	ldd	r25, Y+9	; 0x09
     bc0:	0e 94 1e 14 	call	0x283c	; 0x283c <__cmpsf2>
     bc4:	88 23       	and	r24, r24
     bc6:	2c f4       	brge	.+10     	; 0xbd2 <main+0x70>
		__ticks = 1;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	9b 87       	std	Y+11, r25	; 0x0b
     bce:	8a 87       	std	Y+10, r24	; 0x0a
     bd0:	3f c0       	rjmp	.+126    	; 0xc50 <main+0xee>
	else if (__tmp > 65535)
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	3f ef       	ldi	r19, 0xFF	; 255
     bd6:	4f e7       	ldi	r20, 0x7F	; 127
     bd8:	57 e4       	ldi	r21, 0x47	; 71
     bda:	6e 81       	ldd	r22, Y+6	; 0x06
     bdc:	7f 81       	ldd	r23, Y+7	; 0x07
     bde:	88 85       	ldd	r24, Y+8	; 0x08
     be0:	99 85       	ldd	r25, Y+9	; 0x09
     be2:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__gesf2>
     be6:	18 16       	cp	r1, r24
     be8:	4c f5       	brge	.+82     	; 0xc3c <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e2       	ldi	r20, 0x20	; 32
     bf0:	51 e4       	ldi	r21, 0x41	; 65
     bf2:	6a 81       	ldd	r22, Y+2	; 0x02
     bf4:	7b 81       	ldd	r23, Y+3	; 0x03
     bf6:	8c 81       	ldd	r24, Y+4	; 0x04
     bf8:	9d 81       	ldd	r25, Y+5	; 0x05
     bfa:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     bfe:	dc 01       	movw	r26, r24
     c00:	cb 01       	movw	r24, r22
     c02:	bc 01       	movw	r22, r24
     c04:	cd 01       	movw	r24, r26
     c06:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	9b 87       	std	Y+11, r25	; 0x0b
     c10:	8a 87       	std	Y+10, r24	; 0x0a
     c12:	0f c0       	rjmp	.+30     	; 0xc32 <main+0xd0>
     c14:	80 e9       	ldi	r24, 0x90	; 144
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	9d 87       	std	Y+13, r25	; 0x0d
     c1a:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1c:	8c 85       	ldd	r24, Y+12	; 0x0c
     c1e:	9d 85       	ldd	r25, Y+13	; 0x0d
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <main+0xbe>
     c24:	9d 87       	std	Y+13, r25	; 0x0d
     c26:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c28:	8a 85       	ldd	r24, Y+10	; 0x0a
     c2a:	9b 85       	ldd	r25, Y+11	; 0x0b
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	9b 87       	std	Y+11, r25	; 0x0b
     c30:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c32:	8a 85       	ldd	r24, Y+10	; 0x0a
     c34:	9b 85       	ldd	r25, Y+11	; 0x0b
     c36:	89 2b       	or	r24, r25
     c38:	69 f7       	brne	.-38     	; 0xc14 <main+0xb2>
     c3a:	14 c0       	rjmp	.+40     	; 0xc64 <main+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3c:	6e 81       	ldd	r22, Y+6	; 0x06
     c3e:	7f 81       	ldd	r23, Y+7	; 0x07
     c40:	88 85       	ldd	r24, Y+8	; 0x08
     c42:	99 85       	ldd	r25, Y+9	; 0x09
     c44:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	9b 87       	std	Y+11, r25	; 0x0b
     c4e:	8a 87       	std	Y+10, r24	; 0x0a
     c50:	8a 85       	ldd	r24, Y+10	; 0x0a
     c52:	9b 85       	ldd	r25, Y+11	; 0x0b
     c54:	9f 87       	std	Y+15, r25	; 0x0f
     c56:	8e 87       	std	Y+14, r24	; 0x0e
     c58:	8e 85       	ldd	r24, Y+14	; 0x0e
     c5a:	9f 85       	ldd	r25, Y+15	; 0x0f
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	f1 f7       	brne	.-4      	; 0xc5c <main+0xfa>
     c60:	9f 87       	std	Y+15, r25	; 0x0f
     c62:	8e 87       	std	Y+14, r24	; 0x0e
	_delay_ms(20);
	//SendCommand01(0x06, 0x00, 0x0F);	//mp3 효과음 줄이기 필요하다면
	//_delay_ms(200);
	
	DDRB = 0xFF;	//이걸 안써서 한참동안 뻘짓했다...
     c64:	87 e3       	ldi	r24, 0x37	; 55
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	2f ef       	ldi	r18, 0xFF	; 255
     c6a:	fc 01       	movw	r30, r24
     c6c:	20 83       	st	Z, r18
	TCCR0 = 0x07; // 일반모드, 1024분주
     c6e:	83 e5       	ldi	r24, 0x53	; 83
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	27 e0       	ldi	r18, 0x07	; 7
     c74:	fc 01       	movw	r30, r24
     c76:	20 83       	st	Z, r18
	TCCR1A = 0b10000010;	//비교매치에서 OC1A 출력 클리어 TOP에서 셋
     c78:	8f e4       	ldi	r24, 0x4F	; 79
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	22 e8       	ldi	r18, 0x82	; 130
     c7e:	fc 01       	movw	r30, r24
     c80:	20 83       	st	Z, r18
	TCCR1B = 0b00011010;	//Mode 14(Fast PWM ICR1이 TOP을 저장하는 레지스로 사용되는 동작모드 Icn핀 차단), 8분주
     c82:	8e e4       	ldi	r24, 0x4E	; 78
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	2a e1       	ldi	r18, 0x1A	; 26
     c88:	fc 01       	movw	r30, r24
     c8a:	20 83       	st	Z, r18
	TCCR1C = 0x00;
     c8c:	8a e7       	ldi	r24, 0x7A	; 122
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	fc 01       	movw	r30, r24
     c92:	10 82       	st	Z, r1
	ICR1 = 40000;	//Mode 14에서는 Top값이 ICR이므로 65536중에서 20000까지만 올라간다
     c94:	86 e4       	ldi	r24, 0x46	; 70
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	20 e4       	ldi	r18, 0x40	; 64
     c9a:	3c e9       	ldi	r19, 0x9C	; 156
     c9c:	fc 01       	movw	r30, r24
     c9e:	31 83       	std	Z+1, r19	; 0x01
     ca0:	20 83       	st	Z, r18
	OCR1A = 2000;	//처음 high 상태였다가 20000까지 올라가는 중 1000일때 클리어 되어 20000까지 갈때까지 low상태 그래서  8분주라 20ms 1ms PWM 생성
     ca2:	8a e4       	ldi	r24, 0x4A	; 74
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	20 ed       	ldi	r18, 0xD0	; 208
     ca8:	37 e0       	ldi	r19, 0x07	; 7
     caa:	fc 01       	movw	r30, r24
     cac:	31 83       	std	Z+1, r19	; 0x01
     cae:	20 83       	st	Z, r18
	TIMSK |= (1 << TOIE0); // TOIE0 = 1(오버플로우 인터럽트 인에이블)
     cb0:	87 e5       	ldi	r24, 0x57	; 87
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	27 e5       	ldi	r18, 0x57	; 87
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	f9 01       	movw	r30, r18
     cba:	20 81       	ld	r18, Z
     cbc:	21 60       	ori	r18, 0x01	; 1
     cbe:	fc 01       	movw	r30, r24
     cc0:	20 83       	st	Z, r18
	sei(); // 전역 인터럽트 인에이블 비트 I 셋
     cc2:	78 94       	sei

	

	for(uint8_t i = 0; i < 11; i++)
     cc4:	19 82       	std	Y+1, r1	; 0x01
     cc6:	12 c0       	rjmp	.+36     	; 0xcec <main+0x18a>
	{
		password[i] = eeprom_read_byte(EEPROM + i);
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	08 2f       	mov	r16, r24
     ccc:	10 e0       	ldi	r17, 0x00	; 0
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	88 2f       	mov	r24, r24
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <eeprom_read_byte>
     cda:	28 2f       	mov	r18, r24
     cdc:	c8 01       	movw	r24, r16
     cde:	80 50       	subi	r24, 0x00	; 0
     ce0:	9f 4f       	sbci	r25, 0xFF	; 255
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 83       	st	Z, r18
	TIMSK |= (1 << TOIE0); // TOIE0 = 1(오버플로우 인터럽트 인에이블)
	sei(); // 전역 인터럽트 인에이블 비트 I 셋

	

	for(uint8_t i = 0; i < 11; i++)
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	8f 5f       	subi	r24, 0xFF	; 255
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	8b 30       	cpi	r24, 0x0B	; 11
	{
		password[i] = eeprom_read_byte(EEPROM + i);
	}

	LCD_init();
     cf0:	58 f3       	brcs	.-42     	; 0xcc8 <main+0x166>
	LCD_String("PW :"); // 첫번째라인에출력
     cf2:	09 d0       	rcall	.+18     	; 0xd06 <LCD_init>
     cf4:	8b e0       	ldi	r24, 0x0B	; 11
     cf6:	91 e0       	ldi	r25, 0x01	; 1
	LCD_String(password);
     cf8:	04 d2       	rcall	.+1032   	; 0x1102 <LCD_String>
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	91 e0       	ldi	r25, 0x01	; 1
	Command(LINE2);
     cfe:	01 d2       	rcall	.+1026   	; 0x1102 <LCD_String>
     d00:	80 ec       	ldi	r24, 0xC0	; 192
     d02:	2a d2       	rcall	.+1108   	; 0x1158 <Command>

	while(1);
     d04:	ff cf       	rjmp	.-2      	; 0xd04 <main+0x1a2>

00000d06 <LCD_init>:
}

// LCD 초기화
void LCD_init(void)
{
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	ec 97       	sbiw	r28, 0x3c	; 60
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF; // 포트 C 출력 설정
     d1a:	84 e3       	ldi	r24, 0x34	; 52
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	2f ef       	ldi	r18, 0xFF	; 255
     d20:	fc 01       	movw	r30, r24
     d22:	20 83       	st	Z, r18
	PORTC = 0x0;
     d24:	85 e3       	ldi	r24, 0x35	; 53
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	fc 01       	movw	r30, r24
     d2a:	10 82       	st	Z, r1
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	a0 e7       	ldi	r26, 0x70	; 112
     d32:	b1 e4       	ldi	r27, 0x41	; 65
     d34:	89 83       	std	Y+1, r24	; 0x01
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	ab 83       	std	Y+3, r26	; 0x03
     d3a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	4a e7       	ldi	r20, 0x7A	; 122
     d42:	55 e4       	ldi	r21, 0x45	; 69
     d44:	69 81       	ldd	r22, Y+1	; 0x01
     d46:	7a 81       	ldd	r23, Y+2	; 0x02
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	9c 81       	ldd	r25, Y+4	; 0x04
     d4c:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	8b ab       	std	Y+51, r24	; 0x33
     d56:	9c ab       	std	Y+52, r25	; 0x34
     d58:	ad ab       	std	Y+53, r26	; 0x35
     d5a:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e8       	ldi	r20, 0x80	; 128
     d62:	5f e3       	ldi	r21, 0x3F	; 63
     d64:	6b a9       	ldd	r22, Y+51	; 0x33
     d66:	7c a9       	ldd	r23, Y+52	; 0x34
     d68:	8d a9       	ldd	r24, Y+53	; 0x35
     d6a:	9e a9       	ldd	r25, Y+54	; 0x36
     d6c:	0e 94 1e 14 	call	0x283c	; 0x283c <__cmpsf2>
     d70:	88 23       	and	r24, r24
     d72:	2c f4       	brge	.+10     	; 0xd7e <LCD_init+0x78>
		__ticks = 1;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	98 af       	std	Y+56, r25	; 0x38
     d7a:	8f ab       	std	Y+55, r24	; 0x37
     d7c:	3f c0       	rjmp	.+126    	; 0xdfc <LCD_init+0xf6>
	else if (__tmp > 65535)
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	3f ef       	ldi	r19, 0xFF	; 255
     d82:	4f e7       	ldi	r20, 0x7F	; 127
     d84:	57 e4       	ldi	r21, 0x47	; 71
     d86:	6b a9       	ldd	r22, Y+51	; 0x33
     d88:	7c a9       	ldd	r23, Y+52	; 0x34
     d8a:	8d a9       	ldd	r24, Y+53	; 0x35
     d8c:	9e a9       	ldd	r25, Y+54	; 0x36
     d8e:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__gesf2>
     d92:	18 16       	cp	r1, r24
     d94:	4c f5       	brge	.+82     	; 0xde8 <LCD_init+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	40 e2       	ldi	r20, 0x20	; 32
     d9c:	51 e4       	ldi	r21, 0x41	; 65
     d9e:	69 81       	ldd	r22, Y+1	; 0x01
     da0:	7a 81       	ldd	r23, Y+2	; 0x02
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	9c 81       	ldd	r25, Y+4	; 0x04
     da6:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	bc 01       	movw	r22, r24
     db0:	cd 01       	movw	r24, r26
     db2:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	98 af       	std	Y+56, r25	; 0x38
     dbc:	8f ab       	std	Y+55, r24	; 0x37
     dbe:	0f c0       	rjmp	.+30     	; 0xdde <LCD_init+0xd8>
     dc0:	80 e9       	ldi	r24, 0x90	; 144
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	9a af       	std	Y+58, r25	; 0x3a
     dc6:	89 af       	std	Y+57, r24	; 0x39
     dc8:	89 ad       	ldd	r24, Y+57	; 0x39
     dca:	9a ad       	ldd	r25, Y+58	; 0x3a
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	f1 f7       	brne	.-4      	; 0xdcc <LCD_init+0xc6>
     dd0:	9a af       	std	Y+58, r25	; 0x3a
     dd2:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd4:	8f a9       	ldd	r24, Y+55	; 0x37
     dd6:	98 ad       	ldd	r25, Y+56	; 0x38
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	98 af       	std	Y+56, r25	; 0x38
     ddc:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dde:	8f a9       	ldd	r24, Y+55	; 0x37
     de0:	98 ad       	ldd	r25, Y+56	; 0x38
     de2:	89 2b       	or	r24, r25
     de4:	69 f7       	brne	.-38     	; 0xdc0 <LCD_init+0xba>
     de6:	14 c0       	rjmp	.+40     	; 0xe10 <LCD_init+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de8:	6b a9       	ldd	r22, Y+51	; 0x33
     dea:	7c a9       	ldd	r23, Y+52	; 0x34
     dec:	8d a9       	ldd	r24, Y+53	; 0x35
     dee:	9e a9       	ldd	r25, Y+54	; 0x36
     df0:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	98 af       	std	Y+56, r25	; 0x38
     dfa:	8f ab       	std	Y+55, r24	; 0x37
     dfc:	8f a9       	ldd	r24, Y+55	; 0x37
     dfe:	98 ad       	ldd	r25, Y+56	; 0x38
     e00:	9c af       	std	Y+60, r25	; 0x3c
     e02:	8b af       	std	Y+59, r24	; 0x3b
     e04:	8b ad       	ldd	r24, Y+59	; 0x3b
     e06:	9c ad       	ldd	r25, Y+60	; 0x3c
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <LCD_init+0x102>
     e0c:	9c af       	std	Y+60, r25	; 0x3c
     e0e:	8b af       	std	Y+59, r24	; 0x3b
	_delay_ms(15);
	Command(0x20);
     e10:	80 e2       	ldi	r24, 0x20	; 32
     e12:	a2 d1       	rcall	.+836    	; 0x1158 <Command>
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	a0 ea       	ldi	r26, 0xA0	; 160
     e1a:	b0 e4       	ldi	r27, 0x40	; 64
     e1c:	8d 83       	std	Y+5, r24	; 0x05
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	af 83       	std	Y+7, r26	; 0x07
     e22:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	4a e7       	ldi	r20, 0x7A	; 122
     e2a:	55 e4       	ldi	r21, 0x45	; 69
     e2c:	6d 81       	ldd	r22, Y+5	; 0x05
     e2e:	7e 81       	ldd	r23, Y+6	; 0x06
     e30:	8f 81       	ldd	r24, Y+7	; 0x07
     e32:	98 85       	ldd	r25, Y+8	; 0x08
     e34:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	89 a7       	std	Y+41, r24	; 0x29
     e3e:	9a a7       	std	Y+42, r25	; 0x2a
     e40:	ab a7       	std	Y+43, r26	; 0x2b
     e42:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e8       	ldi	r20, 0x80	; 128
     e4a:	5f e3       	ldi	r21, 0x3F	; 63
     e4c:	69 a5       	ldd	r22, Y+41	; 0x29
     e4e:	7a a5       	ldd	r23, Y+42	; 0x2a
     e50:	8b a5       	ldd	r24, Y+43	; 0x2b
     e52:	9c a5       	ldd	r25, Y+44	; 0x2c
     e54:	0e 94 1e 14 	call	0x283c	; 0x283c <__cmpsf2>
     e58:	88 23       	and	r24, r24
     e5a:	2c f4       	brge	.+10     	; 0xe66 <LCD_init+0x160>
		__ticks = 1;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	9e a7       	std	Y+46, r25	; 0x2e
     e62:	8d a7       	std	Y+45, r24	; 0x2d
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <LCD_init+0x1de>
	else if (__tmp > 65535)
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	3f ef       	ldi	r19, 0xFF	; 255
     e6a:	4f e7       	ldi	r20, 0x7F	; 127
     e6c:	57 e4       	ldi	r21, 0x47	; 71
     e6e:	69 a5       	ldd	r22, Y+41	; 0x29
     e70:	7a a5       	ldd	r23, Y+42	; 0x2a
     e72:	8b a5       	ldd	r24, Y+43	; 0x2b
     e74:	9c a5       	ldd	r25, Y+44	; 0x2c
     e76:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__gesf2>
     e7a:	18 16       	cp	r1, r24
     e7c:	4c f5       	brge	.+82     	; 0xed0 <LCD_init+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e2       	ldi	r20, 0x20	; 32
     e84:	51 e4       	ldi	r21, 0x41	; 65
     e86:	6d 81       	ldd	r22, Y+5	; 0x05
     e88:	7e 81       	ldd	r23, Y+6	; 0x06
     e8a:	8f 81       	ldd	r24, Y+7	; 0x07
     e8c:	98 85       	ldd	r25, Y+8	; 0x08
     e8e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	bc 01       	movw	r22, r24
     e98:	cd 01       	movw	r24, r26
     e9a:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	9e a7       	std	Y+46, r25	; 0x2e
     ea4:	8d a7       	std	Y+45, r24	; 0x2d
     ea6:	0f c0       	rjmp	.+30     	; 0xec6 <LCD_init+0x1c0>
     ea8:	80 e9       	ldi	r24, 0x90	; 144
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	98 ab       	std	Y+48, r25	; 0x30
     eae:	8f a7       	std	Y+47, r24	; 0x2f
     eb0:	8f a5       	ldd	r24, Y+47	; 0x2f
     eb2:	98 a9       	ldd	r25, Y+48	; 0x30
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <LCD_init+0x1ae>
     eb8:	98 ab       	std	Y+48, r25	; 0x30
     eba:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ebc:	8d a5       	ldd	r24, Y+45	; 0x2d
     ebe:	9e a5       	ldd	r25, Y+46	; 0x2e
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	9e a7       	std	Y+46, r25	; 0x2e
     ec4:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec6:	8d a5       	ldd	r24, Y+45	; 0x2d
     ec8:	9e a5       	ldd	r25, Y+46	; 0x2e
     eca:	89 2b       	or	r24, r25
     ecc:	69 f7       	brne	.-38     	; 0xea8 <LCD_init+0x1a2>
     ece:	14 c0       	rjmp	.+40     	; 0xef8 <LCD_init+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed0:	69 a5       	ldd	r22, Y+41	; 0x29
     ed2:	7a a5       	ldd	r23, Y+42	; 0x2a
     ed4:	8b a5       	ldd	r24, Y+43	; 0x2b
     ed6:	9c a5       	ldd	r25, Y+44	; 0x2c
     ed8:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	9e a7       	std	Y+46, r25	; 0x2e
     ee2:	8d a7       	std	Y+45, r24	; 0x2d
     ee4:	8d a5       	ldd	r24, Y+45	; 0x2d
     ee6:	9e a5       	ldd	r25, Y+46	; 0x2e
     ee8:	9a ab       	std	Y+50, r25	; 0x32
     eea:	89 ab       	std	Y+49, r24	; 0x31
     eec:	89 a9       	ldd	r24, Y+49	; 0x31
     eee:	9a a9       	ldd	r25, Y+50	; 0x32
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <LCD_init+0x1ea>
     ef4:	9a ab       	std	Y+50, r25	; 0x32
     ef6:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(5);
	Command(0x20);
     ef8:	80 e2       	ldi	r24, 0x20	; 32
     efa:	2e d1       	rcall	.+604    	; 0x1158 <Command>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a8 ec       	ldi	r26, 0xC8	; 200
     f02:	b2 e4       	ldi	r27, 0x42	; 66
     f04:	89 87       	std	Y+9, r24	; 0x09
     f06:	9a 87       	std	Y+10, r25	; 0x0a
     f08:	ab 87       	std	Y+11, r26	; 0x0b
     f0a:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     f0c:	2b ea       	ldi	r18, 0xAB	; 171
     f0e:	3a ea       	ldi	r19, 0xAA	; 170
     f10:	4a ea       	ldi	r20, 0xAA	; 170
     f12:	50 e4       	ldi	r21, 0x40	; 64
     f14:	69 85       	ldd	r22, Y+9	; 0x09
     f16:	7a 85       	ldd	r23, Y+10	; 0x0a
     f18:	8b 85       	ldd	r24, Y+11	; 0x0b
     f1a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f1c:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	8d 87       	std	Y+13, r24	; 0x0d
     f26:	9e 87       	std	Y+14, r25	; 0x0e
     f28:	af 87       	std	Y+15, r26	; 0x0f
     f2a:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e8       	ldi	r20, 0x80	; 128
     f32:	50 e4       	ldi	r21, 0x40	; 64
     f34:	69 85       	ldd	r22, Y+9	; 0x09
     f36:	7a 85       	ldd	r23, Y+10	; 0x0a
     f38:	8b 85       	ldd	r24, Y+11	; 0x0b
     f3a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f3c:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	89 8b       	std	Y+17, r24	; 0x11
     f46:	9a 8b       	std	Y+18, r25	; 0x12
     f48:	ab 8b       	std	Y+19, r26	; 0x13
     f4a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 e8       	ldi	r20, 0x80	; 128
     f52:	5f e3       	ldi	r21, 0x3F	; 63
     f54:	6d 85       	ldd	r22, Y+13	; 0x0d
     f56:	7e 85       	ldd	r23, Y+14	; 0x0e
     f58:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5a:	98 89       	ldd	r25, Y+16	; 0x10
     f5c:	0e 94 1e 14 	call	0x283c	; 0x283c <__cmpsf2>
     f60:	88 23       	and	r24, r24
     f62:	1c f4       	brge	.+6      	; 0xf6a <LCD_init+0x264>
		__ticks = 1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	8d 8b       	std	Y+21, r24	; 0x15
     f68:	b2 c0       	rjmp	.+356    	; 0x10ce <LCD_init+0x3c8>
	else if (__tmp2 > 65535)
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	3f ef       	ldi	r19, 0xFF	; 255
     f6e:	4f e7       	ldi	r20, 0x7F	; 127
     f70:	57 e4       	ldi	r21, 0x47	; 71
     f72:	69 89       	ldd	r22, Y+17	; 0x11
     f74:	7a 89       	ldd	r23, Y+18	; 0x12
     f76:	8b 89       	ldd	r24, Y+19	; 0x13
     f78:	9c 89       	ldd	r25, Y+20	; 0x14
     f7a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__gesf2>
     f7e:	18 16       	cp	r1, r24
     f80:	0c f0       	brlt	.+2      	; 0xf84 <LCD_init+0x27e>
     f82:	7b c0       	rjmp	.+246    	; 0x107a <LCD_init+0x374>
	{
		_delay_ms(__us / 1000.0);
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	4a e7       	ldi	r20, 0x7A	; 122
     f8a:	54 e4       	ldi	r21, 0x44	; 68
     f8c:	69 85       	ldd	r22, Y+9	; 0x09
     f8e:	7a 85       	ldd	r23, Y+10	; 0x0a
     f90:	8b 85       	ldd	r24, Y+11	; 0x0b
     f92:	9c 85       	ldd	r25, Y+12	; 0x0c
     f94:	0e 94 22 14 	call	0x2844	; 0x2844 <__divsf3>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	8e 8b       	std	Y+22, r24	; 0x16
     f9e:	9f 8b       	std	Y+23, r25	; 0x17
     fa0:	a8 8f       	std	Y+24, r26	; 0x18
     fa2:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	4a e7       	ldi	r20, 0x7A	; 122
     faa:	55 e4       	ldi	r21, 0x45	; 69
     fac:	6e 89       	ldd	r22, Y+22	; 0x16
     fae:	7f 89       	ldd	r23, Y+23	; 0x17
     fb0:	88 8d       	ldd	r24, Y+24	; 0x18
     fb2:	99 8d       	ldd	r25, Y+25	; 0x19
     fb4:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	8a 8f       	std	Y+26, r24	; 0x1a
     fbe:	9b 8f       	std	Y+27, r25	; 0x1b
     fc0:	ac 8f       	std	Y+28, r26	; 0x1c
     fc2:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e8       	ldi	r20, 0x80	; 128
     fca:	5f e3       	ldi	r21, 0x3F	; 63
     fcc:	6a 8d       	ldd	r22, Y+26	; 0x1a
     fce:	7b 8d       	ldd	r23, Y+27	; 0x1b
     fd0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fd2:	9d 8d       	ldd	r25, Y+29	; 0x1d
     fd4:	0e 94 1e 14 	call	0x283c	; 0x283c <__cmpsf2>
     fd8:	88 23       	and	r24, r24
     fda:	2c f4       	brge	.+10     	; 0xfe6 <LCD_init+0x2e0>
		__ticks = 1;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9f 8f       	std	Y+31, r25	; 0x1f
     fe2:	8e 8f       	std	Y+30, r24	; 0x1e
     fe4:	3f c0       	rjmp	.+126    	; 0x1064 <LCD_init+0x35e>
	else if (__tmp > 65535)
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	3f ef       	ldi	r19, 0xFF	; 255
     fea:	4f e7       	ldi	r20, 0x7F	; 127
     fec:	57 e4       	ldi	r21, 0x47	; 71
     fee:	6a 8d       	ldd	r22, Y+26	; 0x1a
     ff0:	7b 8d       	ldd	r23, Y+27	; 0x1b
     ff2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ff4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ff6:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__gesf2>
     ffa:	18 16       	cp	r1, r24
     ffc:	4c f5       	brge	.+82     	; 0x1050 <LCD_init+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e2       	ldi	r20, 0x20	; 32
    1004:	51 e4       	ldi	r21, 0x41	; 65
    1006:	6e 89       	ldd	r22, Y+22	; 0x16
    1008:	7f 89       	ldd	r23, Y+23	; 0x17
    100a:	88 8d       	ldd	r24, Y+24	; 0x18
    100c:	99 8d       	ldd	r25, Y+25	; 0x19
    100e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	bc 01       	movw	r22, r24
    1018:	cd 01       	movw	r24, r26
    101a:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	9f 8f       	std	Y+31, r25	; 0x1f
    1024:	8e 8f       	std	Y+30, r24	; 0x1e
    1026:	0f c0       	rjmp	.+30     	; 0x1046 <LCD_init+0x340>
    1028:	80 e9       	ldi	r24, 0x90	; 144
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	99 a3       	std	Y+33, r25	; 0x21
    102e:	88 a3       	std	Y+32, r24	; 0x20
    1030:	88 a1       	ldd	r24, Y+32	; 0x20
    1032:	99 a1       	ldd	r25, Y+33	; 0x21
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <LCD_init+0x32e>
    1038:	99 a3       	std	Y+33, r25	; 0x21
    103a:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    103e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	9f 8f       	std	Y+31, r25	; 0x1f
    1044:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1046:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1048:	9f 8d       	ldd	r25, Y+31	; 0x1f
    104a:	89 2b       	or	r24, r25
    104c:	69 f7       	brne	.-38     	; 0x1028 <LCD_init+0x322>
    104e:	3f c0       	rjmp	.+126    	; 0x10ce <LCD_init+0x3c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1050:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1052:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1054:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1056:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1058:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	9f 8f       	std	Y+31, r25	; 0x1f
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
    1064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1066:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1068:	9b a3       	std	Y+35, r25	; 0x23
    106a:	8a a3       	std	Y+34, r24	; 0x22
    106c:	8a a1       	ldd	r24, Y+34	; 0x22
    106e:	9b a1       	ldd	r25, Y+35	; 0x23
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <LCD_init+0x36a>
    1074:	9b a3       	std	Y+35, r25	; 0x23
    1076:	8a a3       	std	Y+34, r24	; 0x22
    1078:	2a c0       	rjmp	.+84     	; 0x10ce <LCD_init+0x3c8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	4f e7       	ldi	r20, 0x7F	; 127
    1080:	53 e4       	ldi	r21, 0x43	; 67
    1082:	6d 85       	ldd	r22, Y+13	; 0x0d
    1084:	7e 85       	ldd	r23, Y+14	; 0x0e
    1086:	8f 85       	ldd	r24, Y+15	; 0x0f
    1088:	98 89       	ldd	r25, Y+16	; 0x10
    108a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__gesf2>
    108e:	18 16       	cp	r1, r24
    1090:	ac f4       	brge	.+42     	; 0x10bc <LCD_init+0x3b6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1092:	69 89       	ldd	r22, Y+17	; 0x11
    1094:	7a 89       	ldd	r23, Y+18	; 0x12
    1096:	8b 89       	ldd	r24, Y+19	; 0x13
    1098:	9c 89       	ldd	r25, Y+20	; 0x14
    109a:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	9d a3       	std	Y+37, r25	; 0x25
    10a4:	8c a3       	std	Y+36, r24	; 0x24
    10a6:	8c a1       	ldd	r24, Y+36	; 0x24
    10a8:	9d a1       	ldd	r25, Y+37	; 0x25
    10aa:	9f a3       	std	Y+39, r25	; 0x27
    10ac:	8e a3       	std	Y+38, r24	; 0x26
    10ae:	8e a1       	ldd	r24, Y+38	; 0x26
    10b0:	9f a1       	ldd	r25, Y+39	; 0x27
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <LCD_init+0x3ac>
    10b6:	9f a3       	std	Y+39, r25	; 0x27
    10b8:	8e a3       	std	Y+38, r24	; 0x26
    10ba:	0f c0       	rjmp	.+30     	; 0x10da <LCD_init+0x3d4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    10bc:	6d 85       	ldd	r22, Y+13	; 0x0d
    10be:	7e 85       	ldd	r23, Y+14	; 0x0e
    10c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c2:	98 89       	ldd	r25, Y+16	; 0x10
    10c4:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	8d 8b       	std	Y+21, r24	; 0x15
    10ce:	8d 89       	ldd	r24, Y+21	; 0x15
    10d0:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10d2:	88 a5       	ldd	r24, Y+40	; 0x28
    10d4:	8a 95       	dec	r24
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <LCD_init+0x3ce>
	_delay_us(100);
	Command(0x20);
    10d8:	88 a7       	std	Y+40, r24	; 0x28
    10da:	80 e2       	ldi	r24, 0x20	; 32
	Command(FUNCSET);
    10dc:	3d d0       	rcall	.+122    	; 0x1158 <Command>
    10de:	88 e2       	ldi	r24, 0x28	; 40
	Command(DISPON);
    10e0:	3b d0       	rcall	.+118    	; 0x1158 <Command>
    10e2:	8c e0       	ldi	r24, 0x0C	; 12
	Command(ALLCLR);
    10e4:	39 d0       	rcall	.+114    	; 0x1158 <Command>
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	37 d0       	rcall	.+110    	; 0x1158 <Command>
	Command(ENTMODE);
    10ea:	86 e0       	ldi	r24, 0x06	; 6
    10ec:	35 d0       	rcall	.+106    	; 0x1158 <Command>
    10ee:	00 00       	nop
}
    10f0:	ec 96       	adiw	r28, 0x3c	; 60
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	08 95       	ret

00001102 <LCD_String>:
    1102:	cf 93       	push	r28

// 문자열 출력 함수
void LCD_String(char str[])
{
    1104:	df 93       	push	r29
    1106:	00 d0       	rcall	.+0      	; 0x1108 <LCD_String+0x6>
    1108:	1f 92       	push	r1
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	9b 83       	std	Y+3, r25	; 0x03
    1110:	8a 83       	std	Y+2, r24	; 0x02
	char i=0;
    1112:	19 82       	std	Y+1, r1	; 0x01

	while(str[i] != 0) Data(str[i++]);
    1114:	0e c0       	rjmp	.+28     	; 0x1132 <LCD_String+0x30>
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	98 2f       	mov	r25, r24
    111a:	9f 5f       	subi	r25, 0xFF	; 255
    111c:	99 83       	std	Y+1, r25	; 0x01
    111e:	08 2e       	mov	r0, r24
    1120:	00 0c       	add	r0, r0
    1122:	99 0b       	sbc	r25, r25
    1124:	2a 81       	ldd	r18, Y+2	; 0x02
    1126:	3b 81       	ldd	r19, Y+3	; 0x03
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	fc 01       	movw	r30, r24
    112e:	80 81       	ld	r24, Z
    1130:	9d d5       	rcall	.+2874   	; 0x1c6c <Data>
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	08 2e       	mov	r0, r24
    1136:	00 0c       	add	r0, r0
    1138:	99 0b       	sbc	r25, r25
    113a:	2a 81       	ldd	r18, Y+2	; 0x02
    113c:	3b 81       	ldd	r19, Y+3	; 0x03
    113e:	82 0f       	add	r24, r18
    1140:	93 1f       	adc	r25, r19
    1142:	fc 01       	movw	r30, r24
    1144:	80 81       	ld	r24, Z
    1146:	88 23       	and	r24, r24
    1148:	31 f7       	brne	.-52     	; 0x1116 <LCD_String+0x14>
}
    114a:	00 00       	nop
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	08 95       	ret

00001158 <Command>:

// 인스트럭션 쓰기 함수
void Command(u_char byte)
{
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	c1 58       	subi	r28, 0x81	; 129
    1166:	d1 09       	sbc	r29, r1
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
    1172:	9e 01       	movw	r18, r28
    1174:	2f 57       	subi	r18, 0x7F	; 127
    1176:	3f 4f       	sbci	r19, 0xFF	; 255
    1178:	f9 01       	movw	r30, r18
    117a:	80 83       	st	Z, r24
	Busy();
    117c:	0e 94 9e 13 	call	0x273c	; 0x273c <Busy>
	// 인스트럭션 상위 4비트
	PORTC = 0x00; // RS=RW=0
    1180:	85 e3       	ldi	r24, 0x35	; 53
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	fc 01       	movw	r30, r24
    1186:	10 82       	st	Z, r1
	PORTC |= (byte & 0xF0); // 명령어 상위 4비트
    1188:	85 e3       	ldi	r24, 0x35	; 53
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	25 e3       	ldi	r18, 0x35	; 53
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	f9 01       	movw	r30, r18
    1192:	20 81       	ld	r18, Z
    1194:	42 2f       	mov	r20, r18
    1196:	9e 01       	movw	r18, r28
    1198:	2f 57       	subi	r18, 0x7F	; 127
    119a:	3f 4f       	sbci	r19, 0xFF	; 255
    119c:	f9 01       	movw	r30, r18
    119e:	20 81       	ld	r18, Z
    11a0:	20 7f       	andi	r18, 0xF0	; 240
    11a2:	24 2b       	or	r18, r20
    11a4:	fc 01       	movw	r30, r24
    11a6:	20 83       	st	Z, r18
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	a0 e8       	ldi	r26, 0x80	; 128
    11ae:	bf e3       	ldi	r27, 0x3F	; 63
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	9a 83       	std	Y+2, r25	; 0x02
    11b4:	ab 83       	std	Y+3, r26	; 0x03
    11b6:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    11b8:	8e 01       	movw	r16, r28
    11ba:	0b 59       	subi	r16, 0x9B	; 155
    11bc:	1f 4f       	sbci	r17, 0xFF	; 255
    11be:	2b ea       	ldi	r18, 0xAB	; 171
    11c0:	3a ea       	ldi	r19, 0xAA	; 170
    11c2:	4a ea       	ldi	r20, 0xAA	; 170
    11c4:	50 e4       	ldi	r21, 0x40	; 64
    11c6:	69 81       	ldd	r22, Y+1	; 0x01
    11c8:	7a 81       	ldd	r23, Y+2	; 0x02
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	9c 81       	ldd	r25, Y+4	; 0x04
    11ce:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	f8 01       	movw	r30, r16
    11d8:	80 83       	st	Z, r24
    11da:	91 83       	std	Z+1, r25	; 0x01
    11dc:	a2 83       	std	Z+2, r26	; 0x02
    11de:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    11e0:	8e 01       	movw	r16, r28
    11e2:	07 59       	subi	r16, 0x97	; 151
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e8       	ldi	r20, 0x80	; 128
    11ec:	50 e4       	ldi	r21, 0x40	; 64
    11ee:	69 81       	ldd	r22, Y+1	; 0x01
    11f0:	7a 81       	ldd	r23, Y+2	; 0x02
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	f8 01       	movw	r30, r16
    1200:	80 83       	st	Z, r24
    1202:	91 83       	std	Z+1, r25	; 0x01
    1204:	a2 83       	std	Z+2, r26	; 0x02
    1206:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1208:	ce 01       	movw	r24, r28
    120a:	8b 59       	subi	r24, 0x9B	; 155
    120c:	9f 4f       	sbci	r25, 0xFF	; 255
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e8       	ldi	r20, 0x80	; 128
    1214:	5f e3       	ldi	r21, 0x3F	; 63
    1216:	fc 01       	movw	r30, r24
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	82 81       	ldd	r24, Z+2	; 0x02
    121e:	93 81       	ldd	r25, Z+3	; 0x03
    1220:	0e 94 1e 14 	call	0x283c	; 0x283c <__cmpsf2>
    1224:	88 23       	and	r24, r24
    1226:	3c f4       	brge	.+14     	; 0x1236 <Command+0xde>
		__ticks = 1;
    1228:	ce 01       	movw	r24, r28
    122a:	83 59       	subi	r24, 0x93	; 147
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	21 e0       	ldi	r18, 0x01	; 1
    1230:	fc 01       	movw	r30, r24
    1232:	20 83       	st	Z, r18
    1234:	2c c1       	rjmp	.+600    	; 0x148e <Command+0x336>
	else if (__tmp2 > 65535)
    1236:	ce 01       	movw	r24, r28
    1238:	87 59       	subi	r24, 0x97	; 151
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	3f ef       	ldi	r19, 0xFF	; 255
    1240:	4f e7       	ldi	r20, 0x7F	; 127
    1242:	57 e4       	ldi	r21, 0x47	; 71
    1244:	fc 01       	movw	r30, r24
    1246:	60 81       	ld	r22, Z
    1248:	71 81       	ldd	r23, Z+1	; 0x01
    124a:	82 81       	ldd	r24, Z+2	; 0x02
    124c:	93 81       	ldd	r25, Z+3	; 0x03
    124e:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__gesf2>
    1252:	18 16       	cp	r1, r24
    1254:	0c f0       	brlt	.+2      	; 0x1258 <Command+0x100>
    1256:	cd c0       	rjmp	.+410    	; 0x13f2 <Command+0x29a>
	{
		_delay_ms(__us / 1000.0);
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	4a e7       	ldi	r20, 0x7A	; 122
    125e:	54 e4       	ldi	r21, 0x44	; 68
    1260:	69 81       	ldd	r22, Y+1	; 0x01
    1262:	7a 81       	ldd	r23, Y+2	; 0x02
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	9c 81       	ldd	r25, Y+4	; 0x04
    1268:	0e 94 22 14 	call	0x2844	; 0x2844 <__divsf3>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	9e 01       	movw	r18, r28
    1272:	22 59       	subi	r18, 0x92	; 146
    1274:	3f 4f       	sbci	r19, 0xFF	; 255
    1276:	f9 01       	movw	r30, r18
    1278:	80 83       	st	Z, r24
    127a:	91 83       	std	Z+1, r25	; 0x01
    127c:	a2 83       	std	Z+2, r26	; 0x02
    127e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1280:	8e 01       	movw	r16, r28
    1282:	0e 58       	subi	r16, 0x8E	; 142
    1284:	1f 4f       	sbci	r17, 0xFF	; 255
    1286:	ce 01       	movw	r24, r28
    1288:	82 59       	subi	r24, 0x92	; 146
    128a:	9f 4f       	sbci	r25, 0xFF	; 255
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	4a e7       	ldi	r20, 0x7A	; 122
    1292:	55 e4       	ldi	r21, 0x45	; 69
    1294:	fc 01       	movw	r30, r24
    1296:	60 81       	ld	r22, Z
    1298:	71 81       	ldd	r23, Z+1	; 0x01
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	93 81       	ldd	r25, Z+3	; 0x03
    129e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	f8 01       	movw	r30, r16
    12a8:	80 83       	st	Z, r24
    12aa:	91 83       	std	Z+1, r25	; 0x01
    12ac:	a2 83       	std	Z+2, r26	; 0x02
    12ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12b0:	ce 01       	movw	r24, r28
    12b2:	8e 58       	subi	r24, 0x8E	; 142
    12b4:	9f 4f       	sbci	r25, 0xFF	; 255
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e8       	ldi	r20, 0x80	; 128
    12bc:	5f e3       	ldi	r21, 0x3F	; 63
    12be:	fc 01       	movw	r30, r24
    12c0:	60 81       	ld	r22, Z
    12c2:	71 81       	ldd	r23, Z+1	; 0x01
    12c4:	82 81       	ldd	r24, Z+2	; 0x02
    12c6:	93 81       	ldd	r25, Z+3	; 0x03
    12c8:	0e 94 1e 14 	call	0x283c	; 0x283c <__cmpsf2>
    12cc:	88 23       	and	r24, r24
    12ce:	4c f4       	brge	.+18     	; 0x12e2 <Command+0x18a>
		__ticks = 1;
    12d0:	ce 01       	movw	r24, r28
    12d2:	8a 58       	subi	r24, 0x8A	; 138
    12d4:	9f 4f       	sbci	r25, 0xFF	; 255
    12d6:	21 e0       	ldi	r18, 0x01	; 1
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	fc 01       	movw	r30, r24
    12dc:	31 83       	std	Z+1, r19	; 0x01
    12de:	20 83       	st	Z, r18
    12e0:	6d c0       	rjmp	.+218    	; 0x13bc <Command+0x264>
	else if (__tmp > 65535)
    12e2:	ce 01       	movw	r24, r28
    12e4:	8e 58       	subi	r24, 0x8E	; 142
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	3f ef       	ldi	r19, 0xFF	; 255
    12ec:	4f e7       	ldi	r20, 0x7F	; 127
    12ee:	57 e4       	ldi	r21, 0x47	; 71
    12f0:	fc 01       	movw	r30, r24
    12f2:	60 81       	ld	r22, Z
    12f4:	71 81       	ldd	r23, Z+1	; 0x01
    12f6:	82 81       	ldd	r24, Z+2	; 0x02
    12f8:	93 81       	ldd	r25, Z+3	; 0x03
    12fa:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__gesf2>
    12fe:	18 16       	cp	r1, r24
    1300:	0c f0       	brlt	.+2      	; 0x1304 <Command+0x1ac>
    1302:	4a c0       	rjmp	.+148    	; 0x1398 <Command+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1304:	ce 01       	movw	r24, r28
    1306:	82 59       	subi	r24, 0x92	; 146
    1308:	9f 4f       	sbci	r25, 0xFF	; 255
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e2       	ldi	r20, 0x20	; 32
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	fc 01       	movw	r30, r24
    1314:	60 81       	ld	r22, Z
    1316:	71 81       	ldd	r23, Z+1	; 0x01
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	93 81       	ldd	r25, Z+3	; 0x03
    131c:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	8e 01       	movw	r16, r28
    1326:	0a 58       	subi	r16, 0x8A	; 138
    1328:	1f 4f       	sbci	r17, 0xFF	; 255
    132a:	bc 01       	movw	r22, r24
    132c:	cd 01       	movw	r24, r26
    132e:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	f8 01       	movw	r30, r16
    1338:	91 83       	std	Z+1, r25	; 0x01
    133a:	80 83       	st	Z, r24
    133c:	24 c0       	rjmp	.+72     	; 0x1386 <Command+0x22e>
    133e:	ce 01       	movw	r24, r28
    1340:	88 58       	subi	r24, 0x88	; 136
    1342:	9f 4f       	sbci	r25, 0xFF	; 255
    1344:	20 e9       	ldi	r18, 0x90	; 144
    1346:	31 e0       	ldi	r19, 0x01	; 1
    1348:	fc 01       	movw	r30, r24
    134a:	31 83       	std	Z+1, r19	; 0x01
    134c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    134e:	ce 01       	movw	r24, r28
    1350:	88 58       	subi	r24, 0x88	; 136
    1352:	9f 4f       	sbci	r25, 0xFF	; 255
    1354:	fc 01       	movw	r30, r24
    1356:	80 81       	ld	r24, Z
    1358:	91 81       	ldd	r25, Z+1	; 0x01
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	f1 f7       	brne	.-4      	; 0x135a <Command+0x202>
    135e:	9e 01       	movw	r18, r28
    1360:	28 58       	subi	r18, 0x88	; 136
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	f9 01       	movw	r30, r18
    1366:	91 83       	std	Z+1, r25	; 0x01
    1368:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136a:	ce 01       	movw	r24, r28
    136c:	8a 58       	subi	r24, 0x8A	; 138
    136e:	9f 4f       	sbci	r25, 0xFF	; 255
    1370:	9e 01       	movw	r18, r28
    1372:	2a 58       	subi	r18, 0x8A	; 138
    1374:	3f 4f       	sbci	r19, 0xFF	; 255
    1376:	f9 01       	movw	r30, r18
    1378:	20 81       	ld	r18, Z
    137a:	31 81       	ldd	r19, Z+1	; 0x01
    137c:	21 50       	subi	r18, 0x01	; 1
    137e:	31 09       	sbc	r19, r1
    1380:	fc 01       	movw	r30, r24
    1382:	31 83       	std	Z+1, r19	; 0x01
    1384:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1386:	ce 01       	movw	r24, r28
    1388:	8a 58       	subi	r24, 0x8A	; 138
    138a:	9f 4f       	sbci	r25, 0xFF	; 255
    138c:	fc 01       	movw	r30, r24
    138e:	80 81       	ld	r24, Z
    1390:	91 81       	ldd	r25, Z+1	; 0x01
    1392:	89 2b       	or	r24, r25
    1394:	a1 f6       	brne	.-88     	; 0x133e <Command+0x1e6>
    1396:	7b c0       	rjmp	.+246    	; 0x148e <Command+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1398:	8e 01       	movw	r16, r28
    139a:	0a 58       	subi	r16, 0x8A	; 138
    139c:	1f 4f       	sbci	r17, 0xFF	; 255
    139e:	ce 01       	movw	r24, r28
    13a0:	8e 58       	subi	r24, 0x8E	; 142
    13a2:	9f 4f       	sbci	r25, 0xFF	; 255
    13a4:	fc 01       	movw	r30, r24
    13a6:	60 81       	ld	r22, Z
    13a8:	71 81       	ldd	r23, Z+1	; 0x01
    13aa:	82 81       	ldd	r24, Z+2	; 0x02
    13ac:	93 81       	ldd	r25, Z+3	; 0x03
    13ae:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	f8 01       	movw	r30, r16
    13b8:	91 83       	std	Z+1, r25	; 0x01
    13ba:	80 83       	st	Z, r24
    13bc:	ce 01       	movw	r24, r28
    13be:	86 58       	subi	r24, 0x86	; 134
    13c0:	9f 4f       	sbci	r25, 0xFF	; 255
    13c2:	9e 01       	movw	r18, r28
    13c4:	2a 58       	subi	r18, 0x8A	; 138
    13c6:	3f 4f       	sbci	r19, 0xFF	; 255
    13c8:	f9 01       	movw	r30, r18
    13ca:	20 81       	ld	r18, Z
    13cc:	31 81       	ldd	r19, Z+1	; 0x01
    13ce:	fc 01       	movw	r30, r24
    13d0:	31 83       	std	Z+1, r19	; 0x01
    13d2:	20 83       	st	Z, r18
    13d4:	ce 01       	movw	r24, r28
    13d6:	86 58       	subi	r24, 0x86	; 134
    13d8:	9f 4f       	sbci	r25, 0xFF	; 255
    13da:	fc 01       	movw	r30, r24
    13dc:	80 81       	ld	r24, Z
    13de:	91 81       	ldd	r25, Z+1	; 0x01
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <Command+0x288>
    13e4:	9e 01       	movw	r18, r28
    13e6:	26 58       	subi	r18, 0x86	; 134
    13e8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ea:	f9 01       	movw	r30, r18
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	80 83       	st	Z, r24
    13f0:	4e c0       	rjmp	.+156    	; 0x148e <Command+0x336>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    13f2:	ce 01       	movw	r24, r28
    13f4:	8b 59       	subi	r24, 0x9B	; 155
    13f6:	9f 4f       	sbci	r25, 0xFF	; 255
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	4f e7       	ldi	r20, 0x7F	; 127
    13fe:	53 e4       	ldi	r21, 0x43	; 67
    1400:	fc 01       	movw	r30, r24
    1402:	60 81       	ld	r22, Z
    1404:	71 81       	ldd	r23, Z+1	; 0x01
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__gesf2>
    140e:	18 16       	cp	r1, r24
    1410:	6c f5       	brge	.+90     	; 0x146c <Command+0x314>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1412:	8e 01       	movw	r16, r28
    1414:	04 58       	subi	r16, 0x84	; 132
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	ce 01       	movw	r24, r28
    141a:	87 59       	subi	r24, 0x97	; 151
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	fc 01       	movw	r30, r24
    1420:	60 81       	ld	r22, Z
    1422:	71 81       	ldd	r23, Z+1	; 0x01
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	93 81       	ldd	r25, Z+3	; 0x03
    1428:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	f8 01       	movw	r30, r16
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	80 83       	st	Z, r24
    1436:	ce 01       	movw	r24, r28
    1438:	82 58       	subi	r24, 0x82	; 130
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	9e 01       	movw	r18, r28
    143e:	24 58       	subi	r18, 0x84	; 132
    1440:	3f 4f       	sbci	r19, 0xFF	; 255
    1442:	f9 01       	movw	r30, r18
    1444:	20 81       	ld	r18, Z
    1446:	31 81       	ldd	r19, Z+1	; 0x01
    1448:	fc 01       	movw	r30, r24
    144a:	31 83       	std	Z+1, r19	; 0x01
    144c:	20 83       	st	Z, r18
    144e:	ce 01       	movw	r24, r28
    1450:	82 58       	subi	r24, 0x82	; 130
    1452:	9f 4f       	sbci	r25, 0xFF	; 255
    1454:	fc 01       	movw	r30, r24
    1456:	80 81       	ld	r24, Z
    1458:	91 81       	ldd	r25, Z+1	; 0x01
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <Command+0x302>
    145e:	9e 01       	movw	r18, r28
    1460:	22 58       	subi	r18, 0x82	; 130
    1462:	3f 4f       	sbci	r19, 0xFF	; 255
    1464:	f9 01       	movw	r30, r18
    1466:	91 83       	std	Z+1, r25	; 0x01
    1468:	80 83       	st	Z, r24
    146a:	28 c0       	rjmp	.+80     	; 0x14bc <Command+0x364>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    146c:	8e 01       	movw	r16, r28
    146e:	03 59       	subi	r16, 0x93	; 147
    1470:	1f 4f       	sbci	r17, 0xFF	; 255
    1472:	ce 01       	movw	r24, r28
    1474:	8b 59       	subi	r24, 0x9B	; 155
    1476:	9f 4f       	sbci	r25, 0xFF	; 255
    1478:	fc 01       	movw	r30, r24
    147a:	60 81       	ld	r22, Z
    147c:	71 81       	ldd	r23, Z+1	; 0x01
    147e:	82 81       	ldd	r24, Z+2	; 0x02
    1480:	93 81       	ldd	r25, Z+3	; 0x03
    1482:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	f8 01       	movw	r30, r16
    148c:	80 83       	st	Z, r24
    148e:	ce 01       	movw	r24, r28
    1490:	80 58       	subi	r24, 0x80	; 128
    1492:	9f 4f       	sbci	r25, 0xFF	; 255
    1494:	9e 01       	movw	r18, r28
    1496:	23 59       	subi	r18, 0x93	; 147
    1498:	3f 4f       	sbci	r19, 0xFF	; 255
    149a:	f9 01       	movw	r30, r18
    149c:	20 81       	ld	r18, Z
    149e:	fc 01       	movw	r30, r24
    14a0:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14a2:	ce 01       	movw	r24, r28
    14a4:	80 58       	subi	r24, 0x80	; 128
    14a6:	9f 4f       	sbci	r25, 0xFF	; 255
    14a8:	fc 01       	movw	r30, r24
    14aa:	80 81       	ld	r24, Z
    14ac:	28 2f       	mov	r18, r24
    14ae:	2a 95       	dec	r18
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <Command+0x356>
    14b2:	ce 01       	movw	r24, r28
    14b4:	80 58       	subi	r24, 0x80	; 128
    14b6:	9f 4f       	sbci	r25, 0xFF	; 255
    14b8:	fc 01       	movw	r30, r24
    14ba:	20 83       	st	Z, r18

	_delay_us(1);
	ENH; // E = 1
    14bc:	85 e3       	ldi	r24, 0x35	; 53
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	25 e3       	ldi	r18, 0x35	; 53
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	f9 01       	movw	r30, r18
    14c6:	20 81       	ld	r18, Z
    14c8:	24 60       	ori	r18, 0x04	; 4
    14ca:	fc 01       	movw	r30, r24
    14cc:	20 83       	st	Z, r18
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 e8       	ldi	r26, 0x80	; 128
    14d4:	bf e3       	ldi	r27, 0x3F	; 63
    14d6:	8d 83       	std	Y+5, r24	; 0x05
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	af 83       	std	Y+7, r26	; 0x07
    14dc:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    14de:	8e 01       	movw	r16, r28
    14e0:	07 5b       	subi	r16, 0xB7	; 183
    14e2:	1f 4f       	sbci	r17, 0xFF	; 255
    14e4:	2b ea       	ldi	r18, 0xAB	; 171
    14e6:	3a ea       	ldi	r19, 0xAA	; 170
    14e8:	4a ea       	ldi	r20, 0xAA	; 170
    14ea:	50 e4       	ldi	r21, 0x40	; 64
    14ec:	6d 81       	ldd	r22, Y+5	; 0x05
    14ee:	7e 81       	ldd	r23, Y+6	; 0x06
    14f0:	8f 81       	ldd	r24, Y+7	; 0x07
    14f2:	98 85       	ldd	r25, Y+8	; 0x08
    14f4:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	f8 01       	movw	r30, r16
    14fe:	80 83       	st	Z, r24
    1500:	91 83       	std	Z+1, r25	; 0x01
    1502:	a2 83       	std	Z+2, r26	; 0x02
    1504:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1506:	8e 01       	movw	r16, r28
    1508:	03 5b       	subi	r16, 0xB3	; 179
    150a:	1f 4f       	sbci	r17, 0xFF	; 255
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	50 e4       	ldi	r21, 0x40	; 64
    1514:	6d 81       	ldd	r22, Y+5	; 0x05
    1516:	7e 81       	ldd	r23, Y+6	; 0x06
    1518:	8f 81       	ldd	r24, Y+7	; 0x07
    151a:	98 85       	ldd	r25, Y+8	; 0x08
    151c:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	f8 01       	movw	r30, r16
    1526:	80 83       	st	Z, r24
    1528:	91 83       	std	Z+1, r25	; 0x01
    152a:	a2 83       	std	Z+2, r26	; 0x02
    152c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    152e:	ce 01       	movw	r24, r28
    1530:	87 5b       	subi	r24, 0xB7	; 183
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e8       	ldi	r20, 0x80	; 128
    153a:	5f e3       	ldi	r21, 0x3F	; 63
    153c:	fc 01       	movw	r30, r24
    153e:	60 81       	ld	r22, Z
    1540:	71 81       	ldd	r23, Z+1	; 0x01
    1542:	82 81       	ldd	r24, Z+2	; 0x02
    1544:	93 81       	ldd	r25, Z+3	; 0x03
    1546:	0e 94 1e 14 	call	0x283c	; 0x283c <__cmpsf2>
    154a:	88 23       	and	r24, r24
    154c:	3c f4       	brge	.+14     	; 0x155c <Command+0x404>
		__ticks = 1;
    154e:	ce 01       	movw	r24, r28
    1550:	8f 5a       	subi	r24, 0xAF	; 175
    1552:	9f 4f       	sbci	r25, 0xFF	; 255
    1554:	21 e0       	ldi	r18, 0x01	; 1
    1556:	fc 01       	movw	r30, r24
    1558:	20 83       	st	Z, r18
    155a:	2c c1       	rjmp	.+600    	; 0x17b4 <Command+0x65c>
	else if (__tmp2 > 65535)
    155c:	ce 01       	movw	r24, r28
    155e:	83 5b       	subi	r24, 0xB3	; 179
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	3f ef       	ldi	r19, 0xFF	; 255
    1566:	4f e7       	ldi	r20, 0x7F	; 127
    1568:	57 e4       	ldi	r21, 0x47	; 71
    156a:	fc 01       	movw	r30, r24
    156c:	60 81       	ld	r22, Z
    156e:	71 81       	ldd	r23, Z+1	; 0x01
    1570:	82 81       	ldd	r24, Z+2	; 0x02
    1572:	93 81       	ldd	r25, Z+3	; 0x03
    1574:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__gesf2>
    1578:	18 16       	cp	r1, r24
    157a:	0c f0       	brlt	.+2      	; 0x157e <Command+0x426>
    157c:	cd c0       	rjmp	.+410    	; 0x1718 <Command+0x5c0>
	{
		_delay_ms(__us / 1000.0);
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	4a e7       	ldi	r20, 0x7A	; 122
    1584:	54 e4       	ldi	r21, 0x44	; 68
    1586:	6d 81       	ldd	r22, Y+5	; 0x05
    1588:	7e 81       	ldd	r23, Y+6	; 0x06
    158a:	8f 81       	ldd	r24, Y+7	; 0x07
    158c:	98 85       	ldd	r25, Y+8	; 0x08
    158e:	0e 94 22 14 	call	0x2844	; 0x2844 <__divsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9e 01       	movw	r18, r28
    1598:	2e 5a       	subi	r18, 0xAE	; 174
    159a:	3f 4f       	sbci	r19, 0xFF	; 255
    159c:	f9 01       	movw	r30, r18
    159e:	80 83       	st	Z, r24
    15a0:	91 83       	std	Z+1, r25	; 0x01
    15a2:	a2 83       	std	Z+2, r26	; 0x02
    15a4:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15a6:	8e 01       	movw	r16, r28
    15a8:	0a 5a       	subi	r16, 0xAA	; 170
    15aa:	1f 4f       	sbci	r17, 0xFF	; 255
    15ac:	ce 01       	movw	r24, r28
    15ae:	8e 5a       	subi	r24, 0xAE	; 174
    15b0:	9f 4f       	sbci	r25, 0xFF	; 255
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	4a e7       	ldi	r20, 0x7A	; 122
    15b8:	55 e4       	ldi	r21, 0x45	; 69
    15ba:	fc 01       	movw	r30, r24
    15bc:	60 81       	ld	r22, Z
    15be:	71 81       	ldd	r23, Z+1	; 0x01
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	f8 01       	movw	r30, r16
    15ce:	80 83       	st	Z, r24
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	a2 83       	std	Z+2, r26	; 0x02
    15d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15d6:	ce 01       	movw	r24, r28
    15d8:	8a 5a       	subi	r24, 0xAA	; 170
    15da:	9f 4f       	sbci	r25, 0xFF	; 255
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e8       	ldi	r20, 0x80	; 128
    15e2:	5f e3       	ldi	r21, 0x3F	; 63
    15e4:	fc 01       	movw	r30, r24
    15e6:	60 81       	ld	r22, Z
    15e8:	71 81       	ldd	r23, Z+1	; 0x01
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	0e 94 1e 14 	call	0x283c	; 0x283c <__cmpsf2>
    15f2:	88 23       	and	r24, r24
    15f4:	4c f4       	brge	.+18     	; 0x1608 <Command+0x4b0>
		__ticks = 1;
    15f6:	ce 01       	movw	r24, r28
    15f8:	86 5a       	subi	r24, 0xA6	; 166
    15fa:	9f 4f       	sbci	r25, 0xFF	; 255
    15fc:	21 e0       	ldi	r18, 0x01	; 1
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	fc 01       	movw	r30, r24
    1602:	31 83       	std	Z+1, r19	; 0x01
    1604:	20 83       	st	Z, r18
    1606:	6d c0       	rjmp	.+218    	; 0x16e2 <Command+0x58a>
	else if (__tmp > 65535)
    1608:	ce 01       	movw	r24, r28
    160a:	8a 5a       	subi	r24, 0xAA	; 170
    160c:	9f 4f       	sbci	r25, 0xFF	; 255
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	3f ef       	ldi	r19, 0xFF	; 255
    1612:	4f e7       	ldi	r20, 0x7F	; 127
    1614:	57 e4       	ldi	r21, 0x47	; 71
    1616:	fc 01       	movw	r30, r24
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__gesf2>
    1624:	18 16       	cp	r1, r24
    1626:	0c f0       	brlt	.+2      	; 0x162a <Command+0x4d2>
    1628:	4a c0       	rjmp	.+148    	; 0x16be <Command+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162a:	ce 01       	movw	r24, r28
    162c:	8e 5a       	subi	r24, 0xAE	; 174
    162e:	9f 4f       	sbci	r25, 0xFF	; 255
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e2       	ldi	r20, 0x20	; 32
    1636:	51 e4       	ldi	r21, 0x41	; 65
    1638:	fc 01       	movw	r30, r24
    163a:	60 81       	ld	r22, Z
    163c:	71 81       	ldd	r23, Z+1	; 0x01
    163e:	82 81       	ldd	r24, Z+2	; 0x02
    1640:	93 81       	ldd	r25, Z+3	; 0x03
    1642:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	8e 01       	movw	r16, r28
    164c:	06 5a       	subi	r16, 0xA6	; 166
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	f8 01       	movw	r30, r16
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	80 83       	st	Z, r24
    1662:	24 c0       	rjmp	.+72     	; 0x16ac <Command+0x554>
    1664:	ce 01       	movw	r24, r28
    1666:	84 5a       	subi	r24, 0xA4	; 164
    1668:	9f 4f       	sbci	r25, 0xFF	; 255
    166a:	20 e9       	ldi	r18, 0x90	; 144
    166c:	31 e0       	ldi	r19, 0x01	; 1
    166e:	fc 01       	movw	r30, r24
    1670:	31 83       	std	Z+1, r19	; 0x01
    1672:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1674:	ce 01       	movw	r24, r28
    1676:	84 5a       	subi	r24, 0xA4	; 164
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	fc 01       	movw	r30, r24
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <Command+0x528>
    1684:	9e 01       	movw	r18, r28
    1686:	24 5a       	subi	r18, 0xA4	; 164
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	f9 01       	movw	r30, r18
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1690:	ce 01       	movw	r24, r28
    1692:	86 5a       	subi	r24, 0xA6	; 166
    1694:	9f 4f       	sbci	r25, 0xFF	; 255
    1696:	9e 01       	movw	r18, r28
    1698:	26 5a       	subi	r18, 0xA6	; 166
    169a:	3f 4f       	sbci	r19, 0xFF	; 255
    169c:	f9 01       	movw	r30, r18
    169e:	20 81       	ld	r18, Z
    16a0:	31 81       	ldd	r19, Z+1	; 0x01
    16a2:	21 50       	subi	r18, 0x01	; 1
    16a4:	31 09       	sbc	r19, r1
    16a6:	fc 01       	movw	r30, r24
    16a8:	31 83       	std	Z+1, r19	; 0x01
    16aa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ac:	ce 01       	movw	r24, r28
    16ae:	86 5a       	subi	r24, 0xA6	; 166
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	fc 01       	movw	r30, r24
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	89 2b       	or	r24, r25
    16ba:	a1 f6       	brne	.-88     	; 0x1664 <Command+0x50c>
    16bc:	7b c0       	rjmp	.+246    	; 0x17b4 <Command+0x65c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16be:	8e 01       	movw	r16, r28
    16c0:	06 5a       	subi	r16, 0xA6	; 166
    16c2:	1f 4f       	sbci	r17, 0xFF	; 255
    16c4:	ce 01       	movw	r24, r28
    16c6:	8a 5a       	subi	r24, 0xAA	; 170
    16c8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ca:	fc 01       	movw	r30, r24
    16cc:	60 81       	ld	r22, Z
    16ce:	71 81       	ldd	r23, Z+1	; 0x01
    16d0:	82 81       	ldd	r24, Z+2	; 0x02
    16d2:	93 81       	ldd	r25, Z+3	; 0x03
    16d4:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	f8 01       	movw	r30, r16
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	80 83       	st	Z, r24
    16e2:	ce 01       	movw	r24, r28
    16e4:	82 5a       	subi	r24, 0xA2	; 162
    16e6:	9f 4f       	sbci	r25, 0xFF	; 255
    16e8:	9e 01       	movw	r18, r28
    16ea:	26 5a       	subi	r18, 0xA6	; 166
    16ec:	3f 4f       	sbci	r19, 0xFF	; 255
    16ee:	f9 01       	movw	r30, r18
    16f0:	20 81       	ld	r18, Z
    16f2:	31 81       	ldd	r19, Z+1	; 0x01
    16f4:	fc 01       	movw	r30, r24
    16f6:	31 83       	std	Z+1, r19	; 0x01
    16f8:	20 83       	st	Z, r18
    16fa:	ce 01       	movw	r24, r28
    16fc:	82 5a       	subi	r24, 0xA2	; 162
    16fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1700:	fc 01       	movw	r30, r24
    1702:	80 81       	ld	r24, Z
    1704:	91 81       	ldd	r25, Z+1	; 0x01
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <Command+0x5ae>
    170a:	9e 01       	movw	r18, r28
    170c:	22 5a       	subi	r18, 0xA2	; 162
    170e:	3f 4f       	sbci	r19, 0xFF	; 255
    1710:	f9 01       	movw	r30, r18
    1712:	91 83       	std	Z+1, r25	; 0x01
    1714:	80 83       	st	Z, r24
    1716:	4e c0       	rjmp	.+156    	; 0x17b4 <Command+0x65c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1718:	ce 01       	movw	r24, r28
    171a:	87 5b       	subi	r24, 0xB7	; 183
    171c:	9f 4f       	sbci	r25, 0xFF	; 255
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	4f e7       	ldi	r20, 0x7F	; 127
    1724:	53 e4       	ldi	r21, 0x43	; 67
    1726:	fc 01       	movw	r30, r24
    1728:	60 81       	ld	r22, Z
    172a:	71 81       	ldd	r23, Z+1	; 0x01
    172c:	82 81       	ldd	r24, Z+2	; 0x02
    172e:	93 81       	ldd	r25, Z+3	; 0x03
    1730:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__gesf2>
    1734:	18 16       	cp	r1, r24
    1736:	6c f5       	brge	.+90     	; 0x1792 <Command+0x63a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1738:	8e 01       	movw	r16, r28
    173a:	00 5a       	subi	r16, 0xA0	; 160
    173c:	1f 4f       	sbci	r17, 0xFF	; 255
    173e:	ce 01       	movw	r24, r28
    1740:	83 5b       	subi	r24, 0xB3	; 179
    1742:	9f 4f       	sbci	r25, 0xFF	; 255
    1744:	fc 01       	movw	r30, r24
    1746:	60 81       	ld	r22, Z
    1748:	71 81       	ldd	r23, Z+1	; 0x01
    174a:	82 81       	ldd	r24, Z+2	; 0x02
    174c:	93 81       	ldd	r25, Z+3	; 0x03
    174e:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	f8 01       	movw	r30, r16
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
    175c:	ce 01       	movw	r24, r28
    175e:	8e 59       	subi	r24, 0x9E	; 158
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	9e 01       	movw	r18, r28
    1764:	20 5a       	subi	r18, 0xA0	; 160
    1766:	3f 4f       	sbci	r19, 0xFF	; 255
    1768:	f9 01       	movw	r30, r18
    176a:	20 81       	ld	r18, Z
    176c:	31 81       	ldd	r19, Z+1	; 0x01
    176e:	fc 01       	movw	r30, r24
    1770:	31 83       	std	Z+1, r19	; 0x01
    1772:	20 83       	st	Z, r18
    1774:	ce 01       	movw	r24, r28
    1776:	8e 59       	subi	r24, 0x9E	; 158
    1778:	9f 4f       	sbci	r25, 0xFF	; 255
    177a:	fc 01       	movw	r30, r24
    177c:	80 81       	ld	r24, Z
    177e:	91 81       	ldd	r25, Z+1	; 0x01
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <Command+0x628>
    1784:	9e 01       	movw	r18, r28
    1786:	2e 59       	subi	r18, 0x9E	; 158
    1788:	3f 4f       	sbci	r19, 0xFF	; 255
    178a:	f9 01       	movw	r30, r18
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	80 83       	st	Z, r24
    1790:	28 c0       	rjmp	.+80     	; 0x17e2 <Command+0x68a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1792:	8e 01       	movw	r16, r28
    1794:	0f 5a       	subi	r16, 0xAF	; 175
    1796:	1f 4f       	sbci	r17, 0xFF	; 255
    1798:	ce 01       	movw	r24, r28
    179a:	87 5b       	subi	r24, 0xB7	; 183
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	fc 01       	movw	r30, r24
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	0e 94 8a 14 	call	0x2914	; 0x2914 <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	f8 01       	movw	r30, r16
    17b2:	80 83       	st	Z, r24
    17b4:	ce 01       	movw	r24, r28
    17b6:	8c 59       	subi	r24, 0x9C	; 156
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	9e 01       	movw	r18, r28
    17bc:	2f 5a       	subi	r18, 0xAF	; 175
    17be:	3f 4f       	sbci	r19, 0xFF	; 255
    17c0:	f9 01       	movw	r30, r18
    17c2:	20 81       	ld	r18, Z
    17c4:	fc 01       	movw	r30, r24
    17c6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17c8:	ce 01       	movw	r24, r28
    17ca:	8c 59       	subi	r24, 0x9C	; 156
    17cc:	9f 4f       	sbci	r25, 0xFF	; 255
    17ce:	fc 01       	movw	r30, r24
    17d0:	80 81       	ld	r24, Z
    17d2:	28 2f       	mov	r18, r24
    17d4:	2a 95       	dec	r18
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <Command+0x67c>
    17d8:	ce 01       	movw	r24, r28
    17da:	8c 59       	subi	r24, 0x9C	; 156
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	fc 01       	movw	r30, r24
    17e0:	20 83       	st	Z, r18

	_delay_us(1);
	ENL; // E = 0
    17e2:	85 e3       	ldi	r24, 0x35	; 53
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	25 e3       	ldi	r18, 0x35	; 53
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	f9 01       	movw	r30, r18
    17ec:	20 81       	ld	r18, Z
    17ee:	2b 7f       	andi	r18, 0xFB	; 251
    17f0:	fc 01       	movw	r30, r24
    17f2:	20 83       	st	Z, r18

	// 인스트럭션 하위 4비트
	PORTC = 0x00; // RS=RW=0
    17f4:	85 e3       	ldi	r24, 0x35	; 53
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	fc 01       	movw	r30, r24
    17fa:	10 82       	st	Z, r1
	PORTC |= (byte << 4); // 명령어 하위 4비트
    17fc:	85 e3       	ldi	r24, 0x35	; 53
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	25 e3       	ldi	r18, 0x35	; 53
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	f9 01       	movw	r30, r18
    1806:	20 81       	ld	r18, Z
    1808:	42 2f       	mov	r20, r18
    180a:	9e 01       	movw	r18, r28
    180c:	2f 57       	subi	r18, 0x7F	; 127
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	f9 01       	movw	r30, r18
    1812:	20 81       	ld	r18, Z
    1814:	22 2f       	mov	r18, r18
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	22 95       	swap	r18
    181a:	32 95       	swap	r19
    181c:	30 7f       	andi	r19, 0xF0	; 240
    181e:	32 27       	eor	r19, r18
    1820:	20 7f       	andi	r18, 0xF0	; 240
    1822:	32 27       	eor	r19, r18
    1824:	24 2b       	or	r18, r20
    1826:	fc 01       	movw	r30, r24
    1828:	20 83       	st	Z, r18
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	a0 e8       	ldi	r26, 0x80	; 128
    1830:	bf e3       	ldi	r27, 0x3F	; 63
    1832:	89 87       	std	Y+9, r24	; 0x09
    1834:	9a 87       	std	Y+10, r25	; 0x0a
    1836:	ab 87       	std	Y+11, r26	; 0x0b
    1838:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    183a:	2b ea       	ldi	r18, 0xAB	; 171
    183c:	3a ea       	ldi	r19, 0xAA	; 170
    183e:	4a ea       	ldi	r20, 0xAA	; 170
    1840:	50 e4       	ldi	r21, 0x40	; 64
    1842:	69 85       	ldd	r22, Y+9	; 0x09
    1844:	7a 85       	ldd	r23, Y+10	; 0x0a
    1846:	8b 85       	ldd	r24, Y+11	; 0x0b
    1848:	9c 85       	ldd	r25, Y+12	; 0x0c
    184a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	8d a7       	std	Y+45, r24	; 0x2d
    1854:	9e a7       	std	Y+46, r25	; 0x2e
    1856:	af a7       	std	Y+47, r26	; 0x2f
    1858:	b8 ab       	std	Y+48, r27	; 0x30
	__tmp2 = ((F_CPU) / 4e6) * __us;
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e8       	ldi	r20, 0x80	; 128
    1860:	50 e4       	ldi	r21, 0x40	; 64
    1862:	69 85       	ldd	r22, Y+9	; 0x09
    1864:	7a 85       	ldd	r23, Y+10	; 0x0a
    1866:	8b 85       	ldd	r24, Y+11	; 0x0b
    1868:	9c 85       	ldd	r25, Y+12	; 0x0c
    186a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	89 ab       	std	Y+49, r24	; 0x31
    1874:	9a ab       	std	Y+50, r25	; 0x32
    1876:	ab ab       	std	Y+51, r26	; 0x33
    1878:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e8       	ldi	r20, 0x80	; 128
    1880:	5f e3       	ldi	r21, 0x3F	; 63
    1882:	6d a5       	ldd	r22, Y+45	; 0x2d
    1884:	7e a5       	ldd	r23, Y+46	; 0x2e
    1886:	8f a5       	ldd	r24, Y+47	; 0x2f
    1888:	98 a9       	ldd	r25, Y+48	; 0x30
    188a:	d8 d7       	rcall	.+4016   	; 0x283c <__cmpsf2>
    188c:	88 23       	and	r24, r24
    188e:	1c f4       	brge	.+6      	; 0x1896 <Command+0x73e>
		__ticks = 1;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	8d ab       	std	Y+53, r24	; 0x35
    1894:	d8 c0       	rjmp	.+432    	; 0x1a46 <Command+0x8ee>
	else if (__tmp2 > 65535)
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	3f ef       	ldi	r19, 0xFF	; 255
    189a:	4f e7       	ldi	r20, 0x7F	; 127
    189c:	57 e4       	ldi	r21, 0x47	; 71
    189e:	69 a9       	ldd	r22, Y+49	; 0x31
    18a0:	7a a9       	ldd	r23, Y+50	; 0x32
    18a2:	8b a9       	ldd	r24, Y+51	; 0x33
    18a4:	9c a9       	ldd	r25, Y+52	; 0x34
    18a6:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__gesf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	0c f0       	brlt	.+2      	; 0x18b0 <Command+0x758>
    18ae:	8f c0       	rjmp	.+286    	; 0x19ce <Command+0x876>
	{
		_delay_ms(__us / 1000.0);
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	4a e7       	ldi	r20, 0x7A	; 122
    18b6:	54 e4       	ldi	r21, 0x44	; 68
    18b8:	69 85       	ldd	r22, Y+9	; 0x09
    18ba:	7a 85       	ldd	r23, Y+10	; 0x0a
    18bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    18be:	9c 85       	ldd	r25, Y+12	; 0x0c
    18c0:	c1 d7       	rcall	.+3970   	; 0x2844 <__divsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	8e ab       	std	Y+54, r24	; 0x36
    18c8:	9f ab       	std	Y+55, r25	; 0x37
    18ca:	a8 af       	std	Y+56, r26	; 0x38
    18cc:	b9 af       	std	Y+57, r27	; 0x39

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	4a e7       	ldi	r20, 0x7A	; 122
    18d4:	55 e4       	ldi	r21, 0x45	; 69
    18d6:	6e a9       	ldd	r22, Y+54	; 0x36
    18d8:	7f a9       	ldd	r23, Y+55	; 0x37
    18da:	88 ad       	ldd	r24, Y+56	; 0x38
    18dc:	99 ad       	ldd	r25, Y+57	; 0x39
    18de:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	8a af       	std	Y+58, r24	; 0x3a
    18e8:	9b af       	std	Y+59, r25	; 0x3b
    18ea:	ac af       	std	Y+60, r26	; 0x3c
    18ec:	bd af       	std	Y+61, r27	; 0x3d
	if (__tmp < 1.0)
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e8       	ldi	r20, 0x80	; 128
    18f4:	5f e3       	ldi	r21, 0x3F	; 63
    18f6:	6a ad       	ldd	r22, Y+58	; 0x3a
    18f8:	7b ad       	ldd	r23, Y+59	; 0x3b
    18fa:	8c ad       	ldd	r24, Y+60	; 0x3c
    18fc:	9d ad       	ldd	r25, Y+61	; 0x3d
    18fe:	9e d7       	rcall	.+3900   	; 0x283c <__cmpsf2>
    1900:	88 23       	and	r24, r24
    1902:	2c f4       	brge	.+10     	; 0x190e <Command+0x7b6>
		__ticks = 1;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9f af       	std	Y+63, r25	; 0x3f
    190a:	8e af       	std	Y+62, r24	; 0x3e
    190c:	49 c0       	rjmp	.+146    	; 0x19a0 <Command+0x848>
	else if (__tmp > 65535)
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	3f ef       	ldi	r19, 0xFF	; 255
    1912:	4f e7       	ldi	r20, 0x7F	; 127
    1914:	57 e4       	ldi	r21, 0x47	; 71
    1916:	6a ad       	ldd	r22, Y+58	; 0x3a
    1918:	7b ad       	ldd	r23, Y+59	; 0x3b
    191a:	8c ad       	ldd	r24, Y+60	; 0x3c
    191c:	9d ad       	ldd	r25, Y+61	; 0x3d
    191e:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__gesf2>
    1922:	18 16       	cp	r1, r24
    1924:	a4 f5       	brge	.+104    	; 0x198e <Command+0x836>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e2       	ldi	r20, 0x20	; 32
    192c:	51 e4       	ldi	r21, 0x41	; 65
    192e:	6e a9       	ldd	r22, Y+54	; 0x36
    1930:	7f a9       	ldd	r23, Y+55	; 0x37
    1932:	88 ad       	ldd	r24, Y+56	; 0x38
    1934:	99 ad       	ldd	r25, Y+57	; 0x39
    1936:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	bc 01       	movw	r22, r24
    1940:	cd 01       	movw	r24, r26
    1942:	e8 d7       	rcall	.+4048   	; 0x2914 <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	9f af       	std	Y+63, r25	; 0x3f
    194a:	8e af       	std	Y+62, r24	; 0x3e
    194c:	1b c0       	rjmp	.+54     	; 0x1984 <Command+0x82c>
    194e:	ce 01       	movw	r24, r28
    1950:	80 5c       	subi	r24, 0xC0	; 192
    1952:	9f 4f       	sbci	r25, 0xFF	; 255
    1954:	20 e9       	ldi	r18, 0x90	; 144
    1956:	31 e0       	ldi	r19, 0x01	; 1
    1958:	fc 01       	movw	r30, r24
    195a:	31 83       	std	Z+1, r19	; 0x01
    195c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    195e:	ce 01       	movw	r24, r28
    1960:	80 5c       	subi	r24, 0xC0	; 192
    1962:	9f 4f       	sbci	r25, 0xFF	; 255
    1964:	fc 01       	movw	r30, r24
    1966:	80 81       	ld	r24, Z
    1968:	91 81       	ldd	r25, Z+1	; 0x01
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <Command+0x812>
    196e:	9e 01       	movw	r18, r28
    1970:	20 5c       	subi	r18, 0xC0	; 192
    1972:	3f 4f       	sbci	r19, 0xFF	; 255
    1974:	f9 01       	movw	r30, r18
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    197a:	8e ad       	ldd	r24, Y+62	; 0x3e
    197c:	9f ad       	ldd	r25, Y+63	; 0x3f
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	9f af       	std	Y+63, r25	; 0x3f
    1982:	8e af       	std	Y+62, r24	; 0x3e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1984:	8e ad       	ldd	r24, Y+62	; 0x3e
    1986:	9f ad       	ldd	r25, Y+63	; 0x3f
    1988:	89 2b       	or	r24, r25
    198a:	09 f7       	brne	.-62     	; 0x194e <Command+0x7f6>
    198c:	5c c0       	rjmp	.+184    	; 0x1a46 <Command+0x8ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198e:	6a ad       	ldd	r22, Y+58	; 0x3a
    1990:	7b ad       	ldd	r23, Y+59	; 0x3b
    1992:	8c ad       	ldd	r24, Y+60	; 0x3c
    1994:	9d ad       	ldd	r25, Y+61	; 0x3d
    1996:	be d7       	rcall	.+3964   	; 0x2914 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	9f af       	std	Y+63, r25	; 0x3f
    199e:	8e af       	std	Y+62, r24	; 0x3e
    19a0:	ce 01       	movw	r24, r28
    19a2:	8e 5b       	subi	r24, 0xBE	; 190
    19a4:	9f 4f       	sbci	r25, 0xFF	; 255
    19a6:	2e ad       	ldd	r18, Y+62	; 0x3e
    19a8:	3f ad       	ldd	r19, Y+63	; 0x3f
    19aa:	fc 01       	movw	r30, r24
    19ac:	31 83       	std	Z+1, r19	; 0x01
    19ae:	20 83       	st	Z, r18
    19b0:	ce 01       	movw	r24, r28
    19b2:	8e 5b       	subi	r24, 0xBE	; 190
    19b4:	9f 4f       	sbci	r25, 0xFF	; 255
    19b6:	fc 01       	movw	r30, r24
    19b8:	80 81       	ld	r24, Z
    19ba:	91 81       	ldd	r25, Z+1	; 0x01
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	f1 f7       	brne	.-4      	; 0x19bc <Command+0x864>
    19c0:	9e 01       	movw	r18, r28
    19c2:	2e 5b       	subi	r18, 0xBE	; 190
    19c4:	3f 4f       	sbci	r19, 0xFF	; 255
    19c6:	f9 01       	movw	r30, r18
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24
    19cc:	3c c0       	rjmp	.+120    	; 0x1a46 <Command+0x8ee>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	4f e7       	ldi	r20, 0x7F	; 127
    19d4:	53 e4       	ldi	r21, 0x43	; 67
    19d6:	6d a5       	ldd	r22, Y+45	; 0x2d
    19d8:	7e a5       	ldd	r23, Y+46	; 0x2e
    19da:	8f a5       	ldd	r24, Y+47	; 0x2f
    19dc:	98 a9       	ldd	r25, Y+48	; 0x30
    19de:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__gesf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	44 f5       	brge	.+80     	; 0x1a36 <Command+0x8de>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    19e6:	8e 01       	movw	r16, r28
    19e8:	0c 5b       	subi	r16, 0xBC	; 188
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	69 a9       	ldd	r22, Y+49	; 0x31
    19ee:	7a a9       	ldd	r23, Y+50	; 0x32
    19f0:	8b a9       	ldd	r24, Y+51	; 0x33
    19f2:	9c a9       	ldd	r25, Y+52	; 0x34
    19f4:	8f d7       	rcall	.+3870   	; 0x2914 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	f8 01       	movw	r30, r16
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
    1a00:	ce 01       	movw	r24, r28
    1a02:	8a 5b       	subi	r24, 0xBA	; 186
    1a04:	9f 4f       	sbci	r25, 0xFF	; 255
    1a06:	9e 01       	movw	r18, r28
    1a08:	2c 5b       	subi	r18, 0xBC	; 188
    1a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0c:	f9 01       	movw	r30, r18
    1a0e:	20 81       	ld	r18, Z
    1a10:	31 81       	ldd	r19, Z+1	; 0x01
    1a12:	fc 01       	movw	r30, r24
    1a14:	31 83       	std	Z+1, r19	; 0x01
    1a16:	20 83       	st	Z, r18
    1a18:	ce 01       	movw	r24, r28
    1a1a:	8a 5b       	subi	r24, 0xBA	; 186
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	fc 01       	movw	r30, r24
    1a20:	80 81       	ld	r24, Z
    1a22:	91 81       	ldd	r25, Z+1	; 0x01
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <Command+0x8cc>
    1a28:	9e 01       	movw	r18, r28
    1a2a:	2a 5b       	subi	r18, 0xBA	; 186
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	f9 01       	movw	r30, r18
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	80 83       	st	Z, r24
    1a34:	1b c0       	rjmp	.+54     	; 0x1a6c <Command+0x914>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a36:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a38:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a3e:	6a d7       	rcall	.+3796   	; 0x2914 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	8d ab       	std	Y+53, r24	; 0x35
    1a46:	ce 01       	movw	r24, r28
    1a48:	88 5b       	subi	r24, 0xB8	; 184
    1a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4c:	2d a9       	ldd	r18, Y+53	; 0x35
    1a4e:	fc 01       	movw	r30, r24
    1a50:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a52:	ce 01       	movw	r24, r28
    1a54:	88 5b       	subi	r24, 0xB8	; 184
    1a56:	9f 4f       	sbci	r25, 0xFF	; 255
    1a58:	fc 01       	movw	r30, r24
    1a5a:	80 81       	ld	r24, Z
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	2a 95       	dec	r18
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <Command+0x906>
    1a62:	ce 01       	movw	r24, r28
    1a64:	88 5b       	subi	r24, 0xB8	; 184
    1a66:	9f 4f       	sbci	r25, 0xFF	; 255
    1a68:	fc 01       	movw	r30, r24
    1a6a:	20 83       	st	Z, r18

	_delay_us(1);
	ENH; // E = 1
    1a6c:	85 e3       	ldi	r24, 0x35	; 53
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	25 e3       	ldi	r18, 0x35	; 53
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	f9 01       	movw	r30, r18
    1a76:	20 81       	ld	r18, Z
    1a78:	24 60       	ori	r18, 0x04	; 4
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	20 83       	st	Z, r18
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	a0 e8       	ldi	r26, 0x80	; 128
    1a84:	bf e3       	ldi	r27, 0x3F	; 63
    1a86:	8d 87       	std	Y+13, r24	; 0x0d
    1a88:	9e 87       	std	Y+14, r25	; 0x0e
    1a8a:	af 87       	std	Y+15, r26	; 0x0f
    1a8c:	b8 8b       	std	Y+16, r27	; 0x10
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1a8e:	2b ea       	ldi	r18, 0xAB	; 171
    1a90:	3a ea       	ldi	r19, 0xAA	; 170
    1a92:	4a ea       	ldi	r20, 0xAA	; 170
    1a94:	50 e4       	ldi	r21, 0x40	; 64
    1a96:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a98:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a9c:	98 89       	ldd	r25, Y+16	; 0x10
    1a9e:	df d7       	rcall	.+4030   	; 0x2a5e <__mulsf3>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	89 8b       	std	Y+17, r24	; 0x11
    1aa6:	9a 8b       	std	Y+18, r25	; 0x12
    1aa8:	ab 8b       	std	Y+19, r26	; 0x13
    1aaa:	bc 8b       	std	Y+20, r27	; 0x14
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e8       	ldi	r20, 0x80	; 128
    1ab2:	50 e4       	ldi	r21, 0x40	; 64
    1ab4:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ab6:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ab8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aba:	98 89       	ldd	r25, Y+16	; 0x10
    1abc:	d0 d7       	rcall	.+4000   	; 0x2a5e <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	8d 8b       	std	Y+21, r24	; 0x15
    1ac4:	9e 8b       	std	Y+22, r25	; 0x16
    1ac6:	af 8b       	std	Y+23, r26	; 0x17
    1ac8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e8       	ldi	r20, 0x80	; 128
    1ad0:	5f e3       	ldi	r21, 0x3F	; 63
    1ad2:	69 89       	ldd	r22, Y+17	; 0x11
    1ad4:	7a 89       	ldd	r23, Y+18	; 0x12
    1ad6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ada:	b0 d6       	rcall	.+3424   	; 0x283c <__cmpsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	1c f4       	brge	.+6      	; 0x1ae6 <Command+0x98e>
		__ticks = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	89 8f       	std	Y+25, r24	; 0x19
	else if (__tmp2 > 65535)
    1ae4:	a7 c0       	rjmp	.+334    	; 0x1c34 <Command+0xadc>
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	3f ef       	ldi	r19, 0xFF	; 255
    1aea:	4f e7       	ldi	r20, 0x7F	; 127
    1aec:	57 e4       	ldi	r21, 0x47	; 71
    1aee:	6d 89       	ldd	r22, Y+21	; 0x15
    1af0:	7e 89       	ldd	r23, Y+22	; 0x16
    1af2:	8f 89       	ldd	r24, Y+23	; 0x17
    1af4:	98 8d       	ldd	r25, Y+24	; 0x18
    1af6:	af d7       	rcall	.+3934   	; 0x2a56 <__gesf2>
    1af8:	18 16       	cp	r1, r24
    1afa:	0c f0       	brlt	.+2      	; 0x1afe <Command+0x9a6>
    1afc:	74 c0       	rjmp	.+232    	; 0x1be6 <Command+0xa8e>
	{
		_delay_ms(__us / 1000.0);
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	4a e7       	ldi	r20, 0x7A	; 122
    1b04:	54 e4       	ldi	r21, 0x44	; 68
    1b06:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b08:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b0c:	98 89       	ldd	r25, Y+16	; 0x10
    1b0e:	9a d6       	rcall	.+3380   	; 0x2844 <__divsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	8a 8f       	std	Y+26, r24	; 0x1a
    1b16:	9b 8f       	std	Y+27, r25	; 0x1b
    1b18:	ac 8f       	std	Y+28, r26	; 0x1c
    1b1a:	bd 8f       	std	Y+29, r27	; 0x1d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	4a e7       	ldi	r20, 0x7A	; 122
    1b22:	55 e4       	ldi	r21, 0x45	; 69
    1b24:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b26:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b28:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b2a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b2c:	98 d7       	rcall	.+3888   	; 0x2a5e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	8e 8f       	std	Y+30, r24	; 0x1e
    1b34:	9f 8f       	std	Y+31, r25	; 0x1f
    1b36:	a8 a3       	std	Y+32, r26	; 0x20
    1b38:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e8       	ldi	r20, 0x80	; 128
    1b40:	5f e3       	ldi	r21, 0x3F	; 63
    1b42:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1b44:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1b46:	88 a1       	ldd	r24, Y+32	; 0x20
    1b48:	99 a1       	ldd	r25, Y+33	; 0x21
    1b4a:	78 d6       	rcall	.+3312   	; 0x283c <__cmpsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <Command+0xa02>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9b a3       	std	Y+35, r25	; 0x23
    1b56:	8a a3       	std	Y+34, r24	; 0x22
    1b58:	3b c0       	rjmp	.+118    	; 0x1bd0 <Command+0xa78>
	else if (__tmp > 65535)
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	3f ef       	ldi	r19, 0xFF	; 255
    1b5e:	4f e7       	ldi	r20, 0x7F	; 127
    1b60:	57 e4       	ldi	r21, 0x47	; 71
    1b62:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1b64:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1b66:	88 a1       	ldd	r24, Y+32	; 0x20
    1b68:	99 a1       	ldd	r25, Y+33	; 0x21
    1b6a:	75 d7       	rcall	.+3818   	; 0x2a56 <__gesf2>
    1b6c:	18 16       	cp	r1, r24
    1b6e:	3c f5       	brge	.+78     	; 0x1bbe <Command+0xa66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e2       	ldi	r20, 0x20	; 32
    1b76:	51 e4       	ldi	r21, 0x41	; 65
    1b78:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b7a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b7c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b7e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b80:	6e d7       	rcall	.+3804   	; 0x2a5e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	bc 01       	movw	r22, r24
    1b88:	cd 01       	movw	r24, r26
    1b8a:	c4 d6       	rcall	.+3464   	; 0x2914 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9b a3       	std	Y+35, r25	; 0x23
    1b92:	8a a3       	std	Y+34, r24	; 0x22
    1b94:	0f c0       	rjmp	.+30     	; 0x1bb4 <Command+0xa5c>
    1b96:	80 e9       	ldi	r24, 0x90	; 144
    1b98:	91 e0       	ldi	r25, 0x01	; 1
    1b9a:	9d a3       	std	Y+37, r25	; 0x25
    1b9c:	8c a3       	std	Y+36, r24	; 0x24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b9e:	8c a1       	ldd	r24, Y+36	; 0x24
    1ba0:	9d a1       	ldd	r25, Y+37	; 0x25
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <Command+0xa4a>
    1ba6:	9d a3       	std	Y+37, r25	; 0x25
    1ba8:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1baa:	8a a1       	ldd	r24, Y+34	; 0x22
    1bac:	9b a1       	ldd	r25, Y+35	; 0x23
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	9b a3       	std	Y+35, r25	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb2:	8a a3       	std	Y+34, r24	; 0x22
    1bb4:	8a a1       	ldd	r24, Y+34	; 0x22
    1bb6:	9b a1       	ldd	r25, Y+35	; 0x23
    1bb8:	89 2b       	or	r24, r25
    1bba:	69 f7       	brne	.-38     	; 0x1b96 <Command+0xa3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbc:	3b c0       	rjmp	.+118    	; 0x1c34 <Command+0xadc>
    1bbe:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1bc0:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1bc2:	88 a1       	ldd	r24, Y+32	; 0x20
    1bc4:	99 a1       	ldd	r25, Y+33	; 0x21
    1bc6:	a6 d6       	rcall	.+3404   	; 0x2914 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9b a3       	std	Y+35, r25	; 0x23
    1bce:	8a a3       	std	Y+34, r24	; 0x22
    1bd0:	8a a1       	ldd	r24, Y+34	; 0x22
    1bd2:	9b a1       	ldd	r25, Y+35	; 0x23
    1bd4:	9f a3       	std	Y+39, r25	; 0x27
    1bd6:	8e a3       	std	Y+38, r24	; 0x26
    1bd8:	8e a1       	ldd	r24, Y+38	; 0x26
    1bda:	9f a1       	ldd	r25, Y+39	; 0x27
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <Command+0xa84>
    1be0:	9f a3       	std	Y+39, r25	; 0x27
    1be2:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1be4:	27 c0       	rjmp	.+78     	; 0x1c34 <Command+0xadc>
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4f e7       	ldi	r20, 0x7F	; 127
    1bec:	53 e4       	ldi	r21, 0x43	; 67
    1bee:	69 89       	ldd	r22, Y+17	; 0x11
    1bf0:	7a 89       	ldd	r23, Y+18	; 0x12
    1bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf6:	2f d7       	rcall	.+3678   	; 0x2a56 <__gesf2>
    1bf8:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1bfa:	a4 f4       	brge	.+40     	; 0x1c24 <Command+0xacc>
    1bfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1c00:	8f 89       	ldd	r24, Y+23	; 0x17
    1c02:	98 8d       	ldd	r25, Y+24	; 0x18
    1c04:	87 d6       	rcall	.+3342   	; 0x2914 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	99 a7       	std	Y+41, r25	; 0x29
    1c0c:	88 a7       	std	Y+40, r24	; 0x28
    1c0e:	88 a5       	ldd	r24, Y+40	; 0x28
    1c10:	99 a5       	ldd	r25, Y+41	; 0x29
    1c12:	9b a7       	std	Y+43, r25	; 0x2b
    1c14:	8a a7       	std	Y+42, r24	; 0x2a
    1c16:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c18:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <Command+0xac2>
    1c1e:	9b a7       	std	Y+43, r25	; 0x2b
    1c20:	8a a7       	std	Y+42, r24	; 0x2a
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c22:	0e c0       	rjmp	.+28     	; 0x1c40 <Command+0xae8>
    1c24:	69 89       	ldd	r22, Y+17	; 0x11
    1c26:	7a 89       	ldd	r23, Y+18	; 0x12
    1c28:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2c:	73 d6       	rcall	.+3302   	; 0x2914 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	89 8f       	std	Y+25, r24	; 0x19
    1c34:	89 8d       	ldd	r24, Y+25	; 0x19
    1c36:	8c a7       	std	Y+44, r24	; 0x2c
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c38:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c3a:	8a 95       	dec	r24
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <Command+0xae2>
    1c3e:	8c a7       	std	Y+44, r24	; 0x2c

	_delay_us(1);
	ENL; // E = 0
    1c40:	85 e3       	ldi	r24, 0x35	; 53
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	25 e3       	ldi	r18, 0x35	; 53
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	f9 01       	movw	r30, r18
    1c4a:	20 81       	ld	r18, Z
    1c4c:	2b 7f       	andi	r18, 0xFB	; 251
    1c4e:	fc 01       	movw	r30, r24
    1c50:	20 83       	st	Z, r18
}
    1c52:	00 00       	nop
    1c54:	cf 57       	subi	r28, 0x7F	; 127
    1c56:	df 4f       	sbci	r29, 0xFF	; 255
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	1f 91       	pop	r17
    1c68:	0f 91       	pop	r16
    1c6a:	08 95       	ret

00001c6c <Data>:

void Data(u_char byte)
{
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	c1 58       	subi	r28, 0x81	; 129
    1c7a:	d1 09       	sbc	r29, r1
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	9e 01       	movw	r18, r28
    1c88:	2f 57       	subi	r18, 0x7F	; 127
    1c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8c:	f9 01       	movw	r30, r18
    1c8e:	80 83       	st	Z, r24
	Busy();
    1c90:	55 d5       	rcall	.+2730   	; 0x273c <Busy>
	// 데이터 상위 4비트
	PORTC = 0x01; // RS=1, RW=0
    1c92:	85 e3       	ldi	r24, 0x35	; 53
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	21 e0       	ldi	r18, 0x01	; 1
    1c98:	fc 01       	movw	r30, r24
    1c9a:	20 83       	st	Z, r18
	PORTC |= (byte & 0xF0); // 데이터 상위 4비트
    1c9c:	85 e3       	ldi	r24, 0x35	; 53
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	25 e3       	ldi	r18, 0x35	; 53
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	f9 01       	movw	r30, r18
    1ca6:	20 81       	ld	r18, Z
    1ca8:	42 2f       	mov	r20, r18
    1caa:	9e 01       	movw	r18, r28
    1cac:	2f 57       	subi	r18, 0x7F	; 127
    1cae:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb0:	f9 01       	movw	r30, r18
    1cb2:	20 81       	ld	r18, Z
    1cb4:	20 7f       	andi	r18, 0xF0	; 240
    1cb6:	24 2b       	or	r18, r20
    1cb8:	fc 01       	movw	r30, r24
    1cba:	20 83       	st	Z, r18
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a0 e8       	ldi	r26, 0x80	; 128
    1cc2:	bf e3       	ldi	r27, 0x3F	; 63
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	ab 83       	std	Y+3, r26	; 0x03
    1cca:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1ccc:	8e 01       	movw	r16, r28
    1cce:	0b 59       	subi	r16, 0x9B	; 155
    1cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd2:	2b ea       	ldi	r18, 0xAB	; 171
    1cd4:	3a ea       	ldi	r19, 0xAA	; 170
    1cd6:	4a ea       	ldi	r20, 0xAA	; 170
    1cd8:	50 e4       	ldi	r21, 0x40	; 64
    1cda:	69 81       	ldd	r22, Y+1	; 0x01
    1cdc:	7a 81       	ldd	r23, Y+2	; 0x02
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	bd d6       	rcall	.+3450   	; 0x2a5e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	f8 01       	movw	r30, r16
    1cea:	80 83       	st	Z, r24
    1cec:	91 83       	std	Z+1, r25	; 0x01
    1cee:	a2 83       	std	Z+2, r26	; 0x02
    1cf0:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1cf2:	8e 01       	movw	r16, r28
    1cf4:	07 59       	subi	r16, 0x97	; 151
    1cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e8       	ldi	r20, 0x80	; 128
    1cfe:	50 e4       	ldi	r21, 0x40	; 64
    1d00:	69 81       	ldd	r22, Y+1	; 0x01
    1d02:	7a 81       	ldd	r23, Y+2	; 0x02
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	aa d6       	rcall	.+3412   	; 0x2a5e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	f8 01       	movw	r30, r16
    1d10:	80 83       	st	Z, r24
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	a2 83       	std	Z+2, r26	; 0x02
    1d16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d18:	ce 01       	movw	r24, r28
    1d1a:	8b 59       	subi	r24, 0x9B	; 155
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e8       	ldi	r20, 0x80	; 128
    1d24:	5f e3       	ldi	r21, 0x3F	; 63
    1d26:	fc 01       	movw	r30, r24
    1d28:	60 81       	ld	r22, Z
    1d2a:	71 81       	ldd	r23, Z+1	; 0x01
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	93 81       	ldd	r25, Z+3	; 0x03
    1d30:	85 d5       	rcall	.+2826   	; 0x283c <__cmpsf2>
    1d32:	88 23       	and	r24, r24
    1d34:	3c f4       	brge	.+14     	; 0x1d44 <Data+0xd8>
		__ticks = 1;
    1d36:	ce 01       	movw	r24, r28
    1d38:	83 59       	subi	r24, 0x93	; 147
    1d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3c:	21 e0       	ldi	r18, 0x01	; 1
    1d3e:	fc 01       	movw	r30, r24
    1d40:	20 83       	st	Z, r18
    1d42:	21 c1       	rjmp	.+578    	; 0x1f86 <Data+0x31a>
	else if (__tmp2 > 65535)
    1d44:	ce 01       	movw	r24, r28
    1d46:	87 59       	subi	r24, 0x97	; 151
    1d48:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	3f ef       	ldi	r19, 0xFF	; 255
    1d4e:	4f e7       	ldi	r20, 0x7F	; 127
    1d50:	57 e4       	ldi	r21, 0x47	; 71
    1d52:	fc 01       	movw	r30, r24
    1d54:	60 81       	ld	r22, Z
    1d56:	71 81       	ldd	r23, Z+1	; 0x01
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	93 81       	ldd	r25, Z+3	; 0x03
    1d5c:	7c d6       	rcall	.+3320   	; 0x2a56 <__gesf2>
    1d5e:	18 16       	cp	r1, r24
    1d60:	0c f0       	brlt	.+2      	; 0x1d64 <Data+0xf8>
    1d62:	c6 c0       	rjmp	.+396    	; 0x1ef0 <Data+0x284>
	{
		_delay_ms(__us / 1000.0);
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	4a e7       	ldi	r20, 0x7A	; 122
    1d6a:	54 e4       	ldi	r21, 0x44	; 68
    1d6c:	69 81       	ldd	r22, Y+1	; 0x01
    1d6e:	7a 81       	ldd	r23, Y+2	; 0x02
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	67 d5       	rcall	.+2766   	; 0x2844 <__divsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	9e 01       	movw	r18, r28
    1d7c:	22 59       	subi	r18, 0x92	; 146
    1d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d80:	f9 01       	movw	r30, r18
    1d82:	80 83       	st	Z, r24
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	a2 83       	std	Z+2, r26	; 0x02
    1d88:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d8a:	8e 01       	movw	r16, r28
    1d8c:	0e 58       	subi	r16, 0x8E	; 142
    1d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d90:	ce 01       	movw	r24, r28
    1d92:	82 59       	subi	r24, 0x92	; 146
    1d94:	9f 4f       	sbci	r25, 0xFF	; 255
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	4a e7       	ldi	r20, 0x7A	; 122
    1d9c:	55 e4       	ldi	r21, 0x45	; 69
    1d9e:	fc 01       	movw	r30, r24
    1da0:	60 81       	ld	r22, Z
    1da2:	71 81       	ldd	r23, Z+1	; 0x01
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	5a d6       	rcall	.+3252   	; 0x2a5e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	f8 01       	movw	r30, r16
    1db0:	80 83       	st	Z, r24
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	a2 83       	std	Z+2, r26	; 0x02
    1db6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1db8:	ce 01       	movw	r24, r28
    1dba:	8e 58       	subi	r24, 0x8E	; 142
    1dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e8       	ldi	r20, 0x80	; 128
    1dc4:	5f e3       	ldi	r21, 0x3F	; 63
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	60 81       	ld	r22, Z
    1dca:	71 81       	ldd	r23, Z+1	; 0x01
    1dcc:	82 81       	ldd	r24, Z+2	; 0x02
    1dce:	93 81       	ldd	r25, Z+3	; 0x03
    1dd0:	35 d5       	rcall	.+2666   	; 0x283c <__cmpsf2>
    1dd2:	88 23       	and	r24, r24
    1dd4:	4c f4       	brge	.+18     	; 0x1de8 <Data+0x17c>
		__ticks = 1;
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	8a 58       	subi	r24, 0x8A	; 138
    1dda:	9f 4f       	sbci	r25, 0xFF	; 255
    1ddc:	21 e0       	ldi	r18, 0x01	; 1
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	fc 01       	movw	r30, r24
    1de2:	31 83       	std	Z+1, r19	; 0x01
    1de4:	20 83       	st	Z, r18
    1de6:	69 c0       	rjmp	.+210    	; 0x1eba <Data+0x24e>
	else if (__tmp > 65535)
    1de8:	ce 01       	movw	r24, r28
    1dea:	8e 58       	subi	r24, 0x8E	; 142
    1dec:	9f 4f       	sbci	r25, 0xFF	; 255
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	57 e4       	ldi	r21, 0x47	; 71
    1df6:	fc 01       	movw	r30, r24
    1df8:	60 81       	ld	r22, Z
    1dfa:	71 81       	ldd	r23, Z+1	; 0x01
    1dfc:	82 81       	ldd	r24, Z+2	; 0x02
    1dfe:	93 81       	ldd	r25, Z+3	; 0x03
    1e00:	2a d6       	rcall	.+3156   	; 0x2a56 <__gesf2>
    1e02:	18 16       	cp	r1, r24
    1e04:	0c f0       	brlt	.+2      	; 0x1e08 <Data+0x19c>
    1e06:	48 c0       	rjmp	.+144    	; 0x1e98 <Data+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e08:	ce 01       	movw	r24, r28
    1e0a:	82 59       	subi	r24, 0x92	; 146
    1e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e2       	ldi	r20, 0x20	; 32
    1e14:	51 e4       	ldi	r21, 0x41	; 65
    1e16:	fc 01       	movw	r30, r24
    1e18:	60 81       	ld	r22, Z
    1e1a:	71 81       	ldd	r23, Z+1	; 0x01
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	1e d6       	rcall	.+3132   	; 0x2a5e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	8e 01       	movw	r16, r28
    1e28:	0a 58       	subi	r16, 0x8A	; 138
    1e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	71 d5       	rcall	.+2786   	; 0x2914 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	f8 01       	movw	r30, r16
    1e38:	91 83       	std	Z+1, r25	; 0x01
    1e3a:	80 83       	st	Z, r24
    1e3c:	24 c0       	rjmp	.+72     	; 0x1e86 <Data+0x21a>
    1e3e:	ce 01       	movw	r24, r28
    1e40:	88 58       	subi	r24, 0x88	; 136
    1e42:	9f 4f       	sbci	r25, 0xFF	; 255
    1e44:	20 e9       	ldi	r18, 0x90	; 144
    1e46:	31 e0       	ldi	r19, 0x01	; 1
    1e48:	fc 01       	movw	r30, r24
    1e4a:	31 83       	std	Z+1, r19	; 0x01
    1e4c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e4e:	ce 01       	movw	r24, r28
    1e50:	88 58       	subi	r24, 0x88	; 136
    1e52:	9f 4f       	sbci	r25, 0xFF	; 255
    1e54:	fc 01       	movw	r30, r24
    1e56:	80 81       	ld	r24, Z
    1e58:	91 81       	ldd	r25, Z+1	; 0x01
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <Data+0x1ee>
    1e5e:	9e 01       	movw	r18, r28
    1e60:	28 58       	subi	r18, 0x88	; 136
    1e62:	3f 4f       	sbci	r19, 0xFF	; 255
    1e64:	f9 01       	movw	r30, r18
    1e66:	91 83       	std	Z+1, r25	; 0x01
    1e68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	8a 58       	subi	r24, 0x8A	; 138
    1e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e70:	9e 01       	movw	r18, r28
    1e72:	2a 58       	subi	r18, 0x8A	; 138
    1e74:	3f 4f       	sbci	r19, 0xFF	; 255
    1e76:	f9 01       	movw	r30, r18
    1e78:	20 81       	ld	r18, Z
    1e7a:	31 81       	ldd	r19, Z+1	; 0x01
    1e7c:	21 50       	subi	r18, 0x01	; 1
    1e7e:	31 09       	sbc	r19, r1
    1e80:	fc 01       	movw	r30, r24
    1e82:	31 83       	std	Z+1, r19	; 0x01
    1e84:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e86:	ce 01       	movw	r24, r28
    1e88:	8a 58       	subi	r24, 0x8A	; 138
    1e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	80 81       	ld	r24, Z
    1e90:	91 81       	ldd	r25, Z+1	; 0x01
    1e92:	89 2b       	or	r24, r25
    1e94:	a1 f6       	brne	.-88     	; 0x1e3e <Data+0x1d2>
    1e96:	77 c0       	rjmp	.+238    	; 0x1f86 <Data+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e98:	8e 01       	movw	r16, r28
    1e9a:	0a 58       	subi	r16, 0x8A	; 138
    1e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	8e 58       	subi	r24, 0x8E	; 142
    1ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	60 81       	ld	r22, Z
    1ea8:	71 81       	ldd	r23, Z+1	; 0x01
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	32 d5       	rcall	.+2660   	; 0x2914 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	80 83       	st	Z, r24
    1eba:	ce 01       	movw	r24, r28
    1ebc:	86 58       	subi	r24, 0x86	; 134
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	9e 01       	movw	r18, r28
    1ec2:	2a 58       	subi	r18, 0x8A	; 138
    1ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec6:	f9 01       	movw	r30, r18
    1ec8:	20 81       	ld	r18, Z
    1eca:	31 81       	ldd	r19, Z+1	; 0x01
    1ecc:	fc 01       	movw	r30, r24
    1ece:	31 83       	std	Z+1, r19	; 0x01
    1ed0:	20 83       	st	Z, r18
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	86 58       	subi	r24, 0x86	; 134
    1ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed8:	fc 01       	movw	r30, r24
    1eda:	80 81       	ld	r24, Z
    1edc:	91 81       	ldd	r25, Z+1	; 0x01
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <Data+0x272>
    1ee2:	9e 01       	movw	r18, r28
    1ee4:	26 58       	subi	r18, 0x86	; 134
    1ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee8:	f9 01       	movw	r30, r18
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	80 83       	st	Z, r24
    1eee:	4b c0       	rjmp	.+150    	; 0x1f86 <Data+0x31a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	8b 59       	subi	r24, 0x9B	; 155
    1ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	4f e7       	ldi	r20, 0x7F	; 127
    1efc:	53 e4       	ldi	r21, 0x43	; 67
    1efe:	fc 01       	movw	r30, r24
    1f00:	60 81       	ld	r22, Z
    1f02:	71 81       	ldd	r23, Z+1	; 0x01
    1f04:	82 81       	ldd	r24, Z+2	; 0x02
    1f06:	93 81       	ldd	r25, Z+3	; 0x03
    1f08:	a6 d5       	rcall	.+2892   	; 0x2a56 <__gesf2>
    1f0a:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1f0c:	64 f5       	brge	.+88     	; 0x1f66 <Data+0x2fa>
    1f0e:	8e 01       	movw	r16, r28
    1f10:	04 58       	subi	r16, 0x84	; 132
    1f12:	1f 4f       	sbci	r17, 0xFF	; 255
    1f14:	ce 01       	movw	r24, r28
    1f16:	87 59       	subi	r24, 0x97	; 151
    1f18:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	60 81       	ld	r22, Z
    1f1e:	71 81       	ldd	r23, Z+1	; 0x01
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	93 81       	ldd	r25, Z+3	; 0x03
    1f24:	f7 d4       	rcall	.+2542   	; 0x2914 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	f8 01       	movw	r30, r16
    1f2c:	91 83       	std	Z+1, r25	; 0x01
    1f2e:	80 83       	st	Z, r24
    1f30:	ce 01       	movw	r24, r28
    1f32:	82 58       	subi	r24, 0x82	; 130
    1f34:	9f 4f       	sbci	r25, 0xFF	; 255
    1f36:	9e 01       	movw	r18, r28
    1f38:	24 58       	subi	r18, 0x84	; 132
    1f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3c:	f9 01       	movw	r30, r18
    1f3e:	20 81       	ld	r18, Z
    1f40:	31 81       	ldd	r19, Z+1	; 0x01
    1f42:	fc 01       	movw	r30, r24
    1f44:	31 83       	std	Z+1, r19	; 0x01
    1f46:	20 83       	st	Z, r18
    1f48:	ce 01       	movw	r24, r28
    1f4a:	82 58       	subi	r24, 0x82	; 130
    1f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4e:	fc 01       	movw	r30, r24
    1f50:	80 81       	ld	r24, Z
    1f52:	91 81       	ldd	r25, Z+1	; 0x01
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <Data+0x2e8>
    1f58:	9e 01       	movw	r18, r28
    1f5a:	22 58       	subi	r18, 0x82	; 130
    1f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5e:	f9 01       	movw	r30, r18
    1f60:	91 83       	std	Z+1, r25	; 0x01
    1f62:	80 83       	st	Z, r24
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f64:	27 c0       	rjmp	.+78     	; 0x1fb4 <Data+0x348>
    1f66:	8e 01       	movw	r16, r28
    1f68:	03 59       	subi	r16, 0x93	; 147
    1f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	8b 59       	subi	r24, 0x9B	; 155
    1f70:	9f 4f       	sbci	r25, 0xFF	; 255
    1f72:	fc 01       	movw	r30, r24
    1f74:	60 81       	ld	r22, Z
    1f76:	71 81       	ldd	r23, Z+1	; 0x01
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	cb d4       	rcall	.+2454   	; 0x2914 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	f8 01       	movw	r30, r16
    1f84:	80 83       	st	Z, r24
    1f86:	ce 01       	movw	r24, r28
    1f88:	80 58       	subi	r24, 0x80	; 128
    1f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8c:	9e 01       	movw	r18, r28
    1f8e:	23 59       	subi	r18, 0x93	; 147
    1f90:	3f 4f       	sbci	r19, 0xFF	; 255
    1f92:	f9 01       	movw	r30, r18
    1f94:	20 81       	ld	r18, Z
    1f96:	fc 01       	movw	r30, r24
    1f98:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	80 58       	subi	r24, 0x80	; 128
    1f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	80 81       	ld	r24, Z
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	2a 95       	dec	r18
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <Data+0x33a>
    1faa:	ce 01       	movw	r24, r28
    1fac:	80 58       	subi	r24, 0x80	; 128
    1fae:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	20 83       	st	Z, r18
	_delay_us(1);
	ENH; // E = 1
    1fb4:	85 e3       	ldi	r24, 0x35	; 53
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	25 e3       	ldi	r18, 0x35	; 53
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	f9 01       	movw	r30, r18
    1fbe:	20 81       	ld	r18, Z
    1fc0:	24 60       	ori	r18, 0x04	; 4
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	20 83       	st	Z, r18
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	a0 e8       	ldi	r26, 0x80	; 128
    1fcc:	bf e3       	ldi	r27, 0x3F	; 63
    1fce:	8d 83       	std	Y+5, r24	; 0x05
    1fd0:	9e 83       	std	Y+6, r25	; 0x06
    1fd2:	af 83       	std	Y+7, r26	; 0x07
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1fd4:	b8 87       	std	Y+8, r27	; 0x08
    1fd6:	8e 01       	movw	r16, r28
    1fd8:	07 5b       	subi	r16, 0xB7	; 183
    1fda:	1f 4f       	sbci	r17, 0xFF	; 255
    1fdc:	2b ea       	ldi	r18, 0xAB	; 171
    1fde:	3a ea       	ldi	r19, 0xAA	; 170
    1fe0:	4a ea       	ldi	r20, 0xAA	; 170
    1fe2:	50 e4       	ldi	r21, 0x40	; 64
    1fe4:	6d 81       	ldd	r22, Y+5	; 0x05
    1fe6:	7e 81       	ldd	r23, Y+6	; 0x06
    1fe8:	8f 81       	ldd	r24, Y+7	; 0x07
    1fea:	98 85       	ldd	r25, Y+8	; 0x08
    1fec:	38 d5       	rcall	.+2672   	; 0x2a5e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	f8 01       	movw	r30, r16
    1ff4:	80 83       	st	Z, r24
    1ff6:	91 83       	std	Z+1, r25	; 0x01
    1ff8:	a2 83       	std	Z+2, r26	; 0x02
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1ffa:	b3 83       	std	Z+3, r27	; 0x03
    1ffc:	8e 01       	movw	r16, r28
    1ffe:	03 5b       	subi	r16, 0xB3	; 179
    2000:	1f 4f       	sbci	r17, 0xFF	; 255
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e8       	ldi	r20, 0x80	; 128
    2008:	50 e4       	ldi	r21, 0x40	; 64
    200a:	6d 81       	ldd	r22, Y+5	; 0x05
    200c:	7e 81       	ldd	r23, Y+6	; 0x06
    200e:	8f 81       	ldd	r24, Y+7	; 0x07
    2010:	98 85       	ldd	r25, Y+8	; 0x08
    2012:	25 d5       	rcall	.+2634   	; 0x2a5e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	f8 01       	movw	r30, r16
    201a:	80 83       	st	Z, r24
    201c:	91 83       	std	Z+1, r25	; 0x01
    201e:	a2 83       	std	Z+2, r26	; 0x02
	if (__tmp < 1.0)
    2020:	b3 83       	std	Z+3, r27	; 0x03
    2022:	ce 01       	movw	r24, r28
    2024:	87 5b       	subi	r24, 0xB7	; 183
    2026:	9f 4f       	sbci	r25, 0xFF	; 255
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	fc 01       	movw	r30, r24
    2032:	60 81       	ld	r22, Z
    2034:	71 81       	ldd	r23, Z+1	; 0x01
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	00 d4       	rcall	.+2048   	; 0x283c <__cmpsf2>
    203c:	88 23       	and	r24, r24
    203e:	3c f4       	brge	.+14     	; 0x204e <Data+0x3e2>
		__ticks = 1;
    2040:	ce 01       	movw	r24, r28
    2042:	8f 5a       	subi	r24, 0xAF	; 175
    2044:	9f 4f       	sbci	r25, 0xFF	; 255
    2046:	21 e0       	ldi	r18, 0x01	; 1
    2048:	fc 01       	movw	r30, r24
    204a:	20 83       	st	Z, r18
	else if (__tmp2 > 65535)
    204c:	21 c1       	rjmp	.+578    	; 0x2290 <Data+0x624>
    204e:	ce 01       	movw	r24, r28
    2050:	83 5b       	subi	r24, 0xB3	; 179
    2052:	9f 4f       	sbci	r25, 0xFF	; 255
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	3f ef       	ldi	r19, 0xFF	; 255
    2058:	4f e7       	ldi	r20, 0x7F	; 127
    205a:	57 e4       	ldi	r21, 0x47	; 71
    205c:	fc 01       	movw	r30, r24
    205e:	60 81       	ld	r22, Z
    2060:	71 81       	ldd	r23, Z+1	; 0x01
    2062:	82 81       	ldd	r24, Z+2	; 0x02
    2064:	93 81       	ldd	r25, Z+3	; 0x03
    2066:	f7 d4       	rcall	.+2542   	; 0x2a56 <__gesf2>
    2068:	18 16       	cp	r1, r24
    206a:	0c f0       	brlt	.+2      	; 0x206e <Data+0x402>
	{
		_delay_ms(__us / 1000.0);
    206c:	c6 c0       	rjmp	.+396    	; 0x21fa <Data+0x58e>
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	4a e7       	ldi	r20, 0x7A	; 122
    2074:	54 e4       	ldi	r21, 0x44	; 68
    2076:	6d 81       	ldd	r22, Y+5	; 0x05
    2078:	7e 81       	ldd	r23, Y+6	; 0x06
    207a:	8f 81       	ldd	r24, Y+7	; 0x07
    207c:	98 85       	ldd	r25, Y+8	; 0x08
    207e:	e2 d3       	rcall	.+1988   	; 0x2844 <__divsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9e 01       	movw	r18, r28
    2086:	2e 5a       	subi	r18, 0xAE	; 174
    2088:	3f 4f       	sbci	r19, 0xFF	; 255
    208a:	f9 01       	movw	r30, r18
    208c:	80 83       	st	Z, r24
    208e:	91 83       	std	Z+1, r25	; 0x01
    2090:	a2 83       	std	Z+2, r26	; 0x02

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2092:	b3 83       	std	Z+3, r27	; 0x03
    2094:	8e 01       	movw	r16, r28
    2096:	0a 5a       	subi	r16, 0xAA	; 170
    2098:	1f 4f       	sbci	r17, 0xFF	; 255
    209a:	ce 01       	movw	r24, r28
    209c:	8e 5a       	subi	r24, 0xAE	; 174
    209e:	9f 4f       	sbci	r25, 0xFF	; 255
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	4a e7       	ldi	r20, 0x7A	; 122
    20a6:	55 e4       	ldi	r21, 0x45	; 69
    20a8:	fc 01       	movw	r30, r24
    20aa:	60 81       	ld	r22, Z
    20ac:	71 81       	ldd	r23, Z+1	; 0x01
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	93 81       	ldd	r25, Z+3	; 0x03
    20b2:	d5 d4       	rcall	.+2474   	; 0x2a5e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	f8 01       	movw	r30, r16
    20ba:	80 83       	st	Z, r24
    20bc:	91 83       	std	Z+1, r25	; 0x01
    20be:	a2 83       	std	Z+2, r26	; 0x02
	if (__tmp < 1.0)
    20c0:	b3 83       	std	Z+3, r27	; 0x03
    20c2:	ce 01       	movw	r24, r28
    20c4:	8a 5a       	subi	r24, 0xAA	; 170
    20c6:	9f 4f       	sbci	r25, 0xFF	; 255
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	fc 01       	movw	r30, r24
    20d2:	60 81       	ld	r22, Z
    20d4:	71 81       	ldd	r23, Z+1	; 0x01
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	b0 d3       	rcall	.+1888   	; 0x283c <__cmpsf2>
    20dc:	88 23       	and	r24, r24
		__ticks = 1;
    20de:	4c f4       	brge	.+18     	; 0x20f2 <Data+0x486>
    20e0:	ce 01       	movw	r24, r28
    20e2:	86 5a       	subi	r24, 0xA6	; 166
    20e4:	9f 4f       	sbci	r25, 0xFF	; 255
    20e6:	21 e0       	ldi	r18, 0x01	; 1
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	fc 01       	movw	r30, r24
    20ec:	31 83       	std	Z+1, r19	; 0x01
    20ee:	20 83       	st	Z, r18
	else if (__tmp > 65535)
    20f0:	69 c0       	rjmp	.+210    	; 0x21c4 <Data+0x558>
    20f2:	ce 01       	movw	r24, r28
    20f4:	8a 5a       	subi	r24, 0xAA	; 170
    20f6:	9f 4f       	sbci	r25, 0xFF	; 255
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	3f ef       	ldi	r19, 0xFF	; 255
    20fc:	4f e7       	ldi	r20, 0x7F	; 127
    20fe:	57 e4       	ldi	r21, 0x47	; 71
    2100:	fc 01       	movw	r30, r24
    2102:	60 81       	ld	r22, Z
    2104:	71 81       	ldd	r23, Z+1	; 0x01
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	a5 d4       	rcall	.+2378   	; 0x2a56 <__gesf2>
    210c:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210e:	0c f0       	brlt	.+2      	; 0x2112 <Data+0x4a6>
    2110:	48 c0       	rjmp	.+144    	; 0x21a2 <Data+0x536>
    2112:	ce 01       	movw	r24, r28
    2114:	8e 5a       	subi	r24, 0xAE	; 174
    2116:	9f 4f       	sbci	r25, 0xFF	; 255
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e2       	ldi	r20, 0x20	; 32
    211e:	51 e4       	ldi	r21, 0x41	; 65
    2120:	fc 01       	movw	r30, r24
    2122:	60 81       	ld	r22, Z
    2124:	71 81       	ldd	r23, Z+1	; 0x01
    2126:	82 81       	ldd	r24, Z+2	; 0x02
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	99 d4       	rcall	.+2354   	; 0x2a5e <__mulsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	8e 01       	movw	r16, r28
    2132:	06 5a       	subi	r16, 0xA6	; 166
    2134:	1f 4f       	sbci	r17, 0xFF	; 255
    2136:	bc 01       	movw	r22, r24
    2138:	cd 01       	movw	r24, r26
    213a:	ec d3       	rcall	.+2008   	; 0x2914 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	f8 01       	movw	r30, r16
    2142:	91 83       	std	Z+1, r25	; 0x01
    2144:	80 83       	st	Z, r24
    2146:	24 c0       	rjmp	.+72     	; 0x2190 <Data+0x524>
    2148:	ce 01       	movw	r24, r28
    214a:	84 5a       	subi	r24, 0xA4	; 164
    214c:	9f 4f       	sbci	r25, 0xFF	; 255
    214e:	20 e9       	ldi	r18, 0x90	; 144
    2150:	31 e0       	ldi	r19, 0x01	; 1
    2152:	fc 01       	movw	r30, r24
    2154:	31 83       	std	Z+1, r19	; 0x01
    2156:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2158:	ce 01       	movw	r24, r28
    215a:	84 5a       	subi	r24, 0xA4	; 164
    215c:	9f 4f       	sbci	r25, 0xFF	; 255
    215e:	fc 01       	movw	r30, r24
    2160:	80 81       	ld	r24, Z
    2162:	91 81       	ldd	r25, Z+1	; 0x01
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <Data+0x4f8>
    2168:	9e 01       	movw	r18, r28
    216a:	24 5a       	subi	r18, 0xA4	; 164
    216c:	3f 4f       	sbci	r19, 0xFF	; 255
    216e:	f9 01       	movw	r30, r18
    2170:	91 83       	std	Z+1, r25	; 0x01
    2172:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2174:	ce 01       	movw	r24, r28
    2176:	86 5a       	subi	r24, 0xA6	; 166
    2178:	9f 4f       	sbci	r25, 0xFF	; 255
    217a:	9e 01       	movw	r18, r28
    217c:	26 5a       	subi	r18, 0xA6	; 166
    217e:	3f 4f       	sbci	r19, 0xFF	; 255
    2180:	f9 01       	movw	r30, r18
    2182:	20 81       	ld	r18, Z
    2184:	31 81       	ldd	r19, Z+1	; 0x01
    2186:	21 50       	subi	r18, 0x01	; 1
    2188:	31 09       	sbc	r19, r1
    218a:	fc 01       	movw	r30, r24
    218c:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218e:	20 83       	st	Z, r18
    2190:	ce 01       	movw	r24, r28
    2192:	86 5a       	subi	r24, 0xA6	; 166
    2194:	9f 4f       	sbci	r25, 0xFF	; 255
    2196:	fc 01       	movw	r30, r24
    2198:	80 81       	ld	r24, Z
    219a:	91 81       	ldd	r25, Z+1	; 0x01
    219c:	89 2b       	or	r24, r25
    219e:	a1 f6       	brne	.-88     	; 0x2148 <Data+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a0:	77 c0       	rjmp	.+238    	; 0x2290 <Data+0x624>
    21a2:	8e 01       	movw	r16, r28
    21a4:	06 5a       	subi	r16, 0xA6	; 166
    21a6:	1f 4f       	sbci	r17, 0xFF	; 255
    21a8:	ce 01       	movw	r24, r28
    21aa:	8a 5a       	subi	r24, 0xAA	; 170
    21ac:	9f 4f       	sbci	r25, 0xFF	; 255
    21ae:	fc 01       	movw	r30, r24
    21b0:	60 81       	ld	r22, Z
    21b2:	71 81       	ldd	r23, Z+1	; 0x01
    21b4:	82 81       	ldd	r24, Z+2	; 0x02
    21b6:	93 81       	ldd	r25, Z+3	; 0x03
    21b8:	ad d3       	rcall	.+1882   	; 0x2914 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	f8 01       	movw	r30, r16
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
    21c4:	ce 01       	movw	r24, r28
    21c6:	82 5a       	subi	r24, 0xA2	; 162
    21c8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ca:	9e 01       	movw	r18, r28
    21cc:	26 5a       	subi	r18, 0xA6	; 166
    21ce:	3f 4f       	sbci	r19, 0xFF	; 255
    21d0:	f9 01       	movw	r30, r18
    21d2:	20 81       	ld	r18, Z
    21d4:	31 81       	ldd	r19, Z+1	; 0x01
    21d6:	fc 01       	movw	r30, r24
    21d8:	31 83       	std	Z+1, r19	; 0x01
    21da:	20 83       	st	Z, r18
    21dc:	ce 01       	movw	r24, r28
    21de:	82 5a       	subi	r24, 0xA2	; 162
    21e0:	9f 4f       	sbci	r25, 0xFF	; 255
    21e2:	fc 01       	movw	r30, r24
    21e4:	80 81       	ld	r24, Z
    21e6:	91 81       	ldd	r25, Z+1	; 0x01
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <Data+0x57c>
    21ec:	9e 01       	movw	r18, r28
    21ee:	22 5a       	subi	r18, 0xA2	; 162
    21f0:	3f 4f       	sbci	r19, 0xFF	; 255
    21f2:	f9 01       	movw	r30, r18
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	80 83       	st	Z, r24
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    21f8:	4b c0       	rjmp	.+150    	; 0x2290 <Data+0x624>
    21fa:	ce 01       	movw	r24, r28
    21fc:	87 5b       	subi	r24, 0xB7	; 183
    21fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4f e7       	ldi	r20, 0x7F	; 127
    2206:	53 e4       	ldi	r21, 0x43	; 67
    2208:	fc 01       	movw	r30, r24
    220a:	60 81       	ld	r22, Z
    220c:	71 81       	ldd	r23, Z+1	; 0x01
    220e:	82 81       	ldd	r24, Z+2	; 0x02
    2210:	93 81       	ldd	r25, Z+3	; 0x03
    2212:	21 d4       	rcall	.+2114   	; 0x2a56 <__gesf2>
    2214:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2216:	64 f5       	brge	.+88     	; 0x2270 <Data+0x604>
    2218:	8e 01       	movw	r16, r28
    221a:	00 5a       	subi	r16, 0xA0	; 160
    221c:	1f 4f       	sbci	r17, 0xFF	; 255
    221e:	ce 01       	movw	r24, r28
    2220:	83 5b       	subi	r24, 0xB3	; 179
    2222:	9f 4f       	sbci	r25, 0xFF	; 255
    2224:	fc 01       	movw	r30, r24
    2226:	60 81       	ld	r22, Z
    2228:	71 81       	ldd	r23, Z+1	; 0x01
    222a:	82 81       	ldd	r24, Z+2	; 0x02
    222c:	93 81       	ldd	r25, Z+3	; 0x03
    222e:	72 d3       	rcall	.+1764   	; 0x2914 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	f8 01       	movw	r30, r16
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	80 83       	st	Z, r24
    223a:	ce 01       	movw	r24, r28
    223c:	8e 59       	subi	r24, 0x9E	; 158
    223e:	9f 4f       	sbci	r25, 0xFF	; 255
    2240:	9e 01       	movw	r18, r28
    2242:	20 5a       	subi	r18, 0xA0	; 160
    2244:	3f 4f       	sbci	r19, 0xFF	; 255
    2246:	f9 01       	movw	r30, r18
    2248:	20 81       	ld	r18, Z
    224a:	31 81       	ldd	r19, Z+1	; 0x01
    224c:	fc 01       	movw	r30, r24
    224e:	31 83       	std	Z+1, r19	; 0x01
    2250:	20 83       	st	Z, r18
    2252:	ce 01       	movw	r24, r28
    2254:	8e 59       	subi	r24, 0x9E	; 158
    2256:	9f 4f       	sbci	r25, 0xFF	; 255
    2258:	fc 01       	movw	r30, r24
    225a:	80 81       	ld	r24, Z
    225c:	91 81       	ldd	r25, Z+1	; 0x01
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <Data+0x5f2>
    2262:	9e 01       	movw	r18, r28
    2264:	2e 59       	subi	r18, 0x9E	; 158
    2266:	3f 4f       	sbci	r19, 0xFF	; 255
    2268:	f9 01       	movw	r30, r18
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	80 83       	st	Z, r24
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    226e:	27 c0       	rjmp	.+78     	; 0x22be <Data+0x652>
    2270:	8e 01       	movw	r16, r28
    2272:	0f 5a       	subi	r16, 0xAF	; 175
    2274:	1f 4f       	sbci	r17, 0xFF	; 255
    2276:	ce 01       	movw	r24, r28
    2278:	87 5b       	subi	r24, 0xB7	; 183
    227a:	9f 4f       	sbci	r25, 0xFF	; 255
    227c:	fc 01       	movw	r30, r24
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	46 d3       	rcall	.+1676   	; 0x2914 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	f8 01       	movw	r30, r16
    228e:	80 83       	st	Z, r24
    2290:	ce 01       	movw	r24, r28
    2292:	8c 59       	subi	r24, 0x9C	; 156
    2294:	9f 4f       	sbci	r25, 0xFF	; 255
    2296:	9e 01       	movw	r18, r28
    2298:	2f 5a       	subi	r18, 0xAF	; 175
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	f9 01       	movw	r30, r18
    229e:	20 81       	ld	r18, Z
    22a0:	fc 01       	movw	r30, r24
    22a2:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22a4:	ce 01       	movw	r24, r28
    22a6:	8c 59       	subi	r24, 0x9C	; 156
    22a8:	9f 4f       	sbci	r25, 0xFF	; 255
    22aa:	fc 01       	movw	r30, r24
    22ac:	80 81       	ld	r24, Z
    22ae:	28 2f       	mov	r18, r24
    22b0:	2a 95       	dec	r18
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <Data+0x644>
    22b4:	ce 01       	movw	r24, r28
    22b6:	8c 59       	subi	r24, 0x9C	; 156
    22b8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ba:	fc 01       	movw	r30, r24
    22bc:	20 83       	st	Z, r18
	_delay_us(1);
	ENL; // E = 0
    22be:	85 e3       	ldi	r24, 0x35	; 53
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	25 e3       	ldi	r18, 0x35	; 53
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	f9 01       	movw	r30, r18
    22c8:	20 81       	ld	r18, Z
    22ca:	2b 7f       	andi	r18, 0xFB	; 251
    22cc:	fc 01       	movw	r30, r24
    22ce:	20 83       	st	Z, r18

	// 데이터 하위 4비트
	PORTC = 0x01; // RS=1, RW=0
    22d0:	85 e3       	ldi	r24, 0x35	; 53
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	21 e0       	ldi	r18, 0x01	; 1
    22d6:	fc 01       	movw	r30, r24
    22d8:	20 83       	st	Z, r18
	PORTC |= (byte << 4); // 데이터 하위 4비트
    22da:	85 e3       	ldi	r24, 0x35	; 53
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	25 e3       	ldi	r18, 0x35	; 53
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	f9 01       	movw	r30, r18
    22e4:	20 81       	ld	r18, Z
    22e6:	42 2f       	mov	r20, r18
    22e8:	9e 01       	movw	r18, r28
    22ea:	2f 57       	subi	r18, 0x7F	; 127
    22ec:	3f 4f       	sbci	r19, 0xFF	; 255
    22ee:	f9 01       	movw	r30, r18
    22f0:	20 81       	ld	r18, Z
    22f2:	22 2f       	mov	r18, r18
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	22 95       	swap	r18
    22f8:	32 95       	swap	r19
    22fa:	30 7f       	andi	r19, 0xF0	; 240
    22fc:	32 27       	eor	r19, r18
    22fe:	20 7f       	andi	r18, 0xF0	; 240
    2300:	32 27       	eor	r19, r18
    2302:	24 2b       	or	r18, r20
    2304:	fc 01       	movw	r30, r24
    2306:	20 83       	st	Z, r18
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	a0 e8       	ldi	r26, 0x80	; 128
    230e:	bf e3       	ldi	r27, 0x3F	; 63
    2310:	89 87       	std	Y+9, r24	; 0x09
    2312:	9a 87       	std	Y+10, r25	; 0x0a
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    2314:	ab 87       	std	Y+11, r26	; 0x0b
    2316:	bc 87       	std	Y+12, r27	; 0x0c
    2318:	2b ea       	ldi	r18, 0xAB	; 171
    231a:	3a ea       	ldi	r19, 0xAA	; 170
    231c:	4a ea       	ldi	r20, 0xAA	; 170
    231e:	50 e4       	ldi	r21, 0x40	; 64
    2320:	69 85       	ldd	r22, Y+9	; 0x09
    2322:	7a 85       	ldd	r23, Y+10	; 0x0a
    2324:	8b 85       	ldd	r24, Y+11	; 0x0b
    2326:	9c 85       	ldd	r25, Y+12	; 0x0c
    2328:	9a d3       	rcall	.+1844   	; 0x2a5e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	8d a7       	std	Y+45, r24	; 0x2d
    2330:	9e a7       	std	Y+46, r25	; 0x2e
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2332:	af a7       	std	Y+47, r26	; 0x2f
    2334:	b8 ab       	std	Y+48, r27	; 0x30
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e8       	ldi	r20, 0x80	; 128
    233c:	50 e4       	ldi	r21, 0x40	; 64
    233e:	69 85       	ldd	r22, Y+9	; 0x09
    2340:	7a 85       	ldd	r23, Y+10	; 0x0a
    2342:	8b 85       	ldd	r24, Y+11	; 0x0b
    2344:	9c 85       	ldd	r25, Y+12	; 0x0c
    2346:	8b d3       	rcall	.+1814   	; 0x2a5e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	89 ab       	std	Y+49, r24	; 0x31
    234e:	9a ab       	std	Y+50, r25	; 0x32
	if (__tmp < 1.0)
    2350:	ab ab       	std	Y+51, r26	; 0x33
    2352:	bc ab       	std	Y+52, r27	; 0x34
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e8       	ldi	r20, 0x80	; 128
    235a:	5f e3       	ldi	r21, 0x3F	; 63
    235c:	6d a5       	ldd	r22, Y+45	; 0x2d
    235e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2360:	8f a5       	ldd	r24, Y+47	; 0x2f
    2362:	98 a9       	ldd	r25, Y+48	; 0x30
    2364:	6b d2       	rcall	.+1238   	; 0x283c <__cmpsf2>
		__ticks = 1;
    2366:	88 23       	and	r24, r24
    2368:	1c f4       	brge	.+6      	; 0x2370 <Data+0x704>
    236a:	81 e0       	ldi	r24, 0x01	; 1
	else if (__tmp2 > 65535)
    236c:	8d ab       	std	Y+53, r24	; 0x35
    236e:	d3 c0       	rjmp	.+422    	; 0x2516 <Data+0x8aa>
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	3f ef       	ldi	r19, 0xFF	; 255
    2374:	4f e7       	ldi	r20, 0x7F	; 127
    2376:	57 e4       	ldi	r21, 0x47	; 71
    2378:	69 a9       	ldd	r22, Y+49	; 0x31
    237a:	7a a9       	ldd	r23, Y+50	; 0x32
    237c:	8b a9       	ldd	r24, Y+51	; 0x33
    237e:	9c a9       	ldd	r25, Y+52	; 0x34
    2380:	6a d3       	rcall	.+1748   	; 0x2a56 <__gesf2>
    2382:	18 16       	cp	r1, r24
	{
		_delay_ms(__us / 1000.0);
    2384:	0c f0       	brlt	.+2      	; 0x2388 <Data+0x71c>
    2386:	8c c0       	rjmp	.+280    	; 0x24a0 <Data+0x834>
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	4a e7       	ldi	r20, 0x7A	; 122
    238e:	54 e4       	ldi	r21, 0x44	; 68
    2390:	69 85       	ldd	r22, Y+9	; 0x09
    2392:	7a 85       	ldd	r23, Y+10	; 0x0a
    2394:	8b 85       	ldd	r24, Y+11	; 0x0b
    2396:	9c 85       	ldd	r25, Y+12	; 0x0c
    2398:	55 d2       	rcall	.+1194   	; 0x2844 <__divsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	8e ab       	std	Y+54, r24	; 0x36
    23a0:	9f ab       	std	Y+55, r25	; 0x37

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    23a2:	a8 af       	std	Y+56, r26	; 0x38
    23a4:	b9 af       	std	Y+57, r27	; 0x39
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	4a e7       	ldi	r20, 0x7A	; 122
    23ac:	55 e4       	ldi	r21, 0x45	; 69
    23ae:	6e a9       	ldd	r22, Y+54	; 0x36
    23b0:	7f a9       	ldd	r23, Y+55	; 0x37
    23b2:	88 ad       	ldd	r24, Y+56	; 0x38
    23b4:	99 ad       	ldd	r25, Y+57	; 0x39
    23b6:	53 d3       	rcall	.+1702   	; 0x2a5e <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	8a af       	std	Y+58, r24	; 0x3a
    23be:	9b af       	std	Y+59, r25	; 0x3b
	if (__tmp < 1.0)
    23c0:	ac af       	std	Y+60, r26	; 0x3c
    23c2:	bd af       	std	Y+61, r27	; 0x3d
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e8       	ldi	r20, 0x80	; 128
    23ca:	5f e3       	ldi	r21, 0x3F	; 63
    23cc:	6a ad       	ldd	r22, Y+58	; 0x3a
    23ce:	7b ad       	ldd	r23, Y+59	; 0x3b
    23d0:	8c ad       	ldd	r24, Y+60	; 0x3c
    23d2:	9d ad       	ldd	r25, Y+61	; 0x3d
		__ticks = 1;
    23d4:	33 d2       	rcall	.+1126   	; 0x283c <__cmpsf2>
    23d6:	88 23       	and	r24, r24
    23d8:	2c f4       	brge	.+10     	; 0x23e4 <Data+0x778>
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
	else if (__tmp > 65535)
    23de:	9f af       	std	Y+63, r25	; 0x3f
    23e0:	8e af       	std	Y+62, r24	; 0x3e
    23e2:	47 c0       	rjmp	.+142    	; 0x2472 <Data+0x806>
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	3f ef       	ldi	r19, 0xFF	; 255
    23e8:	4f e7       	ldi	r20, 0x7F	; 127
    23ea:	57 e4       	ldi	r21, 0x47	; 71
    23ec:	6a ad       	ldd	r22, Y+58	; 0x3a
    23ee:	7b ad       	ldd	r23, Y+59	; 0x3b
    23f0:	8c ad       	ldd	r24, Y+60	; 0x3c
    23f2:	9d ad       	ldd	r25, Y+61	; 0x3d
    23f4:	30 d3       	rcall	.+1632   	; 0x2a56 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f6:	18 16       	cp	r1, r24
    23f8:	9c f5       	brge	.+102    	; 0x2460 <Data+0x7f4>
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e2       	ldi	r20, 0x20	; 32
    2400:	51 e4       	ldi	r21, 0x41	; 65
    2402:	6e a9       	ldd	r22, Y+54	; 0x36
    2404:	7f a9       	ldd	r23, Y+55	; 0x37
    2406:	88 ad       	ldd	r24, Y+56	; 0x38
    2408:	99 ad       	ldd	r25, Y+57	; 0x39
    240a:	29 d3       	rcall	.+1618   	; 0x2a5e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	7f d2       	rcall	.+1278   	; 0x2914 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9f af       	std	Y+63, r25	; 0x3f
    241c:	8e af       	std	Y+62, r24	; 0x3e
    241e:	1b c0       	rjmp	.+54     	; 0x2456 <Data+0x7ea>
    2420:	ce 01       	movw	r24, r28
    2422:	80 5c       	subi	r24, 0xC0	; 192
    2424:	9f 4f       	sbci	r25, 0xFF	; 255
    2426:	20 e9       	ldi	r18, 0x90	; 144
    2428:	31 e0       	ldi	r19, 0x01	; 1
    242a:	fc 01       	movw	r30, r24
    242c:	31 83       	std	Z+1, r19	; 0x01
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    242e:	20 83       	st	Z, r18
    2430:	ce 01       	movw	r24, r28
    2432:	80 5c       	subi	r24, 0xC0	; 192
    2434:	9f 4f       	sbci	r25, 0xFF	; 255
    2436:	fc 01       	movw	r30, r24
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <Data+0x7d0>
    2440:	9e 01       	movw	r18, r28
    2442:	20 5c       	subi	r18, 0xC0	; 192
    2444:	3f 4f       	sbci	r19, 0xFF	; 255
    2446:	f9 01       	movw	r30, r18
    2448:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244a:	80 83       	st	Z, r24
    244c:	8e ad       	ldd	r24, Y+62	; 0x3e
    244e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	9f af       	std	Y+63, r25	; 0x3f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2454:	8e af       	std	Y+62, r24	; 0x3e
    2456:	8e ad       	ldd	r24, Y+62	; 0x3e
    2458:	9f ad       	ldd	r25, Y+63	; 0x3f
    245a:	89 2b       	or	r24, r25
    245c:	09 f7       	brne	.-62     	; 0x2420 <Data+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245e:	5b c0       	rjmp	.+182    	; 0x2516 <Data+0x8aa>
    2460:	6a ad       	ldd	r22, Y+58	; 0x3a
    2462:	7b ad       	ldd	r23, Y+59	; 0x3b
    2464:	8c ad       	ldd	r24, Y+60	; 0x3c
    2466:	9d ad       	ldd	r25, Y+61	; 0x3d
    2468:	55 d2       	rcall	.+1194   	; 0x2914 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	9f af       	std	Y+63, r25	; 0x3f
    2470:	8e af       	std	Y+62, r24	; 0x3e
    2472:	ce 01       	movw	r24, r28
    2474:	8e 5b       	subi	r24, 0xBE	; 190
    2476:	9f 4f       	sbci	r25, 0xFF	; 255
    2478:	2e ad       	ldd	r18, Y+62	; 0x3e
    247a:	3f ad       	ldd	r19, Y+63	; 0x3f
    247c:	fc 01       	movw	r30, r24
    247e:	31 83       	std	Z+1, r19	; 0x01
    2480:	20 83       	st	Z, r18
    2482:	ce 01       	movw	r24, r28
    2484:	8e 5b       	subi	r24, 0xBE	; 190
    2486:	9f 4f       	sbci	r25, 0xFF	; 255
    2488:	fc 01       	movw	r30, r24
    248a:	80 81       	ld	r24, Z
    248c:	91 81       	ldd	r25, Z+1	; 0x01
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <Data+0x822>
    2492:	9e 01       	movw	r18, r28
    2494:	2e 5b       	subi	r18, 0xBE	; 190
    2496:	3f 4f       	sbci	r19, 0xFF	; 255
    2498:	f9 01       	movw	r30, r18
    249a:	91 83       	std	Z+1, r25	; 0x01
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    249c:	80 83       	st	Z, r24
    249e:	3b c0       	rjmp	.+118    	; 0x2516 <Data+0x8aa>
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	4f e7       	ldi	r20, 0x7F	; 127
    24a6:	53 e4       	ldi	r21, 0x43	; 67
    24a8:	6d a5       	ldd	r22, Y+45	; 0x2d
    24aa:	7e a5       	ldd	r23, Y+46	; 0x2e
    24ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ae:	98 a9       	ldd	r25, Y+48	; 0x30
    24b0:	d2 d2       	rcall	.+1444   	; 0x2a56 <__gesf2>
    24b2:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    24b4:	44 f5       	brge	.+80     	; 0x2506 <Data+0x89a>
    24b6:	8e 01       	movw	r16, r28
    24b8:	0c 5b       	subi	r16, 0xBC	; 188
    24ba:	1f 4f       	sbci	r17, 0xFF	; 255
    24bc:	69 a9       	ldd	r22, Y+49	; 0x31
    24be:	7a a9       	ldd	r23, Y+50	; 0x32
    24c0:	8b a9       	ldd	r24, Y+51	; 0x33
    24c2:	9c a9       	ldd	r25, Y+52	; 0x34
    24c4:	27 d2       	rcall	.+1102   	; 0x2914 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	f8 01       	movw	r30, r16
    24cc:	91 83       	std	Z+1, r25	; 0x01
    24ce:	80 83       	st	Z, r24
    24d0:	ce 01       	movw	r24, r28
    24d2:	8a 5b       	subi	r24, 0xBA	; 186
    24d4:	9f 4f       	sbci	r25, 0xFF	; 255
    24d6:	9e 01       	movw	r18, r28
    24d8:	2c 5b       	subi	r18, 0xBC	; 188
    24da:	3f 4f       	sbci	r19, 0xFF	; 255
    24dc:	f9 01       	movw	r30, r18
    24de:	20 81       	ld	r18, Z
    24e0:	31 81       	ldd	r19, Z+1	; 0x01
    24e2:	fc 01       	movw	r30, r24
    24e4:	31 83       	std	Z+1, r19	; 0x01
    24e6:	20 83       	st	Z, r18
    24e8:	ce 01       	movw	r24, r28
    24ea:	8a 5b       	subi	r24, 0xBA	; 186
    24ec:	9f 4f       	sbci	r25, 0xFF	; 255
    24ee:	fc 01       	movw	r30, r24
    24f0:	80 81       	ld	r24, Z
    24f2:	91 81       	ldd	r25, Z+1	; 0x01
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <Data+0x888>
    24f8:	9e 01       	movw	r18, r28
    24fa:	2a 5b       	subi	r18, 0xBA	; 186
    24fc:	3f 4f       	sbci	r19, 0xFF	; 255
    24fe:	f9 01       	movw	r30, r18
    2500:	91 83       	std	Z+1, r25	; 0x01
    2502:	80 83       	st	Z, r24
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2504:	1b c0       	rjmp	.+54     	; 0x253c <Data+0x8d0>
    2506:	6d a5       	ldd	r22, Y+45	; 0x2d
    2508:	7e a5       	ldd	r23, Y+46	; 0x2e
    250a:	8f a5       	ldd	r24, Y+47	; 0x2f
    250c:	98 a9       	ldd	r25, Y+48	; 0x30
    250e:	02 d2       	rcall	.+1028   	; 0x2914 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	8d ab       	std	Y+53, r24	; 0x35
    2516:	ce 01       	movw	r24, r28
    2518:	88 5b       	subi	r24, 0xB8	; 184
    251a:	9f 4f       	sbci	r25, 0xFF	; 255
    251c:	2d a9       	ldd	r18, Y+53	; 0x35
    251e:	fc 01       	movw	r30, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2520:	20 83       	st	Z, r18
    2522:	ce 01       	movw	r24, r28
    2524:	88 5b       	subi	r24, 0xB8	; 184
    2526:	9f 4f       	sbci	r25, 0xFF	; 255
    2528:	fc 01       	movw	r30, r24
    252a:	80 81       	ld	r24, Z
    252c:	28 2f       	mov	r18, r24
    252e:	2a 95       	dec	r18
    2530:	f1 f7       	brne	.-4      	; 0x252e <Data+0x8c2>
    2532:	ce 01       	movw	r24, r28
    2534:	88 5b       	subi	r24, 0xB8	; 184
    2536:	9f 4f       	sbci	r25, 0xFF	; 255
	_delay_us(1);
	ENH; // E = 1
    2538:	fc 01       	movw	r30, r24
    253a:	20 83       	st	Z, r18
    253c:	85 e3       	ldi	r24, 0x35	; 53
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	25 e3       	ldi	r18, 0x35	; 53
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	f9 01       	movw	r30, r18
    2546:	20 81       	ld	r18, Z
    2548:	24 60       	ori	r18, 0x04	; 4
    254a:	fc 01       	movw	r30, r24
    254c:	20 83       	st	Z, r18
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	a0 e8       	ldi	r26, 0x80	; 128
    2554:	bf e3       	ldi	r27, 0x3F	; 63
    2556:	8d 87       	std	Y+13, r24	; 0x0d
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    2558:	9e 87       	std	Y+14, r25	; 0x0e
    255a:	af 87       	std	Y+15, r26	; 0x0f
    255c:	b8 8b       	std	Y+16, r27	; 0x10
    255e:	2b ea       	ldi	r18, 0xAB	; 171
    2560:	3a ea       	ldi	r19, 0xAA	; 170
    2562:	4a ea       	ldi	r20, 0xAA	; 170
    2564:	50 e4       	ldi	r21, 0x40	; 64
    2566:	6d 85       	ldd	r22, Y+13	; 0x0d
    2568:	7e 85       	ldd	r23, Y+14	; 0x0e
    256a:	8f 85       	ldd	r24, Y+15	; 0x0f
    256c:	98 89       	ldd	r25, Y+16	; 0x10
    256e:	77 d2       	rcall	.+1262   	; 0x2a5e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	89 8b       	std	Y+17, r24	; 0x11
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2576:	9a 8b       	std	Y+18, r25	; 0x12
    2578:	ab 8b       	std	Y+19, r26	; 0x13
    257a:	bc 8b       	std	Y+20, r27	; 0x14
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e8       	ldi	r20, 0x80	; 128
    2582:	50 e4       	ldi	r21, 0x40	; 64
    2584:	6d 85       	ldd	r22, Y+13	; 0x0d
    2586:	7e 85       	ldd	r23, Y+14	; 0x0e
    2588:	8f 85       	ldd	r24, Y+15	; 0x0f
    258a:	98 89       	ldd	r25, Y+16	; 0x10
    258c:	68 d2       	rcall	.+1232   	; 0x2a5e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	8d 8b       	std	Y+21, r24	; 0x15
	if (__tmp < 1.0)
    2594:	9e 8b       	std	Y+22, r25	; 0x16
    2596:	af 8b       	std	Y+23, r26	; 0x17
    2598:	b8 8f       	std	Y+24, r27	; 0x18
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e8       	ldi	r20, 0x80	; 128
    25a0:	5f e3       	ldi	r21, 0x3F	; 63
    25a2:	69 89       	ldd	r22, Y+17	; 0x11
    25a4:	7a 89       	ldd	r23, Y+18	; 0x12
    25a6:	8b 89       	ldd	r24, Y+19	; 0x13
    25a8:	9c 89       	ldd	r25, Y+20	; 0x14
		__ticks = 1;
    25aa:	48 d1       	rcall	.+656    	; 0x283c <__cmpsf2>
    25ac:	88 23       	and	r24, r24
    25ae:	1c f4       	brge	.+6      	; 0x25b6 <Data+0x94a>
	else if (__tmp2 > 65535)
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	89 8f       	std	Y+25, r24	; 0x19
    25b4:	a7 c0       	rjmp	.+334    	; 0x2704 <Data+0xa98>
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	3f ef       	ldi	r19, 0xFF	; 255
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	57 e4       	ldi	r21, 0x47	; 71
    25be:	6d 89       	ldd	r22, Y+21	; 0x15
    25c0:	7e 89       	ldd	r23, Y+22	; 0x16
    25c2:	8f 89       	ldd	r24, Y+23	; 0x17
    25c4:	98 8d       	ldd	r25, Y+24	; 0x18
    25c6:	47 d2       	rcall	.+1166   	; 0x2a56 <__gesf2>
	{
		_delay_ms(__us / 1000.0);
    25c8:	18 16       	cp	r1, r24
    25ca:	0c f0       	brlt	.+2      	; 0x25ce <Data+0x962>
    25cc:	74 c0       	rjmp	.+232    	; 0x26b6 <Data+0xa4a>
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4a e7       	ldi	r20, 0x7A	; 122
    25d4:	54 e4       	ldi	r21, 0x44	; 68
    25d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    25d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    25da:	8f 85       	ldd	r24, Y+15	; 0x0f
    25dc:	98 89       	ldd	r25, Y+16	; 0x10
    25de:	32 d1       	rcall	.+612    	; 0x2844 <__divsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	8a 8f       	std	Y+26, r24	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    25e6:	9b 8f       	std	Y+27, r25	; 0x1b
    25e8:	ac 8f       	std	Y+28, r26	; 0x1c
    25ea:	bd 8f       	std	Y+29, r27	; 0x1d
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	4a e7       	ldi	r20, 0x7A	; 122
    25f2:	55 e4       	ldi	r21, 0x45	; 69
    25f4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    25f6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    25f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25fa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    25fc:	30 d2       	rcall	.+1120   	; 0x2a5e <__mulsf3>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
	if (__tmp < 1.0)
    2602:	8e 8f       	std	Y+30, r24	; 0x1e
    2604:	9f 8f       	std	Y+31, r25	; 0x1f
    2606:	a8 a3       	std	Y+32, r26	; 0x20
    2608:	b9 a3       	std	Y+33, r27	; 0x21
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e8       	ldi	r20, 0x80	; 128
    2610:	5f e3       	ldi	r21, 0x3F	; 63
    2612:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2614:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2616:	88 a1       	ldd	r24, Y+32	; 0x20
    2618:	99 a1       	ldd	r25, Y+33	; 0x21
		__ticks = 1;
    261a:	10 d1       	rcall	.+544    	; 0x283c <__cmpsf2>
    261c:	88 23       	and	r24, r24
    261e:	2c f4       	brge	.+10     	; 0x262a <Data+0x9be>
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
	else if (__tmp > 65535)
    2624:	9b a3       	std	Y+35, r25	; 0x23
    2626:	8a a3       	std	Y+34, r24	; 0x22
    2628:	3b c0       	rjmp	.+118    	; 0x26a0 <Data+0xa34>
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2634:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2636:	88 a1       	ldd	r24, Y+32	; 0x20
    2638:	99 a1       	ldd	r25, Y+33	; 0x21
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	0d d2       	rcall	.+1050   	; 0x2a56 <__gesf2>
    263c:	18 16       	cp	r1, r24
    263e:	3c f5       	brge	.+78     	; 0x268e <Data+0xa22>
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e2       	ldi	r20, 0x20	; 32
    2646:	51 e4       	ldi	r21, 0x41	; 65
    2648:	6a 8d       	ldd	r22, Y+26	; 0x1a
    264a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    264c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    264e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2650:	06 d2       	rcall	.+1036   	; 0x2a5e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	bc 01       	movw	r22, r24
    2658:	cd 01       	movw	r24, r26
    265a:	5c d1       	rcall	.+696    	; 0x2914 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9b a3       	std	Y+35, r25	; 0x23
    2662:	8a a3       	std	Y+34, r24	; 0x22
    2664:	0f c0       	rjmp	.+30     	; 0x2684 <Data+0xa18>
    2666:	80 e9       	ldi	r24, 0x90	; 144
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2668:	91 e0       	ldi	r25, 0x01	; 1
    266a:	9d a3       	std	Y+37, r25	; 0x25
    266c:	8c a3       	std	Y+36, r24	; 0x24
    266e:	8c a1       	ldd	r24, Y+36	; 0x24
    2670:	9d a1       	ldd	r25, Y+37	; 0x25
    2672:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2674:	f1 f7       	brne	.-4      	; 0x2672 <Data+0xa06>
    2676:	9d a3       	std	Y+37, r25	; 0x25
    2678:	8c a3       	std	Y+36, r24	; 0x24
    267a:	8a a1       	ldd	r24, Y+34	; 0x22
    267c:	9b a1       	ldd	r25, Y+35	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	9b a3       	std	Y+35, r25	; 0x23
    2682:	8a a3       	std	Y+34, r24	; 0x22
    2684:	8a a1       	ldd	r24, Y+34	; 0x22
    2686:	9b a1       	ldd	r25, Y+35	; 0x23
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2688:	89 2b       	or	r24, r25
    268a:	69 f7       	brne	.-38     	; 0x2666 <Data+0x9fa>
    268c:	3b c0       	rjmp	.+118    	; 0x2704 <Data+0xa98>
    268e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2690:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2692:	88 a1       	ldd	r24, Y+32	; 0x20
    2694:	99 a1       	ldd	r25, Y+33	; 0x21
    2696:	3e d1       	rcall	.+636    	; 0x2914 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9b a3       	std	Y+35, r25	; 0x23
    269e:	8a a3       	std	Y+34, r24	; 0x22
    26a0:	8a a1       	ldd	r24, Y+34	; 0x22
    26a2:	9b a1       	ldd	r25, Y+35	; 0x23
    26a4:	9f a3       	std	Y+39, r25	; 0x27
    26a6:	8e a3       	std	Y+38, r24	; 0x26
    26a8:	8e a1       	ldd	r24, Y+38	; 0x26
    26aa:	9f a1       	ldd	r25, Y+39	; 0x27
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <Data+0xa40>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    26b0:	9f a3       	std	Y+39, r25	; 0x27
    26b2:	8e a3       	std	Y+38, r24	; 0x26
    26b4:	27 c0       	rjmp	.+78     	; 0x2704 <Data+0xa98>
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	4f e7       	ldi	r20, 0x7F	; 127
    26bc:	53 e4       	ldi	r21, 0x43	; 67
    26be:	69 89       	ldd	r22, Y+17	; 0x11
    26c0:	7a 89       	ldd	r23, Y+18	; 0x12
    26c2:	8b 89       	ldd	r24, Y+19	; 0x13
    26c4:	9c 89       	ldd	r25, Y+20	; 0x14
    26c6:	c7 d1       	rcall	.+910    	; 0x2a56 <__gesf2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    26c8:	18 16       	cp	r1, r24
    26ca:	a4 f4       	brge	.+40     	; 0x26f4 <Data+0xa88>
    26cc:	6d 89       	ldd	r22, Y+21	; 0x15
    26ce:	7e 89       	ldd	r23, Y+22	; 0x16
    26d0:	8f 89       	ldd	r24, Y+23	; 0x17
    26d2:	98 8d       	ldd	r25, Y+24	; 0x18
    26d4:	1f d1       	rcall	.+574    	; 0x2914 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	99 a7       	std	Y+41, r25	; 0x29
    26dc:	88 a7       	std	Y+40, r24	; 0x28
    26de:	88 a5       	ldd	r24, Y+40	; 0x28
    26e0:	99 a5       	ldd	r25, Y+41	; 0x29
    26e2:	9b a7       	std	Y+43, r25	; 0x2b
    26e4:	8a a7       	std	Y+42, r24	; 0x2a
    26e6:	8a a5       	ldd	r24, Y+42	; 0x2a
    26e8:	9b a5       	ldd	r25, Y+43	; 0x2b
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <Data+0xa7e>
    26ee:	9b a7       	std	Y+43, r25	; 0x2b
    26f0:	8a a7       	std	Y+42, r24	; 0x2a
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26f2:	0e c0       	rjmp	.+28     	; 0x2710 <Data+0xaa4>
    26f4:	69 89       	ldd	r22, Y+17	; 0x11
    26f6:	7a 89       	ldd	r23, Y+18	; 0x12
    26f8:	8b 89       	ldd	r24, Y+19	; 0x13
    26fa:	9c 89       	ldd	r25, Y+20	; 0x14
    26fc:	0b d1       	rcall	.+534    	; 0x2914 <__fixunssfsi>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	89 8f       	std	Y+25, r24	; 0x19
    2704:	89 8d       	ldd	r24, Y+25	; 0x19
    2706:	8c a7       	std	Y+44, r24	; 0x2c
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2708:	8c a5       	ldd	r24, Y+44	; 0x2c
    270a:	8a 95       	dec	r24
    270c:	f1 f7       	brne	.-4      	; 0x270a <Data+0xa9e>
    270e:	8c a7       	std	Y+44, r24	; 0x2c
	_delay_us(1);
	ENL; // E = 0
    2710:	85 e3       	ldi	r24, 0x35	; 53
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	25 e3       	ldi	r18, 0x35	; 53
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	f9 01       	movw	r30, r18
    271a:	20 81       	ld	r18, Z
    271c:	2b 7f       	andi	r18, 0xFB	; 251
    271e:	fc 01       	movw	r30, r24
    2720:	20 83       	st	Z, r18
}
    2722:	00 00       	nop
    2724:	cf 57       	subi	r28, 0x7F	; 127
    2726:	df 4f       	sbci	r29, 0xFF	; 255
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	1f 91       	pop	r17
    2738:	0f 91       	pop	r16
    273a:	08 95       	ret

0000273c <Busy>:
// Busy Flag Check -> 일반적인 BF를 체크하는 것이 아니라
// 일정한 시간 지연을 이용한다.
void Busy(void)
{
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	2e 97       	sbiw	r28, 0x0e	; 14
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a0 e0       	ldi	r26, 0x00	; 0
    2756:	b0 e4       	ldi	r27, 0x40	; 64
    2758:	89 83       	std	Y+1, r24	; 0x01
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	ab 83       	std	Y+3, r26	; 0x03
    275e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a e7       	ldi	r20, 0x7A	; 122
    2766:	55 e4       	ldi	r21, 0x45	; 69
    2768:	69 81       	ldd	r22, Y+1	; 0x01
    276a:	7a 81       	ldd	r23, Y+2	; 0x02
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	9c 81       	ldd	r25, Y+4	; 0x04
    2770:	76 d1       	rcall	.+748    	; 0x2a5e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	8d 83       	std	Y+5, r24	; 0x05
    2778:	9e 83       	std	Y+6, r25	; 0x06
    277a:	af 83       	std	Y+7, r26	; 0x07
    277c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	6d 81       	ldd	r22, Y+5	; 0x05
    2788:	7e 81       	ldd	r23, Y+6	; 0x06
    278a:	8f 81       	ldd	r24, Y+7	; 0x07
    278c:	98 85       	ldd	r25, Y+8	; 0x08
    278e:	56 d0       	rcall	.+172    	; 0x283c <__cmpsf2>
    2790:	88 23       	and	r24, r24
    2792:	2c f4       	brge	.+10     	; 0x279e <Busy+0x62>
		__ticks = 1;
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	9a 87       	std	Y+10, r25	; 0x0a
    279a:	89 87       	std	Y+9, r24	; 0x09
    279c:	3b c0       	rjmp	.+118    	; 0x2814 <Busy+0xd8>
	else if (__tmp > 65535)
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	3f ef       	ldi	r19, 0xFF	; 255
    27a2:	4f e7       	ldi	r20, 0x7F	; 127
    27a4:	57 e4       	ldi	r21, 0x47	; 71
    27a6:	6d 81       	ldd	r22, Y+5	; 0x05
    27a8:	7e 81       	ldd	r23, Y+6	; 0x06
    27aa:	8f 81       	ldd	r24, Y+7	; 0x07
    27ac:	98 85       	ldd	r25, Y+8	; 0x08
    27ae:	53 d1       	rcall	.+678    	; 0x2a56 <__gesf2>
    27b0:	18 16       	cp	r1, r24
    27b2:	3c f5       	brge	.+78     	; 0x2802 <Busy+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e2       	ldi	r20, 0x20	; 32
    27ba:	51 e4       	ldi	r21, 0x41	; 65
    27bc:	69 81       	ldd	r22, Y+1	; 0x01
    27be:	7a 81       	ldd	r23, Y+2	; 0x02
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	9c 81       	ldd	r25, Y+4	; 0x04
    27c4:	4c d1       	rcall	.+664    	; 0x2a5e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	a2 d0       	rcall	.+324    	; 0x2914 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9a 87       	std	Y+10, r25	; 0x0a
    27d6:	89 87       	std	Y+9, r24	; 0x09
    27d8:	0f c0       	rjmp	.+30     	; 0x27f8 <Busy+0xbc>
    27da:	80 e9       	ldi	r24, 0x90	; 144
    27dc:	91 e0       	ldi	r25, 0x01	; 1
    27de:	9c 87       	std	Y+12, r25	; 0x0c
    27e0:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    27e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <Busy+0xaa>
    27ea:	9c 87       	std	Y+12, r25	; 0x0c
    27ec:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ee:	89 85       	ldd	r24, Y+9	; 0x09
    27f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	9a 87       	std	Y+10, r25	; 0x0a
    27f6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f8:	89 85       	ldd	r24, Y+9	; 0x09
    27fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fc:	89 2b       	or	r24, r25
    27fe:	69 f7       	brne	.-38     	; 0x27da <Busy+0x9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2800:	13 c0       	rjmp	.+38     	; 0x2828 <Busy+0xec>
    2802:	6d 81       	ldd	r22, Y+5	; 0x05
    2804:	7e 81       	ldd	r23, Y+6	; 0x06
    2806:	8f 81       	ldd	r24, Y+7	; 0x07
    2808:	98 85       	ldd	r25, Y+8	; 0x08
    280a:	84 d0       	rcall	.+264    	; 0x2914 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	9a 87       	std	Y+10, r25	; 0x0a
    2812:	89 87       	std	Y+9, r24	; 0x09
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	9e 87       	std	Y+14, r25	; 0x0e
    281a:	8d 87       	std	Y+13, r24	; 0x0d
    281c:	8d 85       	ldd	r24, Y+13	; 0x0d
    281e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	f1 f7       	brne	.-4      	; 0x2820 <Busy+0xe4>
    2824:	9e 87       	std	Y+14, r25	; 0x0e
    2826:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2);
}
    2828:	00 00       	nop
    282a:	2e 96       	adiw	r28, 0x0e	; 14
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	08 95       	ret

0000283c <__cmpsf2>:
    283c:	97 d0       	rcall	.+302    	; 0x296c <__fp_cmp>
    283e:	08 f4       	brcc	.+2      	; 0x2842 <__cmpsf2+0x6>
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	08 95       	ret

00002844 <__divsf3>:
    2844:	0c d0       	rcall	.+24     	; 0x285e <__divsf3x>
    2846:	cd c0       	rjmp	.+410    	; 0x29e2 <__fp_round>
    2848:	c5 d0       	rcall	.+394    	; 0x29d4 <__fp_pscB>
    284a:	40 f0       	brcs	.+16     	; 0x285c <__divsf3+0x18>
    284c:	bc d0       	rcall	.+376    	; 0x29c6 <__fp_pscA>
    284e:	30 f0       	brcs	.+12     	; 0x285c <__divsf3+0x18>
    2850:	21 f4       	brne	.+8      	; 0x285a <__divsf3+0x16>
    2852:	5f 3f       	cpi	r21, 0xFF	; 255
    2854:	19 f0       	breq	.+6      	; 0x285c <__divsf3+0x18>
    2856:	ae c0       	rjmp	.+348    	; 0x29b4 <__fp_inf>
    2858:	51 11       	cpse	r21, r1
    285a:	f7 c0       	rjmp	.+494    	; 0x2a4a <__fp_szero>
    285c:	b1 c0       	rjmp	.+354    	; 0x29c0 <__fp_nan>

0000285e <__divsf3x>:
    285e:	d2 d0       	rcall	.+420    	; 0x2a04 <__fp_split3>
    2860:	98 f3       	brcs	.-26     	; 0x2848 <__divsf3+0x4>

00002862 <__divsf3_pse>:
    2862:	99 23       	and	r25, r25
    2864:	c9 f3       	breq	.-14     	; 0x2858 <__divsf3+0x14>
    2866:	55 23       	and	r21, r21
    2868:	b1 f3       	breq	.-20     	; 0x2856 <__divsf3+0x12>
    286a:	95 1b       	sub	r25, r21
    286c:	55 0b       	sbc	r21, r21
    286e:	bb 27       	eor	r27, r27
    2870:	aa 27       	eor	r26, r26
    2872:	62 17       	cp	r22, r18
    2874:	73 07       	cpc	r23, r19
    2876:	84 07       	cpc	r24, r20
    2878:	38 f0       	brcs	.+14     	; 0x2888 <__divsf3_pse+0x26>
    287a:	9f 5f       	subi	r25, 0xFF	; 255
    287c:	5f 4f       	sbci	r21, 0xFF	; 255
    287e:	22 0f       	add	r18, r18
    2880:	33 1f       	adc	r19, r19
    2882:	44 1f       	adc	r20, r20
    2884:	aa 1f       	adc	r26, r26
    2886:	a9 f3       	breq	.-22     	; 0x2872 <__divsf3_pse+0x10>
    2888:	33 d0       	rcall	.+102    	; 0x28f0 <__divsf3_pse+0x8e>
    288a:	0e 2e       	mov	r0, r30
    288c:	3a f0       	brmi	.+14     	; 0x289c <__divsf3_pse+0x3a>
    288e:	e0 e8       	ldi	r30, 0x80	; 128
    2890:	30 d0       	rcall	.+96     	; 0x28f2 <__divsf3_pse+0x90>
    2892:	91 50       	subi	r25, 0x01	; 1
    2894:	50 40       	sbci	r21, 0x00	; 0
    2896:	e6 95       	lsr	r30
    2898:	00 1c       	adc	r0, r0
    289a:	ca f7       	brpl	.-14     	; 0x288e <__divsf3_pse+0x2c>
    289c:	29 d0       	rcall	.+82     	; 0x28f0 <__divsf3_pse+0x8e>
    289e:	fe 2f       	mov	r31, r30
    28a0:	27 d0       	rcall	.+78     	; 0x28f0 <__divsf3_pse+0x8e>
    28a2:	66 0f       	add	r22, r22
    28a4:	77 1f       	adc	r23, r23
    28a6:	88 1f       	adc	r24, r24
    28a8:	bb 1f       	adc	r27, r27
    28aa:	26 17       	cp	r18, r22
    28ac:	37 07       	cpc	r19, r23
    28ae:	48 07       	cpc	r20, r24
    28b0:	ab 07       	cpc	r26, r27
    28b2:	b0 e8       	ldi	r27, 0x80	; 128
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <__divsf3_pse+0x56>
    28b6:	bb 0b       	sbc	r27, r27
    28b8:	80 2d       	mov	r24, r0
    28ba:	bf 01       	movw	r22, r30
    28bc:	ff 27       	eor	r31, r31
    28be:	93 58       	subi	r25, 0x83	; 131
    28c0:	5f 4f       	sbci	r21, 0xFF	; 255
    28c2:	2a f0       	brmi	.+10     	; 0x28ce <__divsf3_pse+0x6c>
    28c4:	9e 3f       	cpi	r25, 0xFE	; 254
    28c6:	51 05       	cpc	r21, r1
    28c8:	68 f0       	brcs	.+26     	; 0x28e4 <__divsf3_pse+0x82>
    28ca:	74 c0       	rjmp	.+232    	; 0x29b4 <__fp_inf>
    28cc:	be c0       	rjmp	.+380    	; 0x2a4a <__fp_szero>
    28ce:	5f 3f       	cpi	r21, 0xFF	; 255
    28d0:	ec f3       	brlt	.-6      	; 0x28cc <__divsf3_pse+0x6a>
    28d2:	98 3e       	cpi	r25, 0xE8	; 232
    28d4:	dc f3       	brlt	.-10     	; 0x28cc <__divsf3_pse+0x6a>
    28d6:	86 95       	lsr	r24
    28d8:	77 95       	ror	r23
    28da:	67 95       	ror	r22
    28dc:	b7 95       	ror	r27
    28de:	f7 95       	ror	r31
    28e0:	9f 5f       	subi	r25, 0xFF	; 255
    28e2:	c9 f7       	brne	.-14     	; 0x28d6 <__divsf3_pse+0x74>
    28e4:	88 0f       	add	r24, r24
    28e6:	91 1d       	adc	r25, r1
    28e8:	96 95       	lsr	r25
    28ea:	87 95       	ror	r24
    28ec:	97 f9       	bld	r25, 7
    28ee:	08 95       	ret
    28f0:	e1 e0       	ldi	r30, 0x01	; 1
    28f2:	66 0f       	add	r22, r22
    28f4:	77 1f       	adc	r23, r23
    28f6:	88 1f       	adc	r24, r24
    28f8:	bb 1f       	adc	r27, r27
    28fa:	62 17       	cp	r22, r18
    28fc:	73 07       	cpc	r23, r19
    28fe:	84 07       	cpc	r24, r20
    2900:	ba 07       	cpc	r27, r26
    2902:	20 f0       	brcs	.+8      	; 0x290c <__divsf3_pse+0xaa>
    2904:	62 1b       	sub	r22, r18
    2906:	73 0b       	sbc	r23, r19
    2908:	84 0b       	sbc	r24, r20
    290a:	ba 0b       	sbc	r27, r26
    290c:	ee 1f       	adc	r30, r30
    290e:	88 f7       	brcc	.-30     	; 0x28f2 <__divsf3_pse+0x90>
    2910:	e0 95       	com	r30
    2912:	08 95       	ret

00002914 <__fixunssfsi>:
    2914:	7f d0       	rcall	.+254    	; 0x2a14 <__fp_splitA>
    2916:	88 f0       	brcs	.+34     	; 0x293a <__fixunssfsi+0x26>
    2918:	9f 57       	subi	r25, 0x7F	; 127
    291a:	90 f0       	brcs	.+36     	; 0x2940 <__fixunssfsi+0x2c>
    291c:	b9 2f       	mov	r27, r25
    291e:	99 27       	eor	r25, r25
    2920:	b7 51       	subi	r27, 0x17	; 23
    2922:	a0 f0       	brcs	.+40     	; 0x294c <__fixunssfsi+0x38>
    2924:	d1 f0       	breq	.+52     	; 0x295a <__fixunssfsi+0x46>
    2926:	66 0f       	add	r22, r22
    2928:	77 1f       	adc	r23, r23
    292a:	88 1f       	adc	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	1a f0       	brmi	.+6      	; 0x2936 <__fixunssfsi+0x22>
    2930:	ba 95       	dec	r27
    2932:	c9 f7       	brne	.-14     	; 0x2926 <__fixunssfsi+0x12>
    2934:	12 c0       	rjmp	.+36     	; 0x295a <__fixunssfsi+0x46>
    2936:	b1 30       	cpi	r27, 0x01	; 1
    2938:	81 f0       	breq	.+32     	; 0x295a <__fixunssfsi+0x46>
    293a:	86 d0       	rcall	.+268    	; 0x2a48 <__fp_zero>
    293c:	b1 e0       	ldi	r27, 0x01	; 1
    293e:	08 95       	ret
    2940:	83 c0       	rjmp	.+262    	; 0x2a48 <__fp_zero>
    2942:	67 2f       	mov	r22, r23
    2944:	78 2f       	mov	r23, r24
    2946:	88 27       	eor	r24, r24
    2948:	b8 5f       	subi	r27, 0xF8	; 248
    294a:	39 f0       	breq	.+14     	; 0x295a <__fixunssfsi+0x46>
    294c:	b9 3f       	cpi	r27, 0xF9	; 249
    294e:	cc f3       	brlt	.-14     	; 0x2942 <__fixunssfsi+0x2e>
    2950:	86 95       	lsr	r24
    2952:	77 95       	ror	r23
    2954:	67 95       	ror	r22
    2956:	b3 95       	inc	r27
    2958:	d9 f7       	brne	.-10     	; 0x2950 <__fixunssfsi+0x3c>
    295a:	3e f4       	brtc	.+14     	; 0x296a <__fixunssfsi+0x56>
    295c:	90 95       	com	r25
    295e:	80 95       	com	r24
    2960:	70 95       	com	r23
    2962:	61 95       	neg	r22
    2964:	7f 4f       	sbci	r23, 0xFF	; 255
    2966:	8f 4f       	sbci	r24, 0xFF	; 255
    2968:	9f 4f       	sbci	r25, 0xFF	; 255
    296a:	08 95       	ret

0000296c <__fp_cmp>:
    296c:	99 0f       	add	r25, r25
    296e:	00 08       	sbc	r0, r0
    2970:	55 0f       	add	r21, r21
    2972:	aa 0b       	sbc	r26, r26
    2974:	e0 e8       	ldi	r30, 0x80	; 128
    2976:	fe ef       	ldi	r31, 0xFE	; 254
    2978:	16 16       	cp	r1, r22
    297a:	17 06       	cpc	r1, r23
    297c:	e8 07       	cpc	r30, r24
    297e:	f9 07       	cpc	r31, r25
    2980:	c0 f0       	brcs	.+48     	; 0x29b2 <__fp_cmp+0x46>
    2982:	12 16       	cp	r1, r18
    2984:	13 06       	cpc	r1, r19
    2986:	e4 07       	cpc	r30, r20
    2988:	f5 07       	cpc	r31, r21
    298a:	98 f0       	brcs	.+38     	; 0x29b2 <__fp_cmp+0x46>
    298c:	62 1b       	sub	r22, r18
    298e:	73 0b       	sbc	r23, r19
    2990:	84 0b       	sbc	r24, r20
    2992:	95 0b       	sbc	r25, r21
    2994:	39 f4       	brne	.+14     	; 0x29a4 <__fp_cmp+0x38>
    2996:	0a 26       	eor	r0, r26
    2998:	61 f0       	breq	.+24     	; 0x29b2 <__fp_cmp+0x46>
    299a:	23 2b       	or	r18, r19
    299c:	24 2b       	or	r18, r20
    299e:	25 2b       	or	r18, r21
    29a0:	21 f4       	brne	.+8      	; 0x29aa <__fp_cmp+0x3e>
    29a2:	08 95       	ret
    29a4:	0a 26       	eor	r0, r26
    29a6:	09 f4       	brne	.+2      	; 0x29aa <__fp_cmp+0x3e>
    29a8:	a1 40       	sbci	r26, 0x01	; 1
    29aa:	a6 95       	lsr	r26
    29ac:	8f ef       	ldi	r24, 0xFF	; 255
    29ae:	81 1d       	adc	r24, r1
    29b0:	81 1d       	adc	r24, r1
    29b2:	08 95       	ret

000029b4 <__fp_inf>:
    29b4:	97 f9       	bld	r25, 7
    29b6:	9f 67       	ori	r25, 0x7F	; 127
    29b8:	80 e8       	ldi	r24, 0x80	; 128
    29ba:	70 e0       	ldi	r23, 0x00	; 0
    29bc:	60 e0       	ldi	r22, 0x00	; 0
    29be:	08 95       	ret

000029c0 <__fp_nan>:
    29c0:	9f ef       	ldi	r25, 0xFF	; 255
    29c2:	80 ec       	ldi	r24, 0xC0	; 192
    29c4:	08 95       	ret

000029c6 <__fp_pscA>:
    29c6:	00 24       	eor	r0, r0
    29c8:	0a 94       	dec	r0
    29ca:	16 16       	cp	r1, r22
    29cc:	17 06       	cpc	r1, r23
    29ce:	18 06       	cpc	r1, r24
    29d0:	09 06       	cpc	r0, r25
    29d2:	08 95       	ret

000029d4 <__fp_pscB>:
    29d4:	00 24       	eor	r0, r0
    29d6:	0a 94       	dec	r0
    29d8:	12 16       	cp	r1, r18
    29da:	13 06       	cpc	r1, r19
    29dc:	14 06       	cpc	r1, r20
    29de:	05 06       	cpc	r0, r21
    29e0:	08 95       	ret

000029e2 <__fp_round>:
    29e2:	09 2e       	mov	r0, r25
    29e4:	03 94       	inc	r0
    29e6:	00 0c       	add	r0, r0
    29e8:	11 f4       	brne	.+4      	; 0x29ee <__fp_round+0xc>
    29ea:	88 23       	and	r24, r24
    29ec:	52 f0       	brmi	.+20     	; 0x2a02 <__fp_round+0x20>
    29ee:	bb 0f       	add	r27, r27
    29f0:	40 f4       	brcc	.+16     	; 0x2a02 <__fp_round+0x20>
    29f2:	bf 2b       	or	r27, r31
    29f4:	11 f4       	brne	.+4      	; 0x29fa <__fp_round+0x18>
    29f6:	60 ff       	sbrs	r22, 0
    29f8:	04 c0       	rjmp	.+8      	; 0x2a02 <__fp_round+0x20>
    29fa:	6f 5f       	subi	r22, 0xFF	; 255
    29fc:	7f 4f       	sbci	r23, 0xFF	; 255
    29fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2a00:	9f 4f       	sbci	r25, 0xFF	; 255
    2a02:	08 95       	ret

00002a04 <__fp_split3>:
    2a04:	57 fd       	sbrc	r21, 7
    2a06:	90 58       	subi	r25, 0x80	; 128
    2a08:	44 0f       	add	r20, r20
    2a0a:	55 1f       	adc	r21, r21
    2a0c:	59 f0       	breq	.+22     	; 0x2a24 <__fp_splitA+0x10>
    2a0e:	5f 3f       	cpi	r21, 0xFF	; 255
    2a10:	71 f0       	breq	.+28     	; 0x2a2e <__fp_splitA+0x1a>
    2a12:	47 95       	ror	r20

00002a14 <__fp_splitA>:
    2a14:	88 0f       	add	r24, r24
    2a16:	97 fb       	bst	r25, 7
    2a18:	99 1f       	adc	r25, r25
    2a1a:	61 f0       	breq	.+24     	; 0x2a34 <__fp_splitA+0x20>
    2a1c:	9f 3f       	cpi	r25, 0xFF	; 255
    2a1e:	79 f0       	breq	.+30     	; 0x2a3e <__fp_splitA+0x2a>
    2a20:	87 95       	ror	r24
    2a22:	08 95       	ret
    2a24:	12 16       	cp	r1, r18
    2a26:	13 06       	cpc	r1, r19
    2a28:	14 06       	cpc	r1, r20
    2a2a:	55 1f       	adc	r21, r21
    2a2c:	f2 cf       	rjmp	.-28     	; 0x2a12 <__fp_split3+0xe>
    2a2e:	46 95       	lsr	r20
    2a30:	f1 df       	rcall	.-30     	; 0x2a14 <__fp_splitA>
    2a32:	08 c0       	rjmp	.+16     	; 0x2a44 <__fp_splitA+0x30>
    2a34:	16 16       	cp	r1, r22
    2a36:	17 06       	cpc	r1, r23
    2a38:	18 06       	cpc	r1, r24
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	f1 cf       	rjmp	.-30     	; 0x2a20 <__fp_splitA+0xc>
    2a3e:	86 95       	lsr	r24
    2a40:	71 05       	cpc	r23, r1
    2a42:	61 05       	cpc	r22, r1
    2a44:	08 94       	sec
    2a46:	08 95       	ret

00002a48 <__fp_zero>:
    2a48:	e8 94       	clt

00002a4a <__fp_szero>:
    2a4a:	bb 27       	eor	r27, r27
    2a4c:	66 27       	eor	r22, r22
    2a4e:	77 27       	eor	r23, r23
    2a50:	cb 01       	movw	r24, r22
    2a52:	97 f9       	bld	r25, 7
    2a54:	08 95       	ret

00002a56 <__gesf2>:
    2a56:	8a df       	rcall	.-236    	; 0x296c <__fp_cmp>
    2a58:	08 f4       	brcc	.+2      	; 0x2a5c <__gesf2+0x6>
    2a5a:	8f ef       	ldi	r24, 0xFF	; 255
    2a5c:	08 95       	ret

00002a5e <__mulsf3>:
    2a5e:	0b d0       	rcall	.+22     	; 0x2a76 <__mulsf3x>
    2a60:	c0 cf       	rjmp	.-128    	; 0x29e2 <__fp_round>
    2a62:	b1 df       	rcall	.-158    	; 0x29c6 <__fp_pscA>
    2a64:	28 f0       	brcs	.+10     	; 0x2a70 <__mulsf3+0x12>
    2a66:	b6 df       	rcall	.-148    	; 0x29d4 <__fp_pscB>
    2a68:	18 f0       	brcs	.+6      	; 0x2a70 <__mulsf3+0x12>
    2a6a:	95 23       	and	r25, r21
    2a6c:	09 f0       	breq	.+2      	; 0x2a70 <__mulsf3+0x12>
    2a6e:	a2 cf       	rjmp	.-188    	; 0x29b4 <__fp_inf>
    2a70:	a7 cf       	rjmp	.-178    	; 0x29c0 <__fp_nan>
    2a72:	11 24       	eor	r1, r1
    2a74:	ea cf       	rjmp	.-44     	; 0x2a4a <__fp_szero>

00002a76 <__mulsf3x>:
    2a76:	c6 df       	rcall	.-116    	; 0x2a04 <__fp_split3>
    2a78:	a0 f3       	brcs	.-24     	; 0x2a62 <__mulsf3+0x4>

00002a7a <__mulsf3_pse>:
    2a7a:	95 9f       	mul	r25, r21
    2a7c:	d1 f3       	breq	.-12     	; 0x2a72 <__mulsf3+0x14>
    2a7e:	95 0f       	add	r25, r21
    2a80:	50 e0       	ldi	r21, 0x00	; 0
    2a82:	55 1f       	adc	r21, r21
    2a84:	62 9f       	mul	r22, r18
    2a86:	f0 01       	movw	r30, r0
    2a88:	72 9f       	mul	r23, r18
    2a8a:	bb 27       	eor	r27, r27
    2a8c:	f0 0d       	add	r31, r0
    2a8e:	b1 1d       	adc	r27, r1
    2a90:	63 9f       	mul	r22, r19
    2a92:	aa 27       	eor	r26, r26
    2a94:	f0 0d       	add	r31, r0
    2a96:	b1 1d       	adc	r27, r1
    2a98:	aa 1f       	adc	r26, r26
    2a9a:	64 9f       	mul	r22, r20
    2a9c:	66 27       	eor	r22, r22
    2a9e:	b0 0d       	add	r27, r0
    2aa0:	a1 1d       	adc	r26, r1
    2aa2:	66 1f       	adc	r22, r22
    2aa4:	82 9f       	mul	r24, r18
    2aa6:	22 27       	eor	r18, r18
    2aa8:	b0 0d       	add	r27, r0
    2aaa:	a1 1d       	adc	r26, r1
    2aac:	62 1f       	adc	r22, r18
    2aae:	73 9f       	mul	r23, r19
    2ab0:	b0 0d       	add	r27, r0
    2ab2:	a1 1d       	adc	r26, r1
    2ab4:	62 1f       	adc	r22, r18
    2ab6:	83 9f       	mul	r24, r19
    2ab8:	a0 0d       	add	r26, r0
    2aba:	61 1d       	adc	r22, r1
    2abc:	22 1f       	adc	r18, r18
    2abe:	74 9f       	mul	r23, r20
    2ac0:	33 27       	eor	r19, r19
    2ac2:	a0 0d       	add	r26, r0
    2ac4:	61 1d       	adc	r22, r1
    2ac6:	23 1f       	adc	r18, r19
    2ac8:	84 9f       	mul	r24, r20
    2aca:	60 0d       	add	r22, r0
    2acc:	21 1d       	adc	r18, r1
    2ace:	82 2f       	mov	r24, r18
    2ad0:	76 2f       	mov	r23, r22
    2ad2:	6a 2f       	mov	r22, r26
    2ad4:	11 24       	eor	r1, r1
    2ad6:	9f 57       	subi	r25, 0x7F	; 127
    2ad8:	50 40       	sbci	r21, 0x00	; 0
    2ada:	8a f0       	brmi	.+34     	; 0x2afe <__mulsf3_pse+0x84>
    2adc:	e1 f0       	breq	.+56     	; 0x2b16 <__mulsf3_pse+0x9c>
    2ade:	88 23       	and	r24, r24
    2ae0:	4a f0       	brmi	.+18     	; 0x2af4 <__mulsf3_pse+0x7a>
    2ae2:	ee 0f       	add	r30, r30
    2ae4:	ff 1f       	adc	r31, r31
    2ae6:	bb 1f       	adc	r27, r27
    2ae8:	66 1f       	adc	r22, r22
    2aea:	77 1f       	adc	r23, r23
    2aec:	88 1f       	adc	r24, r24
    2aee:	91 50       	subi	r25, 0x01	; 1
    2af0:	50 40       	sbci	r21, 0x00	; 0
    2af2:	a9 f7       	brne	.-22     	; 0x2ade <__mulsf3_pse+0x64>
    2af4:	9e 3f       	cpi	r25, 0xFE	; 254
    2af6:	51 05       	cpc	r21, r1
    2af8:	70 f0       	brcs	.+28     	; 0x2b16 <__mulsf3_pse+0x9c>
    2afa:	5c cf       	rjmp	.-328    	; 0x29b4 <__fp_inf>
    2afc:	a6 cf       	rjmp	.-180    	; 0x2a4a <__fp_szero>
    2afe:	5f 3f       	cpi	r21, 0xFF	; 255
    2b00:	ec f3       	brlt	.-6      	; 0x2afc <__mulsf3_pse+0x82>
    2b02:	98 3e       	cpi	r25, 0xE8	; 232
    2b04:	dc f3       	brlt	.-10     	; 0x2afc <__mulsf3_pse+0x82>
    2b06:	86 95       	lsr	r24
    2b08:	77 95       	ror	r23
    2b0a:	67 95       	ror	r22
    2b0c:	b7 95       	ror	r27
    2b0e:	f7 95       	ror	r31
    2b10:	e7 95       	ror	r30
    2b12:	9f 5f       	subi	r25, 0xFF	; 255
    2b14:	c1 f7       	brne	.-16     	; 0x2b06 <__mulsf3_pse+0x8c>
    2b16:	fe 2b       	or	r31, r30
    2b18:	88 0f       	add	r24, r24
    2b1a:	91 1d       	adc	r25, r1
    2b1c:	96 95       	lsr	r25
    2b1e:	87 95       	ror	r24
    2b20:	97 f9       	bld	r25, 7
    2b22:	08 95       	ret

00002b24 <strcmp>:
    2b24:	fb 01       	movw	r30, r22
    2b26:	dc 01       	movw	r26, r24
    2b28:	8d 91       	ld	r24, X+
    2b2a:	01 90       	ld	r0, Z+
    2b2c:	80 19       	sub	r24, r0
    2b2e:	01 10       	cpse	r0, r1
    2b30:	d9 f3       	breq	.-10     	; 0x2b28 <strcmp+0x4>
    2b32:	99 0b       	sbc	r25, r25
    2b34:	08 95       	ret

00002b36 <eeprom_read_byte>:
    2b36:	e1 99       	sbic	0x1c, 1	; 28
    2b38:	fe cf       	rjmp	.-4      	; 0x2b36 <eeprom_read_byte>
    2b3a:	9f bb       	out	0x1f, r25	; 31
    2b3c:	8e bb       	out	0x1e, r24	; 30
    2b3e:	e0 9a       	sbi	0x1c, 0	; 28
    2b40:	99 27       	eor	r25, r25
    2b42:	8d b3       	in	r24, 0x1d	; 29
    2b44:	08 95       	ret

00002b46 <eeprom_update_byte>:
    2b46:	26 2f       	mov	r18, r22

00002b48 <eeprom_update_r18>:
    2b48:	e1 99       	sbic	0x1c, 1	; 28
    2b4a:	fe cf       	rjmp	.-4      	; 0x2b48 <eeprom_update_r18>
    2b4c:	9f bb       	out	0x1f, r25	; 31
    2b4e:	8e bb       	out	0x1e, r24	; 30
    2b50:	e0 9a       	sbi	0x1c, 0	; 28
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	0d b2       	in	r0, 0x1d	; 29
    2b56:	02 16       	cp	r0, r18
    2b58:	31 f0       	breq	.+12     	; 0x2b66 <eeprom_update_r18+0x1e>
    2b5a:	2d bb       	out	0x1d, r18	; 29
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	e2 9a       	sbi	0x1c, 2	; 28
    2b62:	e1 9a       	sbi	0x1c, 1	; 28
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	08 95       	ret

00002b68 <_exit>:
    2b68:	f8 94       	cli

00002b6a <__stop_program>:
    2b6a:	ff cf       	rjmp	.-2      	; 0x2b6a <__stop_program>
