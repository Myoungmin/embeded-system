
AVR_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00002c12  00002ca6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800116  00800116  00002cbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002cbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00002d30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019d0  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000990  00000000  00000000  000047c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001377  00000000  00000000  00005150  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000064c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050c  00000000  00000000  00006730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000550  00000000  00000000  00006c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000718c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c2       	rjmp	.+1140   	; 0x4b6 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e1       	ldi	r30, 0x12	; 18
      a0:	fc e2       	ldi	r31, 0x2C	; 44
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 31       	cpi	r26, 0x16	; 22
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a6 e1       	ldi	r26, 0x16	; 22
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 33       	cpi	r26, 0x3F	; 63
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	a2 d5       	rcall	.+2884   	; 0xc08 <main>
      c4:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <UART_Init>:
void UART1_Putch(char ch)	//송신 기본함수
{
	while(!(UCSR1A & 0x20));

	UDR1 = ch;
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	8a e2       	ldi	r24, 0x2A	; 42
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	28 e1       	ldi	r18, 0x18	; 24
      d8:	fc 01       	movw	r30, r24
      da:	20 83       	st	Z, r18
      dc:	85 e9       	ldi	r24, 0x95	; 149
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	26 e0       	ldi	r18, 0x06	; 6
      e2:	fc 01       	movw	r30, r24
      e4:	20 83       	st	Z, r18
      e6:	80 e9       	ldi	r24, 0x90	; 144
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	fc 01       	movw	r30, r24
      ec:	10 82       	st	Z, r1
      ee:	89 e2       	ldi	r24, 0x29	; 41
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	27 e6       	ldi	r18, 0x67	; 103
      f4:	fc 01       	movw	r30, r24
      f6:	20 83       	st	Z, r18
      f8:	8a e9       	ldi	r24, 0x9A	; 154
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	2a e9       	ldi	r18, 0x9A	; 154
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	f9 01       	movw	r30, r18
     102:	20 81       	ld	r18, Z
     104:	20 69       	ori	r18, 0x90	; 144
     106:	fc 01       	movw	r30, r24
     108:	20 83       	st	Z, r18
     10a:	8d e9       	ldi	r24, 0x9D	; 157
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	26 e0       	ldi	r18, 0x06	; 6
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18
     114:	88 e9       	ldi	r24, 0x98	; 152
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	fc 01       	movw	r30, r24
     11a:	10 82       	st	Z, r1
     11c:	89 e9       	ldi	r24, 0x99	; 153
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	27 e6       	ldi	r18, 0x67	; 103
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18
     126:	00 00       	nop
     128:	df 91       	pop	r29
     12a:	cf 91       	pop	r28
     12c:	08 95       	ret

0000012e <UART0_Putch>:
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	1f 92       	push	r1
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	89 83       	std	Y+1, r24	; 0x01
     13a:	00 00       	nop
     13c:	8b e2       	ldi	r24, 0x2B	; 43
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	fc 01       	movw	r30, r24
     142:	80 81       	ld	r24, Z
     144:	88 2f       	mov	r24, r24
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	80 72       	andi	r24, 0x20	; 32
     14a:	99 27       	eor	r25, r25
     14c:	89 2b       	or	r24, r25
     14e:	b1 f3       	breq	.-20     	; 0x13c <UART0_Putch+0xe>
     150:	8c e2       	ldi	r24, 0x2C	; 44
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	29 81       	ldd	r18, Y+1	; 0x01
     156:	fc 01       	movw	r30, r24
     158:	20 83       	st	Z, r18
     15a:	00 00       	nop
     15c:	0f 90       	pop	r0
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	08 95       	ret

00000164 <SendCommand>:


void SendCommand(unsigned char cmd)
{
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	67 97       	sbiw	r28, 0x17	; 23
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	8f 8b       	std	Y+23, r24	; 0x17
	unsigned int checksum = 0;
     17a:	1a 82       	std	Y+2, r1	; 0x02
     17c:	19 82       	std	Y+1, r1	; 0x01
	char temp[20];

	UART0_Putch(0x7E);
     17e:	8e e7       	ldi	r24, 0x7E	; 126
     180:	d6 df       	rcall	.-84     	; 0x12e <UART0_Putch>
	UART0_Putch(0xFF);
     182:	8f ef       	ldi	r24, 0xFF	; 255
     184:	d4 df       	rcall	.-88     	; 0x12e <UART0_Putch>
	UART0_Putch(0x06);
     186:	86 e0       	ldi	r24, 0x06	; 6
     188:	d2 df       	rcall	.-92     	; 0x12e <UART0_Putch>
	UART0_Putch(cmd);
     18a:	8f 89       	ldd	r24, Y+23	; 0x17
     18c:	d0 df       	rcall	.-96     	; 0x12e <UART0_Putch>
	UART0_Putch(0x00);
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	ce df       	rcall	.-100    	; 0x12e <UART0_Putch>
     192:	80 e0       	ldi	r24, 0x00	; 0
	UART0_Putch(0x00);
     194:	cc df       	rcall	.-104    	; 0x12e <UART0_Putch>
     196:	8f 89       	ldd	r24, Y+23	; 0x17
	
	if(cmd != CMD_TF){
     198:	89 30       	cpi	r24, 0x09	; 9
     19a:	71 f0       	breq	.+28     	; 0x1b8 <SendCommand+0x54>
     19c:	80 e0       	ldi	r24, 0x00	; 0
		UART0_Putch(0x00);
     19e:	c7 df       	rcall	.-114    	; 0x12e <UART0_Putch>
     1a0:	8f 89       	ldd	r24, Y+23	; 0x17
     1a2:	88 2f       	mov	r24, r24
		checksum = 0 - (0xFF + 0x06 + cmd);
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	2b ef       	ldi	r18, 0xFB	; 251
     1a8:	3e ef       	ldi	r19, 0xFE	; 254
     1aa:	a9 01       	movw	r20, r18
     1ac:	48 1b       	sub	r20, r24
     1ae:	59 0b       	sbc	r21, r25
     1b0:	ca 01       	movw	r24, r20
     1b2:	9a 83       	std	Y+2, r25	; 0x02
     1b4:	89 83       	std	Y+1, r24	; 0x01
     1b6:	0d c0       	rjmp	.+26     	; 0x1d2 <SendCommand+0x6e>
     1b8:	82 e0       	ldi	r24, 0x02	; 2
	}
	else{
		UART0_Putch(0x02);
     1ba:	b9 df       	rcall	.-142    	; 0x12e <UART0_Putch>
     1bc:	8f 89       	ldd	r24, Y+23	; 0x17
     1be:	88 2f       	mov	r24, r24
		checksum = 0 - (0xFF + 0x06 + cmd + 0x02);
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	29 ef       	ldi	r18, 0xF9	; 249
     1c4:	3e ef       	ldi	r19, 0xFE	; 254
     1c6:	a9 01       	movw	r20, r18
     1c8:	48 1b       	sub	r20, r24
     1ca:	59 0b       	sbc	r21, r25
     1cc:	ca 01       	movw	r24, r20
     1ce:	9a 83       	std	Y+2, r25	; 0x02
     1d0:	89 83       	std	Y+1, r24	; 0x01
	}

	UART0_Putch((char)(checksum >> 8));
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	9a 81       	ldd	r25, Y+2	; 0x02
     1d6:	89 2f       	mov	r24, r25
     1d8:	99 27       	eor	r25, r25
     1da:	a9 df       	rcall	.-174    	; 0x12e <UART0_Putch>
	UART0_Putch(checksum&0xFF);
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	a7 df       	rcall	.-178    	; 0x12e <UART0_Putch>
     1e0:	8f ee       	ldi	r24, 0xEF	; 239
	UART0_Putch(0xEF);
     1e2:	a5 df       	rcall	.-182    	; 0x12e <UART0_Putch>
     1e4:	00 00       	nop
     1e6:	67 96       	adiw	r28, 0x17	; 23
}
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <SendCommand01>:
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29


void SendCommand01(unsigned char cmd, unsigned char param1, unsigned char param2)
{
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	69 97       	sbiw	r28, 0x19	; 25
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	8f 8b       	std	Y+23, r24	; 0x17
     20e:	68 8f       	std	Y+24, r22	; 0x18
     210:	49 8f       	std	Y+25, r20	; 0x19
	unsigned int checksum = 0;
     212:	1a 82       	std	Y+2, r1	; 0x02
     214:	19 82       	std	Y+1, r1	; 0x01
	char temp[20];

	UART0_Putch(0x7E);
     216:	8e e7       	ldi	r24, 0x7E	; 126
     218:	8a df       	rcall	.-236    	; 0x12e <UART0_Putch>
	UART0_Putch(0xFF);
     21a:	8f ef       	ldi	r24, 0xFF	; 255
     21c:	88 df       	rcall	.-240    	; 0x12e <UART0_Putch>
	UART0_Putch(0x06);
     21e:	86 e0       	ldi	r24, 0x06	; 6
     220:	86 df       	rcall	.-244    	; 0x12e <UART0_Putch>
	UART0_Putch(cmd);
     222:	8f 89       	ldd	r24, Y+23	; 0x17
     224:	84 df       	rcall	.-248    	; 0x12e <UART0_Putch>
	UART0_Putch(0x00);
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	82 df       	rcall	.-252    	; 0x12e <UART0_Putch>
	UART0_Putch(param1);
     22a:	88 8d       	ldd	r24, Y+24	; 0x18
     22c:	80 df       	rcall	.-256    	; 0x12e <UART0_Putch>
     22e:	89 8d       	ldd	r24, Y+25	; 0x19
	UART0_Putch(param2);
     230:	7e df       	rcall	.-260    	; 0x12e <UART0_Putch>
     232:	8f 89       	ldd	r24, Y+23	; 0x17
     234:	88 2f       	mov	r24, r24
	

	checksum = 0 - (0xFF + 0x06 + cmd + param1 + param2);
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	9c 01       	movw	r18, r24
     23a:	2b 5f       	subi	r18, 0xFB	; 251
     23c:	3e 4f       	sbci	r19, 0xFE	; 254
     23e:	88 8d       	ldd	r24, Y+24	; 0x18
     240:	88 2f       	mov	r24, r24
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	28 0f       	add	r18, r24
     246:	39 1f       	adc	r19, r25
     248:	89 8d       	ldd	r24, Y+25	; 0x19
     24a:	88 2f       	mov	r24, r24
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	82 0f       	add	r24, r18
     250:	93 1f       	adc	r25, r19
     252:	91 95       	neg	r25
     254:	81 95       	neg	r24
     256:	91 09       	sbc	r25, r1
     258:	9a 83       	std	Y+2, r25	; 0x02
     25a:	89 83       	std	Y+1, r24	; 0x01
     25c:	89 81       	ldd	r24, Y+1	; 0x01

	UART0_Putch((char)(checksum >> 8));
     25e:	9a 81       	ldd	r25, Y+2	; 0x02
     260:	89 2f       	mov	r24, r25
     262:	99 27       	eor	r25, r25
     264:	64 df       	rcall	.-312    	; 0x12e <UART0_Putch>
     266:	89 81       	ldd	r24, Y+1	; 0x01
	UART0_Putch(checksum&0xFF);
     268:	62 df       	rcall	.-316    	; 0x12e <UART0_Putch>
     26a:	8f ee       	ldi	r24, 0xEF	; 239
     26c:	60 df       	rcall	.-320    	; 0x12e <UART0_Putch>
	UART0_Putch(0xEF);
     26e:	00 00       	nop
     270:	69 96       	adiw	r28, 0x19	; 25
     272:	0f b6       	in	r0, 0x3f	; 63
}
     274:	f8 94       	cli
     276:	de bf       	out	0x3e, r29	; 62
     278:	0f be       	out	0x3f, r0	; 63
     27a:	cd bf       	out	0x3d, r28	; 61
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <__vector_30>:
     282:	1f 92       	push	r1
     284:	0f 92       	push	r0
     286:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
enum{close, open};	//도어락 상태


ISR(USART1_RX_vect)	
//주의할점!! 블루투스 한꺼번에 인식 못한 이유가 중간 과정 잘 가는지 확인하려고 과정별로 LCD출력 하느라 속도가 늦어져 인식을 못했다.
{
     28a:	0f 92       	push	r0
     28c:	11 24       	eor	r1, r1
     28e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     292:	0f 92       	push	r0
     294:	2f 93       	push	r18
     296:	3f 93       	push	r19
     298:	4f 93       	push	r20
     29a:	5f 93       	push	r21
     29c:	6f 93       	push	r22
     29e:	7f 93       	push	r23
     2a0:	8f 93       	push	r24
     2a2:	9f 93       	push	r25
     2a4:	af 93       	push	r26
     2a6:	bf 93       	push	r27
     2a8:	ef 93       	push	r30
     2aa:	ff 93       	push	r31
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	28 97       	sbiw	r28, 0x08	; 8
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	cd bf       	out	0x3d, r28	; 61
	unsigned char ch;	//수신저장변수
	static char old_index = 0;	//이전 비밀번호 자리
	static char new_index = 0;	//새 비밀번호 자리

	ch = UDR1; // 수신
     2ba:	8c e9       	ldi	r24, 0x9C	; 156
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	fc 01       	movw	r30, r24
     2c0:	80 81       	ld	r24, Z
     2c2:	88 87       	std	Y+8, r24	; 0x08

	if(RX == 0 && ch == 'C') //C를 받았을때
     2c4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <RX>
     2c8:	88 23       	and	r24, r24
     2ca:	59 f5       	brne	.+86     	; 0x322 <__vector_30+0xa0>
     2cc:	88 85       	ldd	r24, Y+8	; 0x08
     2ce:	83 34       	cpi	r24, 0x43	; 67
     2d0:	41 f5       	brne	.+80     	; 0x322 <__vector_30+0xa0>
	{
		RX = 1;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <RX>
		for(int i = 0; i < 11; i++)
     2d8:	1a 82       	std	Y+2, r1	; 0x02
     2da:	19 82       	std	Y+1, r1	; 0x01
     2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <__vector_30+0x72>
		{
			old_password[i] = 0;
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	9a 81       	ldd	r25, Y+2	; 0x02
     2e2:	88 5e       	subi	r24, 0xE8	; 232
     2e4:	9e 4f       	sbci	r25, 0xFE	; 254
     2e6:	fc 01       	movw	r30, r24
     2e8:	10 82       	st	Z, r1
	ch = UDR1; // 수신

	if(RX == 0 && ch == 'C') //C를 받았을때
	{
		RX = 1;
		for(int i = 0; i < 11; i++)
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	9a 81       	ldd	r25, Y+2	; 0x02
     2ee:	01 96       	adiw	r24, 0x01	; 1
     2f0:	9a 83       	std	Y+2, r25	; 0x02
     2f2:	89 83       	std	Y+1, r24	; 0x01
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	0b 97       	sbiw	r24, 0x0b	; 11
     2fa:	8c f3       	brlt	.-30     	; 0x2de <__vector_30+0x5c>
		{
			old_password[i] = 0;
		}
		for(int i = 0; i < 11; i++)
     2fc:	1c 82       	std	Y+4, r1	; 0x04
     2fe:	1b 82       	std	Y+3, r1	; 0x03
     300:	0b c0       	rjmp	.+22     	; 0x318 <__vector_30+0x96>
		{
			new_password[i] = 0;
     302:	8b 81       	ldd	r24, Y+3	; 0x03
     304:	9c 81       	ldd	r25, Y+4	; 0x04
     306:	8d 5d       	subi	r24, 0xDD	; 221
     308:	9e 4f       	sbci	r25, 0xFE	; 254
     30a:	fc 01       	movw	r30, r24
     30c:	10 82       	st	Z, r1
		RX = 1;
		for(int i = 0; i < 11; i++)
		{
			old_password[i] = 0;
		}
		for(int i = 0; i < 11; i++)
     30e:	8b 81       	ldd	r24, Y+3	; 0x03
     310:	9c 81       	ldd	r25, Y+4	; 0x04
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	9c 83       	std	Y+4, r25	; 0x04
     316:	8b 83       	std	Y+3, r24	; 0x03
     318:	8b 81       	ldd	r24, Y+3	; 0x03
     31a:	9c 81       	ldd	r25, Y+4	; 0x04
     31c:	0b 97       	sbiw	r24, 0x0b	; 11
     31e:	8c f3       	brlt	.-30     	; 0x302 <__vector_30+0x80>
     320:	4a c0       	rjmp	.+148    	; 0x3b6 <__vector_30+0x134>
		{
			new_password[i] = 0;
		}
	}
	else if(RX == 1)
     322:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <RX>
     326:	81 30       	cpi	r24, 0x01	; 1
     328:	11 f5       	brne	.+68     	; 0x36e <__vector_30+0xec>
	{
		if(ch == 'E')	//E를 받았을때 아직 프로토콜이 완료 안된 상태라 초기화
     32a:	88 85       	ldd	r24, Y+8	; 0x08
     32c:	85 34       	cpi	r24, 0x45	; 69
     32e:	31 f4       	brne	.+12     	; 0x33c <__vector_30+0xba>
		{
			rx_complete = 1;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <rx_complete>
			RX = 0;
     336:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <RX>
     33a:	3d c0       	rjmp	.+122    	; 0x3b6 <__vector_30+0x134>
		}
		else if(ch == 'R')	//비밀번호가 맞는지 확인하는 단계
     33c:	88 85       	ldd	r24, Y+8	; 0x08
     33e:	82 35       	cpi	r24, 0x52	; 82
     340:	31 f4       	brne	.+12     	; 0x34e <__vector_30+0xcc>
		{
			RX = 2;
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <RX>
			old_index = 0;
     348:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <old_index.1962>
     34c:	34 c0       	rjmp	.+104    	; 0x3b6 <__vector_30+0x134>
		}
		else  //명령어가 아니면 비밀번호로 간주하여 입력값에 넣는다
		{
			old_password[old_index] = ch;
     34e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <old_index.1962>
     352:	08 2e       	mov	r0, r24
     354:	00 0c       	add	r0, r0
     356:	99 0b       	sbc	r25, r25
     358:	28 85       	ldd	r18, Y+8	; 0x08
     35a:	88 5e       	subi	r24, 0xE8	; 232
     35c:	9e 4f       	sbci	r25, 0xFE	; 254
     35e:	fc 01       	movw	r30, r24
     360:	20 83       	st	Z, r18
			old_index++;
     362:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <old_index.1962>
     366:	8f 5f       	subi	r24, 0xFF	; 255
     368:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <old_index.1962>
     36c:	24 c0       	rjmp	.+72     	; 0x3b6 <__vector_30+0x134>
		}
	}
	else if(RX == 2)	//단계 2일 경우
     36e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <RX>
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	01 f5       	brne	.+64     	; 0x3b6 <__vector_30+0x134>
	{
		if(ch == 'E')	//E를 받았을때 블루투스 완료 플래그 온
     376:	88 85       	ldd	r24, Y+8	; 0x08
     378:	85 34       	cpi	r24, 0x45	; 69
     37a:	31 f4       	brne	.+12     	; 0x388 <__vector_30+0x106>
		{
			rx_complete = 1;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <rx_complete>
			RX = 0;
     382:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <RX>
     386:	17 c0       	rjmp	.+46     	; 0x3b6 <__vector_30+0x134>
		}
		else if(ch == 'R')	//R이 나올 단계 아니므로 초기화
     388:	88 85       	ldd	r24, Y+8	; 0x08
     38a:	82 35       	cpi	r24, 0x52	; 82
     38c:	29 f4       	brne	.+10     	; 0x398 <__vector_30+0x116>
		{
			RX = 0;
     38e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <RX>
			new_index = 0;
     392:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <new_index.1963>
     396:	0f c0       	rjmp	.+30     	; 0x3b6 <__vector_30+0x134>
		}
		else  //명령어가 아니면 새로운 비밀번호로 간주하여 입력값에 넣는다
		{
			new_password[new_index] = ch;
     398:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <new_index.1963>
     39c:	08 2e       	mov	r0, r24
     39e:	00 0c       	add	r0, r0
     3a0:	99 0b       	sbc	r25, r25
     3a2:	28 85       	ldd	r18, Y+8	; 0x08
     3a4:	8d 5d       	subi	r24, 0xDD	; 221
     3a6:	9e 4f       	sbci	r25, 0xFE	; 254
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 83       	st	Z, r18
			new_index++;
     3ac:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <new_index.1963>
     3b0:	8f 5f       	subi	r24, 0xFF	; 255
     3b2:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <new_index.1963>
		}
	}

	if(rx_complete == 1)	//블루투스 완료시 새로운 비밀번호 입력하고 eeprom에도 저장
     3b6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <rx_complete>
     3ba:	81 30       	cpi	r24, 0x01	; 1
     3bc:	09 f0       	breq	.+2      	; 0x3c0 <__vector_30+0x13e>
     3be:	5d c0       	rjmp	.+186    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
	{
		if(strcmp(password, old_password) == 0)
     3c0:	68 e1       	ldi	r22, 0x18	; 24
     3c2:	71 e0       	ldi	r23, 0x01	; 1
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <strcmp>
     3cc:	89 2b       	or	r24, r25
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <__vector_30+0x150>
     3d0:	44 c0       	rjmp	.+136    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		{
			for(int i = 0; i <= new_index; i++)
     3d2:	1e 82       	std	Y+6, r1	; 0x06
     3d4:	1d 82       	std	Y+5, r1	; 0x05
     3d6:	11 c0       	rjmp	.+34     	; 0x3fa <__vector_30+0x178>
			{
				password[i] = new_password[i];
     3d8:	8d 81       	ldd	r24, Y+5	; 0x05
     3da:	9e 81       	ldd	r25, Y+6	; 0x06
     3dc:	8d 5d       	subi	r24, 0xDD	; 221
     3de:	9e 4f       	sbci	r25, 0xFE	; 254
     3e0:	fc 01       	movw	r30, r24
     3e2:	20 81       	ld	r18, Z
     3e4:	8d 81       	ldd	r24, Y+5	; 0x05
     3e6:	9e 81       	ldd	r25, Y+6	; 0x06
     3e8:	80 50       	subi	r24, 0x00	; 0
     3ea:	9f 4f       	sbci	r25, 0xFF	; 255
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18

	if(rx_complete == 1)	//블루투스 완료시 새로운 비밀번호 입력하고 eeprom에도 저장
	{
		if(strcmp(password, old_password) == 0)
		{
			for(int i = 0; i <= new_index; i++)
     3f0:	8d 81       	ldd	r24, Y+5	; 0x05
     3f2:	9e 81       	ldd	r25, Y+6	; 0x06
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	9e 83       	std	Y+6, r25	; 0x06
     3f8:	8d 83       	std	Y+5, r24	; 0x05
     3fa:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <new_index.1963>
     3fe:	28 2f       	mov	r18, r24
     400:	88 0f       	add	r24, r24
     402:	33 0b       	sbc	r19, r19
     404:	8d 81       	ldd	r24, Y+5	; 0x05
     406:	9e 81       	ldd	r25, Y+6	; 0x06
     408:	28 17       	cp	r18, r24
     40a:	39 07       	cpc	r19, r25
     40c:	2c f7       	brge	.-54     	; 0x3d8 <__vector_30+0x156>
			{
				password[i] = new_password[i];
			}
			for(uint8_t i = 0; i < 11; i++)
     40e:	1f 82       	std	Y+7, r1	; 0x07
     410:	12 c0       	rjmp	.+36     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			{
				eeprom_update_byte(EEPROM + i,password[i]);
     412:	8f 81       	ldd	r24, Y+7	; 0x07
     414:	88 2f       	mov	r24, r24
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	80 50       	subi	r24, 0x00	; 0
     41a:	9f 4f       	sbci	r25, 0xFF	; 255
     41c:	fc 01       	movw	r30, r24
     41e:	80 81       	ld	r24, Z
     420:	28 2f       	mov	r18, r24
     422:	8f 81       	ldd	r24, Y+7	; 0x07
     424:	88 2f       	mov	r24, r24
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	62 2f       	mov	r22, r18
     42c:	0e 94 f6 15 	call	0x2bec	; 0x2bec <eeprom_update_byte>
		{
			for(int i = 0; i <= new_index; i++)
			{
				password[i] = new_password[i];
			}
			for(uint8_t i = 0; i < 11; i++)
     430:	8f 81       	ldd	r24, Y+7	; 0x07
     432:	8f 5f       	subi	r24, 0xFF	; 255
     434:	8f 83       	std	Y+7, r24	; 0x07
     436:	8f 81       	ldd	r24, Y+7	; 0x07
     438:	8b 30       	cpi	r24, 0x0B	; 11
     43a:	58 f3       	brcs	.-42     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			{
				eeprom_update_byte(EEPROM + i,password[i]);
			}
			Command(ALLCLR);
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	df d6       	rcall	.+3518   	; 0x11fe <Command>
			LCD_String("PW :");
     440:	8b e0       	ldi	r24, 0x0B	; 11
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	b1 d6       	rcall	.+3426   	; 0x11a8 <LCD_String>
			LCD_String(password);
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	91 e0       	ldi	r25, 0x01	; 1
			Command(LINE2);
     44a:	ae d6       	rcall	.+3420   	; 0x11a8 <LCD_String>
     44c:	80 ec       	ldi	r24, 0xC0	; 192
     44e:	d7 d6       	rcall	.+3502   	; 0x11fe <Command>
			new_index = 0;	//비밀번호 자리 초기화
     450:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <new_index.1963>
			rx_complete = 0;	//신호분석 플래그 지움
     454:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <rx_complete>
			LCD_String(password);
			Command(LINE2);
		}

	}
}
     458:	10 c0       	rjmp	.+32     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
			new_index = 0;	//비밀번호 자리 초기화
			rx_complete = 0;	//신호분석 플래그 지움
		}
		else
		{
			RX = 0;
     45a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <RX>
			rx_complete = 0;	//신호분석 플래그 지움
     45e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <rx_complete>
			new_index = 0;
     462:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <new_index.1963>
			Command(ALLCLR);
     466:	81 e0       	ldi	r24, 0x01	; 1
			LCD_String("PW :");
     468:	ca d6       	rcall	.+3476   	; 0x11fe <Command>
     46a:	8b e0       	ldi	r24, 0x0B	; 11
			LCD_String(password);
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	9c d6       	rcall	.+3384   	; 0x11a8 <LCD_String>
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	91 e0       	ldi	r25, 0x01	; 1
			Command(LINE2);
     474:	99 d6       	rcall	.+3378   	; 0x11a8 <LCD_String>
     476:	80 ec       	ldi	r24, 0xC0	; 192
     478:	c2 d6       	rcall	.+3460   	; 0x11fe <Command>
		}

	}
}
     47a:	00 00       	nop
     47c:	28 96       	adiw	r28, 0x08	; 8
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	ff 91       	pop	r31
     48e:	ef 91       	pop	r30
     490:	bf 91       	pop	r27
     492:	af 91       	pop	r26
     494:	9f 91       	pop	r25
     496:	8f 91       	pop	r24
     498:	7f 91       	pop	r23
     49a:	6f 91       	pop	r22
     49c:	5f 91       	pop	r21
     49e:	4f 91       	pop	r20
     4a0:	3f 91       	pop	r19
     4a2:	2f 91       	pop	r18
     4a4:	0f 90       	pop	r0
     4a6:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     4aa:	0f 90       	pop	r0
     4ac:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     4b0:	0f 90       	pop	r0
     4b2:	1f 90       	pop	r1
     4b4:	18 95       	reti

000004b6 <__vector_16>:


ISR(TIMER0_OVF_vect)
{
     4b6:	1f 92       	push	r1
     4b8:	0f 92       	push	r0
     4ba:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     4be:	0f 92       	push	r0
     4c0:	11 24       	eor	r1, r1
     4c2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     4c6:	0f 92       	push	r0
     4c8:	2f 93       	push	r18
     4ca:	3f 93       	push	r19
     4cc:	4f 93       	push	r20
     4ce:	5f 93       	push	r21
     4d0:	6f 93       	push	r22
     4d2:	7f 93       	push	r23
     4d4:	8f 93       	push	r24
     4d6:	9f 93       	push	r25
     4d8:	af 93       	push	r26
     4da:	bf 93       	push	r27
     4dc:	ef 93       	push	r30
     4de:	ff 93       	push	r31
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	e0 97       	sbiw	r28, 0x30	; 48
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	cd bf       	out	0x3d, r28	; 61
	static char scan = 0;	//스캔하는 줄, 타이버 인터럽트 발생때마다 스캔줄이 바뀌어서 static으로 초기화 방지
	static char input_spot = 0;	//비밀번호 자리
	char Key=0;	//키패드 입력값 저장소
     4ee:	19 82       	std	Y+1, r1	; 0x01
	DDRA=0xF0;         // 비트0,1,2,3 출력으로 지정
     4f0:	8a e3       	ldi	r24, 0x3A	; 58
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	20 ef       	ldi	r18, 0xF0	; 240
     4f6:	fc 01       	movw	r30, r24
     4f8:	20 83       	st	Z, r18
	PORTA = 0xFF;
     4fa:	8b e3       	ldi	r24, 0x3B	; 59
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	2f ef       	ldi	r18, 0xFF	; 255
     500:	fc 01       	movw	r30, r24
     502:	20 83       	st	Z, r18

	if(scan == 0)
     504:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <scan.1985>
     508:	88 23       	and	r24, r24
     50a:	91 f5       	brne	.+100    	; 0x570 <__vector_16+0xba>
	{
		PORTA &= ~0x10; // 1번째 줄 선택
     50c:	8b e3       	ldi	r24, 0x3B	; 59
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	2b e3       	ldi	r18, 0x3B	; 59
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	f9 01       	movw	r30, r18
     516:	20 81       	ld	r18, Z
     518:	2f 7e       	andi	r18, 0xEF	; 239
     51a:	fc 01       	movw	r30, r24
     51c:	20 83       	st	Z, r18
		if((PINA & 0x01)==0)Key='1';
     51e:	89 e3       	ldi	r24, 0x39	; 57
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	fc 01       	movw	r30, r24
     524:	80 81       	ld	r24, Z
     526:	88 2f       	mov	r24, r24
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	81 70       	andi	r24, 0x01	; 1
     52c:	99 27       	eor	r25, r25
     52e:	89 2b       	or	r24, r25
     530:	11 f4       	brne	.+4      	; 0x536 <__vector_16+0x80>
     532:	81 e3       	ldi	r24, 0x31	; 49
     534:	89 83       	std	Y+1, r24	; 0x01
		if((PINA & 0x02)==0)Key='2';
     536:	89 e3       	ldi	r24, 0x39	; 57
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	fc 01       	movw	r30, r24
     53c:	80 81       	ld	r24, Z
     53e:	88 2f       	mov	r24, r24
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	82 70       	andi	r24, 0x02	; 2
     544:	99 27       	eor	r25, r25
     546:	89 2b       	or	r24, r25
     548:	11 f4       	brne	.+4      	; 0x54e <__vector_16+0x98>
     54a:	82 e3       	ldi	r24, 0x32	; 50
     54c:	89 83       	std	Y+1, r24	; 0x01
		if((PINA & 0x04)==0)Key='3';
     54e:	89 e3       	ldi	r24, 0x39	; 57
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	fc 01       	movw	r30, r24
     554:	80 81       	ld	r24, Z
     556:	88 2f       	mov	r24, r24
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	84 70       	andi	r24, 0x04	; 4
     55c:	99 27       	eor	r25, r25
     55e:	89 2b       	or	r24, r25
     560:	11 f4       	brne	.+4      	; 0x566 <__vector_16+0xb0>
     562:	83 e3       	ldi	r24, 0x33	; 51
     564:	89 83       	std	Y+1, r24	; 0x01
		PORTA = 0xFF; // 1번째 줄 해제
     566:	8b e3       	ldi	r24, 0x3B	; 59
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	2f ef       	ldi	r18, 0xFF	; 255
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
	}
	
	if(scan == 1)
     570:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <scan.1985>
     574:	81 30       	cpi	r24, 0x01	; 1
     576:	a1 f5       	brne	.+104    	; 0x5e0 <__vector_16+0x12a>
	{
		PORTA &= ~0x20; // 2번째 줄 선택
     578:	8b e3       	ldi	r24, 0x3B	; 59
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	2b e3       	ldi	r18, 0x3B	; 59
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	f9 01       	movw	r30, r18
     582:	20 81       	ld	r18, Z
     584:	2f 7d       	andi	r18, 0xDF	; 223
     586:	fc 01       	movw	r30, r24
     588:	20 83       	st	Z, r18
		if((PINA & 0x01)==0)Key='4';
     58a:	89 e3       	ldi	r24, 0x39	; 57
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	fc 01       	movw	r30, r24
     590:	80 81       	ld	r24, Z
     592:	88 2f       	mov	r24, r24
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	81 70       	andi	r24, 0x01	; 1
     598:	99 27       	eor	r25, r25
     59a:	89 2b       	or	r24, r25
     59c:	19 f4       	brne	.+6      	; 0x5a4 <__vector_16+0xee>
     59e:	84 e3       	ldi	r24, 0x34	; 52
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	19 c0       	rjmp	.+50     	; 0x5d6 <__vector_16+0x120>
		else if((PINA & 0x02)==0)Key='5';
     5a4:	89 e3       	ldi	r24, 0x39	; 57
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	fc 01       	movw	r30, r24
     5aa:	80 81       	ld	r24, Z
     5ac:	88 2f       	mov	r24, r24
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	82 70       	andi	r24, 0x02	; 2
     5b2:	99 27       	eor	r25, r25
     5b4:	89 2b       	or	r24, r25
     5b6:	19 f4       	brne	.+6      	; 0x5be <__vector_16+0x108>
     5b8:	85 e3       	ldi	r24, 0x35	; 53
     5ba:	89 83       	std	Y+1, r24	; 0x01
     5bc:	0c c0       	rjmp	.+24     	; 0x5d6 <__vector_16+0x120>
		else if((PINA & 0x04)==0)Key='6';
     5be:	89 e3       	ldi	r24, 0x39	; 57
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	fc 01       	movw	r30, r24
     5c4:	80 81       	ld	r24, Z
     5c6:	88 2f       	mov	r24, r24
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	84 70       	andi	r24, 0x04	; 4
     5cc:	99 27       	eor	r25, r25
     5ce:	89 2b       	or	r24, r25
     5d0:	11 f4       	brne	.+4      	; 0x5d6 <__vector_16+0x120>
     5d2:	86 e3       	ldi	r24, 0x36	; 54
     5d4:	89 83       	std	Y+1, r24	; 0x01
		PORTA=0xFF; // 2번째 줄 해제
     5d6:	8b e3       	ldi	r24, 0x3B	; 59
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
	}
	
	if(scan == 2)
     5e0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <scan.1985>
     5e4:	82 30       	cpi	r24, 0x02	; 2
     5e6:	a1 f5       	brne	.+104    	; 0x650 <__vector_16+0x19a>
	{
		PORTA &= ~0x40; // 3번째 줄 선택
     5e8:	8b e3       	ldi	r24, 0x3B	; 59
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	2b e3       	ldi	r18, 0x3B	; 59
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	f9 01       	movw	r30, r18
     5f2:	20 81       	ld	r18, Z
     5f4:	2f 7b       	andi	r18, 0xBF	; 191
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 83       	st	Z, r18
		if((PINA & 0x01)==0)Key='7';
     5fa:	89 e3       	ldi	r24, 0x39	; 57
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	fc 01       	movw	r30, r24
     600:	80 81       	ld	r24, Z
     602:	88 2f       	mov	r24, r24
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	81 70       	andi	r24, 0x01	; 1
     608:	99 27       	eor	r25, r25
     60a:	89 2b       	or	r24, r25
     60c:	19 f4       	brne	.+6      	; 0x614 <__vector_16+0x15e>
     60e:	87 e3       	ldi	r24, 0x37	; 55
     610:	89 83       	std	Y+1, r24	; 0x01
     612:	19 c0       	rjmp	.+50     	; 0x646 <__vector_16+0x190>
		else if((PINA & 0x02)==0)Key='8';
     614:	89 e3       	ldi	r24, 0x39	; 57
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	fc 01       	movw	r30, r24
     61a:	80 81       	ld	r24, Z
     61c:	88 2f       	mov	r24, r24
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	82 70       	andi	r24, 0x02	; 2
     622:	99 27       	eor	r25, r25
     624:	89 2b       	or	r24, r25
     626:	19 f4       	brne	.+6      	; 0x62e <__vector_16+0x178>
     628:	88 e3       	ldi	r24, 0x38	; 56
     62a:	89 83       	std	Y+1, r24	; 0x01
     62c:	0c c0       	rjmp	.+24     	; 0x646 <__vector_16+0x190>
		else if((PINA & 0x04)==0)Key='9';
     62e:	89 e3       	ldi	r24, 0x39	; 57
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	fc 01       	movw	r30, r24
     634:	80 81       	ld	r24, Z
     636:	88 2f       	mov	r24, r24
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	84 70       	andi	r24, 0x04	; 4
     63c:	99 27       	eor	r25, r25
     63e:	89 2b       	or	r24, r25
     640:	11 f4       	brne	.+4      	; 0x646 <__vector_16+0x190>
     642:	89 e3       	ldi	r24, 0x39	; 57
     644:	89 83       	std	Y+1, r24	; 0x01
		PORTA=0xFF; // 3번째 줄 해제
     646:	8b e3       	ldi	r24, 0x3B	; 59
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	2f ef       	ldi	r18, 0xFF	; 255
     64c:	fc 01       	movw	r30, r24
     64e:	20 83       	st	Z, r18
	}
	
	if(scan == 3)
     650:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <scan.1985>
     654:	83 30       	cpi	r24, 0x03	; 3
     656:	a1 f5       	brne	.+104    	; 0x6c0 <__vector_16+0x20a>
	{
		PORTA &= ~0x80; // 4번째 줄 선택
     658:	8b e3       	ldi	r24, 0x3B	; 59
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	2b e3       	ldi	r18, 0x3B	; 59
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	f9 01       	movw	r30, r18
     662:	20 81       	ld	r18, Z
     664:	2f 77       	andi	r18, 0x7F	; 127
     666:	fc 01       	movw	r30, r24
     668:	20 83       	st	Z, r18
		if((PINA & 0x01)==0)Key='0';
     66a:	89 e3       	ldi	r24, 0x39	; 57
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	fc 01       	movw	r30, r24
     670:	80 81       	ld	r24, Z
     672:	88 2f       	mov	r24, r24
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	81 70       	andi	r24, 0x01	; 1
     678:	99 27       	eor	r25, r25
     67a:	89 2b       	or	r24, r25
     67c:	19 f4       	brne	.+6      	; 0x684 <__vector_16+0x1ce>
     67e:	80 e3       	ldi	r24, 0x30	; 48
     680:	89 83       	std	Y+1, r24	; 0x01
     682:	19 c0       	rjmp	.+50     	; 0x6b6 <__vector_16+0x200>
		else if((PINA & 0x02)==0)Key='Y';
     684:	89 e3       	ldi	r24, 0x39	; 57
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	fc 01       	movw	r30, r24
     68a:	80 81       	ld	r24, Z
     68c:	88 2f       	mov	r24, r24
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	82 70       	andi	r24, 0x02	; 2
     692:	99 27       	eor	r25, r25
     694:	89 2b       	or	r24, r25
     696:	19 f4       	brne	.+6      	; 0x69e <__vector_16+0x1e8>
     698:	89 e5       	ldi	r24, 0x59	; 89
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	0c c0       	rjmp	.+24     	; 0x6b6 <__vector_16+0x200>
		else if((PINA & 0x04)==0)Key='N';
     69e:	89 e3       	ldi	r24, 0x39	; 57
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	fc 01       	movw	r30, r24
     6a4:	80 81       	ld	r24, Z
     6a6:	88 2f       	mov	r24, r24
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	84 70       	andi	r24, 0x04	; 4
     6ac:	99 27       	eor	r25, r25
     6ae:	89 2b       	or	r24, r25
     6b0:	11 f4       	brne	.+4      	; 0x6b6 <__vector_16+0x200>
     6b2:	8e e4       	ldi	r24, 0x4E	; 78
     6b4:	89 83       	std	Y+1, r24	; 0x01
		PORTA=0xFF; // 4번째 줄 해제
     6b6:	8b e3       	ldi	r24, 0x3B	; 59
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	2f ef       	ldi	r18, 0xFF	; 255
     6bc:	fc 01       	movw	r30, r24
     6be:	20 83       	st	Z, r18
	}
	scan++;
     6c0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <scan.1985>
     6c4:	8f 5f       	subi	r24, 0xFF	; 255
     6c6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <scan.1985>
	if(scan == 4) scan = 0;
     6ca:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <scan.1985>
     6ce:	84 30       	cpi	r24, 0x04	; 4
     6d0:	11 f4       	brne	.+4      	; 0x6d6 <__vector_16+0x220>
     6d2:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <scan.1985>
	ch = Key;
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>

	if(state == close)	//닫혀있는 상태
     6dc:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <state>
     6e0:	88 23       	and	r24, r24
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <__vector_16+0x230>
     6e4:	58 c1       	rjmp	.+688    	; 0x996 <__vector_16+0x4e0>
	{
		OCR1A = 2000;	//1ms 펄스, 서보모터 제어
     6e6:	8a e4       	ldi	r24, 0x4A	; 74
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	20 ed       	ldi	r18, 0xD0	; 208
     6ec:	37 e0       	ldi	r19, 0x07	; 7
     6ee:	fc 01       	movw	r30, r24
     6f0:	31 83       	std	Z+1, r19	; 0x01
     6f2:	20 83       	st	Z, r18
		if(ch == 'Y')	//확인버튼 비밀번호 확인
     6f4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
     6f8:	89 35       	cpi	r24, 0x59	; 89
     6fa:	09 f0       	breq	.+2      	; 0x6fe <__vector_16+0x248>
     6fc:	9b c0       	rjmp	.+310    	; 0x834 <__vector_16+0x37e>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	a8 e4       	ldi	r26, 0x48	; 72
     704:	b3 e4       	ldi	r27, 0x43	; 67
     706:	8f 87       	std	Y+15, r24	; 0x0f
     708:	98 8b       	std	Y+16, r25	; 0x10
     70a:	a9 8b       	std	Y+17, r26	; 0x11
     70c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	4a e7       	ldi	r20, 0x7A	; 122
     714:	55 e4       	ldi	r21, 0x45	; 69
     716:	6f 85       	ldd	r22, Y+15	; 0x0f
     718:	78 89       	ldd	r23, Y+16	; 0x10
     71a:	89 89       	ldd	r24, Y+17	; 0x11
     71c:	9a 89       	ldd	r25, Y+18	; 0x12
     71e:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
     722:	dc 01       	movw	r26, r24
     724:	cb 01       	movw	r24, r22
     726:	8b 8b       	std	Y+19, r24	; 0x13
     728:	9c 8b       	std	Y+20, r25	; 0x14
     72a:	ad 8b       	std	Y+21, r26	; 0x15
     72c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	40 e8       	ldi	r20, 0x80	; 128
     734:	5f e3       	ldi	r21, 0x3F	; 63
     736:	6b 89       	ldd	r22, Y+19	; 0x13
     738:	7c 89       	ldd	r23, Y+20	; 0x14
     73a:	8d 89       	ldd	r24, Y+21	; 0x15
     73c:	9e 89       	ldd	r25, Y+22	; 0x16
     73e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__cmpsf2>
     742:	88 23       	and	r24, r24
     744:	2c f4       	brge	.+10     	; 0x750 <__vector_16+0x29a>
		__ticks = 1;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	98 8f       	std	Y+24, r25	; 0x18
     74c:	8f 8b       	std	Y+23, r24	; 0x17
     74e:	3f c0       	rjmp	.+126    	; 0x7ce <__vector_16+0x318>
	else if (__tmp > 65535)
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	3f ef       	ldi	r19, 0xFF	; 255
     754:	4f e7       	ldi	r20, 0x7F	; 127
     756:	57 e4       	ldi	r21, 0x47	; 71
     758:	6b 89       	ldd	r22, Y+19	; 0x13
     75a:	7c 89       	ldd	r23, Y+20	; 0x14
     75c:	8d 89       	ldd	r24, Y+21	; 0x15
     75e:	9e 89       	ldd	r25, Y+22	; 0x16
     760:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
     764:	18 16       	cp	r1, r24
     766:	4c f5       	brge	.+82     	; 0x7ba <__vector_16+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	40 e2       	ldi	r20, 0x20	; 32
     76e:	51 e4       	ldi	r21, 0x41	; 65
     770:	6f 85       	ldd	r22, Y+15	; 0x0f
     772:	78 89       	ldd	r23, Y+16	; 0x10
     774:	89 89       	ldd	r24, Y+17	; 0x11
     776:	9a 89       	ldd	r25, Y+18	; 0x12
     778:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
     77c:	dc 01       	movw	r26, r24
     77e:	cb 01       	movw	r24, r22
     780:	bc 01       	movw	r22, r24
     782:	cd 01       	movw	r24, r26
     784:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
     788:	dc 01       	movw	r26, r24
     78a:	cb 01       	movw	r24, r22
     78c:	98 8f       	std	Y+24, r25	; 0x18
     78e:	8f 8b       	std	Y+23, r24	; 0x17
     790:	0f c0       	rjmp	.+30     	; 0x7b0 <__vector_16+0x2fa>
     792:	80 e9       	ldi	r24, 0x90	; 144
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	9a 8f       	std	Y+26, r25	; 0x1a
     798:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     79a:	89 8d       	ldd	r24, Y+25	; 0x19
     79c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	f1 f7       	brne	.-4      	; 0x79e <__vector_16+0x2e8>
     7a2:	9a 8f       	std	Y+26, r25	; 0x1a
     7a4:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a6:	8f 89       	ldd	r24, Y+23	; 0x17
     7a8:	98 8d       	ldd	r25, Y+24	; 0x18
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	98 8f       	std	Y+24, r25	; 0x18
     7ae:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b0:	8f 89       	ldd	r24, Y+23	; 0x17
     7b2:	98 8d       	ldd	r25, Y+24	; 0x18
     7b4:	89 2b       	or	r24, r25
     7b6:	69 f7       	brne	.-38     	; 0x792 <__vector_16+0x2dc>
     7b8:	14 c0       	rjmp	.+40     	; 0x7e2 <__vector_16+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7ba:	6b 89       	ldd	r22, Y+19	; 0x13
     7bc:	7c 89       	ldd	r23, Y+20	; 0x14
     7be:	8d 89       	ldd	r24, Y+21	; 0x15
     7c0:	9e 89       	ldd	r25, Y+22	; 0x16
     7c2:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
     7c6:	dc 01       	movw	r26, r24
     7c8:	cb 01       	movw	r24, r22
     7ca:	98 8f       	std	Y+24, r25	; 0x18
     7cc:	8f 8b       	std	Y+23, r24	; 0x17
     7ce:	8f 89       	ldd	r24, Y+23	; 0x17
     7d0:	98 8d       	ldd	r25, Y+24	; 0x18
     7d2:	9c 8f       	std	Y+28, r25	; 0x1c
     7d4:	8b 8f       	std	Y+27, r24	; 0x1b
     7d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	f1 f7       	brne	.-4      	; 0x7da <__vector_16+0x324>
     7de:	9c 8f       	std	Y+28, r25	; 0x1c
     7e0:	8b 8f       	std	Y+27, r24	; 0x1b
		{
			_delay_ms(200);	//이중 입력 방지를 위한 딜레이 수정하고 싶은 부분
			Command(ALLCLR);
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	0c d5       	rcall	.+2584   	; 0x11fe <Command>
			input[input_spot] = '\0';
     7e6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <input_spot.1986>
     7ea:	08 2e       	mov	r0, r24
     7ec:	00 0c       	add	r0, r0
     7ee:	99 0b       	sbc	r25, r25
     7f0:	8c 5c       	subi	r24, 0xCC	; 204
     7f2:	9e 4f       	sbci	r25, 0xFE	; 254
     7f4:	fc 01       	movw	r30, r24
     7f6:	10 82       	st	Z, r1
			if(strcmp(password, input) == 0)	//맞으면 열려있는 상태로 전환
     7f8:	64 e3       	ldi	r22, 0x34	; 52
     7fa:	71 e0       	ldi	r23, 0x01	; 1
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 e5 15 	call	0x2bca	; 0x2bca <strcmp>
     804:	89 2b       	or	r24, r25
     806:	59 f4       	brne	.+22     	; 0x81e <__vector_16+0x368>
			{
				state = open;
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
				input_spot = 0;
     80e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <input_spot.1986>
				LCD_String("OPEN");
     812:	80 e1       	ldi	r24, 0x10	; 16
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	c8 d4       	rcall	.+2448   	; 0x11a8 <LCD_String>
				Command(LINE2);
     818:	80 ec       	ldi	r24, 0xC0	; 192
     81a:	f1 d4       	rcall	.+2530   	; 0x11fe <Command>
     81c:	d7 c1       	rjmp	.+942    	; 0xbcc <__vector_16+0x716>
			ch = 0;	//입력값 초기화
			_delay_ms(200);	//이중 입력 방지를 위한 딜레이 수정하고 싶은 부분
		}
	}
	
}
     81e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <input_spot.1986>
				Command(LINE2);
			}
			else  //틀리면 초기화
			{
				input_spot = 0;
				LCD_String("PW :");
     822:	8b e0       	ldi	r24, 0x0B	; 11
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	c0 d4       	rcall	.+2432   	; 0x11a8 <LCD_String>
				LCD_String(password);
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	bd d4       	rcall	.+2426   	; 0x11a8 <LCD_String>
				Command(LINE2);
     82e:	80 ec       	ldi	r24, 0xC0	; 192
     830:	e6 d4       	rcall	.+2508   	; 0x11fe <Command>
     832:	cc c1       	rjmp	.+920    	; 0xbcc <__vector_16+0x716>
			}


		}
		else if(ch == 'N')	//취소버튼 초기화
     834:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
     838:	8e 34       	cpi	r24, 0x4E	; 78
		{
			Command(ALLCLR);
     83a:	59 f4       	brne	.+22     	; 0x852 <__vector_16+0x39c>
     83c:	81 e0       	ldi	r24, 0x01	; 1
			LCD_String("PW :");
     83e:	df d4       	rcall	.+2494   	; 0x11fe <Command>
     840:	8b e0       	ldi	r24, 0x0B	; 11
     842:	91 e0       	ldi	r25, 0x01	; 1
			LCD_String(password);
     844:	b1 d4       	rcall	.+2402   	; 0x11a8 <LCD_String>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	ae d4       	rcall	.+2396   	; 0x11a8 <LCD_String>
			Command(LINE2);
     84c:	80 ec       	ldi	r24, 0xC0	; 192
     84e:	d7 d4       	rcall	.+2478   	; 0x11fe <Command>
     850:	bd c1       	rjmp	.+890    	; 0xbcc <__vector_16+0x716>
			ch = 0;	//입력값 초기화
			_delay_ms(200);	//이중 입력 방지를 위한 딜레이 수정하고 싶은 부분
		}
	}
	
}
     852:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
			Command(ALLCLR);
			LCD_String("PW :");
			LCD_String(password);
			Command(LINE2);
		}
		else if(ch != 0)	//앞에경우와 가만히 있는경우(ch = 0) 제외하면 비밀번호 입력
     856:	88 23       	and	r24, r24
     858:	09 f4       	brne	.+2      	; 0x85c <__vector_16+0x3a6>
		{
			
			if(input_spot == 10)	//입력자리가 11번째일때 다시 1번째 자리로
     85a:	b8 c1       	rjmp	.+880    	; 0xbcc <__vector_16+0x716>
     85c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <input_spot.1986>
			{
				Command(ALLCLR);
     860:	8a 30       	cpi	r24, 0x0A	; 10
     862:	61 f4       	brne	.+24     	; 0x87c <__vector_16+0x3c6>
     864:	81 e0       	ldi	r24, 0x01	; 1
				LCD_String("PW :");
     866:	cb d4       	rcall	.+2454   	; 0x11fe <Command>
     868:	8b e0       	ldi	r24, 0x0B	; 11
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	9d d4       	rcall	.+2362   	; 0x11a8 <LCD_String>
				LCD_String(password);
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	9a d4       	rcall	.+2356   	; 0x11a8 <LCD_String>
     874:	80 ec       	ldi	r24, 0xC0	; 192
				Command(LINE2);
     876:	c3 d4       	rcall	.+2438   	; 0x11fe <Command>
     878:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <input_spot.1986>
				input_spot = 0;	//입력자리 초기화
     87c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
			}
			Data(ch);	//입력한거 화면표시
     880:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <Data>
     884:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <input_spot.1986>
			input[input_spot] = ch;	//입력값 추가
     888:	08 2e       	mov	r0, r24
     88a:	00 0c       	add	r0, r0
     88c:	99 0b       	sbc	r25, r25
     88e:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <__data_end>
     892:	8c 5c       	subi	r24, 0xCC	; 204
     894:	9e 4f       	sbci	r25, 0xFE	; 254
     896:	fc 01       	movw	r30, r24
     898:	20 83       	st	Z, r18
     89a:	43 e0       	ldi	r20, 0x03	; 3
			SendCommand01(0x0F, 0x01, 0x03);	//입력될때 mp3 스위치음
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	8f e0       	ldi	r24, 0x0F	; 15
     8a0:	ab dc       	rcall	.-1706   	; 0x1f8 <SendCommand01>
     8a2:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <input_spot.1986>
			input_spot++;	//입력자리 증가
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <input_spot.1986>
     8ac:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
			ch = 0;	//입력값 초기화
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a8 e4       	ldi	r26, 0x48	; 72
     8b6:	b3 e4       	ldi	r27, 0x43	; 67
     8b8:	8f 83       	std	Y+7, r24	; 0x07
     8ba:	98 87       	std	Y+8, r25	; 0x08
     8bc:	a9 87       	std	Y+9, r26	; 0x09
     8be:	ba 87       	std	Y+10, r27	; 0x0a
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8c4:	4a e7       	ldi	r20, 0x7A	; 122
     8c6:	55 e4       	ldi	r21, 0x45	; 69
     8c8:	6f 81       	ldd	r22, Y+7	; 0x07
     8ca:	78 85       	ldd	r23, Y+8	; 0x08
     8cc:	89 85       	ldd	r24, Y+9	; 0x09
     8ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d0:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
     8d4:	dc 01       	movw	r26, r24
     8d6:	cb 01       	movw	r24, r22
     8d8:	8d 8f       	std	Y+29, r24	; 0x1d
     8da:	9e 8f       	std	Y+30, r25	; 0x1e
     8dc:	af 8f       	std	Y+31, r26	; 0x1f
     8de:	b8 a3       	std	Y+32, r27	; 0x20
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     8e4:	40 e8       	ldi	r20, 0x80	; 128
     8e6:	5f e3       	ldi	r21, 0x3F	; 63
     8e8:	6d 8d       	ldd	r22, Y+29	; 0x1d
     8ea:	7e 8d       	ldd	r23, Y+30	; 0x1e
     8ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8ee:	98 a1       	ldd	r25, Y+32	; 0x20
     8f0:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__cmpsf2>
     8f4:	88 23       	and	r24, r24
     8f6:	2c f4       	brge	.+10     	; 0x902 <__vector_16+0x44c>
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     8fc:	9a a3       	std	Y+34, r25	; 0x22
     8fe:	89 a3       	std	Y+33, r24	; 0x21
     900:	3f c0       	rjmp	.+126    	; 0x980 <__vector_16+0x4ca>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     906:	4f e7       	ldi	r20, 0x7F	; 127
     908:	57 e4       	ldi	r21, 0x47	; 71
     90a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     90c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     90e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     910:	98 a1       	ldd	r25, Y+32	; 0x20
     912:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
     916:	18 16       	cp	r1, r24
     918:	4c f5       	brge	.+82     	; 0x96c <__vector_16+0x4b6>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     91e:	40 e2       	ldi	r20, 0x20	; 32
     920:	51 e4       	ldi	r21, 0x41	; 65
     922:	6f 81       	ldd	r22, Y+7	; 0x07
     924:	78 85       	ldd	r23, Y+8	; 0x08
     926:	89 85       	ldd	r24, Y+9	; 0x09
     928:	9a 85       	ldd	r25, Y+10	; 0x0a
     92a:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
     92e:	dc 01       	movw	r26, r24
     930:	cb 01       	movw	r24, r22
     932:	bc 01       	movw	r22, r24
     934:	cd 01       	movw	r24, r26
     936:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	9a a3       	std	Y+34, r25	; 0x22
     940:	89 a3       	std	Y+33, r24	; 0x21
     942:	0f c0       	rjmp	.+30     	; 0x962 <__vector_16+0x4ac>
     944:	80 e9       	ldi	r24, 0x90	; 144
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	9c a3       	std	Y+36, r25	; 0x24
     94a:	8b a3       	std	Y+35, r24	; 0x23
     94c:	8b a1       	ldd	r24, Y+35	; 0x23
     94e:	9c a1       	ldd	r25, Y+36	; 0x24
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	f1 f7       	brne	.-4      	; 0x950 <__vector_16+0x49a>
     954:	9c a3       	std	Y+36, r25	; 0x24
     956:	8b a3       	std	Y+35, r24	; 0x23
     958:	89 a1       	ldd	r24, Y+33	; 0x21
     95a:	9a a1       	ldd	r25, Y+34	; 0x22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	9a a3       	std	Y+34, r25	; 0x22
     960:	89 a3       	std	Y+33, r24	; 0x21
     962:	89 a1       	ldd	r24, Y+33	; 0x21
     964:	9a a1       	ldd	r25, Y+34	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     966:	89 2b       	or	r24, r25
     968:	69 f7       	brne	.-38     	; 0x944 <__vector_16+0x48e>
     96a:	30 c1       	rjmp	.+608    	; 0xbcc <__vector_16+0x716>
     96c:	6d 8d       	ldd	r22, Y+29	; 0x1d
			ch = 0;	//입력값 초기화
			_delay_ms(200);	//이중 입력 방지를 위한 딜레이 수정하고 싶은 부분
		}
	}
	
}
     96e:	7e 8d       	ldd	r23, Y+30	; 0x1e
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     970:	8f 8d       	ldd	r24, Y+31	; 0x1f
     972:	98 a1       	ldd	r25, Y+32	; 0x20
     974:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	9a a3       	std	Y+34, r25	; 0x22
     97e:	89 a3       	std	Y+33, r24	; 0x21
     980:	89 a1       	ldd	r24, Y+33	; 0x21
     982:	9a a1       	ldd	r25, Y+34	; 0x22
     984:	9e a3       	std	Y+38, r25	; 0x26
     986:	8d a3       	std	Y+37, r24	; 0x25
     988:	8d a1       	ldd	r24, Y+37	; 0x25
     98a:	9e a1       	ldd	r25, Y+38	; 0x26
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <__vector_16+0x4d6>
     990:	9e a3       	std	Y+38, r25	; 0x26
     992:	8d a3       	std	Y+37, r24	; 0x25
     994:	1b c1       	rjmp	.+566    	; 0xbcc <__vector_16+0x716>
     996:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <state>
			ch = 0;	//입력값 초기화
			_delay_ms(200);	//이중 입력 방지를 위한 딜레이 수정하고 싶은 부분
		}
	}

	else if(state == open)	//열려있는 상태
     99a:	81 30       	cpi	r24, 0x01	; 1
     99c:	09 f0       	breq	.+2      	; 0x9a0 <__vector_16+0x4ea>
     99e:	16 c1       	rjmp	.+556    	; 0xbcc <__vector_16+0x716>
     9a0:	8a e4       	ldi	r24, 0x4A	; 74
     9a2:	90 e0       	ldi	r25, 0x00	; 0
	{
		OCR1A = 4000;	//2ms 펄스, 서보모터 제어
     9a4:	20 ea       	ldi	r18, 0xA0	; 160
     9a6:	3f e0       	ldi	r19, 0x0F	; 15
     9a8:	fc 01       	movw	r30, r24
     9aa:	31 83       	std	Z+1, r19	; 0x01
     9ac:	20 83       	st	Z, r18
     9ae:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
		if(ch == 'Y')	//새로운 비밀번호 입력 완료
     9b2:	89 35       	cpi	r24, 0x59	; 89
     9b4:	09 f0       	breq	.+2      	; 0x9b8 <__vector_16+0x502>
     9b6:	56 c0       	rjmp	.+172    	; 0xa64 <__vector_16+0x5ae>
     9b8:	1b 82       	std	Y+3, r1	; 0x03
     9ba:	1a 82       	std	Y+2, r1	; 0x02
		{
			
			for(int i = 0; i <= input_spot; i++)
     9bc:	11 c0       	rjmp	.+34     	; 0x9e0 <__vector_16+0x52a>
     9be:	8a 81       	ldd	r24, Y+2	; 0x02
     9c0:	9b 81       	ldd	r25, Y+3	; 0x03
			{
				password[i] = new_password[i];	//새로운 비밀번호로 갱신
     9c2:	8d 5d       	subi	r24, 0xDD	; 221
     9c4:	9e 4f       	sbci	r25, 0xFE	; 254
     9c6:	fc 01       	movw	r30, r24
     9c8:	20 81       	ld	r18, Z
     9ca:	8a 81       	ldd	r24, Y+2	; 0x02
     9cc:	9b 81       	ldd	r25, Y+3	; 0x03
     9ce:	80 50       	subi	r24, 0x00	; 0
     9d0:	9f 4f       	sbci	r25, 0xFF	; 255
     9d2:	fc 01       	movw	r30, r24
     9d4:	20 83       	st	Z, r18
     9d6:	8a 81       	ldd	r24, Y+2	; 0x02
     9d8:	9b 81       	ldd	r25, Y+3	; 0x03
	{
		OCR1A = 4000;	//2ms 펄스, 서보모터 제어
		if(ch == 'Y')	//새로운 비밀번호 입력 완료
		{
			
			for(int i = 0; i <= input_spot; i++)
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	9b 83       	std	Y+3, r25	; 0x03
     9de:	8a 83       	std	Y+2, r24	; 0x02
     9e0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <input_spot.1986>
     9e4:	28 2f       	mov	r18, r24
     9e6:	88 0f       	add	r24, r24
     9e8:	33 0b       	sbc	r19, r19
     9ea:	8a 81       	ldd	r24, Y+2	; 0x02
     9ec:	9b 81       	ldd	r25, Y+3	; 0x03
     9ee:	28 17       	cp	r18, r24
     9f0:	39 07       	cpc	r19, r25
     9f2:	2c f7       	brge	.-54     	; 0x9be <__vector_16+0x508>
     9f4:	1d 82       	std	Y+5, r1	; 0x05
     9f6:	1c 82       	std	Y+4, r1	; 0x04
			{
				password[i] = new_password[i];	//새로운 비밀번호로 갱신
			}
			for(int i = 0; i < 11; i++)
     9f8:	0b c0       	rjmp	.+22     	; 0xa10 <__vector_16+0x55a>
     9fa:	8c 81       	ldd	r24, Y+4	; 0x04
     9fc:	9d 81       	ldd	r25, Y+5	; 0x05
			{
				new_password[i] = 0;	//새로운 비밀번호 받는 자리 초기화 마지막 Null값이 되게
     9fe:	8d 5d       	subi	r24, 0xDD	; 221
     a00:	9e 4f       	sbci	r25, 0xFE	; 254
     a02:	fc 01       	movw	r30, r24
     a04:	10 82       	st	Z, r1
     a06:	8c 81       	ldd	r24, Y+4	; 0x04
     a08:	9d 81       	ldd	r25, Y+5	; 0x05
			
			for(int i = 0; i <= input_spot; i++)
			{
				password[i] = new_password[i];	//새로운 비밀번호로 갱신
			}
			for(int i = 0; i < 11; i++)
     a0a:	01 96       	adiw	r24, 0x01	; 1
     a0c:	9d 83       	std	Y+5, r25	; 0x05
     a0e:	8c 83       	std	Y+4, r24	; 0x04
     a10:	8c 81       	ldd	r24, Y+4	; 0x04
     a12:	9d 81       	ldd	r25, Y+5	; 0x05
     a14:	0b 97       	sbiw	r24, 0x0b	; 11
     a16:	8c f3       	brlt	.-30     	; 0x9fa <__vector_16+0x544>
     a18:	1e 82       	std	Y+6, r1	; 0x06
     a1a:	12 c0       	rjmp	.+36     	; 0xa40 <__vector_16+0x58a>
			{
				new_password[i] = 0;	//새로운 비밀번호 받는 자리 초기화 마지막 Null값이 되게
			}
			for(uint8_t i = 0; i < 11; i++)
     a1c:	8e 81       	ldd	r24, Y+6	; 0x06
     a1e:	88 2f       	mov	r24, r24
			{
				eeprom_update_byte(EEPROM + i,password[i]);	//새로운 비밀번호 eeprom으로 저장
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	80 50       	subi	r24, 0x00	; 0
     a24:	9f 4f       	sbci	r25, 0xFF	; 255
     a26:	fc 01       	movw	r30, r24
     a28:	80 81       	ld	r24, Z
     a2a:	28 2f       	mov	r18, r24
     a2c:	8e 81       	ldd	r24, Y+6	; 0x06
     a2e:	88 2f       	mov	r24, r24
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	62 2f       	mov	r22, r18
     a36:	0e 94 f6 15 	call	0x2bec	; 0x2bec <eeprom_update_byte>
     a3a:	8e 81       	ldd	r24, Y+6	; 0x06
			}
			for(int i = 0; i < 11; i++)
			{
				new_password[i] = 0;	//새로운 비밀번호 받는 자리 초기화 마지막 Null값이 되게
			}
			for(uint8_t i = 0; i < 11; i++)
     a3c:	8f 5f       	subi	r24, 0xFF	; 255
     a3e:	8e 83       	std	Y+6, r24	; 0x06
     a40:	8e 81       	ldd	r24, Y+6	; 0x06
     a42:	8b 30       	cpi	r24, 0x0B	; 11
			{
				eeprom_update_byte(EEPROM + i,password[i]);	//새로운 비밀번호 eeprom으로 저장
			}

			Command(ALLCLR);	//화면 초기화
     a44:	58 f3       	brcs	.-42     	; 0xa1c <__vector_16+0x566>
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	da d3       	rcall	.+1972   	; 0x11fe <Command>
			state = close;	//새로운 비밀번호 입력후 다시 닫힌상태로
     a4a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <state>
			
			input_spot = 0;	//입력자리 초기화
     a4e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <input_spot.1986>
			LCD_String("PW :");	//닫힌상태 화면 표시
     a52:	8b e0       	ldi	r24, 0x0B	; 11
     a54:	91 e0       	ldi	r25, 0x01	; 1
			LCD_String(password);
     a56:	a8 d3       	rcall	.+1872   	; 0x11a8 <LCD_String>
     a58:	80 e0       	ldi	r24, 0x00	; 0
			Command(LINE2);
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	a5 d3       	rcall	.+1866   	; 0x11a8 <LCD_String>
     a5e:	80 ec       	ldi	r24, 0xC0	; 192
			ch = 0;	//입력값 초기화
			_delay_ms(200);	//이중 입력 방지를 위한 딜레이 수정하고 싶은 부분
		}
	}
	
}
     a60:	ce d3       	rcall	.+1948   	; 0x11fe <Command>
			input_spot = 0;	//입력자리 초기화
			LCD_String("PW :");	//닫힌상태 화면 표시
			LCD_String(password);
			Command(LINE2);
		}
		else if(ch == 'N')	//취소버튼
     a62:	b4 c0       	rjmp	.+360    	; 0xbcc <__vector_16+0x716>
     a64:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
     a68:	8e 34       	cpi	r24, 0x4E	; 78
		{
			Command(ALLCLR);
     a6a:	79 f4       	brne	.+30     	; 0xa8a <__vector_16+0x5d4>
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	c7 d3       	rcall	.+1934   	; 0x11fe <Command>
			LCD_String("PW :");
     a70:	8b e0       	ldi	r24, 0x0B	; 11
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	99 d3       	rcall	.+1842   	; 0x11a8 <LCD_String>
			LCD_String(password);
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	96 d3       	rcall	.+1836   	; 0x11a8 <LCD_String>
			Command(LINE2);
     a7c:	80 ec       	ldi	r24, 0xC0	; 192
     a7e:	bf d3       	rcall	.+1918   	; 0x11fe <Command>
			state = close;	//닫힌상태로
     a80:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <state>
			input_spot = 0;	//입력자리 초기화
     a84:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <input_spot.1986>
		}
		else if(ch != 0)
     a88:	a1 c0       	rjmp	.+322    	; 0xbcc <__vector_16+0x716>
     a8a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
     a8e:	88 23       	and	r24, r24
     a90:	09 f4       	brne	.+2      	; 0xa94 <__vector_16+0x5de>
		{
			
			if(input_spot == 10)	//입력자리 초기화
     a92:	9c c0       	rjmp	.+312    	; 0xbcc <__vector_16+0x716>
     a94:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <input_spot.1986>
     a98:	8a 30       	cpi	r24, 0x0A	; 10
			{
				Command(ALLCLR);
     a9a:	61 f4       	brne	.+24     	; 0xab4 <__vector_16+0x5fe>
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	af d3       	rcall	.+1886   	; 0x11fe <Command>
				LCD_String("PW :");
     aa0:	8b e0       	ldi	r24, 0x0B	; 11
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	81 d3       	rcall	.+1794   	; 0x11a8 <LCD_String>
     aa6:	80 e0       	ldi	r24, 0x00	; 0
				LCD_String(password);
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	7e d3       	rcall	.+1788   	; 0x11a8 <LCD_String>
     aac:	80 ec       	ldi	r24, 0xC0	; 192
				Command(LINE2);
     aae:	a7 d3       	rcall	.+1870   	; 0x11fe <Command>
     ab0:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <input_spot.1986>
				input_spot = 0;
     ab4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
			}
			Data(ch);	//입력한거 화면표시
     ab8:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <Data>
     abc:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <input_spot.1986>
			new_password[input_spot] = ch;	//입력값 새로운 비밀번호에 추가
     ac0:	08 2e       	mov	r0, r24
     ac2:	00 0c       	add	r0, r0
     ac4:	99 0b       	sbc	r25, r25
     ac6:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <__data_end>
     aca:	8d 5d       	subi	r24, 0xDD	; 221
     acc:	9e 4f       	sbci	r25, 0xFE	; 254
     ace:	fc 01       	movw	r30, r24
     ad0:	20 83       	st	Z, r18
     ad2:	43 e0       	ldi	r20, 0x03	; 3
     ad4:	61 e0       	ldi	r22, 0x01	; 1
			SendCommand01(0x0F, 0x01, 0x03);	//입력될때 mp3 스위치 음
     ad6:	8f e0       	ldi	r24, 0x0F	; 15
     ad8:	8f db       	rcall	.-2274   	; 0x1f8 <SendCommand01>
     ada:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <input_spot.1986>
     ade:	8f 5f       	subi	r24, 0xFF	; 255
			input_spot++;	//입력자리 증가
     ae0:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <input_spot.1986>
     ae4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
			ch = 0;	//입력값 초기화
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	a8 e4       	ldi	r26, 0x48	; 72
     aee:	b3 e4       	ldi	r27, 0x43	; 67
     af0:	8b 87       	std	Y+11, r24	; 0x0b
     af2:	9c 87       	std	Y+12, r25	; 0x0c
     af4:	ad 87       	std	Y+13, r26	; 0x0d
     af6:	be 87       	std	Y+14, r27	; 0x0e
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	4a e7       	ldi	r20, 0x7A	; 122

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     afe:	55 e4       	ldi	r21, 0x45	; 69
     b00:	6b 85       	ldd	r22, Y+11	; 0x0b
     b02:	7c 85       	ldd	r23, Y+12	; 0x0c
     b04:	8d 85       	ldd	r24, Y+13	; 0x0d
     b06:	9e 85       	ldd	r25, Y+14	; 0x0e
     b08:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
     b0c:	dc 01       	movw	r26, r24
     b0e:	cb 01       	movw	r24, r22
     b10:	8f a3       	std	Y+39, r24	; 0x27
     b12:	98 a7       	std	Y+40, r25	; 0x28
     b14:	a9 a7       	std	Y+41, r26	; 0x29
     b16:	ba a7       	std	Y+42, r27	; 0x2a
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
     b1e:	5f e3       	ldi	r21, 0x3F	; 63
     b20:	6f a1       	ldd	r22, Y+39	; 0x27
     b22:	78 a5       	ldd	r23, Y+40	; 0x28
     b24:	89 a5       	ldd	r24, Y+41	; 0x29
     b26:	9a a5       	ldd	r25, Y+42	; 0x2a
     b28:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__cmpsf2>
     b2c:	88 23       	and	r24, r24
     b2e:	2c f4       	brge	.+10     	; 0xb3a <__vector_16+0x684>
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	9c a7       	std	Y+44, r25	; 0x2c
		__ticks = 1;
     b36:	8b a7       	std	Y+43, r24	; 0x2b
     b38:	3f c0       	rjmp	.+126    	; 0xbb8 <__vector_16+0x702>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	3f ef       	ldi	r19, 0xFF	; 255
     b3e:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
     b40:	57 e4       	ldi	r21, 0x47	; 71
     b42:	6f a1       	ldd	r22, Y+39	; 0x27
     b44:	78 a5       	ldd	r23, Y+40	; 0x28
     b46:	89 a5       	ldd	r24, Y+41	; 0x29
     b48:	9a a5       	ldd	r25, Y+42	; 0x2a
     b4a:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
     b4e:	18 16       	cp	r1, r24
     b50:	4c f5       	brge	.+82     	; 0xba4 <__vector_16+0x6ee>
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b58:	51 e4       	ldi	r21, 0x41	; 65
     b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b60:	9e 85       	ldd	r25, Y+14	; 0x0e
     b62:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
     b66:	dc 01       	movw	r26, r24
     b68:	cb 01       	movw	r24, r22
     b6a:	bc 01       	movw	r22, r24
     b6c:	cd 01       	movw	r24, r26
     b6e:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
     b72:	dc 01       	movw	r26, r24
     b74:	cb 01       	movw	r24, r22
     b76:	9c a7       	std	Y+44, r25	; 0x2c
     b78:	8b a7       	std	Y+43, r24	; 0x2b
     b7a:	0f c0       	rjmp	.+30     	; 0xb9a <__vector_16+0x6e4>
     b7c:	80 e9       	ldi	r24, 0x90	; 144
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	9e a7       	std	Y+46, r25	; 0x2e
     b82:	8d a7       	std	Y+45, r24	; 0x2d
     b84:	8d a5       	ldd	r24, Y+45	; 0x2d
     b86:	9e a5       	ldd	r25, Y+46	; 0x2e
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <__vector_16+0x6d2>
     b8c:	9e a7       	std	Y+46, r25	; 0x2e
     b8e:	8d a7       	std	Y+45, r24	; 0x2d
     b90:	8b a5       	ldd	r24, Y+43	; 0x2b
     b92:	9c a5       	ldd	r25, Y+44	; 0x2c
     b94:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b96:	9c a7       	std	Y+44, r25	; 0x2c
     b98:	8b a7       	std	Y+43, r24	; 0x2b
     b9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     b9c:	9c a5       	ldd	r25, Y+44	; 0x2c
     b9e:	89 2b       	or	r24, r25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ba0:	69 f7       	brne	.-38     	; 0xb7c <__vector_16+0x6c6>
     ba2:	14 c0       	rjmp	.+40     	; 0xbcc <__vector_16+0x716>
     ba4:	6f a1       	ldd	r22, Y+39	; 0x27
     ba6:	78 a5       	ldd	r23, Y+40	; 0x28
			_delay_ms(200);	//이중 입력 방지를 위한 딜레이 수정하고 싶은 부분
		}
	}
	
}
     ba8:	89 a5       	ldd	r24, Y+41	; 0x29
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     baa:	9a a5       	ldd	r25, Y+42	; 0x2a
     bac:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
     bb0:	dc 01       	movw	r26, r24
     bb2:	cb 01       	movw	r24, r22
     bb4:	9c a7       	std	Y+44, r25	; 0x2c
     bb6:	8b a7       	std	Y+43, r24	; 0x2b
     bb8:	8b a5       	ldd	r24, Y+43	; 0x2b
     bba:	9c a5       	ldd	r25, Y+44	; 0x2c
     bbc:	98 ab       	std	Y+48, r25	; 0x30
     bbe:	8f a7       	std	Y+47, r24	; 0x2f
     bc0:	8f a5       	ldd	r24, Y+47	; 0x2f
     bc2:	98 a9       	ldd	r25, Y+48	; 0x30
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	f1 f7       	brne	.-4      	; 0xbc4 <__vector_16+0x70e>
     bc8:	98 ab       	std	Y+48, r25	; 0x30
     bca:	8f a7       	std	Y+47, r24	; 0x2f
     bcc:	00 00       	nop
     bce:	e0 96       	adiw	r28, 0x30	; 48
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	ff 91       	pop	r31
     be0:	ef 91       	pop	r30
     be2:	bf 91       	pop	r27
     be4:	af 91       	pop	r26
     be6:	9f 91       	pop	r25
     be8:	8f 91       	pop	r24
     bea:	7f 91       	pop	r23
     bec:	6f 91       	pop	r22
     bee:	5f 91       	pop	r21
     bf0:	4f 91       	pop	r20
     bf2:	3f 91       	pop	r19
     bf4:	2f 91       	pop	r18
     bf6:	0f 90       	pop	r0
     bf8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     bfc:	0f 90       	pop	r0
     bfe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c02:	0f 90       	pop	r0
     c04:	1f 90       	pop	r1
     c06:	18 95       	reti

00000c08 <main>:
     c08:	0f 93       	push	r16
     c0a:	1f 93       	push	r17
     c0c:	cf 93       	push	r28



int main(void)
{
     c0e:	df 93       	push	r29
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	2f 97       	sbiw	r28, 0x0f	; 15
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
	char cmd;

	UART_Init();	//UART 초기화
     c20:	54 da       	rcall	.-2904   	; 0xca <UART_Init>

	SendCommand(CMD_TF);	//mp3 준비
     c22:	89 e0       	ldi	r24, 0x09	; 9
     c24:	9f da       	rcall	.-2754   	; 0x164 <SendCommand>
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 ea       	ldi	r26, 0xA0	; 160
     c2c:	b1 e4       	ldi	r27, 0x41	; 65
     c2e:	8a 83       	std	Y+2, r24	; 0x02
     c30:	9b 83       	std	Y+3, r25	; 0x03
     c32:	ac 83       	std	Y+4, r26	; 0x04
     c34:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	4a e7       	ldi	r20, 0x7A	; 122
     c3c:	55 e4       	ldi	r21, 0x45	; 69
     c3e:	6a 81       	ldd	r22, Y+2	; 0x02
     c40:	7b 81       	ldd	r23, Y+3	; 0x03
     c42:	8c 81       	ldd	r24, Y+4	; 0x04
     c44:	9d 81       	ldd	r25, Y+5	; 0x05
     c46:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	8e 83       	std	Y+6, r24	; 0x06
     c50:	9f 83       	std	Y+7, r25	; 0x07
     c52:	a8 87       	std	Y+8, r26	; 0x08
     c54:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	40 e8       	ldi	r20, 0x80	; 128
     c5c:	5f e3       	ldi	r21, 0x3F	; 63
     c5e:	6e 81       	ldd	r22, Y+6	; 0x06
     c60:	7f 81       	ldd	r23, Y+7	; 0x07
     c62:	88 85       	ldd	r24, Y+8	; 0x08
     c64:	99 85       	ldd	r25, Y+9	; 0x09
     c66:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__cmpsf2>
     c6a:	88 23       	and	r24, r24
     c6c:	2c f4       	brge	.+10     	; 0xc78 <main+0x70>
		__ticks = 1;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	9b 87       	std	Y+11, r25	; 0x0b
     c74:	8a 87       	std	Y+10, r24	; 0x0a
     c76:	3f c0       	rjmp	.+126    	; 0xcf6 <main+0xee>
	else if (__tmp > 65535)
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	3f ef       	ldi	r19, 0xFF	; 255
     c7c:	4f e7       	ldi	r20, 0x7F	; 127
     c7e:	57 e4       	ldi	r21, 0x47	; 71
     c80:	6e 81       	ldd	r22, Y+6	; 0x06
     c82:	7f 81       	ldd	r23, Y+7	; 0x07
     c84:	88 85       	ldd	r24, Y+8	; 0x08
     c86:	99 85       	ldd	r25, Y+9	; 0x09
     c88:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
     c8c:	18 16       	cp	r1, r24
     c8e:	4c f5       	brge	.+82     	; 0xce2 <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 e2       	ldi	r20, 0x20	; 32
     c96:	51 e4       	ldi	r21, 0x41	; 65
     c98:	6a 81       	ldd	r22, Y+2	; 0x02
     c9a:	7b 81       	ldd	r23, Y+3	; 0x03
     c9c:	8c 81       	ldd	r24, Y+4	; 0x04
     c9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ca0:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	bc 01       	movw	r22, r24
     caa:	cd 01       	movw	r24, r26
     cac:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	9b 87       	std	Y+11, r25	; 0x0b
     cb6:	8a 87       	std	Y+10, r24	; 0x0a
     cb8:	0f c0       	rjmp	.+30     	; 0xcd8 <main+0xd0>
     cba:	80 e9       	ldi	r24, 0x90	; 144
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	9d 87       	std	Y+13, r25	; 0x0d
     cc0:	8c 87       	std	Y+12, r24	; 0x0c
     cc2:	8c 85       	ldd	r24, Y+12	; 0x0c
     cc4:	9d 85       	ldd	r25, Y+13	; 0x0d
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <main+0xbe>
     cca:	9d 87       	std	Y+13, r25	; 0x0d
     ccc:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cce:	8a 85       	ldd	r24, Y+10	; 0x0a
     cd0:	9b 85       	ldd	r25, Y+11	; 0x0b
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	9b 87       	std	Y+11, r25	; 0x0b
     cd6:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd8:	8a 85       	ldd	r24, Y+10	; 0x0a
     cda:	9b 85       	ldd	r25, Y+11	; 0x0b
     cdc:	89 2b       	or	r24, r25
     cde:	69 f7       	brne	.-38     	; 0xcba <main+0xb2>
     ce0:	14 c0       	rjmp	.+40     	; 0xd0a <main+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce2:	6e 81       	ldd	r22, Y+6	; 0x06
     ce4:	7f 81       	ldd	r23, Y+7	; 0x07
     ce6:	88 85       	ldd	r24, Y+8	; 0x08
     ce8:	99 85       	ldd	r25, Y+9	; 0x09
     cea:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	9b 87       	std	Y+11, r25	; 0x0b
     cf4:	8a 87       	std	Y+10, r24	; 0x0a
     cf6:	8a 85       	ldd	r24, Y+10	; 0x0a
     cf8:	9b 85       	ldd	r25, Y+11	; 0x0b
     cfa:	9f 87       	std	Y+15, r25	; 0x0f
     cfc:	8e 87       	std	Y+14, r24	; 0x0e
     cfe:	8e 85       	ldd	r24, Y+14	; 0x0e
     d00:	9f 85       	ldd	r25, Y+15	; 0x0f
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	f1 f7       	brne	.-4      	; 0xd02 <main+0xfa>
     d06:	9f 87       	std	Y+15, r25	; 0x0f
     d08:	8e 87       	std	Y+14, r24	; 0x0e
	_delay_ms(20);
	//SendCommand01(0x06, 0x00, 0x0F);	//mp3 효과음 줄이기 필요하다면
	//_delay_ms(200);
	
	DDRB = 0xFF;	//이걸 안써서 한참동안 뻘짓했다...
     d0a:	87 e3       	ldi	r24, 0x37	; 55
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	2f ef       	ldi	r18, 0xFF	; 255
     d10:	fc 01       	movw	r30, r24
     d12:	20 83       	st	Z, r18
	TCCR0 = 0x07; // 일반모드, 1024분주
     d14:	83 e5       	ldi	r24, 0x53	; 83
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	27 e0       	ldi	r18, 0x07	; 7
     d1a:	fc 01       	movw	r30, r24
     d1c:	20 83       	st	Z, r18
	TCCR1A = 0b10000010;	//비교매치에서 OC1A 출력 클리어 TOP에서 셋
     d1e:	8f e4       	ldi	r24, 0x4F	; 79
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	22 e8       	ldi	r18, 0x82	; 130
     d24:	fc 01       	movw	r30, r24
     d26:	20 83       	st	Z, r18
	TCCR1B = 0b00011010;	//Mode 14(Fast PWM ICR1이 TOP을 저장하는 레지스로 사용되는 동작모드 Icn핀 차단), 8분주
     d28:	8e e4       	ldi	r24, 0x4E	; 78
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	2a e1       	ldi	r18, 0x1A	; 26
     d2e:	fc 01       	movw	r30, r24
     d30:	20 83       	st	Z, r18
	TCCR1C = 0x00;
     d32:	8a e7       	ldi	r24, 0x7A	; 122
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	fc 01       	movw	r30, r24
     d38:	10 82       	st	Z, r1
	ICR1 = 40000;	//Mode 14에서는 Top값이 ICR이므로 65536중에서 20000까지만 올라간다
     d3a:	86 e4       	ldi	r24, 0x46	; 70
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	20 e4       	ldi	r18, 0x40	; 64
     d40:	3c e9       	ldi	r19, 0x9C	; 156
     d42:	fc 01       	movw	r30, r24
     d44:	31 83       	std	Z+1, r19	; 0x01
     d46:	20 83       	st	Z, r18
	OCR1A = 2000;	//처음 high 상태였다가 20000까지 올라가는 중 1000일때 클리어 되어 20000까지 갈때까지 low상태 그래서  8분주라 20ms 1ms PWM 생성
     d48:	8a e4       	ldi	r24, 0x4A	; 74
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	20 ed       	ldi	r18, 0xD0	; 208
     d4e:	37 e0       	ldi	r19, 0x07	; 7
     d50:	fc 01       	movw	r30, r24
     d52:	31 83       	std	Z+1, r19	; 0x01
     d54:	20 83       	st	Z, r18
	TIMSK |= (1 << TOIE0); // TOIE0 = 1(오버플로우 인터럽트 인에이블)
     d56:	87 e5       	ldi	r24, 0x57	; 87
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	27 e5       	ldi	r18, 0x57	; 87
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	f9 01       	movw	r30, r18
     d60:	20 81       	ld	r18, Z
     d62:	21 60       	ori	r18, 0x01	; 1
     d64:	fc 01       	movw	r30, r24
     d66:	20 83       	st	Z, r18
	sei(); // 전역 인터럽트 인에이블 비트 I 셋
     d68:	78 94       	sei

	

	for(uint8_t i = 0; i < 11; i++)
     d6a:	19 82       	std	Y+1, r1	; 0x01
     d6c:	12 c0       	rjmp	.+36     	; 0xd92 <main+0x18a>
	{
		password[i] = eeprom_read_byte(EEPROM + i);
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	08 2f       	mov	r16, r24
     d72:	10 e0       	ldi	r17, 0x00	; 0
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	88 2f       	mov	r24, r24
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <eeprom_read_byte>
     d80:	28 2f       	mov	r18, r24
     d82:	c8 01       	movw	r24, r16
     d84:	80 50       	subi	r24, 0x00	; 0
     d86:	9f 4f       	sbci	r25, 0xFF	; 255
     d88:	fc 01       	movw	r30, r24
     d8a:	20 83       	st	Z, r18
	TIMSK |= (1 << TOIE0); // TOIE0 = 1(오버플로우 인터럽트 인에이블)
	sei(); // 전역 인터럽트 인에이블 비트 I 셋

	

	for(uint8_t i = 0; i < 11; i++)
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	8b 30       	cpi	r24, 0x0B	; 11
	{
		password[i] = eeprom_read_byte(EEPROM + i);
	}

	LCD_init();
     d96:	58 f3       	brcs	.-42     	; 0xd6e <main+0x166>
	LCD_String("PW :"); // 첫번째라인에출력
     d98:	09 d0       	rcall	.+18     	; 0xdac <LCD_init>
     d9a:	8b e0       	ldi	r24, 0x0B	; 11
     d9c:	91 e0       	ldi	r25, 0x01	; 1
	LCD_String(password);
     d9e:	04 d2       	rcall	.+1032   	; 0x11a8 <LCD_String>
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	91 e0       	ldi	r25, 0x01	; 1
	Command(LINE2);
     da4:	01 d2       	rcall	.+1026   	; 0x11a8 <LCD_String>
     da6:	80 ec       	ldi	r24, 0xC0	; 192
     da8:	2a d2       	rcall	.+1108   	; 0x11fe <Command>

	while(1);
     daa:	ff cf       	rjmp	.-2      	; 0xdaa <main+0x1a2>

00000dac <LCD_init>:
}

// LCD 초기화
void LCD_init(void)
{
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	ec 97       	sbiw	r28, 0x3c	; 60
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF; // 포트 C 출력 설정
     dc0:	84 e3       	ldi	r24, 0x34	; 52
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	2f ef       	ldi	r18, 0xFF	; 255
     dc6:	fc 01       	movw	r30, r24
     dc8:	20 83       	st	Z, r18
	PORTC = 0x0;
     dca:	85 e3       	ldi	r24, 0x35	; 53
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	fc 01       	movw	r30, r24
     dd0:	10 82       	st	Z, r1
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e7       	ldi	r26, 0x70	; 112
     dd8:	b1 e4       	ldi	r27, 0x41	; 65
     dda:	89 83       	std	Y+1, r24	; 0x01
     ddc:	9a 83       	std	Y+2, r25	; 0x02
     dde:	ab 83       	std	Y+3, r26	; 0x03
     de0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	4a e7       	ldi	r20, 0x7A	; 122
     de8:	55 e4       	ldi	r21, 0x45	; 69
     dea:	69 81       	ldd	r22, Y+1	; 0x01
     dec:	7a 81       	ldd	r23, Y+2	; 0x02
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8b ab       	std	Y+51, r24	; 0x33
     dfc:	9c ab       	std	Y+52, r25	; 0x34
     dfe:	ad ab       	std	Y+53, r26	; 0x35
     e00:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e8       	ldi	r20, 0x80	; 128
     e08:	5f e3       	ldi	r21, 0x3F	; 63
     e0a:	6b a9       	ldd	r22, Y+51	; 0x33
     e0c:	7c a9       	ldd	r23, Y+52	; 0x34
     e0e:	8d a9       	ldd	r24, Y+53	; 0x35
     e10:	9e a9       	ldd	r25, Y+54	; 0x36
     e12:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__cmpsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <LCD_init+0x78>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	98 af       	std	Y+56, r25	; 0x38
     e20:	8f ab       	std	Y+55, r24	; 0x37
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <LCD_init+0xf6>
	else if (__tmp > 65535)
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	3f ef       	ldi	r19, 0xFF	; 255
     e28:	4f e7       	ldi	r20, 0x7F	; 127
     e2a:	57 e4       	ldi	r21, 0x47	; 71
     e2c:	6b a9       	ldd	r22, Y+51	; 0x33
     e2e:	7c a9       	ldd	r23, Y+52	; 0x34
     e30:	8d a9       	ldd	r24, Y+53	; 0x35
     e32:	9e a9       	ldd	r25, Y+54	; 0x36
     e34:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <LCD_init+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e2       	ldi	r20, 0x20	; 32
     e42:	51 e4       	ldi	r21, 0x41	; 65
     e44:	69 81       	ldd	r22, Y+1	; 0x01
     e46:	7a 81       	ldd	r23, Y+2	; 0x02
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	9c 81       	ldd	r25, Y+4	; 0x04
     e4c:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	98 af       	std	Y+56, r25	; 0x38
     e62:	8f ab       	std	Y+55, r24	; 0x37
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <LCD_init+0xd8>
     e66:	80 e9       	ldi	r24, 0x90	; 144
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	9a af       	std	Y+58, r25	; 0x3a
     e6c:	89 af       	std	Y+57, r24	; 0x39
     e6e:	89 ad       	ldd	r24, Y+57	; 0x39
     e70:	9a ad       	ldd	r25, Y+58	; 0x3a
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <LCD_init+0xc6>
     e76:	9a af       	std	Y+58, r25	; 0x3a
     e78:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8f a9       	ldd	r24, Y+55	; 0x37
     e7c:	98 ad       	ldd	r25, Y+56	; 0x38
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	98 af       	std	Y+56, r25	; 0x38
     e82:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8f a9       	ldd	r24, Y+55	; 0x37
     e86:	98 ad       	ldd	r25, Y+56	; 0x38
     e88:	89 2b       	or	r24, r25
     e8a:	69 f7       	brne	.-38     	; 0xe66 <LCD_init+0xba>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <LCD_init+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	6b a9       	ldd	r22, Y+51	; 0x33
     e90:	7c a9       	ldd	r23, Y+52	; 0x34
     e92:	8d a9       	ldd	r24, Y+53	; 0x35
     e94:	9e a9       	ldd	r25, Y+54	; 0x36
     e96:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	98 af       	std	Y+56, r25	; 0x38
     ea0:	8f ab       	std	Y+55, r24	; 0x37
     ea2:	8f a9       	ldd	r24, Y+55	; 0x37
     ea4:	98 ad       	ldd	r25, Y+56	; 0x38
     ea6:	9c af       	std	Y+60, r25	; 0x3c
     ea8:	8b af       	std	Y+59, r24	; 0x3b
     eaa:	8b ad       	ldd	r24, Y+59	; 0x3b
     eac:	9c ad       	ldd	r25, Y+60	; 0x3c
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <LCD_init+0x102>
     eb2:	9c af       	std	Y+60, r25	; 0x3c
     eb4:	8b af       	std	Y+59, r24	; 0x3b
	_delay_ms(15);
	Command(0x20);
     eb6:	80 e2       	ldi	r24, 0x20	; 32
     eb8:	a2 d1       	rcall	.+836    	; 0x11fe <Command>
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	a0 ea       	ldi	r26, 0xA0	; 160
     ec0:	b0 e4       	ldi	r27, 0x40	; 64
     ec2:	8d 83       	std	Y+5, r24	; 0x05
     ec4:	9e 83       	std	Y+6, r25	; 0x06
     ec6:	af 83       	std	Y+7, r26	; 0x07
     ec8:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	4a e7       	ldi	r20, 0x7A	; 122
     ed0:	55 e4       	ldi	r21, 0x45	; 69
     ed2:	6d 81       	ldd	r22, Y+5	; 0x05
     ed4:	7e 81       	ldd	r23, Y+6	; 0x06
     ed6:	8f 81       	ldd	r24, Y+7	; 0x07
     ed8:	98 85       	ldd	r25, Y+8	; 0x08
     eda:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	89 a7       	std	Y+41, r24	; 0x29
     ee4:	9a a7       	std	Y+42, r25	; 0x2a
     ee6:	ab a7       	std	Y+43, r26	; 0x2b
     ee8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e8       	ldi	r20, 0x80	; 128
     ef0:	5f e3       	ldi	r21, 0x3F	; 63
     ef2:	69 a5       	ldd	r22, Y+41	; 0x29
     ef4:	7a a5       	ldd	r23, Y+42	; 0x2a
     ef6:	8b a5       	ldd	r24, Y+43	; 0x2b
     ef8:	9c a5       	ldd	r25, Y+44	; 0x2c
     efa:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__cmpsf2>
     efe:	88 23       	and	r24, r24
     f00:	2c f4       	brge	.+10     	; 0xf0c <LCD_init+0x160>
		__ticks = 1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	9e a7       	std	Y+46, r25	; 0x2e
     f08:	8d a7       	std	Y+45, r24	; 0x2d
     f0a:	3f c0       	rjmp	.+126    	; 0xf8a <LCD_init+0x1de>
	else if (__tmp > 65535)
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	3f ef       	ldi	r19, 0xFF	; 255
     f10:	4f e7       	ldi	r20, 0x7F	; 127
     f12:	57 e4       	ldi	r21, 0x47	; 71
     f14:	69 a5       	ldd	r22, Y+41	; 0x29
     f16:	7a a5       	ldd	r23, Y+42	; 0x2a
     f18:	8b a5       	ldd	r24, Y+43	; 0x2b
     f1a:	9c a5       	ldd	r25, Y+44	; 0x2c
     f1c:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
     f20:	18 16       	cp	r1, r24
     f22:	4c f5       	brge	.+82     	; 0xf76 <LCD_init+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e2       	ldi	r20, 0x20	; 32
     f2a:	51 e4       	ldi	r21, 0x41	; 65
     f2c:	6d 81       	ldd	r22, Y+5	; 0x05
     f2e:	7e 81       	ldd	r23, Y+6	; 0x06
     f30:	8f 81       	ldd	r24, Y+7	; 0x07
     f32:	98 85       	ldd	r25, Y+8	; 0x08
     f34:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	bc 01       	movw	r22, r24
     f3e:	cd 01       	movw	r24, r26
     f40:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	9e a7       	std	Y+46, r25	; 0x2e
     f4a:	8d a7       	std	Y+45, r24	; 0x2d
     f4c:	0f c0       	rjmp	.+30     	; 0xf6c <LCD_init+0x1c0>
     f4e:	80 e9       	ldi	r24, 0x90	; 144
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	98 ab       	std	Y+48, r25	; 0x30
     f54:	8f a7       	std	Y+47, r24	; 0x2f
     f56:	8f a5       	ldd	r24, Y+47	; 0x2f
     f58:	98 a9       	ldd	r25, Y+48	; 0x30
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <LCD_init+0x1ae>
     f5e:	98 ab       	std	Y+48, r25	; 0x30
     f60:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f62:	8d a5       	ldd	r24, Y+45	; 0x2d
     f64:	9e a5       	ldd	r25, Y+46	; 0x2e
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	9e a7       	std	Y+46, r25	; 0x2e
     f6a:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6c:	8d a5       	ldd	r24, Y+45	; 0x2d
     f6e:	9e a5       	ldd	r25, Y+46	; 0x2e
     f70:	89 2b       	or	r24, r25
     f72:	69 f7       	brne	.-38     	; 0xf4e <LCD_init+0x1a2>
     f74:	14 c0       	rjmp	.+40     	; 0xf9e <LCD_init+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f76:	69 a5       	ldd	r22, Y+41	; 0x29
     f78:	7a a5       	ldd	r23, Y+42	; 0x2a
     f7a:	8b a5       	ldd	r24, Y+43	; 0x2b
     f7c:	9c a5       	ldd	r25, Y+44	; 0x2c
     f7e:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	9e a7       	std	Y+46, r25	; 0x2e
     f88:	8d a7       	std	Y+45, r24	; 0x2d
     f8a:	8d a5       	ldd	r24, Y+45	; 0x2d
     f8c:	9e a5       	ldd	r25, Y+46	; 0x2e
     f8e:	9a ab       	std	Y+50, r25	; 0x32
     f90:	89 ab       	std	Y+49, r24	; 0x31
     f92:	89 a9       	ldd	r24, Y+49	; 0x31
     f94:	9a a9       	ldd	r25, Y+50	; 0x32
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <LCD_init+0x1ea>
     f9a:	9a ab       	std	Y+50, r25	; 0x32
     f9c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(5);
	Command(0x20);
     f9e:	80 e2       	ldi	r24, 0x20	; 32
     fa0:	2e d1       	rcall	.+604    	; 0x11fe <Command>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	a8 ec       	ldi	r26, 0xC8	; 200
     fa8:	b2 e4       	ldi	r27, 0x42	; 66
     faa:	89 87       	std	Y+9, r24	; 0x09
     fac:	9a 87       	std	Y+10, r25	; 0x0a
     fae:	ab 87       	std	Y+11, r26	; 0x0b
     fb0:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     fb2:	2b ea       	ldi	r18, 0xAB	; 171
     fb4:	3a ea       	ldi	r19, 0xAA	; 170
     fb6:	4a ea       	ldi	r20, 0xAA	; 170
     fb8:	50 e4       	ldi	r21, 0x40	; 64
     fba:	69 85       	ldd	r22, Y+9	; 0x09
     fbc:	7a 85       	ldd	r23, Y+10	; 0x0a
     fbe:	8b 85       	ldd	r24, Y+11	; 0x0b
     fc0:	9c 85       	ldd	r25, Y+12	; 0x0c
     fc2:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	8d 87       	std	Y+13, r24	; 0x0d
     fcc:	9e 87       	std	Y+14, r25	; 0x0e
     fce:	af 87       	std	Y+15, r26	; 0x0f
     fd0:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e8       	ldi	r20, 0x80	; 128
     fd8:	50 e4       	ldi	r21, 0x40	; 64
     fda:	69 85       	ldd	r22, Y+9	; 0x09
     fdc:	7a 85       	ldd	r23, Y+10	; 0x0a
     fde:	8b 85       	ldd	r24, Y+11	; 0x0b
     fe0:	9c 85       	ldd	r25, Y+12	; 0x0c
     fe2:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	89 8b       	std	Y+17, r24	; 0x11
     fec:	9a 8b       	std	Y+18, r25	; 0x12
     fee:	ab 8b       	std	Y+19, r26	; 0x13
     ff0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e8       	ldi	r20, 0x80	; 128
     ff8:	5f e3       	ldi	r21, 0x3F	; 63
     ffa:	6d 85       	ldd	r22, Y+13	; 0x0d
     ffc:	7e 85       	ldd	r23, Y+14	; 0x0e
     ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1000:	98 89       	ldd	r25, Y+16	; 0x10
    1002:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__cmpsf2>
    1006:	88 23       	and	r24, r24
    1008:	1c f4       	brge	.+6      	; 0x1010 <LCD_init+0x264>
		__ticks = 1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	8d 8b       	std	Y+21, r24	; 0x15
    100e:	b2 c0       	rjmp	.+356    	; 0x1174 <__stack+0x75>
	else if (__tmp2 > 65535)
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	3f ef       	ldi	r19, 0xFF	; 255
    1014:	4f e7       	ldi	r20, 0x7F	; 127
    1016:	57 e4       	ldi	r21, 0x47	; 71
    1018:	69 89       	ldd	r22, Y+17	; 0x11
    101a:	7a 89       	ldd	r23, Y+18	; 0x12
    101c:	8b 89       	ldd	r24, Y+19	; 0x13
    101e:	9c 89       	ldd	r25, Y+20	; 0x14
    1020:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
    1024:	18 16       	cp	r1, r24
    1026:	0c f0       	brlt	.+2      	; 0x102a <LCD_init+0x27e>
    1028:	7b c0       	rjmp	.+246    	; 0x1120 <__stack+0x21>
	{
		_delay_ms(__us / 1000.0);
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	4a e7       	ldi	r20, 0x7A	; 122
    1030:	54 e4       	ldi	r21, 0x44	; 68
    1032:	69 85       	ldd	r22, Y+9	; 0x09
    1034:	7a 85       	ldd	r23, Y+10	; 0x0a
    1036:	8b 85       	ldd	r24, Y+11	; 0x0b
    1038:	9c 85       	ldd	r25, Y+12	; 0x0c
    103a:	0e 94 75 14 	call	0x28ea	; 0x28ea <__divsf3>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	8e 8b       	std	Y+22, r24	; 0x16
    1044:	9f 8b       	std	Y+23, r25	; 0x17
    1046:	a8 8f       	std	Y+24, r26	; 0x18
    1048:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	4a e7       	ldi	r20, 0x7A	; 122
    1050:	55 e4       	ldi	r21, 0x45	; 69
    1052:	6e 89       	ldd	r22, Y+22	; 0x16
    1054:	7f 89       	ldd	r23, Y+23	; 0x17
    1056:	88 8d       	ldd	r24, Y+24	; 0x18
    1058:	99 8d       	ldd	r25, Y+25	; 0x19
    105a:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	8a 8f       	std	Y+26, r24	; 0x1a
    1064:	9b 8f       	std	Y+27, r25	; 0x1b
    1066:	ac 8f       	std	Y+28, r26	; 0x1c
    1068:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e8       	ldi	r20, 0x80	; 128
    1070:	5f e3       	ldi	r21, 0x3F	; 63
    1072:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1074:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1076:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1078:	9d 8d       	ldd	r25, Y+29	; 0x1d
    107a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__cmpsf2>
    107e:	88 23       	and	r24, r24
    1080:	2c f4       	brge	.+10     	; 0x108c <LCD_init+0x2e0>
		__ticks = 1;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	9f 8f       	std	Y+31, r25	; 0x1f
    1088:	8e 8f       	std	Y+30, r24	; 0x1e
    108a:	3f c0       	rjmp	.+126    	; 0x110a <__stack+0xb>
	else if (__tmp > 65535)
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	3f ef       	ldi	r19, 0xFF	; 255
    1090:	4f e7       	ldi	r20, 0x7F	; 127
    1092:	57 e4       	ldi	r21, 0x47	; 71
    1094:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1096:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1098:	8c 8d       	ldd	r24, Y+28	; 0x1c
    109a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    109c:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
    10a0:	18 16       	cp	r1, r24
    10a2:	4c f5       	brge	.+82     	; 0x10f6 <LCD_init+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e2       	ldi	r20, 0x20	; 32
    10aa:	51 e4       	ldi	r21, 0x41	; 65
    10ac:	6e 89       	ldd	r22, Y+22	; 0x16
    10ae:	7f 89       	ldd	r23, Y+23	; 0x17
    10b0:	88 8d       	ldd	r24, Y+24	; 0x18
    10b2:	99 8d       	ldd	r25, Y+25	; 0x19
    10b4:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	9f 8f       	std	Y+31, r25	; 0x1f
    10ca:	8e 8f       	std	Y+30, r24	; 0x1e
    10cc:	0f c0       	rjmp	.+30     	; 0x10ec <LCD_init+0x340>
    10ce:	80 e9       	ldi	r24, 0x90	; 144
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	99 a3       	std	Y+33, r25	; 0x21
    10d4:	88 a3       	std	Y+32, r24	; 0x20
    10d6:	88 a1       	ldd	r24, Y+32	; 0x20
    10d8:	99 a1       	ldd	r25, Y+33	; 0x21
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	f1 f7       	brne	.-4      	; 0x10da <LCD_init+0x32e>
    10de:	99 a3       	std	Y+33, r25	; 0x21
    10e0:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	9f 8f       	std	Y+31, r25	; 0x1f
    10ea:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ee:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10f0:	89 2b       	or	r24, r25
    10f2:	69 f7       	brne	.-38     	; 0x10ce <LCD_init+0x322>
    10f4:	3f c0       	rjmp	.+126    	; 0x1174 <__stack+0x75>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    10f8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    10fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10fe:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	9f 8f       	std	Y+31, r25	; 0x1f
    1108:	8e 8f       	std	Y+30, r24	; 0x1e
    110a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    110c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    110e:	9b a3       	std	Y+35, r25	; 0x23
    1110:	8a a3       	std	Y+34, r24	; 0x22
    1112:	8a a1       	ldd	r24, Y+34	; 0x22
    1114:	9b a1       	ldd	r25, Y+35	; 0x23
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <__stack+0x17>
    111a:	9b a3       	std	Y+35, r25	; 0x23
    111c:	8a a3       	std	Y+34, r24	; 0x22
    111e:	2a c0       	rjmp	.+84     	; 0x1174 <__stack+0x75>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	53 e4       	ldi	r21, 0x43	; 67
    1128:	6d 85       	ldd	r22, Y+13	; 0x0d
    112a:	7e 85       	ldd	r23, Y+14	; 0x0e
    112c:	8f 85       	ldd	r24, Y+15	; 0x0f
    112e:	98 89       	ldd	r25, Y+16	; 0x10
    1130:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
    1134:	18 16       	cp	r1, r24
    1136:	ac f4       	brge	.+42     	; 0x1162 <__stack+0x63>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1138:	69 89       	ldd	r22, Y+17	; 0x11
    113a:	7a 89       	ldd	r23, Y+18	; 0x12
    113c:	8b 89       	ldd	r24, Y+19	; 0x13
    113e:	9c 89       	ldd	r25, Y+20	; 0x14
    1140:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	9d a3       	std	Y+37, r25	; 0x25
    114a:	8c a3       	std	Y+36, r24	; 0x24
    114c:	8c a1       	ldd	r24, Y+36	; 0x24
    114e:	9d a1       	ldd	r25, Y+37	; 0x25
    1150:	9f a3       	std	Y+39, r25	; 0x27
    1152:	8e a3       	std	Y+38, r24	; 0x26
    1154:	8e a1       	ldd	r24, Y+38	; 0x26
    1156:	9f a1       	ldd	r25, Y+39	; 0x27
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <__stack+0x59>
    115c:	9f a3       	std	Y+39, r25	; 0x27
    115e:	8e a3       	std	Y+38, r24	; 0x26
    1160:	0f c0       	rjmp	.+30     	; 0x1180 <__stack+0x81>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1162:	6d 85       	ldd	r22, Y+13	; 0x0d
    1164:	7e 85       	ldd	r23, Y+14	; 0x0e
    1166:	8f 85       	ldd	r24, Y+15	; 0x0f
    1168:	98 89       	ldd	r25, Y+16	; 0x10
    116a:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	8d 8b       	std	Y+21, r24	; 0x15
    1174:	8d 89       	ldd	r24, Y+21	; 0x15
    1176:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1178:	88 a5       	ldd	r24, Y+40	; 0x28
    117a:	8a 95       	dec	r24
    117c:	f1 f7       	brne	.-4      	; 0x117a <__stack+0x7b>
	_delay_us(100);
	Command(0x20);
    117e:	88 a7       	std	Y+40, r24	; 0x28
    1180:	80 e2       	ldi	r24, 0x20	; 32
	Command(FUNCSET);
    1182:	3d d0       	rcall	.+122    	; 0x11fe <Command>
    1184:	88 e2       	ldi	r24, 0x28	; 40
	Command(DISPON);
    1186:	3b d0       	rcall	.+118    	; 0x11fe <Command>
    1188:	8c e0       	ldi	r24, 0x0C	; 12
	Command(ALLCLR);
    118a:	39 d0       	rcall	.+114    	; 0x11fe <Command>
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	37 d0       	rcall	.+110    	; 0x11fe <Command>
	Command(ENTMODE);
    1190:	86 e0       	ldi	r24, 0x06	; 6
    1192:	35 d0       	rcall	.+106    	; 0x11fe <Command>
    1194:	00 00       	nop
}
    1196:	ec 96       	adiw	r28, 0x3c	; 60
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	08 95       	ret

000011a8 <LCD_String>:
    11a8:	cf 93       	push	r28

// 문자열 출력 함수
void LCD_String(char str[])
{
    11aa:	df 93       	push	r29
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <LCD_String+0x6>
    11ae:	1f 92       	push	r1
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	9b 83       	std	Y+3, r25	; 0x03
    11b6:	8a 83       	std	Y+2, r24	; 0x02
	char i=0;
    11b8:	19 82       	std	Y+1, r1	; 0x01

	while(str[i] != 0) Data(str[i++]);
    11ba:	0e c0       	rjmp	.+28     	; 0x11d8 <LCD_String+0x30>
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	98 2f       	mov	r25, r24
    11c0:	9f 5f       	subi	r25, 0xFF	; 255
    11c2:	99 83       	std	Y+1, r25	; 0x01
    11c4:	08 2e       	mov	r0, r24
    11c6:	00 0c       	add	r0, r0
    11c8:	99 0b       	sbc	r25, r25
    11ca:	2a 81       	ldd	r18, Y+2	; 0x02
    11cc:	3b 81       	ldd	r19, Y+3	; 0x03
    11ce:	82 0f       	add	r24, r18
    11d0:	93 1f       	adc	r25, r19
    11d2:	fc 01       	movw	r30, r24
    11d4:	80 81       	ld	r24, Z
    11d6:	9d d5       	rcall	.+2874   	; 0x1d12 <Data>
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	08 2e       	mov	r0, r24
    11dc:	00 0c       	add	r0, r0
    11de:	99 0b       	sbc	r25, r25
    11e0:	2a 81       	ldd	r18, Y+2	; 0x02
    11e2:	3b 81       	ldd	r19, Y+3	; 0x03
    11e4:	82 0f       	add	r24, r18
    11e6:	93 1f       	adc	r25, r19
    11e8:	fc 01       	movw	r30, r24
    11ea:	80 81       	ld	r24, Z
    11ec:	88 23       	and	r24, r24
    11ee:	31 f7       	brne	.-52     	; 0x11bc <LCD_String+0x14>
}
    11f0:	00 00       	nop
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	08 95       	ret

000011fe <Command>:

// 인스트럭션 쓰기 함수
void Command(u_char byte)
{
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	c1 58       	subi	r28, 0x81	; 129
    120c:	d1 09       	sbc	r29, r1
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	9e 01       	movw	r18, r28
    121a:	2f 57       	subi	r18, 0x7F	; 127
    121c:	3f 4f       	sbci	r19, 0xFF	; 255
    121e:	f9 01       	movw	r30, r18
    1220:	80 83       	st	Z, r24
	Busy();
    1222:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <Busy>
	// 인스트럭션 상위 4비트
	PORTC = 0x00; // RS=RW=0
    1226:	85 e3       	ldi	r24, 0x35	; 53
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	fc 01       	movw	r30, r24
    122c:	10 82       	st	Z, r1
	PORTC |= (byte & 0xF0); // 명령어 상위 4비트
    122e:	85 e3       	ldi	r24, 0x35	; 53
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	25 e3       	ldi	r18, 0x35	; 53
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	f9 01       	movw	r30, r18
    1238:	20 81       	ld	r18, Z
    123a:	42 2f       	mov	r20, r18
    123c:	9e 01       	movw	r18, r28
    123e:	2f 57       	subi	r18, 0x7F	; 127
    1240:	3f 4f       	sbci	r19, 0xFF	; 255
    1242:	f9 01       	movw	r30, r18
    1244:	20 81       	ld	r18, Z
    1246:	20 7f       	andi	r18, 0xF0	; 240
    1248:	24 2b       	or	r18, r20
    124a:	fc 01       	movw	r30, r24
    124c:	20 83       	st	Z, r18
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	a0 e8       	ldi	r26, 0x80	; 128
    1254:	bf e3       	ldi	r27, 0x3F	; 63
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	9a 83       	std	Y+2, r25	; 0x02
    125a:	ab 83       	std	Y+3, r26	; 0x03
    125c:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    125e:	8e 01       	movw	r16, r28
    1260:	0b 59       	subi	r16, 0x9B	; 155
    1262:	1f 4f       	sbci	r17, 0xFF	; 255
    1264:	2b ea       	ldi	r18, 0xAB	; 171
    1266:	3a ea       	ldi	r19, 0xAA	; 170
    1268:	4a ea       	ldi	r20, 0xAA	; 170
    126a:	50 e4       	ldi	r21, 0x40	; 64
    126c:	69 81       	ldd	r22, Y+1	; 0x01
    126e:	7a 81       	ldd	r23, Y+2	; 0x02
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	f8 01       	movw	r30, r16
    127e:	80 83       	st	Z, r24
    1280:	91 83       	std	Z+1, r25	; 0x01
    1282:	a2 83       	std	Z+2, r26	; 0x02
    1284:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1286:	8e 01       	movw	r16, r28
    1288:	07 59       	subi	r16, 0x97	; 151
    128a:	1f 4f       	sbci	r17, 0xFF	; 255
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	50 e4       	ldi	r21, 0x40	; 64
    1294:	69 81       	ldd	r22, Y+1	; 0x01
    1296:	7a 81       	ldd	r23, Y+2	; 0x02
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	f8 01       	movw	r30, r16
    12a6:	80 83       	st	Z, r24
    12a8:	91 83       	std	Z+1, r25	; 0x01
    12aa:	a2 83       	std	Z+2, r26	; 0x02
    12ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12ae:	ce 01       	movw	r24, r28
    12b0:	8b 59       	subi	r24, 0x9B	; 155
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e8       	ldi	r20, 0x80	; 128
    12ba:	5f e3       	ldi	r21, 0x3F	; 63
    12bc:	fc 01       	movw	r30, r24
    12be:	60 81       	ld	r22, Z
    12c0:	71 81       	ldd	r23, Z+1	; 0x01
    12c2:	82 81       	ldd	r24, Z+2	; 0x02
    12c4:	93 81       	ldd	r25, Z+3	; 0x03
    12c6:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__cmpsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	3c f4       	brge	.+14     	; 0x12dc <Command+0xde>
		__ticks = 1;
    12ce:	ce 01       	movw	r24, r28
    12d0:	83 59       	subi	r24, 0x93	; 147
    12d2:	9f 4f       	sbci	r25, 0xFF	; 255
    12d4:	21 e0       	ldi	r18, 0x01	; 1
    12d6:	fc 01       	movw	r30, r24
    12d8:	20 83       	st	Z, r18
    12da:	2c c1       	rjmp	.+600    	; 0x1534 <Command+0x336>
	else if (__tmp2 > 65535)
    12dc:	ce 01       	movw	r24, r28
    12de:	87 59       	subi	r24, 0x97	; 151
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	3f ef       	ldi	r19, 0xFF	; 255
    12e6:	4f e7       	ldi	r20, 0x7F	; 127
    12e8:	57 e4       	ldi	r21, 0x47	; 71
    12ea:	fc 01       	movw	r30, r24
    12ec:	60 81       	ld	r22, Z
    12ee:	71 81       	ldd	r23, Z+1	; 0x01
    12f0:	82 81       	ldd	r24, Z+2	; 0x02
    12f2:	93 81       	ldd	r25, Z+3	; 0x03
    12f4:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
    12f8:	18 16       	cp	r1, r24
    12fa:	0c f0       	brlt	.+2      	; 0x12fe <Command+0x100>
    12fc:	cd c0       	rjmp	.+410    	; 0x1498 <Command+0x29a>
	{
		_delay_ms(__us / 1000.0);
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	4a e7       	ldi	r20, 0x7A	; 122
    1304:	54 e4       	ldi	r21, 0x44	; 68
    1306:	69 81       	ldd	r22, Y+1	; 0x01
    1308:	7a 81       	ldd	r23, Y+2	; 0x02
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	0e 94 75 14 	call	0x28ea	; 0x28ea <__divsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	9e 01       	movw	r18, r28
    1318:	22 59       	subi	r18, 0x92	; 146
    131a:	3f 4f       	sbci	r19, 0xFF	; 255
    131c:	f9 01       	movw	r30, r18
    131e:	80 83       	st	Z, r24
    1320:	91 83       	std	Z+1, r25	; 0x01
    1322:	a2 83       	std	Z+2, r26	; 0x02
    1324:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1326:	8e 01       	movw	r16, r28
    1328:	0e 58       	subi	r16, 0x8E	; 142
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	ce 01       	movw	r24, r28
    132e:	82 59       	subi	r24, 0x92	; 146
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	4a e7       	ldi	r20, 0x7A	; 122
    1338:	55 e4       	ldi	r21, 0x45	; 69
    133a:	fc 01       	movw	r30, r24
    133c:	60 81       	ld	r22, Z
    133e:	71 81       	ldd	r23, Z+1	; 0x01
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	93 81       	ldd	r25, Z+3	; 0x03
    1344:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	f8 01       	movw	r30, r16
    134e:	80 83       	st	Z, r24
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	a2 83       	std	Z+2, r26	; 0x02
    1354:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1356:	ce 01       	movw	r24, r28
    1358:	8e 58       	subi	r24, 0x8E	; 142
    135a:	9f 4f       	sbci	r25, 0xFF	; 255
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e8       	ldi	r20, 0x80	; 128
    1362:	5f e3       	ldi	r21, 0x3F	; 63
    1364:	fc 01       	movw	r30, r24
    1366:	60 81       	ld	r22, Z
    1368:	71 81       	ldd	r23, Z+1	; 0x01
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__cmpsf2>
    1372:	88 23       	and	r24, r24
    1374:	4c f4       	brge	.+18     	; 0x1388 <Command+0x18a>
		__ticks = 1;
    1376:	ce 01       	movw	r24, r28
    1378:	8a 58       	subi	r24, 0x8A	; 138
    137a:	9f 4f       	sbci	r25, 0xFF	; 255
    137c:	21 e0       	ldi	r18, 0x01	; 1
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	fc 01       	movw	r30, r24
    1382:	31 83       	std	Z+1, r19	; 0x01
    1384:	20 83       	st	Z, r18
    1386:	6d c0       	rjmp	.+218    	; 0x1462 <Command+0x264>
	else if (__tmp > 65535)
    1388:	ce 01       	movw	r24, r28
    138a:	8e 58       	subi	r24, 0x8E	; 142
    138c:	9f 4f       	sbci	r25, 0xFF	; 255
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	3f ef       	ldi	r19, 0xFF	; 255
    1392:	4f e7       	ldi	r20, 0x7F	; 127
    1394:	57 e4       	ldi	r21, 0x47	; 71
    1396:	fc 01       	movw	r30, r24
    1398:	60 81       	ld	r22, Z
    139a:	71 81       	ldd	r23, Z+1	; 0x01
    139c:	82 81       	ldd	r24, Z+2	; 0x02
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
    13a4:	18 16       	cp	r1, r24
    13a6:	0c f0       	brlt	.+2      	; 0x13aa <Command+0x1ac>
    13a8:	4a c0       	rjmp	.+148    	; 0x143e <Command+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13aa:	ce 01       	movw	r24, r28
    13ac:	82 59       	subi	r24, 0x92	; 146
    13ae:	9f 4f       	sbci	r25, 0xFF	; 255
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e2       	ldi	r20, 0x20	; 32
    13b6:	51 e4       	ldi	r21, 0x41	; 65
    13b8:	fc 01       	movw	r30, r24
    13ba:	60 81       	ld	r22, Z
    13bc:	71 81       	ldd	r23, Z+1	; 0x01
    13be:	82 81       	ldd	r24, Z+2	; 0x02
    13c0:	93 81       	ldd	r25, Z+3	; 0x03
    13c2:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	8e 01       	movw	r16, r28
    13cc:	0a 58       	subi	r16, 0x8A	; 138
    13ce:	1f 4f       	sbci	r17, 0xFF	; 255
    13d0:	bc 01       	movw	r22, r24
    13d2:	cd 01       	movw	r24, r26
    13d4:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	f8 01       	movw	r30, r16
    13de:	91 83       	std	Z+1, r25	; 0x01
    13e0:	80 83       	st	Z, r24
    13e2:	24 c0       	rjmp	.+72     	; 0x142c <Command+0x22e>
    13e4:	ce 01       	movw	r24, r28
    13e6:	88 58       	subi	r24, 0x88	; 136
    13e8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ea:	20 e9       	ldi	r18, 0x90	; 144
    13ec:	31 e0       	ldi	r19, 0x01	; 1
    13ee:	fc 01       	movw	r30, r24
    13f0:	31 83       	std	Z+1, r19	; 0x01
    13f2:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13f4:	ce 01       	movw	r24, r28
    13f6:	88 58       	subi	r24, 0x88	; 136
    13f8:	9f 4f       	sbci	r25, 0xFF	; 255
    13fa:	fc 01       	movw	r30, r24
    13fc:	80 81       	ld	r24, Z
    13fe:	91 81       	ldd	r25, Z+1	; 0x01
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <Command+0x202>
    1404:	9e 01       	movw	r18, r28
    1406:	28 58       	subi	r18, 0x88	; 136
    1408:	3f 4f       	sbci	r19, 0xFF	; 255
    140a:	f9 01       	movw	r30, r18
    140c:	91 83       	std	Z+1, r25	; 0x01
    140e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1410:	ce 01       	movw	r24, r28
    1412:	8a 58       	subi	r24, 0x8A	; 138
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	9e 01       	movw	r18, r28
    1418:	2a 58       	subi	r18, 0x8A	; 138
    141a:	3f 4f       	sbci	r19, 0xFF	; 255
    141c:	f9 01       	movw	r30, r18
    141e:	20 81       	ld	r18, Z
    1420:	31 81       	ldd	r19, Z+1	; 0x01
    1422:	21 50       	subi	r18, 0x01	; 1
    1424:	31 09       	sbc	r19, r1
    1426:	fc 01       	movw	r30, r24
    1428:	31 83       	std	Z+1, r19	; 0x01
    142a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142c:	ce 01       	movw	r24, r28
    142e:	8a 58       	subi	r24, 0x8A	; 138
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	fc 01       	movw	r30, r24
    1434:	80 81       	ld	r24, Z
    1436:	91 81       	ldd	r25, Z+1	; 0x01
    1438:	89 2b       	or	r24, r25
    143a:	a1 f6       	brne	.-88     	; 0x13e4 <Command+0x1e6>
    143c:	7b c0       	rjmp	.+246    	; 0x1534 <Command+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143e:	8e 01       	movw	r16, r28
    1440:	0a 58       	subi	r16, 0x8A	; 138
    1442:	1f 4f       	sbci	r17, 0xFF	; 255
    1444:	ce 01       	movw	r24, r28
    1446:	8e 58       	subi	r24, 0x8E	; 142
    1448:	9f 4f       	sbci	r25, 0xFF	; 255
    144a:	fc 01       	movw	r30, r24
    144c:	60 81       	ld	r22, Z
    144e:	71 81       	ldd	r23, Z+1	; 0x01
    1450:	82 81       	ldd	r24, Z+2	; 0x02
    1452:	93 81       	ldd	r25, Z+3	; 0x03
    1454:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	f8 01       	movw	r30, r16
    145e:	91 83       	std	Z+1, r25	; 0x01
    1460:	80 83       	st	Z, r24
    1462:	ce 01       	movw	r24, r28
    1464:	86 58       	subi	r24, 0x86	; 134
    1466:	9f 4f       	sbci	r25, 0xFF	; 255
    1468:	9e 01       	movw	r18, r28
    146a:	2a 58       	subi	r18, 0x8A	; 138
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	f9 01       	movw	r30, r18
    1470:	20 81       	ld	r18, Z
    1472:	31 81       	ldd	r19, Z+1	; 0x01
    1474:	fc 01       	movw	r30, r24
    1476:	31 83       	std	Z+1, r19	; 0x01
    1478:	20 83       	st	Z, r18
    147a:	ce 01       	movw	r24, r28
    147c:	86 58       	subi	r24, 0x86	; 134
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	fc 01       	movw	r30, r24
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <Command+0x288>
    148a:	9e 01       	movw	r18, r28
    148c:	26 58       	subi	r18, 0x86	; 134
    148e:	3f 4f       	sbci	r19, 0xFF	; 255
    1490:	f9 01       	movw	r30, r18
    1492:	91 83       	std	Z+1, r25	; 0x01
    1494:	80 83       	st	Z, r24
    1496:	4e c0       	rjmp	.+156    	; 0x1534 <Command+0x336>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1498:	ce 01       	movw	r24, r28
    149a:	8b 59       	subi	r24, 0x9B	; 155
    149c:	9f 4f       	sbci	r25, 0xFF	; 255
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	4f e7       	ldi	r20, 0x7F	; 127
    14a4:	53 e4       	ldi	r21, 0x43	; 67
    14a6:	fc 01       	movw	r30, r24
    14a8:	60 81       	ld	r22, Z
    14aa:	71 81       	ldd	r23, Z+1	; 0x01
    14ac:	82 81       	ldd	r24, Z+2	; 0x02
    14ae:	93 81       	ldd	r25, Z+3	; 0x03
    14b0:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
    14b4:	18 16       	cp	r1, r24
    14b6:	6c f5       	brge	.+90     	; 0x1512 <Command+0x314>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    14b8:	8e 01       	movw	r16, r28
    14ba:	04 58       	subi	r16, 0x84	; 132
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	ce 01       	movw	r24, r28
    14c0:	87 59       	subi	r24, 0x97	; 151
    14c2:	9f 4f       	sbci	r25, 0xFF	; 255
    14c4:	fc 01       	movw	r30, r24
    14c6:	60 81       	ld	r22, Z
    14c8:	71 81       	ldd	r23, Z+1	; 0x01
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	f8 01       	movw	r30, r16
    14d8:	91 83       	std	Z+1, r25	; 0x01
    14da:	80 83       	st	Z, r24
    14dc:	ce 01       	movw	r24, r28
    14de:	82 58       	subi	r24, 0x82	; 130
    14e0:	9f 4f       	sbci	r25, 0xFF	; 255
    14e2:	9e 01       	movw	r18, r28
    14e4:	24 58       	subi	r18, 0x84	; 132
    14e6:	3f 4f       	sbci	r19, 0xFF	; 255
    14e8:	f9 01       	movw	r30, r18
    14ea:	20 81       	ld	r18, Z
    14ec:	31 81       	ldd	r19, Z+1	; 0x01
    14ee:	fc 01       	movw	r30, r24
    14f0:	31 83       	std	Z+1, r19	; 0x01
    14f2:	20 83       	st	Z, r18
    14f4:	ce 01       	movw	r24, r28
    14f6:	82 58       	subi	r24, 0x82	; 130
    14f8:	9f 4f       	sbci	r25, 0xFF	; 255
    14fa:	fc 01       	movw	r30, r24
    14fc:	80 81       	ld	r24, Z
    14fe:	91 81       	ldd	r25, Z+1	; 0x01
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <Command+0x302>
    1504:	9e 01       	movw	r18, r28
    1506:	22 58       	subi	r18, 0x82	; 130
    1508:	3f 4f       	sbci	r19, 0xFF	; 255
    150a:	f9 01       	movw	r30, r18
    150c:	91 83       	std	Z+1, r25	; 0x01
    150e:	80 83       	st	Z, r24
    1510:	28 c0       	rjmp	.+80     	; 0x1562 <Command+0x364>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1512:	8e 01       	movw	r16, r28
    1514:	03 59       	subi	r16, 0x93	; 147
    1516:	1f 4f       	sbci	r17, 0xFF	; 255
    1518:	ce 01       	movw	r24, r28
    151a:	8b 59       	subi	r24, 0x9B	; 155
    151c:	9f 4f       	sbci	r25, 0xFF	; 255
    151e:	fc 01       	movw	r30, r24
    1520:	60 81       	ld	r22, Z
    1522:	71 81       	ldd	r23, Z+1	; 0x01
    1524:	82 81       	ldd	r24, Z+2	; 0x02
    1526:	93 81       	ldd	r25, Z+3	; 0x03
    1528:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	f8 01       	movw	r30, r16
    1532:	80 83       	st	Z, r24
    1534:	ce 01       	movw	r24, r28
    1536:	80 58       	subi	r24, 0x80	; 128
    1538:	9f 4f       	sbci	r25, 0xFF	; 255
    153a:	9e 01       	movw	r18, r28
    153c:	23 59       	subi	r18, 0x93	; 147
    153e:	3f 4f       	sbci	r19, 0xFF	; 255
    1540:	f9 01       	movw	r30, r18
    1542:	20 81       	ld	r18, Z
    1544:	fc 01       	movw	r30, r24
    1546:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1548:	ce 01       	movw	r24, r28
    154a:	80 58       	subi	r24, 0x80	; 128
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	fc 01       	movw	r30, r24
    1550:	80 81       	ld	r24, Z
    1552:	28 2f       	mov	r18, r24
    1554:	2a 95       	dec	r18
    1556:	f1 f7       	brne	.-4      	; 0x1554 <Command+0x356>
    1558:	ce 01       	movw	r24, r28
    155a:	80 58       	subi	r24, 0x80	; 128
    155c:	9f 4f       	sbci	r25, 0xFF	; 255
    155e:	fc 01       	movw	r30, r24
    1560:	20 83       	st	Z, r18

	_delay_us(1);
	ENH; // E = 1
    1562:	85 e3       	ldi	r24, 0x35	; 53
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	25 e3       	ldi	r18, 0x35	; 53
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	f9 01       	movw	r30, r18
    156c:	20 81       	ld	r18, Z
    156e:	24 60       	ori	r18, 0x04	; 4
    1570:	fc 01       	movw	r30, r24
    1572:	20 83       	st	Z, r18
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a0 e8       	ldi	r26, 0x80	; 128
    157a:	bf e3       	ldi	r27, 0x3F	; 63
    157c:	8d 83       	std	Y+5, r24	; 0x05
    157e:	9e 83       	std	Y+6, r25	; 0x06
    1580:	af 83       	std	Y+7, r26	; 0x07
    1582:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1584:	8e 01       	movw	r16, r28
    1586:	07 5b       	subi	r16, 0xB7	; 183
    1588:	1f 4f       	sbci	r17, 0xFF	; 255
    158a:	2b ea       	ldi	r18, 0xAB	; 171
    158c:	3a ea       	ldi	r19, 0xAA	; 170
    158e:	4a ea       	ldi	r20, 0xAA	; 170
    1590:	50 e4       	ldi	r21, 0x40	; 64
    1592:	6d 81       	ldd	r22, Y+5	; 0x05
    1594:	7e 81       	ldd	r23, Y+6	; 0x06
    1596:	8f 81       	ldd	r24, Y+7	; 0x07
    1598:	98 85       	ldd	r25, Y+8	; 0x08
    159a:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	f8 01       	movw	r30, r16
    15a4:	80 83       	st	Z, r24
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	a2 83       	std	Z+2, r26	; 0x02
    15aa:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    15ac:	8e 01       	movw	r16, r28
    15ae:	03 5b       	subi	r16, 0xB3	; 179
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	50 e4       	ldi	r21, 0x40	; 64
    15ba:	6d 81       	ldd	r22, Y+5	; 0x05
    15bc:	7e 81       	ldd	r23, Y+6	; 0x06
    15be:	8f 81       	ldd	r24, Y+7	; 0x07
    15c0:	98 85       	ldd	r25, Y+8	; 0x08
    15c2:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	f8 01       	movw	r30, r16
    15cc:	80 83       	st	Z, r24
    15ce:	91 83       	std	Z+1, r25	; 0x01
    15d0:	a2 83       	std	Z+2, r26	; 0x02
    15d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15d4:	ce 01       	movw	r24, r28
    15d6:	87 5b       	subi	r24, 0xB7	; 183
    15d8:	9f 4f       	sbci	r25, 0xFF	; 255
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e8       	ldi	r20, 0x80	; 128
    15e0:	5f e3       	ldi	r21, 0x3F	; 63
    15e2:	fc 01       	movw	r30, r24
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__cmpsf2>
    15f0:	88 23       	and	r24, r24
    15f2:	3c f4       	brge	.+14     	; 0x1602 <Command+0x404>
		__ticks = 1;
    15f4:	ce 01       	movw	r24, r28
    15f6:	8f 5a       	subi	r24, 0xAF	; 175
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	21 e0       	ldi	r18, 0x01	; 1
    15fc:	fc 01       	movw	r30, r24
    15fe:	20 83       	st	Z, r18
    1600:	2c c1       	rjmp	.+600    	; 0x185a <Command+0x65c>
	else if (__tmp2 > 65535)
    1602:	ce 01       	movw	r24, r28
    1604:	83 5b       	subi	r24, 0xB3	; 179
    1606:	9f 4f       	sbci	r25, 0xFF	; 255
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	3f ef       	ldi	r19, 0xFF	; 255
    160c:	4f e7       	ldi	r20, 0x7F	; 127
    160e:	57 e4       	ldi	r21, 0x47	; 71
    1610:	fc 01       	movw	r30, r24
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
    161e:	18 16       	cp	r1, r24
    1620:	0c f0       	brlt	.+2      	; 0x1624 <Command+0x426>
    1622:	cd c0       	rjmp	.+410    	; 0x17be <Command+0x5c0>
	{
		_delay_ms(__us / 1000.0);
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	4a e7       	ldi	r20, 0x7A	; 122
    162a:	54 e4       	ldi	r21, 0x44	; 68
    162c:	6d 81       	ldd	r22, Y+5	; 0x05
    162e:	7e 81       	ldd	r23, Y+6	; 0x06
    1630:	8f 81       	ldd	r24, Y+7	; 0x07
    1632:	98 85       	ldd	r25, Y+8	; 0x08
    1634:	0e 94 75 14 	call	0x28ea	; 0x28ea <__divsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	9e 01       	movw	r18, r28
    163e:	2e 5a       	subi	r18, 0xAE	; 174
    1640:	3f 4f       	sbci	r19, 0xFF	; 255
    1642:	f9 01       	movw	r30, r18
    1644:	80 83       	st	Z, r24
    1646:	91 83       	std	Z+1, r25	; 0x01
    1648:	a2 83       	std	Z+2, r26	; 0x02
    164a:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    164c:	8e 01       	movw	r16, r28
    164e:	0a 5a       	subi	r16, 0xAA	; 170
    1650:	1f 4f       	sbci	r17, 0xFF	; 255
    1652:	ce 01       	movw	r24, r28
    1654:	8e 5a       	subi	r24, 0xAE	; 174
    1656:	9f 4f       	sbci	r25, 0xFF	; 255
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	4a e7       	ldi	r20, 0x7A	; 122
    165e:	55 e4       	ldi	r21, 0x45	; 69
    1660:	fc 01       	movw	r30, r24
    1662:	60 81       	ld	r22, Z
    1664:	71 81       	ldd	r23, Z+1	; 0x01
    1666:	82 81       	ldd	r24, Z+2	; 0x02
    1668:	93 81       	ldd	r25, Z+3	; 0x03
    166a:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	f8 01       	movw	r30, r16
    1674:	80 83       	st	Z, r24
    1676:	91 83       	std	Z+1, r25	; 0x01
    1678:	a2 83       	std	Z+2, r26	; 0x02
    167a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    167c:	ce 01       	movw	r24, r28
    167e:	8a 5a       	subi	r24, 0xAA	; 170
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e8       	ldi	r20, 0x80	; 128
    1688:	5f e3       	ldi	r21, 0x3F	; 63
    168a:	fc 01       	movw	r30, r24
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__cmpsf2>
    1698:	88 23       	and	r24, r24
    169a:	4c f4       	brge	.+18     	; 0x16ae <Command+0x4b0>
		__ticks = 1;
    169c:	ce 01       	movw	r24, r28
    169e:	86 5a       	subi	r24, 0xA6	; 166
    16a0:	9f 4f       	sbci	r25, 0xFF	; 255
    16a2:	21 e0       	ldi	r18, 0x01	; 1
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	fc 01       	movw	r30, r24
    16a8:	31 83       	std	Z+1, r19	; 0x01
    16aa:	20 83       	st	Z, r18
    16ac:	6d c0       	rjmp	.+218    	; 0x1788 <Command+0x58a>
	else if (__tmp > 65535)
    16ae:	ce 01       	movw	r24, r28
    16b0:	8a 5a       	subi	r24, 0xAA	; 170
    16b2:	9f 4f       	sbci	r25, 0xFF	; 255
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	57 e4       	ldi	r21, 0x47	; 71
    16bc:	fc 01       	movw	r30, r24
    16be:	60 81       	ld	r22, Z
    16c0:	71 81       	ldd	r23, Z+1	; 0x01
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	93 81       	ldd	r25, Z+3	; 0x03
    16c6:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
    16ca:	18 16       	cp	r1, r24
    16cc:	0c f0       	brlt	.+2      	; 0x16d0 <Command+0x4d2>
    16ce:	4a c0       	rjmp	.+148    	; 0x1764 <Command+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d0:	ce 01       	movw	r24, r28
    16d2:	8e 5a       	subi	r24, 0xAE	; 174
    16d4:	9f 4f       	sbci	r25, 0xFF	; 255
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e2       	ldi	r20, 0x20	; 32
    16dc:	51 e4       	ldi	r21, 0x41	; 65
    16de:	fc 01       	movw	r30, r24
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	8e 01       	movw	r16, r28
    16f2:	06 5a       	subi	r16, 0xA6	; 166
    16f4:	1f 4f       	sbci	r17, 0xFF	; 255
    16f6:	bc 01       	movw	r22, r24
    16f8:	cd 01       	movw	r24, r26
    16fa:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	f8 01       	movw	r30, r16
    1704:	91 83       	std	Z+1, r25	; 0x01
    1706:	80 83       	st	Z, r24
    1708:	24 c0       	rjmp	.+72     	; 0x1752 <Command+0x554>
    170a:	ce 01       	movw	r24, r28
    170c:	84 5a       	subi	r24, 0xA4	; 164
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	20 e9       	ldi	r18, 0x90	; 144
    1712:	31 e0       	ldi	r19, 0x01	; 1
    1714:	fc 01       	movw	r30, r24
    1716:	31 83       	std	Z+1, r19	; 0x01
    1718:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    171a:	ce 01       	movw	r24, r28
    171c:	84 5a       	subi	r24, 0xA4	; 164
    171e:	9f 4f       	sbci	r25, 0xFF	; 255
    1720:	fc 01       	movw	r30, r24
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <Command+0x528>
    172a:	9e 01       	movw	r18, r28
    172c:	24 5a       	subi	r18, 0xA4	; 164
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	f9 01       	movw	r30, r18
    1732:	91 83       	std	Z+1, r25	; 0x01
    1734:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1736:	ce 01       	movw	r24, r28
    1738:	86 5a       	subi	r24, 0xA6	; 166
    173a:	9f 4f       	sbci	r25, 0xFF	; 255
    173c:	9e 01       	movw	r18, r28
    173e:	26 5a       	subi	r18, 0xA6	; 166
    1740:	3f 4f       	sbci	r19, 0xFF	; 255
    1742:	f9 01       	movw	r30, r18
    1744:	20 81       	ld	r18, Z
    1746:	31 81       	ldd	r19, Z+1	; 0x01
    1748:	21 50       	subi	r18, 0x01	; 1
    174a:	31 09       	sbc	r19, r1
    174c:	fc 01       	movw	r30, r24
    174e:	31 83       	std	Z+1, r19	; 0x01
    1750:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1752:	ce 01       	movw	r24, r28
    1754:	86 5a       	subi	r24, 0xA6	; 166
    1756:	9f 4f       	sbci	r25, 0xFF	; 255
    1758:	fc 01       	movw	r30, r24
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	89 2b       	or	r24, r25
    1760:	a1 f6       	brne	.-88     	; 0x170a <Command+0x50c>
    1762:	7b c0       	rjmp	.+246    	; 0x185a <Command+0x65c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1764:	8e 01       	movw	r16, r28
    1766:	06 5a       	subi	r16, 0xA6	; 166
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
    176a:	ce 01       	movw	r24, r28
    176c:	8a 5a       	subi	r24, 0xAA	; 170
    176e:	9f 4f       	sbci	r25, 0xFF	; 255
    1770:	fc 01       	movw	r30, r24
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	f8 01       	movw	r30, r16
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	80 83       	st	Z, r24
    1788:	ce 01       	movw	r24, r28
    178a:	82 5a       	subi	r24, 0xA2	; 162
    178c:	9f 4f       	sbci	r25, 0xFF	; 255
    178e:	9e 01       	movw	r18, r28
    1790:	26 5a       	subi	r18, 0xA6	; 166
    1792:	3f 4f       	sbci	r19, 0xFF	; 255
    1794:	f9 01       	movw	r30, r18
    1796:	20 81       	ld	r18, Z
    1798:	31 81       	ldd	r19, Z+1	; 0x01
    179a:	fc 01       	movw	r30, r24
    179c:	31 83       	std	Z+1, r19	; 0x01
    179e:	20 83       	st	Z, r18
    17a0:	ce 01       	movw	r24, r28
    17a2:	82 5a       	subi	r24, 0xA2	; 162
    17a4:	9f 4f       	sbci	r25, 0xFF	; 255
    17a6:	fc 01       	movw	r30, r24
    17a8:	80 81       	ld	r24, Z
    17aa:	91 81       	ldd	r25, Z+1	; 0x01
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <Command+0x5ae>
    17b0:	9e 01       	movw	r18, r28
    17b2:	22 5a       	subi	r18, 0xA2	; 162
    17b4:	3f 4f       	sbci	r19, 0xFF	; 255
    17b6:	f9 01       	movw	r30, r18
    17b8:	91 83       	std	Z+1, r25	; 0x01
    17ba:	80 83       	st	Z, r24
    17bc:	4e c0       	rjmp	.+156    	; 0x185a <Command+0x65c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    17be:	ce 01       	movw	r24, r28
    17c0:	87 5b       	subi	r24, 0xB7	; 183
    17c2:	9f 4f       	sbci	r25, 0xFF	; 255
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	4f e7       	ldi	r20, 0x7F	; 127
    17ca:	53 e4       	ldi	r21, 0x43	; 67
    17cc:	fc 01       	movw	r30, r24
    17ce:	60 81       	ld	r22, Z
    17d0:	71 81       	ldd	r23, Z+1	; 0x01
    17d2:	82 81       	ldd	r24, Z+2	; 0x02
    17d4:	93 81       	ldd	r25, Z+3	; 0x03
    17d6:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
    17da:	18 16       	cp	r1, r24
    17dc:	6c f5       	brge	.+90     	; 0x1838 <Command+0x63a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    17de:	8e 01       	movw	r16, r28
    17e0:	00 5a       	subi	r16, 0xA0	; 160
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	ce 01       	movw	r24, r28
    17e6:	83 5b       	subi	r24, 0xB3	; 179
    17e8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ea:	fc 01       	movw	r30, r24
    17ec:	60 81       	ld	r22, Z
    17ee:	71 81       	ldd	r23, Z+1	; 0x01
    17f0:	82 81       	ldd	r24, Z+2	; 0x02
    17f2:	93 81       	ldd	r25, Z+3	; 0x03
    17f4:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	f8 01       	movw	r30, r16
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
    1802:	ce 01       	movw	r24, r28
    1804:	8e 59       	subi	r24, 0x9E	; 158
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	9e 01       	movw	r18, r28
    180a:	20 5a       	subi	r18, 0xA0	; 160
    180c:	3f 4f       	sbci	r19, 0xFF	; 255
    180e:	f9 01       	movw	r30, r18
    1810:	20 81       	ld	r18, Z
    1812:	31 81       	ldd	r19, Z+1	; 0x01
    1814:	fc 01       	movw	r30, r24
    1816:	31 83       	std	Z+1, r19	; 0x01
    1818:	20 83       	st	Z, r18
    181a:	ce 01       	movw	r24, r28
    181c:	8e 59       	subi	r24, 0x9E	; 158
    181e:	9f 4f       	sbci	r25, 0xFF	; 255
    1820:	fc 01       	movw	r30, r24
    1822:	80 81       	ld	r24, Z
    1824:	91 81       	ldd	r25, Z+1	; 0x01
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	f1 f7       	brne	.-4      	; 0x1826 <Command+0x628>
    182a:	9e 01       	movw	r18, r28
    182c:	2e 59       	subi	r18, 0x9E	; 158
    182e:	3f 4f       	sbci	r19, 0xFF	; 255
    1830:	f9 01       	movw	r30, r18
    1832:	91 83       	std	Z+1, r25	; 0x01
    1834:	80 83       	st	Z, r24
    1836:	28 c0       	rjmp	.+80     	; 0x1888 <Command+0x68a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1838:	8e 01       	movw	r16, r28
    183a:	0f 5a       	subi	r16, 0xAF	; 175
    183c:	1f 4f       	sbci	r17, 0xFF	; 255
    183e:	ce 01       	movw	r24, r28
    1840:	87 5b       	subi	r24, 0xB7	; 183
    1842:	9f 4f       	sbci	r25, 0xFF	; 255
    1844:	fc 01       	movw	r30, r24
    1846:	60 81       	ld	r22, Z
    1848:	71 81       	ldd	r23, Z+1	; 0x01
    184a:	82 81       	ldd	r24, Z+2	; 0x02
    184c:	93 81       	ldd	r25, Z+3	; 0x03
    184e:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	f8 01       	movw	r30, r16
    1858:	80 83       	st	Z, r24
    185a:	ce 01       	movw	r24, r28
    185c:	8c 59       	subi	r24, 0x9C	; 156
    185e:	9f 4f       	sbci	r25, 0xFF	; 255
    1860:	9e 01       	movw	r18, r28
    1862:	2f 5a       	subi	r18, 0xAF	; 175
    1864:	3f 4f       	sbci	r19, 0xFF	; 255
    1866:	f9 01       	movw	r30, r18
    1868:	20 81       	ld	r18, Z
    186a:	fc 01       	movw	r30, r24
    186c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    186e:	ce 01       	movw	r24, r28
    1870:	8c 59       	subi	r24, 0x9C	; 156
    1872:	9f 4f       	sbci	r25, 0xFF	; 255
    1874:	fc 01       	movw	r30, r24
    1876:	80 81       	ld	r24, Z
    1878:	28 2f       	mov	r18, r24
    187a:	2a 95       	dec	r18
    187c:	f1 f7       	brne	.-4      	; 0x187a <Command+0x67c>
    187e:	ce 01       	movw	r24, r28
    1880:	8c 59       	subi	r24, 0x9C	; 156
    1882:	9f 4f       	sbci	r25, 0xFF	; 255
    1884:	fc 01       	movw	r30, r24
    1886:	20 83       	st	Z, r18

	_delay_us(1);
	ENL; // E = 0
    1888:	85 e3       	ldi	r24, 0x35	; 53
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	25 e3       	ldi	r18, 0x35	; 53
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	f9 01       	movw	r30, r18
    1892:	20 81       	ld	r18, Z
    1894:	2b 7f       	andi	r18, 0xFB	; 251
    1896:	fc 01       	movw	r30, r24
    1898:	20 83       	st	Z, r18

	// 인스트럭션 하위 4비트
	PORTC = 0x00; // RS=RW=0
    189a:	85 e3       	ldi	r24, 0x35	; 53
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	fc 01       	movw	r30, r24
    18a0:	10 82       	st	Z, r1
	PORTC |= (byte << 4); // 명령어 하위 4비트
    18a2:	85 e3       	ldi	r24, 0x35	; 53
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	25 e3       	ldi	r18, 0x35	; 53
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	f9 01       	movw	r30, r18
    18ac:	20 81       	ld	r18, Z
    18ae:	42 2f       	mov	r20, r18
    18b0:	9e 01       	movw	r18, r28
    18b2:	2f 57       	subi	r18, 0x7F	; 127
    18b4:	3f 4f       	sbci	r19, 0xFF	; 255
    18b6:	f9 01       	movw	r30, r18
    18b8:	20 81       	ld	r18, Z
    18ba:	22 2f       	mov	r18, r18
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	22 95       	swap	r18
    18c0:	32 95       	swap	r19
    18c2:	30 7f       	andi	r19, 0xF0	; 240
    18c4:	32 27       	eor	r19, r18
    18c6:	20 7f       	andi	r18, 0xF0	; 240
    18c8:	32 27       	eor	r19, r18
    18ca:	24 2b       	or	r18, r20
    18cc:	fc 01       	movw	r30, r24
    18ce:	20 83       	st	Z, r18
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a0 e8       	ldi	r26, 0x80	; 128
    18d6:	bf e3       	ldi	r27, 0x3F	; 63
    18d8:	89 87       	std	Y+9, r24	; 0x09
    18da:	9a 87       	std	Y+10, r25	; 0x0a
    18dc:	ab 87       	std	Y+11, r26	; 0x0b
    18de:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    18e0:	2b ea       	ldi	r18, 0xAB	; 171
    18e2:	3a ea       	ldi	r19, 0xAA	; 170
    18e4:	4a ea       	ldi	r20, 0xAA	; 170
    18e6:	50 e4       	ldi	r21, 0x40	; 64
    18e8:	69 85       	ldd	r22, Y+9	; 0x09
    18ea:	7a 85       	ldd	r23, Y+10	; 0x0a
    18ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    18ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    18f0:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	8d a7       	std	Y+45, r24	; 0x2d
    18fa:	9e a7       	std	Y+46, r25	; 0x2e
    18fc:	af a7       	std	Y+47, r26	; 0x2f
    18fe:	b8 ab       	std	Y+48, r27	; 0x30
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e8       	ldi	r20, 0x80	; 128
    1906:	50 e4       	ldi	r21, 0x40	; 64
    1908:	69 85       	ldd	r22, Y+9	; 0x09
    190a:	7a 85       	ldd	r23, Y+10	; 0x0a
    190c:	8b 85       	ldd	r24, Y+11	; 0x0b
    190e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1910:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	89 ab       	std	Y+49, r24	; 0x31
    191a:	9a ab       	std	Y+50, r25	; 0x32
    191c:	ab ab       	std	Y+51, r26	; 0x33
    191e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e8       	ldi	r20, 0x80	; 128
    1926:	5f e3       	ldi	r21, 0x3F	; 63
    1928:	6d a5       	ldd	r22, Y+45	; 0x2d
    192a:	7e a5       	ldd	r23, Y+46	; 0x2e
    192c:	8f a5       	ldd	r24, Y+47	; 0x2f
    192e:	98 a9       	ldd	r25, Y+48	; 0x30
    1930:	d8 d7       	rcall	.+4016   	; 0x28e2 <__cmpsf2>
    1932:	88 23       	and	r24, r24
    1934:	1c f4       	brge	.+6      	; 0x193c <Command+0x73e>
		__ticks = 1;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	8d ab       	std	Y+53, r24	; 0x35
    193a:	d8 c0       	rjmp	.+432    	; 0x1aec <Command+0x8ee>
	else if (__tmp2 > 65535)
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	3f ef       	ldi	r19, 0xFF	; 255
    1940:	4f e7       	ldi	r20, 0x7F	; 127
    1942:	57 e4       	ldi	r21, 0x47	; 71
    1944:	69 a9       	ldd	r22, Y+49	; 0x31
    1946:	7a a9       	ldd	r23, Y+50	; 0x32
    1948:	8b a9       	ldd	r24, Y+51	; 0x33
    194a:	9c a9       	ldd	r25, Y+52	; 0x34
    194c:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
    1950:	18 16       	cp	r1, r24
    1952:	0c f0       	brlt	.+2      	; 0x1956 <Command+0x758>
    1954:	8f c0       	rjmp	.+286    	; 0x1a74 <Command+0x876>
	{
		_delay_ms(__us / 1000.0);
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	4a e7       	ldi	r20, 0x7A	; 122
    195c:	54 e4       	ldi	r21, 0x44	; 68
    195e:	69 85       	ldd	r22, Y+9	; 0x09
    1960:	7a 85       	ldd	r23, Y+10	; 0x0a
    1962:	8b 85       	ldd	r24, Y+11	; 0x0b
    1964:	9c 85       	ldd	r25, Y+12	; 0x0c
    1966:	c1 d7       	rcall	.+3970   	; 0x28ea <__divsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	8e ab       	std	Y+54, r24	; 0x36
    196e:	9f ab       	std	Y+55, r25	; 0x37
    1970:	a8 af       	std	Y+56, r26	; 0x38
    1972:	b9 af       	std	Y+57, r27	; 0x39

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	4a e7       	ldi	r20, 0x7A	; 122
    197a:	55 e4       	ldi	r21, 0x45	; 69
    197c:	6e a9       	ldd	r22, Y+54	; 0x36
    197e:	7f a9       	ldd	r23, Y+55	; 0x37
    1980:	88 ad       	ldd	r24, Y+56	; 0x38
    1982:	99 ad       	ldd	r25, Y+57	; 0x39
    1984:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	8a af       	std	Y+58, r24	; 0x3a
    198e:	9b af       	std	Y+59, r25	; 0x3b
    1990:	ac af       	std	Y+60, r26	; 0x3c
    1992:	bd af       	std	Y+61, r27	; 0x3d
	if (__tmp < 1.0)
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e8       	ldi	r20, 0x80	; 128
    199a:	5f e3       	ldi	r21, 0x3F	; 63
    199c:	6a ad       	ldd	r22, Y+58	; 0x3a
    199e:	7b ad       	ldd	r23, Y+59	; 0x3b
    19a0:	8c ad       	ldd	r24, Y+60	; 0x3c
    19a2:	9d ad       	ldd	r25, Y+61	; 0x3d
    19a4:	9e d7       	rcall	.+3900   	; 0x28e2 <__cmpsf2>
    19a6:	88 23       	and	r24, r24
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <Command+0x7b6>
		__ticks = 1;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9f af       	std	Y+63, r25	; 0x3f
    19b0:	8e af       	std	Y+62, r24	; 0x3e
    19b2:	49 c0       	rjmp	.+146    	; 0x1a46 <Command+0x848>
	else if (__tmp > 65535)
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	3f ef       	ldi	r19, 0xFF	; 255
    19b8:	4f e7       	ldi	r20, 0x7F	; 127
    19ba:	57 e4       	ldi	r21, 0x47	; 71
    19bc:	6a ad       	ldd	r22, Y+58	; 0x3a
    19be:	7b ad       	ldd	r23, Y+59	; 0x3b
    19c0:	8c ad       	ldd	r24, Y+60	; 0x3c
    19c2:	9d ad       	ldd	r25, Y+61	; 0x3d
    19c4:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
    19c8:	18 16       	cp	r1, r24
    19ca:	a4 f5       	brge	.+104    	; 0x1a34 <Command+0x836>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e2       	ldi	r20, 0x20	; 32
    19d2:	51 e4       	ldi	r21, 0x41	; 65
    19d4:	6e a9       	ldd	r22, Y+54	; 0x36
    19d6:	7f a9       	ldd	r23, Y+55	; 0x37
    19d8:	88 ad       	ldd	r24, Y+56	; 0x38
    19da:	99 ad       	ldd	r25, Y+57	; 0x39
    19dc:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	bc 01       	movw	r22, r24
    19e6:	cd 01       	movw	r24, r26
    19e8:	e8 d7       	rcall	.+4048   	; 0x29ba <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	9f af       	std	Y+63, r25	; 0x3f
    19f0:	8e af       	std	Y+62, r24	; 0x3e
    19f2:	1b c0       	rjmp	.+54     	; 0x1a2a <Command+0x82c>
    19f4:	ce 01       	movw	r24, r28
    19f6:	80 5c       	subi	r24, 0xC0	; 192
    19f8:	9f 4f       	sbci	r25, 0xFF	; 255
    19fa:	20 e9       	ldi	r18, 0x90	; 144
    19fc:	31 e0       	ldi	r19, 0x01	; 1
    19fe:	fc 01       	movw	r30, r24
    1a00:	31 83       	std	Z+1, r19	; 0x01
    1a02:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a04:	ce 01       	movw	r24, r28
    1a06:	80 5c       	subi	r24, 0xC0	; 192
    1a08:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	80 81       	ld	r24, Z
    1a0e:	91 81       	ldd	r25, Z+1	; 0x01
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <Command+0x812>
    1a14:	9e 01       	movw	r18, r28
    1a16:	20 5c       	subi	r18, 0xC0	; 192
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	f9 01       	movw	r30, r18
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a20:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a22:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	9f af       	std	Y+63, r25	; 0x3f
    1a28:	8e af       	std	Y+62, r24	; 0x3e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a2e:	89 2b       	or	r24, r25
    1a30:	09 f7       	brne	.-62     	; 0x19f4 <Command+0x7f6>
    1a32:	5c c0       	rjmp	.+184    	; 0x1aec <Command+0x8ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a34:	6a ad       	ldd	r22, Y+58	; 0x3a
    1a36:	7b ad       	ldd	r23, Y+59	; 0x3b
    1a38:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a3a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a3c:	be d7       	rcall	.+3964   	; 0x29ba <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9f af       	std	Y+63, r25	; 0x3f
    1a44:	8e af       	std	Y+62, r24	; 0x3e
    1a46:	ce 01       	movw	r24, r28
    1a48:	8e 5b       	subi	r24, 0xBE	; 190
    1a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a4e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a50:	fc 01       	movw	r30, r24
    1a52:	31 83       	std	Z+1, r19	; 0x01
    1a54:	20 83       	st	Z, r18
    1a56:	ce 01       	movw	r24, r28
    1a58:	8e 5b       	subi	r24, 0xBE	; 190
    1a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	80 81       	ld	r24, Z
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <Command+0x864>
    1a66:	9e 01       	movw	r18, r28
    1a68:	2e 5b       	subi	r18, 0xBE	; 190
    1a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6c:	f9 01       	movw	r30, r18
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	80 83       	st	Z, r24
    1a72:	3c c0       	rjmp	.+120    	; 0x1aec <Command+0x8ee>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	4f e7       	ldi	r20, 0x7F	; 127
    1a7a:	53 e4       	ldi	r21, 0x43	; 67
    1a7c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a7e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a82:	98 a9       	ldd	r25, Y+48	; 0x30
    1a84:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__gesf2>
    1a88:	18 16       	cp	r1, r24
    1a8a:	44 f5       	brge	.+80     	; 0x1adc <Command+0x8de>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1a8c:	8e 01       	movw	r16, r28
    1a8e:	0c 5b       	subi	r16, 0xBC	; 188
    1a90:	1f 4f       	sbci	r17, 0xFF	; 255
    1a92:	69 a9       	ldd	r22, Y+49	; 0x31
    1a94:	7a a9       	ldd	r23, Y+50	; 0x32
    1a96:	8b a9       	ldd	r24, Y+51	; 0x33
    1a98:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9a:	8f d7       	rcall	.+3870   	; 0x29ba <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	f8 01       	movw	r30, r16
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	8a 5b       	subi	r24, 0xBA	; 186
    1aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1aac:	9e 01       	movw	r18, r28
    1aae:	2c 5b       	subi	r18, 0xBC	; 188
    1ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab2:	f9 01       	movw	r30, r18
    1ab4:	20 81       	ld	r18, Z
    1ab6:	31 81       	ldd	r19, Z+1	; 0x01
    1ab8:	fc 01       	movw	r30, r24
    1aba:	31 83       	std	Z+1, r19	; 0x01
    1abc:	20 83       	st	Z, r18
    1abe:	ce 01       	movw	r24, r28
    1ac0:	8a 5b       	subi	r24, 0xBA	; 186
    1ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	80 81       	ld	r24, Z
    1ac8:	91 81       	ldd	r25, Z+1	; 0x01
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <Command+0x8cc>
    1ace:	9e 01       	movw	r18, r28
    1ad0:	2a 5b       	subi	r18, 0xBA	; 186
    1ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad4:	f9 01       	movw	r30, r18
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	80 83       	st	Z, r24
    1ada:	1b c0       	rjmp	.+54     	; 0x1b12 <Command+0x914>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1adc:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ade:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ae0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae4:	6a d7       	rcall	.+3796   	; 0x29ba <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	8d ab       	std	Y+53, r24	; 0x35
    1aec:	ce 01       	movw	r24, r28
    1aee:	88 5b       	subi	r24, 0xB8	; 184
    1af0:	9f 4f       	sbci	r25, 0xFF	; 255
    1af2:	2d a9       	ldd	r18, Y+53	; 0x35
    1af4:	fc 01       	movw	r30, r24
    1af6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1af8:	ce 01       	movw	r24, r28
    1afa:	88 5b       	subi	r24, 0xB8	; 184
    1afc:	9f 4f       	sbci	r25, 0xFF	; 255
    1afe:	fc 01       	movw	r30, r24
    1b00:	80 81       	ld	r24, Z
    1b02:	28 2f       	mov	r18, r24
    1b04:	2a 95       	dec	r18
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <Command+0x906>
    1b08:	ce 01       	movw	r24, r28
    1b0a:	88 5b       	subi	r24, 0xB8	; 184
    1b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0e:	fc 01       	movw	r30, r24
    1b10:	20 83       	st	Z, r18

	_delay_us(1);
	ENH; // E = 1
    1b12:	85 e3       	ldi	r24, 0x35	; 53
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	25 e3       	ldi	r18, 0x35	; 53
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	f9 01       	movw	r30, r18
    1b1c:	20 81       	ld	r18, Z
    1b1e:	24 60       	ori	r18, 0x04	; 4
    1b20:	fc 01       	movw	r30, r24
    1b22:	20 83       	st	Z, r18
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a0 e8       	ldi	r26, 0x80	; 128
    1b2a:	bf e3       	ldi	r27, 0x3F	; 63
    1b2c:	8d 87       	std	Y+13, r24	; 0x0d
    1b2e:	9e 87       	std	Y+14, r25	; 0x0e
    1b30:	af 87       	std	Y+15, r26	; 0x0f
    1b32:	b8 8b       	std	Y+16, r27	; 0x10
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1b34:	2b ea       	ldi	r18, 0xAB	; 171
    1b36:	3a ea       	ldi	r19, 0xAA	; 170
    1b38:	4a ea       	ldi	r20, 0xAA	; 170
    1b3a:	50 e4       	ldi	r21, 0x40	; 64
    1b3c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b3e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b42:	98 89       	ldd	r25, Y+16	; 0x10
    1b44:	df d7       	rcall	.+4030   	; 0x2b04 <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	89 8b       	std	Y+17, r24	; 0x11
    1b4c:	9a 8b       	std	Y+18, r25	; 0x12
    1b4e:	ab 8b       	std	Y+19, r26	; 0x13
    1b50:	bc 8b       	std	Y+20, r27	; 0x14
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e8       	ldi	r20, 0x80	; 128
    1b58:	50 e4       	ldi	r21, 0x40	; 64
    1b5a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b5c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b60:	98 89       	ldd	r25, Y+16	; 0x10
    1b62:	d0 d7       	rcall	.+4000   	; 0x2b04 <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	8d 8b       	std	Y+21, r24	; 0x15
    1b6a:	9e 8b       	std	Y+22, r25	; 0x16
    1b6c:	af 8b       	std	Y+23, r26	; 0x17
    1b6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e8       	ldi	r20, 0x80	; 128
    1b76:	5f e3       	ldi	r21, 0x3F	; 63
    1b78:	69 89       	ldd	r22, Y+17	; 0x11
    1b7a:	7a 89       	ldd	r23, Y+18	; 0x12
    1b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b80:	b0 d6       	rcall	.+3424   	; 0x28e2 <__cmpsf2>
    1b82:	88 23       	and	r24, r24
    1b84:	1c f4       	brge	.+6      	; 0x1b8c <Command+0x98e>
		__ticks = 1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	89 8f       	std	Y+25, r24	; 0x19
	else if (__tmp2 > 65535)
    1b8a:	a7 c0       	rjmp	.+334    	; 0x1cda <Command+0xadc>
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	3f ef       	ldi	r19, 0xFF	; 255
    1b90:	4f e7       	ldi	r20, 0x7F	; 127
    1b92:	57 e4       	ldi	r21, 0x47	; 71
    1b94:	6d 89       	ldd	r22, Y+21	; 0x15
    1b96:	7e 89       	ldd	r23, Y+22	; 0x16
    1b98:	8f 89       	ldd	r24, Y+23	; 0x17
    1b9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b9c:	af d7       	rcall	.+3934   	; 0x2afc <__gesf2>
    1b9e:	18 16       	cp	r1, r24
    1ba0:	0c f0       	brlt	.+2      	; 0x1ba4 <Command+0x9a6>
    1ba2:	74 c0       	rjmp	.+232    	; 0x1c8c <Command+0xa8e>
	{
		_delay_ms(__us / 1000.0);
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	4a e7       	ldi	r20, 0x7A	; 122
    1baa:	54 e4       	ldi	r21, 0x44	; 68
    1bac:	6d 85       	ldd	r22, Y+13	; 0x0d
    1bae:	7e 85       	ldd	r23, Y+14	; 0x0e
    1bb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb2:	98 89       	ldd	r25, Y+16	; 0x10
    1bb4:	9a d6       	rcall	.+3380   	; 0x28ea <__divsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	8a 8f       	std	Y+26, r24	; 0x1a
    1bbc:	9b 8f       	std	Y+27, r25	; 0x1b
    1bbe:	ac 8f       	std	Y+28, r26	; 0x1c
    1bc0:	bd 8f       	std	Y+29, r27	; 0x1d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	4a e7       	ldi	r20, 0x7A	; 122
    1bc8:	55 e4       	ldi	r21, 0x45	; 69
    1bca:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bcc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bd0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bd2:	98 d7       	rcall	.+3888   	; 0x2b04 <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	8e 8f       	std	Y+30, r24	; 0x1e
    1bda:	9f 8f       	std	Y+31, r25	; 0x1f
    1bdc:	a8 a3       	std	Y+32, r26	; 0x20
    1bde:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1bea:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1bec:	88 a1       	ldd	r24, Y+32	; 0x20
    1bee:	99 a1       	ldd	r25, Y+33	; 0x21
    1bf0:	78 d6       	rcall	.+3312   	; 0x28e2 <__cmpsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	2c f4       	brge	.+10     	; 0x1c00 <Command+0xa02>
		__ticks = 1;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	9b a3       	std	Y+35, r25	; 0x23
    1bfc:	8a a3       	std	Y+34, r24	; 0x22
    1bfe:	3b c0       	rjmp	.+118    	; 0x1c76 <Command+0xa78>
	else if (__tmp > 65535)
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	3f ef       	ldi	r19, 0xFF	; 255
    1c04:	4f e7       	ldi	r20, 0x7F	; 127
    1c06:	57 e4       	ldi	r21, 0x47	; 71
    1c08:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1c0a:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1c0c:	88 a1       	ldd	r24, Y+32	; 0x20
    1c0e:	99 a1       	ldd	r25, Y+33	; 0x21
    1c10:	75 d7       	rcall	.+3818   	; 0x2afc <__gesf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	3c f5       	brge	.+78     	; 0x1c64 <Command+0xa66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e2       	ldi	r20, 0x20	; 32
    1c1c:	51 e4       	ldi	r21, 0x41	; 65
    1c1e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c20:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c22:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c24:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c26:	6e d7       	rcall	.+3804   	; 0x2b04 <__mulsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	c4 d6       	rcall	.+3464   	; 0x29ba <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	9b a3       	std	Y+35, r25	; 0x23
    1c38:	8a a3       	std	Y+34, r24	; 0x22
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <Command+0xa5c>
    1c3c:	80 e9       	ldi	r24, 0x90	; 144
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	9d a3       	std	Y+37, r25	; 0x25
    1c42:	8c a3       	std	Y+36, r24	; 0x24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c44:	8c a1       	ldd	r24, Y+36	; 0x24
    1c46:	9d a1       	ldd	r25, Y+37	; 0x25
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <Command+0xa4a>
    1c4c:	9d a3       	std	Y+37, r25	; 0x25
    1c4e:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c50:	8a a1       	ldd	r24, Y+34	; 0x22
    1c52:	9b a1       	ldd	r25, Y+35	; 0x23
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	9b a3       	std	Y+35, r25	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c58:	8a a3       	std	Y+34, r24	; 0x22
    1c5a:	8a a1       	ldd	r24, Y+34	; 0x22
    1c5c:	9b a1       	ldd	r25, Y+35	; 0x23
    1c5e:	89 2b       	or	r24, r25
    1c60:	69 f7       	brne	.-38     	; 0x1c3c <Command+0xa3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c62:	3b c0       	rjmp	.+118    	; 0x1cda <Command+0xadc>
    1c64:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1c66:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1c68:	88 a1       	ldd	r24, Y+32	; 0x20
    1c6a:	99 a1       	ldd	r25, Y+33	; 0x21
    1c6c:	a6 d6       	rcall	.+3404   	; 0x29ba <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	9b a3       	std	Y+35, r25	; 0x23
    1c74:	8a a3       	std	Y+34, r24	; 0x22
    1c76:	8a a1       	ldd	r24, Y+34	; 0x22
    1c78:	9b a1       	ldd	r25, Y+35	; 0x23
    1c7a:	9f a3       	std	Y+39, r25	; 0x27
    1c7c:	8e a3       	std	Y+38, r24	; 0x26
    1c7e:	8e a1       	ldd	r24, Y+38	; 0x26
    1c80:	9f a1       	ldd	r25, Y+39	; 0x27
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <Command+0xa84>
    1c86:	9f a3       	std	Y+39, r25	; 0x27
    1c88:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1c8a:	27 c0       	rjmp	.+78     	; 0x1cda <Command+0xadc>
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	4f e7       	ldi	r20, 0x7F	; 127
    1c92:	53 e4       	ldi	r21, 0x43	; 67
    1c94:	69 89       	ldd	r22, Y+17	; 0x11
    1c96:	7a 89       	ldd	r23, Y+18	; 0x12
    1c98:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9c:	2f d7       	rcall	.+3678   	; 0x2afc <__gesf2>
    1c9e:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1ca0:	a4 f4       	brge	.+40     	; 0x1cca <Command+0xacc>
    1ca2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca8:	98 8d       	ldd	r25, Y+24	; 0x18
    1caa:	87 d6       	rcall	.+3342   	; 0x29ba <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	99 a7       	std	Y+41, r25	; 0x29
    1cb2:	88 a7       	std	Y+40, r24	; 0x28
    1cb4:	88 a5       	ldd	r24, Y+40	; 0x28
    1cb6:	99 a5       	ldd	r25, Y+41	; 0x29
    1cb8:	9b a7       	std	Y+43, r25	; 0x2b
    1cba:	8a a7       	std	Y+42, r24	; 0x2a
    1cbc:	8a a5       	ldd	r24, Y+42	; 0x2a
    1cbe:	9b a5       	ldd	r25, Y+43	; 0x2b
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <Command+0xac2>
    1cc4:	9b a7       	std	Y+43, r25	; 0x2b
    1cc6:	8a a7       	std	Y+42, r24	; 0x2a
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cc8:	0e c0       	rjmp	.+28     	; 0x1ce6 <Command+0xae8>
    1cca:	69 89       	ldd	r22, Y+17	; 0x11
    1ccc:	7a 89       	ldd	r23, Y+18	; 0x12
    1cce:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd2:	73 d6       	rcall	.+3302   	; 0x29ba <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	89 8f       	std	Y+25, r24	; 0x19
    1cda:	89 8d       	ldd	r24, Y+25	; 0x19
    1cdc:	8c a7       	std	Y+44, r24	; 0x2c
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cde:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ce0:	8a 95       	dec	r24
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <Command+0xae2>
    1ce4:	8c a7       	std	Y+44, r24	; 0x2c

	_delay_us(1);
	ENL; // E = 0
    1ce6:	85 e3       	ldi	r24, 0x35	; 53
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	25 e3       	ldi	r18, 0x35	; 53
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	f9 01       	movw	r30, r18
    1cf0:	20 81       	ld	r18, Z
    1cf2:	2b 7f       	andi	r18, 0xFB	; 251
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	20 83       	st	Z, r18
}
    1cf8:	00 00       	nop
    1cfa:	cf 57       	subi	r28, 0x7F	; 127
    1cfc:	df 4f       	sbci	r29, 0xFF	; 255
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	1f 91       	pop	r17
    1d0e:	0f 91       	pop	r16
    1d10:	08 95       	ret

00001d12 <Data>:

void Data(u_char byte)
{
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	c1 58       	subi	r28, 0x81	; 129
    1d20:	d1 09       	sbc	r29, r1
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	9e 01       	movw	r18, r28
    1d2e:	2f 57       	subi	r18, 0x7F	; 127
    1d30:	3f 4f       	sbci	r19, 0xFF	; 255
    1d32:	f9 01       	movw	r30, r18
    1d34:	80 83       	st	Z, r24
	Busy();
    1d36:	55 d5       	rcall	.+2730   	; 0x27e2 <Busy>
	// 데이터 상위 4비트
	PORTC = 0x01; // RS=1, RW=0
    1d38:	85 e3       	ldi	r24, 0x35	; 53
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	21 e0       	ldi	r18, 0x01	; 1
    1d3e:	fc 01       	movw	r30, r24
    1d40:	20 83       	st	Z, r18
	PORTC |= (byte & 0xF0); // 데이터 상위 4비트
    1d42:	85 e3       	ldi	r24, 0x35	; 53
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	25 e3       	ldi	r18, 0x35	; 53
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	f9 01       	movw	r30, r18
    1d4c:	20 81       	ld	r18, Z
    1d4e:	42 2f       	mov	r20, r18
    1d50:	9e 01       	movw	r18, r28
    1d52:	2f 57       	subi	r18, 0x7F	; 127
    1d54:	3f 4f       	sbci	r19, 0xFF	; 255
    1d56:	f9 01       	movw	r30, r18
    1d58:	20 81       	ld	r18, Z
    1d5a:	20 7f       	andi	r18, 0xF0	; 240
    1d5c:	24 2b       	or	r18, r20
    1d5e:	fc 01       	movw	r30, r24
    1d60:	20 83       	st	Z, r18
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a0 e8       	ldi	r26, 0x80	; 128
    1d68:	bf e3       	ldi	r27, 0x3F	; 63
    1d6a:	89 83       	std	Y+1, r24	; 0x01
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	ab 83       	std	Y+3, r26	; 0x03
    1d70:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1d72:	8e 01       	movw	r16, r28
    1d74:	0b 59       	subi	r16, 0x9B	; 155
    1d76:	1f 4f       	sbci	r17, 0xFF	; 255
    1d78:	2b ea       	ldi	r18, 0xAB	; 171
    1d7a:	3a ea       	ldi	r19, 0xAA	; 170
    1d7c:	4a ea       	ldi	r20, 0xAA	; 170
    1d7e:	50 e4       	ldi	r21, 0x40	; 64
    1d80:	69 81       	ldd	r22, Y+1	; 0x01
    1d82:	7a 81       	ldd	r23, Y+2	; 0x02
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	bd d6       	rcall	.+3450   	; 0x2b04 <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	f8 01       	movw	r30, r16
    1d90:	80 83       	st	Z, r24
    1d92:	91 83       	std	Z+1, r25	; 0x01
    1d94:	a2 83       	std	Z+2, r26	; 0x02
    1d96:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1d98:	8e 01       	movw	r16, r28
    1d9a:	07 59       	subi	r16, 0x97	; 151
    1d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e8       	ldi	r20, 0x80	; 128
    1da4:	50 e4       	ldi	r21, 0x40	; 64
    1da6:	69 81       	ldd	r22, Y+1	; 0x01
    1da8:	7a 81       	ldd	r23, Y+2	; 0x02
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	aa d6       	rcall	.+3412   	; 0x2b04 <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	f8 01       	movw	r30, r16
    1db6:	80 83       	st	Z, r24
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	a2 83       	std	Z+2, r26	; 0x02
    1dbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	8b 59       	subi	r24, 0x9B	; 155
    1dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	fc 01       	movw	r30, r24
    1dce:	60 81       	ld	r22, Z
    1dd0:	71 81       	ldd	r23, Z+1	; 0x01
    1dd2:	82 81       	ldd	r24, Z+2	; 0x02
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	85 d5       	rcall	.+2826   	; 0x28e2 <__cmpsf2>
    1dd8:	88 23       	and	r24, r24
    1dda:	3c f4       	brge	.+14     	; 0x1dea <Data+0xd8>
		__ticks = 1;
    1ddc:	ce 01       	movw	r24, r28
    1dde:	83 59       	subi	r24, 0x93	; 147
    1de0:	9f 4f       	sbci	r25, 0xFF	; 255
    1de2:	21 e0       	ldi	r18, 0x01	; 1
    1de4:	fc 01       	movw	r30, r24
    1de6:	20 83       	st	Z, r18
    1de8:	21 c1       	rjmp	.+578    	; 0x202c <Data+0x31a>
	else if (__tmp2 > 65535)
    1dea:	ce 01       	movw	r24, r28
    1dec:	87 59       	subi	r24, 0x97	; 151
    1dee:	9f 4f       	sbci	r25, 0xFF	; 255
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	3f ef       	ldi	r19, 0xFF	; 255
    1df4:	4f e7       	ldi	r20, 0x7F	; 127
    1df6:	57 e4       	ldi	r21, 0x47	; 71
    1df8:	fc 01       	movw	r30, r24
    1dfa:	60 81       	ld	r22, Z
    1dfc:	71 81       	ldd	r23, Z+1	; 0x01
    1dfe:	82 81       	ldd	r24, Z+2	; 0x02
    1e00:	93 81       	ldd	r25, Z+3	; 0x03
    1e02:	7c d6       	rcall	.+3320   	; 0x2afc <__gesf2>
    1e04:	18 16       	cp	r1, r24
    1e06:	0c f0       	brlt	.+2      	; 0x1e0a <Data+0xf8>
    1e08:	c6 c0       	rjmp	.+396    	; 0x1f96 <Data+0x284>
	{
		_delay_ms(__us / 1000.0);
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	4a e7       	ldi	r20, 0x7A	; 122
    1e10:	54 e4       	ldi	r21, 0x44	; 68
    1e12:	69 81       	ldd	r22, Y+1	; 0x01
    1e14:	7a 81       	ldd	r23, Y+2	; 0x02
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1a:	67 d5       	rcall	.+2766   	; 0x28ea <__divsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9e 01       	movw	r18, r28
    1e22:	22 59       	subi	r18, 0x92	; 146
    1e24:	3f 4f       	sbci	r19, 0xFF	; 255
    1e26:	f9 01       	movw	r30, r18
    1e28:	80 83       	st	Z, r24
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	a2 83       	std	Z+2, r26	; 0x02
    1e2e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e30:	8e 01       	movw	r16, r28
    1e32:	0e 58       	subi	r16, 0x8E	; 142
    1e34:	1f 4f       	sbci	r17, 0xFF	; 255
    1e36:	ce 01       	movw	r24, r28
    1e38:	82 59       	subi	r24, 0x92	; 146
    1e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	4a e7       	ldi	r20, 0x7A	; 122
    1e42:	55 e4       	ldi	r21, 0x45	; 69
    1e44:	fc 01       	movw	r30, r24
    1e46:	60 81       	ld	r22, Z
    1e48:	71 81       	ldd	r23, Z+1	; 0x01
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	93 81       	ldd	r25, Z+3	; 0x03
    1e4e:	5a d6       	rcall	.+3252   	; 0x2b04 <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	f8 01       	movw	r30, r16
    1e56:	80 83       	st	Z, r24
    1e58:	91 83       	std	Z+1, r25	; 0x01
    1e5a:	a2 83       	std	Z+2, r26	; 0x02
    1e5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e5e:	ce 01       	movw	r24, r28
    1e60:	8e 58       	subi	r24, 0x8E	; 142
    1e62:	9f 4f       	sbci	r25, 0xFF	; 255
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	35 d5       	rcall	.+2666   	; 0x28e2 <__cmpsf2>
    1e78:	88 23       	and	r24, r24
    1e7a:	4c f4       	brge	.+18     	; 0x1e8e <Data+0x17c>
		__ticks = 1;
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	8a 58       	subi	r24, 0x8A	; 138
    1e80:	9f 4f       	sbci	r25, 0xFF	; 255
    1e82:	21 e0       	ldi	r18, 0x01	; 1
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	fc 01       	movw	r30, r24
    1e88:	31 83       	std	Z+1, r19	; 0x01
    1e8a:	20 83       	st	Z, r18
    1e8c:	69 c0       	rjmp	.+210    	; 0x1f60 <Data+0x24e>
	else if (__tmp > 65535)
    1e8e:	ce 01       	movw	r24, r28
    1e90:	8e 58       	subi	r24, 0x8E	; 142
    1e92:	9f 4f       	sbci	r25, 0xFF	; 255
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	3f ef       	ldi	r19, 0xFF	; 255
    1e98:	4f e7       	ldi	r20, 0x7F	; 127
    1e9a:	57 e4       	ldi	r21, 0x47	; 71
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	60 81       	ld	r22, Z
    1ea0:	71 81       	ldd	r23, Z+1	; 0x01
    1ea2:	82 81       	ldd	r24, Z+2	; 0x02
    1ea4:	93 81       	ldd	r25, Z+3	; 0x03
    1ea6:	2a d6       	rcall	.+3156   	; 0x2afc <__gesf2>
    1ea8:	18 16       	cp	r1, r24
    1eaa:	0c f0       	brlt	.+2      	; 0x1eae <Data+0x19c>
    1eac:	48 c0       	rjmp	.+144    	; 0x1f3e <Data+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eae:	ce 01       	movw	r24, r28
    1eb0:	82 59       	subi	r24, 0x92	; 146
    1eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e2       	ldi	r20, 0x20	; 32
    1eba:	51 e4       	ldi	r21, 0x41	; 65
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	60 81       	ld	r22, Z
    1ec0:	71 81       	ldd	r23, Z+1	; 0x01
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	1e d6       	rcall	.+3132   	; 0x2b04 <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	8e 01       	movw	r16, r28
    1ece:	0a 58       	subi	r16, 0x8A	; 138
    1ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	71 d5       	rcall	.+2786   	; 0x29ba <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	f8 01       	movw	r30, r16
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	80 83       	st	Z, r24
    1ee2:	24 c0       	rjmp	.+72     	; 0x1f2c <Data+0x21a>
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	88 58       	subi	r24, 0x88	; 136
    1ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eea:	20 e9       	ldi	r18, 0x90	; 144
    1eec:	31 e0       	ldi	r19, 0x01	; 1
    1eee:	fc 01       	movw	r30, r24
    1ef0:	31 83       	std	Z+1, r19	; 0x01
    1ef2:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	88 58       	subi	r24, 0x88	; 136
    1ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    1efa:	fc 01       	movw	r30, r24
    1efc:	80 81       	ld	r24, Z
    1efe:	91 81       	ldd	r25, Z+1	; 0x01
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <Data+0x1ee>
    1f04:	9e 01       	movw	r18, r28
    1f06:	28 58       	subi	r18, 0x88	; 136
    1f08:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0a:	f9 01       	movw	r30, r18
    1f0c:	91 83       	std	Z+1, r25	; 0x01
    1f0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	ce 01       	movw	r24, r28
    1f12:	8a 58       	subi	r24, 0x8A	; 138
    1f14:	9f 4f       	sbci	r25, 0xFF	; 255
    1f16:	9e 01       	movw	r18, r28
    1f18:	2a 58       	subi	r18, 0x8A	; 138
    1f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1c:	f9 01       	movw	r30, r18
    1f1e:	20 81       	ld	r18, Z
    1f20:	31 81       	ldd	r19, Z+1	; 0x01
    1f22:	21 50       	subi	r18, 0x01	; 1
    1f24:	31 09       	sbc	r19, r1
    1f26:	fc 01       	movw	r30, r24
    1f28:	31 83       	std	Z+1, r19	; 0x01
    1f2a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	8a 58       	subi	r24, 0x8A	; 138
    1f30:	9f 4f       	sbci	r25, 0xFF	; 255
    1f32:	fc 01       	movw	r30, r24
    1f34:	80 81       	ld	r24, Z
    1f36:	91 81       	ldd	r25, Z+1	; 0x01
    1f38:	89 2b       	or	r24, r25
    1f3a:	a1 f6       	brne	.-88     	; 0x1ee4 <Data+0x1d2>
    1f3c:	77 c0       	rjmp	.+238    	; 0x202c <Data+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3e:	8e 01       	movw	r16, r28
    1f40:	0a 58       	subi	r16, 0x8A	; 138
    1f42:	1f 4f       	sbci	r17, 0xFF	; 255
    1f44:	ce 01       	movw	r24, r28
    1f46:	8e 58       	subi	r24, 0x8E	; 142
    1f48:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	60 81       	ld	r22, Z
    1f4e:	71 81       	ldd	r23, Z+1	; 0x01
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	93 81       	ldd	r25, Z+3	; 0x03
    1f54:	32 d5       	rcall	.+2660   	; 0x29ba <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	f8 01       	movw	r30, r16
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	80 83       	st	Z, r24
    1f60:	ce 01       	movw	r24, r28
    1f62:	86 58       	subi	r24, 0x86	; 134
    1f64:	9f 4f       	sbci	r25, 0xFF	; 255
    1f66:	9e 01       	movw	r18, r28
    1f68:	2a 58       	subi	r18, 0x8A	; 138
    1f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6c:	f9 01       	movw	r30, r18
    1f6e:	20 81       	ld	r18, Z
    1f70:	31 81       	ldd	r19, Z+1	; 0x01
    1f72:	fc 01       	movw	r30, r24
    1f74:	31 83       	std	Z+1, r19	; 0x01
    1f76:	20 83       	st	Z, r18
    1f78:	ce 01       	movw	r24, r28
    1f7a:	86 58       	subi	r24, 0x86	; 134
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	fc 01       	movw	r30, r24
    1f80:	80 81       	ld	r24, Z
    1f82:	91 81       	ldd	r25, Z+1	; 0x01
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <Data+0x272>
    1f88:	9e 01       	movw	r18, r28
    1f8a:	26 58       	subi	r18, 0x86	; 134
    1f8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8e:	f9 01       	movw	r30, r18
    1f90:	91 83       	std	Z+1, r25	; 0x01
    1f92:	80 83       	st	Z, r24
    1f94:	4b c0       	rjmp	.+150    	; 0x202c <Data+0x31a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1f96:	ce 01       	movw	r24, r28
    1f98:	8b 59       	subi	r24, 0x9B	; 155
    1f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	4f e7       	ldi	r20, 0x7F	; 127
    1fa2:	53 e4       	ldi	r21, 0x43	; 67
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	60 81       	ld	r22, Z
    1fa8:	71 81       	ldd	r23, Z+1	; 0x01
    1faa:	82 81       	ldd	r24, Z+2	; 0x02
    1fac:	93 81       	ldd	r25, Z+3	; 0x03
    1fae:	a6 d5       	rcall	.+2892   	; 0x2afc <__gesf2>
    1fb0:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1fb2:	64 f5       	brge	.+88     	; 0x200c <Data+0x2fa>
    1fb4:	8e 01       	movw	r16, r28
    1fb6:	04 58       	subi	r16, 0x84	; 132
    1fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fba:	ce 01       	movw	r24, r28
    1fbc:	87 59       	subi	r24, 0x97	; 151
    1fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	60 81       	ld	r22, Z
    1fc4:	71 81       	ldd	r23, Z+1	; 0x01
    1fc6:	82 81       	ldd	r24, Z+2	; 0x02
    1fc8:	93 81       	ldd	r25, Z+3	; 0x03
    1fca:	f7 d4       	rcall	.+2542   	; 0x29ba <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	f8 01       	movw	r30, r16
    1fd2:	91 83       	std	Z+1, r25	; 0x01
    1fd4:	80 83       	st	Z, r24
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	82 58       	subi	r24, 0x82	; 130
    1fda:	9f 4f       	sbci	r25, 0xFF	; 255
    1fdc:	9e 01       	movw	r18, r28
    1fde:	24 58       	subi	r18, 0x84	; 132
    1fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe2:	f9 01       	movw	r30, r18
    1fe4:	20 81       	ld	r18, Z
    1fe6:	31 81       	ldd	r19, Z+1	; 0x01
    1fe8:	fc 01       	movw	r30, r24
    1fea:	31 83       	std	Z+1, r19	; 0x01
    1fec:	20 83       	st	Z, r18
    1fee:	ce 01       	movw	r24, r28
    1ff0:	82 58       	subi	r24, 0x82	; 130
    1ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	80 81       	ld	r24, Z
    1ff8:	91 81       	ldd	r25, Z+1	; 0x01
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <Data+0x2e8>
    1ffe:	9e 01       	movw	r18, r28
    2000:	22 58       	subi	r18, 0x82	; 130
    2002:	3f 4f       	sbci	r19, 0xFF	; 255
    2004:	f9 01       	movw	r30, r18
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	80 83       	st	Z, r24
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    200a:	27 c0       	rjmp	.+78     	; 0x205a <Data+0x348>
    200c:	8e 01       	movw	r16, r28
    200e:	03 59       	subi	r16, 0x93	; 147
    2010:	1f 4f       	sbci	r17, 0xFF	; 255
    2012:	ce 01       	movw	r24, r28
    2014:	8b 59       	subi	r24, 0x9B	; 155
    2016:	9f 4f       	sbci	r25, 0xFF	; 255
    2018:	fc 01       	movw	r30, r24
    201a:	60 81       	ld	r22, Z
    201c:	71 81       	ldd	r23, Z+1	; 0x01
    201e:	82 81       	ldd	r24, Z+2	; 0x02
    2020:	93 81       	ldd	r25, Z+3	; 0x03
    2022:	cb d4       	rcall	.+2454   	; 0x29ba <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	f8 01       	movw	r30, r16
    202a:	80 83       	st	Z, r24
    202c:	ce 01       	movw	r24, r28
    202e:	80 58       	subi	r24, 0x80	; 128
    2030:	9f 4f       	sbci	r25, 0xFF	; 255
    2032:	9e 01       	movw	r18, r28
    2034:	23 59       	subi	r18, 0x93	; 147
    2036:	3f 4f       	sbci	r19, 0xFF	; 255
    2038:	f9 01       	movw	r30, r18
    203a:	20 81       	ld	r18, Z
    203c:	fc 01       	movw	r30, r24
    203e:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2040:	ce 01       	movw	r24, r28
    2042:	80 58       	subi	r24, 0x80	; 128
    2044:	9f 4f       	sbci	r25, 0xFF	; 255
    2046:	fc 01       	movw	r30, r24
    2048:	80 81       	ld	r24, Z
    204a:	28 2f       	mov	r18, r24
    204c:	2a 95       	dec	r18
    204e:	f1 f7       	brne	.-4      	; 0x204c <Data+0x33a>
    2050:	ce 01       	movw	r24, r28
    2052:	80 58       	subi	r24, 0x80	; 128
    2054:	9f 4f       	sbci	r25, 0xFF	; 255
    2056:	fc 01       	movw	r30, r24
    2058:	20 83       	st	Z, r18
	_delay_us(1);
	ENH; // E = 1
    205a:	85 e3       	ldi	r24, 0x35	; 53
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	25 e3       	ldi	r18, 0x35	; 53
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	f9 01       	movw	r30, r18
    2064:	20 81       	ld	r18, Z
    2066:	24 60       	ori	r18, 0x04	; 4
    2068:	fc 01       	movw	r30, r24
    206a:	20 83       	st	Z, r18
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e8       	ldi	r26, 0x80	; 128
    2072:	bf e3       	ldi	r27, 0x3F	; 63
    2074:	8d 83       	std	Y+5, r24	; 0x05
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	af 83       	std	Y+7, r26	; 0x07
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    207a:	b8 87       	std	Y+8, r27	; 0x08
    207c:	8e 01       	movw	r16, r28
    207e:	07 5b       	subi	r16, 0xB7	; 183
    2080:	1f 4f       	sbci	r17, 0xFF	; 255
    2082:	2b ea       	ldi	r18, 0xAB	; 171
    2084:	3a ea       	ldi	r19, 0xAA	; 170
    2086:	4a ea       	ldi	r20, 0xAA	; 170
    2088:	50 e4       	ldi	r21, 0x40	; 64
    208a:	6d 81       	ldd	r22, Y+5	; 0x05
    208c:	7e 81       	ldd	r23, Y+6	; 0x06
    208e:	8f 81       	ldd	r24, Y+7	; 0x07
    2090:	98 85       	ldd	r25, Y+8	; 0x08
    2092:	38 d5       	rcall	.+2672   	; 0x2b04 <__mulsf3>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	f8 01       	movw	r30, r16
    209a:	80 83       	st	Z, r24
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	a2 83       	std	Z+2, r26	; 0x02
	__tmp2 = ((F_CPU) / 4e6) * __us;
    20a0:	b3 83       	std	Z+3, r27	; 0x03
    20a2:	8e 01       	movw	r16, r28
    20a4:	03 5b       	subi	r16, 0xB3	; 179
    20a6:	1f 4f       	sbci	r17, 0xFF	; 255
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e8       	ldi	r20, 0x80	; 128
    20ae:	50 e4       	ldi	r21, 0x40	; 64
    20b0:	6d 81       	ldd	r22, Y+5	; 0x05
    20b2:	7e 81       	ldd	r23, Y+6	; 0x06
    20b4:	8f 81       	ldd	r24, Y+7	; 0x07
    20b6:	98 85       	ldd	r25, Y+8	; 0x08
    20b8:	25 d5       	rcall	.+2634   	; 0x2b04 <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	f8 01       	movw	r30, r16
    20c0:	80 83       	st	Z, r24
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	a2 83       	std	Z+2, r26	; 0x02
	if (__tmp < 1.0)
    20c6:	b3 83       	std	Z+3, r27	; 0x03
    20c8:	ce 01       	movw	r24, r28
    20ca:	87 5b       	subi	r24, 0xB7	; 183
    20cc:	9f 4f       	sbci	r25, 0xFF	; 255
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e8       	ldi	r20, 0x80	; 128
    20d4:	5f e3       	ldi	r21, 0x3F	; 63
    20d6:	fc 01       	movw	r30, r24
    20d8:	60 81       	ld	r22, Z
    20da:	71 81       	ldd	r23, Z+1	; 0x01
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	93 81       	ldd	r25, Z+3	; 0x03
    20e0:	00 d4       	rcall	.+2048   	; 0x28e2 <__cmpsf2>
    20e2:	88 23       	and	r24, r24
    20e4:	3c f4       	brge	.+14     	; 0x20f4 <Data+0x3e2>
		__ticks = 1;
    20e6:	ce 01       	movw	r24, r28
    20e8:	8f 5a       	subi	r24, 0xAF	; 175
    20ea:	9f 4f       	sbci	r25, 0xFF	; 255
    20ec:	21 e0       	ldi	r18, 0x01	; 1
    20ee:	fc 01       	movw	r30, r24
    20f0:	20 83       	st	Z, r18
	else if (__tmp2 > 65535)
    20f2:	21 c1       	rjmp	.+578    	; 0x2336 <Data+0x624>
    20f4:	ce 01       	movw	r24, r28
    20f6:	83 5b       	subi	r24, 0xB3	; 179
    20f8:	9f 4f       	sbci	r25, 0xFF	; 255
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	3f ef       	ldi	r19, 0xFF	; 255
    20fe:	4f e7       	ldi	r20, 0x7F	; 127
    2100:	57 e4       	ldi	r21, 0x47	; 71
    2102:	fc 01       	movw	r30, r24
    2104:	60 81       	ld	r22, Z
    2106:	71 81       	ldd	r23, Z+1	; 0x01
    2108:	82 81       	ldd	r24, Z+2	; 0x02
    210a:	93 81       	ldd	r25, Z+3	; 0x03
    210c:	f7 d4       	rcall	.+2542   	; 0x2afc <__gesf2>
    210e:	18 16       	cp	r1, r24
    2110:	0c f0       	brlt	.+2      	; 0x2114 <Data+0x402>
	{
		_delay_ms(__us / 1000.0);
    2112:	c6 c0       	rjmp	.+396    	; 0x22a0 <Data+0x58e>
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	4a e7       	ldi	r20, 0x7A	; 122
    211a:	54 e4       	ldi	r21, 0x44	; 68
    211c:	6d 81       	ldd	r22, Y+5	; 0x05
    211e:	7e 81       	ldd	r23, Y+6	; 0x06
    2120:	8f 81       	ldd	r24, Y+7	; 0x07
    2122:	98 85       	ldd	r25, Y+8	; 0x08
    2124:	e2 d3       	rcall	.+1988   	; 0x28ea <__divsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	9e 01       	movw	r18, r28
    212c:	2e 5a       	subi	r18, 0xAE	; 174
    212e:	3f 4f       	sbci	r19, 0xFF	; 255
    2130:	f9 01       	movw	r30, r18
    2132:	80 83       	st	Z, r24
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	a2 83       	std	Z+2, r26	; 0x02

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2138:	b3 83       	std	Z+3, r27	; 0x03
    213a:	8e 01       	movw	r16, r28
    213c:	0a 5a       	subi	r16, 0xAA	; 170
    213e:	1f 4f       	sbci	r17, 0xFF	; 255
    2140:	ce 01       	movw	r24, r28
    2142:	8e 5a       	subi	r24, 0xAE	; 174
    2144:	9f 4f       	sbci	r25, 0xFF	; 255
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a e7       	ldi	r20, 0x7A	; 122
    214c:	55 e4       	ldi	r21, 0x45	; 69
    214e:	fc 01       	movw	r30, r24
    2150:	60 81       	ld	r22, Z
    2152:	71 81       	ldd	r23, Z+1	; 0x01
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	d5 d4       	rcall	.+2474   	; 0x2b04 <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	f8 01       	movw	r30, r16
    2160:	80 83       	st	Z, r24
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	a2 83       	std	Z+2, r26	; 0x02
	if (__tmp < 1.0)
    2166:	b3 83       	std	Z+3, r27	; 0x03
    2168:	ce 01       	movw	r24, r28
    216a:	8a 5a       	subi	r24, 0xAA	; 170
    216c:	9f 4f       	sbci	r25, 0xFF	; 255
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	fc 01       	movw	r30, r24
    2178:	60 81       	ld	r22, Z
    217a:	71 81       	ldd	r23, Z+1	; 0x01
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	93 81       	ldd	r25, Z+3	; 0x03
    2180:	b0 d3       	rcall	.+1888   	; 0x28e2 <__cmpsf2>
    2182:	88 23       	and	r24, r24
		__ticks = 1;
    2184:	4c f4       	brge	.+18     	; 0x2198 <Data+0x486>
    2186:	ce 01       	movw	r24, r28
    2188:	86 5a       	subi	r24, 0xA6	; 166
    218a:	9f 4f       	sbci	r25, 0xFF	; 255
    218c:	21 e0       	ldi	r18, 0x01	; 1
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	fc 01       	movw	r30, r24
    2192:	31 83       	std	Z+1, r19	; 0x01
    2194:	20 83       	st	Z, r18
	else if (__tmp > 65535)
    2196:	69 c0       	rjmp	.+210    	; 0x226a <Data+0x558>
    2198:	ce 01       	movw	r24, r28
    219a:	8a 5a       	subi	r24, 0xAA	; 170
    219c:	9f 4f       	sbci	r25, 0xFF	; 255
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	3f ef       	ldi	r19, 0xFF	; 255
    21a2:	4f e7       	ldi	r20, 0x7F	; 127
    21a4:	57 e4       	ldi	r21, 0x47	; 71
    21a6:	fc 01       	movw	r30, r24
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	82 81       	ldd	r24, Z+2	; 0x02
    21ae:	93 81       	ldd	r25, Z+3	; 0x03
    21b0:	a5 d4       	rcall	.+2378   	; 0x2afc <__gesf2>
    21b2:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b4:	0c f0       	brlt	.+2      	; 0x21b8 <Data+0x4a6>
    21b6:	48 c0       	rjmp	.+144    	; 0x2248 <Data+0x536>
    21b8:	ce 01       	movw	r24, r28
    21ba:	8e 5a       	subi	r24, 0xAE	; 174
    21bc:	9f 4f       	sbci	r25, 0xFF	; 255
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e2       	ldi	r20, 0x20	; 32
    21c4:	51 e4       	ldi	r21, 0x41	; 65
    21c6:	fc 01       	movw	r30, r24
    21c8:	60 81       	ld	r22, Z
    21ca:	71 81       	ldd	r23, Z+1	; 0x01
    21cc:	82 81       	ldd	r24, Z+2	; 0x02
    21ce:	93 81       	ldd	r25, Z+3	; 0x03
    21d0:	99 d4       	rcall	.+2354   	; 0x2b04 <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	8e 01       	movw	r16, r28
    21d8:	06 5a       	subi	r16, 0xA6	; 166
    21da:	1f 4f       	sbci	r17, 0xFF	; 255
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	ec d3       	rcall	.+2008   	; 0x29ba <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	f8 01       	movw	r30, r16
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	80 83       	st	Z, r24
    21ec:	24 c0       	rjmp	.+72     	; 0x2236 <Data+0x524>
    21ee:	ce 01       	movw	r24, r28
    21f0:	84 5a       	subi	r24, 0xA4	; 164
    21f2:	9f 4f       	sbci	r25, 0xFF	; 255
    21f4:	20 e9       	ldi	r18, 0x90	; 144
    21f6:	31 e0       	ldi	r19, 0x01	; 1
    21f8:	fc 01       	movw	r30, r24
    21fa:	31 83       	std	Z+1, r19	; 0x01
    21fc:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21fe:	ce 01       	movw	r24, r28
    2200:	84 5a       	subi	r24, 0xA4	; 164
    2202:	9f 4f       	sbci	r25, 0xFF	; 255
    2204:	fc 01       	movw	r30, r24
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <Data+0x4f8>
    220e:	9e 01       	movw	r18, r28
    2210:	24 5a       	subi	r18, 0xA4	; 164
    2212:	3f 4f       	sbci	r19, 0xFF	; 255
    2214:	f9 01       	movw	r30, r18
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221a:	ce 01       	movw	r24, r28
    221c:	86 5a       	subi	r24, 0xA6	; 166
    221e:	9f 4f       	sbci	r25, 0xFF	; 255
    2220:	9e 01       	movw	r18, r28
    2222:	26 5a       	subi	r18, 0xA6	; 166
    2224:	3f 4f       	sbci	r19, 0xFF	; 255
    2226:	f9 01       	movw	r30, r18
    2228:	20 81       	ld	r18, Z
    222a:	31 81       	ldd	r19, Z+1	; 0x01
    222c:	21 50       	subi	r18, 0x01	; 1
    222e:	31 09       	sbc	r19, r1
    2230:	fc 01       	movw	r30, r24
    2232:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2234:	20 83       	st	Z, r18
    2236:	ce 01       	movw	r24, r28
    2238:	86 5a       	subi	r24, 0xA6	; 166
    223a:	9f 4f       	sbci	r25, 0xFF	; 255
    223c:	fc 01       	movw	r30, r24
    223e:	80 81       	ld	r24, Z
    2240:	91 81       	ldd	r25, Z+1	; 0x01
    2242:	89 2b       	or	r24, r25
    2244:	a1 f6       	brne	.-88     	; 0x21ee <Data+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2246:	77 c0       	rjmp	.+238    	; 0x2336 <Data+0x624>
    2248:	8e 01       	movw	r16, r28
    224a:	06 5a       	subi	r16, 0xA6	; 166
    224c:	1f 4f       	sbci	r17, 0xFF	; 255
    224e:	ce 01       	movw	r24, r28
    2250:	8a 5a       	subi	r24, 0xAA	; 170
    2252:	9f 4f       	sbci	r25, 0xFF	; 255
    2254:	fc 01       	movw	r30, r24
    2256:	60 81       	ld	r22, Z
    2258:	71 81       	ldd	r23, Z+1	; 0x01
    225a:	82 81       	ldd	r24, Z+2	; 0x02
    225c:	93 81       	ldd	r25, Z+3	; 0x03
    225e:	ad d3       	rcall	.+1882   	; 0x29ba <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	f8 01       	movw	r30, r16
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	80 83       	st	Z, r24
    226a:	ce 01       	movw	r24, r28
    226c:	82 5a       	subi	r24, 0xA2	; 162
    226e:	9f 4f       	sbci	r25, 0xFF	; 255
    2270:	9e 01       	movw	r18, r28
    2272:	26 5a       	subi	r18, 0xA6	; 166
    2274:	3f 4f       	sbci	r19, 0xFF	; 255
    2276:	f9 01       	movw	r30, r18
    2278:	20 81       	ld	r18, Z
    227a:	31 81       	ldd	r19, Z+1	; 0x01
    227c:	fc 01       	movw	r30, r24
    227e:	31 83       	std	Z+1, r19	; 0x01
    2280:	20 83       	st	Z, r18
    2282:	ce 01       	movw	r24, r28
    2284:	82 5a       	subi	r24, 0xA2	; 162
    2286:	9f 4f       	sbci	r25, 0xFF	; 255
    2288:	fc 01       	movw	r30, r24
    228a:	80 81       	ld	r24, Z
    228c:	91 81       	ldd	r25, Z+1	; 0x01
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <Data+0x57c>
    2292:	9e 01       	movw	r18, r28
    2294:	22 5a       	subi	r18, 0xA2	; 162
    2296:	3f 4f       	sbci	r19, 0xFF	; 255
    2298:	f9 01       	movw	r30, r18
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    229e:	4b c0       	rjmp	.+150    	; 0x2336 <Data+0x624>
    22a0:	ce 01       	movw	r24, r28
    22a2:	87 5b       	subi	r24, 0xB7	; 183
    22a4:	9f 4f       	sbci	r25, 0xFF	; 255
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	4f e7       	ldi	r20, 0x7F	; 127
    22ac:	53 e4       	ldi	r21, 0x43	; 67
    22ae:	fc 01       	movw	r30, r24
    22b0:	60 81       	ld	r22, Z
    22b2:	71 81       	ldd	r23, Z+1	; 0x01
    22b4:	82 81       	ldd	r24, Z+2	; 0x02
    22b6:	93 81       	ldd	r25, Z+3	; 0x03
    22b8:	21 d4       	rcall	.+2114   	; 0x2afc <__gesf2>
    22ba:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    22bc:	64 f5       	brge	.+88     	; 0x2316 <Data+0x604>
    22be:	8e 01       	movw	r16, r28
    22c0:	00 5a       	subi	r16, 0xA0	; 160
    22c2:	1f 4f       	sbci	r17, 0xFF	; 255
    22c4:	ce 01       	movw	r24, r28
    22c6:	83 5b       	subi	r24, 0xB3	; 179
    22c8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ca:	fc 01       	movw	r30, r24
    22cc:	60 81       	ld	r22, Z
    22ce:	71 81       	ldd	r23, Z+1	; 0x01
    22d0:	82 81       	ldd	r24, Z+2	; 0x02
    22d2:	93 81       	ldd	r25, Z+3	; 0x03
    22d4:	72 d3       	rcall	.+1764   	; 0x29ba <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	f8 01       	movw	r30, r16
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	80 83       	st	Z, r24
    22e0:	ce 01       	movw	r24, r28
    22e2:	8e 59       	subi	r24, 0x9E	; 158
    22e4:	9f 4f       	sbci	r25, 0xFF	; 255
    22e6:	9e 01       	movw	r18, r28
    22e8:	20 5a       	subi	r18, 0xA0	; 160
    22ea:	3f 4f       	sbci	r19, 0xFF	; 255
    22ec:	f9 01       	movw	r30, r18
    22ee:	20 81       	ld	r18, Z
    22f0:	31 81       	ldd	r19, Z+1	; 0x01
    22f2:	fc 01       	movw	r30, r24
    22f4:	31 83       	std	Z+1, r19	; 0x01
    22f6:	20 83       	st	Z, r18
    22f8:	ce 01       	movw	r24, r28
    22fa:	8e 59       	subi	r24, 0x9E	; 158
    22fc:	9f 4f       	sbci	r25, 0xFF	; 255
    22fe:	fc 01       	movw	r30, r24
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <Data+0x5f2>
    2308:	9e 01       	movw	r18, r28
    230a:	2e 59       	subi	r18, 0x9E	; 158
    230c:	3f 4f       	sbci	r19, 0xFF	; 255
    230e:	f9 01       	movw	r30, r18
    2310:	91 83       	std	Z+1, r25	; 0x01
    2312:	80 83       	st	Z, r24
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2314:	27 c0       	rjmp	.+78     	; 0x2364 <Data+0x652>
    2316:	8e 01       	movw	r16, r28
    2318:	0f 5a       	subi	r16, 0xAF	; 175
    231a:	1f 4f       	sbci	r17, 0xFF	; 255
    231c:	ce 01       	movw	r24, r28
    231e:	87 5b       	subi	r24, 0xB7	; 183
    2320:	9f 4f       	sbci	r25, 0xFF	; 255
    2322:	fc 01       	movw	r30, r24
    2324:	60 81       	ld	r22, Z
    2326:	71 81       	ldd	r23, Z+1	; 0x01
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	46 d3       	rcall	.+1676   	; 0x29ba <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	f8 01       	movw	r30, r16
    2334:	80 83       	st	Z, r24
    2336:	ce 01       	movw	r24, r28
    2338:	8c 59       	subi	r24, 0x9C	; 156
    233a:	9f 4f       	sbci	r25, 0xFF	; 255
    233c:	9e 01       	movw	r18, r28
    233e:	2f 5a       	subi	r18, 0xAF	; 175
    2340:	3f 4f       	sbci	r19, 0xFF	; 255
    2342:	f9 01       	movw	r30, r18
    2344:	20 81       	ld	r18, Z
    2346:	fc 01       	movw	r30, r24
    2348:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    234a:	ce 01       	movw	r24, r28
    234c:	8c 59       	subi	r24, 0x9C	; 156
    234e:	9f 4f       	sbci	r25, 0xFF	; 255
    2350:	fc 01       	movw	r30, r24
    2352:	80 81       	ld	r24, Z
    2354:	28 2f       	mov	r18, r24
    2356:	2a 95       	dec	r18
    2358:	f1 f7       	brne	.-4      	; 0x2356 <Data+0x644>
    235a:	ce 01       	movw	r24, r28
    235c:	8c 59       	subi	r24, 0x9C	; 156
    235e:	9f 4f       	sbci	r25, 0xFF	; 255
    2360:	fc 01       	movw	r30, r24
    2362:	20 83       	st	Z, r18
	_delay_us(1);
	ENL; // E = 0
    2364:	85 e3       	ldi	r24, 0x35	; 53
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	25 e3       	ldi	r18, 0x35	; 53
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	f9 01       	movw	r30, r18
    236e:	20 81       	ld	r18, Z
    2370:	2b 7f       	andi	r18, 0xFB	; 251
    2372:	fc 01       	movw	r30, r24
    2374:	20 83       	st	Z, r18

	// 데이터 하위 4비트
	PORTC = 0x01; // RS=1, RW=0
    2376:	85 e3       	ldi	r24, 0x35	; 53
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	21 e0       	ldi	r18, 0x01	; 1
    237c:	fc 01       	movw	r30, r24
    237e:	20 83       	st	Z, r18
	PORTC |= (byte << 4); // 데이터 하위 4비트
    2380:	85 e3       	ldi	r24, 0x35	; 53
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	25 e3       	ldi	r18, 0x35	; 53
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	f9 01       	movw	r30, r18
    238a:	20 81       	ld	r18, Z
    238c:	42 2f       	mov	r20, r18
    238e:	9e 01       	movw	r18, r28
    2390:	2f 57       	subi	r18, 0x7F	; 127
    2392:	3f 4f       	sbci	r19, 0xFF	; 255
    2394:	f9 01       	movw	r30, r18
    2396:	20 81       	ld	r18, Z
    2398:	22 2f       	mov	r18, r18
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	22 95       	swap	r18
    239e:	32 95       	swap	r19
    23a0:	30 7f       	andi	r19, 0xF0	; 240
    23a2:	32 27       	eor	r19, r18
    23a4:	20 7f       	andi	r18, 0xF0	; 240
    23a6:	32 27       	eor	r19, r18
    23a8:	24 2b       	or	r18, r20
    23aa:	fc 01       	movw	r30, r24
    23ac:	20 83       	st	Z, r18
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	a0 e8       	ldi	r26, 0x80	; 128
    23b4:	bf e3       	ldi	r27, 0x3F	; 63
    23b6:	89 87       	std	Y+9, r24	; 0x09
    23b8:	9a 87       	std	Y+10, r25	; 0x0a
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    23ba:	ab 87       	std	Y+11, r26	; 0x0b
    23bc:	bc 87       	std	Y+12, r27	; 0x0c
    23be:	2b ea       	ldi	r18, 0xAB	; 171
    23c0:	3a ea       	ldi	r19, 0xAA	; 170
    23c2:	4a ea       	ldi	r20, 0xAA	; 170
    23c4:	50 e4       	ldi	r21, 0x40	; 64
    23c6:	69 85       	ldd	r22, Y+9	; 0x09
    23c8:	7a 85       	ldd	r23, Y+10	; 0x0a
    23ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    23cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    23ce:	9a d3       	rcall	.+1844   	; 0x2b04 <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	8d a7       	std	Y+45, r24	; 0x2d
    23d6:	9e a7       	std	Y+46, r25	; 0x2e
	__tmp2 = ((F_CPU) / 4e6) * __us;
    23d8:	af a7       	std	Y+47, r26	; 0x2f
    23da:	b8 ab       	std	Y+48, r27	; 0x30
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e8       	ldi	r20, 0x80	; 128
    23e2:	50 e4       	ldi	r21, 0x40	; 64
    23e4:	69 85       	ldd	r22, Y+9	; 0x09
    23e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    23e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    23ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    23ec:	8b d3       	rcall	.+1814   	; 0x2b04 <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	89 ab       	std	Y+49, r24	; 0x31
    23f4:	9a ab       	std	Y+50, r25	; 0x32
	if (__tmp < 1.0)
    23f6:	ab ab       	std	Y+51, r26	; 0x33
    23f8:	bc ab       	std	Y+52, r27	; 0x34
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e8       	ldi	r20, 0x80	; 128
    2400:	5f e3       	ldi	r21, 0x3F	; 63
    2402:	6d a5       	ldd	r22, Y+45	; 0x2d
    2404:	7e a5       	ldd	r23, Y+46	; 0x2e
    2406:	8f a5       	ldd	r24, Y+47	; 0x2f
    2408:	98 a9       	ldd	r25, Y+48	; 0x30
    240a:	6b d2       	rcall	.+1238   	; 0x28e2 <__cmpsf2>
		__ticks = 1;
    240c:	88 23       	and	r24, r24
    240e:	1c f4       	brge	.+6      	; 0x2416 <Data+0x704>
    2410:	81 e0       	ldi	r24, 0x01	; 1
	else if (__tmp2 > 65535)
    2412:	8d ab       	std	Y+53, r24	; 0x35
    2414:	d3 c0       	rjmp	.+422    	; 0x25bc <Data+0x8aa>
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	3f ef       	ldi	r19, 0xFF	; 255
    241a:	4f e7       	ldi	r20, 0x7F	; 127
    241c:	57 e4       	ldi	r21, 0x47	; 71
    241e:	69 a9       	ldd	r22, Y+49	; 0x31
    2420:	7a a9       	ldd	r23, Y+50	; 0x32
    2422:	8b a9       	ldd	r24, Y+51	; 0x33
    2424:	9c a9       	ldd	r25, Y+52	; 0x34
    2426:	6a d3       	rcall	.+1748   	; 0x2afc <__gesf2>
    2428:	18 16       	cp	r1, r24
	{
		_delay_ms(__us / 1000.0);
    242a:	0c f0       	brlt	.+2      	; 0x242e <Data+0x71c>
    242c:	8c c0       	rjmp	.+280    	; 0x2546 <Data+0x834>
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	4a e7       	ldi	r20, 0x7A	; 122
    2434:	54 e4       	ldi	r21, 0x44	; 68
    2436:	69 85       	ldd	r22, Y+9	; 0x09
    2438:	7a 85       	ldd	r23, Y+10	; 0x0a
    243a:	8b 85       	ldd	r24, Y+11	; 0x0b
    243c:	9c 85       	ldd	r25, Y+12	; 0x0c
    243e:	55 d2       	rcall	.+1194   	; 0x28ea <__divsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	8e ab       	std	Y+54, r24	; 0x36
    2446:	9f ab       	std	Y+55, r25	; 0x37

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2448:	a8 af       	std	Y+56, r26	; 0x38
    244a:	b9 af       	std	Y+57, r27	; 0x39
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	4a e7       	ldi	r20, 0x7A	; 122
    2452:	55 e4       	ldi	r21, 0x45	; 69
    2454:	6e a9       	ldd	r22, Y+54	; 0x36
    2456:	7f a9       	ldd	r23, Y+55	; 0x37
    2458:	88 ad       	ldd	r24, Y+56	; 0x38
    245a:	99 ad       	ldd	r25, Y+57	; 0x39
    245c:	53 d3       	rcall	.+1702   	; 0x2b04 <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	8a af       	std	Y+58, r24	; 0x3a
    2464:	9b af       	std	Y+59, r25	; 0x3b
	if (__tmp < 1.0)
    2466:	ac af       	std	Y+60, r26	; 0x3c
    2468:	bd af       	std	Y+61, r27	; 0x3d
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e8       	ldi	r20, 0x80	; 128
    2470:	5f e3       	ldi	r21, 0x3F	; 63
    2472:	6a ad       	ldd	r22, Y+58	; 0x3a
    2474:	7b ad       	ldd	r23, Y+59	; 0x3b
    2476:	8c ad       	ldd	r24, Y+60	; 0x3c
    2478:	9d ad       	ldd	r25, Y+61	; 0x3d
		__ticks = 1;
    247a:	33 d2       	rcall	.+1126   	; 0x28e2 <__cmpsf2>
    247c:	88 23       	and	r24, r24
    247e:	2c f4       	brge	.+10     	; 0x248a <Data+0x778>
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
	else if (__tmp > 65535)
    2484:	9f af       	std	Y+63, r25	; 0x3f
    2486:	8e af       	std	Y+62, r24	; 0x3e
    2488:	47 c0       	rjmp	.+142    	; 0x2518 <Data+0x806>
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	3f ef       	ldi	r19, 0xFF	; 255
    248e:	4f e7       	ldi	r20, 0x7F	; 127
    2490:	57 e4       	ldi	r21, 0x47	; 71
    2492:	6a ad       	ldd	r22, Y+58	; 0x3a
    2494:	7b ad       	ldd	r23, Y+59	; 0x3b
    2496:	8c ad       	ldd	r24, Y+60	; 0x3c
    2498:	9d ad       	ldd	r25, Y+61	; 0x3d
    249a:	30 d3       	rcall	.+1632   	; 0x2afc <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249c:	18 16       	cp	r1, r24
    249e:	9c f5       	brge	.+102    	; 0x2506 <Data+0x7f4>
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e2       	ldi	r20, 0x20	; 32
    24a6:	51 e4       	ldi	r21, 0x41	; 65
    24a8:	6e a9       	ldd	r22, Y+54	; 0x36
    24aa:	7f a9       	ldd	r23, Y+55	; 0x37
    24ac:	88 ad       	ldd	r24, Y+56	; 0x38
    24ae:	99 ad       	ldd	r25, Y+57	; 0x39
    24b0:	29 d3       	rcall	.+1618   	; 0x2b04 <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	bc 01       	movw	r22, r24
    24b8:	cd 01       	movw	r24, r26
    24ba:	7f d2       	rcall	.+1278   	; 0x29ba <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	9f af       	std	Y+63, r25	; 0x3f
    24c2:	8e af       	std	Y+62, r24	; 0x3e
    24c4:	1b c0       	rjmp	.+54     	; 0x24fc <Data+0x7ea>
    24c6:	ce 01       	movw	r24, r28
    24c8:	80 5c       	subi	r24, 0xC0	; 192
    24ca:	9f 4f       	sbci	r25, 0xFF	; 255
    24cc:	20 e9       	ldi	r18, 0x90	; 144
    24ce:	31 e0       	ldi	r19, 0x01	; 1
    24d0:	fc 01       	movw	r30, r24
    24d2:	31 83       	std	Z+1, r19	; 0x01
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24d4:	20 83       	st	Z, r18
    24d6:	ce 01       	movw	r24, r28
    24d8:	80 5c       	subi	r24, 0xC0	; 192
    24da:	9f 4f       	sbci	r25, 0xFF	; 255
    24dc:	fc 01       	movw	r30, r24
    24de:	80 81       	ld	r24, Z
    24e0:	91 81       	ldd	r25, Z+1	; 0x01
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <Data+0x7d0>
    24e6:	9e 01       	movw	r18, r28
    24e8:	20 5c       	subi	r18, 0xC0	; 192
    24ea:	3f 4f       	sbci	r19, 0xFF	; 255
    24ec:	f9 01       	movw	r30, r18
    24ee:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f0:	80 83       	st	Z, r24
    24f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    24f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	9f af       	std	Y+63, r25	; 0x3f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fa:	8e af       	std	Y+62, r24	; 0x3e
    24fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    24fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2500:	89 2b       	or	r24, r25
    2502:	09 f7       	brne	.-62     	; 0x24c6 <Data+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2504:	5b c0       	rjmp	.+182    	; 0x25bc <Data+0x8aa>
    2506:	6a ad       	ldd	r22, Y+58	; 0x3a
    2508:	7b ad       	ldd	r23, Y+59	; 0x3b
    250a:	8c ad       	ldd	r24, Y+60	; 0x3c
    250c:	9d ad       	ldd	r25, Y+61	; 0x3d
    250e:	55 d2       	rcall	.+1194   	; 0x29ba <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9f af       	std	Y+63, r25	; 0x3f
    2516:	8e af       	std	Y+62, r24	; 0x3e
    2518:	ce 01       	movw	r24, r28
    251a:	8e 5b       	subi	r24, 0xBE	; 190
    251c:	9f 4f       	sbci	r25, 0xFF	; 255
    251e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2520:	3f ad       	ldd	r19, Y+63	; 0x3f
    2522:	fc 01       	movw	r30, r24
    2524:	31 83       	std	Z+1, r19	; 0x01
    2526:	20 83       	st	Z, r18
    2528:	ce 01       	movw	r24, r28
    252a:	8e 5b       	subi	r24, 0xBE	; 190
    252c:	9f 4f       	sbci	r25, 0xFF	; 255
    252e:	fc 01       	movw	r30, r24
    2530:	80 81       	ld	r24, Z
    2532:	91 81       	ldd	r25, Z+1	; 0x01
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <Data+0x822>
    2538:	9e 01       	movw	r18, r28
    253a:	2e 5b       	subi	r18, 0xBE	; 190
    253c:	3f 4f       	sbci	r19, 0xFF	; 255
    253e:	f9 01       	movw	r30, r18
    2540:	91 83       	std	Z+1, r25	; 0x01
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2542:	80 83       	st	Z, r24
    2544:	3b c0       	rjmp	.+118    	; 0x25bc <Data+0x8aa>
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	4f e7       	ldi	r20, 0x7F	; 127
    254c:	53 e4       	ldi	r21, 0x43	; 67
    254e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2550:	7e a5       	ldd	r23, Y+46	; 0x2e
    2552:	8f a5       	ldd	r24, Y+47	; 0x2f
    2554:	98 a9       	ldd	r25, Y+48	; 0x30
    2556:	d2 d2       	rcall	.+1444   	; 0x2afc <__gesf2>
    2558:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    255a:	44 f5       	brge	.+80     	; 0x25ac <Data+0x89a>
    255c:	8e 01       	movw	r16, r28
    255e:	0c 5b       	subi	r16, 0xBC	; 188
    2560:	1f 4f       	sbci	r17, 0xFF	; 255
    2562:	69 a9       	ldd	r22, Y+49	; 0x31
    2564:	7a a9       	ldd	r23, Y+50	; 0x32
    2566:	8b a9       	ldd	r24, Y+51	; 0x33
    2568:	9c a9       	ldd	r25, Y+52	; 0x34
    256a:	27 d2       	rcall	.+1102   	; 0x29ba <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	f8 01       	movw	r30, r16
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	80 83       	st	Z, r24
    2576:	ce 01       	movw	r24, r28
    2578:	8a 5b       	subi	r24, 0xBA	; 186
    257a:	9f 4f       	sbci	r25, 0xFF	; 255
    257c:	9e 01       	movw	r18, r28
    257e:	2c 5b       	subi	r18, 0xBC	; 188
    2580:	3f 4f       	sbci	r19, 0xFF	; 255
    2582:	f9 01       	movw	r30, r18
    2584:	20 81       	ld	r18, Z
    2586:	31 81       	ldd	r19, Z+1	; 0x01
    2588:	fc 01       	movw	r30, r24
    258a:	31 83       	std	Z+1, r19	; 0x01
    258c:	20 83       	st	Z, r18
    258e:	ce 01       	movw	r24, r28
    2590:	8a 5b       	subi	r24, 0xBA	; 186
    2592:	9f 4f       	sbci	r25, 0xFF	; 255
    2594:	fc 01       	movw	r30, r24
    2596:	80 81       	ld	r24, Z
    2598:	91 81       	ldd	r25, Z+1	; 0x01
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <Data+0x888>
    259e:	9e 01       	movw	r18, r28
    25a0:	2a 5b       	subi	r18, 0xBA	; 186
    25a2:	3f 4f       	sbci	r19, 0xFF	; 255
    25a4:	f9 01       	movw	r30, r18
    25a6:	91 83       	std	Z+1, r25	; 0x01
    25a8:	80 83       	st	Z, r24
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25aa:	1b c0       	rjmp	.+54     	; 0x25e2 <Data+0x8d0>
    25ac:	6d a5       	ldd	r22, Y+45	; 0x2d
    25ae:	7e a5       	ldd	r23, Y+46	; 0x2e
    25b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b2:	98 a9       	ldd	r25, Y+48	; 0x30
    25b4:	02 d2       	rcall	.+1028   	; 0x29ba <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	8d ab       	std	Y+53, r24	; 0x35
    25bc:	ce 01       	movw	r24, r28
    25be:	88 5b       	subi	r24, 0xB8	; 184
    25c0:	9f 4f       	sbci	r25, 0xFF	; 255
    25c2:	2d a9       	ldd	r18, Y+53	; 0x35
    25c4:	fc 01       	movw	r30, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25c6:	20 83       	st	Z, r18
    25c8:	ce 01       	movw	r24, r28
    25ca:	88 5b       	subi	r24, 0xB8	; 184
    25cc:	9f 4f       	sbci	r25, 0xFF	; 255
    25ce:	fc 01       	movw	r30, r24
    25d0:	80 81       	ld	r24, Z
    25d2:	28 2f       	mov	r18, r24
    25d4:	2a 95       	dec	r18
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <Data+0x8c2>
    25d8:	ce 01       	movw	r24, r28
    25da:	88 5b       	subi	r24, 0xB8	; 184
    25dc:	9f 4f       	sbci	r25, 0xFF	; 255
	_delay_us(1);
	ENH; // E = 1
    25de:	fc 01       	movw	r30, r24
    25e0:	20 83       	st	Z, r18
    25e2:	85 e3       	ldi	r24, 0x35	; 53
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	25 e3       	ldi	r18, 0x35	; 53
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	f9 01       	movw	r30, r18
    25ec:	20 81       	ld	r18, Z
    25ee:	24 60       	ori	r18, 0x04	; 4
    25f0:	fc 01       	movw	r30, r24
    25f2:	20 83       	st	Z, r18
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	a0 e8       	ldi	r26, 0x80	; 128
    25fa:	bf e3       	ldi	r27, 0x3F	; 63
    25fc:	8d 87       	std	Y+13, r24	; 0x0d
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    25fe:	9e 87       	std	Y+14, r25	; 0x0e
    2600:	af 87       	std	Y+15, r26	; 0x0f
    2602:	b8 8b       	std	Y+16, r27	; 0x10
    2604:	2b ea       	ldi	r18, 0xAB	; 171
    2606:	3a ea       	ldi	r19, 0xAA	; 170
    2608:	4a ea       	ldi	r20, 0xAA	; 170
    260a:	50 e4       	ldi	r21, 0x40	; 64
    260c:	6d 85       	ldd	r22, Y+13	; 0x0d
    260e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2610:	8f 85       	ldd	r24, Y+15	; 0x0f
    2612:	98 89       	ldd	r25, Y+16	; 0x10
    2614:	77 d2       	rcall	.+1262   	; 0x2b04 <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	89 8b       	std	Y+17, r24	; 0x11
	__tmp2 = ((F_CPU) / 4e6) * __us;
    261c:	9a 8b       	std	Y+18, r25	; 0x12
    261e:	ab 8b       	std	Y+19, r26	; 0x13
    2620:	bc 8b       	std	Y+20, r27	; 0x14
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	40 e8       	ldi	r20, 0x80	; 128
    2628:	50 e4       	ldi	r21, 0x40	; 64
    262a:	6d 85       	ldd	r22, Y+13	; 0x0d
    262c:	7e 85       	ldd	r23, Y+14	; 0x0e
    262e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2630:	98 89       	ldd	r25, Y+16	; 0x10
    2632:	68 d2       	rcall	.+1232   	; 0x2b04 <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	8d 8b       	std	Y+21, r24	; 0x15
	if (__tmp < 1.0)
    263a:	9e 8b       	std	Y+22, r25	; 0x16
    263c:	af 8b       	std	Y+23, r26	; 0x17
    263e:	b8 8f       	std	Y+24, r27	; 0x18
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e8       	ldi	r20, 0x80	; 128
    2646:	5f e3       	ldi	r21, 0x3F	; 63
    2648:	69 89       	ldd	r22, Y+17	; 0x11
    264a:	7a 89       	ldd	r23, Y+18	; 0x12
    264c:	8b 89       	ldd	r24, Y+19	; 0x13
    264e:	9c 89       	ldd	r25, Y+20	; 0x14
		__ticks = 1;
    2650:	48 d1       	rcall	.+656    	; 0x28e2 <__cmpsf2>
    2652:	88 23       	and	r24, r24
    2654:	1c f4       	brge	.+6      	; 0x265c <Data+0x94a>
	else if (__tmp2 > 65535)
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	89 8f       	std	Y+25, r24	; 0x19
    265a:	a7 c0       	rjmp	.+334    	; 0x27aa <Data+0xa98>
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	3f ef       	ldi	r19, 0xFF	; 255
    2660:	4f e7       	ldi	r20, 0x7F	; 127
    2662:	57 e4       	ldi	r21, 0x47	; 71
    2664:	6d 89       	ldd	r22, Y+21	; 0x15
    2666:	7e 89       	ldd	r23, Y+22	; 0x16
    2668:	8f 89       	ldd	r24, Y+23	; 0x17
    266a:	98 8d       	ldd	r25, Y+24	; 0x18
    266c:	47 d2       	rcall	.+1166   	; 0x2afc <__gesf2>
	{
		_delay_ms(__us / 1000.0);
    266e:	18 16       	cp	r1, r24
    2670:	0c f0       	brlt	.+2      	; 0x2674 <Data+0x962>
    2672:	74 c0       	rjmp	.+232    	; 0x275c <Data+0xa4a>
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	4a e7       	ldi	r20, 0x7A	; 122
    267a:	54 e4       	ldi	r21, 0x44	; 68
    267c:	6d 85       	ldd	r22, Y+13	; 0x0d
    267e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2680:	8f 85       	ldd	r24, Y+15	; 0x0f
    2682:	98 89       	ldd	r25, Y+16	; 0x10
    2684:	32 d1       	rcall	.+612    	; 0x28ea <__divsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	8a 8f       	std	Y+26, r24	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    268c:	9b 8f       	std	Y+27, r25	; 0x1b
    268e:	ac 8f       	std	Y+28, r26	; 0x1c
    2690:	bd 8f       	std	Y+29, r27	; 0x1d
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	4a e7       	ldi	r20, 0x7A	; 122
    2698:	55 e4       	ldi	r21, 0x45	; 69
    269a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    269c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    269e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26a2:	30 d2       	rcall	.+1120   	; 0x2b04 <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
	if (__tmp < 1.0)
    26a8:	8e 8f       	std	Y+30, r24	; 0x1e
    26aa:	9f 8f       	std	Y+31, r25	; 0x1f
    26ac:	a8 a3       	std	Y+32, r26	; 0x20
    26ae:	b9 a3       	std	Y+33, r27	; 0x21
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e8       	ldi	r20, 0x80	; 128
    26b6:	5f e3       	ldi	r21, 0x3F	; 63
    26b8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    26ba:	7f 8d       	ldd	r23, Y+31	; 0x1f
    26bc:	88 a1       	ldd	r24, Y+32	; 0x20
    26be:	99 a1       	ldd	r25, Y+33	; 0x21
		__ticks = 1;
    26c0:	10 d1       	rcall	.+544    	; 0x28e2 <__cmpsf2>
    26c2:	88 23       	and	r24, r24
    26c4:	2c f4       	brge	.+10     	; 0x26d0 <Data+0x9be>
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
	else if (__tmp > 65535)
    26ca:	9b a3       	std	Y+35, r25	; 0x23
    26cc:	8a a3       	std	Y+34, r24	; 0x22
    26ce:	3b c0       	rjmp	.+118    	; 0x2746 <Data+0xa34>
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	3f ef       	ldi	r19, 0xFF	; 255
    26d4:	4f e7       	ldi	r20, 0x7F	; 127
    26d6:	57 e4       	ldi	r21, 0x47	; 71
    26d8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    26da:	7f 8d       	ldd	r23, Y+31	; 0x1f
    26dc:	88 a1       	ldd	r24, Y+32	; 0x20
    26de:	99 a1       	ldd	r25, Y+33	; 0x21
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e0:	0d d2       	rcall	.+1050   	; 0x2afc <__gesf2>
    26e2:	18 16       	cp	r1, r24
    26e4:	3c f5       	brge	.+78     	; 0x2734 <Data+0xa22>
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e2       	ldi	r20, 0x20	; 32
    26ec:	51 e4       	ldi	r21, 0x41	; 65
    26ee:	6a 8d       	ldd	r22, Y+26	; 0x1a
    26f0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    26f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26f4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26f6:	06 d2       	rcall	.+1036   	; 0x2b04 <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	5c d1       	rcall	.+696    	; 0x29ba <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	9b a3       	std	Y+35, r25	; 0x23
    2708:	8a a3       	std	Y+34, r24	; 0x22
    270a:	0f c0       	rjmp	.+30     	; 0x272a <Data+0xa18>
    270c:	80 e9       	ldi	r24, 0x90	; 144
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    270e:	91 e0       	ldi	r25, 0x01	; 1
    2710:	9d a3       	std	Y+37, r25	; 0x25
    2712:	8c a3       	std	Y+36, r24	; 0x24
    2714:	8c a1       	ldd	r24, Y+36	; 0x24
    2716:	9d a1       	ldd	r25, Y+37	; 0x25
    2718:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271a:	f1 f7       	brne	.-4      	; 0x2718 <Data+0xa06>
    271c:	9d a3       	std	Y+37, r25	; 0x25
    271e:	8c a3       	std	Y+36, r24	; 0x24
    2720:	8a a1       	ldd	r24, Y+34	; 0x22
    2722:	9b a1       	ldd	r25, Y+35	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	9b a3       	std	Y+35, r25	; 0x23
    2728:	8a a3       	std	Y+34, r24	; 0x22
    272a:	8a a1       	ldd	r24, Y+34	; 0x22
    272c:	9b a1       	ldd	r25, Y+35	; 0x23
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272e:	89 2b       	or	r24, r25
    2730:	69 f7       	brne	.-38     	; 0x270c <Data+0x9fa>
    2732:	3b c0       	rjmp	.+118    	; 0x27aa <Data+0xa98>
    2734:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2736:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2738:	88 a1       	ldd	r24, Y+32	; 0x20
    273a:	99 a1       	ldd	r25, Y+33	; 0x21
    273c:	3e d1       	rcall	.+636    	; 0x29ba <__fixunssfsi>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	9b a3       	std	Y+35, r25	; 0x23
    2744:	8a a3       	std	Y+34, r24	; 0x22
    2746:	8a a1       	ldd	r24, Y+34	; 0x22
    2748:	9b a1       	ldd	r25, Y+35	; 0x23
    274a:	9f a3       	std	Y+39, r25	; 0x27
    274c:	8e a3       	std	Y+38, r24	; 0x26
    274e:	8e a1       	ldd	r24, Y+38	; 0x26
    2750:	9f a1       	ldd	r25, Y+39	; 0x27
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <Data+0xa40>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2756:	9f a3       	std	Y+39, r25	; 0x27
    2758:	8e a3       	std	Y+38, r24	; 0x26
    275a:	27 c0       	rjmp	.+78     	; 0x27aa <Data+0xa98>
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	4f e7       	ldi	r20, 0x7F	; 127
    2762:	53 e4       	ldi	r21, 0x43	; 67
    2764:	69 89       	ldd	r22, Y+17	; 0x11
    2766:	7a 89       	ldd	r23, Y+18	; 0x12
    2768:	8b 89       	ldd	r24, Y+19	; 0x13
    276a:	9c 89       	ldd	r25, Y+20	; 0x14
    276c:	c7 d1       	rcall	.+910    	; 0x2afc <__gesf2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    276e:	18 16       	cp	r1, r24
    2770:	a4 f4       	brge	.+40     	; 0x279a <Data+0xa88>
    2772:	6d 89       	ldd	r22, Y+21	; 0x15
    2774:	7e 89       	ldd	r23, Y+22	; 0x16
    2776:	8f 89       	ldd	r24, Y+23	; 0x17
    2778:	98 8d       	ldd	r25, Y+24	; 0x18
    277a:	1f d1       	rcall	.+574    	; 0x29ba <__fixunssfsi>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	99 a7       	std	Y+41, r25	; 0x29
    2782:	88 a7       	std	Y+40, r24	; 0x28
    2784:	88 a5       	ldd	r24, Y+40	; 0x28
    2786:	99 a5       	ldd	r25, Y+41	; 0x29
    2788:	9b a7       	std	Y+43, r25	; 0x2b
    278a:	8a a7       	std	Y+42, r24	; 0x2a
    278c:	8a a5       	ldd	r24, Y+42	; 0x2a
    278e:	9b a5       	ldd	r25, Y+43	; 0x2b
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <Data+0xa7e>
    2794:	9b a7       	std	Y+43, r25	; 0x2b
    2796:	8a a7       	std	Y+42, r24	; 0x2a
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2798:	0e c0       	rjmp	.+28     	; 0x27b6 <Data+0xaa4>
    279a:	69 89       	ldd	r22, Y+17	; 0x11
    279c:	7a 89       	ldd	r23, Y+18	; 0x12
    279e:	8b 89       	ldd	r24, Y+19	; 0x13
    27a0:	9c 89       	ldd	r25, Y+20	; 0x14
    27a2:	0b d1       	rcall	.+534    	; 0x29ba <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	89 8f       	std	Y+25, r24	; 0x19
    27aa:	89 8d       	ldd	r24, Y+25	; 0x19
    27ac:	8c a7       	std	Y+44, r24	; 0x2c
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27ae:	8c a5       	ldd	r24, Y+44	; 0x2c
    27b0:	8a 95       	dec	r24
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <Data+0xa9e>
    27b4:	8c a7       	std	Y+44, r24	; 0x2c
	_delay_us(1);
	ENL; // E = 0
    27b6:	85 e3       	ldi	r24, 0x35	; 53
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	25 e3       	ldi	r18, 0x35	; 53
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	f9 01       	movw	r30, r18
    27c0:	20 81       	ld	r18, Z
    27c2:	2b 7f       	andi	r18, 0xFB	; 251
    27c4:	fc 01       	movw	r30, r24
    27c6:	20 83       	st	Z, r18
}
    27c8:	00 00       	nop
    27ca:	cf 57       	subi	r28, 0x7F	; 127
    27cc:	df 4f       	sbci	r29, 0xFF	; 255
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	1f 91       	pop	r17
    27de:	0f 91       	pop	r16
    27e0:	08 95       	ret

000027e2 <Busy>:
// Busy Flag Check -> 일반적인 BF를 체크하는 것이 아니라
// 일정한 시간 지연을 이용한다.
void Busy(void)
{
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	2e 97       	sbiw	r28, 0x0e	; 14
    27ec:	0f b6       	in	r0, 0x3f	; 63
    27ee:	f8 94       	cli
    27f0:	de bf       	out	0x3e, r29	; 62
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	cd bf       	out	0x3d, r28	; 61
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	a0 e0       	ldi	r26, 0x00	; 0
    27fc:	b0 e4       	ldi	r27, 0x40	; 64
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	9a 83       	std	Y+2, r25	; 0x02
    2802:	ab 83       	std	Y+3, r26	; 0x03
    2804:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	4a e7       	ldi	r20, 0x7A	; 122
    280c:	55 e4       	ldi	r21, 0x45	; 69
    280e:	69 81       	ldd	r22, Y+1	; 0x01
    2810:	7a 81       	ldd	r23, Y+2	; 0x02
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	9c 81       	ldd	r25, Y+4	; 0x04
    2816:	76 d1       	rcall	.+748    	; 0x2b04 <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	8d 83       	std	Y+5, r24	; 0x05
    281e:	9e 83       	std	Y+6, r25	; 0x06
    2820:	af 83       	std	Y+7, r26	; 0x07
    2822:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e8       	ldi	r20, 0x80	; 128
    282a:	5f e3       	ldi	r21, 0x3F	; 63
    282c:	6d 81       	ldd	r22, Y+5	; 0x05
    282e:	7e 81       	ldd	r23, Y+6	; 0x06
    2830:	8f 81       	ldd	r24, Y+7	; 0x07
    2832:	98 85       	ldd	r25, Y+8	; 0x08
    2834:	56 d0       	rcall	.+172    	; 0x28e2 <__cmpsf2>
    2836:	88 23       	and	r24, r24
    2838:	2c f4       	brge	.+10     	; 0x2844 <Busy+0x62>
		__ticks = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	9a 87       	std	Y+10, r25	; 0x0a
    2840:	89 87       	std	Y+9, r24	; 0x09
    2842:	3b c0       	rjmp	.+118    	; 0x28ba <Busy+0xd8>
	else if (__tmp > 65535)
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	3f ef       	ldi	r19, 0xFF	; 255
    2848:	4f e7       	ldi	r20, 0x7F	; 127
    284a:	57 e4       	ldi	r21, 0x47	; 71
    284c:	6d 81       	ldd	r22, Y+5	; 0x05
    284e:	7e 81       	ldd	r23, Y+6	; 0x06
    2850:	8f 81       	ldd	r24, Y+7	; 0x07
    2852:	98 85       	ldd	r25, Y+8	; 0x08
    2854:	53 d1       	rcall	.+678    	; 0x2afc <__gesf2>
    2856:	18 16       	cp	r1, r24
    2858:	3c f5       	brge	.+78     	; 0x28a8 <Busy+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e2       	ldi	r20, 0x20	; 32
    2860:	51 e4       	ldi	r21, 0x41	; 65
    2862:	69 81       	ldd	r22, Y+1	; 0x01
    2864:	7a 81       	ldd	r23, Y+2	; 0x02
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	4c d1       	rcall	.+664    	; 0x2b04 <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	a2 d0       	rcall	.+324    	; 0x29ba <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	9a 87       	std	Y+10, r25	; 0x0a
    287c:	89 87       	std	Y+9, r24	; 0x09
    287e:	0f c0       	rjmp	.+30     	; 0x289e <Busy+0xbc>
    2880:	80 e9       	ldi	r24, 0x90	; 144
    2882:	91 e0       	ldi	r25, 0x01	; 1
    2884:	9c 87       	std	Y+12, r25	; 0x0c
    2886:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2888:	8b 85       	ldd	r24, Y+11	; 0x0b
    288a:	9c 85       	ldd	r25, Y+12	; 0x0c
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <Busy+0xaa>
    2890:	9c 87       	std	Y+12, r25	; 0x0c
    2892:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2894:	89 85       	ldd	r24, Y+9	; 0x09
    2896:	9a 85       	ldd	r25, Y+10	; 0x0a
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	9a 87       	std	Y+10, r25	; 0x0a
    289c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289e:	89 85       	ldd	r24, Y+9	; 0x09
    28a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a2:	89 2b       	or	r24, r25
    28a4:	69 f7       	brne	.-38     	; 0x2880 <Busy+0x9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a6:	13 c0       	rjmp	.+38     	; 0x28ce <Busy+0xec>
    28a8:	6d 81       	ldd	r22, Y+5	; 0x05
    28aa:	7e 81       	ldd	r23, Y+6	; 0x06
    28ac:	8f 81       	ldd	r24, Y+7	; 0x07
    28ae:	98 85       	ldd	r25, Y+8	; 0x08
    28b0:	84 d0       	rcall	.+264    	; 0x29ba <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	9a 87       	std	Y+10, r25	; 0x0a
    28b8:	89 87       	std	Y+9, r24	; 0x09
    28ba:	89 85       	ldd	r24, Y+9	; 0x09
    28bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28be:	9e 87       	std	Y+14, r25	; 0x0e
    28c0:	8d 87       	std	Y+13, r24	; 0x0d
    28c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <Busy+0xe4>
    28ca:	9e 87       	std	Y+14, r25	; 0x0e
    28cc:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2);
}
    28ce:	00 00       	nop
    28d0:	2e 96       	adiw	r28, 0x0e	; 14
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	08 95       	ret

000028e2 <__cmpsf2>:
    28e2:	97 d0       	rcall	.+302    	; 0x2a12 <__fp_cmp>
    28e4:	08 f4       	brcc	.+2      	; 0x28e8 <__cmpsf2+0x6>
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	08 95       	ret

000028ea <__divsf3>:
    28ea:	0c d0       	rcall	.+24     	; 0x2904 <__divsf3x>
    28ec:	cd c0       	rjmp	.+410    	; 0x2a88 <__fp_round>
    28ee:	c5 d0       	rcall	.+394    	; 0x2a7a <__fp_pscB>
    28f0:	40 f0       	brcs	.+16     	; 0x2902 <__divsf3+0x18>
    28f2:	bc d0       	rcall	.+376    	; 0x2a6c <__fp_pscA>
    28f4:	30 f0       	brcs	.+12     	; 0x2902 <__divsf3+0x18>
    28f6:	21 f4       	brne	.+8      	; 0x2900 <__divsf3+0x16>
    28f8:	5f 3f       	cpi	r21, 0xFF	; 255
    28fa:	19 f0       	breq	.+6      	; 0x2902 <__divsf3+0x18>
    28fc:	ae c0       	rjmp	.+348    	; 0x2a5a <__fp_inf>
    28fe:	51 11       	cpse	r21, r1
    2900:	f7 c0       	rjmp	.+494    	; 0x2af0 <__fp_szero>
    2902:	b1 c0       	rjmp	.+354    	; 0x2a66 <__fp_nan>

00002904 <__divsf3x>:
    2904:	d2 d0       	rcall	.+420    	; 0x2aaa <__fp_split3>
    2906:	98 f3       	brcs	.-26     	; 0x28ee <__divsf3+0x4>

00002908 <__divsf3_pse>:
    2908:	99 23       	and	r25, r25
    290a:	c9 f3       	breq	.-14     	; 0x28fe <__divsf3+0x14>
    290c:	55 23       	and	r21, r21
    290e:	b1 f3       	breq	.-20     	; 0x28fc <__divsf3+0x12>
    2910:	95 1b       	sub	r25, r21
    2912:	55 0b       	sbc	r21, r21
    2914:	bb 27       	eor	r27, r27
    2916:	aa 27       	eor	r26, r26
    2918:	62 17       	cp	r22, r18
    291a:	73 07       	cpc	r23, r19
    291c:	84 07       	cpc	r24, r20
    291e:	38 f0       	brcs	.+14     	; 0x292e <__divsf3_pse+0x26>
    2920:	9f 5f       	subi	r25, 0xFF	; 255
    2922:	5f 4f       	sbci	r21, 0xFF	; 255
    2924:	22 0f       	add	r18, r18
    2926:	33 1f       	adc	r19, r19
    2928:	44 1f       	adc	r20, r20
    292a:	aa 1f       	adc	r26, r26
    292c:	a9 f3       	breq	.-22     	; 0x2918 <__divsf3_pse+0x10>
    292e:	33 d0       	rcall	.+102    	; 0x2996 <__divsf3_pse+0x8e>
    2930:	0e 2e       	mov	r0, r30
    2932:	3a f0       	brmi	.+14     	; 0x2942 <__divsf3_pse+0x3a>
    2934:	e0 e8       	ldi	r30, 0x80	; 128
    2936:	30 d0       	rcall	.+96     	; 0x2998 <__divsf3_pse+0x90>
    2938:	91 50       	subi	r25, 0x01	; 1
    293a:	50 40       	sbci	r21, 0x00	; 0
    293c:	e6 95       	lsr	r30
    293e:	00 1c       	adc	r0, r0
    2940:	ca f7       	brpl	.-14     	; 0x2934 <__divsf3_pse+0x2c>
    2942:	29 d0       	rcall	.+82     	; 0x2996 <__divsf3_pse+0x8e>
    2944:	fe 2f       	mov	r31, r30
    2946:	27 d0       	rcall	.+78     	; 0x2996 <__divsf3_pse+0x8e>
    2948:	66 0f       	add	r22, r22
    294a:	77 1f       	adc	r23, r23
    294c:	88 1f       	adc	r24, r24
    294e:	bb 1f       	adc	r27, r27
    2950:	26 17       	cp	r18, r22
    2952:	37 07       	cpc	r19, r23
    2954:	48 07       	cpc	r20, r24
    2956:	ab 07       	cpc	r26, r27
    2958:	b0 e8       	ldi	r27, 0x80	; 128
    295a:	09 f0       	breq	.+2      	; 0x295e <__divsf3_pse+0x56>
    295c:	bb 0b       	sbc	r27, r27
    295e:	80 2d       	mov	r24, r0
    2960:	bf 01       	movw	r22, r30
    2962:	ff 27       	eor	r31, r31
    2964:	93 58       	subi	r25, 0x83	; 131
    2966:	5f 4f       	sbci	r21, 0xFF	; 255
    2968:	2a f0       	brmi	.+10     	; 0x2974 <__divsf3_pse+0x6c>
    296a:	9e 3f       	cpi	r25, 0xFE	; 254
    296c:	51 05       	cpc	r21, r1
    296e:	68 f0       	brcs	.+26     	; 0x298a <__divsf3_pse+0x82>
    2970:	74 c0       	rjmp	.+232    	; 0x2a5a <__fp_inf>
    2972:	be c0       	rjmp	.+380    	; 0x2af0 <__fp_szero>
    2974:	5f 3f       	cpi	r21, 0xFF	; 255
    2976:	ec f3       	brlt	.-6      	; 0x2972 <__divsf3_pse+0x6a>
    2978:	98 3e       	cpi	r25, 0xE8	; 232
    297a:	dc f3       	brlt	.-10     	; 0x2972 <__divsf3_pse+0x6a>
    297c:	86 95       	lsr	r24
    297e:	77 95       	ror	r23
    2980:	67 95       	ror	r22
    2982:	b7 95       	ror	r27
    2984:	f7 95       	ror	r31
    2986:	9f 5f       	subi	r25, 0xFF	; 255
    2988:	c9 f7       	brne	.-14     	; 0x297c <__divsf3_pse+0x74>
    298a:	88 0f       	add	r24, r24
    298c:	91 1d       	adc	r25, r1
    298e:	96 95       	lsr	r25
    2990:	87 95       	ror	r24
    2992:	97 f9       	bld	r25, 7
    2994:	08 95       	ret
    2996:	e1 e0       	ldi	r30, 0x01	; 1
    2998:	66 0f       	add	r22, r22
    299a:	77 1f       	adc	r23, r23
    299c:	88 1f       	adc	r24, r24
    299e:	bb 1f       	adc	r27, r27
    29a0:	62 17       	cp	r22, r18
    29a2:	73 07       	cpc	r23, r19
    29a4:	84 07       	cpc	r24, r20
    29a6:	ba 07       	cpc	r27, r26
    29a8:	20 f0       	brcs	.+8      	; 0x29b2 <__divsf3_pse+0xaa>
    29aa:	62 1b       	sub	r22, r18
    29ac:	73 0b       	sbc	r23, r19
    29ae:	84 0b       	sbc	r24, r20
    29b0:	ba 0b       	sbc	r27, r26
    29b2:	ee 1f       	adc	r30, r30
    29b4:	88 f7       	brcc	.-30     	; 0x2998 <__divsf3_pse+0x90>
    29b6:	e0 95       	com	r30
    29b8:	08 95       	ret

000029ba <__fixunssfsi>:
    29ba:	7f d0       	rcall	.+254    	; 0x2aba <__fp_splitA>
    29bc:	88 f0       	brcs	.+34     	; 0x29e0 <__fixunssfsi+0x26>
    29be:	9f 57       	subi	r25, 0x7F	; 127
    29c0:	90 f0       	brcs	.+36     	; 0x29e6 <__fixunssfsi+0x2c>
    29c2:	b9 2f       	mov	r27, r25
    29c4:	99 27       	eor	r25, r25
    29c6:	b7 51       	subi	r27, 0x17	; 23
    29c8:	a0 f0       	brcs	.+40     	; 0x29f2 <__fixunssfsi+0x38>
    29ca:	d1 f0       	breq	.+52     	; 0x2a00 <__fixunssfsi+0x46>
    29cc:	66 0f       	add	r22, r22
    29ce:	77 1f       	adc	r23, r23
    29d0:	88 1f       	adc	r24, r24
    29d2:	99 1f       	adc	r25, r25
    29d4:	1a f0       	brmi	.+6      	; 0x29dc <__fixunssfsi+0x22>
    29d6:	ba 95       	dec	r27
    29d8:	c9 f7       	brne	.-14     	; 0x29cc <__fixunssfsi+0x12>
    29da:	12 c0       	rjmp	.+36     	; 0x2a00 <__fixunssfsi+0x46>
    29dc:	b1 30       	cpi	r27, 0x01	; 1
    29de:	81 f0       	breq	.+32     	; 0x2a00 <__fixunssfsi+0x46>
    29e0:	86 d0       	rcall	.+268    	; 0x2aee <__fp_zero>
    29e2:	b1 e0       	ldi	r27, 0x01	; 1
    29e4:	08 95       	ret
    29e6:	83 c0       	rjmp	.+262    	; 0x2aee <__fp_zero>
    29e8:	67 2f       	mov	r22, r23
    29ea:	78 2f       	mov	r23, r24
    29ec:	88 27       	eor	r24, r24
    29ee:	b8 5f       	subi	r27, 0xF8	; 248
    29f0:	39 f0       	breq	.+14     	; 0x2a00 <__fixunssfsi+0x46>
    29f2:	b9 3f       	cpi	r27, 0xF9	; 249
    29f4:	cc f3       	brlt	.-14     	; 0x29e8 <__fixunssfsi+0x2e>
    29f6:	86 95       	lsr	r24
    29f8:	77 95       	ror	r23
    29fa:	67 95       	ror	r22
    29fc:	b3 95       	inc	r27
    29fe:	d9 f7       	brne	.-10     	; 0x29f6 <__fixunssfsi+0x3c>
    2a00:	3e f4       	brtc	.+14     	; 0x2a10 <__fixunssfsi+0x56>
    2a02:	90 95       	com	r25
    2a04:	80 95       	com	r24
    2a06:	70 95       	com	r23
    2a08:	61 95       	neg	r22
    2a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0c:	8f 4f       	sbci	r24, 0xFF	; 255
    2a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a10:	08 95       	ret

00002a12 <__fp_cmp>:
    2a12:	99 0f       	add	r25, r25
    2a14:	00 08       	sbc	r0, r0
    2a16:	55 0f       	add	r21, r21
    2a18:	aa 0b       	sbc	r26, r26
    2a1a:	e0 e8       	ldi	r30, 0x80	; 128
    2a1c:	fe ef       	ldi	r31, 0xFE	; 254
    2a1e:	16 16       	cp	r1, r22
    2a20:	17 06       	cpc	r1, r23
    2a22:	e8 07       	cpc	r30, r24
    2a24:	f9 07       	cpc	r31, r25
    2a26:	c0 f0       	brcs	.+48     	; 0x2a58 <__fp_cmp+0x46>
    2a28:	12 16       	cp	r1, r18
    2a2a:	13 06       	cpc	r1, r19
    2a2c:	e4 07       	cpc	r30, r20
    2a2e:	f5 07       	cpc	r31, r21
    2a30:	98 f0       	brcs	.+38     	; 0x2a58 <__fp_cmp+0x46>
    2a32:	62 1b       	sub	r22, r18
    2a34:	73 0b       	sbc	r23, r19
    2a36:	84 0b       	sbc	r24, r20
    2a38:	95 0b       	sbc	r25, r21
    2a3a:	39 f4       	brne	.+14     	; 0x2a4a <__fp_cmp+0x38>
    2a3c:	0a 26       	eor	r0, r26
    2a3e:	61 f0       	breq	.+24     	; 0x2a58 <__fp_cmp+0x46>
    2a40:	23 2b       	or	r18, r19
    2a42:	24 2b       	or	r18, r20
    2a44:	25 2b       	or	r18, r21
    2a46:	21 f4       	brne	.+8      	; 0x2a50 <__fp_cmp+0x3e>
    2a48:	08 95       	ret
    2a4a:	0a 26       	eor	r0, r26
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <__fp_cmp+0x3e>
    2a4e:	a1 40       	sbci	r26, 0x01	; 1
    2a50:	a6 95       	lsr	r26
    2a52:	8f ef       	ldi	r24, 0xFF	; 255
    2a54:	81 1d       	adc	r24, r1
    2a56:	81 1d       	adc	r24, r1
    2a58:	08 95       	ret

00002a5a <__fp_inf>:
    2a5a:	97 f9       	bld	r25, 7
    2a5c:	9f 67       	ori	r25, 0x7F	; 127
    2a5e:	80 e8       	ldi	r24, 0x80	; 128
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	08 95       	ret

00002a66 <__fp_nan>:
    2a66:	9f ef       	ldi	r25, 0xFF	; 255
    2a68:	80 ec       	ldi	r24, 0xC0	; 192
    2a6a:	08 95       	ret

00002a6c <__fp_pscA>:
    2a6c:	00 24       	eor	r0, r0
    2a6e:	0a 94       	dec	r0
    2a70:	16 16       	cp	r1, r22
    2a72:	17 06       	cpc	r1, r23
    2a74:	18 06       	cpc	r1, r24
    2a76:	09 06       	cpc	r0, r25
    2a78:	08 95       	ret

00002a7a <__fp_pscB>:
    2a7a:	00 24       	eor	r0, r0
    2a7c:	0a 94       	dec	r0
    2a7e:	12 16       	cp	r1, r18
    2a80:	13 06       	cpc	r1, r19
    2a82:	14 06       	cpc	r1, r20
    2a84:	05 06       	cpc	r0, r21
    2a86:	08 95       	ret

00002a88 <__fp_round>:
    2a88:	09 2e       	mov	r0, r25
    2a8a:	03 94       	inc	r0
    2a8c:	00 0c       	add	r0, r0
    2a8e:	11 f4       	brne	.+4      	; 0x2a94 <__fp_round+0xc>
    2a90:	88 23       	and	r24, r24
    2a92:	52 f0       	brmi	.+20     	; 0x2aa8 <__fp_round+0x20>
    2a94:	bb 0f       	add	r27, r27
    2a96:	40 f4       	brcc	.+16     	; 0x2aa8 <__fp_round+0x20>
    2a98:	bf 2b       	or	r27, r31
    2a9a:	11 f4       	brne	.+4      	; 0x2aa0 <__fp_round+0x18>
    2a9c:	60 ff       	sbrs	r22, 0
    2a9e:	04 c0       	rjmp	.+8      	; 0x2aa8 <__fp_round+0x20>
    2aa0:	6f 5f       	subi	r22, 0xFF	; 255
    2aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa4:	8f 4f       	sbci	r24, 0xFF	; 255
    2aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa8:	08 95       	ret

00002aaa <__fp_split3>:
    2aaa:	57 fd       	sbrc	r21, 7
    2aac:	90 58       	subi	r25, 0x80	; 128
    2aae:	44 0f       	add	r20, r20
    2ab0:	55 1f       	adc	r21, r21
    2ab2:	59 f0       	breq	.+22     	; 0x2aca <__fp_splitA+0x10>
    2ab4:	5f 3f       	cpi	r21, 0xFF	; 255
    2ab6:	71 f0       	breq	.+28     	; 0x2ad4 <__fp_splitA+0x1a>
    2ab8:	47 95       	ror	r20

00002aba <__fp_splitA>:
    2aba:	88 0f       	add	r24, r24
    2abc:	97 fb       	bst	r25, 7
    2abe:	99 1f       	adc	r25, r25
    2ac0:	61 f0       	breq	.+24     	; 0x2ada <__fp_splitA+0x20>
    2ac2:	9f 3f       	cpi	r25, 0xFF	; 255
    2ac4:	79 f0       	breq	.+30     	; 0x2ae4 <__fp_splitA+0x2a>
    2ac6:	87 95       	ror	r24
    2ac8:	08 95       	ret
    2aca:	12 16       	cp	r1, r18
    2acc:	13 06       	cpc	r1, r19
    2ace:	14 06       	cpc	r1, r20
    2ad0:	55 1f       	adc	r21, r21
    2ad2:	f2 cf       	rjmp	.-28     	; 0x2ab8 <__fp_split3+0xe>
    2ad4:	46 95       	lsr	r20
    2ad6:	f1 df       	rcall	.-30     	; 0x2aba <__fp_splitA>
    2ad8:	08 c0       	rjmp	.+16     	; 0x2aea <__fp_splitA+0x30>
    2ada:	16 16       	cp	r1, r22
    2adc:	17 06       	cpc	r1, r23
    2ade:	18 06       	cpc	r1, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	f1 cf       	rjmp	.-30     	; 0x2ac6 <__fp_splitA+0xc>
    2ae4:	86 95       	lsr	r24
    2ae6:	71 05       	cpc	r23, r1
    2ae8:	61 05       	cpc	r22, r1
    2aea:	08 94       	sec
    2aec:	08 95       	ret

00002aee <__fp_zero>:
    2aee:	e8 94       	clt

00002af0 <__fp_szero>:
    2af0:	bb 27       	eor	r27, r27
    2af2:	66 27       	eor	r22, r22
    2af4:	77 27       	eor	r23, r23
    2af6:	cb 01       	movw	r24, r22
    2af8:	97 f9       	bld	r25, 7
    2afa:	08 95       	ret

00002afc <__gesf2>:
    2afc:	8a df       	rcall	.-236    	; 0x2a12 <__fp_cmp>
    2afe:	08 f4       	brcc	.+2      	; 0x2b02 <__gesf2+0x6>
    2b00:	8f ef       	ldi	r24, 0xFF	; 255
    2b02:	08 95       	ret

00002b04 <__mulsf3>:
    2b04:	0b d0       	rcall	.+22     	; 0x2b1c <__mulsf3x>
    2b06:	c0 cf       	rjmp	.-128    	; 0x2a88 <__fp_round>
    2b08:	b1 df       	rcall	.-158    	; 0x2a6c <__fp_pscA>
    2b0a:	28 f0       	brcs	.+10     	; 0x2b16 <__mulsf3+0x12>
    2b0c:	b6 df       	rcall	.-148    	; 0x2a7a <__fp_pscB>
    2b0e:	18 f0       	brcs	.+6      	; 0x2b16 <__mulsf3+0x12>
    2b10:	95 23       	and	r25, r21
    2b12:	09 f0       	breq	.+2      	; 0x2b16 <__mulsf3+0x12>
    2b14:	a2 cf       	rjmp	.-188    	; 0x2a5a <__fp_inf>
    2b16:	a7 cf       	rjmp	.-178    	; 0x2a66 <__fp_nan>
    2b18:	11 24       	eor	r1, r1
    2b1a:	ea cf       	rjmp	.-44     	; 0x2af0 <__fp_szero>

00002b1c <__mulsf3x>:
    2b1c:	c6 df       	rcall	.-116    	; 0x2aaa <__fp_split3>
    2b1e:	a0 f3       	brcs	.-24     	; 0x2b08 <__mulsf3+0x4>

00002b20 <__mulsf3_pse>:
    2b20:	95 9f       	mul	r25, r21
    2b22:	d1 f3       	breq	.-12     	; 0x2b18 <__mulsf3+0x14>
    2b24:	95 0f       	add	r25, r21
    2b26:	50 e0       	ldi	r21, 0x00	; 0
    2b28:	55 1f       	adc	r21, r21
    2b2a:	62 9f       	mul	r22, r18
    2b2c:	f0 01       	movw	r30, r0
    2b2e:	72 9f       	mul	r23, r18
    2b30:	bb 27       	eor	r27, r27
    2b32:	f0 0d       	add	r31, r0
    2b34:	b1 1d       	adc	r27, r1
    2b36:	63 9f       	mul	r22, r19
    2b38:	aa 27       	eor	r26, r26
    2b3a:	f0 0d       	add	r31, r0
    2b3c:	b1 1d       	adc	r27, r1
    2b3e:	aa 1f       	adc	r26, r26
    2b40:	64 9f       	mul	r22, r20
    2b42:	66 27       	eor	r22, r22
    2b44:	b0 0d       	add	r27, r0
    2b46:	a1 1d       	adc	r26, r1
    2b48:	66 1f       	adc	r22, r22
    2b4a:	82 9f       	mul	r24, r18
    2b4c:	22 27       	eor	r18, r18
    2b4e:	b0 0d       	add	r27, r0
    2b50:	a1 1d       	adc	r26, r1
    2b52:	62 1f       	adc	r22, r18
    2b54:	73 9f       	mul	r23, r19
    2b56:	b0 0d       	add	r27, r0
    2b58:	a1 1d       	adc	r26, r1
    2b5a:	62 1f       	adc	r22, r18
    2b5c:	83 9f       	mul	r24, r19
    2b5e:	a0 0d       	add	r26, r0
    2b60:	61 1d       	adc	r22, r1
    2b62:	22 1f       	adc	r18, r18
    2b64:	74 9f       	mul	r23, r20
    2b66:	33 27       	eor	r19, r19
    2b68:	a0 0d       	add	r26, r0
    2b6a:	61 1d       	adc	r22, r1
    2b6c:	23 1f       	adc	r18, r19
    2b6e:	84 9f       	mul	r24, r20
    2b70:	60 0d       	add	r22, r0
    2b72:	21 1d       	adc	r18, r1
    2b74:	82 2f       	mov	r24, r18
    2b76:	76 2f       	mov	r23, r22
    2b78:	6a 2f       	mov	r22, r26
    2b7a:	11 24       	eor	r1, r1
    2b7c:	9f 57       	subi	r25, 0x7F	; 127
    2b7e:	50 40       	sbci	r21, 0x00	; 0
    2b80:	8a f0       	brmi	.+34     	; 0x2ba4 <__mulsf3_pse+0x84>
    2b82:	e1 f0       	breq	.+56     	; 0x2bbc <__mulsf3_pse+0x9c>
    2b84:	88 23       	and	r24, r24
    2b86:	4a f0       	brmi	.+18     	; 0x2b9a <__mulsf3_pse+0x7a>
    2b88:	ee 0f       	add	r30, r30
    2b8a:	ff 1f       	adc	r31, r31
    2b8c:	bb 1f       	adc	r27, r27
    2b8e:	66 1f       	adc	r22, r22
    2b90:	77 1f       	adc	r23, r23
    2b92:	88 1f       	adc	r24, r24
    2b94:	91 50       	subi	r25, 0x01	; 1
    2b96:	50 40       	sbci	r21, 0x00	; 0
    2b98:	a9 f7       	brne	.-22     	; 0x2b84 <__mulsf3_pse+0x64>
    2b9a:	9e 3f       	cpi	r25, 0xFE	; 254
    2b9c:	51 05       	cpc	r21, r1
    2b9e:	70 f0       	brcs	.+28     	; 0x2bbc <__mulsf3_pse+0x9c>
    2ba0:	5c cf       	rjmp	.-328    	; 0x2a5a <__fp_inf>
    2ba2:	a6 cf       	rjmp	.-180    	; 0x2af0 <__fp_szero>
    2ba4:	5f 3f       	cpi	r21, 0xFF	; 255
    2ba6:	ec f3       	brlt	.-6      	; 0x2ba2 <__mulsf3_pse+0x82>
    2ba8:	98 3e       	cpi	r25, 0xE8	; 232
    2baa:	dc f3       	brlt	.-10     	; 0x2ba2 <__mulsf3_pse+0x82>
    2bac:	86 95       	lsr	r24
    2bae:	77 95       	ror	r23
    2bb0:	67 95       	ror	r22
    2bb2:	b7 95       	ror	r27
    2bb4:	f7 95       	ror	r31
    2bb6:	e7 95       	ror	r30
    2bb8:	9f 5f       	subi	r25, 0xFF	; 255
    2bba:	c1 f7       	brne	.-16     	; 0x2bac <__mulsf3_pse+0x8c>
    2bbc:	fe 2b       	or	r31, r30
    2bbe:	88 0f       	add	r24, r24
    2bc0:	91 1d       	adc	r25, r1
    2bc2:	96 95       	lsr	r25
    2bc4:	87 95       	ror	r24
    2bc6:	97 f9       	bld	r25, 7
    2bc8:	08 95       	ret

00002bca <strcmp>:
    2bca:	fb 01       	movw	r30, r22
    2bcc:	dc 01       	movw	r26, r24
    2bce:	8d 91       	ld	r24, X+
    2bd0:	01 90       	ld	r0, Z+
    2bd2:	80 19       	sub	r24, r0
    2bd4:	01 10       	cpse	r0, r1
    2bd6:	d9 f3       	breq	.-10     	; 0x2bce <strcmp+0x4>
    2bd8:	99 0b       	sbc	r25, r25
    2bda:	08 95       	ret

00002bdc <eeprom_read_byte>:
    2bdc:	e1 99       	sbic	0x1c, 1	; 28
    2bde:	fe cf       	rjmp	.-4      	; 0x2bdc <eeprom_read_byte>
    2be0:	9f bb       	out	0x1f, r25	; 31
    2be2:	8e bb       	out	0x1e, r24	; 30
    2be4:	e0 9a       	sbi	0x1c, 0	; 28
    2be6:	99 27       	eor	r25, r25
    2be8:	8d b3       	in	r24, 0x1d	; 29
    2bea:	08 95       	ret

00002bec <eeprom_update_byte>:
    2bec:	26 2f       	mov	r18, r22

00002bee <eeprom_update_r18>:
    2bee:	e1 99       	sbic	0x1c, 1	; 28
    2bf0:	fe cf       	rjmp	.-4      	; 0x2bee <eeprom_update_r18>
    2bf2:	9f bb       	out	0x1f, r25	; 31
    2bf4:	8e bb       	out	0x1e, r24	; 30
    2bf6:	e0 9a       	sbi	0x1c, 0	; 28
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	0d b2       	in	r0, 0x1d	; 29
    2bfc:	02 16       	cp	r0, r18
    2bfe:	31 f0       	breq	.+12     	; 0x2c0c <eeprom_update_r18+0x1e>
    2c00:	2d bb       	out	0x1d, r18	; 29
    2c02:	0f b6       	in	r0, 0x3f	; 63
    2c04:	f8 94       	cli
    2c06:	e2 9a       	sbi	0x1c, 2	; 28
    2c08:	e1 9a       	sbi	0x1c, 1	; 28
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	08 95       	ret

00002c0e <_exit>:
    2c0e:	f8 94       	cli

00002c10 <__stop_program>:
    2c10:	ff cf       	rjmp	.-2      	; 0x2c10 <__stop_program>
