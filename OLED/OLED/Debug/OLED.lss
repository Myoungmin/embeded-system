
OLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000400  00800100  000003dc  00000470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800500  00800500  00000870  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000159c  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6c  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c8  00000000  00000000  00002ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00003498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cf  00000000  00000000  000036d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000910  00000000  00000000  00003da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000046b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	15 e0       	ldi	r17, 0x05	; 5
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ed       	ldi	r30, 0xDC	; 220
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	25 e0       	ldi	r18, 0x05	; 5
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b5 e0       	ldi	r27, 0x05	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 30       	cpi	r26, 0x05	; 5
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	29 d1       	rcall	.+594    	; 0x316 <main>
  c4:	89 c1       	rjmp	.+786    	; 0x3d8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <i2cSetBitrate>:
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
	// return data
	for(i=0; i<length; i++)
  c8:	e1 e7       	ldi	r30, 0x71	; 113
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	20 81       	ld	r18, Z
  ce:	2e 7f       	andi	r18, 0xFE	; 254
  d0:	20 83       	st	Z, r18
  d2:	20 81       	ld	r18, Z
  d4:	2d 7f       	andi	r18, 0xFD	; 253
  d6:	20 83       	st	Z, r18
  d8:	9c 01       	movw	r18, r24
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	50 e0       	ldi	r21, 0x00	; 0
  de:	60 e8       	ldi	r22, 0x80	; 128
  e0:	7e e3       	ldi	r23, 0x3E	; 62
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	3a d1       	rcall	.+628    	; 0x35c <__divmodsi4>
  e8:	82 2f       	mov	r24, r18
  ea:	20 31       	cpi	r18, 0x10	; 16
  ec:	48 f0       	brcs	.+18     	; 0x100 <i2cSetBitrate+0x38>
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	20 51       	subi	r18, 0x10	; 16
  f2:	31 09       	sbc	r19, r1
  f4:	c9 01       	movw	r24, r18
  f6:	99 23       	and	r25, r25
  f8:	0c f4       	brge	.+2      	; 0xfc <i2cSetBitrate+0x34>
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	95 95       	asr	r25
  fe:	87 95       	ror	r24
 100:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 104:	08 95       	ret

00000106 <i2cInit>:
 106:	a8 9a       	sbi	0x15, 0	; 21
 108:	a9 9a       	sbi	0x15, 1	; 21
 10a:	90 9a       	sbi	0x12, 0	; 18
 10c:	91 9a       	sbi	0x12, 1	; 18
 10e:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <i2cSlaveReceive+0x1>
 112:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <i2cSlaveReceive>
 116:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <__data_end+0x1>
 11a:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <__data_end>
 11e:	84 e6       	ldi	r24, 0x64	; 100
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	d2 df       	rcall	.-92     	; 0xc8 <i2cSetBitrate>
 124:	e4 e7       	ldi	r30, 0x74	; 116
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	80 83       	st	Z, r24
 12e:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <I2cState>
 132:	80 81       	ld	r24, Z
 134:	81 60       	ori	r24, 0x01	; 1
 136:	80 83       	st	Z, r24
 138:	80 81       	ld	r24, Z
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	80 83       	st	Z, r24
 13e:	78 94       	sei
 140:	08 95       	ret

00000142 <i2cMasterSendNI>:
		*data++ = I2cReceiveData[i];
}

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
 146:	e4 e7       	ldi	r30, 0x74	; 116
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	90 81       	ld	r25, Z
 14c:	9e 7f       	andi	r25, 0xFE	; 254
 14e:	90 83       	st	Z, r25
}

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
 150:	90 81       	ld	r25, Z
 152:	9f 70       	andi	r25, 0x0F	; 15
 154:	90 6a       	ori	r25, 0xA0	; 160
 156:	90 83       	st	Z, r25
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 158:	90 81       	ld	r25, Z
 15a:	99 23       	and	r25, r25
 15c:	ec f7       	brge	.-6      	; 0x158 <i2cMasterSendNI+0x16>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
 15e:	8e 7f       	andi	r24, 0xFE	; 254
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 160:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 164:	e4 e7       	ldi	r30, 0x74	; 116
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	80 83       	st	Z, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 170:	80 81       	ld	r24, Z
 172:	88 23       	and	r24, r24
 174:	ec f7       	brge	.-6      	; 0x170 <i2cMasterSendNI+0x2e>
	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
 176:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 17a:	88 31       	cpi	r24, 0x18	; 24
 17c:	a9 f4       	brne	.+42     	; 0x1a8 <i2cMasterSendNI+0x66>
	{
		// send data
		while(length)
 17e:	66 23       	and	r22, r22
 180:	a9 f0       	breq	.+42     	; 0x1ac <i2cMasterSendNI+0x6a>
 182:	a4 2f       	mov	r26, r20
 184:	b5 2f       	mov	r27, r21
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 186:	c3 e7       	ldi	r28, 0x73	; 115
 188:	d0 e0       	ldi	r29, 0x00	; 0
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 18a:	e4 e7       	ldi	r30, 0x74	; 116
 18c:	f0 e0       	ldi	r31, 0x00	; 0
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
 18e:	8d 91       	ld	r24, X+
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 190:	88 83       	st	Y, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 192:	80 81       	ld	r24, Z
 194:	8f 70       	andi	r24, 0x0F	; 15
 196:	80 68       	ori	r24, 0x80	; 128
 198:	80 83       	st	Z, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 19a:	80 81       	ld	r24, Z
 19c:	88 23       	and	r24, r24
 19e:	ec f7       	brge	.-6      	; 0x19a <i2cMasterSendNI+0x58>
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
			i2cWaitForComplete();
			length--;
 1a0:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
 1a2:	a9 f7       	brne	.-22     	; 0x18e <i2cMasterSendNI+0x4c>
		*data++ = I2cReceiveData[i];
}

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
	u08 retval = I2C_OK;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <i2cMasterSendNI+0x6c>
	else
	{
		// device did not ACK it's address,
		// data will not be transferred
		// return error
		retval = I2C_ERROR_NODEV;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <i2cMasterSendNI+0x6c>
		*data++ = I2cReceiveData[i];
}

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
	u08 retval = I2C_OK;
 1ac:	80 e0       	ldi	r24, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
 1ae:	e4 e7       	ldi	r30, 0x74	; 116
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	90 81       	ld	r25, Z
 1b4:	9f 70       	andi	r25, 0x0F	; 15
 1b6:	90 6d       	ori	r25, 0xD0	; 208
 1b8:	90 83       	st	Z, r25
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();
	while( !(inb(TWCR) & BV(TWSTO)) );
 1ba:	90 81       	ld	r25, Z
 1bc:	94 ff       	sbrs	r25, 4
 1be:	fd cf       	rjmp	.-6      	; 0x1ba <i2cMasterSendNI+0x78>

	// enable TWI interrupt
	sbi(TWCR, TWIE);
 1c0:	e4 e7       	ldi	r30, 0x74	; 116
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	90 81       	ld	r25, Z
 1c6:	91 60       	ori	r25, 0x01	; 1
 1c8:	90 83       	st	Z, r25

	return retval;
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <i2c_command>:
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x03,0x0C,0x30,0x0C,0x03,0x7F,
	0x00,0x00,0x26,0x49,0x49,0x49,0x32,0x00,0x00,0x7F,0x02,0x04,0x08,0x10,0x7F,0x00,
};


void i2c_command(uint8_t data){
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
 1d8:	e2 97       	sbiw	r28, 0x32	; 50
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61
	uint8_t tx_buffer[50];
	tx_buffer[0]=i2c_opcode;
 1e4:	19 82       	std	Y+1, r1	; 0x01
	tx_buffer[1]=data;
 1e6:	8a 83       	std	Y+2, r24	; 0x02
	i2cMasterSendNI(i2c_address,2,tx_buffer);
 1e8:	ae 01       	movw	r20, r28
 1ea:	4f 5f       	subi	r20, 0xFF	; 255
 1ec:	5f 4f       	sbci	r21, 0xFF	; 255
 1ee:	62 e0       	ldi	r22, 0x02	; 2
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	88 e7       	ldi	r24, 0x78	; 120
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	a5 df       	rcall	.-182    	; 0x142 <i2cMasterSendNI>
}
 1f8:	e2 96       	adiw	r28, 0x32	; 50
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <i2c_data>:

void i2c_data(uint8_t data){
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
 212:	e2 97       	sbiw	r28, 0x32	; 50
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
	uint8_t tx_buffer[50];
	tx_buffer[0]=i2c_datacode;
 21e:	90 e4       	ldi	r25, 0x40	; 64
 220:	99 83       	std	Y+1, r25	; 0x01
	tx_buffer[1]=data;
 222:	8a 83       	std	Y+2, r24	; 0x02
	i2cMasterSendNI(i2c_address,2,tx_buffer);
 224:	ae 01       	movw	r20, r28
 226:	4f 5f       	subi	r20, 0xFF	; 255
 228:	5f 4f       	sbci	r21, 0xFF	; 255
 22a:	62 e0       	ldi	r22, 0x02	; 2
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	88 e7       	ldi	r24, 0x78	; 120
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	87 df       	rcall	.-242    	; 0x142 <i2cMasterSendNI>
}
 234:	e2 96       	adiw	r28, 0x32	; 50
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <oled_init>:


void oled_init(void)
{
	i2c_command(0xAE);   //display off
 246:	8e ea       	ldi	r24, 0xAE	; 174
 248:	c3 df       	rcall	.-122    	; 0x1d0 <i2c_command>
	i2c_command(0x20); //Set Memory Addressing Mode
 24a:	80 e2       	ldi	r24, 0x20	; 32
 24c:	c1 df       	rcall	.-126    	; 0x1d0 <i2c_command>
	i2c_command(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 24e:	80 e1       	ldi	r24, 0x10	; 16
 250:	bf df       	rcall	.-130    	; 0x1d0 <i2c_command>
	i2c_command(0xb0); //Set Page Start Address for Page Addressing Mode,0-7
 252:	80 eb       	ldi	r24, 0xB0	; 176
 254:	bd df       	rcall	.-134    	; 0x1d0 <i2c_command>
	i2c_command(0xc8); //Set COM Output Scan Direction
 256:	88 ec       	ldi	r24, 0xC8	; 200
 258:	bb df       	rcall	.-138    	; 0x1d0 <i2c_command>
	i2c_command(0x00);//---set low column address
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	b9 df       	rcall	.-142    	; 0x1d0 <i2c_command>
	i2c_command(0x10);//---set high column address
 25e:	80 e1       	ldi	r24, 0x10	; 16
 260:	b7 df       	rcall	.-146    	; 0x1d0 <i2c_command>
	i2c_command(0x40);//--set start line address
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	b5 df       	rcall	.-150    	; 0x1d0 <i2c_command>
	i2c_command(0x81);//--set contrast control register
 266:	81 e8       	ldi	r24, 0x81	; 129
 268:	b3 df       	rcall	.-154    	; 0x1d0 <i2c_command>
	i2c_command(0x7f);
 26a:	8f e7       	ldi	r24, 0x7F	; 127
 26c:	b1 df       	rcall	.-158    	; 0x1d0 <i2c_command>
	i2c_command(0xa1);//--set segment re-map 0 to 127
 26e:	81 ea       	ldi	r24, 0xA1	; 161
 270:	af df       	rcall	.-162    	; 0x1d0 <i2c_command>
	i2c_command(0xa6);//--set normal display
 272:	86 ea       	ldi	r24, 0xA6	; 166
 274:	ad df       	rcall	.-166    	; 0x1d0 <i2c_command>
	i2c_command(0xa8);//--set multiplex ratio(1 to 64)
 276:	88 ea       	ldi	r24, 0xA8	; 168
 278:	ab df       	rcall	.-170    	; 0x1d0 <i2c_command>
	i2c_command(0x3F);//
 27a:	8f e3       	ldi	r24, 0x3F	; 63
 27c:	a9 df       	rcall	.-174    	; 0x1d0 <i2c_command>
	i2c_command(0xa4);//0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 27e:	84 ea       	ldi	r24, 0xA4	; 164
 280:	a7 df       	rcall	.-178    	; 0x1d0 <i2c_command>
	i2c_command(0xd3);//-set display offset
 282:	83 ed       	ldi	r24, 0xD3	; 211
 284:	a5 df       	rcall	.-182    	; 0x1d0 <i2c_command>
	i2c_command(0x00);//-not offset
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	a3 df       	rcall	.-186    	; 0x1d0 <i2c_command>
	i2c_command(0xd5);//--set display clock divide ratio/oscillator frequency
 28a:	85 ed       	ldi	r24, 0xD5	; 213
 28c:	a1 df       	rcall	.-190    	; 0x1d0 <i2c_command>
	i2c_command(0xf0);//--set divide ratio
 28e:	80 ef       	ldi	r24, 0xF0	; 240
 290:	9f df       	rcall	.-194    	; 0x1d0 <i2c_command>
	i2c_command(0xd9);//--set pre-charge period
 292:	89 ed       	ldi	r24, 0xD9	; 217
 294:	9d df       	rcall	.-198    	; 0x1d0 <i2c_command>
 296:	82 e2       	ldi	r24, 0x22	; 34
	i2c_command(0x22); //
 298:	9b df       	rcall	.-202    	; 0x1d0 <i2c_command>
 29a:	8a ed       	ldi	r24, 0xDA	; 218
 29c:	99 df       	rcall	.-206    	; 0x1d0 <i2c_command>
	i2c_command(0xda);//--set com pins hardware configuration
 29e:	82 e1       	ldi	r24, 0x12	; 18
 2a0:	97 df       	rcall	.-210    	; 0x1d0 <i2c_command>
 2a2:	8b ed       	ldi	r24, 0xDB	; 219
	i2c_command(0x12);
 2a4:	95 df       	rcall	.-214    	; 0x1d0 <i2c_command>
 2a6:	80 e2       	ldi	r24, 0x20	; 32
 2a8:	93 df       	rcall	.-218    	; 0x1d0 <i2c_command>
	i2c_command(0xdb);//--set vcomh
 2aa:	8d e8       	ldi	r24, 0x8D	; 141
 2ac:	91 df       	rcall	.-222    	; 0x1d0 <i2c_command>
 2ae:	84 e1       	ldi	r24, 0x14	; 20
	i2c_command(0x20);//0x20,0.77xVcc
 2b0:	8f df       	rcall	.-226    	; 0x1d0 <i2c_command>
 2b2:	8f ea       	ldi	r24, 0xAF	; 175
 2b4:	8d cf       	rjmp	.-230    	; 0x1d0 <i2c_command>
	i2c_command(0x8d);//--set DC-DC enable
 2b6:	08 95       	ret

000002b8 <draw_picture>:
 2b8:	df 92       	push	r13
 2ba:	ef 92       	push	r14
	i2c_command(0x14);//
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
	i2c_command(0xaf);//--turn on oled panel
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	c0 e0       	ldi	r28, 0x00	; 0
 2c8:	d0 e0       	ldi	r29, 0x00	; 0
}


void draw_picture(void)
{
 2ca:	0f 2e       	mov	r0, r31
 2cc:	f0 eb       	ldi	r31, 0xB0	; 176
 2ce:	df 2e       	mov	r13, r31
 2d0:	f0 2d       	mov	r31, r0
	unsigned char x,y;
	unsigned int i=0;
	for(y=0;y<8;y++)
	{
		i2c_command(0xb0+y);
 2d2:	8d 2d       	mov	r24, r13
 2d4:	7d df       	rcall	.-262    	; 0x1d0 <i2c_command>
		i2c_command(0x00);
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	7b df       	rcall	.-266    	; 0x1d0 <i2c_command>
		i2c_command(0x10);
 2da:	80 e1       	ldi	r24, 0x10	; 16
 2dc:	79 df       	rcall	.-270    	; 0x1d0 <i2c_command>
 2de:	8e 01       	movw	r16, r28
 2e0:	00 50       	subi	r16, 0x00	; 0
 2e2:	1f 4f       	sbci	r17, 0xFF	; 255
 2e4:	7e 01       	movw	r14, r28
 2e6:	80 e8       	ldi	r24, 0x80	; 128
 2e8:	e8 0e       	add	r14, r24
 2ea:	f1 1c       	adc	r15, r1
 2ec:	21 96       	adiw	r28, 0x01	; 1
		for(x=0;x<128;x++)
		{
			i2c_data(show1[i++]);
 2ee:	f8 01       	movw	r30, r16
 2f0:	81 91       	ld	r24, Z+
 2f2:	8f 01       	movw	r16, r30
 2f4:	8a df       	rcall	.-236    	; 0x20a <i2c_data>
 2f6:	ce 15       	cp	r28, r14
	for(y=0;y<8;y++)
	{
		i2c_command(0xb0+y);
		i2c_command(0x00);
		i2c_command(0x10);
		for(x=0;x<128;x++)
 2f8:	df 05       	cpc	r29, r15
 2fa:	c1 f7       	brne	.-16     	; 0x2ec <draw_picture+0x34>
 2fc:	d3 94       	inc	r13
 2fe:	e1 14       	cp	r14, r1

void draw_picture(void)
{
	unsigned char x,y;
	unsigned int i=0;
	for(y=0;y<8;y++)
 300:	f4 e0       	ldi	r31, 0x04	; 4
 302:	ff 06       	cpc	r15, r31
 304:	31 f7       	brne	.-52     	; 0x2d2 <draw_picture+0x1a>
 306:	df 91       	pop	r29
		for(x=0;x<128;x++)
		{
			i2c_data(show1[i++]);
		}
	}
}
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	df 90       	pop	r13
 314:	08 95       	ret

00000316 <main>:
 316:	f7 de       	rcall	.-530    	; 0x106 <i2cInit>
int main(void)
{
	uint8_t data[5];
	
	i2cInit();
	i2cSetBitrate(55);
 318:	87 e3       	ldi	r24, 0x37	; 55
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	d5 de       	rcall	.-598    	; 0xc8 <i2cSetBitrate>
	
	sei(); //////global interrupt
 31e:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	89 e6       	ldi	r24, 0x69	; 105
 324:	98 e1       	ldi	r25, 0x18	; 24
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <main+0x10>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x1a>
	
	_delay_ms(500);
	oled_init();
 330:	00 00       	nop
 332:	89 df       	rcall	.-238    	; 0x246 <oled_init>
 334:	2f ef       	ldi	r18, 0xFF	; 255
 336:	89 e6       	ldi	r24, 0x69	; 105
 338:	98 e1       	ldi	r25, 0x18	; 24
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	90 40       	sbci	r25, 0x00	; 0
 340:	e1 f7       	brne	.-8      	; 0x33a <main+0x24>
 342:	00 c0       	rjmp	.+0      	; 0x344 <main+0x2e>
	_delay_ms(500);
	draw_picture();
 344:	00 00       	nop
 346:	b8 df       	rcall	.-144    	; 0x2b8 <draw_picture>
 348:	2f ef       	ldi	r18, 0xFF	; 255
 34a:	80 e7       	ldi	r24, 0x70	; 112
 34c:	92 e0       	ldi	r25, 0x02	; 2
 34e:	21 50       	subi	r18, 0x01	; 1
 350:	80 40       	sbci	r24, 0x00	; 0
 352:	90 40       	sbci	r25, 0x00	; 0
 354:	e1 f7       	brne	.-8      	; 0x34e <main+0x38>
 356:	00 c0       	rjmp	.+0      	; 0x358 <main+0x42>
 358:	00 00       	nop
 35a:	f6 cf       	rjmp	.-20     	; 0x348 <main+0x32>

0000035c <__divmodsi4>:
 35c:	05 2e       	mov	r0, r21
 35e:	97 fb       	bst	r25, 7
 360:	16 f4       	brtc	.+4      	; 0x366 <__divmodsi4+0xa>
 362:	00 94       	com	r0
 364:	0f d0       	rcall	.+30     	; 0x384 <__negsi2>
 366:	57 fd       	sbrc	r21, 7
 368:	05 d0       	rcall	.+10     	; 0x374 <__divmodsi4_neg2>
 36a:	14 d0       	rcall	.+40     	; 0x394 <__udivmodsi4>
 36c:	07 fc       	sbrc	r0, 7
 36e:	02 d0       	rcall	.+4      	; 0x374 <__divmodsi4_neg2>
 370:	46 f4       	brtc	.+16     	; 0x382 <__divmodsi4_exit>
 372:	08 c0       	rjmp	.+16     	; 0x384 <__negsi2>

00000374 <__divmodsi4_neg2>:
 374:	50 95       	com	r21
 376:	40 95       	com	r20
 378:	30 95       	com	r19
 37a:	21 95       	neg	r18
 37c:	3f 4f       	sbci	r19, 0xFF	; 255
 37e:	4f 4f       	sbci	r20, 0xFF	; 255
 380:	5f 4f       	sbci	r21, 0xFF	; 255

00000382 <__divmodsi4_exit>:
 382:	08 95       	ret

00000384 <__negsi2>:
 384:	90 95       	com	r25
 386:	80 95       	com	r24
 388:	70 95       	com	r23
 38a:	61 95       	neg	r22
 38c:	7f 4f       	sbci	r23, 0xFF	; 255
 38e:	8f 4f       	sbci	r24, 0xFF	; 255
 390:	9f 4f       	sbci	r25, 0xFF	; 255
 392:	08 95       	ret

00000394 <__udivmodsi4>:
 394:	a1 e2       	ldi	r26, 0x21	; 33
 396:	1a 2e       	mov	r1, r26
 398:	aa 1b       	sub	r26, r26
 39a:	bb 1b       	sub	r27, r27
 39c:	fd 01       	movw	r30, r26
 39e:	0d c0       	rjmp	.+26     	; 0x3ba <__udivmodsi4_ep>

000003a0 <__udivmodsi4_loop>:
 3a0:	aa 1f       	adc	r26, r26
 3a2:	bb 1f       	adc	r27, r27
 3a4:	ee 1f       	adc	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	a2 17       	cp	r26, r18
 3aa:	b3 07       	cpc	r27, r19
 3ac:	e4 07       	cpc	r30, r20
 3ae:	f5 07       	cpc	r31, r21
 3b0:	20 f0       	brcs	.+8      	; 0x3ba <__udivmodsi4_ep>
 3b2:	a2 1b       	sub	r26, r18
 3b4:	b3 0b       	sbc	r27, r19
 3b6:	e4 0b       	sbc	r30, r20
 3b8:	f5 0b       	sbc	r31, r21

000003ba <__udivmodsi4_ep>:
 3ba:	66 1f       	adc	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	88 1f       	adc	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	1a 94       	dec	r1
 3c4:	69 f7       	brne	.-38     	; 0x3a0 <__udivmodsi4_loop>
 3c6:	60 95       	com	r22
 3c8:	70 95       	com	r23
 3ca:	80 95       	com	r24
 3cc:	90 95       	com	r25
 3ce:	9b 01       	movw	r18, r22
 3d0:	ac 01       	movw	r20, r24
 3d2:	bd 01       	movw	r22, r26
 3d4:	cf 01       	movw	r24, r30
 3d6:	08 95       	ret

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
