
Tetris3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000400  00800100  000017f2  00001886  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000777  00800500  00800500  00001c86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002949  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb2  00000000  00000000  000047a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001644  00000000  00000000  0000545b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000760  00000000  00000000  00006aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000885  00000000  00000000  00007200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024b3  00000000  00000000  00007a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00009f38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	25 c1       	rjmp	.+586    	; 0x24c <__ctors_end>
       2:	00 00       	nop
       4:	42 c1       	rjmp	.+644    	; 0x28a <__bad_interrupt>
       6:	00 00       	nop
       8:	40 c1       	rjmp	.+640    	; 0x28a <__bad_interrupt>
       a:	00 00       	nop
       c:	3e c1       	rjmp	.+636    	; 0x28a <__bad_interrupt>
       e:	00 00       	nop
      10:	98 c2       	rjmp	.+1328   	; 0x542 <__vector_4>
      12:	00 00       	nop
      14:	a5 c5       	rjmp	.+2890   	; 0xb60 <__vector_5>
      16:	00 00       	nop
      18:	d0 c6       	rjmp	.+3488   	; 0xdba <__vector_6>
      1a:	00 00       	nop
      1c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__vector_7>
      20:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <__vector_8>
      24:	32 c1       	rjmp	.+612    	; 0x28a <__bad_interrupt>
      26:	00 00       	nop
      28:	30 c1       	rjmp	.+608    	; 0x28a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2e c1       	rjmp	.+604    	; 0x28a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__vector_12>
      34:	2a c1       	rjmp	.+596    	; 0x28a <__bad_interrupt>
      36:	00 00       	nop
      38:	28 c1       	rjmp	.+592    	; 0x28a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	26 c1       	rjmp	.+588    	; 0x28a <__bad_interrupt>
      3e:	00 00       	nop
      40:	24 c1       	rjmp	.+584    	; 0x28a <__bad_interrupt>
      42:	00 00       	nop
      44:	22 c1       	rjmp	.+580    	; 0x28a <__bad_interrupt>
      46:	00 00       	nop
      48:	20 c1       	rjmp	.+576    	; 0x28a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1e c1       	rjmp	.+572    	; 0x28a <__bad_interrupt>
      4e:	00 00       	nop
      50:	1c c1       	rjmp	.+568    	; 0x28a <__bad_interrupt>
      52:	00 00       	nop
      54:	1a c1       	rjmp	.+564    	; 0x28a <__bad_interrupt>
      56:	00 00       	nop
      58:	18 c1       	rjmp	.+560    	; 0x28a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	16 c1       	rjmp	.+556    	; 0x28a <__bad_interrupt>
      5e:	00 00       	nop
      60:	14 c1       	rjmp	.+552    	; 0x28a <__bad_interrupt>
      62:	00 00       	nop
      64:	12 c1       	rjmp	.+548    	; 0x28a <__bad_interrupt>
      66:	00 00       	nop
      68:	10 c1       	rjmp	.+544    	; 0x28a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0e c1       	rjmp	.+540    	; 0x28a <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c c1       	rjmp	.+536    	; 0x28a <__bad_interrupt>
      72:	00 00       	nop
      74:	0a c1       	rjmp	.+532    	; 0x28a <__bad_interrupt>
      76:	00 00       	nop
      78:	08 c1       	rjmp	.+528    	; 0x28a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	06 c1       	rjmp	.+524    	; 0x28a <__bad_interrupt>
      7e:	00 00       	nop
      80:	04 c1       	rjmp	.+520    	; 0x28a <__bad_interrupt>
      82:	00 00       	nop
      84:	02 c1       	rjmp	.+516    	; 0x28a <__bad_interrupt>
      86:	00 00       	nop
      88:	00 c1       	rjmp	.+512    	; 0x28a <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	00 01       	movw	r0, r0
      8e:	01 00       	.word	0x0001	; ????
      90:	00 01       	movw	r0, r0
      92:	01 00       	.word	0x0001	; ????
	...
      9c:	00 01       	movw	r0, r0
      9e:	01 00       	.word	0x0001	; ????
      a0:	00 01       	movw	r0, r0
      a2:	01 00       	.word	0x0001	; ????
	...
      ac:	00 01       	movw	r0, r0
      ae:	01 00       	.word	0x0001	; ????
      b0:	00 01       	movw	r0, r0
      b2:	01 00       	.word	0x0001	; ????
	...
      bc:	00 01       	movw	r0, r0
      be:	01 00       	.word	0x0001	; ????
      c0:	00 01       	movw	r0, r0
      c2:	01 00       	.word	0x0001	; ????
	...
      cc:	00 01       	movw	r0, r0
      ce:	00 00       	nop
      d0:	01 01       	movw	r0, r2
      d2:	01 00       	.word	0x0001	; ????
	...
      dc:	00 01       	movw	r0, r0
      de:	00 00       	nop
      e0:	00 01       	movw	r0, r0
      e2:	01 00       	.word	0x0001	; ????
      e4:	00 01       	movw	r0, r0
	...
      ee:	00 00       	nop
      f0:	01 01       	movw	r0, r2
      f2:	01 00       	.word	0x0001	; ????
      f4:	00 01       	movw	r0, r0
      f6:	00 00       	nop
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	00 01       	movw	r0, r0
      fe:	00 00       	nop
     100:	01 01       	movw	r0, r2
     102:	00 00       	nop
     104:	00 01       	movw	r0, r0
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	01 00       	.word	0x0001	; ????
     10e:	00 00       	nop
     110:	01 01       	movw	r0, r2
     112:	01 00       	.word	0x0001	; ????
	...
     11c:	01 01       	movw	r0, r2
     11e:	00 00       	nop
     120:	01 00       	.word	0x0001	; ????
     122:	00 00       	nop
     124:	01 00       	.word	0x0001	; ????
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	01 01       	movw	r0, r2
     12e:	01 00       	.word	0x0001	; ????
     130:	00 00       	nop
     132:	01 00       	.word	0x0001	; ????
	...
     13c:	00 01       	movw	r0, r0
     13e:	00 00       	nop
     140:	00 01       	movw	r0, r0
     142:	00 00       	nop
     144:	01 01       	movw	r0, r2
	...
     14e:	01 00       	.word	0x0001	; ????
     150:	01 01       	movw	r0, r2
     152:	01 00       	.word	0x0001	; ????
	...
     15c:	01 00       	.word	0x0001	; ????
     15e:	00 00       	nop
     160:	01 00       	.word	0x0001	; ????
     162:	00 00       	nop
     164:	01 01       	movw	r0, r2
     166:	00 00       	nop
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	01 01       	movw	r0, r2
     16e:	01 00       	.word	0x0001	; ????
     170:	01 00       	.word	0x0001	; ????
	...
     17a:	00 00       	nop
     17c:	01 01       	movw	r0, r2
     17e:	00 00       	nop
     180:	00 01       	movw	r0, r0
     182:	00 00       	nop
     184:	00 01       	movw	r0, r0
     186:	00 00       	nop
     188:	00 00       	nop
     18a:	00 00       	nop
     18c:	01 01       	movw	r0, r2
     18e:	00 00       	nop
     190:	00 01       	movw	r0, r0
     192:	01 00       	.word	0x0001	; ????
	...
     19c:	00 01       	movw	r0, r0
     19e:	00 00       	nop
     1a0:	01 01       	movw	r0, r2
     1a2:	00 00       	nop
     1a4:	01 00       	.word	0x0001	; ????
     1a6:	00 00       	nop
     1a8:	00 00       	nop
     1aa:	00 00       	nop
     1ac:	01 01       	movw	r0, r2
     1ae:	00 00       	nop
     1b0:	00 01       	movw	r0, r0
     1b2:	01 00       	.word	0x0001	; ????
	...
     1bc:	00 01       	movw	r0, r0
     1be:	00 00       	nop
     1c0:	01 01       	movw	r0, r2
     1c2:	00 00       	nop
     1c4:	01 00       	.word	0x0001	; ????
     1c6:	00 00       	nop
     1c8:	00 00       	nop
     1ca:	00 00       	nop
     1cc:	00 01       	movw	r0, r0
     1ce:	01 00       	.word	0x0001	; ????
     1d0:	01 01       	movw	r0, r2
	...
     1da:	00 00       	nop
     1dc:	01 00       	.word	0x0001	; ????
     1de:	00 00       	nop
     1e0:	01 01       	movw	r0, r2
     1e2:	00 00       	nop
     1e4:	00 01       	movw	r0, r0
     1e6:	00 00       	nop
     1e8:	00 00       	nop
     1ea:	00 00       	nop
     1ec:	00 01       	movw	r0, r0
     1ee:	01 00       	.word	0x0001	; ????
     1f0:	01 01       	movw	r0, r2
	...
     1fa:	00 00       	nop
     1fc:	01 00       	.word	0x0001	; ????
     1fe:	00 00       	nop
     200:	01 01       	movw	r0, r2
     202:	00 00       	nop
     204:	00 01       	movw	r0, r0
     206:	00 00       	nop
     208:	00 00       	nop
     20a:	00 00       	nop
     20c:	01 01       	movw	r0, r2
     20e:	01 01       	movw	r0, r2
	...
     21c:	00 01       	movw	r0, r0
     21e:	00 00       	nop
     220:	00 01       	movw	r0, r0
     222:	00 00       	nop
     224:	00 01       	movw	r0, r0
     226:	00 00       	nop
     228:	00 01       	movw	r0, r0
     22a:	00 00       	nop
     22c:	01 01       	movw	r0, r2
     22e:	01 01       	movw	r0, r2
	...
     23c:	00 01       	movw	r0, r0
     23e:	00 00       	nop
     240:	00 01       	movw	r0, r0
     242:	00 00       	nop
     244:	00 01       	movw	r0, r0
     246:	00 00       	nop
     248:	00 01       	movw	r0, r0
	...

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d0 e1       	ldi	r29, 0x10	; 16
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
     258:	15 e0       	ldi	r17, 0x05	; 5
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	e2 ef       	ldi	r30, 0xF2	; 242
     260:	f7 e1       	ldi	r31, 0x17	; 23
     262:	00 e0       	ldi	r16, 0x00	; 0
     264:	0b bf       	out	0x3b, r16	; 59
     266:	02 c0       	rjmp	.+4      	; 0x26c <__do_copy_data+0x14>
     268:	07 90       	elpm	r0, Z+
     26a:	0d 92       	st	X+, r0
     26c:	a0 30       	cpi	r26, 0x00	; 0
     26e:	b1 07       	cpc	r27, r17
     270:	d9 f7       	brne	.-10     	; 0x268 <__do_copy_data+0x10>

00000272 <__do_clear_bss>:
     272:	2c e0       	ldi	r18, 0x0C	; 12
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b5 e0       	ldi	r27, 0x05	; 5
     278:	01 c0       	rjmp	.+2      	; 0x27c <.do_clear_bss_start>

0000027a <.do_clear_bss_loop>:
     27a:	1d 92       	st	X+, r1

0000027c <.do_clear_bss_start>:
     27c:	a7 37       	cpi	r26, 0x77	; 119
     27e:	b2 07       	cpc	r27, r18
     280:	e1 f7       	brne	.-8      	; 0x27a <.do_clear_bss_loop>
     282:	0e 94 c9 0a 	call	0x1592	; 0x1592 <main>
     286:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <_exit>

0000028a <__bad_interrupt>:
     28a:	ba ce       	rjmp	.-652    	; 0x0 <__vectors>

0000028c <twi_start>:
        return -1;

    twi_stop();

    return 0;
}
     28c:	84 ea       	ldi	r24, 0xA4	; 164
     28e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     292:	e0 e7       	ldi	r30, 0x70	; 112
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	84 81       	ldd	r24, Z+4	; 0x04
     298:	88 23       	and	r24, r24
     29a:	ec f7       	brge	.-6      	; 0x296 <twi_start+0xa>
     29c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     2a0:	98 7f       	andi	r25, 0xF8	; 248
     2a2:	21 e0       	ldi	r18, 0x01	; 1
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	98 30       	cpi	r25, 0x08	; 8
     2a8:	11 f4       	brne	.+4      	; 0x2ae <twi_start+0x22>
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	88 27       	eor	r24, r24
     2b0:	99 27       	eor	r25, r25
     2b2:	82 1b       	sub	r24, r18
     2b4:	93 0b       	sbc	r25, r19
     2b6:	08 95       	ret

000002b8 <twi_send_dev_addr>:
     2b8:	80 fd       	sbrc	r24, 0
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <twi_send_dev_addr+0x8>
     2bc:	48 e1       	ldi	r20, 0x18	; 24
     2be:	01 c0       	rjmp	.+2      	; 0x2c2 <twi_send_dev_addr+0xa>
     2c0:	40 e4       	ldi	r20, 0x40	; 64
     2c2:	e0 e7       	ldi	r30, 0x70	; 112
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	83 83       	std	Z+3, r24	; 0x03
     2c8:	84 e8       	ldi	r24, 0x84	; 132
     2ca:	84 83       	std	Z+4, r24	; 0x04
     2cc:	84 81       	ldd	r24, Z+4	; 0x04
     2ce:	88 23       	and	r24, r24
     2d0:	ec f7       	brge	.-6      	; 0x2cc <twi_send_dev_addr+0x14>
     2d2:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     2d6:	98 7f       	andi	r25, 0xF8	; 248
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	94 13       	cpse	r25, r20
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <twi_send_dev_addr+0x2c>
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	88 27       	eor	r24, r24
     2e6:	99 27       	eor	r25, r25
     2e8:	82 1b       	sub	r24, r18
     2ea:	93 0b       	sbc	r25, r19
     2ec:	08 95       	ret

000002ee <twi_send_data>:
     2ee:	e0 e7       	ldi	r30, 0x70	; 112
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	83 83       	std	Z+3, r24	; 0x03
     2f4:	84 e8       	ldi	r24, 0x84	; 132
     2f6:	84 83       	std	Z+4, r24	; 0x04
     2f8:	84 81       	ldd	r24, Z+4	; 0x04
     2fa:	88 23       	and	r24, r24
     2fc:	ec f7       	brge	.-6      	; 0x2f8 <twi_send_data+0xa>
     2fe:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     302:	98 7f       	andi	r25, 0xF8	; 248
     304:	21 e0       	ldi	r18, 0x01	; 1
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	98 32       	cpi	r25, 0x28	; 40
     30a:	11 f4       	brne	.+4      	; 0x310 <twi_send_data+0x22>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	88 27       	eor	r24, r24
     312:	99 27       	eor	r25, r25
     314:	82 1b       	sub	r24, r18
     316:	93 0b       	sbc	r25, r19
     318:	08 95       	ret

0000031a <twi_write>:
     31a:	cf 92       	push	r12
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	c8 2f       	mov	r28, r24
     32c:	d6 2f       	mov	r29, r22
     32e:	6a 01       	movw	r12, r20
     330:	89 01       	movw	r16, r18
     332:	ac df       	rcall	.-168    	; 0x28c <twi_start>
     334:	89 2b       	or	r24, r25
     336:	d9 f4       	brne	.+54     	; 0x36e <twi_write+0x54>
     338:	8c 2f       	mov	r24, r28
     33a:	88 0f       	add	r24, r24
     33c:	bd df       	rcall	.-134    	; 0x2b8 <twi_send_dev_addr>
     33e:	89 2b       	or	r24, r25
     340:	d1 f4       	brne	.+52     	; 0x376 <twi_write+0x5c>
     342:	8d 2f       	mov	r24, r29
     344:	d4 df       	rcall	.-88     	; 0x2ee <twi_send_data>
     346:	7c 01       	movw	r14, r24
     348:	89 2b       	or	r24, r25
     34a:	c9 f4       	brne	.+50     	; 0x37e <twi_write+0x64>
     34c:	10 16       	cp	r1, r16
     34e:	11 06       	cpc	r1, r17
     350:	54 f4       	brge	.+20     	; 0x366 <twi_write+0x4c>
     352:	e6 01       	movw	r28, r12
     354:	0c 0d       	add	r16, r12
     356:	1d 1d       	adc	r17, r13
     358:	89 91       	ld	r24, Y+
     35a:	c9 df       	rcall	.-110    	; 0x2ee <twi_send_data>
     35c:	89 2b       	or	r24, r25
     35e:	99 f4       	brne	.+38     	; 0x386 <twi_write+0x6c>
     360:	0c 17       	cp	r16, r28
     362:	1d 07       	cpc	r17, r29
     364:	c9 f7       	brne	.-14     	; 0x358 <twi_write+0x3e>
     366:	84 e9       	ldi	r24, 0x94	; 148
     368:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     36c:	0f c0       	rjmp	.+30     	; 0x38c <twi_write+0x72>
     36e:	ee 24       	eor	r14, r14
     370:	ea 94       	dec	r14
     372:	fe 2c       	mov	r15, r14
     374:	0b c0       	rjmp	.+22     	; 0x38c <twi_write+0x72>
     376:	ee 24       	eor	r14, r14
     378:	ea 94       	dec	r14
     37a:	fe 2c       	mov	r15, r14
     37c:	07 c0       	rjmp	.+14     	; 0x38c <twi_write+0x72>
     37e:	ee 24       	eor	r14, r14
     380:	ea 94       	dec	r14
     382:	fe 2c       	mov	r15, r14
     384:	03 c0       	rjmp	.+6      	; 0x38c <twi_write+0x72>
     386:	ee 24       	eor	r14, r14
     388:	ea 94       	dec	r14
     38a:	fe 2c       	mov	r15, r14
     38c:	c7 01       	movw	r24, r14
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	08 95       	ret

000003a0 <twi_init>:

void twi_init(void)
{
    twi->twbr = 5;
     3a0:	e0 e7       	ldi	r30, 0x70	; 112
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	85 e0       	ldi	r24, 0x05	; 5
     3a6:	80 83       	st	Z, r24
    twi->twsr = 0;
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	08 95       	ret

000003ac <UART_Init>:
		}
		for(int i = 0; i < 12; i++)
		{
			game_board[i][31] = 1;
		}
	}
     3ac:	88 e1       	ldi	r24, 0x18	; 24
     3ae:	8a b9       	out	0x0a, r24	; 10
     3b0:	86 e0       	ldi	r24, 0x06	; 6
     3b2:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     3b6:	87 e6       	ldi	r24, 0x67	; 103
     3b8:	89 b9       	out	0x09, r24	; 9
     3ba:	08 95       	ret

000003bc <UART0_Putch>:
     3bc:	5d 9b       	sbis	0x0b, 5	; 11
     3be:	fe cf       	rjmp	.-4      	; 0x3bc <UART0_Putch>
     3c0:	8c b9       	out	0x0c, r24	; 12
     3c2:	08 95       	ret

000003c4 <SendCommand>:
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	18 2f       	mov	r17, r24
     3cc:	8e e7       	ldi	r24, 0x7E	; 126
     3ce:	f6 df       	rcall	.-20     	; 0x3bc <UART0_Putch>
     3d0:	8f ef       	ldi	r24, 0xFF	; 255
     3d2:	f4 df       	rcall	.-24     	; 0x3bc <UART0_Putch>
     3d4:	86 e0       	ldi	r24, 0x06	; 6
     3d6:	f2 df       	rcall	.-28     	; 0x3bc <UART0_Putch>
     3d8:	81 2f       	mov	r24, r17
     3da:	f0 df       	rcall	.-32     	; 0x3bc <UART0_Putch>
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	ee df       	rcall	.-36     	; 0x3bc <UART0_Putch>
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	ec df       	rcall	.-40     	; 0x3bc <UART0_Putch>
     3e4:	19 30       	cpi	r17, 0x09	; 9
     3e6:	39 f0       	breq	.+14     	; 0x3f6 <SendCommand+0x32>
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	e8 df       	rcall	.-48     	; 0x3bc <UART0_Putch>
     3ec:	cb ef       	ldi	r28, 0xFB	; 251
     3ee:	de ef       	ldi	r29, 0xFE	; 254
     3f0:	c1 1b       	sub	r28, r17
     3f2:	d1 09       	sbc	r29, r1
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <SendCommand+0x3a>
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	e1 df       	rcall	.-62     	; 0x3bc <UART0_Putch>
     3fa:	c0 ef       	ldi	r28, 0xF0	; 240
     3fc:	de ef       	ldi	r29, 0xFE	; 254
     3fe:	8d 2f       	mov	r24, r29
     400:	dd df       	rcall	.-70     	; 0x3bc <UART0_Putch>
     402:	8c 2f       	mov	r24, r28
     404:	db df       	rcall	.-74     	; 0x3bc <UART0_Putch>
     406:	8f ee       	ldi	r24, 0xEF	; 239
     408:	d9 df       	rcall	.-78     	; 0x3bc <UART0_Putch>
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	08 95       	ret

00000412 <SendCommand01>:
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	c8 2f       	mov	r28, r24
     41c:	06 2f       	mov	r16, r22
     41e:	14 2f       	mov	r17, r20
     420:	8e e7       	ldi	r24, 0x7E	; 126
     422:	cc df       	rcall	.-104    	; 0x3bc <UART0_Putch>
     424:	8f ef       	ldi	r24, 0xFF	; 255
     426:	ca df       	rcall	.-108    	; 0x3bc <UART0_Putch>
     428:	86 e0       	ldi	r24, 0x06	; 6
     42a:	c8 df       	rcall	.-112    	; 0x3bc <UART0_Putch>
     42c:	8c 2f       	mov	r24, r28
     42e:	c6 df       	rcall	.-116    	; 0x3bc <UART0_Putch>
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	c4 df       	rcall	.-120    	; 0x3bc <UART0_Putch>
     434:	80 2f       	mov	r24, r16
     436:	c2 df       	rcall	.-124    	; 0x3bc <UART0_Putch>
     438:	81 2f       	mov	r24, r17
     43a:	c0 df       	rcall	.-128    	; 0x3bc <UART0_Putch>
     43c:	d0 e0       	ldi	r29, 0x00	; 0
     43e:	cb 5f       	subi	r28, 0xFB	; 251
     440:	de 4f       	sbci	r29, 0xFE	; 254
     442:	c0 0f       	add	r28, r16
     444:	d1 1d       	adc	r29, r1
     446:	c1 0f       	add	r28, r17
     448:	d1 1d       	adc	r29, r1
     44a:	d1 95       	neg	r29
     44c:	c1 95       	neg	r28
     44e:	d1 09       	sbc	r29, r1
     450:	8d 2f       	mov	r24, r29
     452:	b4 df       	rcall	.-152    	; 0x3bc <UART0_Putch>
     454:	8c 2f       	mov	r24, r28
     456:	b2 df       	rcall	.-156    	; 0x3bc <UART0_Putch>
     458:	8f ee       	ldi	r24, 0xEF	; 239
     45a:	b0 df       	rcall	.-160    	; 0x3bc <UART0_Putch>
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	08 95       	ret

00000466 <ssd1306_cmd>:
     466:	26 2f       	mov	r18, r22
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	ac 01       	movw	r20, r24
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	8c e3       	ldi	r24, 0x3C	; 60
     470:	54 cf       	rjmp	.-344    	; 0x31a <twi_write>
     472:	08 95       	ret

00000474 <ssd1306_set_page_start>:
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	1f 92       	push	r1
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	80 6b       	ori	r24, 0xB0	; 176
     480:	89 83       	std	Y+1, r24	; 0x01
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	ce 01       	movw	r24, r28
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	ee df       	rcall	.-36     	; 0x466 <ssd1306_cmd>
     48a:	0f 90       	pop	r0
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	08 95       	ret

00000492 <ssd1306_set_column_addr>:
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	1f 92       	push	r1
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	18 2f       	mov	r17, r24
     4a0:	8f 70       	andi	r24, 0x0F	; 15
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	ce 01       	movw	r24, r28
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	dd df       	rcall	.-70     	; 0x466 <ssd1306_cmd>
     4ac:	12 95       	swap	r17
     4ae:	1f 70       	andi	r17, 0x0F	; 15
     4b0:	10 61       	ori	r17, 0x10	; 16
     4b2:	19 83       	std	Y+1, r17	; 0x01
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	ce 01       	movw	r24, r28
     4b8:	01 96       	adiw	r24, 0x01	; 1
     4ba:	d5 df       	rcall	.-86     	; 0x466 <ssd1306_cmd>
     4bc:	0f 90       	pop	r0
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	08 95       	ret

000004c6 <ssd1306_data>:
     4c6:	9b 01       	movw	r18, r22
     4c8:	ac 01       	movw	r20, r24
     4ca:	60 e4       	ldi	r22, 0x40	; 64
     4cc:	8c e3       	ldi	r24, 0x3C	; 60
     4ce:	25 cf       	rjmp	.-438    	; 0x31a <twi_write>
     4d0:	08 95       	ret

000004d2 <ssd1306_init>:
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <ssd1306_init+0x6>
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	8f e9       	ldi	r24, 0x9F	; 159
     4de:	9f e0       	ldi	r25, 0x0F	; 15
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <ssd1306_init+0xe>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <ssd1306_init+0x14>
     4e6:	00 00       	nop
     4e8:	8d e8       	ldi	r24, 0x8D	; 141
     4ea:	89 83       	std	Y+1, r24	; 0x01
     4ec:	84 e1       	ldi	r24, 0x14	; 20
     4ee:	8a 83       	std	Y+2, r24	; 0x02
     4f0:	62 e0       	ldi	r22, 0x02	; 2
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	b7 df       	rcall	.-146    	; 0x466 <ssd1306_cmd>
     4f8:	84 ea       	ldi	r24, 0xA4	; 164
     4fa:	89 83       	std	Y+1, r24	; 0x01
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	ce 01       	movw	r24, r28
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	b1 df       	rcall	.-158    	; 0x466 <ssd1306_cmd>
     504:	8f ea       	ldi	r24, 0xAF	; 175
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	ce 01       	movw	r24, r28
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	ab df       	rcall	.-170    	; 0x466 <ssd1306_cmd>
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <draw_picture>:
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	cf 93       	push	r28
     520:	8c 01       	movw	r16, r24
     522:	c0 e0       	ldi	r28, 0x00	; 0
     524:	8c 2f       	mov	r24, r28
     526:	a6 df       	rcall	.-180    	; 0x474 <ssd1306_set_page_start>
     528:	60 e8       	ldi	r22, 0x80	; 128
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	c8 01       	movw	r24, r16
     52e:	cb df       	rcall	.-106    	; 0x4c6 <ssd1306_data>
     530:	cf 5f       	subi	r28, 0xFF	; 255
     532:	00 58       	subi	r16, 0x80	; 128
     534:	1f 4f       	sbci	r17, 0xFF	; 255
     536:	c8 30       	cpi	r28, 0x08	; 8
     538:	a9 f7       	brne	.-22     	; 0x524 <draw_picture+0xa>
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	08 95       	ret

00000542 <__vector_4>:
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	0f 92       	push	r0
     54a:	11 24       	eor	r1, r1
     54c:	0f 90       	pop	r0
     54e:	0f be       	out	0x3f, r0	; 63
     550:	0f 90       	pop	r0
     552:	1f 90       	pop	r1
     554:	18 95       	reti

00000556 <clear_screen>:
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	03 e7       	ldi	r16, 0x73	; 115
     55e:	18 e0       	ldi	r17, 0x08	; 8
     560:	83 e7       	ldi	r24, 0x73	; 115
     562:	9c e0       	ldi	r25, 0x0C	; 12
     564:	f8 01       	movw	r30, r16
     566:	11 92       	st	Z+, r1
     568:	8e 17       	cp	r24, r30
     56a:	9f 07       	cpc	r25, r31
     56c:	e1 f7       	brne	.-8      	; 0x566 <clear_screen+0x10>
     56e:	c0 e0       	ldi	r28, 0x00	; 0
     570:	8c 2f       	mov	r24, r28
     572:	80 df       	rcall	.-256    	; 0x474 <ssd1306_set_page_start>
     574:	60 e8       	ldi	r22, 0x80	; 128
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	c8 01       	movw	r24, r16
     57a:	a5 df       	rcall	.-182    	; 0x4c6 <ssd1306_data>
     57c:	cf 5f       	subi	r28, 0xFF	; 255
     57e:	00 58       	subi	r16, 0x80	; 128
     580:	1f 4f       	sbci	r17, 0xFF	; 255
     582:	c8 30       	cpi	r28, 0x08	; 8
     584:	a9 f7       	brne	.-22     	; 0x570 <clear_screen+0x1a>
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	84 df       	rcall	.-248    	; 0x492 <ssd1306_set_column_addr>
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	08 95       	ret

00000592 <setup>:
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	00 d0       	rcall	.+0      	; 0x598 <setup+0x6>
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	01 df       	rcall	.-510    	; 0x3a0 <twi_init>
     59e:	99 df       	rcall	.-206    	; 0x4d2 <ssd1306_init>
     5a0:	80 e2       	ldi	r24, 0x20	; 32
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	8a 83       	std	Y+2, r24	; 0x02
     5a8:	62 e0       	ldi	r22, 0x02	; 2
     5aa:	ce 01       	movw	r24, r28
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	5b df       	rcall	.-330    	; 0x466 <ssd1306_cmd>
     5b0:	d2 df       	rcall	.-92     	; 0x556 <clear_screen>
     5b2:	88 ec       	ldi	r24, 0xC8	; 200
     5b4:	89 83       	std	Y+1, r24	; 0x01
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	ce 01       	movw	r24, r28
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	54 df       	rcall	.-344    	; 0x466 <ssd1306_cmd>
     5be:	81 ea       	ldi	r24, 0xA1	; 161
     5c0:	89 83       	std	Y+1, r24	; 0x01
     5c2:	61 e0       	ldi	r22, 0x01	; 1
     5c4:	ce 01       	movw	r24, r28
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	4e df       	rcall	.-356    	; 0x466 <ssd1306_cmd>
     5ca:	86 ea       	ldi	r24, 0xA6	; 166
     5cc:	89 83       	std	Y+1, r24	; 0x01
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	ce 01       	movw	r24, r28
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	48 df       	rcall	.-368    	; 0x466 <ssd1306_cmd>
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	08 95       	ret

000005e0 <draw_map>:
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	d3 50       	subi	r29, 0x03	; 3
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	fe 01       	movw	r30, r28
     602:	31 96       	adiw	r30, 0x01	; 1
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	93 e0       	ldi	r25, 0x03	; 3
     608:	df 01       	movw	r26, r30
     60a:	9c 01       	movw	r18, r24
     60c:	1d 92       	st	X+, r1
     60e:	21 50       	subi	r18, 0x01	; 1
     610:	30 40       	sbci	r19, 0x00	; 0
     612:	e1 f7       	brne	.-8      	; 0x60c <draw_map+0x2c>
     614:	0f 2e       	mov	r0, r31
     616:	f3 e4       	ldi	r31, 0x43	; 67
     618:	ef 2e       	mov	r14, r31
     61a:	f5 e0       	ldi	r31, 0x05	; 5
     61c:	ff 2e       	mov	r15, r31
     61e:	f0 2d       	mov	r31, r0
     620:	00 e0       	ldi	r16, 0x00	; 0
     622:	10 e0       	ldi	r17, 0x00	; 0
     624:	3c c0       	rjmp	.+120    	; 0x69e <draw_map+0xbe>
     626:	dc 01       	movw	r26, r24
     628:	2d 91       	ld	r18, X+
     62a:	cd 01       	movw	r24, r26
     62c:	21 30       	cpi	r18, 0x01	; 1
     62e:	41 f5       	brne	.+80     	; 0x680 <draw_map+0xa0>
     630:	61 15       	cp	r22, r1
     632:	71 05       	cpc	r23, r1
     634:	69 f4       	brne	.+26     	; 0x650 <draw_map+0x70>
     636:	20 81       	ld	r18, Z
     638:	2f 60       	ori	r18, 0x0F	; 15
     63a:	20 83       	st	Z, r18
     63c:	21 81       	ldd	r18, Z+1	; 0x01
     63e:	2f 60       	ori	r18, 0x0F	; 15
     640:	21 83       	std	Z+1, r18	; 0x01
     642:	22 81       	ldd	r18, Z+2	; 0x02
     644:	2f 60       	ori	r18, 0x0F	; 15
     646:	22 83       	std	Z+2, r18	; 0x02
     648:	23 81       	ldd	r18, Z+3	; 0x03
     64a:	2f 60       	ori	r18, 0x0F	; 15
     64c:	23 83       	std	Z+3, r18	; 0x03
     64e:	18 c0       	rjmp	.+48     	; 0x680 <draw_map+0xa0>
     650:	d6 01       	movw	r26, r12
     652:	2c 91       	ld	r18, X
     654:	20 6f       	ori	r18, 0xF0	; 240
     656:	2c 93       	st	X, r18
     658:	11 96       	adiw	r26, 0x01	; 1
     65a:	2c 91       	ld	r18, X
     65c:	11 97       	sbiw	r26, 0x01	; 1
     65e:	20 6f       	ori	r18, 0xF0	; 240
     660:	11 96       	adiw	r26, 0x01	; 1
     662:	2c 93       	st	X, r18
     664:	11 97       	sbiw	r26, 0x01	; 1
     666:	12 96       	adiw	r26, 0x02	; 2
     668:	2c 91       	ld	r18, X
     66a:	12 97       	sbiw	r26, 0x02	; 2
     66c:	20 6f       	ori	r18, 0xF0	; 240
     66e:	12 96       	adiw	r26, 0x02	; 2
     670:	2c 93       	st	X, r18
     672:	12 97       	sbiw	r26, 0x02	; 2
     674:	13 96       	adiw	r26, 0x03	; 3
     676:	2c 91       	ld	r18, X
     678:	13 97       	sbiw	r26, 0x03	; 3
     67a:	20 6f       	ori	r18, 0xF0	; 240
     67c:	13 96       	adiw	r26, 0x03	; 3
     67e:	2c 93       	st	X, r18
     680:	34 96       	adiw	r30, 0x04	; 4
     682:	b4 e0       	ldi	r27, 0x04	; 4
     684:	cb 0e       	add	r12, r27
     686:	d1 1c       	adc	r13, r1
     688:	e4 17       	cp	r30, r20
     68a:	f5 07       	cpc	r31, r21
     68c:	61 f6       	brne	.-104    	; 0x626 <draw_map+0x46>
     68e:	0f 5f       	subi	r16, 0xFF	; 255
     690:	1f 4f       	sbci	r17, 0xFF	; 255
     692:	20 e2       	ldi	r18, 0x20	; 32
     694:	e2 0e       	add	r14, r18
     696:	f1 1c       	adc	r15, r1
     698:	0c 30       	cpi	r16, 0x0C	; 12
     69a:	11 05       	cpc	r17, r1
     69c:	01 f1       	breq	.+64     	; 0x6de <draw_map+0xfe>
     69e:	a8 01       	movw	r20, r16
     6a0:	11 23       	and	r17, r17
     6a2:	14 f4       	brge	.+4      	; 0x6a8 <draw_map+0xc8>
     6a4:	4f 5f       	subi	r20, 0xFF	; 255
     6a6:	5f 4f       	sbci	r21, 0xFF	; 255
     6a8:	55 95       	asr	r21
     6aa:	47 95       	ror	r20
     6ac:	56 95       	lsr	r21
     6ae:	54 2f       	mov	r21, r20
     6b0:	44 27       	eor	r20, r20
     6b2:	57 95       	ror	r21
     6b4:	47 95       	ror	r20
     6b6:	e1 e0       	ldi	r30, 0x01	; 1
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	ec 0f       	add	r30, r28
     6bc:	fd 1f       	adc	r31, r29
     6be:	e4 0f       	add	r30, r20
     6c0:	f5 1f       	adc	r31, r21
     6c2:	40 58       	subi	r20, 0x80	; 128
     6c4:	5f 4f       	sbci	r21, 0xFF	; 255
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	8c 0f       	add	r24, r28
     6cc:	9d 1f       	adc	r25, r29
     6ce:	48 0f       	add	r20, r24
     6d0:	59 1f       	adc	r21, r25
     6d2:	6f 01       	movw	r12, r30
     6d4:	c7 01       	movw	r24, r14
     6d6:	b8 01       	movw	r22, r16
     6d8:	61 70       	andi	r22, 0x01	; 1
     6da:	77 27       	eor	r23, r23
     6dc:	a4 cf       	rjmp	.-184    	; 0x626 <draw_map+0x46>
     6de:	de 01       	movw	r26, r28
     6e0:	11 96       	adiw	r26, 0x01	; 1
     6e2:	7d 01       	movw	r14, r26
     6e4:	12 e0       	ldi	r17, 0x02	; 2
     6e6:	81 2f       	mov	r24, r17
     6e8:	c5 de       	rcall	.-630    	; 0x474 <ssd1306_set_page_start>
     6ea:	60 e8       	ldi	r22, 0x80	; 128
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	c7 01       	movw	r24, r14
     6f0:	ea de       	rcall	.-556    	; 0x4c6 <ssd1306_data>
     6f2:	1f 5f       	subi	r17, 0xFF	; 255
     6f4:	b0 e8       	ldi	r27, 0x80	; 128
     6f6:	eb 0e       	add	r14, r27
     6f8:	f1 1c       	adc	r15, r1
     6fa:	18 30       	cpi	r17, 0x08	; 8
     6fc:	a1 f7       	brne	.-24     	; 0x6e6 <draw_map+0x106>
     6fe:	dd 5f       	subi	r29, 0xFD	; 253
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	f8 94       	cli
     704:	de bf       	out	0x3e, r29	; 62
     706:	0f be       	out	0x3f, r0	; 63
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	ff 90       	pop	r15
     714:	ef 90       	pop	r14
     716:	df 90       	pop	r13
     718:	cf 90       	pop	r12
     71a:	08 95       	ret

0000071c <NewTetriminos>:
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <new_block>
     72a:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <next_block>
     72e:	80 93 76 0c 	sts	0x0C76, r24	; 0x800c76 <shape>
     732:	22 b7       	in	r18, 0x32	; 50
     734:	95 e2       	ldi	r25, 0x25	; 37
     736:	29 9f       	mul	r18, r25
     738:	31 2d       	mov	r19, r1
     73a:	11 24       	eor	r1, r1
     73c:	92 2f       	mov	r25, r18
     73e:	93 1b       	sub	r25, r19
     740:	96 95       	lsr	r25
     742:	93 0f       	add	r25, r19
     744:	96 95       	lsr	r25
     746:	96 95       	lsr	r25
     748:	39 2f       	mov	r19, r25
     74a:	33 0f       	add	r19, r19
     74c:	33 0f       	add	r19, r19
     74e:	33 0f       	add	r19, r19
     750:	39 1b       	sub	r19, r25
     752:	23 1b       	sub	r18, r19
     754:	20 93 40 05 	sts	0x0540, r18	; 0x800540 <next_block>
     758:	10 92 75 0c 	sts	0x0C75, r1	; 0x800c75 <pattern>
     75c:	10 92 73 0c 	sts	0x0C73, r1	; 0x800c73 <cur_line>
     760:	97 e0       	ldi	r25, 0x07	; 7
     762:	90 93 74 0c 	sts	0x0C74, r25	; 0x800c74 <cur_col>
     766:	0f 2e       	mov	r0, r31
     768:	f3 e4       	ldi	r31, 0x43	; 67
     76a:	ef 2e       	mov	r14, r31
     76c:	f8 e0       	ldi	r31, 0x08	; 8
     76e:	ff 2e       	mov	r15, r31
     770:	f0 2d       	mov	r31, r0
     772:	23 e7       	ldi	r18, 0x73	; 115
     774:	38 e0       	ldi	r19, 0x08	; 8
     776:	f7 01       	movw	r30, r14
     778:	10 82       	st	Z, r1
     77a:	11 82       	std	Z+1, r1	; 0x01
     77c:	12 82       	std	Z+2, r1	; 0x02
     77e:	13 82       	std	Z+3, r1	; 0x03
     780:	34 96       	adiw	r30, 0x04	; 4
     782:	e2 17       	cp	r30, r18
     784:	f3 07       	cpc	r31, r19
     786:	c1 f7       	brne	.-16     	; 0x778 <NewTetriminos+0x5c>
     788:	20 e4       	ldi	r18, 0x40	; 64
     78a:	82 9f       	mul	r24, r18
     78c:	c0 01       	movw	r24, r0
     78e:	11 24       	eor	r1, r1
     790:	84 57       	subi	r24, 0x74	; 116
     792:	9f 4f       	sbci	r25, 0xFF	; 255
     794:	63 e3       	ldi	r22, 0x33	; 51
     796:	78 e0       	ldi	r23, 0x08	; 8
     798:	a3 e4       	ldi	r26, 0x43	; 67
     79a:	b8 e0       	ldi	r27, 0x08	; 8
     79c:	fc 01       	movw	r30, r24
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	25 91       	lpm	r18, Z+
     7a2:	5c 96       	adiw	r26, 0x1c	; 28
     7a4:	2c 93       	st	X, r18
     7a6:	5c 97       	sbiw	r26, 0x1c	; 28
     7a8:	9c 01       	movw	r18, r24
     7aa:	2d 5f       	subi	r18, 0xFD	; 253
     7ac:	3f 4f       	sbci	r19, 0xFF	; 255
     7ae:	f9 01       	movw	r30, r18
     7b0:	24 91       	lpm	r18, Z
     7b2:	5d 96       	adiw	r26, 0x1d	; 29
     7b4:	2c 93       	st	X, r18
     7b6:	5d 97       	sbiw	r26, 0x1d	; 29
     7b8:	9c 01       	movw	r18, r24
     7ba:	29 5f       	subi	r18, 0xF9	; 249
     7bc:	3f 4f       	sbci	r19, 0xFF	; 255
     7be:	f9 01       	movw	r30, r18
     7c0:	24 91       	lpm	r18, Z
     7c2:	5e 96       	adiw	r26, 0x1e	; 30
     7c4:	2c 93       	st	X, r18
     7c6:	5e 97       	sbiw	r26, 0x1e	; 30
     7c8:	9c 01       	movw	r18, r24
     7ca:	25 5f       	subi	r18, 0xF5	; 245
     7cc:	3f 4f       	sbci	r19, 0xFF	; 255
     7ce:	f9 01       	movw	r30, r18
     7d0:	24 91       	lpm	r18, Z
     7d2:	5f 96       	adiw	r26, 0x1f	; 31
     7d4:	2c 93       	st	X, r18
     7d6:	5f 97       	sbiw	r26, 0x1f	; 31
     7d8:	14 97       	sbiw	r26, 0x04	; 4
     7da:	a6 17       	cp	r26, r22
     7dc:	b7 07       	cpc	r27, r23
     7de:	f1 f6       	brne	.-68     	; 0x79c <NewTetriminos+0x80>
     7e0:	10 91 41 05 	lds	r17, 0x0541	; 0x800541 <game_over>
     7e4:	e3 e2       	ldi	r30, 0x23	; 35
     7e6:	f6 e0       	ldi	r31, 0x06	; 6
     7e8:	a3 e4       	ldi	r26, 0x43	; 67
     7ea:	b8 e0       	ldi	r27, 0x08	; 8
     7ec:	cf 01       	movw	r24, r30
     7ee:	ec 01       	movw	r28, r24
     7f0:	48 81       	ld	r20, Y
     7f2:	5c 96       	adiw	r26, 0x1c	; 28
     7f4:	2c 91       	ld	r18, X
     7f6:	5c 97       	sbiw	r26, 0x1c	; 28
     7f8:	42 23       	and	r20, r18
     7fa:	59 81       	ldd	r21, Y+1	; 0x01
     7fc:	5d 96       	adiw	r26, 0x1d	; 29
     7fe:	3c 91       	ld	r19, X
     800:	5d 97       	sbiw	r26, 0x1d	; 29
     802:	25 2f       	mov	r18, r21
     804:	23 23       	and	r18, r19
     806:	54 2f       	mov	r21, r20
     808:	52 2b       	or	r21, r18
     80a:	2a 81       	ldd	r18, Y+2	; 0x02
     80c:	5e 96       	adiw	r26, 0x1e	; 30
     80e:	3c 91       	ld	r19, X
     810:	5e 97       	sbiw	r26, 0x1e	; 30
     812:	23 23       	and	r18, r19
     814:	45 2f       	mov	r20, r21
     816:	42 2b       	or	r20, r18
     818:	2b 81       	ldd	r18, Y+3	; 0x03
     81a:	5f 96       	adiw	r26, 0x1f	; 31
     81c:	3c 91       	ld	r19, X
     81e:	5f 97       	sbiw	r26, 0x1f	; 31
     820:	23 23       	and	r18, r19
     822:	24 2b       	or	r18, r20
     824:	12 2b       	or	r17, r18
     826:	80 97       	sbiw	r24, 0x20	; 32
     828:	14 97       	sbiw	r26, 0x04	; 4
     82a:	a6 17       	cp	r26, r22
     82c:	b7 07       	cpc	r27, r23
     82e:	f9 f6       	brne	.-66     	; 0x7ee <NewTetriminos+0xd2>
     830:	10 93 41 05 	sts	0x0541, r17	; 0x800541 <game_over>
     834:	23 ea       	ldi	r18, 0xA3	; 163
     836:	35 e0       	ldi	r19, 0x05	; 5
     838:	90 81       	ld	r25, Z
     83a:	d7 01       	movw	r26, r14
     83c:	5c 96       	adiw	r26, 0x1c	; 28
     83e:	8c 91       	ld	r24, X
     840:	5c 97       	sbiw	r26, 0x1c	; 28
     842:	89 2b       	or	r24, r25
     844:	80 83       	st	Z, r24
     846:	91 81       	ldd	r25, Z+1	; 0x01
     848:	5d 96       	adiw	r26, 0x1d	; 29
     84a:	8c 91       	ld	r24, X
     84c:	5d 97       	sbiw	r26, 0x1d	; 29
     84e:	89 2b       	or	r24, r25
     850:	81 83       	std	Z+1, r24	; 0x01
     852:	92 81       	ldd	r25, Z+2	; 0x02
     854:	5e 96       	adiw	r26, 0x1e	; 30
     856:	8c 91       	ld	r24, X
     858:	5e 97       	sbiw	r26, 0x1e	; 30
     85a:	89 2b       	or	r24, r25
     85c:	82 83       	std	Z+2, r24	; 0x02
     85e:	93 81       	ldd	r25, Z+3	; 0x03
     860:	5f 96       	adiw	r26, 0x1f	; 31
     862:	8c 91       	ld	r24, X
     864:	89 2b       	or	r24, r25
     866:	83 83       	std	Z+3, r24	; 0x03
     868:	b0 97       	sbiw	r30, 0x20	; 32
     86a:	b4 e0       	ldi	r27, 0x04	; 4
     86c:	eb 1a       	sub	r14, r27
     86e:	f1 08       	sbc	r15, r1
     870:	e2 17       	cp	r30, r18
     872:	f3 07       	cpc	r31, r19
     874:	09 f7       	brne	.-62     	; 0x838 <NewTetriminos+0x11c>
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	ff 90       	pop	r15
     87e:	ef 90       	pop	r14
     880:	08 95       	ret

00000882 <NextTetriminos>:
     882:	8f 92       	push	r8
     884:	9f 92       	push	r9
     886:	bf 92       	push	r11
     888:	cf 92       	push	r12
     88a:	df 92       	push	r13
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	da 95       	dec	r29
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	75 e0       	ldi	r23, 0x05	; 5
     8ac:	20 e4       	ldi	r18, 0x40	; 64
     8ae:	35 e0       	ldi	r19, 0x05	; 5
     8b0:	fb 01       	movw	r30, r22
     8b2:	08 c0       	rjmp	.+16     	; 0x8c4 <NextTetriminos+0x42>
     8b4:	11 92       	st	Z+, r1
     8b6:	e8 17       	cp	r30, r24
     8b8:	f9 07       	cpc	r31, r25
     8ba:	e1 f7       	brne	.-8      	; 0x8b4 <NextTetriminos+0x32>
     8bc:	fc 01       	movw	r30, r24
     8be:	28 17       	cp	r18, r24
     8c0:	39 07       	cpc	r19, r25
     8c2:	19 f0       	breq	.+6      	; 0x8ca <NextTetriminos+0x48>
     8c4:	cf 01       	movw	r24, r30
     8c6:	08 96       	adiw	r24, 0x08	; 8
     8c8:	f5 cf       	rjmp	.-22     	; 0x8b4 <NextTetriminos+0x32>
     8ca:	e0 91 40 05 	lds	r30, 0x0540	; 0x800540 <next_block>
     8ce:	20 e4       	ldi	r18, 0x40	; 64
     8d0:	e2 9f       	mul	r30, r18
     8d2:	f0 01       	movw	r30, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	af 01       	movw	r20, r30
     8d8:	44 57       	subi	r20, 0x74	; 116
     8da:	5f 4f       	sbci	r21, 0xFF	; 255
     8dc:	a0 e0       	ldi	r26, 0x00	; 0
     8de:	b5 e0       	ldi	r27, 0x05	; 5
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	fa 01       	movw	r30, r20
     8e6:	24 91       	lpm	r18, Z
     8e8:	52 96       	adiw	r26, 0x12	; 18
     8ea:	2c 93       	st	X, r18
     8ec:	52 97       	sbiw	r26, 0x12	; 18
     8ee:	9a 01       	movw	r18, r20
     8f0:	2c 5f       	subi	r18, 0xFC	; 252
     8f2:	3f 4f       	sbci	r19, 0xFF	; 255
     8f4:	f9 01       	movw	r30, r18
     8f6:	24 91       	lpm	r18, Z
     8f8:	5a 96       	adiw	r26, 0x1a	; 26
     8fa:	2c 93       	st	X, r18
     8fc:	5a 97       	sbiw	r26, 0x1a	; 26
     8fe:	9a 01       	movw	r18, r20
     900:	28 5f       	subi	r18, 0xF8	; 248
     902:	3f 4f       	sbci	r19, 0xFF	; 255
     904:	f9 01       	movw	r30, r18
     906:	24 91       	lpm	r18, Z
     908:	92 96       	adiw	r26, 0x22	; 34
     90a:	2c 93       	st	X, r18
     90c:	92 97       	sbiw	r26, 0x22	; 34
     90e:	9a 01       	movw	r18, r20
     910:	24 5f       	subi	r18, 0xF4	; 244
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	f9 01       	movw	r30, r18
     916:	24 91       	lpm	r18, Z
     918:	9a 96       	adiw	r26, 0x2a	; 42
     91a:	2c 93       	st	X, r18
     91c:	9a 97       	sbiw	r26, 0x2a	; 42
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	4f 5f       	subi	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	11 96       	adiw	r26, 0x01	; 1
     926:	84 30       	cpi	r24, 0x04	; 4
     928:	91 05       	cpc	r25, r1
     92a:	e1 f6       	brne	.-72     	; 0x8e4 <NextTetriminos+0x62>
     92c:	fe 01       	movw	r30, r28
     92e:	31 96       	adiw	r30, 0x01	; 1
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	df 01       	movw	r26, r30
     936:	9c 01       	movw	r18, r24
     938:	1d 92       	st	X+, r1
     93a:	21 50       	subi	r18, 0x01	; 1
     93c:	30 40       	sbci	r19, 0x00	; 0
     93e:	e1 f7       	brne	.-8      	; 0x938 <NextTetriminos+0xb6>
     940:	8f ef       	ldi	r24, 0xFF	; 255
     942:	8b 83       	std	Y+3, r24	; 0x03
     944:	cd 57       	subi	r28, 0x7D	; 125
     946:	df 4f       	sbci	r29, 0xFF	; 255
     948:	88 83       	st	Y, r24
     94a:	c3 58       	subi	r28, 0x83	; 131
     94c:	d0 40       	sbci	r29, 0x00	; 0
     94e:	8a 8b       	std	Y+18, r24	; 0x12
     950:	ce 56       	subi	r28, 0x6E	; 110
     952:	df 4f       	sbci	r29, 0xFF	; 255
     954:	88 83       	st	Y, r24
     956:	c2 59       	subi	r28, 0x92	; 146
     958:	d0 40       	sbci	r29, 0x00	; 0
     95a:	32 96       	adiw	r30, 0x02	; 2
     95c:	ce 01       	movw	r24, r28
     95e:	8d 57       	subi	r24, 0x7D	; 125
     960:	9f 4f       	sbci	r25, 0xFF	; 255
     962:	4c 01       	movw	r8, r24
     964:	ae 01       	movw	r20, r28
     966:	4d 5e       	subi	r20, 0xED	; 237
     968:	5f 4f       	sbci	r21, 0xFF	; 255
     96a:	9c 01       	movw	r18, r24
     96c:	80 81       	ld	r24, Z
     96e:	81 60       	ori	r24, 0x01	; 1
     970:	81 93       	st	Z+, r24
     972:	d9 01       	movw	r26, r18
     974:	8c 91       	ld	r24, X
     976:	80 68       	ori	r24, 0x80	; 128
     978:	8d 93       	st	X+, r24
     97a:	9d 01       	movw	r18, r26
     97c:	4e 17       	cp	r20, r30
     97e:	5f 07       	cpc	r21, r31
     980:	a9 f7       	brne	.-22     	; 0x96c <NextTetriminos+0xea>
     982:	8e 01       	movw	r16, r28
     984:	0f 5f       	subi	r16, 0xFF	; 255
     986:	1f 4f       	sbci	r17, 0xFF	; 255
     988:	6e 01       	movw	r12, r28
     98a:	b1 e1       	ldi	r27, 0x11	; 17
     98c:	cb 0e       	add	r12, r27
     98e:	d1 1c       	adc	r13, r1
     990:	0f 2e       	mov	r0, r31
     992:	f3 e0       	ldi	r31, 0x03	; 3
     994:	ef 2e       	mov	r14, r31
     996:	f1 2c       	mov	r15, r1
     998:	f0 2d       	mov	r31, r0
     99a:	41 c0       	rjmp	.+130    	; 0xa1e <NextTetriminos+0x19c>
     99c:	41 91       	ld	r20, Z+
     99e:	41 30       	cpi	r20, 0x01	; 1
     9a0:	71 f5       	brne	.+92     	; 0x9fe <NextTetriminos+0x17c>
     9a2:	84 30       	cpi	r24, 0x04	; 4
     9a4:	91 05       	cpc	r25, r1
     9a6:	9c f4       	brge	.+38     	; 0x9ce <NextTetriminos+0x14c>
     9a8:	d4 01       	movw	r26, r8
     9aa:	bc 90       	ld	r11, X
     9ac:	a7 01       	movw	r20, r14
     9ae:	02 2e       	mov	r0, r18
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <NextTetriminos+0x134>
     9b2:	44 0f       	add	r20, r20
     9b4:	55 1f       	adc	r21, r21
     9b6:	0a 94       	dec	r0
     9b8:	e2 f7       	brpl	.-8      	; 0x9b2 <NextTetriminos+0x130>
     9ba:	5b 2d       	mov	r21, r11
     9bc:	54 2b       	or	r21, r20
     9be:	5c 93       	st	X, r21
     9c0:	11 96       	adiw	r26, 0x01	; 1
     9c2:	5c 91       	ld	r21, X
     9c4:	11 97       	sbiw	r26, 0x01	; 1
     9c6:	45 2b       	or	r20, r21
     9c8:	11 96       	adiw	r26, 0x01	; 1
     9ca:	4c 93       	st	X, r20
     9cc:	18 c0       	rjmp	.+48     	; 0x9fe <NextTetriminos+0x17c>
     9ce:	a9 01       	movw	r20, r18
     9d0:	48 5f       	subi	r20, 0xF8	; 248
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	d7 01       	movw	r26, r14
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <NextTetriminos+0x15a>
     9d8:	aa 0f       	add	r26, r26
     9da:	bb 1f       	adc	r27, r27
     9dc:	4a 95       	dec	r20
     9de:	e2 f7       	brpl	.-8      	; 0x9d8 <NextTetriminos+0x156>
     9e0:	ad 01       	movw	r20, r26
     9e2:	d8 01       	movw	r26, r16
     9e4:	12 96       	adiw	r26, 0x02	; 2
     9e6:	5c 91       	ld	r21, X
     9e8:	12 97       	sbiw	r26, 0x02	; 2
     9ea:	54 2b       	or	r21, r20
     9ec:	12 96       	adiw	r26, 0x02	; 2
     9ee:	5c 93       	st	X, r21
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	13 96       	adiw	r26, 0x03	; 3
     9f4:	5c 91       	ld	r21, X
     9f6:	13 97       	sbiw	r26, 0x03	; 3
     9f8:	45 2b       	or	r20, r21
     9fa:	13 96       	adiw	r26, 0x03	; 3
     9fc:	4c 93       	st	X, r20
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	22 50       	subi	r18, 0x02	; 2
     a02:	31 09       	sbc	r19, r1
     a04:	88 30       	cpi	r24, 0x08	; 8
     a06:	91 05       	cpc	r25, r1
     a08:	49 f6       	brne	.-110    	; 0x99c <NextTetriminos+0x11a>
     a0a:	68 5f       	subi	r22, 0xF8	; 248
     a0c:	7f 4f       	sbci	r23, 0xFF	; 255
     a0e:	b2 e0       	ldi	r27, 0x02	; 2
     a10:	8b 0e       	add	r8, r27
     a12:	91 1c       	adc	r9, r1
     a14:	0e 5f       	subi	r16, 0xFE	; 254
     a16:	1f 4f       	sbci	r17, 0xFF	; 255
     a18:	c0 16       	cp	r12, r16
     a1a:	d1 06       	cpc	r13, r17
     a1c:	31 f0       	breq	.+12     	; 0xa2a <NextTetriminos+0x1a8>
     a1e:	fb 01       	movw	r30, r22
     a20:	26 e0       	ldi	r18, 0x06	; 6
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	b9 cf       	rjmp	.-142    	; 0x99c <NextTetriminos+0x11a>
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	23 dd       	rcall	.-1466   	; 0x474 <ssd1306_set_page_start>
     a2e:	60 e8       	ldi	r22, 0x80	; 128
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	ce 01       	movw	r24, r28
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	47 dd       	rcall	.-1394   	; 0x4c6 <ssd1306_data>
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	1c dd       	rcall	.-1480   	; 0x474 <ssd1306_set_page_start>
     a3c:	60 e8       	ldi	r22, 0x80	; 128
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	ce 01       	movw	r24, r28
     a42:	8f 57       	subi	r24, 0x7F	; 127
     a44:	9f 4f       	sbci	r25, 0xFF	; 255
     a46:	3f dd       	rcall	.-1410   	; 0x4c6 <ssd1306_data>
     a48:	d3 95       	inc	r29
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	bf 90       	pop	r11
     a66:	9f 90       	pop	r9
     a68:	8f 90       	pop	r8
     a6a:	08 95       	ret

00000a6c <Collision>:

	unsigned char Collision()	//충돌 여부 확인
	{
     a6c:	6f 92       	push	r6
     a6e:	7f 92       	push	r7
     a70:	9f 92       	push	r9
     a72:	af 92       	push	r10
     a74:	bf 92       	push	r11
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
		unsigned char collison2 = 0;	//두번째
		unsigned char collison3 = 0;	//세번째
		unsigned char collison4 = 0;	//네번째
		for(int i = 0; i < 4; i++)
		{
			collison1 |= main_board[cur_col-i][cur_line] & temp_line[cur_col-i][0];	//게임보드에 있는 벽이나 테트리미노스와 임시저장소에 생긴 테트리미노스가 겹치는지 확인하고 겹치면 충돌여부 플레그 켜짐
     a86:	a0 91 73 0c 	lds	r26, 0x0C73	; 0x800c73 <cur_line>
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
			collison2 |= main_board[cur_col-i][cur_line + 1] & temp_line[cur_col-i][1];
     a8c:	7d 01       	movw	r14, r26
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	e8 1a       	sub	r14, r24
     a92:	f8 0a       	sbc	r15, r24
			collison3 |= main_board[cur_col-i][cur_line + 2] & temp_line[cur_col-i][2];
     a94:	8d 01       	movw	r16, r26
     a96:	0e 5f       	subi	r16, 0xFE	; 254
     a98:	1f 4f       	sbci	r17, 0xFF	; 255
			collison4 |= main_board[cur_col-i][cur_line + 3] & temp_line[cur_col-i][3];
     a9a:	3d 01       	movw	r6, r26
     a9c:	93 e0       	ldi	r25, 0x03	; 3
     a9e:	69 0e       	add	r6, r25
     aa0:	71 1c       	adc	r7, r1
     aa2:	80 91 74 0c 	lds	r24, 0x0C74	; 0x800c74 <cur_col>
     aa6:	bd 01       	movw	r22, r26
     aa8:	48 2f       	mov	r20, r24
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	c0 e2       	ldi	r28, 0x20	; 32
     aae:	8c 9f       	mul	r24, r28
     ab0:	a0 0d       	add	r26, r0
     ab2:	b1 1d       	adc	r27, r1
     ab4:	11 24       	eor	r1, r1
     ab6:	ad 53       	subi	r26, 0x3D	; 61
     ab8:	b9 4f       	sbci	r27, 0xF9	; 249
     aba:	fa 01       	movw	r30, r20
     abc:	ee 0f       	add	r30, r30
     abe:	ff 1f       	adc	r31, r31
     ac0:	ee 0f       	add	r30, r30
     ac2:	ff 1f       	adc	r31, r31
     ac4:	ed 5b       	subi	r30, 0xBD	; 189
     ac6:	f7 4f       	sbci	r31, 0xF7	; 247
     ac8:	44 0f       	add	r20, r20
     aca:	55 1f       	adc	r21, r21
     acc:	44 0f       	add	r20, r20
     ace:	55 1f       	adc	r21, r21
     ad0:	4d 5c       	subi	r20, 0xCD	; 205
     ad2:	57 4f       	sbci	r21, 0xF7	; 247
	unsigned char Collision()	//충돌 여부 확인
	{
		unsigned char collison1 = 0;	//첫번째 라인 충돌 여부
		unsigned char collison2 = 0;	//두번째
		unsigned char collison3 = 0;	//세번째
		unsigned char collison4 = 0;	//네번째
     ad4:	91 2c       	mov	r9, r1

	unsigned char Collision()	//충돌 여부 확인
	{
		unsigned char collison1 = 0;	//첫번째 라인 충돌 여부
		unsigned char collison2 = 0;	//두번째
		unsigned char collison3 = 0;	//세번째
     ad6:	c1 2c       	mov	r12, r1
	}

	unsigned char Collision()	//충돌 여부 확인
	{
		unsigned char collison1 = 0;	//첫번째 라인 충돌 여부
		unsigned char collison2 = 0;	//두번째
     ad8:	d1 2c       	mov	r13, r1
		}
	}

	unsigned char Collision()	//충돌 여부 확인
	{
		unsigned char collison1 = 0;	//첫번째 라인 충돌 여부
     ada:	30 e0       	ldi	r19, 0x00	; 0
		unsigned char collison2 = 0;	//두번째
		unsigned char collison3 = 0;	//세번째
		unsigned char collison4 = 0;	//네번째
		for(int i = 0; i < 4; i++)
		{
			collison1 |= main_board[cur_col-i][cur_line] & temp_line[cur_col-i][0];	//게임보드에 있는 벽이나 테트리미노스와 임시저장소에 생긴 테트리미노스가 겹치는지 확인하고 겹치면 충돌여부 플레그 켜짐
     adc:	9c 91       	ld	r25, X
     ade:	80 81       	ld	r24, Z
     ae0:	89 23       	and	r24, r25
     ae2:	38 2b       	or	r19, r24
     ae4:	cd 01       	movw	r24, r26
     ae6:	86 1b       	sub	r24, r22
     ae8:	97 0b       	sbc	r25, r23
			collison2 |= main_board[cur_col-i][cur_line + 1] & temp_line[cur_col-i][1];
     aea:	5c 01       	movw	r10, r24
     aec:	ae 0c       	add	r10, r14
     aee:	bf 1c       	adc	r11, r15
     af0:	e5 01       	movw	r28, r10
     af2:	b8 80       	ld	r11, Y
     af4:	21 81       	ldd	r18, Z+1	; 0x01
     af6:	2b 21       	and	r18, r11
     af8:	d2 2a       	or	r13, r18
			collison3 |= main_board[cur_col-i][cur_line + 2] & temp_line[cur_col-i][2];
     afa:	5c 01       	movw	r10, r24
     afc:	a0 0e       	add	r10, r16
     afe:	b1 1e       	adc	r11, r17
     b00:	e5 01       	movw	r28, r10
     b02:	b8 80       	ld	r11, Y
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	2b 21       	and	r18, r11
     b08:	c2 2a       	or	r12, r18
			collison4 |= main_board[cur_col-i][cur_line + 3] & temp_line[cur_col-i][3];
     b0a:	86 0d       	add	r24, r6
     b0c:	97 1d       	adc	r25, r7
     b0e:	ec 01       	movw	r28, r24
     b10:	98 81       	ld	r25, Y
     b12:	83 81       	ldd	r24, Z+3	; 0x03
     b14:	89 23       	and	r24, r25
     b16:	98 2a       	or	r9, r24
     b18:	90 97       	sbiw	r26, 0x20	; 32
     b1a:	34 97       	sbiw	r30, 0x04	; 4
	{
		unsigned char collison1 = 0;	//첫번째 라인 충돌 여부
		unsigned char collison2 = 0;	//두번째
		unsigned char collison3 = 0;	//세번째
		unsigned char collison4 = 0;	//네번째
		for(int i = 0; i < 4; i++)
     b1c:	e4 17       	cp	r30, r20
     b1e:	f5 07       	cpc	r31, r21
     b20:	e9 f6       	brne	.-70     	; 0xadc <Collision+0x70>
			collison1 |= main_board[cur_col-i][cur_line] & temp_line[cur_col-i][0];	//게임보드에 있는 벽이나 테트리미노스와 임시저장소에 생긴 테트리미노스가 겹치는지 확인하고 겹치면 충돌여부 플레그 켜짐
			collison2 |= main_board[cur_col-i][cur_line + 1] & temp_line[cur_col-i][1];
			collison3 |= main_board[cur_col-i][cur_line + 2] & temp_line[cur_col-i][2];
			collison4 |= main_board[cur_col-i][cur_line + 3] & temp_line[cur_col-i][3];
		}
		if(collison1 == 1 || collison2 == 1 || collison3 == 1 || collison4 == 1)	//어느라인이든 충돌며부 플레그가 켜지는지 확인
     b22:	31 30       	cpi	r19, 0x01	; 1
     b24:	51 f0       	breq	.+20     	; 0xb3a <Collision+0xce>
     b26:	d1 e0       	ldi	r29, 0x01	; 1
     b28:	dd 16       	cp	r13, r29
     b2a:	49 f0       	breq	.+18     	; 0xb3e <Collision+0xd2>
     b2c:	cd 16       	cp	r12, r29
     b2e:	49 f0       	breq	.+18     	; 0xb42 <Collision+0xd6>
		return 1;         // 충돌 1 리턴
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	98 16       	cp	r9, r24
     b34:	39 f0       	breq	.+14     	; 0xb44 <Collision+0xd8>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <Collision+0xd8>
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	03 c0       	rjmp	.+6      	; 0xb44 <Collision+0xd8>
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	01 c0       	rjmp	.+2      	; 0xb44 <Collision+0xd8>
     b42:	81 e0       	ldi	r24, 0x01	; 1
		else
		return 0;  // 충돌 없음 0 리턴
	}
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	bf 90       	pop	r11
     b56:	af 90       	pop	r10
     b58:	9f 90       	pop	r9
     b5a:	7f 90       	pop	r7
     b5c:	6f 90       	pop	r6
     b5e:	08 95       	ret

00000b60 <__vector_5>:
static uint8_t blank[1] = {0};

unsigned char Collision();

ISR(INT4_vect)
{
     b60:	1f 92       	push	r1
     b62:	0f 92       	push	r0
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	0f 92       	push	r0
     b68:	11 24       	eor	r1, r1
     b6a:	0b b6       	in	r0, 0x3b	; 59
     b6c:	0f 92       	push	r0
     b6e:	df 92       	push	r13
     b70:	ef 92       	push	r14
     b72:	ff 92       	push	r15
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	2f 93       	push	r18
     b7a:	3f 93       	push	r19
     b7c:	4f 93       	push	r20
     b7e:	5f 93       	push	r21
     b80:	6f 93       	push	r22
     b82:	7f 93       	push	r23
     b84:	8f 93       	push	r24
     b86:	9f 93       	push	r25
     b88:	af 93       	push	r26
     b8a:	bf 93       	push	r27
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	ef 93       	push	r30
     b92:	ff 93       	push	r31
	SendCommand01(0x0F, 0x01, 0x03);
     b94:	43 e0       	ldi	r20, 0x03	; 3
     b96:	61 e0       	ldi	r22, 0x01	; 1
     b98:	8f e0       	ldi	r24, 0x0F	; 15
     b9a:	3b dc       	rcall	.-1930   	; 0x412 <SendCommand01>
     b9c:	e3 ec       	ldi	r30, 0xC3	; 195
     b9e:	f6 e0       	ldi	r31, 0x06	; 6
     ba0:	43 e4       	ldi	r20, 0x43	; 67
     ba2:	55 e0       	ldi	r21, 0x05	; 5
     ba4:	63 e4       	ldi	r22, 0x43	; 67
     ba6:	78 e0       	ldi	r23, 0x08	; 8
     ba8:	0b c0       	rjmp	.+22     	; 0xbc0 <__vector_5+0x60>
	for(int i = 0; i < 12; i++)
	{
		for(int j = 0; j< 32; j++)
		{
			game_board[i][j] = main_board[i][j];	//굳어진후 저장된 보드를 변화하는 보드로 복사
     baa:	81 91       	ld	r24, Z+
     bac:	8d 93       	st	X+, r24
ISR(INT4_vect)
{
	SendCommand01(0x0F, 0x01, 0x03);
	for(int i = 0; i < 12; i++)
	{
		for(int j = 0; j< 32; j++)
     bae:	e2 17       	cp	r30, r18
     bb0:	f3 07       	cpc	r31, r19
     bb2:	d9 f7       	brne	.-10     	; 0xbaa <__vector_5+0x4a>
     bb4:	40 5e       	subi	r20, 0xE0	; 224
     bb6:	5f 4f       	sbci	r21, 0xFF	; 255
     bb8:	f9 01       	movw	r30, r18
unsigned char Collision();

ISR(INT4_vect)
{
	SendCommand01(0x0F, 0x01, 0x03);
	for(int i = 0; i < 12; i++)
     bba:	62 17       	cp	r22, r18
     bbc:	73 07       	cpc	r23, r19
     bbe:	29 f0       	breq	.+10     	; 0xbca <__vector_5+0x6a>
     bc0:	9f 01       	movw	r18, r30
     bc2:	20 5e       	subi	r18, 0xE0	; 224
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
static uint8_t blank[1] = {0};

unsigned char Collision();

ISR(INT4_vect)
{
     bc6:	da 01       	movw	r26, r20
     bc8:	f0 cf       	rjmp	.-32     	; 0xbaa <__vector_5+0x4a>
		{
			game_board[i][j] = main_board[i][j];	//굳어진후 저장된 보드를 변화하는 보드로 복사
		}
	}

	if(cur_col > 3) cur_col--;	//테트리미노스 현재칸 오른쪽으로 이동(3보다 클 시)
     bca:	80 91 74 0c 	lds	r24, 0x0C74	; 0x800c74 <cur_col>
     bce:	84 30       	cpi	r24, 0x04	; 4
     bd0:	08 f4       	brcc	.+2      	; 0xbd4 <__vector_5+0x74>
     bd2:	cf c0       	rjmp	.+414    	; 0xd72 <__vector_5+0x212>
     bd4:	81 50       	subi	r24, 0x01	; 1
     bd6:	80 93 74 0c 	sts	0x0C74, r24	; 0x800c74 <cur_col>
     bda:	cb c0       	rjmp	.+406    	; 0xd72 <__vector_5+0x212>

	for(int i = 0; i < 12; i++)	//테트리미노스 라인 임시 저장소 초기화
	{
		for(int j = 0; j < 4; j++)
		{
			temp_line[i][j] = 0;
     bdc:	10 82       	st	Z, r1
     bde:	11 82       	std	Z+1, r1	; 0x01
     be0:	12 82       	std	Z+2, r1	; 0x02
     be2:	13 82       	std	Z+3, r1	; 0x03
     be4:	34 96       	adiw	r30, 0x04	; 4
		}
	}

	if(cur_col > 3) cur_col--;	//테트리미노스 현재칸 오른쪽으로 이동(3보다 클 시)

	for(int i = 0; i < 12; i++)	//테트리미노스 라인 임시 저장소 초기화
     be6:	ee 15       	cp	r30, r14
     be8:	ff 05       	cpc	r31, r15
     bea:	c1 f7       	brne	.-16     	; 0xbdc <__vector_5+0x7c>
		}
	}

	for(int i = 0; i < 4; i++)	//이 과정이 필요 없고 뒤에서 한번에 충돌감지 이후 넣어줘도 상관없어 보이지만 충돌 여부 판별하는 함수가 temp_line와 메인보드가 겹치는지 파악하기때문에 temp_line에 변화된 사항을 반영해야 한다.
	{
		temp_line[cur_col-i][0] = tetriminos[shape][pattern][i];	//임시저장소에 테트리미노스 '왼쪽부터'(그래서 -i 로 역순이 된다) 지정된 칸에 넣기
     bec:	d0 90 74 0c 	lds	r13, 0x0C74	; 0x800c74 <cur_col>
     bf0:	80 91 76 0c 	lds	r24, 0x0C76	; 0x800c76 <shape>
     bf4:	00 91 75 0c 	lds	r16, 0x0C75	; 0x800c75 <pattern>
     bf8:	10 e0       	ldi	r17, 0x00	; 0
     bfa:	24 e0       	ldi	r18, 0x04	; 4
     bfc:	82 9f       	mul	r24, r18
     bfe:	00 0d       	add	r16, r0
     c00:	11 1d       	adc	r17, r1
     c02:	11 24       	eor	r1, r1
     c04:	02 95       	swap	r16
     c06:	12 95       	swap	r17
     c08:	10 7f       	andi	r17, 0xF0	; 240
     c0a:	10 27       	eor	r17, r16
     c0c:	00 7f       	andi	r16, 0xF0	; 240
     c0e:	10 27       	eor	r17, r16
     c10:	04 57       	subi	r16, 0x74	; 116
     c12:	1f 4f       	sbci	r17, 0xFF	; 255
     c14:	2d 2d       	mov	r18, r13
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	f9 01       	movw	r30, r18
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	ee 0f       	add	r30, r30
     c20:	ff 1f       	adc	r31, r31
     c22:	df 01       	movw	r26, r30
     c24:	ad 5b       	subi	r26, 0xBD	; 189
     c26:	b7 4f       	sbci	r27, 0xF7	; 247
     c28:	9f 01       	movw	r18, r30
     c2a:	2d 5c       	subi	r18, 0xCD	; 205
     c2c:	37 4f       	sbci	r19, 0xF7	; 247
     c2e:	c8 01       	movw	r24, r16
     c30:	fc 01       	movw	r30, r24
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	45 91       	lpm	r20, Z+
     c36:	4c 93       	st	X, r20
		temp_line[cur_col-i][1] = tetriminos[shape][pattern][i + 4];
     c38:	ac 01       	movw	r20, r24
     c3a:	4d 5f       	subi	r20, 0xFD	; 253
     c3c:	5f 4f       	sbci	r21, 0xFF	; 255
     c3e:	fa 01       	movw	r30, r20
     c40:	44 91       	lpm	r20, Z
     c42:	11 96       	adiw	r26, 0x01	; 1
     c44:	4c 93       	st	X, r20
     c46:	11 97       	sbiw	r26, 0x01	; 1
		temp_line[cur_col-i][2] = tetriminos[shape][pattern][i + 8];
     c48:	ac 01       	movw	r20, r24
     c4a:	49 5f       	subi	r20, 0xF9	; 249
     c4c:	5f 4f       	sbci	r21, 0xFF	; 255
     c4e:	fa 01       	movw	r30, r20
     c50:	44 91       	lpm	r20, Z
     c52:	12 96       	adiw	r26, 0x02	; 2
     c54:	4c 93       	st	X, r20
     c56:	12 97       	sbiw	r26, 0x02	; 2
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
     c58:	ac 01       	movw	r20, r24
     c5a:	45 5f       	subi	r20, 0xF5	; 245
     c5c:	5f 4f       	sbci	r21, 0xFF	; 255
     c5e:	fa 01       	movw	r30, r20
     c60:	44 91       	lpm	r20, Z
     c62:	13 96       	adiw	r26, 0x03	; 3
     c64:	4c 93       	st	X, r20
     c66:	13 97       	sbiw	r26, 0x03	; 3
     c68:	14 97       	sbiw	r26, 0x04	; 4
		{
			temp_line[i][j] = 0;
		}
	}

	for(int i = 0; i < 4; i++)	//이 과정이 필요 없고 뒤에서 한번에 충돌감지 이후 넣어줘도 상관없어 보이지만 충돌 여부 판별하는 함수가 temp_line와 메인보드가 겹치는지 파악하기때문에 temp_line에 변화된 사항을 반영해야 한다.
     c6a:	a2 17       	cp	r26, r18
     c6c:	b3 07       	cpc	r27, r19
		temp_line[cur_col-i][1] = tetriminos[shape][pattern][i + 4];
		temp_line[cur_col-i][2] = tetriminos[shape][pattern][i + 8];
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
	}
	
	if(Collision() == 1) cur_col++;
     c6e:	01 f7       	brne	.-64     	; 0xc30 <__vector_5+0xd0>
     c70:	fd de       	rcall	.-518    	; 0xa6c <Collision>
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	19 f4       	brne	.+6      	; 0xc7c <__vector_5+0x11c>
     c76:	d3 94       	inc	r13
     c78:	d0 92 74 0c 	sts	0x0C74, r13	; 0x800c74 <cur_col>

	for(int i = 0; i < 12; i++)	//테트리미노스 라인 임시 저장소 초기화
	{
		for(int j = 0; j < 4; j++)
		{
			temp_line[i][j] = 0;
     c7c:	18 82       	st	Y, r1
     c7e:	19 82       	std	Y+1, r1	; 0x01
     c80:	1a 82       	std	Y+2, r1	; 0x02
     c82:	1b 82       	std	Y+3, r1	; 0x03
     c84:	24 96       	adiw	r28, 0x04	; 4
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
	}
	
	if(Collision() == 1) cur_col++;

	for(int i = 0; i < 12; i++)	//테트리미노스 라인 임시 저장소 초기화
     c86:	ce 15       	cp	r28, r14
     c88:	df 05       	cpc	r29, r15
     c8a:	c1 f7       	brne	.-16     	; 0xc7c <__vector_5+0x11c>
     c8c:	80 91 74 0c 	lds	r24, 0x0C74	; 0x800c74 <cur_col>
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	fc 01       	movw	r30, r24
     c94:	ee 0f       	add	r30, r30
     c96:	ff 1f       	adc	r31, r31
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	9f 01       	movw	r18, r30
     c9e:	2d 5b       	subi	r18, 0xBD	; 189
     ca0:	37 4f       	sbci	r19, 0xF7	; 247
     ca2:	79 01       	movw	r14, r18
     ca4:	bf 01       	movw	r22, r30
     ca6:	6d 5c       	subi	r22, 0xCD	; 205
     ca8:	77 4f       	sbci	r23, 0xF7	; 247
		}
	}

	for(int i = 0; i < 4; i++)
	{
		temp_line[cur_col-i][0] = tetriminos[shape][pattern][i];	//임시저장소에 테트리미노스 '왼쪽부터'(그래서 -i 로 역순이 된다) 지정된 칸에 넣기
     caa:	d9 01       	movw	r26, r18
     cac:	f8 01       	movw	r30, r16
     cae:	0f 5f       	subi	r16, 0xFF	; 255
     cb0:	1f 4f       	sbci	r17, 0xFF	; 255
     cb2:	25 91       	lpm	r18, Z+
     cb4:	2c 93       	st	X, r18
		temp_line[cur_col-i][1] = tetriminos[shape][pattern][i + 4];
     cb6:	98 01       	movw	r18, r16
     cb8:	2d 5f       	subi	r18, 0xFD	; 253
     cba:	3f 4f       	sbci	r19, 0xFF	; 255
     cbc:	f9 01       	movw	r30, r18
     cbe:	24 91       	lpm	r18, Z
     cc0:	11 96       	adiw	r26, 0x01	; 1
     cc2:	2c 93       	st	X, r18
     cc4:	11 97       	sbiw	r26, 0x01	; 1
		temp_line[cur_col-i][2] = tetriminos[shape][pattern][i + 8];
     cc6:	98 01       	movw	r18, r16
     cc8:	29 5f       	subi	r18, 0xF9	; 249
     cca:	3f 4f       	sbci	r19, 0xFF	; 255
     ccc:	f9 01       	movw	r30, r18
     cce:	24 91       	lpm	r18, Z
     cd0:	12 96       	adiw	r26, 0x02	; 2
     cd2:	2c 93       	st	X, r18
     cd4:	12 97       	sbiw	r26, 0x02	; 2
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
     cd6:	98 01       	movw	r18, r16
     cd8:	25 5f       	subi	r18, 0xF5	; 245
     cda:	3f 4f       	sbci	r19, 0xFF	; 255
     cdc:	f9 01       	movw	r30, r18
     cde:	24 91       	lpm	r18, Z
     ce0:	13 96       	adiw	r26, 0x03	; 3
     ce2:	2c 93       	st	X, r18
     ce4:	13 97       	sbiw	r26, 0x03	; 3
     ce6:	14 97       	sbiw	r26, 0x04	; 4
		{
			temp_line[i][j] = 0;
		}
	}

	for(int i = 0; i < 4; i++)
     ce8:	a6 17       	cp	r26, r22
     cea:	b7 07       	cpc	r27, r23
     cec:	f9 f6       	brne	.-66     	; 0xcac <__vector_5+0x14c>
	}

	
	for(int i = 0; i < 4; i++)	//현재라인 아래로 이동 후 변화하는 보드에 반영
	{
		game_board[cur_col-i][cur_line] |= temp_line[cur_col-i][0];
     cee:	40 91 73 0c 	lds	r20, 0x0C73	; 0x800c73 <cur_line>
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	dc 01       	movw	r26, r24
     cf6:	aa 0f       	add	r26, r26
     cf8:	bb 1f       	adc	r27, r27
     cfa:	a2 95       	swap	r26
     cfc:	b2 95       	swap	r27
     cfe:	b0 7f       	andi	r27, 0xF0	; 240
     d00:	ba 27       	eor	r27, r26
     d02:	a0 7f       	andi	r26, 0xF0	; 240
     d04:	ba 27       	eor	r27, r26
     d06:	9a 01       	movw	r18, r20
     d08:	2a 0f       	add	r18, r26
     d0a:	3b 1f       	adc	r19, r27
     d0c:	2d 5b       	subi	r18, 0xBD	; 189
     d0e:	3a 4f       	sbci	r19, 0xFA	; 250
     d10:	cd 01       	movw	r24, r26
     d12:	84 0f       	add	r24, r20
     d14:	95 1f       	adc	r25, r21
     d16:	8c 5b       	subi	r24, 0xBC	; 188
     d18:	9a 4f       	sbci	r25, 0xFA	; 250
     d1a:	ed 01       	movw	r28, r26
     d1c:	c4 0f       	add	r28, r20
     d1e:	d5 1f       	adc	r29, r21
     d20:	cb 5b       	subi	r28, 0xBB	; 187
     d22:	da 4f       	sbci	r29, 0xFA	; 250
     d24:	a4 0f       	add	r26, r20
     d26:	b5 1f       	adc	r27, r21
     d28:	aa 5b       	subi	r26, 0xBA	; 186
     d2a:	ba 4f       	sbci	r27, 0xFA	; 250
     d2c:	f9 01       	movw	r30, r18
     d2e:	50 81       	ld	r21, Z
     d30:	f7 01       	movw	r30, r14
     d32:	40 81       	ld	r20, Z
     d34:	45 2b       	or	r20, r21
     d36:	f9 01       	movw	r30, r18
     d38:	40 83       	st	Z, r20
		game_board[cur_col-i][cur_line + 1] |= temp_line[cur_col-i][1];
     d3a:	fc 01       	movw	r30, r24
     d3c:	50 81       	ld	r21, Z
     d3e:	f7 01       	movw	r30, r14
     d40:	41 81       	ldd	r20, Z+1	; 0x01
     d42:	45 2b       	or	r20, r21
     d44:	fc 01       	movw	r30, r24
     d46:	40 83       	st	Z, r20
		game_board[cur_col-i][cur_line + 2] |= temp_line[cur_col-i][2];
     d48:	58 81       	ld	r21, Y
     d4a:	f7 01       	movw	r30, r14
     d4c:	42 81       	ldd	r20, Z+2	; 0x02
     d4e:	45 2b       	or	r20, r21
     d50:	48 83       	st	Y, r20
		game_board[cur_col-i][cur_line + 3] |= temp_line[cur_col-i][3];
     d52:	5c 91       	ld	r21, X
     d54:	43 81       	ldd	r20, Z+3	; 0x03
     d56:	45 2b       	or	r20, r21
     d58:	4c 93       	st	X, r20
     d5a:	20 52       	subi	r18, 0x20	; 32
     d5c:	31 09       	sbc	r19, r1
     d5e:	f4 e0       	ldi	r31, 0x04	; 4
     d60:	ef 1a       	sub	r14, r31
     d62:	f1 08       	sbc	r15, r1
     d64:	80 97       	sbiw	r24, 0x20	; 32
     d66:	a0 97       	sbiw	r28, 0x20	; 32
     d68:	90 97       	sbiw	r26, 0x20	; 32
		temp_line[cur_col-i][2] = tetriminos[shape][pattern][i + 8];
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
	}

	
	for(int i = 0; i < 4; i++)	//현재라인 아래로 이동 후 변화하는 보드에 반영
     d6a:	e6 16       	cp	r14, r22
     d6c:	f7 06       	cpc	r15, r23
     d6e:	f1 f6       	brne	.-68     	; 0xd2c <__vector_5+0x1cc>
     d70:	0a c0       	rjmp	.+20     	; 0xd86 <__vector_5+0x226>
     d72:	c3 e4       	ldi	r28, 0x43	; 67
     d74:	d8 e0       	ldi	r29, 0x08	; 8
     d76:	0f 2e       	mov	r0, r31
     d78:	f3 e7       	ldi	r31, 0x73	; 115
     d7a:	ef 2e       	mov	r14, r31
     d7c:	f8 e0       	ldi	r31, 0x08	; 8
     d7e:	ff 2e       	mov	r15, r31
     d80:	f0 2d       	mov	r31, r0
static uint8_t blank[1] = {0};

unsigned char Collision();

ISR(INT4_vect)
{
     d82:	fe 01       	movw	r30, r28
     d84:	2b cf       	rjmp	.-426    	; 0xbdc <__vector_5+0x7c>
		game_board[cur_col-i][cur_line + 1] |= temp_line[cur_col-i][1];
		game_board[cur_col-i][cur_line + 2] |= temp_line[cur_col-i][2];
		game_board[cur_col-i][cur_line + 3] |= temp_line[cur_col-i][3];
	}
	
}
     d86:	ff 91       	pop	r31
     d88:	ef 91       	pop	r30
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	bf 91       	pop	r27
     d90:	af 91       	pop	r26
     d92:	9f 91       	pop	r25
     d94:	8f 91       	pop	r24
     d96:	7f 91       	pop	r23
     d98:	6f 91       	pop	r22
     d9a:	5f 91       	pop	r21
     d9c:	4f 91       	pop	r20
     d9e:	3f 91       	pop	r19
     da0:	2f 91       	pop	r18
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	0f 90       	pop	r0
     dae:	0b be       	out	0x3b, r0	; 59
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <__vector_6>:

ISR(INT5_vect)
{
     dba:	1f 92       	push	r1
     dbc:	0f 92       	push	r0
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	0f 92       	push	r0
     dc2:	11 24       	eor	r1, r1
     dc4:	0b b6       	in	r0, 0x3b	; 59
     dc6:	0f 92       	push	r0
     dc8:	7f 92       	push	r7
     dca:	8f 92       	push	r8
     dcc:	9f 92       	push	r9
     dce:	af 92       	push	r10
     dd0:	bf 92       	push	r11
     dd2:	cf 92       	push	r12
     dd4:	df 92       	push	r13
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	2f 93       	push	r18
     de0:	3f 93       	push	r19
     de2:	4f 93       	push	r20
     de4:	5f 93       	push	r21
     de6:	6f 93       	push	r22
     de8:	7f 93       	push	r23
     dea:	8f 93       	push	r24
     dec:	9f 93       	push	r25
     dee:	af 93       	push	r26
     df0:	bf 93       	push	r27
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	ef 93       	push	r30
     df8:	ff 93       	push	r31
	SendCommand01(0x0F, 0x01, 0x03);
     dfa:	43 e0       	ldi	r20, 0x03	; 3
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	8f e0       	ldi	r24, 0x0F	; 15
     e00:	08 db       	rcall	.-2544   	; 0x412 <SendCommand01>
     e02:	e3 ec       	ldi	r30, 0xC3	; 195
     e04:	f6 e0       	ldi	r31, 0x06	; 6
     e06:	43 e4       	ldi	r20, 0x43	; 67
     e08:	55 e0       	ldi	r21, 0x05	; 5
     e0a:	63 e4       	ldi	r22, 0x43	; 67
     e0c:	78 e0       	ldi	r23, 0x08	; 8
     e0e:	0b c0       	rjmp	.+22     	; 0xe26 <__vector_6+0x6c>
	for(int i = 0; i < 12; i++)
	{
		for(int j = 0; j< 32; j++)
		{
			game_board[i][j] = main_board[i][j];
     e10:	81 91       	ld	r24, Z+
     e12:	8d 93       	st	X+, r24
ISR(INT5_vect)
{
	SendCommand01(0x0F, 0x01, 0x03);
	for(int i = 0; i < 12; i++)
	{
		for(int j = 0; j< 32; j++)
     e14:	e2 17       	cp	r30, r18
     e16:	f3 07       	cpc	r31, r19
     e18:	d9 f7       	brne	.-10     	; 0xe10 <__vector_6+0x56>
     e1a:	40 5e       	subi	r20, 0xE0	; 224
     e1c:	5f 4f       	sbci	r21, 0xFF	; 255
     e1e:	f9 01       	movw	r30, r18
}

ISR(INT5_vect)
{
	SendCommand01(0x0F, 0x01, 0x03);
	for(int i = 0; i < 12; i++)
     e20:	62 17       	cp	r22, r18
     e22:	73 07       	cpc	r23, r19
     e24:	29 f0       	breq	.+10     	; 0xe30 <__vector_6+0x76>
     e26:	9f 01       	movw	r18, r30
     e28:	20 5e       	subi	r18, 0xE0	; 224
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	
}

ISR(INT5_vect)
{
     e2c:	da 01       	movw	r26, r20
     e2e:	f0 cf       	rjmp	.-32     	; 0xe10 <__vector_6+0x56>
		{
			game_board[i][j] = main_board[i][j];
		}
	}

	pattern++;	//회전으로 상태 변화
     e30:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <pattern>
     e34:	8f 5f       	subi	r24, 0xFF	; 255
	if(pattern == 4) pattern = 0; //마지막에서 처음으로
     e36:	84 30       	cpi	r24, 0x04	; 4
     e38:	09 f0       	breq	.+2      	; 0xe3c <__vector_6+0x82>
     e3a:	d4 c0       	rjmp	.+424    	; 0xfe4 <__vector_6+0x22a>
     e3c:	10 92 75 0c 	sts	0x0C75, r1	; 0x800c75 <pattern>
     e40:	d3 c0       	rjmp	.+422    	; 0xfe8 <__vector_6+0x22e>

	for(int i = 0; i < 12; i++)	//테트리미노스 라인 임시 저장소 초기화
	{
		for(int j = 0; j < 4; j++)
		{
			temp_line[i][j] = 0;
     e42:	10 82       	st	Z, r1
     e44:	11 82       	std	Z+1, r1	; 0x01
     e46:	12 82       	std	Z+2, r1	; 0x02
     e48:	13 82       	std	Z+3, r1	; 0x03
     e4a:	34 96       	adiw	r30, 0x04	; 4
	}

	pattern++;	//회전으로 상태 변화
	if(pattern == 4) pattern = 0; //마지막에서 처음으로

	for(int i = 0; i < 12; i++)	//테트리미노스 라인 임시 저장소 초기화
     e4c:	ec 15       	cp	r30, r12
     e4e:	fd 05       	cpc	r31, r13
     e50:	c1 f7       	brne	.-16     	; 0xe42 <__vector_6+0x88>
		}
	}

	for(int i = 0; i < 4; i++)	//이 과정이 필요 없고 뒤에서 한번에 충돌감지 이후 넣어줘도 상관없어 보이지만 충돌 여부 판별하는 함수가 temp_line와 메인보드가 겹치는지 파악하기때문에 temp_line에 변화된 사항을 반영해야 한다.
	{
		temp_line[cur_col-i][0] = tetriminos[shape][pattern][i];	//임시저장소에 테트리미노스 '왼쪽부터'(그래서 -i 로 역순이 된다) 지정된 칸에 넣기
     e52:	e0 90 76 0c 	lds	r14, 0x0C76	; 0x800c76 <shape>
     e56:	70 90 75 0c 	lds	r7, 0x0C75	; 0x800c75 <pattern>
     e5a:	f1 2c       	mov	r15, r1
     e5c:	ee 0c       	add	r14, r14
     e5e:	ff 1c       	adc	r15, r15
     e60:	ee 0c       	add	r14, r14
     e62:	ff 1c       	adc	r15, r15
     e64:	c7 01       	movw	r24, r14
     e66:	87 0d       	add	r24, r7
     e68:	91 1d       	adc	r25, r1
     e6a:	82 95       	swap	r24
     e6c:	92 95       	swap	r25
     e6e:	90 7f       	andi	r25, 0xF0	; 240
     e70:	98 27       	eor	r25, r24
     e72:	80 7f       	andi	r24, 0xF0	; 240
     e74:	98 27       	eor	r25, r24
     e76:	84 57       	subi	r24, 0x74	; 116
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	80 90 74 0c 	lds	r8, 0x0C74	; 0x800c74 <cur_col>
     e7e:	91 2c       	mov	r9, r1
     e80:	84 01       	movw	r16, r8
     e82:	00 0f       	add	r16, r16
     e84:	11 1f       	adc	r17, r17
     e86:	00 0f       	add	r16, r16
     e88:	11 1f       	adc	r17, r17
     e8a:	0d 5b       	subi	r16, 0xBD	; 189
     e8c:	17 4f       	sbci	r17, 0xF7	; 247
     e8e:	94 01       	movw	r18, r8
     e90:	22 0f       	add	r18, r18
     e92:	33 1f       	adc	r19, r19
     e94:	22 0f       	add	r18, r18
     e96:	33 1f       	adc	r19, r19
     e98:	a9 01       	movw	r20, r18
     e9a:	4d 5c       	subi	r20, 0xCD	; 205
     e9c:	57 4f       	sbci	r21, 0xF7	; 247
     e9e:	5a 01       	movw	r10, r20
     ea0:	d8 01       	movw	r26, r16
     ea2:	fc 01       	movw	r30, r24
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	25 91       	lpm	r18, Z+
     ea8:	2c 93       	st	X, r18
		temp_line[cur_col-i][1] = tetriminos[shape][pattern][i + 4];
     eaa:	9c 01       	movw	r18, r24
     eac:	2d 5f       	subi	r18, 0xFD	; 253
     eae:	3f 4f       	sbci	r19, 0xFF	; 255
     eb0:	f9 01       	movw	r30, r18
     eb2:	24 91       	lpm	r18, Z
     eb4:	11 96       	adiw	r26, 0x01	; 1
     eb6:	2c 93       	st	X, r18
     eb8:	11 97       	sbiw	r26, 0x01	; 1
		temp_line[cur_col-i][2] = tetriminos[shape][pattern][i + 8];
     eba:	9c 01       	movw	r18, r24
     ebc:	29 5f       	subi	r18, 0xF9	; 249
     ebe:	3f 4f       	sbci	r19, 0xFF	; 255
     ec0:	f9 01       	movw	r30, r18
     ec2:	24 91       	lpm	r18, Z
     ec4:	12 96       	adiw	r26, 0x02	; 2
     ec6:	2c 93       	st	X, r18
     ec8:	12 97       	sbiw	r26, 0x02	; 2
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
     eca:	9c 01       	movw	r18, r24
     ecc:	25 5f       	subi	r18, 0xF5	; 245
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	f9 01       	movw	r30, r18
     ed2:	24 91       	lpm	r18, Z
     ed4:	13 96       	adiw	r26, 0x03	; 3
     ed6:	2c 93       	st	X, r18
     ed8:	13 97       	sbiw	r26, 0x03	; 3
     eda:	14 97       	sbiw	r26, 0x04	; 4
		{
			temp_line[i][j] = 0;
		}
	}

	for(int i = 0; i < 4; i++)	//이 과정이 필요 없고 뒤에서 한번에 충돌감지 이후 넣어줘도 상관없어 보이지만 충돌 여부 판별하는 함수가 temp_line와 메인보드가 겹치는지 파악하기때문에 temp_line에 변화된 사항을 반영해야 한다.
     edc:	aa 15       	cp	r26, r10
     ede:	bb 05       	cpc	r27, r11
		temp_line[cur_col-i][1] = tetriminos[shape][pattern][i + 4];
		temp_line[cur_col-i][2] = tetriminos[shape][pattern][i + 8];
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
	}

	if(Collision() == 1) pattern--;
     ee0:	01 f7       	brne	.-64     	; 0xea2 <__vector_6+0xe8>
     ee2:	c4 dd       	rcall	.-1144   	; 0xa6c <Collision>
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	19 f4       	brne	.+6      	; 0xeee <__vector_6+0x134>
     ee8:	7a 94       	dec	r7
     eea:	70 92 75 0c 	sts	0x0C75, r7	; 0x800c75 <pattern>

	for(int i = 0; i < 12; i++)	//테트리미노스 라인 임시 저장소 초기화
	{
		for(int j = 0; j < 4; j++)
		{
			temp_line[i][j] = 0;
     eee:	18 82       	st	Y, r1
     ef0:	19 82       	std	Y+1, r1	; 0x01
     ef2:	1a 82       	std	Y+2, r1	; 0x02
     ef4:	1b 82       	std	Y+3, r1	; 0x03
     ef6:	24 96       	adiw	r28, 0x04	; 4
	}

	if(Collision() == 1) pattern--;


	for(int i = 0; i < 12; i++)	//테트리미노스 라인 임시 저장소 초기화
     ef8:	cc 15       	cp	r28, r12
     efa:	dd 05       	cpc	r29, r13
     efc:	c1 f7       	brne	.-16     	; 0xeee <__vector_6+0x134>
		}
	}

	for(int i = 0; i < 4; i++)
	{
		temp_line[cur_col-i][0] = tetriminos[shape][pattern][i];	//임시저장소에 테트리미노스 '왼쪽부터'(그래서 -i 로 역순이 된다) 지정된 칸에 넣기
     efe:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <pattern>
     f02:	97 01       	movw	r18, r14
     f04:	28 0f       	add	r18, r24
     f06:	31 1d       	adc	r19, r1
     f08:	c9 01       	movw	r24, r18
     f0a:	82 95       	swap	r24
     f0c:	92 95       	swap	r25
     f0e:	90 7f       	andi	r25, 0xF0	; 240
     f10:	98 27       	eor	r25, r24
     f12:	80 7f       	andi	r24, 0xF0	; 240
     f14:	98 27       	eor	r25, r24
     f16:	84 57       	subi	r24, 0x74	; 116
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	d8 01       	movw	r26, r16
     f1c:	fc 01       	movw	r30, r24
     f1e:	01 96       	adiw	r24, 0x01	; 1
     f20:	25 91       	lpm	r18, Z+
     f22:	2c 93       	st	X, r18
		temp_line[cur_col-i][1] = tetriminos[shape][pattern][i + 4];
     f24:	9c 01       	movw	r18, r24
     f26:	2d 5f       	subi	r18, 0xFD	; 253
     f28:	3f 4f       	sbci	r19, 0xFF	; 255
     f2a:	f9 01       	movw	r30, r18
     f2c:	24 91       	lpm	r18, Z
     f2e:	11 96       	adiw	r26, 0x01	; 1
     f30:	2c 93       	st	X, r18
     f32:	11 97       	sbiw	r26, 0x01	; 1
		temp_line[cur_col-i][2] = tetriminos[shape][pattern][i + 8];
     f34:	9c 01       	movw	r18, r24
     f36:	29 5f       	subi	r18, 0xF9	; 249
     f38:	3f 4f       	sbci	r19, 0xFF	; 255
     f3a:	f9 01       	movw	r30, r18
     f3c:	24 91       	lpm	r18, Z
     f3e:	12 96       	adiw	r26, 0x02	; 2
     f40:	2c 93       	st	X, r18
     f42:	12 97       	sbiw	r26, 0x02	; 2
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
     f44:	9c 01       	movw	r18, r24
     f46:	25 5f       	subi	r18, 0xF5	; 245
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	f9 01       	movw	r30, r18
     f4c:	24 91       	lpm	r18, Z
     f4e:	13 96       	adiw	r26, 0x03	; 3
     f50:	2c 93       	st	X, r18
     f52:	13 97       	sbiw	r26, 0x03	; 3
     f54:	14 97       	sbiw	r26, 0x04	; 4
		{
			temp_line[i][j] = 0;
		}
	}

	for(int i = 0; i < 4; i++)
     f56:	aa 15       	cp	r26, r10
     f58:	bb 05       	cpc	r27, r11
     f5a:	01 f7       	brne	.-64     	; 0xf1c <__vector_6+0x162>
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
	}

	for(int i = 0; i < 4; i++)	//현재라인 아래로 이동 후 변화하는 보드에 반영
	{
		game_board[cur_col-i][cur_line] |= temp_line[cur_col-i][0];
     f5c:	20 91 73 0c 	lds	r18, 0x0C73	; 0x800c73 <cur_line>
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	88 0c       	add	r8, r8
     f64:	99 1c       	adc	r9, r9
     f66:	88 0c       	add	r8, r8
     f68:	99 1c       	adc	r9, r9
     f6a:	88 0c       	add	r8, r8
     f6c:	99 1c       	adc	r9, r9
     f6e:	88 0c       	add	r8, r8
     f70:	99 1c       	adc	r9, r9
     f72:	88 0c       	add	r8, r8
     f74:	99 1c       	adc	r9, r9
     f76:	c9 01       	movw	r24, r18
     f78:	88 0d       	add	r24, r8
     f7a:	99 1d       	adc	r25, r9
     f7c:	8d 5b       	subi	r24, 0xBD	; 189
     f7e:	9a 4f       	sbci	r25, 0xFA	; 250
     f80:	e4 01       	movw	r28, r8
     f82:	c2 0f       	add	r28, r18
     f84:	d3 1f       	adc	r29, r19
     f86:	cc 5b       	subi	r28, 0xBC	; 188
     f88:	da 4f       	sbci	r29, 0xFA	; 250
     f8a:	d4 01       	movw	r26, r8
     f8c:	a2 0f       	add	r26, r18
     f8e:	b3 1f       	adc	r27, r19
     f90:	ab 5b       	subi	r26, 0xBB	; 187
     f92:	ba 4f       	sbci	r27, 0xFA	; 250
     f94:	f4 01       	movw	r30, r8
     f96:	e2 0f       	add	r30, r18
     f98:	f3 1f       	adc	r31, r19
     f9a:	af 01       	movw	r20, r30
     f9c:	4a 5b       	subi	r20, 0xBA	; 186
     f9e:	5a 4f       	sbci	r21, 0xFA	; 250
     fa0:	fc 01       	movw	r30, r24
     fa2:	30 81       	ld	r19, Z
     fa4:	f8 01       	movw	r30, r16
     fa6:	20 81       	ld	r18, Z
     fa8:	23 2b       	or	r18, r19
     faa:	fc 01       	movw	r30, r24
     fac:	20 83       	st	Z, r18
		game_board[cur_col-i][cur_line + 1] |= temp_line[cur_col-i][1];
     fae:	38 81       	ld	r19, Y
     fb0:	f8 01       	movw	r30, r16
     fb2:	21 81       	ldd	r18, Z+1	; 0x01
     fb4:	23 2b       	or	r18, r19
     fb6:	28 83       	st	Y, r18
		game_board[cur_col-i][cur_line + 2] |= temp_line[cur_col-i][2];
     fb8:	3c 91       	ld	r19, X
     fba:	22 81       	ldd	r18, Z+2	; 0x02
     fbc:	23 2b       	or	r18, r19
     fbe:	2c 93       	st	X, r18
		game_board[cur_col-i][cur_line + 3] |= temp_line[cur_col-i][3];
     fc0:	fa 01       	movw	r30, r20
     fc2:	30 81       	ld	r19, Z
     fc4:	f8 01       	movw	r30, r16
     fc6:	23 81       	ldd	r18, Z+3	; 0x03
     fc8:	23 2b       	or	r18, r19
     fca:	fa 01       	movw	r30, r20
     fcc:	20 83       	st	Z, r18
     fce:	80 97       	sbiw	r24, 0x20	; 32
     fd0:	04 50       	subi	r16, 0x04	; 4
     fd2:	11 09       	sbc	r17, r1
     fd4:	a0 97       	sbiw	r28, 0x20	; 32
     fd6:	90 97       	sbiw	r26, 0x20	; 32
     fd8:	40 52       	subi	r20, 0x20	; 32
     fda:	51 09       	sbc	r21, r1
		temp_line[cur_col-i][1] = tetriminos[shape][pattern][i + 4];
		temp_line[cur_col-i][2] = tetriminos[shape][pattern][i + 8];
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
	}

	for(int i = 0; i < 4; i++)	//현재라인 아래로 이동 후 변화하는 보드에 반영
     fdc:	0a 15       	cp	r16, r10
     fde:	1b 05       	cpc	r17, r11
     fe0:	f9 f6       	brne	.-66     	; 0xfa0 <__vector_6+0x1e6>
     fe2:	0c c0       	rjmp	.+24     	; 0xffc <__vector_6+0x242>
		{
			game_board[i][j] = main_board[i][j];
		}
	}

	pattern++;	//회전으로 상태 변화
     fe4:	80 93 75 0c 	sts	0x0C75, r24	; 0x800c75 <pattern>
     fe8:	c3 e4       	ldi	r28, 0x43	; 67
     fea:	d8 e0       	ldi	r29, 0x08	; 8
     fec:	0f 2e       	mov	r0, r31
     fee:	f3 e7       	ldi	r31, 0x73	; 115
     ff0:	cf 2e       	mov	r12, r31
     ff2:	f8 e0       	ldi	r31, 0x08	; 8
     ff4:	df 2e       	mov	r13, r31
     ff6:	f0 2d       	mov	r31, r0
	}
	
}

ISR(INT5_vect)
{
     ff8:	fe 01       	movw	r30, r28
     ffa:	23 cf       	rjmp	.-442    	; 0xe42 <__vector_6+0x88>
		game_board[cur_col-i][cur_line] |= temp_line[cur_col-i][0];
		game_board[cur_col-i][cur_line + 1] |= temp_line[cur_col-i][1];
		game_board[cur_col-i][cur_line + 2] |= temp_line[cur_col-i][2];
		game_board[cur_col-i][cur_line + 3] |= temp_line[cur_col-i][3];
	}
}
     ffc:	ff 91       	pop	r31
     ffe:	ef 91       	pop	r30
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	df 90       	pop	r13
    1022:	cf 90       	pop	r12
    1024:	bf 90       	pop	r11
    1026:	af 90       	pop	r10
    1028:	9f 90       	pop	r9
    102a:	8f 90       	pop	r8
    102c:	7f 90       	pop	r7
    102e:	0f 90       	pop	r0
    1030:	0b be       	out	0x3b, r0	; 59
    1032:	0f 90       	pop	r0
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	0f 90       	pop	r0
    1038:	1f 90       	pop	r1
    103a:	18 95       	reti

0000103c <__vector_7>:

ISR(INT6_vect)
{
    103c:	1f 92       	push	r1
    103e:	0f 92       	push	r0
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	0f 92       	push	r0
    1044:	11 24       	eor	r1, r1
    1046:	0b b6       	in	r0, 0x3b	; 59
    1048:	0f 92       	push	r0
    104a:	2f 93       	push	r18
    104c:	3f 93       	push	r19
    104e:	4f 93       	push	r20
    1050:	5f 93       	push	r21
    1052:	6f 93       	push	r22
    1054:	7f 93       	push	r23
    1056:	8f 93       	push	r24
    1058:	9f 93       	push	r25
    105a:	af 93       	push	r26
    105c:	bf 93       	push	r27
    105e:	ef 93       	push	r30
    1060:	ff 93       	push	r31
	SendCommand01(0x0F, 0x01, 0x03);
    1062:	43 e0       	ldi	r20, 0x03	; 3
    1064:	61 e0       	ldi	r22, 0x01	; 1
    1066:	8f e0       	ldi	r24, 0x0F	; 15
    1068:	d4 d9       	rcall	.-3160   	; 0x412 <SendCommand01>
    106a:	e3 e4       	ldi	r30, 0x43	; 67
    106c:	f8 e0       	ldi	r31, 0x08	; 8
    106e:	83 e7       	ldi	r24, 0x73	; 115
    1070:	98 e0       	ldi	r25, 0x08	; 8
	for(int i = 0; i < 12; i++)	//테트리미노스 라인 임시 저장소 초기화
	{
		for(int j = 0; j < 4; j++)
		{
			temp_line[i][j] = 0;
    1072:	10 82       	st	Z, r1
    1074:	11 82       	std	Z+1, r1	; 0x01
    1076:	12 82       	std	Z+2, r1	; 0x02
    1078:	13 82       	std	Z+3, r1	; 0x03
    107a:	34 96       	adiw	r30, 0x04	; 4
}

ISR(INT6_vect)
{
	SendCommand01(0x0F, 0x01, 0x03);
	for(int i = 0; i < 12; i++)	//테트리미노스 라인 임시 저장소 초기화
    107c:	e8 17       	cp	r30, r24
    107e:	f9 07       	cpc	r31, r25
    1080:	c1 f7       	brne	.-16     	; 0x1072 <__vector_7+0x36>
		}
	}

	for(int i = 0; i < 4; i++)	//이 과정이 필요 없고 뒤에서 한번에 충돌감지 이후 넣어줘도 상관없어 보이지만 충돌 여부 판별하는 함수가 temp_line와 메인보드가 겹치는지 파악하기때문에 temp_line에 변화된 사항을 반영해야 한다.
	{
		temp_line[cur_col-i][0] = tetriminos[shape][pattern][i];	//임시저장소에 테트리미노스 '왼쪽부터'(그래서 -i 로 역순이 된다) 지정된 칸에 넣기
    1082:	20 91 76 0c 	lds	r18, 0x0C76	; 0x800c76 <shape>
    1086:	80 91 75 0c 	lds	r24, 0x0C75	; 0x800c75 <pattern>
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	34 e0       	ldi	r19, 0x04	; 4
    108e:	23 9f       	mul	r18, r19
    1090:	80 0d       	add	r24, r0
    1092:	91 1d       	adc	r25, r1
    1094:	11 24       	eor	r1, r1
    1096:	82 95       	swap	r24
    1098:	92 95       	swap	r25
    109a:	90 7f       	andi	r25, 0xF0	; 240
    109c:	98 27       	eor	r25, r24
    109e:	80 7f       	andi	r24, 0xF0	; 240
    10a0:	98 27       	eor	r25, r24
    10a2:	84 57       	subi	r24, 0x74	; 116
    10a4:	9f 4f       	sbci	r25, 0xFF	; 255
    10a6:	20 91 74 0c 	lds	r18, 0x0C74	; 0x800c74 <cur_col>
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	f9 01       	movw	r30, r18
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	ee 0f       	add	r30, r30
    10b4:	ff 1f       	adc	r31, r31
    10b6:	df 01       	movw	r26, r30
    10b8:	ad 5b       	subi	r26, 0xBD	; 189
    10ba:	b7 4f       	sbci	r27, 0xF7	; 247
    10bc:	9f 01       	movw	r18, r30
    10be:	2d 5c       	subi	r18, 0xCD	; 205
    10c0:	37 4f       	sbci	r19, 0xF7	; 247
    10c2:	fc 01       	movw	r30, r24
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	45 91       	lpm	r20, Z+
    10c8:	4c 93       	st	X, r20
		temp_line[cur_col-i][1] = tetriminos[shape][pattern][i + 4];
    10ca:	ac 01       	movw	r20, r24
    10cc:	4d 5f       	subi	r20, 0xFD	; 253
    10ce:	5f 4f       	sbci	r21, 0xFF	; 255
    10d0:	fa 01       	movw	r30, r20
    10d2:	44 91       	lpm	r20, Z
    10d4:	11 96       	adiw	r26, 0x01	; 1
    10d6:	4c 93       	st	X, r20
    10d8:	11 97       	sbiw	r26, 0x01	; 1
		temp_line[cur_col-i][2] = tetriminos[shape][pattern][i + 8];
    10da:	ac 01       	movw	r20, r24
    10dc:	49 5f       	subi	r20, 0xF9	; 249
    10de:	5f 4f       	sbci	r21, 0xFF	; 255
    10e0:	fa 01       	movw	r30, r20
    10e2:	44 91       	lpm	r20, Z
    10e4:	12 96       	adiw	r26, 0x02	; 2
    10e6:	4c 93       	st	X, r20
    10e8:	12 97       	sbiw	r26, 0x02	; 2
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
    10ea:	ac 01       	movw	r20, r24
    10ec:	45 5f       	subi	r20, 0xF5	; 245
    10ee:	5f 4f       	sbci	r21, 0xFF	; 255
    10f0:	fa 01       	movw	r30, r20
    10f2:	44 91       	lpm	r20, Z
    10f4:	13 96       	adiw	r26, 0x03	; 3
    10f6:	4c 93       	st	X, r20
    10f8:	13 97       	sbiw	r26, 0x03	; 3
    10fa:	14 97       	sbiw	r26, 0x04	; 4
		{
			temp_line[i][j] = 0;
		}
	}

	for(int i = 0; i < 4; i++)	//이 과정이 필요 없고 뒤에서 한번에 충돌감지 이후 넣어줘도 상관없어 보이지만 충돌 여부 판별하는 함수가 temp_line와 메인보드가 겹치는지 파악하기때문에 temp_line에 변화된 사항을 반영해야 한다.
    10fc:	a2 17       	cp	r26, r18
    10fe:	b3 07       	cpc	r27, r19
    1100:	01 f7       	brne	.-64     	; 0x10c2 <__vector_7+0x86>
    1102:	05 c0       	rjmp	.+10     	; 0x110e <__stack+0xf>
		temp_line[cur_col-i][1] = tetriminos[shape][pattern][i + 4];
		temp_line[cur_col-i][2] = tetriminos[shape][pattern][i + 8];
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
	}

	while(Collision() == 0) cur_line++;
    1104:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <cur_line>
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	80 93 73 0c 	sts	0x0C73, r24	; 0x800c73 <cur_line>
    110e:	ae dc       	rcall	.-1700   	; 0xa6c <Collision>
    1110:	88 23       	and	r24, r24
    1112:	c1 f3       	breq	.-16     	; 0x1104 <__stack+0x5>

	cur_line--;
    1114:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <cur_line>
    1118:	81 50       	subi	r24, 0x01	; 1
    111a:	80 93 73 0c 	sts	0x0C73, r24	; 0x800c73 <cur_line>
}
    111e:	ff 91       	pop	r31
    1120:	ef 91       	pop	r30
    1122:	bf 91       	pop	r27
    1124:	af 91       	pop	r26
    1126:	9f 91       	pop	r25
    1128:	8f 91       	pop	r24
    112a:	7f 91       	pop	r23
    112c:	6f 91       	pop	r22
    112e:	5f 91       	pop	r21
    1130:	4f 91       	pop	r20
    1132:	3f 91       	pop	r19
    1134:	2f 91       	pop	r18
    1136:	0f 90       	pop	r0
    1138:	0b be       	out	0x3b, r0	; 59
    113a:	0f 90       	pop	r0
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	0f 90       	pop	r0
    1140:	1f 90       	pop	r1
    1142:	18 95       	reti

00001144 <__vector_8>:

ISR(INT7_vect)
{	
    1144:	1f 92       	push	r1
    1146:	0f 92       	push	r0
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	0f 92       	push	r0
    114c:	11 24       	eor	r1, r1
    114e:	0b b6       	in	r0, 0x3b	; 59
    1150:	0f 92       	push	r0
    1152:	df 92       	push	r13
    1154:	ef 92       	push	r14
    1156:	ff 92       	push	r15
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	2f 93       	push	r18
    115e:	3f 93       	push	r19
    1160:	4f 93       	push	r20
    1162:	5f 93       	push	r21
    1164:	6f 93       	push	r22
    1166:	7f 93       	push	r23
    1168:	8f 93       	push	r24
    116a:	9f 93       	push	r25
    116c:	af 93       	push	r26
    116e:	bf 93       	push	r27
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	ef 93       	push	r30
    1176:	ff 93       	push	r31
	SendCommand01(0x0F, 0x01, 0x03);
    1178:	43 e0       	ldi	r20, 0x03	; 3
    117a:	61 e0       	ldi	r22, 0x01	; 1
    117c:	8f e0       	ldi	r24, 0x0F	; 15
    117e:	49 d9       	rcall	.-3438   	; 0x412 <SendCommand01>
    1180:	e3 ec       	ldi	r30, 0xC3	; 195
    1182:	f6 e0       	ldi	r31, 0x06	; 6
    1184:	43 e4       	ldi	r20, 0x43	; 67
    1186:	55 e0       	ldi	r21, 0x05	; 5
    1188:	63 e4       	ldi	r22, 0x43	; 67
    118a:	78 e0       	ldi	r23, 0x08	; 8
    118c:	0b c0       	rjmp	.+22     	; 0x11a4 <__vector_8+0x60>
	for(int i = 0; i < 12; i++)
	{
		for(int j = 0; j< 32; j++)
		{
			game_board[i][j] = main_board[i][j];
    118e:	81 91       	ld	r24, Z+
    1190:	8d 93       	st	X+, r24
ISR(INT7_vect)
{	
	SendCommand01(0x0F, 0x01, 0x03);
	for(int i = 0; i < 12; i++)
	{
		for(int j = 0; j< 32; j++)
    1192:	e2 17       	cp	r30, r18
    1194:	f3 07       	cpc	r31, r19
    1196:	d9 f7       	brne	.-10     	; 0x118e <__vector_8+0x4a>
    1198:	40 5e       	subi	r20, 0xE0	; 224
    119a:	5f 4f       	sbci	r21, 0xFF	; 255
    119c:	f9 01       	movw	r30, r18
}

ISR(INT7_vect)
{	
	SendCommand01(0x0F, 0x01, 0x03);
	for(int i = 0; i < 12; i++)
    119e:	62 17       	cp	r22, r18
    11a0:	73 07       	cpc	r23, r19
    11a2:	29 f0       	breq	.+10     	; 0x11ae <__vector_8+0x6a>
    11a4:	9f 01       	movw	r18, r30
    11a6:	20 5e       	subi	r18, 0xE0	; 224
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255

	cur_line--;
}

ISR(INT7_vect)
{	
    11aa:	da 01       	movw	r26, r20
    11ac:	f0 cf       	rjmp	.-32     	; 0x118e <__vector_8+0x4a>
		{
			game_board[i][j] = main_board[i][j];
		}
	}

	if(cur_col < 11) cur_col++;
    11ae:	80 91 74 0c 	lds	r24, 0x0C74	; 0x800c74 <cur_col>
    11b2:	8b 30       	cpi	r24, 0x0B	; 11
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <__vector_8+0x74>
    11b6:	cf c0       	rjmp	.+414    	; 0x1356 <__vector_8+0x212>
    11b8:	8f 5f       	subi	r24, 0xFF	; 255
    11ba:	80 93 74 0c 	sts	0x0C74, r24	; 0x800c74 <cur_col>
    11be:	cb c0       	rjmp	.+406    	; 0x1356 <__vector_8+0x212>

	for(int i = 0; i < 12; i++)	//테트리미노스 라인 임시 저장소 초기화
	{
		for(int j = 0; j < 4; j++)
		{
			temp_line[i][j] = 0;
    11c0:	10 82       	st	Z, r1
    11c2:	11 82       	std	Z+1, r1	; 0x01
    11c4:	12 82       	std	Z+2, r1	; 0x02
    11c6:	13 82       	std	Z+3, r1	; 0x03
    11c8:	34 96       	adiw	r30, 0x04	; 4
		}
	}

	if(cur_col < 11) cur_col++;

	for(int i = 0; i < 12; i++)	//테트리미노스 라인 임시 저장소 초기화
    11ca:	ee 15       	cp	r30, r14
    11cc:	ff 05       	cpc	r31, r15
    11ce:	c1 f7       	brne	.-16     	; 0x11c0 <__vector_8+0x7c>
		}
	}

	for(int i = 0; i < 4; i++)	//이 과정이 필요 없고 뒤에서 한번에 충돌감지 이후 넣어줘도 상관없어 보이지만 충돌 여부 판별하는 함수가 temp_line와 메인보드가 겹치는지 파악하기때문에 temp_line에 변화된 사항을 반영해야 한다.
	{
		temp_line[cur_col-i][0] = tetriminos[shape][pattern][i];	//임시저장소에 테트리미노스 '왼쪽부터'(그래서 -i 로 역순이 된다) 지정된 칸에 넣기
    11d0:	d0 90 74 0c 	lds	r13, 0x0C74	; 0x800c74 <cur_col>
    11d4:	80 91 76 0c 	lds	r24, 0x0C76	; 0x800c76 <shape>
    11d8:	00 91 75 0c 	lds	r16, 0x0C75	; 0x800c75 <pattern>
    11dc:	10 e0       	ldi	r17, 0x00	; 0
    11de:	24 e0       	ldi	r18, 0x04	; 4
    11e0:	82 9f       	mul	r24, r18
    11e2:	00 0d       	add	r16, r0
    11e4:	11 1d       	adc	r17, r1
    11e6:	11 24       	eor	r1, r1
    11e8:	02 95       	swap	r16
    11ea:	12 95       	swap	r17
    11ec:	10 7f       	andi	r17, 0xF0	; 240
    11ee:	10 27       	eor	r17, r16
    11f0:	00 7f       	andi	r16, 0xF0	; 240
    11f2:	10 27       	eor	r17, r16
    11f4:	04 57       	subi	r16, 0x74	; 116
    11f6:	1f 4f       	sbci	r17, 0xFF	; 255
    11f8:	2d 2d       	mov	r18, r13
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	f9 01       	movw	r30, r18
    11fe:	ee 0f       	add	r30, r30
    1200:	ff 1f       	adc	r31, r31
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	df 01       	movw	r26, r30
    1208:	ad 5b       	subi	r26, 0xBD	; 189
    120a:	b7 4f       	sbci	r27, 0xF7	; 247
    120c:	9f 01       	movw	r18, r30
    120e:	2d 5c       	subi	r18, 0xCD	; 205
    1210:	37 4f       	sbci	r19, 0xF7	; 247
    1212:	c8 01       	movw	r24, r16
    1214:	fc 01       	movw	r30, r24
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	45 91       	lpm	r20, Z+
    121a:	4c 93       	st	X, r20
		temp_line[cur_col-i][1] = tetriminos[shape][pattern][i + 4];
    121c:	ac 01       	movw	r20, r24
    121e:	4d 5f       	subi	r20, 0xFD	; 253
    1220:	5f 4f       	sbci	r21, 0xFF	; 255
    1222:	fa 01       	movw	r30, r20
    1224:	44 91       	lpm	r20, Z
    1226:	11 96       	adiw	r26, 0x01	; 1
    1228:	4c 93       	st	X, r20
    122a:	11 97       	sbiw	r26, 0x01	; 1
		temp_line[cur_col-i][2] = tetriminos[shape][pattern][i + 8];
    122c:	ac 01       	movw	r20, r24
    122e:	49 5f       	subi	r20, 0xF9	; 249
    1230:	5f 4f       	sbci	r21, 0xFF	; 255
    1232:	fa 01       	movw	r30, r20
    1234:	44 91       	lpm	r20, Z
    1236:	12 96       	adiw	r26, 0x02	; 2
    1238:	4c 93       	st	X, r20
    123a:	12 97       	sbiw	r26, 0x02	; 2
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
    123c:	ac 01       	movw	r20, r24
    123e:	45 5f       	subi	r20, 0xF5	; 245
    1240:	5f 4f       	sbci	r21, 0xFF	; 255
    1242:	fa 01       	movw	r30, r20
    1244:	44 91       	lpm	r20, Z
    1246:	13 96       	adiw	r26, 0x03	; 3
    1248:	4c 93       	st	X, r20
    124a:	13 97       	sbiw	r26, 0x03	; 3
    124c:	14 97       	sbiw	r26, 0x04	; 4
		{
			temp_line[i][j] = 0;
		}
	}

	for(int i = 0; i < 4; i++)	//이 과정이 필요 없고 뒤에서 한번에 충돌감지 이후 넣어줘도 상관없어 보이지만 충돌 여부 판별하는 함수가 temp_line와 메인보드가 겹치는지 파악하기때문에 temp_line에 변화된 사항을 반영해야 한다.
    124e:	a2 17       	cp	r26, r18
    1250:	b3 07       	cpc	r27, r19
		temp_line[cur_col-i][1] = tetriminos[shape][pattern][i + 4];
		temp_line[cur_col-i][2] = tetriminos[shape][pattern][i + 8];
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
	}

	if(Collision() == 1) cur_col--;
    1252:	01 f7       	brne	.-64     	; 0x1214 <__vector_8+0xd0>
    1254:	0b dc       	rcall	.-2026   	; 0xa6c <Collision>
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	19 f4       	brne	.+6      	; 0x1260 <__vector_8+0x11c>
    125a:	da 94       	dec	r13
    125c:	d0 92 74 0c 	sts	0x0C74, r13	; 0x800c74 <cur_col>
	
	for(int i = 0; i < 12; i++)	//테트리미노스 라인 임시 저장소 초기화
	{
		for(int j = 0; j < 4; j++)
		{
			temp_line[i][j] = 0;
    1260:	18 82       	st	Y, r1
    1262:	19 82       	std	Y+1, r1	; 0x01
    1264:	1a 82       	std	Y+2, r1	; 0x02
    1266:	1b 82       	std	Y+3, r1	; 0x03
    1268:	24 96       	adiw	r28, 0x04	; 4
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
	}

	if(Collision() == 1) cur_col--;
	
	for(int i = 0; i < 12; i++)	//테트리미노스 라인 임시 저장소 초기화
    126a:	ce 15       	cp	r28, r14
    126c:	df 05       	cpc	r29, r15
    126e:	c1 f7       	brne	.-16     	; 0x1260 <__vector_8+0x11c>
    1270:	80 91 74 0c 	lds	r24, 0x0C74	; 0x800c74 <cur_col>
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	fc 01       	movw	r30, r24
    1278:	ee 0f       	add	r30, r30
    127a:	ff 1f       	adc	r31, r31
    127c:	ee 0f       	add	r30, r30
    127e:	ff 1f       	adc	r31, r31
    1280:	9f 01       	movw	r18, r30
    1282:	2d 5b       	subi	r18, 0xBD	; 189
    1284:	37 4f       	sbci	r19, 0xF7	; 247
    1286:	79 01       	movw	r14, r18
    1288:	bf 01       	movw	r22, r30
    128a:	6d 5c       	subi	r22, 0xCD	; 205
    128c:	77 4f       	sbci	r23, 0xF7	; 247
		}
	}

	for(int i = 0; i < 4; i++)
	{
		temp_line[cur_col-i][0] = tetriminos[shape][pattern][i];	//임시저장소에 테트리미노스 '왼쪽부터'(그래서 -i 로 역순이 된다) 지정된 칸에 넣기
    128e:	d9 01       	movw	r26, r18
    1290:	f8 01       	movw	r30, r16
    1292:	0f 5f       	subi	r16, 0xFF	; 255
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
    1296:	25 91       	lpm	r18, Z+
    1298:	2c 93       	st	X, r18
		temp_line[cur_col-i][1] = tetriminos[shape][pattern][i + 4];
    129a:	98 01       	movw	r18, r16
    129c:	2d 5f       	subi	r18, 0xFD	; 253
    129e:	3f 4f       	sbci	r19, 0xFF	; 255
    12a0:	f9 01       	movw	r30, r18
    12a2:	24 91       	lpm	r18, Z
    12a4:	11 96       	adiw	r26, 0x01	; 1
    12a6:	2c 93       	st	X, r18
    12a8:	11 97       	sbiw	r26, 0x01	; 1
		temp_line[cur_col-i][2] = tetriminos[shape][pattern][i + 8];
    12aa:	98 01       	movw	r18, r16
    12ac:	29 5f       	subi	r18, 0xF9	; 249
    12ae:	3f 4f       	sbci	r19, 0xFF	; 255
    12b0:	f9 01       	movw	r30, r18
    12b2:	24 91       	lpm	r18, Z
    12b4:	12 96       	adiw	r26, 0x02	; 2
    12b6:	2c 93       	st	X, r18
    12b8:	12 97       	sbiw	r26, 0x02	; 2
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
    12ba:	98 01       	movw	r18, r16
    12bc:	25 5f       	subi	r18, 0xF5	; 245
    12be:	3f 4f       	sbci	r19, 0xFF	; 255
    12c0:	f9 01       	movw	r30, r18
    12c2:	24 91       	lpm	r18, Z
    12c4:	13 96       	adiw	r26, 0x03	; 3
    12c6:	2c 93       	st	X, r18
    12c8:	13 97       	sbiw	r26, 0x03	; 3
    12ca:	14 97       	sbiw	r26, 0x04	; 4
		{
			temp_line[i][j] = 0;
		}
	}

	for(int i = 0; i < 4; i++)
    12cc:	a6 17       	cp	r26, r22
    12ce:	b7 07       	cpc	r27, r23
    12d0:	f9 f6       	brne	.-66     	; 0x1290 <__vector_8+0x14c>
	}

	
	for(int i = 0; i < 4; i++)	//현재라인 아래로 이동 후 변화하는 보드에 반영
	{
		game_board[cur_col-i][cur_line] |= temp_line[cur_col-i][0];
    12d2:	40 91 73 0c 	lds	r20, 0x0C73	; 0x800c73 <cur_line>
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	dc 01       	movw	r26, r24
    12da:	aa 0f       	add	r26, r26
    12dc:	bb 1f       	adc	r27, r27
    12de:	a2 95       	swap	r26
    12e0:	b2 95       	swap	r27
    12e2:	b0 7f       	andi	r27, 0xF0	; 240
    12e4:	ba 27       	eor	r27, r26
    12e6:	a0 7f       	andi	r26, 0xF0	; 240
    12e8:	ba 27       	eor	r27, r26
    12ea:	9a 01       	movw	r18, r20
    12ec:	2a 0f       	add	r18, r26
    12ee:	3b 1f       	adc	r19, r27
    12f0:	2d 5b       	subi	r18, 0xBD	; 189
    12f2:	3a 4f       	sbci	r19, 0xFA	; 250
    12f4:	cd 01       	movw	r24, r26
    12f6:	84 0f       	add	r24, r20
    12f8:	95 1f       	adc	r25, r21
    12fa:	8c 5b       	subi	r24, 0xBC	; 188
    12fc:	9a 4f       	sbci	r25, 0xFA	; 250
    12fe:	ed 01       	movw	r28, r26
    1300:	c4 0f       	add	r28, r20
    1302:	d5 1f       	adc	r29, r21
    1304:	cb 5b       	subi	r28, 0xBB	; 187
    1306:	da 4f       	sbci	r29, 0xFA	; 250
    1308:	a4 0f       	add	r26, r20
    130a:	b5 1f       	adc	r27, r21
    130c:	aa 5b       	subi	r26, 0xBA	; 186
    130e:	ba 4f       	sbci	r27, 0xFA	; 250
    1310:	f9 01       	movw	r30, r18
    1312:	50 81       	ld	r21, Z
    1314:	f7 01       	movw	r30, r14
    1316:	40 81       	ld	r20, Z
    1318:	45 2b       	or	r20, r21
    131a:	f9 01       	movw	r30, r18
    131c:	40 83       	st	Z, r20
		game_board[cur_col-i][cur_line + 1] |= temp_line[cur_col-i][1];
    131e:	fc 01       	movw	r30, r24
    1320:	50 81       	ld	r21, Z
    1322:	f7 01       	movw	r30, r14
    1324:	41 81       	ldd	r20, Z+1	; 0x01
    1326:	45 2b       	or	r20, r21
    1328:	fc 01       	movw	r30, r24
    132a:	40 83       	st	Z, r20
		game_board[cur_col-i][cur_line + 2] |= temp_line[cur_col-i][2];
    132c:	58 81       	ld	r21, Y
    132e:	f7 01       	movw	r30, r14
    1330:	42 81       	ldd	r20, Z+2	; 0x02
    1332:	45 2b       	or	r20, r21
    1334:	48 83       	st	Y, r20
		game_board[cur_col-i][cur_line + 3] |= temp_line[cur_col-i][3];
    1336:	5c 91       	ld	r21, X
    1338:	43 81       	ldd	r20, Z+3	; 0x03
    133a:	45 2b       	or	r20, r21
    133c:	4c 93       	st	X, r20
    133e:	20 52       	subi	r18, 0x20	; 32
    1340:	31 09       	sbc	r19, r1
    1342:	f4 e0       	ldi	r31, 0x04	; 4
    1344:	ef 1a       	sub	r14, r31
    1346:	f1 08       	sbc	r15, r1
    1348:	80 97       	sbiw	r24, 0x20	; 32
    134a:	a0 97       	sbiw	r28, 0x20	; 32
    134c:	90 97       	sbiw	r26, 0x20	; 32
		temp_line[cur_col-i][2] = tetriminos[shape][pattern][i + 8];
		temp_line[cur_col-i][3] = tetriminos[shape][pattern][i + 12];
	}

	
	for(int i = 0; i < 4; i++)	//현재라인 아래로 이동 후 변화하는 보드에 반영
    134e:	e6 16       	cp	r14, r22
    1350:	f7 06       	cpc	r15, r23
    1352:	f1 f6       	brne	.-68     	; 0x1310 <__vector_8+0x1cc>
    1354:	0a c0       	rjmp	.+20     	; 0x136a <__vector_8+0x226>
    1356:	c3 e4       	ldi	r28, 0x43	; 67
    1358:	d8 e0       	ldi	r29, 0x08	; 8
    135a:	0f 2e       	mov	r0, r31
    135c:	f3 e7       	ldi	r31, 0x73	; 115
    135e:	ef 2e       	mov	r14, r31
    1360:	f8 e0       	ldi	r31, 0x08	; 8
    1362:	ff 2e       	mov	r15, r31
    1364:	f0 2d       	mov	r31, r0

	cur_line--;
}

ISR(INT7_vect)
{	
    1366:	fe 01       	movw	r30, r28
    1368:	2b cf       	rjmp	.-426    	; 0x11c0 <__vector_8+0x7c>
		game_board[cur_col-i][cur_line] |= temp_line[cur_col-i][0];
		game_board[cur_col-i][cur_line + 1] |= temp_line[cur_col-i][1];
		game_board[cur_col-i][cur_line + 2] |= temp_line[cur_col-i][2];
		game_board[cur_col-i][cur_line + 3] |= temp_line[cur_col-i][3];
	}
}
    136a:	ff 91       	pop	r31
    136c:	ef 91       	pop	r30
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	bf 91       	pop	r27
    1374:	af 91       	pop	r26
    1376:	9f 91       	pop	r25
    1378:	8f 91       	pop	r24
    137a:	7f 91       	pop	r23
    137c:	6f 91       	pop	r22
    137e:	5f 91       	pop	r21
    1380:	4f 91       	pop	r20
    1382:	3f 91       	pop	r19
    1384:	2f 91       	pop	r18
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	df 90       	pop	r13
    1390:	0f 90       	pop	r0
    1392:	0b be       	out	0x3b, r0	; 59
    1394:	0f 90       	pop	r0
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	0f 90       	pop	r0
    139a:	1f 90       	pop	r1
    139c:	18 95       	reti

0000139e <__vector_12>:
	
}


ISR(TIMER1_COMPA_vect)	//OCR1A값에 따라 블록 이동속도가 결정된다.
{
    139e:	1f 92       	push	r1
    13a0:	0f 92       	push	r0
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	0f 92       	push	r0
    13a6:	11 24       	eor	r1, r1
    13a8:	0b b6       	in	r0, 0x3b	; 59
    13aa:	0f 92       	push	r0
    13ac:	df 92       	push	r13
    13ae:	ef 92       	push	r14
    13b0:	ff 92       	push	r15
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	2f 93       	push	r18
    13b8:	3f 93       	push	r19
    13ba:	4f 93       	push	r20
    13bc:	5f 93       	push	r21
    13be:	6f 93       	push	r22
    13c0:	7f 93       	push	r23
    13c2:	8f 93       	push	r24
    13c4:	9f 93       	push	r25
    13c6:	af 93       	push	r26
    13c8:	bf 93       	push	r27
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	ef 93       	push	r30
    13d0:	ff 93       	push	r31
	if(new_block == 0)
    13d2:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <new_block>
    13d6:	81 11       	cpse	r24, r1
    13d8:	c2 c0       	rjmp	.+388    	; 0x155e <__vector_12+0x1c0>
    13da:	c3 ec       	ldi	r28, 0xC3	; 195
    13dc:	d6 e0       	ldi	r29, 0x06	; 6
    13de:	03 e4       	ldi	r16, 0x43	; 67
    13e0:	15 e0       	ldi	r17, 0x05	; 5
    13e2:	0f 2e       	mov	r0, r31
    13e4:	f3 e4       	ldi	r31, 0x43	; 67
    13e6:	ef 2e       	mov	r14, r31
    13e8:	f8 e0       	ldi	r31, 0x08	; 8
    13ea:	ff 2e       	mov	r15, r31
    13ec:	f0 2d       	mov	r31, r0
    13ee:	a8 01       	movw	r20, r16
    13f0:	fe 01       	movw	r30, r28
    13f2:	0b c0       	rjmp	.+22     	; 0x140a <__vector_12+0x6c>
	{
		for(int i = 0; i < 12; i++)
		{
			for(int j = 0; j< 32; j++)
			{
				game_board[i][j] = main_board[i][j];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    13f4:	81 91       	ld	r24, Z+
    13f6:	8d 93       	st	X+, r24
{
	if(new_block == 0)
	{
		for(int i = 0; i < 12; i++)
		{
			for(int j = 0; j< 32; j++)
    13f8:	e2 17       	cp	r30, r18
    13fa:	f3 07       	cpc	r31, r19
    13fc:	d9 f7       	brne	.-10     	; 0x13f4 <__vector_12+0x56>
    13fe:	40 5e       	subi	r20, 0xE0	; 224
    1400:	5f 4f       	sbci	r21, 0xFF	; 255
    1402:	f9 01       	movw	r30, r18

ISR(TIMER1_COMPA_vect)	//OCR1A값에 따라 블록 이동속도가 결정된다.
{
	if(new_block == 0)
	{
		for(int i = 0; i < 12; i++)
    1404:	e2 16       	cp	r14, r18
    1406:	f3 06       	cpc	r15, r19
    1408:	29 f0       	breq	.+10     	; 0x1414 <__vector_12+0x76>
    140a:	9f 01       	movw	r18, r30
    140c:	20 5e       	subi	r18, 0xE0	; 224
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
	
}


ISR(TIMER1_COMPA_vect)	//OCR1A값에 따라 블록 이동속도가 결정된다.
{
    1410:	da 01       	movw	r26, r20
    1412:	f0 cf       	rjmp	.-32     	; 0x13f4 <__vector_12+0x56>
			{
				game_board[i][j] = main_board[i][j];	//굳어진후 저장된 보드를 변화하는 보드로 복사
			}
		}

		cur_line++;	//현재라인 아래로 이동
    1414:	d0 90 73 0c 	lds	r13, 0x0C73	; 0x800c73 <cur_line>
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	8d 0d       	add	r24, r13
    141c:	80 93 73 0c 	sts	0x0C73, r24	; 0x800c73 <cur_line>
		
		if(Collision() == 1)	//이동후 충돌 발생시
    1420:	25 db       	rcall	.-2486   	; 0xa6c <Collision>
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	09 f0       	breq	.+2      	; 0x1428 <__vector_12+0x8a>
    1426:	49 c0       	rjmp	.+146    	; 0x14ba <__vector_12+0x11c>
		{
			cur_line--;	//원래 라인으로 복귀
    1428:	d0 92 73 0c 	sts	0x0C73, r13	; 0x800c73 <cur_line>
    142c:	80 91 74 0c 	lds	r24, 0x0C74	; 0x800c74 <cur_col>
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	fc 01       	movw	r30, r24
    1434:	ee 0f       	add	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	e2 95       	swap	r30
    143a:	f2 95       	swap	r31
    143c:	f0 7f       	andi	r31, 0xF0	; 240
    143e:	fe 27       	eor	r31, r30
    1440:	e0 7f       	andi	r30, 0xF0	; 240
    1442:	fe 27       	eor	r31, r30
    1444:	ed 0d       	add	r30, r13
    1446:	f1 1d       	adc	r31, r1
    1448:	ed 53       	subi	r30, 0x3D	; 61
    144a:	f9 4f       	sbci	r31, 0xF9	; 249
    144c:	dc 01       	movw	r26, r24
    144e:	aa 0f       	add	r26, r26
    1450:	bb 1f       	adc	r27, r27
    1452:	aa 0f       	add	r26, r26
    1454:	bb 1f       	adc	r27, r27
    1456:	ad 5b       	subi	r26, 0xBD	; 189
    1458:	b7 4f       	sbci	r27, 0xF7	; 247
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	8d 5c       	subi	r24, 0xCD	; 205
    1464:	97 4f       	sbci	r25, 0xF7	; 247
			for(int i = 0; i < 4; i++)	//복귀후 임시저장소의 테트리미노스 메인보드에 저장
			{
				main_board[cur_col-i][cur_line] |= temp_line[cur_col-i][0];
    1466:	30 81       	ld	r19, Z
    1468:	2c 91       	ld	r18, X
    146a:	23 2b       	or	r18, r19
    146c:	20 83       	st	Z, r18
				main_board[cur_col-i][cur_line + 1] |= temp_line[cur_col-i][1];
    146e:	31 81       	ldd	r19, Z+1	; 0x01
    1470:	11 96       	adiw	r26, 0x01	; 1
    1472:	2c 91       	ld	r18, X
    1474:	11 97       	sbiw	r26, 0x01	; 1
    1476:	23 2b       	or	r18, r19
    1478:	21 83       	std	Z+1, r18	; 0x01
				main_board[cur_col-i][cur_line + 2] |= temp_line[cur_col-i][2];
    147a:	32 81       	ldd	r19, Z+2	; 0x02
    147c:	12 96       	adiw	r26, 0x02	; 2
    147e:	2c 91       	ld	r18, X
    1480:	12 97       	sbiw	r26, 0x02	; 2
    1482:	23 2b       	or	r18, r19
    1484:	22 83       	std	Z+2, r18	; 0x02
				main_board[cur_col-i][cur_line + 3] |= temp_line[cur_col-i][3];
    1486:	33 81       	ldd	r19, Z+3	; 0x03
    1488:	13 96       	adiw	r26, 0x03	; 3
    148a:	2c 91       	ld	r18, X
    148c:	13 97       	sbiw	r26, 0x03	; 3
    148e:	23 2b       	or	r18, r19
    1490:	23 83       	std	Z+3, r18	; 0x03
    1492:	b0 97       	sbiw	r30, 0x20	; 32
    1494:	14 97       	sbiw	r26, 0x04	; 4
		cur_line++;	//현재라인 아래로 이동
		
		if(Collision() == 1)	//이동후 충돌 발생시
		{
			cur_line--;	//원래 라인으로 복귀
			for(int i = 0; i < 4; i++)	//복귀후 임시저장소의 테트리미노스 메인보드에 저장
    1496:	a8 17       	cp	r26, r24
    1498:	b9 07       	cpc	r27, r25
    149a:	29 f7       	brne	.-54     	; 0x1466 <__vector_12+0xc8>
				main_board[cur_col-i][cur_line] |= temp_line[cur_col-i][0];
				main_board[cur_col-i][cur_line + 1] |= temp_line[cur_col-i][1];
				main_board[cur_col-i][cur_line + 2] |= temp_line[cur_col-i][2];
				main_board[cur_col-i][cur_line + 3] |= temp_line[cur_col-i][3];
			}
			new_block = 1;	//새로운 블록 플레그 켜짐
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	80 93 42 05 	sts	0x0542, r24	; 0x800542 <new_block>
    14a2:	0b c0       	rjmp	.+22     	; 0x14ba <__vector_12+0x11c>

		for(int i = 0; i < 12; i++)
		{
			for(int j = 0; j< 32; j++)
			{
				game_board[i][j] = main_board[i][j];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    14a4:	89 91       	ld	r24, Y+
    14a6:	81 93       	st	Z+, r24
			new_block = 1;	//새로운 블록 플레그 켜짐
		}

		for(int i = 0; i < 12; i++)
		{
			for(int j = 0; j< 32; j++)
    14a8:	c2 17       	cp	r28, r18
    14aa:	d3 07       	cpc	r29, r19
    14ac:	d9 f7       	brne	.-10     	; 0x14a4 <__vector_12+0x106>
    14ae:	00 5e       	subi	r16, 0xE0	; 224
    14b0:	1f 4f       	sbci	r17, 0xFF	; 255
    14b2:	e9 01       	movw	r28, r18
				main_board[cur_col-i][cur_line + 3] |= temp_line[cur_col-i][3];
			}
			new_block = 1;	//새로운 블록 플레그 켜짐
		}

		for(int i = 0; i < 12; i++)
    14b4:	2e 15       	cp	r18, r14
    14b6:	3f 05       	cpc	r19, r15
    14b8:	29 f0       	breq	.+10     	; 0x14c4 <__vector_12+0x126>
    14ba:	9e 01       	movw	r18, r28
    14bc:	20 5e       	subi	r18, 0xE0	; 224
    14be:	3f 4f       	sbci	r19, 0xFF	; 255
}


ISR(TIMER1_COMPA_vect)	//OCR1A값에 따라 블록 이동속도가 결정된다.
{
	if(new_block == 0)
    14c0:	f8 01       	movw	r30, r16
    14c2:	f0 cf       	rjmp	.-32     	; 0x14a4 <__vector_12+0x106>
				game_board[i][j] = main_board[i][j];	//굳어진후 저장된 보드를 변화하는 보드로 복사
			}
		}
		for(int i = 0; i < 4; i++)	//현재라인 아래로 이동 후 변화하는 보드에 반영
		{
			game_board[cur_col-i][cur_line] |= temp_line[cur_col-i][0];
    14c4:	a0 91 73 0c 	lds	r26, 0x0C73	; 0x800c73 <cur_line>
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	60 91 74 0c 	lds	r22, 0x0C74	; 0x800c74 <cur_col>
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	ab 01       	movw	r20, r22
    14d2:	44 0f       	add	r20, r20
    14d4:	55 1f       	adc	r21, r21
    14d6:	42 95       	swap	r20
    14d8:	52 95       	swap	r21
    14da:	50 7f       	andi	r21, 0xF0	; 240
    14dc:	54 27       	eor	r21, r20
    14de:	40 7f       	andi	r20, 0xF0	; 240
    14e0:	54 27       	eor	r21, r20
    14e2:	9d 01       	movw	r18, r26
    14e4:	24 0f       	add	r18, r20
    14e6:	35 1f       	adc	r19, r21
    14e8:	2d 5b       	subi	r18, 0xBD	; 189
    14ea:	3a 4f       	sbci	r19, 0xFA	; 250
    14ec:	fb 01       	movw	r30, r22
    14ee:	ee 0f       	add	r30, r30
    14f0:	ff 1f       	adc	r31, r31
    14f2:	ee 0f       	add	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	ed 5b       	subi	r30, 0xBD	; 189
    14f8:	f7 4f       	sbci	r31, 0xF7	; 247
    14fa:	cd 01       	movw	r24, r26
    14fc:	84 0f       	add	r24, r20
    14fe:	95 1f       	adc	r25, r21
    1500:	8c 5b       	subi	r24, 0xBC	; 188
    1502:	9a 4f       	sbci	r25, 0xFA	; 250
    1504:	ed 01       	movw	r28, r26
    1506:	c4 0f       	add	r28, r20
    1508:	d5 1f       	adc	r29, r21
    150a:	cb 5b       	subi	r28, 0xBB	; 187
    150c:	da 4f       	sbci	r29, 0xFA	; 250
    150e:	a4 0f       	add	r26, r20
    1510:	b5 1f       	adc	r27, r21
    1512:	8d 01       	movw	r16, r26
    1514:	0a 5b       	subi	r16, 0xBA	; 186
    1516:	1a 4f       	sbci	r17, 0xFA	; 250
    1518:	66 0f       	add	r22, r22
    151a:	77 1f       	adc	r23, r23
    151c:	66 0f       	add	r22, r22
    151e:	77 1f       	adc	r23, r23
    1520:	6d 5c       	subi	r22, 0xCD	; 205
    1522:	77 4f       	sbci	r23, 0xF7	; 247
    1524:	d9 01       	movw	r26, r18
    1526:	5c 91       	ld	r21, X
    1528:	40 81       	ld	r20, Z
    152a:	45 2b       	or	r20, r21
    152c:	4c 93       	st	X, r20
			game_board[cur_col-i][cur_line + 1] |= temp_line[cur_col-i][1];
    152e:	dc 01       	movw	r26, r24
    1530:	5c 91       	ld	r21, X
    1532:	41 81       	ldd	r20, Z+1	; 0x01
    1534:	45 2b       	or	r20, r21
    1536:	4c 93       	st	X, r20
			game_board[cur_col-i][cur_line + 2] |= temp_line[cur_col-i][2];
    1538:	58 81       	ld	r21, Y
    153a:	42 81       	ldd	r20, Z+2	; 0x02
    153c:	45 2b       	or	r20, r21
    153e:	48 83       	st	Y, r20
			game_board[cur_col-i][cur_line + 3] |= temp_line[cur_col-i][3];
    1540:	d8 01       	movw	r26, r16
    1542:	5c 91       	ld	r21, X
    1544:	43 81       	ldd	r20, Z+3	; 0x03
    1546:	45 2b       	or	r20, r21
    1548:	4c 93       	st	X, r20
    154a:	20 52       	subi	r18, 0x20	; 32
    154c:	31 09       	sbc	r19, r1
    154e:	34 97       	sbiw	r30, 0x04	; 4
    1550:	80 97       	sbiw	r24, 0x20	; 32
    1552:	a0 97       	sbiw	r28, 0x20	; 32
    1554:	00 52       	subi	r16, 0x20	; 32
    1556:	11 09       	sbc	r17, r1
			for(int j = 0; j< 32; j++)
			{
				game_board[i][j] = main_board[i][j];	//굳어진후 저장된 보드를 변화하는 보드로 복사
			}
		}
		for(int i = 0; i < 4; i++)	//현재라인 아래로 이동 후 변화하는 보드에 반영
    1558:	e6 17       	cp	r30, r22
    155a:	f7 07       	cpc	r31, r23
    155c:	19 f7       	brne	.-58     	; 0x1524 <__vector_12+0x186>
			game_board[cur_col-i][cur_line + 1] |= temp_line[cur_col-i][1];
			game_board[cur_col-i][cur_line + 2] |= temp_line[cur_col-i][2];
			game_board[cur_col-i][cur_line + 3] |= temp_line[cur_col-i][3];
		}
	}
}
    155e:	ff 91       	pop	r31
    1560:	ef 91       	pop	r30
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	bf 91       	pop	r27
    1568:	af 91       	pop	r26
    156a:	9f 91       	pop	r25
    156c:	8f 91       	pop	r24
    156e:	7f 91       	pop	r23
    1570:	6f 91       	pop	r22
    1572:	5f 91       	pop	r21
    1574:	4f 91       	pop	r20
    1576:	3f 91       	pop	r19
    1578:	2f 91       	pop	r18
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	df 90       	pop	r13
    1584:	0f 90       	pop	r0
    1586:	0b be       	out	0x3b, r0	; 59
    1588:	0f 90       	pop	r0
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	0f 90       	pop	r0
    158e:	1f 90       	pop	r1
    1590:	18 95       	reti

00001592 <main>:

int main(void)
{
	char cmd;

	UART_Init();
    1592:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Init>

	SendCommand(CMD_TF);
    1596:	89 e0       	ldi	r24, 0x09	; 9
    1598:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <SendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    159c:	2f ef       	ldi	r18, 0xFF	; 255
    159e:	89 ef       	ldi	r24, 0xF9	; 249
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	21 50       	subi	r18, 0x01	; 1
    15a4:	80 40       	sbci	r24, 0x00	; 0
    15a6:	90 40       	sbci	r25, 0x00	; 0
    15a8:	e1 f7       	brne	.-8      	; 0x15a2 <main+0x10>
    15aa:	00 c0       	rjmp	.+0      	; 0x15ac <main+0x1a>
    15ac:	00 00       	nop
	_delay_ms(20);
	SendCommand01(0x06, 0x00, 0x0F);
    15ae:	4f e0       	ldi	r20, 0x0F	; 15
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	86 e0       	ldi	r24, 0x06	; 6
    15b4:	0e 94 09 02 	call	0x412	; 0x412 <SendCommand01>
    15b8:	cf ef       	ldi	r28, 0xFF	; 255
    15ba:	d3 ec       	ldi	r29, 0xC3	; 195
    15bc:	e9 e0       	ldi	r30, 0x09	; 9
    15be:	c1 50       	subi	r28, 0x01	; 1
    15c0:	d0 40       	sbci	r29, 0x00	; 0
    15c2:	e0 40       	sbci	r30, 0x00	; 0
    15c4:	e1 f7       	brne	.-8      	; 0x15be <main+0x2c>
    15c6:	00 c0       	rjmp	.+0      	; 0x15c8 <main+0x36>
    15c8:	00 00       	nop
	_delay_ms(200);
	SendCommand01(0x0F, 0x01, 0x01);
    15ca:	41 e0       	ldi	r20, 0x01	; 1
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	8f e0       	ldi	r24, 0x0F	; 15
    15d0:	0e 94 09 02 	call	0x412	; 0x412 <SendCommand01>
    15d4:	ff ef       	ldi	r31, 0xFF	; 255
    15d6:	23 ec       	ldi	r18, 0xC3	; 195
    15d8:	89 e0       	ldi	r24, 0x09	; 9
    15da:	f1 50       	subi	r31, 0x01	; 1
    15dc:	20 40       	sbci	r18, 0x00	; 0
    15de:	80 40       	sbci	r24, 0x00	; 0
    15e0:	e1 f7       	brne	.-8      	; 0x15da <main+0x48>
    15e2:	00 c0       	rjmp	.+0      	; 0x15e4 <main+0x52>
    15e4:	00 00       	nop
	_delay_ms(200);

	TCCR0 = 0x07;	//타이머 카운터 0 1024분주로 켜기
    15e6:	87 e0       	ldi	r24, 0x07	; 7
    15e8:	83 bf       	out	0x33, r24	; 51

	TCCR1A |= (0 << COM1A0) | (0 << WGM10);	//CTC, OC1A핀 차단
    15ea:	8f b5       	in	r24, 0x2f	; 47
    15ec:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (5 << CS10); //CTC, 1024분주
    15ee:	8e b5       	in	r24, 0x2e	; 46
    15f0:	8d 60       	ori	r24, 0x0D	; 13
    15f2:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0xFFF;
    15f4:	8f ef       	ldi	r24, 0xFF	; 255
    15f6:	9f e0       	ldi	r25, 0x0F	; 15
    15f8:	9b bd       	out	0x2b, r25	; 43
    15fa:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A);	//타이머 카운터 1 출력비교 A 매치 인터럽트 인에이블
    15fc:	87 b7       	in	r24, 0x37	; 55
    15fe:	80 61       	ori	r24, 0x10	; 16
    1600:	87 bf       	out	0x37, r24	; 55

	DDRD = 0x00;	//인터럽트 4,5,6,7 켜기위해 포트 입력으로
    1602:	11 ba       	out	0x11, r1	; 17
	DDRE = 0x00;	//인터럽트 3 켜기위해 포트 입력으로
    1604:	12 b8       	out	0x02, r1	; 2

	EICRB = (2 << ISC40) | (2 << ISC50) | (2 << ISC60) | (2 << ISC70);
    1606:	8a ea       	ldi	r24, 0xAA	; 170
    1608:	8a bf       	out	0x3a, r24	; 58
	
	EICRA = (2 << ISC30);
    160a:	80 e8       	ldi	r24, 0x80	; 128
    160c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>

	EIMSK = (1 << INT3) | (1 << INT4) | (1 << INT5) | (1 << INT6) | (1 << INT7);
    1610:	88 ef       	ldi	r24, 0xF8	; 248
    1612:	89 bf       	out	0x39, r24	; 57

	sei();
    1614:	78 94       	sei

	setup();
    1616:	0e 94 c9 02 	call	0x592	; 0x592 <setup>

	while(1)
	{
		SendCommand01(0x0F, 0x01, 0x01);
    161a:	ff 24       	eor	r15, r15
    161c:	f3 94       	inc	r15
    161e:	0f 2e       	mov	r0, r31
    1620:	f3 ec       	ldi	r31, 0xC3	; 195
    1622:	4f 2e       	mov	r4, r31
    1624:	f6 e0       	ldi	r31, 0x06	; 6
    1626:	5f 2e       	mov	r5, r31
    1628:	f0 2d       	mov	r31, r0
    162a:	0f 2e       	mov	r0, r31
    162c:	f2 e6       	ldi	r31, 0x62	; 98
    162e:	6f 2e       	mov	r6, r31
    1630:	f8 e0       	ldi	r31, 0x08	; 8
    1632:	7f 2e       	mov	r7, r31
    1634:	f0 2d       	mov	r31, r0
    1636:	0f 2e       	mov	r0, r31
    1638:	f3 e4       	ldi	r31, 0x43	; 67
    163a:	af 2e       	mov	r10, r31
    163c:	f8 e0       	ldi	r31, 0x08	; 8
    163e:	bf 2e       	mov	r11, r31
    1640:	f0 2d       	mov	r31, r0
    1642:	0f 2e       	mov	r0, r31
    1644:	f3 ee       	ldi	r31, 0xE3	; 227
    1646:	8f 2e       	mov	r8, r31
    1648:	f6 e0       	ldi	r31, 0x06	; 6
    164a:	9f 2e       	mov	r9, r31
    164c:	f0 2d       	mov	r31, r0
    164e:	4f 2d       	mov	r20, r15
    1650:	6f 2d       	mov	r22, r15
    1652:	8f e0       	ldi	r24, 0x0F	; 15
    1654:	0e 94 09 02 	call	0x412	; 0x412 <SendCommand01>
    1658:	9f ef       	ldi	r25, 0xFF	; 255
    165a:	c3 ec       	ldi	r28, 0xC3	; 195
    165c:	d9 e0       	ldi	r29, 0x09	; 9
    165e:	91 50       	subi	r25, 0x01	; 1
    1660:	c0 40       	sbci	r28, 0x00	; 0
    1662:	d0 40       	sbci	r29, 0x00	; 0
    1664:	e1 f7       	brne	.-8      	; 0x165e <main+0xcc>
    1666:	00 c0       	rjmp	.+0      	; 0x1668 <main+0xd6>
    1668:	00 00       	nop
		_delay_ms(200);
		draw_picture(KO);
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	0e 94 8d 02 	call	0x51a	; 0x51a <draw_picture>
    1672:	ef ef       	ldi	r30, 0xFF	; 255
    1674:	fd e3       	ldi	r31, 0x3D	; 61
    1676:	29 e4       	ldi	r18, 0x49	; 73
    1678:	e1 50       	subi	r30, 0x01	; 1
    167a:	f0 40       	sbci	r31, 0x00	; 0
    167c:	20 40       	sbci	r18, 0x00	; 0
    167e:	e1 f7       	brne	.-8      	; 0x1678 <main+0xe6>
    1680:	00 c0       	rjmp	.+0      	; 0x1682 <main+0xf0>
    1682:	00 00       	nop
		_delay_ms(1500);
		clear_screen();
    1684:	0e 94 ab 02 	call	0x556	; 0x556 <clear_screen>

		game_over = 0;	//게임종료 플레그 끄기
    1688:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <game_over>
    168c:	43 e2       	ldi	r20, 0x23	; 35
    168e:	58 e0       	ldi	r21, 0x08	; 8
    1690:	22 ee       	ldi	r18, 0xE2	; 226
    1692:	36 e0       	ldi	r19, 0x06	; 6
    1694:	a3 ec       	ldi	r26, 0xC3	; 195
    1696:	b6 e0       	ldi	r27, 0x06	; 6


		for(int i = 0; i < 31; i++)	//메인 보드 초기화
		{
			main_board[0][i] = 1;
    1698:	fc 92       	st	X, r15
			main_board[11][i] = 1;
    169a:	ea 01       	movw	r28, r20
    169c:	f9 92       	st	Y+, r15
    169e:	ae 01       	movw	r20, r28
    16a0:	cd 01       	movw	r24, r26
    16a2:	80 5c       	subi	r24, 0xC0	; 192
    16a4:	9e 4f       	sbci	r25, 0xFE	; 254
    16a6:	fd 01       	movw	r30, r26
			for(int j = 1; j < 11; j++)
			{
				main_board[j][i] = 0;
    16a8:	10 a2       	std	Z+32, r1	; 0x20
    16aa:	b0 96       	adiw	r30, 0x20	; 32

		for(int i = 0; i < 31; i++)	//메인 보드 초기화
		{
			main_board[0][i] = 1;
			main_board[11][i] = 1;
			for(int j = 1; j < 11; j++)
    16ac:	e8 17       	cp	r30, r24
    16ae:	f9 07       	cpc	r31, r25
    16b0:	d9 f7       	brne	.-10     	; 0x16a8 <main+0x116>
    16b2:	11 96       	adiw	r26, 0x01	; 1
		clear_screen();

		game_over = 0;	//게임종료 플레그 끄기


		for(int i = 0; i < 31; i++)	//메인 보드 초기화
    16b4:	a2 17       	cp	r26, r18
    16b6:	b3 07       	cpc	r27, r19
    16b8:	79 f7       	brne	.-34     	; 0x1698 <main+0x106>
				main_board[j][i] = 0;
			}
		}
		for(int i = 0; i < 12; i++)
		{
			main_board[i][31] = 1;
    16ba:	f9 01       	movw	r30, r18
    16bc:	f0 82       	st	Z, r15
    16be:	20 5e       	subi	r18, 0xE0	; 224
    16c0:	3f 4f       	sbci	r19, 0xFF	; 255
			for(int j = 1; j < 11; j++)
			{
				main_board[j][i] = 0;
			}
		}
		for(int i = 0; i < 12; i++)
    16c2:	62 16       	cp	r6, r18
    16c4:	73 06       	cpc	r7, r19
    16c6:	c9 f7       	brne	.-14     	; 0x16ba <main+0x128>
    16c8:	86 c0       	rjmp	.+268    	; 0x17d6 <main+0x244>
    16ca:	df 01       	movw	r26, r30
    16cc:	11 96       	adiw	r26, 0x01	; 1

		while(game_over == 0)	//게임종료 플레그가 꺼저있을동안 반복
		{
			for(int i = 0; i < 31; i++)
			{
				if(main_board[1][i] == 1 && main_board[2][i] == 1 && main_board[3][i] == 1 && main_board[4][i] == 1 && main_board[5][i] == 1 && main_board[6][i] == 1 && main_board[7][i] == 1 && main_board[8][i] == 1 && main_board[9][i] == 1 && main_board[10][i] == 1)
    16ce:	c0 81       	ld	r28, Z
    16d0:	c1 30       	cpi	r28, 0x01	; 1
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <main+0x144>
    16d4:	4d c0       	rjmp	.+154    	; 0x1770 <main+0x1de>
    16d6:	5f 96       	adiw	r26, 0x1f	; 31
    16d8:	dc 90       	ld	r13, X
    16da:	5f 97       	sbiw	r26, 0x1f	; 31
    16dc:	dc 12       	cpse	r13, r28
    16de:	48 c0       	rjmp	.+144    	; 0x1770 <main+0x1de>
    16e0:	df 96       	adiw	r26, 0x3f	; 63
    16e2:	dc 90       	ld	r13, X
    16e4:	df 97       	sbiw	r26, 0x3f	; 63
    16e6:	dc 12       	cpse	r13, r28
    16e8:	43 c0       	rjmp	.+134    	; 0x1770 <main+0x1de>
    16ea:	e8 01       	movw	r28, r16
    16ec:	d8 80       	ld	r13, Y
    16ee:	d1 e0       	ldi	r29, 0x01	; 1
    16f0:	dd 12       	cpse	r13, r29
    16f2:	3e c0       	rjmp	.+124    	; 0x1770 <main+0x1de>
    16f4:	e8 01       	movw	r28, r16
    16f6:	d8 a0       	ldd	r13, Y+32	; 0x20
    16f8:	d1 e0       	ldi	r29, 0x01	; 1
    16fa:	dd 12       	cpse	r13, r29
    16fc:	39 c0       	rjmp	.+114    	; 0x1770 <main+0x1de>
    16fe:	eb 01       	movw	r28, r22
    1700:	d8 80       	ld	r13, Y
    1702:	d1 e0       	ldi	r29, 0x01	; 1
    1704:	dd 12       	cpse	r13, r29
    1706:	34 c0       	rjmp	.+104    	; 0x1770 <main+0x1de>
    1708:	eb 01       	movw	r28, r22
    170a:	d8 a0       	ldd	r13, Y+32	; 0x20
    170c:	d1 e0       	ldi	r29, 0x01	; 1
    170e:	dd 12       	cpse	r13, r29
    1710:	2f c0       	rjmp	.+94     	; 0x1770 <main+0x1de>
    1712:	ea 01       	movw	r28, r20
    1714:	d8 80       	ld	r13, Y
    1716:	d1 e0       	ldi	r29, 0x01	; 1
    1718:	dd 12       	cpse	r13, r29
    171a:	2a c0       	rjmp	.+84     	; 0x1770 <main+0x1de>
    171c:	ea 01       	movw	r28, r20
    171e:	d8 a0       	ldd	r13, Y+32	; 0x20
    1720:	d1 e0       	ldi	r29, 0x01	; 1
    1722:	dd 12       	cpse	r13, r29
    1724:	25 c0       	rjmp	.+74     	; 0x1770 <main+0x1de>
    1726:	6d 01       	movw	r12, r26
    1728:	c1 ee       	ldi	r28, 0xE1	; 225
    172a:	cc 1a       	sub	r12, r28
    172c:	ce ef       	ldi	r28, 0xFE	; 254
    172e:	dc 0a       	sbc	r13, r28
    1730:	e6 01       	movw	r28, r12
    1732:	d8 80       	ld	r13, Y
    1734:	d1 e0       	ldi	r29, 0x01	; 1
    1736:	dd 12       	cpse	r13, r29
    1738:	1b c0       	rjmp	.+54     	; 0x1770 <main+0x1de>
				//1줄이 모두 완성되어서 깨질 줄이 있는지 확인
				{
					main_board[0][i] = 1;	//양끝 벽은 채우기
    173a:	6d 01       	movw	r12, r26
    173c:	c1 e2       	ldi	r28, 0x21	; 33
    173e:	cc 1a       	sub	r12, r28
    1740:	d1 08       	sbc	r13, r1
    1742:	e6 01       	movw	r28, r12
    1744:	f8 82       	st	Y, r15
					main_board[11][i] = 1;
    1746:	e9 01       	movw	r28, r18
    1748:	f9 82       	std	Y+1, r15	; 0x01
    174a:	31 97       	sbiw	r30, 0x01	; 1
					for(int j = 1; j < 11; j++)
					{
						main_board[j][i] = 0;	//깨저야하는 줄은 지우기
    174c:	11 82       	std	Z+1, r1	; 0x01
						for(int k = i; k > 0; k--)
    174e:	18 16       	cp	r1, r24
    1750:	19 06       	cpc	r1, r25
    1752:	54 f4       	brge	.+20     	; 0x1768 <main+0x1d6>
    1754:	6f 01       	movw	r12, r30
    1756:	c8 1a       	sub	r12, r24
    1758:	d9 0a       	sbc	r13, r25
    175a:	ef 01       	movw	r28, r30
						{
							main_board[j][k] = main_board[j][k - 1];	//깨진 줄의 위에 줄들 아래로 이동(행렬상 열 증가)
    175c:	e8 80       	ld	r14, Y
    175e:	e9 82       	std	Y+1, r14	; 0x01
    1760:	21 97       	sbiw	r28, 0x01	; 1
					main_board[0][i] = 1;	//양끝 벽은 채우기
					main_board[11][i] = 1;
					for(int j = 1; j < 11; j++)
					{
						main_board[j][i] = 0;	//깨저야하는 줄은 지우기
						for(int k = i; k > 0; k--)
    1762:	cc 15       	cp	r28, r12
    1764:	dd 05       	cpc	r29, r13
    1766:	d1 f7       	brne	.-12     	; 0x175c <main+0x1ca>
    1768:	b0 96       	adiw	r30, 0x20	; 32
				if(main_board[1][i] == 1 && main_board[2][i] == 1 && main_board[3][i] == 1 && main_board[4][i] == 1 && main_board[5][i] == 1 && main_board[6][i] == 1 && main_board[7][i] == 1 && main_board[8][i] == 1 && main_board[9][i] == 1 && main_board[10][i] == 1)
				//1줄이 모두 완성되어서 깨질 줄이 있는지 확인
				{
					main_board[0][i] = 1;	//양끝 벽은 채우기
					main_board[11][i] = 1;
					for(int j = 1; j < 11; j++)
    176a:	e2 17       	cp	r30, r18
    176c:	f3 07       	cpc	r31, r19
    176e:	71 f7       	brne	.-36     	; 0x174c <main+0x1ba>



		while(game_over == 0)	//게임종료 플레그가 꺼저있을동안 반복
		{
			for(int i = 0; i < 31; i++)
    1770:	01 96       	adiw	r24, 0x01	; 1
    1772:	0f 5f       	subi	r16, 0xFF	; 255
    1774:	1f 4f       	sbci	r17, 0xFF	; 255
    1776:	6f 5f       	subi	r22, 0xFF	; 255
    1778:	7f 4f       	sbci	r23, 0xFF	; 255
    177a:	4f 5f       	subi	r20, 0xFF	; 255
    177c:	5f 4f       	sbci	r21, 0xFF	; 255
    177e:	2f 5f       	subi	r18, 0xFF	; 255
    1780:	3f 4f       	sbci	r19, 0xFF	; 255
    1782:	fd 01       	movw	r30, r26
    1784:	8f 31       	cpi	r24, 0x1F	; 31
    1786:	91 05       	cpc	r25, r1
    1788:	09 f0       	breq	.+2      	; 0x178c <main+0x1fa>
    178a:	9f cf       	rjmp	.-194    	; 0x16ca <main+0x138>
    178c:	43 e4       	ldi	r20, 0x43	; 67
    178e:	55 e0       	ldi	r21, 0x05	; 5
    1790:	f2 01       	movw	r30, r4
    1792:	0b c0       	rjmp	.+22     	; 0x17aa <main+0x218>

			for(int i = 0; i < 12; i++)
			{
				for(int j = 0; j< 32; j++)
				{
					game_board[i][j] = main_board[i][j];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    1794:	81 91       	ld	r24, Z+
    1796:	8d 93       	st	X+, r24
				}
			}

			for(int i = 0; i < 12; i++)
			{
				for(int j = 0; j< 32; j++)
    1798:	2e 17       	cp	r18, r30
    179a:	3f 07       	cpc	r19, r31
    179c:	d9 f7       	brne	.-10     	; 0x1794 <main+0x202>
    179e:	40 5e       	subi	r20, 0xE0	; 224
    17a0:	5f 4f       	sbci	r21, 0xFF	; 255
    17a2:	f9 01       	movw	r30, r18
						}
					}
				}
			}

			for(int i = 0; i < 12; i++)
    17a4:	a2 16       	cp	r10, r18
    17a6:	b3 06       	cpc	r11, r19
    17a8:	29 f0       	breq	.+10     	; 0x17b4 <main+0x222>
    17aa:	9f 01       	movw	r18, r30
    17ac:	20 5e       	subi	r18, 0xE0	; 224
    17ae:	3f 4f       	sbci	r19, 0xFF	; 255
					main_board[0][i] = 1;	//양끝 벽은 채우기
					main_board[11][i] = 1;
					for(int j = 1; j < 11; j++)
					{
						main_board[j][i] = 0;	//깨저야하는 줄은 지우기
						for(int k = i; k > 0; k--)
    17b0:	da 01       	movw	r26, r20
    17b2:	f0 cf       	rjmp	.-32     	; 0x1794 <main+0x202>
				{
					game_board[i][j] = main_board[i][j];	//굳어진후 저장된 보드를 변화하는 보드로 복사
				}
			}
			
			NewTetriminos();	//새로운 테트리미노스 생성
    17b4:	0e 94 8e 03 	call	0x71c	; 0x71c <NewTetriminos>
			NextTetriminos();
    17b8:	64 d8       	rcall	.-3896   	; 0x882 <NextTetriminos>
			while(new_block == 0)	//새로운 블록 프레그 꺼져있는 동안 반족
    17ba:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <new_block>
    17be:	81 11       	cpse	r24, r1
    17c0:	06 c0       	rjmp	.+12     	; 0x17ce <main+0x23c>
			{
				draw_map();	//반영된 변화하는 보드 화면으로 출력
    17c2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <draw_map>
				}
			}
			
			NewTetriminos();	//새로운 테트리미노스 생성
			NextTetriminos();
			while(new_block == 0)	//새로운 블록 프레그 꺼져있는 동안 반족
    17c6:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <new_block>
    17ca:	88 23       	and	r24, r24
    17cc:	d1 f3       	breq	.-12     	; 0x17c2 <main+0x230>
			main_board[i][31] = 1;
		}



		while(game_over == 0)	//게임종료 플레그가 꺼저있을동안 반복
    17ce:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <game_over>
    17d2:	81 11       	cpse	r24, r1
    17d4:	3c cf       	rjmp	.-392    	; 0x164e <main+0xbc>
    17d6:	f4 01       	movw	r30, r8
    17d8:	03 e4       	ldi	r16, 0x43	; 67
    17da:	17 e0       	ldi	r17, 0x07	; 7
    17dc:	63 e8       	ldi	r22, 0x83	; 131
    17de:	77 e0       	ldi	r23, 0x07	; 7
    17e0:	43 ec       	ldi	r20, 0xC3	; 195
    17e2:	57 e0       	ldi	r21, 0x07	; 7
    17e4:	22 e2       	ldi	r18, 0x22	; 34
    17e6:	38 e0       	ldi	r19, 0x08	; 8


		for(int i = 0; i < 31; i++)	//메인 보드 초기화
		{
			main_board[0][i] = 1;
			main_board[11][i] = 1;
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	6e cf       	rjmp	.-292    	; 0x16ca <main+0x138>

000017ee <_exit>:
    17ee:	f8 94       	cli

000017f0 <__stop_program>:
    17f0:	ff cf       	rjmp	.-2      	; 0x17f0 <__stop_program>
