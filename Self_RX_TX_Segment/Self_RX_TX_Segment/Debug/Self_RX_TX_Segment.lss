
Self_RX_TX_Segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000008c2  00000956  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010c  0080010c  00000962  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a3e  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ff  00000000  00000000  0000147a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ba  00000000  00000000  00001c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00002434  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c4  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000540  00000000  00000000  00002b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	cd c0       	rjmp	.+410    	; 0x1b0 <__vector_5>
  16:	00 00       	nop
  18:	22 c1       	rjmp	.+580    	; 0x25e <__vector_6>
  1a:	00 00       	nop
  1c:	88 c1       	rjmp	.+784    	; 0x32e <__vector_7>
  1e:	00 00       	nop
  20:	ee c1       	rjmp	.+988    	; 0x3fe <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	89 c3       	rjmp	.+1810   	; 0x73c <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c3       	rjmp	.+1578   	; 0x664 <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	37 c2       	rjmp	.+1134   	; 0x4e8 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a1 d3       	rcall	.+1858   	; 0x806 <main>
  c4:	fc c3       	rjmp	.+2040   	; 0x8be <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_1>:
unsigned char up_count1;
unsigned char down_count1;


ISR(INT0_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
  d8:	0f 92       	push	r0
  da:	2f 93       	push	r18
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
	up_count0 = 0;
  ec:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <up_count0>
	down_count0 = 0;
  f0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>

	my_number++;
  f4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <my_number>
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <my_number>
	if(my_number == 10) my_number = 0;
  fe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <my_number>
 102:	8a 30       	cpi	r24, 0x0A	; 10
 104:	11 f4       	brne	.+4      	; 0x10a <__vector_1+0x42>
 106:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <my_number>
	
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 10a:	00 00       	nop
 10c:	8b e9       	ldi	r24, 0x9B	; 155
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	80 81       	ld	r24, Z
 114:	88 2f       	mov	r24, r24
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	80 72       	andi	r24, 0x20	; 32
 11a:	99 27       	eor	r25, r25
 11c:	89 2b       	or	r24, r25
 11e:	b1 f3       	breq	.-20     	; 0x10c <__vector_1+0x44>
	UDR1 = 0x02; // 송신
 120:	8c e9       	ldi	r24, 0x9C	; 156
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	22 e0       	ldi	r18, 0x02	; 2
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 12a:	00 00       	nop
 12c:	8b e9       	ldi	r24, 0x9B	; 155
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	fc 01       	movw	r30, r24
 132:	80 81       	ld	r24, Z
 134:	88 2f       	mov	r24, r24
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	80 72       	andi	r24, 0x20	; 32
 13a:	99 27       	eor	r25, r25
 13c:	89 2b       	or	r24, r25
 13e:	b1 f3       	breq	.-20     	; 0x12c <__vector_1+0x64>
	UDR1 = 'A'; // 송신
 140:	8c e9       	ldi	r24, 0x9C	; 156
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	21 e4       	ldi	r18, 0x41	; 65
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 14a:	00 00       	nop
 14c:	8b e9       	ldi	r24, 0x9B	; 155
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	88 2f       	mov	r24, r24
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	80 72       	andi	r24, 0x20	; 32
 15a:	99 27       	eor	r25, r25
 15c:	89 2b       	or	r24, r25
 15e:	b1 f3       	breq	.-20     	; 0x14c <__vector_1+0x84>
	UDR1 = '0' + my_number; // 송신
 160:	8c e9       	ldi	r24, 0x9C	; 156
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <my_number>
 168:	20 5d       	subi	r18, 0xD0	; 208
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 16e:	00 00       	nop
 170:	8b e9       	ldi	r24, 0x9B	; 155
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	88 2f       	mov	r24, r24
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	80 72       	andi	r24, 0x20	; 32
 17e:	99 27       	eor	r25, r25
 180:	89 2b       	or	r24, r25
 182:	b1 f3       	breq	.-20     	; 0x170 <__vector_1+0xa8>
	UDR1 = 0x03; // 송신
 184:	8c e9       	ldi	r24, 0x9C	; 156
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	23 e0       	ldi	r18, 0x03	; 3
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18

}
 18e:	00 00       	nop
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1a4:	0f 90       	pop	r0
 1a6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <__vector_5>:


ISR(INT4_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1c0:	0f 92       	push	r0
 1c2:	2f 93       	push	r18
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
	
	up_count0 = 0;
 1d4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <up_count0>
	down_count0 = 0;
 1d8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 1dc:	00 00       	nop
 1de:	8b e9       	ldi	r24, 0x9B	; 155
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	fc 01       	movw	r30, r24
 1e4:	80 81       	ld	r24, Z
 1e6:	88 2f       	mov	r24, r24
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	80 72       	andi	r24, 0x20	; 32
 1ec:	99 27       	eor	r25, r25
 1ee:	89 2b       	or	r24, r25
 1f0:	b1 f3       	breq	.-20     	; 0x1de <__vector_5+0x2e>
	UDR1 = 0x02; // 송신
 1f2:	8c e9       	ldi	r24, 0x9C	; 156
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	22 e0       	ldi	r18, 0x02	; 2
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 1fc:	00 00       	nop
 1fe:	8b e9       	ldi	r24, 0x9B	; 155
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	fc 01       	movw	r30, r24
 204:	80 81       	ld	r24, Z
 206:	88 2f       	mov	r24, r24
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	80 72       	andi	r24, 0x20	; 32
 20c:	99 27       	eor	r25, r25
 20e:	89 2b       	or	r24, r25
 210:	b1 f3       	breq	.-20     	; 0x1fe <__vector_5+0x4e>
	UDR1 = 'C'; // 송신
 212:	8c e9       	ldi	r24, 0x9C	; 156
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	23 e4       	ldi	r18, 0x43	; 67
 218:	fc 01       	movw	r30, r24
 21a:	20 83       	st	Z, r18
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 21c:	00 00       	nop
 21e:	8b e9       	ldi	r24, 0x9B	; 155
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	fc 01       	movw	r30, r24
 224:	80 81       	ld	r24, Z
 226:	88 2f       	mov	r24, r24
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	80 72       	andi	r24, 0x20	; 32
 22c:	99 27       	eor	r25, r25
 22e:	89 2b       	or	r24, r25
 230:	b1 f3       	breq	.-20     	; 0x21e <__vector_5+0x6e>
	UDR1 = 0x03; // 송신
 232:	8c e9       	ldi	r24, 0x9C	; 156
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	23 e0       	ldi	r18, 0x03	; 3
 238:	fc 01       	movw	r30, r24
 23a:	20 83       	st	Z, r18
}
 23c:	00 00       	nop
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 252:	0f 90       	pop	r0
 254:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_6>:

ISR(INT5_vect)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 26e:	0f 92       	push	r0
 270:	2f 93       	push	r18
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
	up_count0 = 0;
 282:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <up_count0>
	down_count0 = 1;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 28c:	00 00       	nop
 28e:	8b e9       	ldi	r24, 0x9B	; 155
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	fc 01       	movw	r30, r24
 294:	80 81       	ld	r24, Z
 296:	88 2f       	mov	r24, r24
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	80 72       	andi	r24, 0x20	; 32
 29c:	99 27       	eor	r25, r25
 29e:	89 2b       	or	r24, r25
 2a0:	b1 f3       	breq	.-20     	; 0x28e <__vector_6+0x30>
	UDR1 = 0x02; // 송신
 2a2:	8c e9       	ldi	r24, 0x9C	; 156
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	22 e0       	ldi	r18, 0x02	; 2
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 2ac:	00 00       	nop
 2ae:	8b e9       	ldi	r24, 0x9B	; 155
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	fc 01       	movw	r30, r24
 2b4:	80 81       	ld	r24, Z
 2b6:	88 2f       	mov	r24, r24
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	80 72       	andi	r24, 0x20	; 32
 2bc:	99 27       	eor	r25, r25
 2be:	89 2b       	or	r24, r25
 2c0:	b1 f3       	breq	.-20     	; 0x2ae <__vector_6+0x50>
	UDR1 = 'B'; // 송신
 2c2:	8c e9       	ldi	r24, 0x9C	; 156
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	22 e4       	ldi	r18, 0x42	; 66
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 2cc:	00 00       	nop
 2ce:	8b e9       	ldi	r24, 0x9B	; 155
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	fc 01       	movw	r30, r24
 2d4:	80 81       	ld	r24, Z
 2d6:	88 2f       	mov	r24, r24
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	80 72       	andi	r24, 0x20	; 32
 2dc:	99 27       	eor	r25, r25
 2de:	89 2b       	or	r24, r25
 2e0:	b1 f3       	breq	.-20     	; 0x2ce <__vector_6+0x70>
	UDR1 = '1'; // 송신
 2e2:	8c e9       	ldi	r24, 0x9C	; 156
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	21 e3       	ldi	r18, 0x31	; 49
 2e8:	fc 01       	movw	r30, r24
 2ea:	20 83       	st	Z, r18
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 2ec:	00 00       	nop
 2ee:	8b e9       	ldi	r24, 0x9B	; 155
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	fc 01       	movw	r30, r24
 2f4:	80 81       	ld	r24, Z
 2f6:	88 2f       	mov	r24, r24
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	80 72       	andi	r24, 0x20	; 32
 2fc:	99 27       	eor	r25, r25
 2fe:	89 2b       	or	r24, r25
 300:	b1 f3       	breq	.-20     	; 0x2ee <__vector_6+0x90>
	UDR1 = 0x03; // 송신
 302:	8c e9       	ldi	r24, 0x9C	; 156
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	23 e0       	ldi	r18, 0x03	; 3
 308:	fc 01       	movw	r30, r24
 30a:	20 83       	st	Z, r18
}
 30c:	00 00       	nop
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	2f 91       	pop	r18
 31c:	0f 90       	pop	r0
 31e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 322:	0f 90       	pop	r0
 324:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_7>:

ISR(INT6_vect)
{
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 33e:	0f 92       	push	r0
 340:	2f 93       	push	r18
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	ef 93       	push	r30
 348:	ff 93       	push	r31
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
	
	up_count0 = 1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <up_count0>
	down_count0 = 0;
 358:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 35c:	00 00       	nop
 35e:	8b e9       	ldi	r24, 0x9B	; 155
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	fc 01       	movw	r30, r24
 364:	80 81       	ld	r24, Z
 366:	88 2f       	mov	r24, r24
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	80 72       	andi	r24, 0x20	; 32
 36c:	99 27       	eor	r25, r25
 36e:	89 2b       	or	r24, r25
 370:	b1 f3       	breq	.-20     	; 0x35e <__vector_7+0x30>
	UDR1 = 0x02; // 송신
 372:	8c e9       	ldi	r24, 0x9C	; 156
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	22 e0       	ldi	r18, 0x02	; 2
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 37c:	00 00       	nop
 37e:	8b e9       	ldi	r24, 0x9B	; 155
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	fc 01       	movw	r30, r24
 384:	80 81       	ld	r24, Z
 386:	88 2f       	mov	r24, r24
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	80 72       	andi	r24, 0x20	; 32
 38c:	99 27       	eor	r25, r25
 38e:	89 2b       	or	r24, r25
 390:	b1 f3       	breq	.-20     	; 0x37e <__vector_7+0x50>
	UDR1 = 'B'; // 송신
 392:	8c e9       	ldi	r24, 0x9C	; 156
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	22 e4       	ldi	r18, 0x42	; 66
 398:	fc 01       	movw	r30, r24
 39a:	20 83       	st	Z, r18
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 39c:	00 00       	nop
 39e:	8b e9       	ldi	r24, 0x9B	; 155
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	fc 01       	movw	r30, r24
 3a4:	80 81       	ld	r24, Z
 3a6:	88 2f       	mov	r24, r24
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	80 72       	andi	r24, 0x20	; 32
 3ac:	99 27       	eor	r25, r25
 3ae:	89 2b       	or	r24, r25
 3b0:	b1 f3       	breq	.-20     	; 0x39e <__vector_7+0x70>
	UDR1 = '0'; // 송신
 3b2:	8c e9       	ldi	r24, 0x9C	; 156
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	20 e3       	ldi	r18, 0x30	; 48
 3b8:	fc 01       	movw	r30, r24
 3ba:	20 83       	st	Z, r18
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 3bc:	00 00       	nop
 3be:	8b e9       	ldi	r24, 0x9B	; 155
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	fc 01       	movw	r30, r24
 3c4:	80 81       	ld	r24, Z
 3c6:	88 2f       	mov	r24, r24
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	80 72       	andi	r24, 0x20	; 32
 3cc:	99 27       	eor	r25, r25
 3ce:	89 2b       	or	r24, r25
 3d0:	b1 f3       	breq	.-20     	; 0x3be <__vector_7+0x90>
	UDR1 = 0x03; // 송신
 3d2:	8c e9       	ldi	r24, 0x9C	; 156
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	23 e0       	ldi	r18, 0x03	; 3
 3d8:	fc 01       	movw	r30, r24
 3da:	20 83       	st	Z, r18
}
 3dc:	00 00       	nop
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	ff 91       	pop	r31
 3e4:	ef 91       	pop	r30
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	2f 91       	pop	r18
 3ec:	0f 90       	pop	r0
 3ee:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 3f2:	0f 90       	pop	r0
 3f4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <__vector_8>:

ISR(INT7_vect)
{
 3fe:	1f 92       	push	r1
 400:	0f 92       	push	r0
 402:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 40e:	0f 92       	push	r0
 410:	2f 93       	push	r18
 412:	8f 93       	push	r24
 414:	9f 93       	push	r25
 416:	ef 93       	push	r30
 418:	ff 93       	push	r31
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
	up_count0 = 0;
 422:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <up_count0>
	down_count0 = 0;
 426:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>

	my_number--;
 42a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <my_number>
 42e:	81 50       	subi	r24, 0x01	; 1
 430:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <my_number>
	
	if(my_number < 0) my_number = 9;
 434:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <my_number>
 438:	88 23       	and	r24, r24
 43a:	1c f4       	brge	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43c:	89 e0       	ldi	r24, 0x09	; 9
 43e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <my_number>
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 442:	00 00       	nop
 444:	8b e9       	ldi	r24, 0x9B	; 155
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	fc 01       	movw	r30, r24
 44a:	80 81       	ld	r24, Z
 44c:	88 2f       	mov	r24, r24
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	80 72       	andi	r24, 0x20	; 32
 452:	99 27       	eor	r25, r25
 454:	89 2b       	or	r24, r25
 456:	b1 f3       	breq	.-20     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	UDR1 = 0x02; // 송신
 458:	8c e9       	ldi	r24, 0x9C	; 156
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	22 e0       	ldi	r18, 0x02	; 2
 45e:	fc 01       	movw	r30, r24
 460:	20 83       	st	Z, r18
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 462:	00 00       	nop
 464:	8b e9       	ldi	r24, 0x9B	; 155
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	fc 01       	movw	r30, r24
 46a:	80 81       	ld	r24, Z
 46c:	88 2f       	mov	r24, r24
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	80 72       	andi	r24, 0x20	; 32
 472:	99 27       	eor	r25, r25
 474:	89 2b       	or	r24, r25
 476:	b1 f3       	breq	.-20     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	UDR1 = 'A'; // 송신
 478:	8c e9       	ldi	r24, 0x9C	; 156
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	21 e4       	ldi	r18, 0x41	; 65
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 482:	00 00       	nop
 484:	8b e9       	ldi	r24, 0x9B	; 155
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	fc 01       	movw	r30, r24
 48a:	80 81       	ld	r24, Z
 48c:	88 2f       	mov	r24, r24
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	80 72       	andi	r24, 0x20	; 32
 492:	99 27       	eor	r25, r25
 494:	89 2b       	or	r24, r25
 496:	b1 f3       	breq	.-20     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
	UDR1 = '0' + my_number; // 송신
 498:	8c e9       	ldi	r24, 0x9C	; 156
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <my_number>
 4a0:	20 5d       	subi	r18, 0xD0	; 208
 4a2:	fc 01       	movw	r30, r24
 4a4:	20 83       	st	Z, r18
	while((UCSR1A & 0x20) == 0x0); //UERE0=1 될 때까지 대기
 4a6:	00 00       	nop
 4a8:	8b e9       	ldi	r24, 0x9B	; 155
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	fc 01       	movw	r30, r24
 4ae:	80 81       	ld	r24, Z
 4b0:	88 2f       	mov	r24, r24
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	80 72       	andi	r24, 0x20	; 32
 4b6:	99 27       	eor	r25, r25
 4b8:	89 2b       	or	r24, r25
 4ba:	b1 f3       	breq	.-20     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
	UDR1 = 0x03; // 송신
 4bc:	8c e9       	ldi	r24, 0x9C	; 156
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	23 e0       	ldi	r18, 0x03	; 3
 4c2:	fc 01       	movw	r30, r24
 4c4:	20 83       	st	Z, r18
}
 4c6:	00 00       	nop
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	ff 91       	pop	r31
 4ce:	ef 91       	pop	r30
 4d0:	9f 91       	pop	r25
 4d2:	8f 91       	pop	r24
 4d4:	2f 91       	pop	r18
 4d6:	0f 90       	pop	r0
 4d8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 4dc:	0f 90       	pop	r0
 4de:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4e2:	0f 90       	pop	r0
 4e4:	1f 90       	pop	r1
 4e6:	18 95       	reti

000004e8 <__vector_30>:

}*/


ISR(USART1_RX_vect)
{
 4e8:	1f 92       	push	r1
 4ea:	0f 92       	push	r0
 4ec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4f0:	0f 92       	push	r0
 4f2:	11 24       	eor	r1, r1
 4f4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 4f8:	0f 92       	push	r0
 4fa:	8f 93       	push	r24
 4fc:	9f 93       	push	r25
 4fe:	ef 93       	push	r30
 500:	ff 93       	push	r31
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	1f 92       	push	r1
 508:	cd b7       	in	r28, 0x3d	; 61
 50a:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	ch = UDR1; // 수신
 50c:	8c e9       	ldi	r24, 0x9C	; 156
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	fc 01       	movw	r30, r24
 512:	80 81       	ld	r24, Z
 514:	89 83       	std	Y+1, r24	; 0x01
	if(ch == 0x02) start_RX1 = 1;
 516:	89 81       	ldd	r24, Y+1	; 0x01
 518:	82 30       	cpi	r24, 0x02	; 2
 51a:	21 f4       	brne	.+8      	; 0x524 <__vector_30+0x3c>
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <start_RX1>
 522:	0f c0       	rjmp	.+30     	; 0x542 <__vector_30+0x5a>
	else if(start_RX1 == 1 && ch == 0x03)
 524:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <start_RX1>
 528:	81 30       	cpi	r24, 0x01	; 1
 52a:	59 f4       	brne	.+22     	; 0x542 <__vector_30+0x5a>
 52c:	89 81       	ldd	r24, Y+1	; 0x01
 52e:	83 30       	cpi	r24, 0x03	; 3
 530:	41 f4       	brne	.+16     	; 0x542 <__vector_30+0x5a>
	{
		start_RX1 = 0;
 532:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <start_RX1>
		A_mode0 = 0;
 536:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <A_mode0>
		B_mode0 = 0;
 53a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <B_mode0>
		C_mode0 = 0;
 53e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <C_mode0>
	}

	if(start_RX1 == 1 && ch == 'A') A_mode1 = 1;
 542:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <start_RX1>
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	39 f4       	brne	.+14     	; 0x558 <__vector_30+0x70>
 54a:	89 81       	ldd	r24, Y+1	; 0x01
 54c:	81 34       	cpi	r24, 0x41	; 65
 54e:	21 f4       	brne	.+8      	; 0x558 <__vector_30+0x70>
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <A_mode1>
 556:	15 c0       	rjmp	.+42     	; 0x582 <__vector_30+0x9a>
	else if(start_RX1 == 1 && ch == 'B') B_mode1 = 1;
 558:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <start_RX1>
 55c:	81 30       	cpi	r24, 0x01	; 1
 55e:	39 f4       	brne	.+14     	; 0x56e <__vector_30+0x86>
 560:	89 81       	ldd	r24, Y+1	; 0x01
 562:	82 34       	cpi	r24, 0x42	; 66
 564:	21 f4       	brne	.+8      	; 0x56e <__vector_30+0x86>
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <B_mode1>
 56c:	0a c0       	rjmp	.+20     	; 0x582 <__vector_30+0x9a>
	else if(start_RX1 == 1 && ch == 'C') C_mode1 = 1;
 56e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <start_RX1>
 572:	81 30       	cpi	r24, 0x01	; 1
 574:	31 f4       	brne	.+12     	; 0x582 <__vector_30+0x9a>
 576:	89 81       	ldd	r24, Y+1	; 0x01
 578:	83 34       	cpi	r24, 0x43	; 67
 57a:	19 f4       	brne	.+6      	; 0x582 <__vector_30+0x9a>
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <C_mode1>

	if(start_RX1 == 1 && A_mode1 == 1) 
 582:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <start_RX1>
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	89 f4       	brne	.+34     	; 0x5ac <__vector_30+0xc4>
 58a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <A_mode1>
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	69 f4       	brne	.+26     	; 0x5ac <__vector_30+0xc4>
	{
		B_mode0 = 0;
 592:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <B_mode0>
		C_mode0 = 0;
 596:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <C_mode0>
		up_count1 = 0;
 59a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <up_count1>
		down_count1 = 0;
 59e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <down_count1>
		your_number = ch - '0';
 5a2:	89 81       	ldd	r24, Y+1	; 0x01
 5a4:	80 53       	subi	r24, 0x30	; 48
 5a6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <your_number>
 5aa:	4b c0       	rjmp	.+150    	; 0x642 <__vector_30+0x15a>
	}

	else if(start_RX1 == 1 && B_mode1 == 1 && ch == '0' && up_count1 == 0 && down_count1 == 0) 
 5ac:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <start_RX1>
 5b0:	81 30       	cpi	r24, 0x01	; 1
 5b2:	c9 f4       	brne	.+50     	; 0x5e6 <__vector_30+0xfe>
 5b4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <B_mode1>
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	a9 f4       	brne	.+42     	; 0x5e6 <__vector_30+0xfe>
 5bc:	89 81       	ldd	r24, Y+1	; 0x01
 5be:	80 33       	cpi	r24, 0x30	; 48
 5c0:	91 f4       	brne	.+36     	; 0x5e6 <__vector_30+0xfe>
 5c2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <up_count1>
 5c6:	88 23       	and	r24, r24
 5c8:	71 f4       	brne	.+28     	; 0x5e6 <__vector_30+0xfe>
 5ca:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <down_count1>
 5ce:	88 23       	and	r24, r24
 5d0:	51 f4       	brne	.+20     	; 0x5e6 <__vector_30+0xfe>
	{
		A_mode0 = 0;
 5d2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <A_mode0>
		C_mode0 = 0;
 5d6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <C_mode0>
		up_count1 = 1;
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <up_count1>
		down_count1 = 0;
 5e0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <down_count1>
 5e4:	2e c0       	rjmp	.+92     	; 0x642 <__vector_30+0x15a>
	}
	else if(start_RX1 == 1 && B_mode1 == 1 && ch == '1' && up_count1 == 0 && down_count1 == 0)
 5e6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <start_RX1>
 5ea:	81 30       	cpi	r24, 0x01	; 1
 5ec:	c9 f4       	brne	.+50     	; 0x620 <__vector_30+0x138>
 5ee:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <B_mode1>
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	a9 f4       	brne	.+42     	; 0x620 <__vector_30+0x138>
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
 5f8:	81 33       	cpi	r24, 0x31	; 49
 5fa:	91 f4       	brne	.+36     	; 0x620 <__vector_30+0x138>
 5fc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <up_count1>
 600:	88 23       	and	r24, r24
 602:	71 f4       	brne	.+28     	; 0x620 <__vector_30+0x138>
 604:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <down_count1>
 608:	88 23       	and	r24, r24
 60a:	51 f4       	brne	.+20     	; 0x620 <__vector_30+0x138>
	{
		A_mode0 = 0;
 60c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <A_mode0>
		C_mode0 = 0;
 610:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <C_mode0>
		up_count1 = 0;
 614:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <up_count1>
		down_count1 = 1;
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <down_count1>
 61e:	11 c0       	rjmp	.+34     	; 0x642 <__vector_30+0x15a>
	}
	else if(start_RX1 == 1 && C_mode1 == 1) 
 620:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <start_RX1>
 624:	81 30       	cpi	r24, 0x01	; 1
 626:	69 f4       	brne	.+26     	; 0x642 <__vector_30+0x15a>
 628:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <C_mode1>
 62c:	81 30       	cpi	r24, 0x01	; 1
 62e:	49 f4       	brne	.+18     	; 0x642 <__vector_30+0x15a>
	{
		A_mode0 = 0;
 630:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <A_mode0>
		B_mode0 = 0;
 634:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <B_mode0>
		up_count1 = 0;
 638:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <up_count1>
		down_count1 = 0;
 63c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <down_count1>
	}

}
 640:	00 c0       	rjmp	.+0      	; 0x642 <__vector_30+0x15a>
 642:	00 00       	nop
 644:	0f 90       	pop	r0
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	ff 91       	pop	r31
 64c:	ef 91       	pop	r30
 64e:	9f 91       	pop	r25
 650:	8f 91       	pop	r24
 652:	0f 90       	pop	r0
 654:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 658:	0f 90       	pop	r0
 65a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 65e:	0f 90       	pop	r0
 660:	1f 90       	pop	r1
 662:	18 95       	reti

00000664 <__vector_14>:

ISR(TIMER1_OVF_vect)
{
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 66c:	0f 92       	push	r0
 66e:	11 24       	eor	r1, r1
 670:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 674:	0f 92       	push	r0
 676:	2f 93       	push	r18
 678:	3f 93       	push	r19
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
 67e:	ef 93       	push	r30
 680:	ff 93       	push	r31
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	cd b7       	in	r28, 0x3d	; 61
 688:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 49911; //타이머카운터 1초만들기 위한 초기값 재설정
 68a:	8c e4       	ldi	r24, 0x4C	; 76
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	27 ef       	ldi	r18, 0xF7	; 247
 690:	32 ec       	ldi	r19, 0xC2	; 194
 692:	fc 01       	movw	r30, r24
 694:	31 83       	std	Z+1, r19	; 0x01
 696:	20 83       	st	Z, r18

	if(up_count0 == 1)
 698:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <up_count0>
 69c:	81 30       	cpi	r24, 0x01	; 1
 69e:	61 f4       	brne	.+24     	; 0x6b8 <__vector_14+0x54>
	{
		my_number++;
 6a0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <my_number>
 6a4:	8f 5f       	subi	r24, 0xFF	; 255
 6a6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <my_number>
		if(my_number == 10) my_number = 0;
 6aa:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <my_number>
 6ae:	8a 30       	cpi	r24, 0x0A	; 10
 6b0:	99 f4       	brne	.+38     	; 0x6d8 <__vector_14+0x74>
 6b2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <my_number>
 6b6:	10 c0       	rjmp	.+32     	; 0x6d8 <__vector_14+0x74>
	}
	
	else if(down_count0 == 1)
 6b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 6bc:	81 30       	cpi	r24, 0x01	; 1
 6be:	61 f4       	brne	.+24     	; 0x6d8 <__vector_14+0x74>
	{
		my_number--;
 6c0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <my_number>
 6c4:	81 50       	subi	r24, 0x01	; 1
 6c6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <my_number>
		if(my_number < 0) my_number = 9;
 6ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <my_number>
 6ce:	88 23       	and	r24, r24
 6d0:	1c f4       	brge	.+6      	; 0x6d8 <__vector_14+0x74>
 6d2:	89 e0       	ldi	r24, 0x09	; 9
 6d4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <my_number>
	}

	if(up_count1 == 1)
 6d8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <up_count1>
 6dc:	81 30       	cpi	r24, 0x01	; 1
 6de:	61 f4       	brne	.+24     	; 0x6f8 <__vector_14+0x94>
	{
		your_number++;
 6e0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <your_number>
 6e4:	8f 5f       	subi	r24, 0xFF	; 255
 6e6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <your_number>
		if(your_number == 10) your_number = 0;
 6ea:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <your_number>
 6ee:	8a 30       	cpi	r24, 0x0A	; 10
 6f0:	99 f4       	brne	.+38     	; 0x718 <__vector_14+0xb4>
 6f2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <your_number>
		your_number--;
		if(your_number < 0) your_number = 9;
	}
	
	
}
 6f6:	10 c0       	rjmp	.+32     	; 0x718 <__vector_14+0xb4>
	{
		your_number++;
		if(your_number == 10) your_number = 0;
	}
	
	else if(down_count1 == 1)
 6f8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <down_count1>
 6fc:	81 30       	cpi	r24, 0x01	; 1
 6fe:	61 f4       	brne	.+24     	; 0x718 <__vector_14+0xb4>
	{
		your_number--;
 700:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <your_number>
 704:	81 50       	subi	r24, 0x01	; 1
 706:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <your_number>
		if(your_number < 0) your_number = 9;
 70a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <your_number>
 70e:	88 23       	and	r24, r24
 710:	1c f4       	brge	.+6      	; 0x718 <__vector_14+0xb4>
 712:	89 e0       	ldi	r24, 0x09	; 9
 714:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <your_number>
	}
	
	
}
 718:	00 00       	nop
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	ff 91       	pop	r31
 720:	ef 91       	pop	r30
 722:	9f 91       	pop	r25
 724:	8f 91       	pop	r24
 726:	3f 91       	pop	r19
 728:	2f 91       	pop	r18
 72a:	0f 90       	pop	r0
 72c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 730:	0f 90       	pop	r0
 732:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 736:	0f 90       	pop	r0
 738:	1f 90       	pop	r1
 73a:	18 95       	reti

0000073c <__vector_10>:

ISR(TIMER2_OVF_vect)
{
 73c:	1f 92       	push	r1
 73e:	0f 92       	push	r0
 740:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 744:	0f 92       	push	r0
 746:	11 24       	eor	r1, r1
 748:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 74c:	0f 92       	push	r0
 74e:	2f 93       	push	r18
 750:	3f 93       	push	r19
 752:	8f 93       	push	r24
 754:	9f 93       	push	r25
 756:	ef 93       	push	r30
 758:	ff 93       	push	r31
 75a:	cf 93       	push	r28
 75c:	df 93       	push	r29
 75e:	cd b7       	in	r28, 0x3d	; 61
 760:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 178;	//타이머카운터 4.99ms로 동적구동을 위한 초기값 재설정
 762:	84 e4       	ldi	r24, 0x44	; 68
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	22 eb       	ldi	r18, 0xB2	; 178
 768:	fc 01       	movw	r30, r24
 76a:	20 83       	st	Z, r18

	if(display_on_number == 1)
 76c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <display_on_number>
 770:	81 30       	cpi	r24, 0x01	; 1
 772:	e1 f4       	brne	.+56     	; 0x7ac <__vector_10+0x70>
	{
		PORTG = display_on_number;
 774:	85 e6       	ldi	r24, 0x65	; 101
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <display_on_number>
 77c:	fc 01       	movw	r30, r24
 77e:	20 83       	st	Z, r18
		PORTA = ~segment2[my_number];
 780:	8b e3       	ldi	r24, 0x3B	; 59
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <my_number>
 788:	02 2e       	mov	r0, r18
 78a:	00 0c       	add	r0, r0
 78c:	33 0b       	sbc	r19, r19
 78e:	20 50       	subi	r18, 0x00	; 0
 790:	3f 4f       	sbci	r19, 0xFF	; 255
 792:	f9 01       	movw	r30, r18
 794:	20 81       	ld	r18, Z
 796:	20 95       	com	r18
 798:	fc 01       	movw	r30, r24
 79a:	20 83       	st	Z, r18
		display_on_number = (display_on_number << 3);
 79c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <display_on_number>
 7a0:	88 0f       	add	r24, r24
 7a2:	88 0f       	add	r24, r24
 7a4:	88 0f       	add	r24, r24
 7a6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <display_on_number>
	{
		PORTG = display_on_number;
		PORTA = ~segment2[your_number];
		display_on_number = 1;
	}
}
 7aa:	1b c0       	rjmp	.+54     	; 0x7e2 <__vector_10+0xa6>
		PORTG = display_on_number;
		PORTA = ~segment2[my_number];
		display_on_number = (display_on_number << 3);
	}
	
	else if(display_on_number == 8)
 7ac:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <display_on_number>
 7b0:	88 30       	cpi	r24, 0x08	; 8
 7b2:	b9 f4       	brne	.+46     	; 0x7e2 <__vector_10+0xa6>
	{
		PORTG = display_on_number;
 7b4:	85 e6       	ldi	r24, 0x65	; 101
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <display_on_number>
 7bc:	fc 01       	movw	r30, r24
 7be:	20 83       	st	Z, r18
		PORTA = ~segment2[your_number];
 7c0:	8b e3       	ldi	r24, 0x3B	; 59
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <your_number>
 7c8:	02 2e       	mov	r0, r18
 7ca:	00 0c       	add	r0, r0
 7cc:	33 0b       	sbc	r19, r19
 7ce:	20 50       	subi	r18, 0x00	; 0
 7d0:	3f 4f       	sbci	r19, 0xFF	; 255
 7d2:	f9 01       	movw	r30, r18
 7d4:	20 81       	ld	r18, Z
 7d6:	20 95       	com	r18
 7d8:	fc 01       	movw	r30, r24
 7da:	20 83       	st	Z, r18
		display_on_number = 1;
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <display_on_number>
	}
}
 7e2:	00 00       	nop
 7e4:	df 91       	pop	r29
 7e6:	cf 91       	pop	r28
 7e8:	ff 91       	pop	r31
 7ea:	ef 91       	pop	r30
 7ec:	9f 91       	pop	r25
 7ee:	8f 91       	pop	r24
 7f0:	3f 91       	pop	r19
 7f2:	2f 91       	pop	r18
 7f4:	0f 90       	pop	r0
 7f6:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 7fa:	0f 90       	pop	r0
 7fc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 800:	0f 90       	pop	r0
 802:	1f 90       	pop	r1
 804:	18 95       	reti

00000806 <main>:



int main(void)
{
 806:	cf 93       	push	r28
 808:	df 93       	push	r29
 80a:	cd b7       	in	r28, 0x3d	; 61
 80c:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = 0xFF;	//세그먼트 표현부분 출력
 80e:	8a e3       	ldi	r24, 0x3A	; 58
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	2f ef       	ldi	r18, 0xFF	; 255
 814:	fc 01       	movw	r30, r24
 816:	20 83       	st	Z, r18
	DDRG = 0xFF;	//세가먼트 전원부분 출력
 818:	84 e6       	ldi	r24, 0x64	; 100
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	2f ef       	ldi	r18, 0xFF	; 255
 81e:	fc 01       	movw	r30, r24
 820:	20 83       	st	Z, r18
	DDRE = 0x0; //스위치 연결 부분 입력
 822:	82 e2       	ldi	r24, 0x22	; 34
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	fc 01       	movw	r30, r24
 828:	10 82       	st	Z, r1

	EICRA = (2 << ISC00);	 //INT 3 하강에지
 82a:	8a e6       	ldi	r24, 0x6A	; 106
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	22 e0       	ldi	r18, 0x02	; 2
 830:	fc 01       	movw	r30, r24
 832:	20 83       	st	Z, r18
	EICRB = (2 << ISC40) | (2 << ISC50) | (2 << ISC60) | (2 << ISC70); //INT 4,5,6,7 하강에지
 834:	8a e5       	ldi	r24, 0x5A	; 90
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	2a ea       	ldi	r18, 0xAA	; 170
 83a:	fc 01       	movw	r30, r24
 83c:	20 83       	st	Z, r18
	EIMSK = (1 << INT0) | (1 << INT4) |  (1 << INT5) |  (1 << INT6) |  (1 << INT7);	//INT 모두 켜기
 83e:	89 e5       	ldi	r24, 0x59	; 89
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	21 ef       	ldi	r18, 0xF1	; 241
 844:	fc 01       	movw	r30, r24
 846:	20 83       	st	Z, r18

	TCCR1A = 0x0;
 848:	8f e4       	ldi	r24, 0x4F	; 79
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	fc 01       	movw	r30, r24
 84e:	10 82       	st	Z, r1
	TCCR1B = 0x05; //일반모드, 1024분주
 850:	8e e4       	ldi	r24, 0x4E	; 78
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	25 e0       	ldi	r18, 0x05	; 5
 856:	fc 01       	movw	r30, r24
 858:	20 83       	st	Z, r18
	TCNT1 = 49911; //타이머카운터 1초만들기 위한 초기값
 85a:	8c e4       	ldi	r24, 0x4C	; 76
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	27 ef       	ldi	r18, 0xF7	; 247
 860:	32 ec       	ldi	r19, 0xC2	; 194
 862:	fc 01       	movw	r30, r24
 864:	31 83       	std	Z+1, r19	; 0x01
 866:	20 83       	st	Z, r18
	
	TCCR2 = 0x05;	//일반모드, 1024분주
 868:	85 e4       	ldi	r24, 0x45	; 69
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	25 e0       	ldi	r18, 0x05	; 5
 86e:	fc 01       	movw	r30, r24
 870:	20 83       	st	Z, r18
	TCNT1 = 178;	//4.99ms로 동적구동을 위한 초기값
 872:	8c e4       	ldi	r24, 0x4C	; 76
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	22 eb       	ldi	r18, 0xB2	; 178
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	fc 01       	movw	r30, r24
 87c:	31 83       	std	Z+1, r19	; 0x01
 87e:	20 83       	st	Z, r18

	TIMSK = 0b01000100; //TOIE1 = 1, TOIE2 = 1, 타이머 카운터 1 2 오버플로우 인터럽트 인에이블
 880:	87 e5       	ldi	r24, 0x57	; 87
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	24 e4       	ldi	r18, 0x44	; 68
 886:	fc 01       	movw	r30, r24
 888:	20 83       	st	Z, r18


	sei();	//모든 INT 활성화
 88a:	78 94       	sei

	UART_Init();
 88c:	01 d0       	rcall	.+2      	; 0x890 <UART_Init>

	while(1)
	{
		
	}
 88e:	ff cf       	rjmp	.-2      	; 0x88e <main+0x88>

00000890 <UART_Init>:
}

void UART_Init(void)
{
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	cd b7       	in	r28, 0x3d	; 61
 896:	de b7       	in	r29, 0x3e	; 62
	//UCSR0B = 0x98;	//RXCIEN = 1 수신완료 인터럽트 인에이블, RXEN1 = 1 수신기 인에이블, TXEN1 = 1 송신기 인에이블
	//UCSR0C = 0x06;
	//UBRR0L = 103;

	UCSR1B = 0x98;	//RXCIEN = 1 수신완료 인터럽트 인에이블, RXEN1 = 1 수신기 인에이블, TXEN1 = 1 송신기 인에이블
 898:	8a e9       	ldi	r24, 0x9A	; 154
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	28 e9       	ldi	r18, 0x98	; 152
 89e:	fc 01       	movw	r30, r24
 8a0:	20 83       	st	Z, r18
	UCSR1C = 0x06;
 8a2:	8d e9       	ldi	r24, 0x9D	; 157
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	26 e0       	ldi	r18, 0x06	; 6
 8a8:	fc 01       	movw	r30, r24
 8aa:	20 83       	st	Z, r18
	UBRR1L = 103;
 8ac:	89 e9       	ldi	r24, 0x99	; 153
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	27 e6       	ldi	r18, 0x67	; 103
 8b2:	fc 01       	movw	r30, r24
 8b4:	20 83       	st	Z, r18
}
 8b6:	00 00       	nop
 8b8:	df 91       	pop	r29
 8ba:	cf 91       	pop	r28
 8bc:	08 95       	ret

000008be <_exit>:
 8be:	f8 94       	cli

000008c0 <__stop_program>:
 8c0:	ff cf       	rjmp	.-2      	; 0x8c0 <__stop_program>
