
alarms clocks.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000081a  000008ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000081a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080010e  0080010e  000008bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d75  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000886  00000000  00000000  000016e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d7  00000000  00000000  00001f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00002748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045f  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006bc  00000000  00000000  00002c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000333b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__vector_5>
  16:	00 00       	nop
  18:	97 c1       	rjmp	.+814    	; 0x348 <__vector_6>
  1a:	00 00       	nop
  1c:	ab c1       	rjmp	.+854    	; 0x374 <__vector_7>
  1e:	00 00       	nop
  20:	bf c1       	rjmp	.+894    	; 0x3a0 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e1       	ldi	r30, 0x1A	; 26
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3c d3       	rcall	.+1656   	; 0x73c <main>
  c4:	a8 c3       	rjmp	.+1872   	; 0x816 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_5>:
unsigned char mode = 0;	//알람 시간 모드변경 변수
unsigned char beep = 0;	//알람 on/off 변수


ISR(INT4_vect)	//시간 알람 변화 인터럽트
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
	if(phase == 0 && mode == 0) t = t + 60;	//시간 각 자리
  e4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <phase>
  e8:	81 11       	cpse	r24, r1
  ea:	19 c0       	rjmp	.+50     	; 0x11e <__vector_5+0x56>
  ec:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <mode>
  f0:	91 11       	cpse	r25, r1
  f2:	4b c0       	rjmp	.+150    	; 0x18a <__vector_5+0xc2>
  f4:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <t>
  f8:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <t+0x1>
  fc:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <t+0x2>
 100:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <t+0x3>
 104:	44 5c       	subi	r20, 0xC4	; 196
 106:	5f 4f       	sbci	r21, 0xFF	; 255
 108:	6f 4f       	sbci	r22, 0xFF	; 255
 10a:	7f 4f       	sbci	r23, 0xFF	; 255
 10c:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <t>
 110:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <t+0x1>
 114:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <t+0x2>
 118:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <t+0x3>
 11c:	36 c0       	rjmp	.+108    	; 0x18a <__vector_5+0xc2>
	if(phase == 1 && mode == 0) t = t + 600;
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	c9 f4       	brne	.+50     	; 0x154 <__vector_5+0x8c>
 122:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <mode>
 126:	91 11       	cpse	r25, r1
 128:	4b c0       	rjmp	.+150    	; 0x1c0 <__vector_5+0xf8>
 12a:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <t>
 12e:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <t+0x1>
 132:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <t+0x2>
 136:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <t+0x3>
 13a:	48 5a       	subi	r20, 0xA8	; 168
 13c:	5d 4f       	sbci	r21, 0xFD	; 253
 13e:	6f 4f       	sbci	r22, 0xFF	; 255
 140:	7f 4f       	sbci	r23, 0xFF	; 255
 142:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <t>
 146:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <t+0x1>
 14a:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <t+0x2>
 14e:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <t+0x3>
 152:	36 c0       	rjmp	.+108    	; 0x1c0 <__vector_5+0xf8>
	if(phase == 2 && mode == 0) t = t + 3600;
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	c9 f4       	brne	.+50     	; 0x18a <__vector_5+0xc2>
 158:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <mode>
 15c:	91 11       	cpse	r25, r1
 15e:	c8 c0       	rjmp	.+400    	; 0x2f0 <__vector_5+0x228>
 160:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <t>
 164:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <t+0x1>
 168:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <t+0x2>
 16c:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <t+0x3>
 170:	40 5f       	subi	r20, 0xF0	; 240
 172:	51 4f       	sbci	r21, 0xF1	; 241
 174:	6f 4f       	sbci	r22, 0xFF	; 255
 176:	7f 4f       	sbci	r23, 0xFF	; 255
 178:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <t>
 17c:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <t+0x1>
 180:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <t+0x2>
 184:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <t+0x3>
 188:	b3 c0       	rjmp	.+358    	; 0x2f0 <__vector_5+0x228>
	if(phase == 3 && mode == 0) t = t + 36000;
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	c9 f4       	brne	.+50     	; 0x1c0 <__vector_5+0xf8>
 18e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <mode>
 192:	91 11       	cpse	r25, r1
 194:	bc c0       	rjmp	.+376    	; 0x30e <__vector_5+0x246>
 196:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <t>
 19a:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <t+0x1>
 19e:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <t+0x2>
 1a2:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <t+0x3>
 1a6:	40 56       	subi	r20, 0x60	; 96
 1a8:	53 47       	sbci	r21, 0x73	; 115
 1aa:	6f 4f       	sbci	r22, 0xFF	; 255
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255
 1ae:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <t>
 1b2:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <t+0x1>
 1b6:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <t+0x2>
 1ba:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <t+0x3>
 1be:	a7 c0       	rjmp	.+334    	; 0x30e <__vector_5+0x246>
	if(t >= 86400) t = 0;	//24시가 넘을때 초기화
 1c0:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <t>
 1c4:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <t+0x1>
 1c8:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <t+0x2>
 1cc:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <t+0x3>
 1d0:	40 38       	cpi	r20, 0x80	; 128
 1d2:	51 45       	sbci	r21, 0x51	; 81
 1d4:	61 40       	sbci	r22, 0x01	; 1
 1d6:	71 05       	cpc	r23, r1
 1d8:	44 f0       	brlt	.+16     	; 0x1ea <__vector_5+0x122>
 1da:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <t>
 1de:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <t+0x1>
 1e2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <t+0x2>
 1e6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <t+0x3>

	if(phase == 0 && mode == 1) l = l + 60;	//알람 각 자리
 1ea:	81 11       	cpse	r24, r1
 1ec:	1a c0       	rjmp	.+52     	; 0x222 <__vector_5+0x15a>
 1ee:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <mode>
 1f2:	91 30       	cpi	r25, 0x01	; 1
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <__vector_5+0x130>
 1f6:	4c c0       	rjmp	.+152    	; 0x290 <__vector_5+0x1c8>
 1f8:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fc:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 200:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 204:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 208:	44 5c       	subi	r20, 0xC4	; 196
 20a:	5f 4f       	sbci	r21, 0xFF	; 255
 20c:	6f 4f       	sbci	r22, 0xFF	; 255
 20e:	7f 4f       	sbci	r23, 0xFF	; 255
 210:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__DATA_REGION_ORIGIN__>
 214:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 218:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 21c:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 220:	37 c0       	rjmp	.+110    	; 0x290 <__vector_5+0x1c8>
	if(phase == 1 && mode == 1) l = l + 600;
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	d1 f4       	brne	.+52     	; 0x25a <__vector_5+0x192>
 226:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mode>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	09 f0       	breq	.+2      	; 0x230 <__vector_5+0x168>
 22e:	4a c0       	rjmp	.+148    	; 0x2c4 <__vector_5+0x1fc>
 230:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 234:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 238:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 23c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 240:	88 5a       	subi	r24, 0xA8	; 168
 242:	9d 4f       	sbci	r25, 0xFD	; 253
 244:	af 4f       	sbci	r26, 0xFF	; 255
 246:	bf 4f       	sbci	r27, 0xFF	; 255
 248:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 24c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 250:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 254:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 258:	35 c0       	rjmp	.+106    	; 0x2c4 <__vector_5+0x1fc>
	if(phase == 2 && mode == 1) l = l + 3600;
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	c9 f4       	brne	.+50     	; 0x290 <__vector_5+0x1c8>
 25e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mode>
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	79 f5       	brne	.+94     	; 0x2c4 <__vector_5+0x1fc>
 266:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 26a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 26e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 272:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 276:	80 5f       	subi	r24, 0xF0	; 240
 278:	91 4f       	sbci	r25, 0xF1	; 241
 27a:	af 4f       	sbci	r26, 0xFF	; 255
 27c:	bf 4f       	sbci	r27, 0xFF	; 255
 27e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 282:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 286:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 28a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 28e:	1a c0       	rjmp	.+52     	; 0x2c4 <__vector_5+0x1fc>
	if(phase == 3 && mode == 1) l = l + 36000;
 290:	83 30       	cpi	r24, 0x03	; 3
 292:	c1 f4       	brne	.+48     	; 0x2c4 <__vector_5+0x1fc>
 294:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mode>
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	a1 f4       	brne	.+40     	; 0x2c4 <__vector_5+0x1fc>
 29c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2a4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2a8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2ac:	80 56       	subi	r24, 0x60	; 96
 2ae:	93 47       	sbci	r25, 0x73	; 115
 2b0:	af 4f       	sbci	r26, 0xFF	; 255
 2b2:	bf 4f       	sbci	r27, 0xFF	; 255
 2b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2bc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2c0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	if(l >= 86400) l = 0;	//24시가 넘을때 초기화
 2c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2cc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2d0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2d4:	80 38       	cpi	r24, 0x80	; 128
 2d6:	91 45       	sbci	r25, 0x51	; 81
 2d8:	a1 40       	sbci	r26, 0x01	; 1
 2da:	b1 05       	cpc	r27, r1
 2dc:	3c f1       	brlt	.+78     	; 0x32c <__vector_5+0x264>
 2de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2e6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2ea:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 2ee:	1e c0       	rjmp	.+60     	; 0x32c <__vector_5+0x264>
{
	if(phase == 0 && mode == 0) t = t + 60;	//시간 각 자리
	if(phase == 1 && mode == 0) t = t + 600;
	if(phase == 2 && mode == 0) t = t + 3600;
	if(phase == 3 && mode == 0) t = t + 36000;
	if(t >= 86400) t = 0;	//24시가 넘을때 초기화
 2f0:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <t>
 2f4:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <t+0x1>
 2f8:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <t+0x2>
 2fc:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <t+0x3>
 300:	40 38       	cpi	r20, 0x80	; 128
 302:	51 45       	sbci	r21, 0x51	; 81
 304:	61 40       	sbci	r22, 0x01	; 1
 306:	71 05       	cpc	r23, r1
 308:	0c f0       	brlt	.+2      	; 0x30c <__vector_5+0x244>
 30a:	67 cf       	rjmp	.-306    	; 0x1da <__vector_5+0x112>
 30c:	8a cf       	rjmp	.-236    	; 0x222 <__vector_5+0x15a>
 30e:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <t>
 312:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <t+0x1>
 316:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <t+0x2>
 31a:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <t+0x3>
 31e:	40 38       	cpi	r20, 0x80	; 128
 320:	51 45       	sbci	r21, 0x51	; 81
 322:	61 40       	sbci	r22, 0x01	; 1
 324:	71 05       	cpc	r23, r1
 326:	0c f0       	brlt	.+2      	; 0x32a <__vector_5+0x262>
 328:	58 cf       	rjmp	.-336    	; 0x1da <__vector_5+0x112>
 32a:	97 cf       	rjmp	.-210    	; 0x25a <__vector_5+0x192>
	if(phase == 0 && mode == 1) l = l + 60;	//알람 각 자리
	if(phase == 1 && mode == 1) l = l + 600;
	if(phase == 2 && mode == 1) l = l + 3600;
	if(phase == 3 && mode == 1) l = l + 36000;
	if(l >= 86400) l = 0;	//24시가 넘을때 초기화
}
 32c:	bf 91       	pop	r27
 32e:	af 91       	pop	r26
 330:	9f 91       	pop	r25
 332:	8f 91       	pop	r24
 334:	7f 91       	pop	r23
 336:	6f 91       	pop	r22
 338:	5f 91       	pop	r21
 33a:	4f 91       	pop	r20
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <__vector_6>:

ISR(INT5_vect)	//자리 단계 인터럽트
{
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	8f 93       	push	r24
	phase++;
 354:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <phase>
 358:	8f 5f       	subi	r24, 0xFF	; 255
	if(phase == 4) phase = 0;
 35a:	84 30       	cpi	r24, 0x04	; 4
 35c:	19 f0       	breq	.+6      	; 0x364 <__vector_6+0x1c>
	if(l >= 86400) l = 0;	//24시가 넘을때 초기화
}

ISR(INT5_vect)	//자리 단계 인터럽트
{
	phase++;
 35e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <phase>
 362:	02 c0       	rjmp	.+4      	; 0x368 <__vector_6+0x20>
	if(phase == 4) phase = 0;
 364:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <phase>
}
 368:	8f 91       	pop	r24
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <__vector_7>:

ISR(INT6_vect)	//알람 시간 모드 변경 인터럽트
{
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	8f 93       	push	r24
	mode++;
 380:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mode>
 384:	8f 5f       	subi	r24, 0xFF	; 255
	if(mode == 2) mode = 0;
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	19 f0       	breq	.+6      	; 0x390 <__vector_7+0x1c>
	if(phase == 4) phase = 0;
}

ISR(INT6_vect)	//알람 시간 모드 변경 인터럽트
{
	mode++;
 38a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mode>
 38e:	02 c0       	rjmp	.+4      	; 0x394 <__vector_7+0x20>
	if(mode == 2) mode = 0;
 390:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <mode>
}
 394:	8f 91       	pop	r24
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <__vector_8>:

ISR(INT7_vect)	//알람 on/off 인터럽트
{
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
	beep = 0;
 3aa:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <beep>
}
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <display>:
	}
}

void display()
{
	if(mode == 0 && beep ==0)
 3b8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mode>
 3bc:	81 11       	cpse	r24, r1
 3be:	8e c0       	rjmp	.+284    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 3c0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <beep>
 3c4:	81 11       	cpse	r24, r1
 3c6:	1d c1       	rjmp	.+570    	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
	{
		hour_10 = t / 36000;
 3c8:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <t>
 3cc:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <t+0x1>
 3d0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <t+0x2>
 3d4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <t+0x3>
 3d8:	20 ea       	ldi	r18, 0xA0	; 160
 3da:	3c e8       	ldi	r19, 0x8C	; 140
 3dc:	40 e0       	ldi	r20, 0x00	; 0
 3de:	50 e0       	ldi	r21, 0x00	; 0
 3e0:	dc d1       	rcall	.+952    	; 0x79a <__divmodsi4>
 3e2:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <hour_10>
		hour_1 = (t % 36000) / 3600;
 3e6:	20 e1       	ldi	r18, 0x10	; 16
 3e8:	3e e0       	ldi	r19, 0x0E	; 14
 3ea:	40 e0       	ldi	r20, 0x00	; 0
 3ec:	50 e0       	ldi	r21, 0x00	; 0
 3ee:	d5 d1       	rcall	.+938    	; 0x79a <__divmodsi4>
 3f0:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <hour_1>
		min_10 = ((t % 36000) % 3600) / 600;
 3f4:	28 e5       	ldi	r18, 0x58	; 88
 3f6:	32 e0       	ldi	r19, 0x02	; 2
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	ce d1       	rcall	.+924    	; 0x79a <__divmodsi4>
 3fe:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <min_10>
		min_1 = (((t % 36000) % 3600) % 600) / 60;
 402:	2c e3       	ldi	r18, 0x3C	; 60
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	c7 d1       	rcall	.+910    	; 0x79a <__divmodsi4>
 40c:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <min_1>
		PORTG = 0b00000001;
 410:	a5 e6       	ldi	r26, 0x65	; 101
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	8c 93       	st	X, r24
		PORTD = ~segment2[min_1];
 418:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <min_1>
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	ec 5f       	subi	r30, 0xFC	; 252
 420:	fe 4f       	sbci	r31, 0xFE	; 254
 422:	80 81       	ld	r24, Z
 424:	80 95       	com	r24
 426:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 428:	8f e1       	ldi	r24, 0x1F	; 31
 42a:	9e e4       	ldi	r25, 0x4E	; 78
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 432:	00 00       	nop
		_delay_ms(5);
		PORTG = 0b00000010;
 434:	82 e0       	ldi	r24, 0x02	; 2
 436:	8c 93       	st	X, r24
		PORTD = ~segment2[min_10];
 438:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <min_10>
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	ec 5f       	subi	r30, 0xFC	; 252
 440:	fe 4f       	sbci	r31, 0xFE	; 254
 442:	80 81       	ld	r24, Z
 444:	80 95       	com	r24
 446:	82 bb       	out	0x12, r24	; 18
 448:	8f e1       	ldi	r24, 0x1F	; 31
 44a:	9e e4       	ldi	r25, 0x4E	; 78
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 452:	00 00       	nop
		_delay_ms(5);
		PORTG = 0b00000100;
 454:	84 e0       	ldi	r24, 0x04	; 4
 456:	8c 93       	st	X, r24
		PORTD = ~segment2[hour_1];
 458:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <hour_1>
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	ec 5f       	subi	r30, 0xFC	; 252
 460:	fe 4f       	sbci	r31, 0xFE	; 254
 462:	80 81       	ld	r24, Z
 464:	80 95       	com	r24
 466:	82 bb       	out	0x12, r24	; 18
 468:	8f e1       	ldi	r24, 0x1F	; 31
 46a:	9e e4       	ldi	r25, 0x4E	; 78
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 472:	00 00       	nop
		_delay_ms(5);
		PORTG = 0b00001000;
 474:	88 e0       	ldi	r24, 0x08	; 8
 476:	8c 93       	st	X, r24
		PORTD = ~segment2[hour_10];
 478:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <hour_10>
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	ec 5f       	subi	r30, 0xFC	; 252
 480:	fe 4f       	sbci	r31, 0xFE	; 254
 482:	80 81       	ld	r24, Z
 484:	80 95       	com	r24
 486:	82 bb       	out	0x12, r24	; 18
 488:	af e1       	ldi	r26, 0x1F	; 31
 48a:	be e4       	ldi	r27, 0x4E	; 78
 48c:	11 97       	sbiw	r26, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 492:	00 00       	nop
		_delay_ms(5);
		if(phase == 0) PORTG = 0b00000001;	//각 자릭 단계에 해당될때 세그먼트 전원 키기
 494:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <phase>
 498:	81 11       	cpse	r24, r1
 49a:	03 c0       	rjmp	.+6      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		if(phase == 1) PORTG = 0b00000010;
 4a2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <phase>
 4a6:	81 30       	cpi	r24, 0x01	; 1
 4a8:	19 f4       	brne	.+6      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4aa:	82 e0       	ldi	r24, 0x02	; 2
 4ac:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		if(phase == 2) PORTG = 0b00000100;
 4b0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <phase>
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	19 f4       	brne	.+6      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4b8:	84 e0       	ldi	r24, 0x04	; 4
 4ba:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		if(phase == 3) PORTG = 0b00001000;
 4be:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <phase>
 4c2:	83 30       	cpi	r24, 0x03	; 3
 4c4:	19 f4       	brne	.+6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4c6:	88 e0       	ldi	r24, 0x08	; 8
 4c8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		PORTD = 0b01111111;	//켜진 세그먼트에 dot 하나만 출력
 4cc:	8f e7       	ldi	r24, 0x7F	; 127
 4ce:	82 bb       	out	0x12, r24	; 18
 4d0:	8f e1       	ldi	r24, 0x1F	; 31
 4d2:	9e e4       	ldi	r25, 0x4E	; 78
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4da:	00 00       	nop
		_delay_ms(5);
	}
	if(mode == 1 && beep == 0)
 4dc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mode>
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e4:	8e c0       	rjmp	.+284    	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 4e6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <beep>
 4ea:	81 11       	cpse	r24, r1
 4ec:	8a c0       	rjmp	.+276    	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
	{
		hour_10 = l / 36000;
 4ee:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4f2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 4fa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 4fe:	20 ea       	ldi	r18, 0xA0	; 160
 500:	3c e8       	ldi	r19, 0x8C	; 140
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	49 d1       	rcall	.+658    	; 0x79a <__divmodsi4>
 508:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <hour_10>
		hour_1 = (l % 36000) / 3600;
 50c:	20 e1       	ldi	r18, 0x10	; 16
 50e:	3e e0       	ldi	r19, 0x0E	; 14
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	50 e0       	ldi	r21, 0x00	; 0
 514:	42 d1       	rcall	.+644    	; 0x79a <__divmodsi4>
 516:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <hour_1>
		min_10 = ((l % 36000) % 3600) / 600;
 51a:	28 e5       	ldi	r18, 0x58	; 88
 51c:	32 e0       	ldi	r19, 0x02	; 2
 51e:	40 e0       	ldi	r20, 0x00	; 0
 520:	50 e0       	ldi	r21, 0x00	; 0
 522:	3b d1       	rcall	.+630    	; 0x79a <__divmodsi4>
 524:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <min_10>
		min_1 = (((l % 36000) % 3600) % 600) / 60;
 528:	2c e3       	ldi	r18, 0x3C	; 60
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	40 e0       	ldi	r20, 0x00	; 0
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	34 d1       	rcall	.+616    	; 0x79a <__divmodsi4>
 532:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <min_1>
 536:	a5 e6       	ldi	r26, 0x65	; 101
		PORTG = 0b00000001;
 538:	b0 e0       	ldi	r27, 0x00	; 0
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	8c 93       	st	X, r24
 53e:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <min_1>
		PORTD = ~segment2[min_1];
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	ec 5f       	subi	r30, 0xFC	; 252
 546:	fe 4f       	sbci	r31, 0xFE	; 254
 548:	80 81       	ld	r24, Z
 54a:	80 95       	com	r24
 54c:	82 bb       	out	0x12, r24	; 18
 54e:	8f e1       	ldi	r24, 0x1F	; 31
 550:	9e e4       	ldi	r25, 0x4E	; 78
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 556:	00 c0       	rjmp	.+0      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 558:	00 00       	nop
 55a:	82 e0       	ldi	r24, 0x02	; 2
		_delay_ms(5);
		PORTG = 0b00000010;
 55c:	8c 93       	st	X, r24
 55e:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <min_10>
		PORTD = ~segment2[min_10];
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	ec 5f       	subi	r30, 0xFC	; 252
 566:	fe 4f       	sbci	r31, 0xFE	; 254
 568:	80 81       	ld	r24, Z
 56a:	80 95       	com	r24
 56c:	82 bb       	out	0x12, r24	; 18
 56e:	8f e1       	ldi	r24, 0x1F	; 31
 570:	9e e4       	ldi	r25, 0x4E	; 78
 572:	01 97       	sbiw	r24, 0x01	; 1
 574:	f1 f7       	brne	.-4      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 576:	00 c0       	rjmp	.+0      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 578:	00 00       	nop
 57a:	84 e0       	ldi	r24, 0x04	; 4
		_delay_ms(5);
		PORTG = 0b00000100;
 57c:	8c 93       	st	X, r24
 57e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <hour_1>
		PORTD = ~segment2[hour_1];
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	ec 5f       	subi	r30, 0xFC	; 252
 586:	fe 4f       	sbci	r31, 0xFE	; 254
 588:	80 81       	ld	r24, Z
 58a:	80 95       	com	r24
 58c:	82 bb       	out	0x12, r24	; 18
 58e:	8f e1       	ldi	r24, 0x1F	; 31
 590:	9e e4       	ldi	r25, 0x4E	; 78
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 596:	00 c0       	rjmp	.+0      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 598:	00 00       	nop
 59a:	88 e0       	ldi	r24, 0x08	; 8
		_delay_ms(5);
		PORTG = 0b00001000;
 59c:	8c 93       	st	X, r24
 59e:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <hour_10>
		PORTD = ~segment2[hour_10];
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	ec 5f       	subi	r30, 0xFC	; 252
 5a6:	fe 4f       	sbci	r31, 0xFE	; 254
 5a8:	80 81       	ld	r24, Z
 5aa:	80 95       	com	r24
 5ac:	82 bb       	out	0x12, r24	; 18
 5ae:	af e1       	ldi	r26, 0x1F	; 31
 5b0:	be e4       	ldi	r27, 0x4E	; 78
 5b2:	11 97       	sbiw	r26, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5b8:	00 00       	nop
 5ba:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <phase>
		_delay_ms(5);
		if(phase == 0) PORTG = 0b00000001;
 5be:	81 11       	cpse	r24, r1
 5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 5c8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <phase>
		if(phase == 1) PORTG = 0b00000010;
 5cc:	81 30       	cpi	r24, 0x01	; 1
 5ce:	19 f4       	brne	.+6      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d0:	82 e0       	ldi	r24, 0x02	; 2
 5d2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 5d6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <phase>
		if(phase == 2) PORTG = 0b00000100;
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	19 f4       	brne	.+6      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5de:	84 e0       	ldi	r24, 0x04	; 4
 5e0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 5e4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <phase>
		if(phase == 3) PORTG = 0b00001000;
 5e8:	83 30       	cpi	r24, 0x03	; 3
 5ea:	19 f4       	brne	.+6      	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5ec:	88 e0       	ldi	r24, 0x08	; 8
 5ee:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 5f2:	8f e7       	ldi	r24, 0x7F	; 127
		PORTD = 0b01111111;
 5f4:	82 bb       	out	0x12, r24	; 18
 5f6:	8f e1       	ldi	r24, 0x1F	; 31
 5f8:	9e e4       	ldi	r25, 0x4E	; 78
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 600:	00 00       	nop
 602:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		_delay_ms(5);
	}
	if(l == t)	//알람시간이 되었을 때
 606:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 60a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 60e:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 612:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <t>
 616:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <t+0x1>
 61a:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <t+0x2>
 61e:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <t+0x3>
 622:	48 17       	cp	r20, r24
 624:	59 07       	cpc	r21, r25
 626:	6a 07       	cpc	r22, r26
 628:	7b 07       	cpc	r23, r27
 62a:	21 f4       	brne	.+8      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 62c:	81 e0       	ldi	r24, 0x01	; 1
	{
		beep = 1;
 62e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <beep>
 632:	05 c0       	rjmp	.+10     	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
 634:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <beep>
	}
	if(beep == 1)	//알람 시간	세그먼트 표시
 638:	81 30       	cpi	r24, 0x01	; 1
 63a:	09 f0       	breq	.+2      	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
 63c:	7e c0       	rjmp	.+252    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
 63e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
	{
		static unsigned char a = 0;
		if(a == 0)
 642:	81 11       	cpse	r24, r1
 644:	6d c0       	rjmp	.+218    	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 646:	85 e0       	ldi	r24, 0x05	; 5
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	e5 e6       	ldi	r30, 0x65	; 101
		{
			for(int i = 0; i < 5; i++)
			{
				PORTG = 0b00001000;
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	38 e0       	ldi	r19, 0x08	; 8
 650:	2f eb       	ldi	r18, 0xBF	; 191
				PORTD = 0b10111111;
 652:	30 83       	st	Z, r19
		static unsigned char a = 0;
		if(a == 0)
		{
			for(int i = 0; i < 5; i++)
			{
				PORTG = 0b00001000;
 654:	22 bb       	out	0x12, r18	; 18
				PORTD = 0b10111111;
 656:	af e1       	ldi	r26, 0x1F	; 31
 658:	be e4       	ldi	r27, 0x4E	; 78
 65a:	11 97       	sbiw	r26, 0x01	; 1
 65c:	f1 f7       	brne	.-4      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 660:	00 00       	nop
 662:	01 97       	sbiw	r24, 0x01	; 1
 664:	b1 f7       	brne	.-20     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
	if(beep == 1)	//알람 시간	세그먼트 표시
	{
		static unsigned char a = 0;
		if(a == 0)
		{
			for(int i = 0; i < 5; i++)
 666:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
				PORTG = 0b00001000;
				PORTD = 0b10111111;
				_delay_ms(5);
			}
		}
		if(a == 1)
 66a:	81 30       	cpi	r24, 0x01	; 1
 66c:	09 f0       	breq	.+2      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 66e:	5c c0       	rjmp	.+184    	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
 670:	85 e0       	ldi	r24, 0x05	; 5
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	e5 e6       	ldi	r30, 0x65	; 101
		{
			for(int i = 0; i < 5; i++)
			{
				PORTG = 0b00000100;
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	34 e0       	ldi	r19, 0x04	; 4
 67a:	2f eb       	ldi	r18, 0xBF	; 191
				PORTD = 0b10111111;
 67c:	30 83       	st	Z, r19
		}
		if(a == 1)
		{
			for(int i = 0; i < 5; i++)
			{
				PORTG = 0b00000100;
 67e:	22 bb       	out	0x12, r18	; 18
				PORTD = 0b10111111;
 680:	af e1       	ldi	r26, 0x1F	; 31
 682:	be e4       	ldi	r27, 0x4E	; 78
 684:	11 97       	sbiw	r26, 0x01	; 1
 686:	f1 f7       	brne	.-4      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 688:	00 c0       	rjmp	.+0      	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 68a:	00 00       	nop
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	b1 f7       	brne	.-20     	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
				_delay_ms(5);
			}
		}
		if(a == 1)
		{
			for(int i = 0; i < 5; i++)
 690:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
				PORTG = 0b00000100;
				PORTD = 0b10111111;
				_delay_ms(5);
			}
		}
		if(a == 2)
 694:	82 30       	cpi	r24, 0x02	; 2
 696:	09 f0       	breq	.+2      	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 698:	4a c0       	rjmp	.+148    	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 69a:	85 e0       	ldi	r24, 0x05	; 5
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	e5 e6       	ldi	r30, 0x65	; 101
		{
			for(int i = 0; i < 5; i++)
			{
				PORTG = 0b00000010;
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	32 e0       	ldi	r19, 0x02	; 2
 6a4:	2f eb       	ldi	r18, 0xBF	; 191
				PORTD = 0b10111111;
 6a6:	30 83       	st	Z, r19
		}
		if(a == 2)
		{
			for(int i = 0; i < 5; i++)
			{
				PORTG = 0b00000010;
 6a8:	22 bb       	out	0x12, r18	; 18
				PORTD = 0b10111111;
 6aa:	af e1       	ldi	r26, 0x1F	; 31
 6ac:	be e4       	ldi	r27, 0x4E	; 78
 6ae:	11 97       	sbiw	r26, 0x01	; 1
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 6b4:	00 00       	nop
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	b1 f7       	brne	.-20     	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
				_delay_ms(5);
			}
		}
		if(a == 2)
		{
			for(int i = 0; i < 5; i++)
 6ba:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
				PORTG = 0b00000010;
				PORTD = 0b10111111;
				_delay_ms(5);
			}
		}
		if(a == 3)
 6be:	83 30       	cpi	r24, 0x03	; 3
 6c0:	c9 f5       	brne	.+114    	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
 6c2:	85 e0       	ldi	r24, 0x05	; 5
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	e5 e6       	ldi	r30, 0x65	; 101
		{
			for(int i = 0; i < 5; i++)
			{
				PORTG = 0b00000001;
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	31 e0       	ldi	r19, 0x01	; 1
 6cc:	2f eb       	ldi	r18, 0xBF	; 191
				PORTD = 0b10111111;
 6ce:	30 83       	st	Z, r19
		}
		if(a == 3)
		{
			for(int i = 0; i < 5; i++)
			{
				PORTG = 0b00000001;
 6d0:	22 bb       	out	0x12, r18	; 18
				PORTD = 0b10111111;
 6d2:	af e1       	ldi	r26, 0x1F	; 31
 6d4:	be e4       	ldi	r27, 0x4E	; 78
 6d6:	11 97       	sbiw	r26, 0x01	; 1
 6d8:	f1 f7       	brne	.-4      	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 6dc:	00 00       	nop
 6de:	01 97       	sbiw	r24, 0x01	; 1
 6e0:	b1 f7       	brne	.-20     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
				_delay_ms(5);
			}
		}
		if(a == 3)
		{
			for(int i = 0; i < 5; i++)
 6e2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
				PORTG = 0b00000001;
				PORTD = 0b10111111;
				_delay_ms(5);
			}
		}
		if(a == 4)
 6e6:	84 30       	cpi	r24, 0x04	; 4
 6e8:	81 f4       	brne	.+32     	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
 6ea:	85 e0       	ldi	r24, 0x05	; 5
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	e5 e6       	ldi	r30, 0x65	; 101
		{
			for(int i = 0; i < 5; i++)
			{
				PORTG = 0b00001111;
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	3f e0       	ldi	r19, 0x0F	; 15
 6f4:	2f eb       	ldi	r18, 0xBF	; 191
				PORTD = 0b10111111;
 6f6:	30 83       	st	Z, r19
		}
		if(a == 4)
		{
			for(int i = 0; i < 5; i++)
			{
				PORTG = 0b00001111;
 6f8:	22 bb       	out	0x12, r18	; 18
				PORTD = 0b10111111;
 6fa:	af e1       	ldi	r26, 0x1F	; 31
 6fc:	be e4       	ldi	r27, 0x4E	; 78
 6fe:	11 97       	sbiw	r26, 0x01	; 1
 700:	f1 f7       	brne	.-4      	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
 702:	00 c0       	rjmp	.+0      	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 704:	00 00       	nop
 706:	01 97       	sbiw	r24, 0x01	; 1
 708:	b1 f7       	brne	.-20     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
				_delay_ms(5);
			}
		}
		if(a == 4)
		{
			for(int i = 0; i < 5; i++)
 70a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
				PORTG = 0b00001111;
				PORTD = 0b10111111;
				_delay_ms(5);
			}
		}
		a++;
 70e:	8f 5f       	subi	r24, 0xFF	; 255
 710:	85 30       	cpi	r24, 0x05	; 5
		if(a == 5) a = 0;
 712:	19 f0       	breq	.+6      	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>
 714:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
				PORTG = 0b00001111;
				PORTD = 0b10111111;
				_delay_ms(5);
			}
		}
		a++;
 718:	08 95       	ret
 71a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
		if(a == 5) a = 0;
 71e:	08 95       	ret
	}
}
 720:	81 30       	cpi	r24, 0x01	; 1
				PORTG = 0b00001000;
				PORTD = 0b10111111;
				_delay_ms(5);
			}
		}
		if(a == 1)
 722:	09 f0       	breq	.+2      	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
 724:	b5 cf       	rjmp	.-150    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 726:	a4 cf       	rjmp	.-184    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 728:	82 30       	cpi	r24, 0x02	; 2
				PORTG = 0b00000100;
				PORTD = 0b10111111;
				_delay_ms(5);
			}
		}
		if(a == 2)
 72a:	39 f6       	brne	.-114    	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
 72c:	b6 cf       	rjmp	.-148    	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 72e:	83 30       	cpi	r24, 0x03	; 3
				PORTG = 0b00000010;
				PORTD = 0b10111111;
				_delay_ms(5);
			}
		}
		if(a == 3)
 730:	c1 f6       	brne	.-80     	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 732:	c7 cf       	rjmp	.-114    	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 734:	84 30       	cpi	r24, 0x04	; 4
				PORTG = 0b00000001;
				PORTD = 0b10111111;
				_delay_ms(5);
			}
		}
		if(a == 4)
 736:	49 f7       	brne	.-46     	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
 738:	d8 cf       	rjmp	.-80     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
 73a:	08 95       	ret

0000073c <main>:
 73c:	8f ef       	ldi	r24, 0xFF	; 255
void display();

int main(void)
{
	
	DDRD = 0xFF;	//세그먼트 표현부분 출력
 73e:	81 bb       	out	0x11, r24	; 17
	DDRG = 0xFF;	//세가먼트 전원부분 출력
 740:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRE = 0x0; //스위치 연결 부분 입력
 744:	12 b8       	out	0x02, r1	; 2

	EICRB = (2 << ISC40) | (2 << ISC50) | (2 << ISC60) | (2 << ISC70); //INT 4,5,6,7 하강에지
 746:	8a ea       	ldi	r24, 0xAA	; 170
 748:	8a bf       	out	0x3a, r24	; 58
	EIMSK = (1 << INT4) |  (1 << INT5) |  (1 << INT6) |  (1 << INT7);	//INT 모두 켜기
 74a:	80 ef       	ldi	r24, 0xF0	; 240
 74c:	89 bf       	out	0x39, r24	; 57

	sei();	//모든 INT 활성화
 74e:	78 94       	sei

	while(1)
	{
		t++;
 750:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <t>
 754:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <t+0x1>
 758:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <t+0x2>
 75c:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <t+0x3>
 760:	01 96       	adiw	r24, 0x01	; 1
 762:	a1 1d       	adc	r26, r1
 764:	b1 1d       	adc	r27, r1
		if(t >= 86400) t = 0; //24시 0으로
 766:	80 38       	cpi	r24, 0x80	; 128
 768:	21 e5       	ldi	r18, 0x51	; 81
 76a:	92 07       	cpc	r25, r18
 76c:	21 e0       	ldi	r18, 0x01	; 1
 76e:	a2 07       	cpc	r26, r18
 770:	b1 05       	cpc	r27, r1
 772:	4c f4       	brge	.+18     	; 0x786 <main+0x4a>

	sei();	//모든 INT 활성화

	while(1)
	{
		t++;
 774:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <t>
 778:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <t+0x1>
 77c:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <t+0x2>
 780:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <t+0x3>
 784:	08 c0       	rjmp	.+16     	; 0x796 <main+0x5a>
		if(t >= 86400) t = 0; //24시 0으로
 786:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <t>
 78a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <t+0x1>
 78e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <t+0x2>
 792:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <t+0x3>
		
		display();	//세그먼트 화면 출력
 796:	10 de       	rcall	.-992    	; 0x3b8 <display>
	}
 798:	db cf       	rjmp	.-74     	; 0x750 <main+0x14>

0000079a <__divmodsi4>:
 79a:	05 2e       	mov	r0, r21
 79c:	97 fb       	bst	r25, 7
 79e:	16 f4       	brtc	.+4      	; 0x7a4 <__divmodsi4+0xa>
 7a0:	00 94       	com	r0
 7a2:	0f d0       	rcall	.+30     	; 0x7c2 <__negsi2>
 7a4:	57 fd       	sbrc	r21, 7
 7a6:	05 d0       	rcall	.+10     	; 0x7b2 <__divmodsi4_neg2>
 7a8:	14 d0       	rcall	.+40     	; 0x7d2 <__udivmodsi4>
 7aa:	07 fc       	sbrc	r0, 7
 7ac:	02 d0       	rcall	.+4      	; 0x7b2 <__divmodsi4_neg2>
 7ae:	46 f4       	brtc	.+16     	; 0x7c0 <__divmodsi4_exit>
 7b0:	08 c0       	rjmp	.+16     	; 0x7c2 <__negsi2>

000007b2 <__divmodsi4_neg2>:
 7b2:	50 95       	com	r21
 7b4:	40 95       	com	r20
 7b6:	30 95       	com	r19
 7b8:	21 95       	neg	r18
 7ba:	3f 4f       	sbci	r19, 0xFF	; 255
 7bc:	4f 4f       	sbci	r20, 0xFF	; 255
 7be:	5f 4f       	sbci	r21, 0xFF	; 255

000007c0 <__divmodsi4_exit>:
 7c0:	08 95       	ret

000007c2 <__negsi2>:
 7c2:	90 95       	com	r25
 7c4:	80 95       	com	r24
 7c6:	70 95       	com	r23
 7c8:	61 95       	neg	r22
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	8f 4f       	sbci	r24, 0xFF	; 255
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	08 95       	ret

000007d2 <__udivmodsi4>:
 7d2:	a1 e2       	ldi	r26, 0x21	; 33
 7d4:	1a 2e       	mov	r1, r26
 7d6:	aa 1b       	sub	r26, r26
 7d8:	bb 1b       	sub	r27, r27
 7da:	fd 01       	movw	r30, r26
 7dc:	0d c0       	rjmp	.+26     	; 0x7f8 <__udivmodsi4_ep>

000007de <__udivmodsi4_loop>:
 7de:	aa 1f       	adc	r26, r26
 7e0:	bb 1f       	adc	r27, r27
 7e2:	ee 1f       	adc	r30, r30
 7e4:	ff 1f       	adc	r31, r31
 7e6:	a2 17       	cp	r26, r18
 7e8:	b3 07       	cpc	r27, r19
 7ea:	e4 07       	cpc	r30, r20
 7ec:	f5 07       	cpc	r31, r21
 7ee:	20 f0       	brcs	.+8      	; 0x7f8 <__udivmodsi4_ep>
 7f0:	a2 1b       	sub	r26, r18
 7f2:	b3 0b       	sbc	r27, r19
 7f4:	e4 0b       	sbc	r30, r20
 7f6:	f5 0b       	sbc	r31, r21

000007f8 <__udivmodsi4_ep>:
 7f8:	66 1f       	adc	r22, r22
 7fa:	77 1f       	adc	r23, r23
 7fc:	88 1f       	adc	r24, r24
 7fe:	99 1f       	adc	r25, r25
 800:	1a 94       	dec	r1
 802:	69 f7       	brne	.-38     	; 0x7de <__udivmodsi4_loop>
 804:	60 95       	com	r22
 806:	70 95       	com	r23
 808:	80 95       	com	r24
 80a:	90 95       	com	r25
 80c:	9b 01       	movw	r18, r22
 80e:	ac 01       	movw	r20, r24
 810:	bd 01       	movw	r22, r26
 812:	cf 01       	movw	r24, r30
 814:	08 95       	ret

00000816 <_exit>:
 816:	f8 94       	cli

00000818 <__stop_program>:
 818:	ff cf       	rjmp	.-2      	; 0x818 <__stop_program>
