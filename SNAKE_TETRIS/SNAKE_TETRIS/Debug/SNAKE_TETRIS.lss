
SNAKE_TETRIS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000061a  00800100  00004cce  00004d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004cce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a5  0080071a  0080071a  0000537c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000537c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000053d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00005418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ee9  00000000  00000000  00005648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6d  00000000  00000000  00007531  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002019  00000000  00000000  0000819e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000095c  00000000  00000000  0000a1b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094e  00000000  00000000  0000ab14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001404  00000000  00000000  0000b462  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000c866  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c1       	rjmp	.+674    	; 0x2a4 <__ctors_end>
       2:	00 00       	nop
       4:	6e c1       	rjmp	.+732    	; 0x2e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c1       	rjmp	.+728    	; 0x2e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c1       	rjmp	.+724    	; 0x2e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c1       	rjmp	.+720    	; 0x2e2 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_5>
      18:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__vector_6>
      1c:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__vector_7>
      20:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <__vector_8>
      24:	5e c1       	rjmp	.+700    	; 0x2e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c1       	rjmp	.+696    	; 0x2e2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5a c1       	rjmp	.+692    	; 0x2e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__vector_12>
      34:	56 c1       	rjmp	.+684    	; 0x2e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	54 c1       	rjmp	.+680    	; 0x2e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	52 c1       	rjmp	.+676    	; 0x2e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c1       	rjmp	.+672    	; 0x2e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	4e c1       	rjmp	.+668    	; 0x2e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	4c c1       	rjmp	.+664    	; 0x2e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c1       	rjmp	.+660    	; 0x2e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	48 c1       	rjmp	.+656    	; 0x2e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	46 c1       	rjmp	.+652    	; 0x2e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c1       	rjmp	.+648    	; 0x2e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c1       	rjmp	.+644    	; 0x2e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c1       	rjmp	.+640    	; 0x2e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	3e c1       	rjmp	.+636    	; 0x2e2 <__bad_interrupt>
      66:	00 00       	nop
      68:	3c c1       	rjmp	.+632    	; 0x2e2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3a c1       	rjmp	.+628    	; 0x2e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c1       	rjmp	.+624    	; 0x2e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c1       	rjmp	.+620    	; 0x2e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c1       	rjmp	.+616    	; 0x2e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c1       	rjmp	.+612    	; 0x2e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c1       	rjmp	.+608    	; 0x2e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c1       	rjmp	.+604    	; 0x2e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	2c c1       	rjmp	.+600    	; 0x2e2 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	00 00       	nop
      92:	00 5f       	subi	r16, 0xF0	; 240
      94:	00 00       	nop
      96:	00 07       	cpc	r16, r16
      98:	00 07       	cpc	r16, r16
      9a:	00 14       	cp	r0, r0
      9c:	7f 14       	cp	r7, r15
      9e:	7f 14       	cp	r7, r15
      a0:	24 2a       	or	r2, r20
      a2:	7f 2a       	or	r7, r31
      a4:	12 23       	and	r17, r18
      a6:	13 08       	sbc	r1, r3
      a8:	64 62       	ori	r22, 0x24	; 36
      aa:	36 49       	sbci	r19, 0x96	; 150
      ac:	55 22       	and	r5, r21
      ae:	50 00       	.word	0x0050	; ????
      b0:	05 03       	mulsu	r16, r21
      b2:	00 00       	nop
      b4:	00 1c       	adc	r0, r0
      b6:	22 41       	sbci	r18, 0x12	; 18
      b8:	00 00       	nop
      ba:	41 22       	and	r4, r17
      bc:	1c 00       	.word	0x001c	; ????
      be:	14 08       	sbc	r1, r4
      c0:	3e 08       	sbc	r3, r14
      c2:	14 08       	sbc	r1, r4
      c4:	08 3e       	cpi	r16, 0xE8	; 232
      c6:	08 08       	sbc	r0, r8
      c8:	00 50       	subi	r16, 0x00	; 0
      ca:	30 00       	.word	0x0030	; ????
      cc:	00 08       	sbc	r0, r0
      ce:	08 08       	sbc	r0, r8
      d0:	08 08       	sbc	r0, r8
      d2:	00 60       	ori	r16, 0x00	; 0
      d4:	60 00       	.word	0x0060	; ????
      d6:	00 20       	and	r0, r0
      d8:	10 08       	sbc	r1, r0
      da:	04 02       	muls	r16, r20
      dc:	3e 51       	subi	r19, 0x1E	; 30
      de:	49 45       	sbci	r20, 0x59	; 89
      e0:	3e 00       	.word	0x003e	; ????
      e2:	42 7f       	andi	r20, 0xF2	; 242
      e4:	40 00       	.word	0x0040	; ????
      e6:	42 61       	ori	r20, 0x12	; 18
      e8:	51 49       	sbci	r21, 0x91	; 145
      ea:	46 21       	and	r20, r6
      ec:	41 45       	sbci	r20, 0x51	; 81
      ee:	4b 31       	cpi	r20, 0x1B	; 27
      f0:	18 14       	cp	r1, r8
      f2:	12 7f       	andi	r17, 0xF2	; 242
      f4:	10 27       	eor	r17, r16
      f6:	45 45       	sbci	r20, 0x55	; 85
      f8:	45 39       	cpi	r20, 0x95	; 149
      fa:	3c 4a       	sbci	r19, 0xAC	; 172
      fc:	49 49       	sbci	r20, 0x99	; 153
      fe:	30 01       	movw	r6, r0
     100:	71 09       	sbc	r23, r1
     102:	05 03       	mulsu	r16, r21
     104:	36 49       	sbci	r19, 0x96	; 150
     106:	49 49       	sbci	r20, 0x99	; 153
     108:	36 06       	cpc	r3, r22
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	29 1e       	adc	r2, r25
     10e:	00 36       	cpi	r16, 0x60	; 96
     110:	36 00       	.word	0x0036	; ????
     112:	00 00       	nop
     114:	56 36       	cpi	r21, 0x66	; 102
     116:	00 00       	nop
     118:	08 14       	cp	r0, r8
     11a:	22 41       	sbci	r18, 0x12	; 18
     11c:	00 14       	cp	r0, r0
     11e:	14 14       	cp	r1, r4
     120:	14 14       	cp	r1, r4
     122:	00 41       	sbci	r16, 0x10	; 16
     124:	22 14       	cp	r2, r2
     126:	08 02       	muls	r16, r24
     128:	01 51       	subi	r16, 0x11	; 17
     12a:	09 06       	cpc	r0, r25
     12c:	32 49       	sbci	r19, 0x92	; 146
     12e:	79 41       	sbci	r23, 0x19	; 25
     130:	3e 7e       	andi	r19, 0xEE	; 238
     132:	11 11       	cpse	r17, r1
     134:	11 7e       	andi	r17, 0xE1	; 225
     136:	7f 49       	sbci	r23, 0x9F	; 159
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	36 3e       	cpi	r19, 0xE6	; 230
     13c:	41 41       	sbci	r20, 0x11	; 17
     13e:	41 22       	and	r4, r17
     140:	7f 41       	sbci	r23, 0x1F	; 31
     142:	41 22       	and	r4, r17
     144:	1c 7f       	andi	r17, 0xFC	; 252
     146:	49 49       	sbci	r20, 0x99	; 153
     148:	49 41       	sbci	r20, 0x19	; 25
     14a:	7f 09       	sbc	r23, r15
     14c:	09 09       	sbc	r16, r9
     14e:	01 3e       	cpi	r16, 0xE1	; 225
     150:	41 49       	sbci	r20, 0x91	; 145
     152:	49 7a       	andi	r20, 0xA9	; 169
     154:	7f 08       	sbc	r7, r15
     156:	08 08       	sbc	r0, r8
     158:	7f 00       	.word	0x007f	; ????
     15a:	41 7f       	andi	r20, 0xF1	; 241
     15c:	41 00       	.word	0x0041	; ????
     15e:	20 40       	sbci	r18, 0x00	; 0
     160:	41 3f       	cpi	r20, 0xF1	; 241
     162:	01 7f       	andi	r16, 0xF1	; 241
     164:	08 14       	cp	r0, r8
     166:	22 41       	sbci	r18, 0x12	; 18
     168:	7f 40       	sbci	r23, 0x0F	; 15
     16a:	40 40       	sbci	r20, 0x00	; 0
     16c:	40 7f       	andi	r20, 0xF0	; 240
     16e:	02 0c       	add	r0, r2
     170:	02 7f       	andi	r16, 0xF2	; 242
     172:	7f 04       	cpc	r7, r15
     174:	08 10       	cpse	r0, r8
     176:	7f 3e       	cpi	r23, 0xEF	; 239
     178:	41 41       	sbci	r20, 0x11	; 17
     17a:	41 3e       	cpi	r20, 0xE1	; 225
     17c:	7f 09       	sbc	r23, r15
     17e:	09 09       	sbc	r16, r9
     180:	06 3e       	cpi	r16, 0xE6	; 230
     182:	41 51       	subi	r20, 0x11	; 17
     184:	21 5e       	subi	r18, 0xE1	; 225
     186:	7f 09       	sbc	r23, r15
     188:	19 29       	or	r17, r9
     18a:	46 46       	sbci	r20, 0x66	; 102
     18c:	49 49       	sbci	r20, 0x99	; 153
     18e:	49 31       	cpi	r20, 0x19	; 25
     190:	01 01       	movw	r0, r2
     192:	7f 01       	movw	r14, r30
     194:	01 3f       	cpi	r16, 0xF1	; 241
     196:	40 40       	sbci	r20, 0x00	; 0
     198:	40 3f       	cpi	r20, 0xF0	; 240
     19a:	1f 20       	and	r1, r15
     19c:	40 20       	and	r4, r0
     19e:	1f 3f       	cpi	r17, 0xFF	; 255
     1a0:	40 38       	cpi	r20, 0x80	; 128
     1a2:	40 3f       	cpi	r20, 0xF0	; 240
     1a4:	63 14       	cp	r6, r3
     1a6:	08 14       	cp	r0, r8
     1a8:	63 07       	cpc	r22, r19
     1aa:	08 70       	andi	r16, 0x08	; 8
     1ac:	08 07       	cpc	r16, r24
     1ae:	61 51       	subi	r22, 0x11	; 17
     1b0:	49 45       	sbci	r20, 0x59	; 89
     1b2:	43 00       	.word	0x0043	; ????
     1b4:	7f 41       	sbci	r23, 0x1F	; 31
     1b6:	41 00       	.word	0x0041	; ????
     1b8:	02 04       	cpc	r0, r2
     1ba:	08 10       	cpse	r0, r8
     1bc:	20 00       	.word	0x0020	; ????
     1be:	41 41       	sbci	r20, 0x11	; 17
     1c0:	7f 00       	.word	0x007f	; ????
     1c2:	04 02       	muls	r16, r20
     1c4:	01 02       	muls	r16, r17
     1c6:	04 40       	sbci	r16, 0x04	; 4
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	40 40       	sbci	r20, 0x00	; 0
     1cc:	00 01       	movw	r0, r0
     1ce:	02 04       	cpc	r0, r2
     1d0:	00 20       	and	r0, r0
     1d2:	54 54       	subi	r21, 0x44	; 68
     1d4:	54 78       	andi	r21, 0x84	; 132
     1d6:	7f 48       	sbci	r23, 0x8F	; 143
     1d8:	44 44       	sbci	r20, 0x44	; 68
     1da:	38 38       	cpi	r19, 0x88	; 136
     1dc:	44 44       	sbci	r20, 0x44	; 68
     1de:	44 20       	and	r4, r4
     1e0:	38 44       	sbci	r19, 0x48	; 72
     1e2:	44 48       	sbci	r20, 0x84	; 132
     1e4:	7f 38       	cpi	r23, 0x8F	; 143
     1e6:	54 54       	subi	r21, 0x44	; 68
     1e8:	54 18       	sub	r5, r4
     1ea:	08 7e       	andi	r16, 0xE8	; 232
     1ec:	09 01       	movw	r0, r18
     1ee:	02 0c       	add	r0, r2
     1f0:	52 52       	subi	r21, 0x22	; 34
     1f2:	52 3e       	cpi	r21, 0xE2	; 226
     1f4:	7f 08       	sbc	r7, r15
     1f6:	04 04       	cpc	r0, r4
     1f8:	78 00       	.word	0x0078	; ????
     1fa:	44 7d       	andi	r20, 0xD4	; 212
     1fc:	40 00       	.word	0x0040	; ????
     1fe:	20 40       	sbci	r18, 0x00	; 0
     200:	44 3d       	cpi	r20, 0xD4	; 212
     202:	00 7f       	andi	r16, 0xF0	; 240
     204:	10 28       	or	r1, r0
     206:	44 00       	.word	0x0044	; ????
     208:	00 41       	sbci	r16, 0x10	; 16
     20a:	7f 40       	sbci	r23, 0x0F	; 15
     20c:	00 7c       	andi	r16, 0xC0	; 192
     20e:	04 18       	sub	r0, r4
     210:	04 78       	andi	r16, 0x84	; 132
     212:	7c 08       	sbc	r7, r12
     214:	04 04       	cpc	r0, r4
     216:	78 38       	cpi	r23, 0x88	; 136
     218:	44 44       	sbci	r20, 0x44	; 68
     21a:	44 38       	cpi	r20, 0x84	; 132
     21c:	7c 14       	cp	r7, r12
     21e:	14 14       	cp	r1, r4
     220:	08 08       	sbc	r0, r8
     222:	14 14       	cp	r1, r4
     224:	18 7c       	andi	r17, 0xC8	; 200
     226:	7c 08       	sbc	r7, r12
     228:	04 04       	cpc	r0, r4
     22a:	08 48       	sbci	r16, 0x88	; 136
     22c:	54 54       	subi	r21, 0x44	; 68
     22e:	54 20       	and	r5, r4
     230:	04 3f       	cpi	r16, 0xF4	; 244
     232:	44 40       	sbci	r20, 0x04	; 4
     234:	20 3c       	cpi	r18, 0xC0	; 192
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	20 7c       	andi	r18, 0xC0	; 192
     23a:	1c 20       	and	r1, r12
     23c:	40 20       	and	r4, r0
     23e:	1c 3c       	cpi	r17, 0xCC	; 204
     240:	40 30       	cpi	r20, 0x00	; 0
     242:	40 3c       	cpi	r20, 0xC0	; 192
     244:	44 28       	or	r4, r4
     246:	10 28       	or	r1, r0
     248:	44 0c       	add	r4, r4
     24a:	50 50       	subi	r21, 0x00	; 0
     24c:	50 3c       	cpi	r21, 0xC0	; 192
     24e:	44 64       	ori	r20, 0x44	; 68
     250:	54 4c       	sbci	r21, 0xC4	; 196
     252:	44 00       	.word	0x0044	; ????
     254:	08 36       	cpi	r16, 0x68	; 104
     256:	41 00       	.word	0x0041	; ????
     258:	00 00       	nop
     25a:	7f 00       	.word	0x007f	; ????
     25c:	00 00       	nop
     25e:	41 36       	cpi	r20, 0x61	; 97
     260:	08 00       	.word	0x0008	; ????
     262:	10 08       	sbc	r1, r0
     264:	08 10       	cpse	r0, r8
     266:	08 78       	andi	r16, 0x88	; 136
     268:	46 41       	sbci	r20, 0x16	; 22
     26a:	46 78       	andi	r20, 0x86	; 134

0000026c <tetriminos>:
     26c:	00 66 00 66 00 66 00 66 00 f0 44 44 00 f0 44 44     .f.f.f.f..DD..DD
     27c:	00 6c 40 8c 00 6c 40 8c 00 c6 80 4c 00 c6 80 4c     .l@..l@....L...L
     28c:	00 4e 80 8c 00 e4 40 4c 00 2e 40 c4 00 e8 c0 88     .N....@L..@.....
     29c:	00 8e c0 44 00 e2 80 c8                             ...D....

000002a4 <__ctors_end>:
     2a4:	11 24       	eor	r1, r1
     2a6:	1f be       	out	0x3f, r1	; 63
     2a8:	cf ef       	ldi	r28, 0xFF	; 255
     2aa:	d0 e1       	ldi	r29, 0x10	; 16
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	cd bf       	out	0x3d, r28	; 61

000002b0 <__do_copy_data>:
     2b0:	17 e0       	ldi	r17, 0x07	; 7
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	b1 e0       	ldi	r27, 0x01	; 1
     2b6:	ee ec       	ldi	r30, 0xCE	; 206
     2b8:	fc e4       	ldi	r31, 0x4C	; 76
     2ba:	00 e0       	ldi	r16, 0x00	; 0
     2bc:	0b bf       	out	0x3b, r16	; 59
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x14>
     2c0:	07 90       	elpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	aa 31       	cpi	r26, 0x1A	; 26
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0x10>

000002ca <__do_clear_bss>:
     2ca:	28 e0       	ldi	r18, 0x08	; 8
     2cc:	aa e1       	ldi	r26, 0x1A	; 26
     2ce:	b7 e0       	ldi	r27, 0x07	; 7
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	af 3b       	cpi	r26, 0xBF	; 191
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <main>
     2de:	0c 94 65 26 	jmp	0x4cca	; 0x4cca <_exit>

000002e2 <__bad_interrupt>:
     2e2:	8e ce       	rjmp	.-740    	; 0x0 <__vectors>

000002e4 <get_ch_data>:
    {0x10, 0x08, 0x08, 0x10, 0x08}, // 7e ~
    {0x78, 0x46, 0x41, 0x46, 0x78}, // 7f 
};

void get_ch_data(char ch, uint8_t *buffer)
{
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	28 97       	sbiw	r28, 0x08	; 8
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	cd bf       	out	0x3d, r28	; 61
     2f8:	8e 83       	std	Y+6, r24	; 0x06
     2fa:	78 87       	std	Y+8, r23	; 0x08
     2fc:	6f 83       	std	Y+7, r22	; 0x07
    int     i;

    for (i=0; i<5; i++)
     2fe:	1a 82       	std	Y+2, r1	; 0x02
     300:	19 82       	std	Y+1, r1	; 0x01
     302:	29 c0       	rjmp	.+82     	; 0x356 <get_ch_data+0x72>
    {
        *buffer++ = pgm_read_byte(&ASCII[ch - ' '][i]);
     304:	2f 81       	ldd	r18, Y+7	; 0x07
     306:	38 85       	ldd	r19, Y+8	; 0x08
     308:	c9 01       	movw	r24, r18
     30a:	01 96       	adiw	r24, 0x01	; 1
     30c:	98 87       	std	Y+8, r25	; 0x08
     30e:	8f 83       	std	Y+7, r24	; 0x07
     310:	8e 81       	ldd	r24, Y+6	; 0x06
     312:	08 2e       	mov	r0, r24
     314:	00 0c       	add	r0, r0
     316:	99 0b       	sbc	r25, r25
     318:	ac 01       	movw	r20, r24
     31a:	40 52       	subi	r20, 0x20	; 32
     31c:	51 09       	sbc	r21, r1
     31e:	ca 01       	movw	r24, r20
     320:	88 0f       	add	r24, r24
     322:	99 1f       	adc	r25, r25
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	84 0f       	add	r24, r20
     32a:	95 1f       	adc	r25, r21
     32c:	49 81       	ldd	r20, Y+1	; 0x01
     32e:	5a 81       	ldd	r21, Y+2	; 0x02
     330:	84 0f       	add	r24, r20
     332:	95 1f       	adc	r25, r21
     334:	84 57       	subi	r24, 0x74	; 116
     336:	9f 4f       	sbci	r25, 0xFF	; 255
     338:	9c 83       	std	Y+4, r25	; 0x04
     33a:	8b 83       	std	Y+3, r24	; 0x03
     33c:	8b 81       	ldd	r24, Y+3	; 0x03
     33e:	9c 81       	ldd	r25, Y+4	; 0x04
     340:	fc 01       	movw	r30, r24
     342:	84 91       	lpm	r24, Z
     344:	8d 83       	std	Y+5, r24	; 0x05
     346:	8d 81       	ldd	r24, Y+5	; 0x05
     348:	f9 01       	movw	r30, r18
     34a:	80 83       	st	Z, r24

void get_ch_data(char ch, uint8_t *buffer)
{
    int     i;

    for (i=0; i<5; i++)
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	9a 81       	ldd	r25, Y+2	; 0x02
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	9a 83       	std	Y+2, r25	; 0x02
     354:	89 83       	std	Y+1, r24	; 0x01
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	9a 81       	ldd	r25, Y+2	; 0x02
     35a:	05 97       	sbiw	r24, 0x05	; 5
     35c:	9c f2       	brlt	.-90     	; 0x304 <get_ch_data+0x20>
    {
        *buffer++ = pgm_read_byte(&ASCII[ch - ' '][i]);
    }
    *buffer = 0;
     35e:	8f 81       	ldd	r24, Y+7	; 0x07
     360:	98 85       	ldd	r25, Y+8	; 0x08
     362:	fc 01       	movw	r30, r24
     364:	10 82       	st	Z, r1
}
     366:	00 00       	nop
     368:	28 96       	adiw	r28, 0x08	; 8
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	de bf       	out	0x3e, r29	; 62
     370:	0f be       	out	0x3f, r0	; 63
     372:	cd bf       	out	0x3d, r28	; 61
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <twiStart>:
        return -1;

    twi_stop();

    return 0;
}
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	80 e7       	ldi	r24, 0x70	; 112
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	24 ea       	ldi	r18, 0xA4	; 164
     388:	fc 01       	movw	r30, r24
     38a:	24 83       	std	Z+4, r18	; 0x04
     38c:	00 00       	nop
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <twiStop>:
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	80 e7       	ldi	r24, 0x70	; 112
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	24 e9       	ldi	r18, 0x94	; 148
     3a2:	fc 01       	movw	r30, r24
     3a4:	24 83       	std	Z+4, r18	; 0x04
     3a6:	00 00       	nop
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <twiWaitAck>:
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	00 00       	nop
     3b8:	80 e7       	ldi	r24, 0x70	; 112
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	fc 01       	movw	r30, r24
     3be:	84 81       	ldd	r24, Z+4	; 0x04
     3c0:	88 23       	and	r24, r24
     3c2:	d4 f7       	brge	.-12     	; 0x3b8 <twiWaitAck+0xa>
     3c4:	00 00       	nop
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <twiChkAck>:
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	80 e7       	ldi	r24, 0x70	; 112
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	fc 01       	movw	r30, r24
     3da:	81 81       	ldd	r24, Z+1	; 0x01
     3dc:	88 7f       	andi	r24, 0xF8	; 248
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <twiSendByte>:
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	1f 92       	push	r1
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	89 83       	std	Y+1, r24	; 0x01
     3f0:	80 e7       	ldi	r24, 0x70	; 112
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	29 81       	ldd	r18, Y+1	; 0x01
     3f6:	fc 01       	movw	r30, r24
     3f8:	23 83       	std	Z+3, r18	; 0x03
     3fa:	80 e7       	ldi	r24, 0x70	; 112
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	24 e8       	ldi	r18, 0x84	; 132
     400:	fc 01       	movw	r30, r24
     402:	24 83       	std	Z+4, r18	; 0x04
     404:	00 00       	nop
     406:	0f 90       	pop	r0
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <twi_start>:
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	b1 df       	rcall	.-158    	; 0x37a <twiStart>
     418:	ca df       	rcall	.-108    	; 0x3ae <twiWaitAck>
     41a:	d8 df       	rcall	.-80     	; 0x3cc <twiChkAck>
     41c:	88 30       	cpi	r24, 0x08	; 8
     41e:	19 f0       	breq	.+6      	; 0x426 <twi_start+0x18>
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	9f ef       	ldi	r25, 0xFF	; 255
     424:	02 c0       	rjmp	.+4      	; 0x42a <twi_start+0x1c>
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <twi_stop>:
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	ad df       	rcall	.-166    	; 0x394 <twiStop>
     43a:	00 00       	nop
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <twi_send_dev_addr>:
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	00 d0       	rcall	.+0      	; 0x448 <twi_send_dev_addr+0x6>
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
     44c:	8a 83       	std	Y+2, r24	; 0x02
     44e:	8a 81       	ldd	r24, Y+2	; 0x02
     450:	88 2f       	mov	r24, r24
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	81 70       	andi	r24, 0x01	; 1
     456:	99 27       	eor	r25, r25
     458:	89 2b       	or	r24, r25
     45a:	11 f0       	breq	.+4      	; 0x460 <twi_send_dev_addr+0x1e>
     45c:	80 e4       	ldi	r24, 0x40	; 64
     45e:	01 c0       	rjmp	.+2      	; 0x462 <twi_send_dev_addr+0x20>
     460:	88 e1       	ldi	r24, 0x18	; 24
     462:	89 83       	std	Y+1, r24	; 0x01
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	be df       	rcall	.-132    	; 0x3e4 <twiSendByte>
     468:	a2 df       	rcall	.-188    	; 0x3ae <twiWaitAck>
     46a:	b0 df       	rcall	.-160    	; 0x3cc <twiChkAck>
     46c:	98 2f       	mov	r25, r24
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	98 17       	cp	r25, r24
     472:	19 f0       	breq	.+6      	; 0x47a <twi_send_dev_addr+0x38>
     474:	8f ef       	ldi	r24, 0xFF	; 255
     476:	9f ef       	ldi	r25, 0xFF	; 255
     478:	02 c0       	rjmp	.+4      	; 0x47e <twi_send_dev_addr+0x3c>
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <twi_send_data>:
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	1f 92       	push	r1
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	89 83       	std	Y+1, r24	; 0x01
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	a6 df       	rcall	.-180    	; 0x3e4 <twiSendByte>
     498:	8a df       	rcall	.-236    	; 0x3ae <twiWaitAck>
     49a:	98 df       	rcall	.-208    	; 0x3cc <twiChkAck>
     49c:	88 32       	cpi	r24, 0x28	; 40
     49e:	19 f0       	breq	.+6      	; 0x4a6 <twi_send_data+0x1e>
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	9f ef       	ldi	r25, 0xFF	; 255
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <twi_send_data+0x22>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0f 90       	pop	r0
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <twi_write>:
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
     4ba:	28 97       	sbiw	r28, 0x08	; 8
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	cd bf       	out	0x3d, r28	; 61
     4c6:	8b 83       	std	Y+3, r24	; 0x03
     4c8:	6c 83       	std	Y+4, r22	; 0x04
     4ca:	5e 83       	std	Y+6, r21	; 0x06
     4cc:	4d 83       	std	Y+5, r20	; 0x05
     4ce:	38 87       	std	Y+8, r19	; 0x08
     4d0:	2f 83       	std	Y+7, r18	; 0x07
     4d2:	9d df       	rcall	.-198    	; 0x40e <twi_start>
     4d4:	89 2b       	or	r24, r25
     4d6:	19 f0       	breq	.+6      	; 0x4de <twi_write+0x2c>
     4d8:	8f ef       	ldi	r24, 0xFF	; 255
     4da:	9f ef       	ldi	r25, 0xFF	; 255
     4dc:	30 c0       	rjmp	.+96     	; 0x53e <twi_write+0x8c>
     4de:	8b 81       	ldd	r24, Y+3	; 0x03
     4e0:	88 0f       	add	r24, r24
     4e2:	af df       	rcall	.-162    	; 0x442 <twi_send_dev_addr>
     4e4:	89 2b       	or	r24, r25
     4e6:	19 f0       	breq	.+6      	; 0x4ee <twi_write+0x3c>
     4e8:	8f ef       	ldi	r24, 0xFF	; 255
     4ea:	9f ef       	ldi	r25, 0xFF	; 255
     4ec:	28 c0       	rjmp	.+80     	; 0x53e <twi_write+0x8c>
     4ee:	8c 81       	ldd	r24, Y+4	; 0x04
     4f0:	cb df       	rcall	.-106    	; 0x488 <twi_send_data>
     4f2:	89 2b       	or	r24, r25
     4f4:	19 f0       	breq	.+6      	; 0x4fc <twi_write+0x4a>
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	9f ef       	ldi	r25, 0xFF	; 255
     4fa:	21 c0       	rjmp	.+66     	; 0x53e <twi_write+0x8c>
     4fc:	1a 82       	std	Y+2, r1	; 0x02
     4fe:	19 82       	std	Y+1, r1	; 0x01
     500:	14 c0       	rjmp	.+40     	; 0x52a <twi_write+0x78>
     502:	8d 81       	ldd	r24, Y+5	; 0x05
     504:	9e 81       	ldd	r25, Y+6	; 0x06
     506:	9c 01       	movw	r18, r24
     508:	2f 5f       	subi	r18, 0xFF	; 255
     50a:	3f 4f       	sbci	r19, 0xFF	; 255
     50c:	3e 83       	std	Y+6, r19	; 0x06
     50e:	2d 83       	std	Y+5, r18	; 0x05
     510:	fc 01       	movw	r30, r24
     512:	80 81       	ld	r24, Z
     514:	b9 df       	rcall	.-142    	; 0x488 <twi_send_data>
     516:	89 2b       	or	r24, r25
     518:	19 f0       	breq	.+6      	; 0x520 <twi_write+0x6e>
     51a:	8f ef       	ldi	r24, 0xFF	; 255
     51c:	9f ef       	ldi	r25, 0xFF	; 255
     51e:	0f c0       	rjmp	.+30     	; 0x53e <twi_write+0x8c>
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	9a 81       	ldd	r25, Y+2	; 0x02
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	9a 83       	std	Y+2, r25	; 0x02
     528:	89 83       	std	Y+1, r24	; 0x01
     52a:	29 81       	ldd	r18, Y+1	; 0x01
     52c:	3a 81       	ldd	r19, Y+2	; 0x02
     52e:	8f 81       	ldd	r24, Y+7	; 0x07
     530:	98 85       	ldd	r25, Y+8	; 0x08
     532:	28 17       	cp	r18, r24
     534:	39 07       	cpc	r19, r25
     536:	2c f3       	brlt	.-54     	; 0x502 <twi_write+0x50>
     538:	7b df       	rcall	.-266    	; 0x430 <twi_stop>
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	28 96       	adiw	r28, 0x08	; 8
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <twi_init>:

void twi_init(void)
{
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
    twi->twbr = 5;
     558:	80 e7       	ldi	r24, 0x70	; 112
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	25 e0       	ldi	r18, 0x05	; 5
     55e:	fc 01       	movw	r30, r24
     560:	20 83       	st	Z, r18
    twi->twsr = 0;
     562:	80 e7       	ldi	r24, 0x70	; 112
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	fc 01       	movw	r30, r24
     568:	11 82       	std	Z+1, r1	; 0x01
}
     56a:	00 00       	nop
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	08 95       	ret

00000572 <UART_Init>:
static void ssd1306_output_scan_direction2(bool enable)
{
	uint8_t cmd = 0xc0 | enable;

	ssd1306_cmd(&cmd, 1);
}
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	8a e2       	ldi	r24, 0x2A	; 42
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	28 e1       	ldi	r18, 0x18	; 24
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
     584:	85 e9       	ldi	r24, 0x95	; 149
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	26 e0       	ldi	r18, 0x06	; 6
     58a:	fc 01       	movw	r30, r24
     58c:	20 83       	st	Z, r18
     58e:	89 e2       	ldi	r24, 0x29	; 41
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	27 e6       	ldi	r18, 0x67	; 103
     594:	fc 01       	movw	r30, r24
     596:	20 83       	st	Z, r18
     598:	00 00       	nop
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <UART0_Putch>:
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	1f 92       	push	r1
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	89 83       	std	Y+1, r24	; 0x01
     5ac:	00 00       	nop
     5ae:	8b e2       	ldi	r24, 0x2B	; 43
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	fc 01       	movw	r30, r24
     5b4:	80 81       	ld	r24, Z
     5b6:	88 2f       	mov	r24, r24
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	80 72       	andi	r24, 0x20	; 32
     5bc:	99 27       	eor	r25, r25
     5be:	89 2b       	or	r24, r25
     5c0:	b1 f3       	breq	.-20     	; 0x5ae <UART0_Putch+0xe>
     5c2:	8c e2       	ldi	r24, 0x2C	; 44
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	29 81       	ldd	r18, Y+1	; 0x01
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18
     5cc:	00 00       	nop
     5ce:	0f 90       	pop	r0
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <SendCommand>:
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	67 97       	sbiw	r28, 0x17	; 23
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	de bf       	out	0x3e, r29	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	cd bf       	out	0x3d, r28	; 61
     5ea:	8f 8b       	std	Y+23, r24	; 0x17
     5ec:	1a 82       	std	Y+2, r1	; 0x02
     5ee:	19 82       	std	Y+1, r1	; 0x01
     5f0:	8e e7       	ldi	r24, 0x7E	; 126
     5f2:	d6 df       	rcall	.-84     	; 0x5a0 <UART0_Putch>
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	d4 df       	rcall	.-88     	; 0x5a0 <UART0_Putch>
     5f8:	86 e0       	ldi	r24, 0x06	; 6
     5fa:	d2 df       	rcall	.-92     	; 0x5a0 <UART0_Putch>
     5fc:	8f 89       	ldd	r24, Y+23	; 0x17
     5fe:	d0 df       	rcall	.-96     	; 0x5a0 <UART0_Putch>
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	ce df       	rcall	.-100    	; 0x5a0 <UART0_Putch>
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	cc df       	rcall	.-104    	; 0x5a0 <UART0_Putch>
     608:	8f 89       	ldd	r24, Y+23	; 0x17
     60a:	89 30       	cpi	r24, 0x09	; 9
     60c:	71 f0       	breq	.+28     	; 0x62a <SendCommand+0x54>
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	c7 df       	rcall	.-114    	; 0x5a0 <UART0_Putch>
     612:	8f 89       	ldd	r24, Y+23	; 0x17
     614:	88 2f       	mov	r24, r24
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	2b ef       	ldi	r18, 0xFB	; 251
     61a:	3e ef       	ldi	r19, 0xFE	; 254
     61c:	a9 01       	movw	r20, r18
     61e:	48 1b       	sub	r20, r24
     620:	59 0b       	sbc	r21, r25
     622:	ca 01       	movw	r24, r20
     624:	9a 83       	std	Y+2, r25	; 0x02
     626:	89 83       	std	Y+1, r24	; 0x01
     628:	0d c0       	rjmp	.+26     	; 0x644 <SendCommand+0x6e>
     62a:	82 e0       	ldi	r24, 0x02	; 2
     62c:	b9 df       	rcall	.-142    	; 0x5a0 <UART0_Putch>
     62e:	8f 89       	ldd	r24, Y+23	; 0x17
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	29 ef       	ldi	r18, 0xF9	; 249
     636:	3e ef       	ldi	r19, 0xFE	; 254
     638:	a9 01       	movw	r20, r18
     63a:	48 1b       	sub	r20, r24
     63c:	59 0b       	sbc	r21, r25
     63e:	ca 01       	movw	r24, r20
     640:	9a 83       	std	Y+2, r25	; 0x02
     642:	89 83       	std	Y+1, r24	; 0x01
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	9a 81       	ldd	r25, Y+2	; 0x02
     648:	89 2f       	mov	r24, r25
     64a:	99 27       	eor	r25, r25
     64c:	a9 df       	rcall	.-174    	; 0x5a0 <UART0_Putch>
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	a7 df       	rcall	.-178    	; 0x5a0 <UART0_Putch>
     652:	8f ee       	ldi	r24, 0xEF	; 239
     654:	a5 df       	rcall	.-182    	; 0x5a0 <UART0_Putch>
     656:	00 00       	nop
     658:	67 96       	adiw	r28, 0x17	; 23
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <SendCommand01>:
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	69 97       	sbiw	r28, 0x19	; 25
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
     67e:	8f 8b       	std	Y+23, r24	; 0x17
     680:	68 8f       	std	Y+24, r22	; 0x18
     682:	49 8f       	std	Y+25, r20	; 0x19
     684:	1a 82       	std	Y+2, r1	; 0x02
     686:	19 82       	std	Y+1, r1	; 0x01
     688:	8e e7       	ldi	r24, 0x7E	; 126
     68a:	8a df       	rcall	.-236    	; 0x5a0 <UART0_Putch>
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	88 df       	rcall	.-240    	; 0x5a0 <UART0_Putch>
     690:	86 e0       	ldi	r24, 0x06	; 6
     692:	86 df       	rcall	.-244    	; 0x5a0 <UART0_Putch>
     694:	8f 89       	ldd	r24, Y+23	; 0x17
     696:	84 df       	rcall	.-248    	; 0x5a0 <UART0_Putch>
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	82 df       	rcall	.-252    	; 0x5a0 <UART0_Putch>
     69c:	88 8d       	ldd	r24, Y+24	; 0x18
     69e:	80 df       	rcall	.-256    	; 0x5a0 <UART0_Putch>
     6a0:	89 8d       	ldd	r24, Y+25	; 0x19
     6a2:	7e df       	rcall	.-260    	; 0x5a0 <UART0_Putch>
     6a4:	8f 89       	ldd	r24, Y+23	; 0x17
     6a6:	88 2f       	mov	r24, r24
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	9c 01       	movw	r18, r24
     6ac:	2b 5f       	subi	r18, 0xFB	; 251
     6ae:	3e 4f       	sbci	r19, 0xFE	; 254
     6b0:	88 8d       	ldd	r24, Y+24	; 0x18
     6b2:	88 2f       	mov	r24, r24
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	28 0f       	add	r18, r24
     6b8:	39 1f       	adc	r19, r25
     6ba:	89 8d       	ldd	r24, Y+25	; 0x19
     6bc:	88 2f       	mov	r24, r24
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	82 0f       	add	r24, r18
     6c2:	93 1f       	adc	r25, r19
     6c4:	91 95       	neg	r25
     6c6:	81 95       	neg	r24
     6c8:	91 09       	sbc	r25, r1
     6ca:	9a 83       	std	Y+2, r25	; 0x02
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	9a 81       	ldd	r25, Y+2	; 0x02
     6d2:	89 2f       	mov	r24, r25
     6d4:	99 27       	eor	r25, r25
     6d6:	64 df       	rcall	.-312    	; 0x5a0 <UART0_Putch>
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	62 df       	rcall	.-316    	; 0x5a0 <UART0_Putch>
     6dc:	8f ee       	ldi	r24, 0xEF	; 239
     6de:	60 df       	rcall	.-320    	; 0x5a0 <UART0_Putch>
     6e0:	00 00       	nop
     6e2:	69 96       	adiw	r28, 0x19	; 25
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <ssd1306_cmd>:
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <ssd1306_cmd+0x6>
     6fa:	1f 92       	push	r1
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	9a 83       	std	Y+2, r25	; 0x02
     702:	89 83       	std	Y+1, r24	; 0x01
     704:	6b 83       	std	Y+3, r22	; 0x03
     706:	8b 81       	ldd	r24, Y+3	; 0x03
     708:	28 2f       	mov	r18, r24
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	9a 81       	ldd	r25, Y+2	; 0x02
     710:	ac 01       	movw	r20, r24
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	8c e3       	ldi	r24, 0x3C	; 60
     716:	cd de       	rcall	.-614    	; 0x4b2 <twi_write>
     718:	00 00       	nop
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <ssd1306_data>:
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	00 d0       	rcall	.+0      	; 0x72c <ssd1306_data+0x6>
     72c:	00 d0       	rcall	.+0      	; 0x72e <ssd1306_data+0x8>
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	9a 83       	std	Y+2, r25	; 0x02
     734:	89 83       	std	Y+1, r24	; 0x01
     736:	7c 83       	std	Y+4, r23	; 0x04
     738:	6b 83       	std	Y+3, r22	; 0x03
     73a:	2b 81       	ldd	r18, Y+3	; 0x03
     73c:	3c 81       	ldd	r19, Y+4	; 0x04
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	9a 81       	ldd	r25, Y+2	; 0x02
     742:	ac 01       	movw	r20, r24
     744:	60 e4       	ldi	r22, 0x40	; 64
     746:	8c e3       	ldi	r24, 0x3C	; 60
     748:	b4 de       	rcall	.-664    	; 0x4b2 <twi_write>
     74a:	00 00       	nop
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <ssd1306_reset>:
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	00 00       	nop
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <ssd1306_chargepump_enable>:
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	00 d0       	rcall	.+0      	; 0x770 <ssd1306_chargepump_enable+0x6>
     770:	00 d0       	rcall	.+0      	; 0x772 <ssd1306_chargepump_enable+0x8>
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	9c 83       	std	Y+4, r25	; 0x04
     778:	8b 83       	std	Y+3, r24	; 0x03
     77a:	8d e8       	ldi	r24, 0x8D	; 141
     77c:	89 83       	std	Y+1, r24	; 0x01
     77e:	8b 81       	ldd	r24, Y+3	; 0x03
     780:	9c 81       	ldd	r25, Y+4	; 0x04
     782:	89 2b       	or	r24, r25
     784:	11 f0       	breq	.+4      	; 0x78a <ssd1306_chargepump_enable+0x20>
     786:	84 e1       	ldi	r24, 0x14	; 20
     788:	01 c0       	rjmp	.+2      	; 0x78c <ssd1306_chargepump_enable+0x22>
     78a:	80 e1       	ldi	r24, 0x10	; 16
     78c:	8a 83       	std	Y+2, r24	; 0x02
     78e:	62 e0       	ldi	r22, 0x02	; 2
     790:	ce 01       	movw	r24, r28
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	af df       	rcall	.-162    	; 0x6f4 <ssd1306_cmd>
     796:	00 00       	nop
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <ssd1306_entire_on>:
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <ssd1306_entire_on+0x6>
     7ac:	1f 92       	push	r1
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	9b 83       	std	Y+3, r25	; 0x03
     7b4:	8a 83       	std	Y+2, r24	; 0x02
     7b6:	8a 81       	ldd	r24, Y+2	; 0x02
     7b8:	84 6a       	ori	r24, 0xA4	; 164
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	ce 01       	movw	r24, r28
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	98 df       	rcall	.-208    	; 0x6f4 <ssd1306_cmd>
     7c4:	00 00       	nop
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <ssd1306_display_on>:
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <ssd1306_display_on+0x6>
     7d8:	1f 92       	push	r1
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	9b 83       	std	Y+3, r25	; 0x03
     7e0:	8a 83       	std	Y+2, r24	; 0x02
     7e2:	8a 81       	ldd	r24, Y+2	; 0x02
     7e4:	8e 6a       	ori	r24, 0xAE	; 174
     7e6:	89 83       	std	Y+1, r24	; 0x01
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	ce 01       	movw	r24, r28
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	82 df       	rcall	.-252    	; 0x6f4 <ssd1306_cmd>
     7f0:	00 00       	nop
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <ssd1306_set_addr_mode>:
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	00 d0       	rcall	.+0      	; 0x804 <ssd1306_set_addr_mode+0x6>
     804:	1f 92       	push	r1
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	8b 83       	std	Y+3, r24	; 0x03
     80c:	80 e2       	ldi	r24, 0x20	; 32
     80e:	89 83       	std	Y+1, r24	; 0x01
     810:	8b 81       	ldd	r24, Y+3	; 0x03
     812:	8a 83       	std	Y+2, r24	; 0x02
     814:	62 e0       	ldi	r22, 0x02	; 2
     816:	ce 01       	movw	r24, r28
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	6c df       	rcall	.-296    	; 0x6f4 <ssd1306_cmd>
     81c:	00 00       	nop
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <ssd1306_set_page_start>:
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	00 d0       	rcall	.+0      	; 0x830 <ssd1306_set_page_start+0x6>
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	8a 83       	std	Y+2, r24	; 0x02
     836:	8a 81       	ldd	r24, Y+2	; 0x02
     838:	80 6b       	ori	r24, 0xB0	; 176
     83a:	89 83       	std	Y+1, r24	; 0x01
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	58 df       	rcall	.-336    	; 0x6f4 <ssd1306_cmd>
     844:	00 00       	nop
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <ssd1306_set_column_addr>:
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <ssd1306_set_column_addr+0x6>
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	8a 83       	std	Y+2, r24	; 0x02
     85c:	8a 81       	ldd	r24, Y+2	; 0x02
     85e:	8f 70       	andi	r24, 0x0F	; 15
     860:	89 83       	std	Y+1, r24	; 0x01
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	ce 01       	movw	r24, r28
     866:	01 96       	adiw	r24, 0x01	; 1
     868:	45 df       	rcall	.-374    	; 0x6f4 <ssd1306_cmd>
     86a:	8a 81       	ldd	r24, Y+2	; 0x02
     86c:	82 95       	swap	r24
     86e:	8f 70       	andi	r24, 0x0F	; 15
     870:	80 61       	ori	r24, 0x10	; 16
     872:	89 83       	std	Y+1, r24	; 0x01
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	ce 01       	movw	r24, r28
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	3c df       	rcall	.-392    	; 0x6f4 <ssd1306_cmd>
     87c:	00 00       	nop
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	08 95       	ret

00000888 <ssd1306_reverse>:
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	00 d0       	rcall	.+0      	; 0x88e <ssd1306_reverse+0x6>
     88e:	1f 92       	push	r1
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	9b 83       	std	Y+3, r25	; 0x03
     896:	8a 83       	std	Y+2, r24	; 0x02
     898:	8a 81       	ldd	r24, Y+2	; 0x02
     89a:	80 6a       	ori	r24, 0xA0	; 160
     89c:	89 83       	std	Y+1, r24	; 0x01
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	ce 01       	movw	r24, r28
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	27 df       	rcall	.-434    	; 0x6f4 <ssd1306_cmd>
     8a6:	00 00       	nop
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <ssd1306_normal_display>:
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	00 d0       	rcall	.+0      	; 0x8ba <ssd1306_normal_display+0x6>
     8ba:	1f 92       	push	r1
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	9b 83       	std	Y+3, r25	; 0x03
     8c2:	8a 83       	std	Y+2, r24	; 0x02
     8c4:	8a 81       	ldd	r24, Y+2	; 0x02
     8c6:	86 6a       	ori	r24, 0xA6	; 166
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	11 df       	rcall	.-478    	; 0x6f4 <ssd1306_cmd>
     8d2:	00 00       	nop
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <ssd1306_output_scan_direction>:
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <ssd1306_output_scan_direction+0x6>
     8e6:	1f 92       	push	r1
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	9b 83       	std	Y+3, r25	; 0x03
     8ee:	8a 83       	std	Y+2, r24	; 0x02
     8f0:	8a 81       	ldd	r24, Y+2	; 0x02
     8f2:	88 6c       	ori	r24, 0xC8	; 200
     8f4:	89 83       	std	Y+1, r24	; 0x01
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	ce 01       	movw	r24, r28
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	fb de       	rcall	.-522    	; 0x6f4 <ssd1306_cmd>
     8fe:	00 00       	nop
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <ssd1306_init>:


void ssd1306_init(void)
{
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	2e 97       	sbiw	r28, 0x0e	; 14
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e8       	ldi	r26, 0x80	; 128
     926:	bf e3       	ldi	r27, 0x3F	; 63
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	9a 83       	std	Y+2, r25	; 0x02
     92c:	ab 83       	std	Y+3, r26	; 0x03
     92e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	4a e7       	ldi	r20, 0x7A	; 122
     936:	55 e4       	ldi	r21, 0x45	; 69
     938:	69 81       	ldd	r22, Y+1	; 0x01
     93a:	7a 81       	ldd	r23, Y+2	; 0x02
     93c:	8b 81       	ldd	r24, Y+3	; 0x03
     93e:	9c 81       	ldd	r25, Y+4	; 0x04
     940:	0e 94 2c 22 	call	0x4458	; 0x4458 <__mulsf3>
     944:	dc 01       	movw	r26, r24
     946:	cb 01       	movw	r24, r22
     948:	8d 83       	std	Y+5, r24	; 0x05
     94a:	9e 83       	std	Y+6, r25	; 0x06
     94c:	af 83       	std	Y+7, r26	; 0x07
     94e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e8       	ldi	r20, 0x80	; 128
     956:	5f e3       	ldi	r21, 0x3F	; 63
     958:	6d 81       	ldd	r22, Y+5	; 0x05
     95a:	7e 81       	ldd	r23, Y+6	; 0x06
     95c:	8f 81       	ldd	r24, Y+7	; 0x07
     95e:	98 85       	ldd	r25, Y+8	; 0x08
     960:	0e 94 ab 21 	call	0x4356	; 0x4356 <__cmpsf2>
     964:	88 23       	and	r24, r24
     966:	2c f4       	brge	.+10     	; 0x972 <ssd1306_init+0x66>
		__ticks = 1;
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	9a 87       	std	Y+10, r25	; 0x0a
     96e:	89 87       	std	Y+9, r24	; 0x09
     970:	3f c0       	rjmp	.+126    	; 0x9f0 <ssd1306_init+0xe4>
	else if (__tmp > 65535)
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	3f ef       	ldi	r19, 0xFF	; 255
     976:	4f e7       	ldi	r20, 0x7F	; 127
     978:	57 e4       	ldi	r21, 0x47	; 71
     97a:	6d 81       	ldd	r22, Y+5	; 0x05
     97c:	7e 81       	ldd	r23, Y+6	; 0x06
     97e:	8f 81       	ldd	r24, Y+7	; 0x07
     980:	98 85       	ldd	r25, Y+8	; 0x08
     982:	0e 94 28 22 	call	0x4450	; 0x4450 <__gesf2>
     986:	18 16       	cp	r1, r24
     988:	4c f5       	brge	.+82     	; 0x9dc <ssd1306_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e2       	ldi	r20, 0x20	; 32
     990:	51 e4       	ldi	r21, 0x41	; 65
     992:	69 81       	ldd	r22, Y+1	; 0x01
     994:	7a 81       	ldd	r23, Y+2	; 0x02
     996:	8b 81       	ldd	r24, Y+3	; 0x03
     998:	9c 81       	ldd	r25, Y+4	; 0x04
     99a:	0e 94 2c 22 	call	0x4458	; 0x4458 <__mulsf3>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	bc 01       	movw	r22, r24
     9a4:	cd 01       	movw	r24, r26
     9a6:	0e 94 af 21 	call	0x435e	; 0x435e <__fixunssfsi>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	9a 87       	std	Y+10, r25	; 0x0a
     9b0:	89 87       	std	Y+9, r24	; 0x09
     9b2:	0f c0       	rjmp	.+30     	; 0x9d2 <ssd1306_init+0xc6>
     9b4:	80 e9       	ldi	r24, 0x90	; 144
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	9c 87       	std	Y+12, r25	; 0x0c
     9ba:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9bc:	8b 85       	ldd	r24, Y+11	; 0x0b
     9be:	9c 85       	ldd	r25, Y+12	; 0x0c
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <ssd1306_init+0xb4>
     9c4:	9c 87       	std	Y+12, r25	; 0x0c
     9c6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c8:	89 85       	ldd	r24, Y+9	; 0x09
     9ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	9a 87       	std	Y+10, r25	; 0x0a
     9d0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9d2:	89 85       	ldd	r24, Y+9	; 0x09
     9d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     9d6:	89 2b       	or	r24, r25
     9d8:	69 f7       	brne	.-38     	; 0x9b4 <ssd1306_init+0xa8>
     9da:	14 c0       	rjmp	.+40     	; 0xa04 <ssd1306_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9dc:	6d 81       	ldd	r22, Y+5	; 0x05
     9de:	7e 81       	ldd	r23, Y+6	; 0x06
     9e0:	8f 81       	ldd	r24, Y+7	; 0x07
     9e2:	98 85       	ldd	r25, Y+8	; 0x08
     9e4:	0e 94 af 21 	call	0x435e	; 0x435e <__fixunssfsi>
     9e8:	dc 01       	movw	r26, r24
     9ea:	cb 01       	movw	r24, r22
     9ec:	9a 87       	std	Y+10, r25	; 0x0a
     9ee:	89 87       	std	Y+9, r24	; 0x09
     9f0:	89 85       	ldd	r24, Y+9	; 0x09
     9f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     9f4:	9e 87       	std	Y+14, r25	; 0x0e
     9f6:	8d 87       	std	Y+13, r24	; 0x0d
     9f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     9fa:	9e 85       	ldd	r25, Y+14	; 0x0e
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	f1 f7       	brne	.-4      	; 0x9fc <ssd1306_init+0xf0>
     a00:	9e 87       	std	Y+14, r25	; 0x0e
     a02:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);

	ssd1306_reset();
     a04:	aa de       	rcall	.-684    	; 0x75a <ssd1306_reset>

	ssd1306_chargepump_enable(true);
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	af de       	rcall	.-674    	; 0x76a <ssd1306_chargepump_enable>
	ssd1306_entire_on(false);
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	ca de       	rcall	.-620    	; 0x7a6 <ssd1306_entire_on>
	ssd1306_display_on(true);
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	dd de       	rcall	.-582    	; 0x7d2 <ssd1306_display_on>
     a18:	00 00       	nop
}
     a1a:	2e 96       	adiw	r28, 0x0e	; 14
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <clear_screen>:
     a2c:	cf 93       	push	r28
static uint8_t gddram[COL_NUM];



void clear_screen(void)
{
     a2e:	df 93       	push	r29
     a30:	00 d0       	rcall	.+0      	; 0xa32 <clear_screen+0x6>
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
     a36:	1a 82       	std	Y+2, r1	; 0x02
     a38:	0a c0       	rjmp	.+20     	; 0xa4e <clear_screen+0x22>
	gddram[col] = 0;
     a3a:	8a 81       	ldd	r24, Y+2	; 0x02
     a3c:	88 2f       	mov	r24, r24
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	86 5e       	subi	r24, 0xE6	; 230
     a42:	98 4f       	sbci	r25, 0xF8	; 248
     a44:	fc 01       	movw	r30, r24
     a46:	10 82       	st	Z, r1
void clear_screen(void)
{
	uint8_t page;
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
     a48:	8a 81       	ldd	r24, Y+2	; 0x02
     a4a:	8f 5f       	subi	r24, 0xFF	; 255
     a4c:	8a 83       	std	Y+2, r24	; 0x02
     a4e:	8a 81       	ldd	r24, Y+2	; 0x02
     a50:	88 23       	and	r24, r24
     a52:	9c f7       	brge	.-26     	; 0xa3a <clear_screen+0xe>
	gddram[col] = 0;

	for (page=0; page<PAGE_NUM; page++)
     a54:	19 82       	std	Y+1, r1	; 0x01
     a56:	0a c0       	rjmp	.+20     	; 0xa6c <clear_screen+0x40>
	{
		ssd1306_set_page_start(page);
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	e7 de       	rcall	.-562    	; 0x82a <ssd1306_set_page_start>
		ssd1306_data(gddram, COL_NUM);
     a5c:	60 e8       	ldi	r22, 0x80	; 128
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	8a e1       	ldi	r24, 0x1A	; 26
     a62:	97 e0       	ldi	r25, 0x07	; 7
     a64:	60 de       	rcall	.-832    	; 0x726 <ssd1306_data>
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
	gddram[col] = 0;

	for (page=0; page<PAGE_NUM; page++)
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	8f 5f       	subi	r24, 0xFF	; 255
     a6a:	89 83       	std	Y+1, r24	; 0x01
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	88 30       	cpi	r24, 0x08	; 8
	{
		ssd1306_set_page_start(page);
		ssd1306_data(gddram, COL_NUM);
	}

	ssd1306_set_column_addr(0);
     a70:	98 f3       	brcs	.-26     	; 0xa58 <clear_screen+0x2c>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	ed de       	rcall	.-550    	; 0x850 <ssd1306_set_column_addr>
}
     a76:	00 00       	nop
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <oled_msg>:



extern void get_ch_data(char ch, uint8_t *buffer);
int oled_msg(int row, int col, const char *fmt, ...)
{
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	6c 97       	sbiw	r28, 0x1c	; 28
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
	va_list     ap;
	char        buf[MAX_CH_PER_LINE + 1];
	int         rc, i;

	va_start(ap, fmt);
     a96:	ce 01       	movw	r24, r28
     a98:	87 96       	adiw	r24, 0x27	; 39
     a9a:	9e 83       	std	Y+6, r25	; 0x06
     a9c:	8d 83       	std	Y+5, r24	; 0x05
	rc = vsprintf(buf, fmt, ap);
     a9e:	4d 81       	ldd	r20, Y+5	; 0x05
     aa0:	5e 81       	ldd	r21, Y+6	; 0x06
     aa2:	2d a1       	ldd	r18, Y+37	; 0x25
     aa4:	3e a1       	ldd	r19, Y+38	; 0x26
     aa6:	ce 01       	movw	r24, r28
     aa8:	07 96       	adiw	r24, 0x07	; 7
     aaa:	b9 01       	movw	r22, r18
     aac:	0e 94 33 23 	call	0x4666	; 0x4666 <vsprintf>
     ab0:	9c 83       	std	Y+4, r25	; 0x04
     ab2:	8b 83       	std	Y+3, r24	; 0x03
	va_end(ap);

	if (rc > 0)
     ab4:	8b 81       	ldd	r24, Y+3	; 0x03
     ab6:	9c 81       	ldd	r25, Y+4	; 0x04
     ab8:	18 16       	cp	r1, r24
     aba:	19 06       	cpc	r1, r25
     abc:	0c f0       	brlt	.+2      	; 0xac0 <oled_msg+0x3e>
     abe:	3b c0       	rjmp	.+118    	; 0xb36 <oled_msg+0xb4>
	{
		for (i=0; i<rc; i++)
     ac0:	1a 82       	std	Y+2, r1	; 0x02
     ac2:	19 82       	std	Y+1, r1	; 0x01
     ac4:	1c c0       	rjmp	.+56     	; 0xafe <oled_msg+0x7c>
		get_ch_data(buf[i], &gddram[i * CHAR_WIDTH]);
     ac6:	29 81       	ldd	r18, Y+1	; 0x01
     ac8:	3a 81       	ldd	r19, Y+2	; 0x02
     aca:	c9 01       	movw	r24, r18
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	82 0f       	add	r24, r18
     ad2:	93 1f       	adc	r25, r19
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	ac 01       	movw	r20, r24
     ada:	46 5e       	subi	r20, 0xE6	; 230
     adc:	58 4f       	sbci	r21, 0xF8	; 248
     ade:	9e 01       	movw	r18, r28
     ae0:	29 5f       	subi	r18, 0xF9	; 249
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	9a 81       	ldd	r25, Y+2	; 0x02
     ae8:	82 0f       	add	r24, r18
     aea:	93 1f       	adc	r25, r19
     aec:	fc 01       	movw	r30, r24
     aee:	80 81       	ld	r24, Z
     af0:	ba 01       	movw	r22, r20
     af2:	f8 db       	rcall	.-2064   	; 0x2e4 <get_ch_data>
	rc = vsprintf(buf, fmt, ap);
	va_end(ap);

	if (rc > 0)
	{
		for (i=0; i<rc; i++)
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	9a 81       	ldd	r25, Y+2	; 0x02
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	9a 83       	std	Y+2, r25	; 0x02
     afc:	89 83       	std	Y+1, r24	; 0x01
     afe:	29 81       	ldd	r18, Y+1	; 0x01
     b00:	3a 81       	ldd	r19, Y+2	; 0x02
     b02:	8b 81       	ldd	r24, Y+3	; 0x03
     b04:	9c 81       	ldd	r25, Y+4	; 0x04
     b06:	28 17       	cp	r18, r24
     b08:	39 07       	cpc	r19, r25
     b0a:	ec f2       	brlt	.-70     	; 0xac6 <oled_msg+0x44>
		get_ch_data(buf[i], &gddram[i * CHAR_WIDTH]);

		ssd1306_set_page_start(row);
     b0c:	89 a1       	ldd	r24, Y+33	; 0x21
     b0e:	8d de       	rcall	.-742    	; 0x82a <ssd1306_set_page_start>
		ssd1306_set_column_addr(col * CHAR_WIDTH);
     b10:	9b a1       	ldd	r25, Y+35	; 0x23
     b12:	89 2f       	mov	r24, r25
     b14:	88 0f       	add	r24, r24
     b16:	89 0f       	add	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	9a de       	rcall	.-716    	; 0x850 <ssd1306_set_column_addr>
		ssd1306_data(gddram, rc * CHAR_WIDTH);
     b1c:	2b 81       	ldd	r18, Y+3	; 0x03
     b1e:	3c 81       	ldd	r19, Y+4	; 0x04
     b20:	c9 01       	movw	r24, r18
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	82 0f       	add	r24, r18
     b28:	93 1f       	adc	r25, r19
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	bc 01       	movw	r22, r24
     b30:	8a e1       	ldi	r24, 0x1A	; 26
     b32:	97 e0       	ldi	r25, 0x07	; 7
     b34:	f8 dd       	rcall	.-1040   	; 0x726 <ssd1306_data>
	}

	return rc;
     b36:	8b 81       	ldd	r24, Y+3	; 0x03
     b38:	9c 81       	ldd	r25, Y+4	; 0x04
}
     b3a:	6c 96       	adiw	r28, 0x1c	; 28
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <draw_picture>:




void draw_picture(char array[])
{
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	00 d0       	rcall	.+0      	; 0xb52 <draw_picture+0x6>
     b52:	1f 92       	push	r1
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	9b 83       	std	Y+3, r25	; 0x03
     b5a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char x,y;
	for(y=0;y<8;y++)
     b5c:	19 82       	std	Y+1, r1	; 0x01
     b5e:	15 c0       	rjmp	.+42     	; 0xb8a <draw_picture+0x3e>
	{
		ssd1306_set_page_start(y);
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	63 de       	rcall	.-826    	; 0x82a <ssd1306_set_page_start>
		ssd1306_data(array+(y*COL_NUM), COL_NUM);
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	88 2f       	mov	r24, r24
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	96 95       	lsr	r25
     b6c:	98 2f       	mov	r25, r24
     b6e:	88 27       	eor	r24, r24
     b70:	97 95       	ror	r25
     b72:	87 95       	ror	r24
     b74:	9c 01       	movw	r18, r24
     b76:	8a 81       	ldd	r24, Y+2	; 0x02
     b78:	9b 81       	ldd	r25, Y+3	; 0x03
     b7a:	82 0f       	add	r24, r18
     b7c:	93 1f       	adc	r25, r19
     b7e:	60 e8       	ldi	r22, 0x80	; 128
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	d1 dd       	rcall	.-1118   	; 0x726 <ssd1306_data>


void draw_picture(char array[])
{
	unsigned char x,y;
	for(y=0;y<8;y++)
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	8f 5f       	subi	r24, 0xFF	; 255
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 30       	cpi	r24, 0x08	; 8
     b8e:	40 f3       	brcs	.-48     	; 0xb60 <draw_picture+0x14>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(array+(y*COL_NUM), COL_NUM);
	}
}
     b90:	00 00       	nop
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <setup>:

void setup(void)
{
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	twi_init();
     ba6:	d4 dc       	rcall	.-1624   	; 0x550 <twi_init>

	ssd1306_init();
     ba8:	b1 de       	rcall	.-670    	; 0x90c <ssd1306_init>
	ssd1306_set_addr_mode(PAGE);
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	28 de       	rcall	.-944    	; 0x7fe <ssd1306_set_addr_mode>
	

	clear_screen();
     bae:	3e df       	rcall	.-388    	; 0xa2c <clear_screen>
	
	ssd1306_output_scan_direction(0);		//위아래 역전
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	95 de       	rcall	.-726    	; 0x8e0 <ssd1306_output_scan_direction>
	ssd1306_reverse(1);		//왼쪽 오른쪽 역전
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	66 de       	rcall	.-820    	; 0x888 <ssd1306_reverse>
	ssd1306_normal_display(0);
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	79 de       	rcall	.-782    	; 0x8b4 <ssd1306_normal_display>
     bc2:	00 00       	nop

}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <Collision>:
     bca:	cf 93       	push	r28
unsigned char next_block = 0;
unsigned char next_board[8] = {0};


unsigned char Collision()	//충돌 여부 확인
{
     bcc:	df 93       	push	r29
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
	if( ((main_board[cur_line] & temp_line[0]) != 0) | ((main_board[cur_line + 1] & temp_line[1]) != 0) |
     bd2:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	84 56       	subi	r24, 0x64	; 100
     be4:	98 4f       	sbci	r25, 0xF8	; 248
     be6:	fc 01       	movw	r30, r24
     be8:	20 81       	ld	r18, Z
     bea:	31 81       	ldd	r19, Z+1	; 0x01
     bec:	42 81       	ldd	r20, Z+2	; 0x02
     bee:	53 81       	ldd	r21, Z+3	; 0x03
     bf0:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
     bf4:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
     bf8:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
     bfc:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
     c00:	82 23       	and	r24, r18
     c02:	93 23       	and	r25, r19
     c04:	a4 23       	and	r26, r20
     c06:	b5 23       	and	r27, r21
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	89 2b       	or	r24, r25
     c0c:	8a 2b       	or	r24, r26
     c0e:	8b 2b       	or	r24, r27
     c10:	09 f4       	brne	.+2      	; 0xc14 <Collision+0x4a>
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
     c18:	88 2f       	mov	r24, r24
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	84 56       	subi	r24, 0x64	; 100
     c28:	98 4f       	sbci	r25, 0xF8	; 248
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 81       	ld	r18, Z
     c2e:	31 81       	ldd	r19, Z+1	; 0x01
     c30:	42 81       	ldd	r20, Z+2	; 0x02
     c32:	53 81       	ldd	r21, Z+3	; 0x03
     c34:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
     c38:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
     c3c:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
     c40:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
     c44:	82 23       	and	r24, r18
     c46:	93 23       	and	r25, r19
     c48:	a4 23       	and	r26, r20
     c4a:	b5 23       	and	r27, r21
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	89 2b       	or	r24, r25
     c50:	8a 2b       	or	r24, r26
     c52:	8b 2b       	or	r24, r27
     c54:	09 f4       	brne	.+2      	; 0xc58 <Collision+0x8e>
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	86 2f       	mov	r24, r22
     c5a:	82 2b       	or	r24, r18
     c5c:	68 2f       	mov	r22, r24
     c5e:	70 e0       	ldi	r23, 0x00	; 0
	((main_board[cur_line + 2] & temp_line[2]) != 0) | ((main_board[cur_line + 3] & temp_line[3]) != 0) )
     c60:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	02 96       	adiw	r24, 0x02	; 2
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	84 56       	subi	r24, 0x64	; 100
     c74:	98 4f       	sbci	r25, 0xF8	; 248
     c76:	fc 01       	movw	r30, r24
     c78:	20 81       	ld	r18, Z
     c7a:	31 81       	ldd	r19, Z+1	; 0x01
     c7c:	42 81       	ldd	r20, Z+2	; 0x02
     c7e:	53 81       	ldd	r21, Z+3	; 0x03
     c80:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
     c84:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
     c88:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
     c8c:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
     c90:	82 23       	and	r24, r18
     c92:	93 23       	and	r25, r19
     c94:	a4 23       	and	r26, r20
     c96:	b5 23       	and	r27, r21
     c98:	21 e0       	ldi	r18, 0x01	; 1
     c9a:	89 2b       	or	r24, r25
     c9c:	8a 2b       	or	r24, r26
     c9e:	8b 2b       	or	r24, r27
     ca0:	09 f4       	brne	.+2      	; 0xca4 <Collision+0xda>
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	82 2f       	mov	r24, r18
     ca6:	90 e0       	ldi	r25, 0x00	; 0
unsigned char next_board[8] = {0};


unsigned char Collision()	//충돌 여부 확인
{
	if( ((main_board[cur_line] & temp_line[0]) != 0) | ((main_board[cur_line + 1] & temp_line[1]) != 0) |
     ca8:	68 2b       	or	r22, r24
     caa:	79 2b       	or	r23, r25
	((main_board[cur_line + 2] & temp_line[2]) != 0) | ((main_board[cur_line + 3] & temp_line[3]) != 0) )
     cac:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	03 96       	adiw	r24, 0x03	; 3
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	84 56       	subi	r24, 0x64	; 100
     cc0:	98 4f       	sbci	r25, 0xF8	; 248
     cc2:	fc 01       	movw	r30, r24
     cc4:	20 81       	ld	r18, Z
     cc6:	31 81       	ldd	r19, Z+1	; 0x01
     cc8:	42 81       	ldd	r20, Z+2	; 0x02
     cca:	53 81       	ldd	r21, Z+3	; 0x03
     ccc:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
     cd0:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
     cd4:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
     cd8:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
     cdc:	82 23       	and	r24, r18
     cde:	93 23       	and	r25, r19
     ce0:	a4 23       	and	r26, r20
     ce2:	b5 23       	and	r27, r21
     ce4:	21 e0       	ldi	r18, 0x01	; 1
     ce6:	89 2b       	or	r24, r25
     ce8:	8a 2b       	or	r24, r26
     cea:	8b 2b       	or	r24, r27
     cec:	09 f4       	brne	.+2      	; 0xcf0 <Collision+0x126>
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	82 2f       	mov	r24, r18
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	86 2b       	or	r24, r22
     cf6:	97 2b       	or	r25, r23
unsigned char next_board[8] = {0};


unsigned char Collision()	//충돌 여부 확인
{
	if( ((main_board[cur_line] & temp_line[0]) != 0) | ((main_board[cur_line + 1] & temp_line[1]) != 0) |
     cf8:	89 2b       	or	r24, r25
     cfa:	11 f0       	breq	.+4      	; 0xd00 <Collision+0x136>
	((main_board[cur_line + 2] & temp_line[2]) != 0) | ((main_board[cur_line + 3] & temp_line[3]) != 0) )
	return 1;         // 충돌 1 리턴
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <Collision+0x138>
	else
	return 0;  // 충돌 없음 0 리턴
     d00:	80 e0       	ldi	r24, 0x00	; 0
}
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <tetriminos_to_temp_line>:


void tetriminos_to_temp_line()
{
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <tetriminos_to_temp_line+0x6>
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i < 4; i++)	//테트리미노스 라인 임시 저장소 초기화
     d12:	1a 82       	std	Y+2, r1	; 0x02
     d14:	19 82       	std	Y+1, r1	; 0x01
     d16:	12 c0       	rjmp	.+36     	; 0xd3c <tetriminos_to_temp_line+0x34>
	{
		temp_line[i] = 0;
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	9a 81       	ldd	r25, Y+2	; 0x02
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	84 5d       	subi	r24, 0xD4	; 212
     d26:	97 4f       	sbci	r25, 0xF7	; 247
     d28:	fc 01       	movw	r30, r24
     d2a:	10 82       	st	Z, r1
     d2c:	11 82       	std	Z+1, r1	; 0x01
     d2e:	12 82       	std	Z+2, r1	; 0x02
     d30:	13 82       	std	Z+3, r1	; 0x03
}


void tetriminos_to_temp_line()
{
	for(int i = 0; i < 4; i++)	//테트리미노스 라인 임시 저장소 초기화
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	04 97       	sbiw	r24, 0x04	; 4
     d42:	54 f3       	brlt	.-44     	; 0xd18 <tetriminos_to_temp_line+0x10>
	{
		temp_line[i] = 0;
	}

	if(cur_col == 2)
     d44:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <cur_col>
     d48:	82 30       	cpi	r24, 0x02	; 2
     d4a:	09 f0       	breq	.+2      	; 0xd4e <tetriminos_to_temp_line+0x46>
     d4c:	e1 c0       	rjmp	.+450    	; 0xf10 <tetriminos_to_temp_line+0x208>
	{
		temp_line[0] = ((unsigned long int)(tetriminos[shape][pattern] & 0xF000) >> (15 - cur_col));
     d4e:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
     d52:	48 2f       	mov	r20, r24
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	2c e6       	ldi	r18, 0x6C	; 108
     d60:	32 e0       	ldi	r19, 0x02	; 2
     d62:	44 0f       	add	r20, r20
     d64:	55 1f       	adc	r21, r21
     d66:	44 0f       	add	r20, r20
     d68:	55 1f       	adc	r21, r21
     d6a:	84 0f       	add	r24, r20
     d6c:	95 1f       	adc	r25, r21
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	82 0f       	add	r24, r18
     d74:	93 1f       	adc	r25, r19
     d76:	fc 01       	movw	r30, r24
     d78:	85 91       	lpm	r24, Z+
     d7a:	95 91       	lpm	r25, Z+
     d7c:	32 97       	sbiw	r30, 0x02	; 2
     d7e:	cc 01       	movw	r24, r24
     d80:	a0 e0       	ldi	r26, 0x00	; 0
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	88 27       	eor	r24, r24
     d86:	90 7f       	andi	r25, 0xF0	; 240
     d88:	aa 27       	eor	r26, r26
     d8a:	bb 27       	eor	r27, r27
     d8c:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
     d90:	22 2f       	mov	r18, r18
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	4f e0       	ldi	r20, 0x0F	; 15
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	ba 01       	movw	r22, r20
     d9a:	62 1b       	sub	r22, r18
     d9c:	73 0b       	sbc	r23, r19
     d9e:	9b 01       	movw	r18, r22
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <tetriminos_to_temp_line+0xa2>
     da2:	b6 95       	lsr	r27
     da4:	a7 95       	ror	r26
     da6:	97 95       	ror	r25
     da8:	87 95       	ror	r24
     daa:	2a 95       	dec	r18
     dac:	d2 f7       	brpl	.-12     	; 0xda2 <tetriminos_to_temp_line+0x9a>
     dae:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <temp_line>
     db2:	90 93 2d 08 	sts	0x082D, r25	; 0x80082d <temp_line+0x1>
     db6:	a0 93 2e 08 	sts	0x082E, r26	; 0x80082e <temp_line+0x2>
     dba:	b0 93 2f 08 	sts	0x082F, r27	; 0x80082f <temp_line+0x3>
		temp_line[1] = ((unsigned long int)(tetriminos[shape][pattern] & 0x0F00) >> (11 - cur_col));
     dbe:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
     dc2:	48 2f       	mov	r20, r24
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
     dca:	88 2f       	mov	r24, r24
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	2c e6       	ldi	r18, 0x6C	; 108
     dd0:	32 e0       	ldi	r19, 0x02	; 2
     dd2:	44 0f       	add	r20, r20
     dd4:	55 1f       	adc	r21, r21
     dd6:	44 0f       	add	r20, r20
     dd8:	55 1f       	adc	r21, r21
     dda:	84 0f       	add	r24, r20
     ddc:	95 1f       	adc	r25, r21
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	82 0f       	add	r24, r18
     de4:	93 1f       	adc	r25, r19
     de6:	fc 01       	movw	r30, r24
     de8:	85 91       	lpm	r24, Z+
     dea:	95 91       	lpm	r25, Z+
     dec:	32 97       	sbiw	r30, 0x02	; 2
     dee:	cc 01       	movw	r24, r24
     df0:	a0 e0       	ldi	r26, 0x00	; 0
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	88 27       	eor	r24, r24
     df6:	9f 70       	andi	r25, 0x0F	; 15
     df8:	aa 27       	eor	r26, r26
     dfa:	bb 27       	eor	r27, r27
     dfc:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
     e00:	22 2f       	mov	r18, r18
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	4b e0       	ldi	r20, 0x0B	; 11
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	ba 01       	movw	r22, r20
     e0a:	62 1b       	sub	r22, r18
     e0c:	73 0b       	sbc	r23, r19
     e0e:	9b 01       	movw	r18, r22
     e10:	04 c0       	rjmp	.+8      	; 0xe1a <tetriminos_to_temp_line+0x112>
     e12:	b6 95       	lsr	r27
     e14:	a7 95       	ror	r26
     e16:	97 95       	ror	r25
     e18:	87 95       	ror	r24
     e1a:	2a 95       	dec	r18
     e1c:	d2 f7       	brpl	.-12     	; 0xe12 <tetriminos_to_temp_line+0x10a>
     e1e:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <temp_line+0x4>
     e22:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <temp_line+0x5>
     e26:	a0 93 32 08 	sts	0x0832, r26	; 0x800832 <temp_line+0x6>
     e2a:	b0 93 33 08 	sts	0x0833, r27	; 0x800833 <temp_line+0x7>
		temp_line[2] = ((unsigned long int)(tetriminos[shape][pattern] & 0x00F0) >> (7 - cur_col));
     e2e:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
     e32:	48 2f       	mov	r20, r24
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
     e3a:	88 2f       	mov	r24, r24
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	2c e6       	ldi	r18, 0x6C	; 108
     e40:	32 e0       	ldi	r19, 0x02	; 2
     e42:	44 0f       	add	r20, r20
     e44:	55 1f       	adc	r21, r21
     e46:	44 0f       	add	r20, r20
     e48:	55 1f       	adc	r21, r21
     e4a:	84 0f       	add	r24, r20
     e4c:	95 1f       	adc	r25, r21
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	82 0f       	add	r24, r18
     e54:	93 1f       	adc	r25, r19
     e56:	fc 01       	movw	r30, r24
     e58:	85 91       	lpm	r24, Z+
     e5a:	95 91       	lpm	r25, Z+
     e5c:	32 97       	sbiw	r30, 0x02	; 2
     e5e:	cc 01       	movw	r24, r24
     e60:	a0 e0       	ldi	r26, 0x00	; 0
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	80 7f       	andi	r24, 0xF0	; 240
     e66:	99 27       	eor	r25, r25
     e68:	aa 27       	eor	r26, r26
     e6a:	bb 27       	eor	r27, r27
     e6c:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
     e70:	22 2f       	mov	r18, r18
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	47 e0       	ldi	r20, 0x07	; 7
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	ba 01       	movw	r22, r20
     e7a:	62 1b       	sub	r22, r18
     e7c:	73 0b       	sbc	r23, r19
     e7e:	9b 01       	movw	r18, r22
     e80:	04 c0       	rjmp	.+8      	; 0xe8a <tetriminos_to_temp_line+0x182>
     e82:	b6 95       	lsr	r27
     e84:	a7 95       	ror	r26
     e86:	97 95       	ror	r25
     e88:	87 95       	ror	r24
     e8a:	2a 95       	dec	r18
     e8c:	d2 f7       	brpl	.-12     	; 0xe82 <tetriminos_to_temp_line+0x17a>
     e8e:	80 93 34 08 	sts	0x0834, r24	; 0x800834 <temp_line+0x8>
     e92:	90 93 35 08 	sts	0x0835, r25	; 0x800835 <temp_line+0x9>
     e96:	a0 93 36 08 	sts	0x0836, r26	; 0x800836 <temp_line+0xa>
     e9a:	b0 93 37 08 	sts	0x0837, r27	; 0x800837 <temp_line+0xb>
		temp_line[3] = ((unsigned long int)(tetriminos[shape][pattern] & 0x000F) >> (3 - cur_col));
     e9e:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
     ea2:	48 2f       	mov	r20, r24
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	2c e6       	ldi	r18, 0x6C	; 108
     eb0:	32 e0       	ldi	r19, 0x02	; 2
     eb2:	44 0f       	add	r20, r20
     eb4:	55 1f       	adc	r21, r21
     eb6:	44 0f       	add	r20, r20
     eb8:	55 1f       	adc	r21, r21
     eba:	84 0f       	add	r24, r20
     ebc:	95 1f       	adc	r25, r21
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	82 0f       	add	r24, r18
     ec4:	93 1f       	adc	r25, r19
     ec6:	fc 01       	movw	r30, r24
     ec8:	85 91       	lpm	r24, Z+
     eca:	95 91       	lpm	r25, Z+
     ecc:	32 97       	sbiw	r30, 0x02	; 2
     ece:	cc 01       	movw	r24, r24
     ed0:	a0 e0       	ldi	r26, 0x00	; 0
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	8f 70       	andi	r24, 0x0F	; 15
     ed6:	99 27       	eor	r25, r25
     ed8:	aa 27       	eor	r26, r26
     eda:	bb 27       	eor	r27, r27
     edc:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
     ee0:	22 2f       	mov	r18, r18
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	43 e0       	ldi	r20, 0x03	; 3
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	ba 01       	movw	r22, r20
     eea:	62 1b       	sub	r22, r18
     eec:	73 0b       	sbc	r23, r19
     eee:	9b 01       	movw	r18, r22
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <tetriminos_to_temp_line+0x1f2>
     ef2:	b6 95       	lsr	r27
     ef4:	a7 95       	ror	r26
     ef6:	97 95       	ror	r25
     ef8:	87 95       	ror	r24
     efa:	2a 95       	dec	r18
     efc:	d2 f7       	brpl	.-12     	; 0xef2 <tetriminos_to_temp_line+0x1ea>
     efe:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <temp_line+0xc>
     f02:	90 93 39 08 	sts	0x0839, r25	; 0x800839 <temp_line+0xd>
     f06:	a0 93 3a 08 	sts	0x083A, r26	; 0x80083a <temp_line+0xe>
     f0a:	b0 93 3b 08 	sts	0x083B, r27	; 0x80083b <temp_line+0xf>
		temp_line[0] = ((unsigned long int)(tetriminos[shape][pattern] & 0xF000) >> 12) << (cur_col - 3);	//이 과정이 필요 없고 뒤에서 한번에 충돌감지 이후 넣어줘도 상관없어 보이지만 충돌 여부 판별하는 함수가 temp_line와 메인보드가 겹치는지 파악하기때문에 temp_line에 변화된 사항을 반영해야 한다.
		temp_line[1] = ((unsigned long int)(tetriminos[shape][pattern] & 0x0F00) >> 8) << (cur_col - 3);
		temp_line[2] = ((unsigned long int)(tetriminos[shape][pattern] & 0x00F0) >> 4) << (cur_col - 3);
		temp_line[3] = ((unsigned long int)(tetriminos[shape][pattern] & 0x000F)) << (cur_col - 3);
	}
}
     f0e:	e1 c0       	rjmp	.+450    	; 0x10d2 <tetriminos_to_temp_line+0x3ca>
		temp_line[0] = ((unsigned long int)(tetriminos[shape][pattern] & 0xF000) >> (15 - cur_col));
		temp_line[1] = ((unsigned long int)(tetriminos[shape][pattern] & 0x0F00) >> (11 - cur_col));
		temp_line[2] = ((unsigned long int)(tetriminos[shape][pattern] & 0x00F0) >> (7 - cur_col));
		temp_line[3] = ((unsigned long int)(tetriminos[shape][pattern] & 0x000F) >> (3 - cur_col));
	}
	else if(cur_col >= 3)
     f10:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <cur_col>
     f14:	83 30       	cpi	r24, 0x03	; 3
     f16:	08 f4       	brcc	.+2      	; 0xf1a <tetriminos_to_temp_line+0x212>
     f18:	dc c0       	rjmp	.+440    	; 0x10d2 <tetriminos_to_temp_line+0x3ca>
	{
		temp_line[0] = ((unsigned long int)(tetriminos[shape][pattern] & 0xF000) >> 12) << (cur_col - 3);	//이 과정이 필요 없고 뒤에서 한번에 충돌감지 이후 넣어줘도 상관없어 보이지만 충돌 여부 판별하는 함수가 temp_line와 메인보드가 겹치는지 파악하기때문에 temp_line에 변화된 사항을 반영해야 한다.
     f1a:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
     f1e:	48 2f       	mov	r20, r24
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	2c e6       	ldi	r18, 0x6C	; 108
     f2c:	32 e0       	ldi	r19, 0x02	; 2
     f2e:	44 0f       	add	r20, r20
     f30:	55 1f       	adc	r21, r21
     f32:	44 0f       	add	r20, r20
     f34:	55 1f       	adc	r21, r21
     f36:	84 0f       	add	r24, r20
     f38:	95 1f       	adc	r25, r21
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	82 0f       	add	r24, r18
     f40:	93 1f       	adc	r25, r19
     f42:	fc 01       	movw	r30, r24
     f44:	85 91       	lpm	r24, Z+
     f46:	95 91       	lpm	r25, Z+
     f48:	32 97       	sbiw	r30, 0x02	; 2
     f4a:	89 2f       	mov	r24, r25
     f4c:	99 27       	eor	r25, r25
     f4e:	82 95       	swap	r24
     f50:	8f 70       	andi	r24, 0x0F	; 15
     f52:	cc 01       	movw	r24, r24
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
     f5c:	22 2f       	mov	r18, r18
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	23 50       	subi	r18, 0x03	; 3
     f62:	31 09       	sbc	r19, r1
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <tetriminos_to_temp_line+0x266>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	aa 1f       	adc	r26, r26
     f6c:	bb 1f       	adc	r27, r27
     f6e:	2a 95       	dec	r18
     f70:	d2 f7       	brpl	.-12     	; 0xf66 <tetriminos_to_temp_line+0x25e>
     f72:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <temp_line>
     f76:	90 93 2d 08 	sts	0x082D, r25	; 0x80082d <temp_line+0x1>
     f7a:	a0 93 2e 08 	sts	0x082E, r26	; 0x80082e <temp_line+0x2>
     f7e:	b0 93 2f 08 	sts	0x082F, r27	; 0x80082f <temp_line+0x3>
		temp_line[1] = ((unsigned long int)(tetriminos[shape][pattern] & 0x0F00) >> 8) << (cur_col - 3);
     f82:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
     f86:	48 2f       	mov	r20, r24
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	2c e6       	ldi	r18, 0x6C	; 108
     f94:	32 e0       	ldi	r19, 0x02	; 2
     f96:	44 0f       	add	r20, r20
     f98:	55 1f       	adc	r21, r21
     f9a:	44 0f       	add	r20, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	84 0f       	add	r24, r20
     fa0:	95 1f       	adc	r25, r21
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	82 0f       	add	r24, r18
     fa8:	93 1f       	adc	r25, r19
     faa:	fc 01       	movw	r30, r24
     fac:	85 91       	lpm	r24, Z+
     fae:	95 91       	lpm	r25, Z+
     fb0:	32 97       	sbiw	r30, 0x02	; 2
     fb2:	cc 01       	movw	r24, r24
     fb4:	a0 e0       	ldi	r26, 0x00	; 0
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	88 27       	eor	r24, r24
     fba:	9f 70       	andi	r25, 0x0F	; 15
     fbc:	aa 27       	eor	r26, r26
     fbe:	bb 27       	eor	r27, r27
     fc0:	89 2f       	mov	r24, r25
     fc2:	9a 2f       	mov	r25, r26
     fc4:	ab 2f       	mov	r26, r27
     fc6:	bb 27       	eor	r27, r27
     fc8:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
     fcc:	22 2f       	mov	r18, r18
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	23 50       	subi	r18, 0x03	; 3
     fd2:	31 09       	sbc	r19, r1
     fd4:	04 c0       	rjmp	.+8      	; 0xfde <tetriminos_to_temp_line+0x2d6>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	aa 1f       	adc	r26, r26
     fdc:	bb 1f       	adc	r27, r27
     fde:	2a 95       	dec	r18
     fe0:	d2 f7       	brpl	.-12     	; 0xfd6 <tetriminos_to_temp_line+0x2ce>
     fe2:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <temp_line+0x4>
     fe6:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <temp_line+0x5>
     fea:	a0 93 32 08 	sts	0x0832, r26	; 0x800832 <temp_line+0x6>
     fee:	b0 93 33 08 	sts	0x0833, r27	; 0x800833 <temp_line+0x7>
		temp_line[2] = ((unsigned long int)(tetriminos[shape][pattern] & 0x00F0) >> 4) << (cur_col - 3);
     ff2:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
     ff6:	48 2f       	mov	r20, r24
     ff8:	50 e0       	ldi	r21, 0x00	; 0
     ffa:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	2c e6       	ldi	r18, 0x6C	; 108
    1004:	32 e0       	ldi	r19, 0x02	; 2
    1006:	44 0f       	add	r20, r20
    1008:	55 1f       	adc	r21, r21
    100a:	44 0f       	add	r20, r20
    100c:	55 1f       	adc	r21, r21
    100e:	84 0f       	add	r24, r20
    1010:	95 1f       	adc	r25, r21
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	82 0f       	add	r24, r18
    1018:	93 1f       	adc	r25, r19
    101a:	fc 01       	movw	r30, r24
    101c:	85 91       	lpm	r24, Z+
    101e:	95 91       	lpm	r25, Z+
    1020:	32 97       	sbiw	r30, 0x02	; 2
    1022:	cc 01       	movw	r24, r24
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	80 7f       	andi	r24, 0xF0	; 240
    102a:	99 27       	eor	r25, r25
    102c:	aa 27       	eor	r26, r26
    102e:	bb 27       	eor	r27, r27
    1030:	68 94       	set
    1032:	13 f8       	bld	r1, 3
    1034:	b6 95       	lsr	r27
    1036:	a7 95       	ror	r26
    1038:	97 95       	ror	r25
    103a:	87 95       	ror	r24
    103c:	16 94       	lsr	r1
    103e:	d1 f7       	brne	.-12     	; 0x1034 <tetriminos_to_temp_line+0x32c>
    1040:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
    1044:	22 2f       	mov	r18, r18
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	23 50       	subi	r18, 0x03	; 3
    104a:	31 09       	sbc	r19, r1
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <tetriminos_to_temp_line+0x34e>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	aa 1f       	adc	r26, r26
    1054:	bb 1f       	adc	r27, r27
    1056:	2a 95       	dec	r18
    1058:	d2 f7       	brpl	.-12     	; 0x104e <tetriminos_to_temp_line+0x346>
    105a:	80 93 34 08 	sts	0x0834, r24	; 0x800834 <temp_line+0x8>
    105e:	90 93 35 08 	sts	0x0835, r25	; 0x800835 <temp_line+0x9>
    1062:	a0 93 36 08 	sts	0x0836, r26	; 0x800836 <temp_line+0xa>
    1066:	b0 93 37 08 	sts	0x0837, r27	; 0x800837 <temp_line+0xb>
		temp_line[3] = ((unsigned long int)(tetriminos[shape][pattern] & 0x000F)) << (cur_col - 3);
    106a:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
    106e:	48 2f       	mov	r20, r24
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	2c e6       	ldi	r18, 0x6C	; 108
    107c:	32 e0       	ldi	r19, 0x02	; 2
    107e:	44 0f       	add	r20, r20
    1080:	55 1f       	adc	r21, r21
    1082:	44 0f       	add	r20, r20
    1084:	55 1f       	adc	r21, r21
    1086:	84 0f       	add	r24, r20
    1088:	95 1f       	adc	r25, r21
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	82 0f       	add	r24, r18
    1090:	93 1f       	adc	r25, r19
    1092:	fc 01       	movw	r30, r24
    1094:	85 91       	lpm	r24, Z+
    1096:	95 91       	lpm	r25, Z+
    1098:	32 97       	sbiw	r30, 0x02	; 2
    109a:	cc 01       	movw	r24, r24
    109c:	a0 e0       	ldi	r26, 0x00	; 0
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	8f 70       	andi	r24, 0x0F	; 15
    10a2:	99 27       	eor	r25, r25
    10a4:	aa 27       	eor	r26, r26
    10a6:	bb 27       	eor	r27, r27
    10a8:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
    10ac:	22 2f       	mov	r18, r18
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	23 50       	subi	r18, 0x03	; 3
    10b2:	31 09       	sbc	r19, r1
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <tetriminos_to_temp_line+0x3b6>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	aa 1f       	adc	r26, r26
    10bc:	bb 1f       	adc	r27, r27
    10be:	2a 95       	dec	r18
    10c0:	d2 f7       	brpl	.-12     	; 0x10b6 <tetriminos_to_temp_line+0x3ae>
    10c2:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <temp_line+0xc>
    10c6:	90 93 39 08 	sts	0x0839, r25	; 0x800839 <temp_line+0xd>
    10ca:	a0 93 3a 08 	sts	0x083A, r26	; 0x80083a <temp_line+0xe>
    10ce:	b0 93 3b 08 	sts	0x083B, r27	; 0x80083b <temp_line+0xf>
	}
}
    10d2:	00 00       	nop
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	08 95       	ret

000010de <__vector_5>:




ISR(INT4_vect)
{
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    10e6:	0f 92       	push	r0
    10e8:	11 24       	eor	r1, r1
    10ea:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    10ee:	0f 92       	push	r0
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	00 d0       	rcall	.+0      	; 0x110e <__stack+0xf>
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
	SendCommand01(0x0F, 0x01, 0x03);
    1112:	43 e0       	ldi	r20, 0x03	; 3
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	8f e0       	ldi	r24, 0x0F	; 15
    1118:	a8 da       	rcall	.-2736   	; 0x66a <SendCommand01>
	if(screen == Menu_snake)
    111a:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    111e:	88 23       	and	r24, r24
    1120:	21 f4       	brne	.+8      	; 0x112a <__stack+0x2b>
	{
		screen = Play_snake;
    1122:	82 e0       	ldi	r24, 0x02	; 2
    1124:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
	}
	else
	{
		screen = Ready;
	}
}
    1128:	19 c1       	rjmp	.+562    	; 0x135c <__stack+0x25d>
	SendCommand01(0x0F, 0x01, 0x03);
	if(screen == Menu_snake)
	{
		screen = Play_snake;
	}
	else if(screen == Menu_tetris)
    112a:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	21 f4       	brne	.+8      	; 0x113a <__stack+0x3b>
	{
		screen = Play_tetris;
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
	}
	else
	{
		screen = Ready;
	}
}
    1138:	11 c1       	rjmp	.+546    	; 0x135c <__stack+0x25d>
	}
	else if(screen == Menu_tetris)
	{
		screen = Play_tetris;
	}
	else if(screen == Play_snake)
    113a:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	79 f4       	brne	.+30     	; 0x1160 <__stack+0x61>
	{
		if(dir != LEFT)
    1142:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    1146:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    114a:	8b 34       	cpi	r24, 0x4B	; 75
    114c:	91 05       	cpc	r25, r1
    114e:	09 f4       	brne	.+2      	; 0x1152 <__stack+0x53>
    1150:	05 c1       	rjmp	.+522    	; 0x135c <__stack+0x25d>
		{
			//SendCommand01(0x0F, 0x01, 0x03);
			
			dir = RIGHT;
    1152:	8d e4       	ldi	r24, 0x4D	; 77
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    115a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
	else
	{
		screen = Ready;
	}
}
    115e:	fe c0       	rjmp	.+508    	; 0x135c <__stack+0x25d>
			//SendCommand01(0x0F, 0x01, 0x03);
			
			dir = RIGHT;
		}
	}
	else if(screen == Play_tetris)
    1160:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1164:	83 30       	cpi	r24, 0x03	; 3
    1166:	09 f0       	breq	.+2      	; 0x116a <__stack+0x6b>
    1168:	f6 c0       	rjmp	.+492    	; 0x1356 <__stack+0x257>
	{
		for(int i = 0; i < 32; i++)
    116a:	1a 82       	std	Y+2, r1	; 0x02
    116c:	19 82       	std	Y+1, r1	; 0x01
    116e:	1f c0       	rjmp	.+62     	; 0x11ae <__stack+0xaf>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	84 56       	subi	r24, 0x64	; 100
    117e:	98 4f       	sbci	r25, 0xF8	; 248
    1180:	fc 01       	movw	r30, r24
    1182:	80 81       	ld	r24, Z
    1184:	91 81       	ldd	r25, Z+1	; 0x01
    1186:	a2 81       	ldd	r26, Z+2	; 0x02
    1188:	b3 81       	ldd	r27, Z+3	; 0x03
    118a:	29 81       	ldd	r18, Y+1	; 0x01
    118c:	3a 81       	ldd	r19, Y+2	; 0x02
    118e:	22 0f       	add	r18, r18
    1190:	33 1f       	adc	r19, r19
    1192:	22 0f       	add	r18, r18
    1194:	33 1f       	adc	r19, r19
    1196:	21 5c       	subi	r18, 0xC1	; 193
    1198:	37 4f       	sbci	r19, 0xF7	; 247
    119a:	f9 01       	movw	r30, r18
    119c:	80 83       	st	Z, r24
    119e:	91 83       	std	Z+1, r25	; 0x01
    11a0:	a2 83       	std	Z+2, r26	; 0x02
    11a2:	b3 83       	std	Z+3, r27	; 0x03
			dir = RIGHT;
		}
	}
	else if(screen == Play_tetris)
	{
		for(int i = 0; i < 32; i++)
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	9a 83       	std	Y+2, r25	; 0x02
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	80 97       	sbiw	r24, 0x20	; 32
    11b4:	ec f2       	brlt	.-70     	; 0x1170 <__stack+0x71>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
		}

		if(cur_col >= 3) cur_col--;
    11b6:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <cur_col>
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	30 f0       	brcs	.+12     	; 0x11ca <__stack+0xcb>
    11be:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <cur_col>
    11c2:	81 50       	subi	r24, 0x01	; 1
    11c4:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <cur_col>
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <__stack+0xd1>
		else cur_col = 2;
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <cur_col>

		tetriminos_to_temp_line();
		
		if(Collision() == 1) cur_col++;
    11d0:	9b dd       	rcall	.-1226   	; 0xd08 <tetriminos_to_temp_line>
    11d2:	fb dc       	rcall	.-1546   	; 0xbca <Collision>
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	29 f4       	brne	.+10     	; 0x11e2 <__stack+0xe3>
    11d8:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <cur_col>
    11dc:	8f 5f       	subi	r24, 0xFF	; 255
    11de:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <cur_col>

		tetriminos_to_temp_line();
    11e2:	92 dd       	rcall	.-1244   	; 0xd08 <tetriminos_to_temp_line>

		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
    11e4:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    11e8:	68 2f       	mov	r22, r24
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	81 5c       	subi	r24, 0xC1	; 193
    11fe:	97 4f       	sbci	r25, 0xF7	; 247
    1200:	fc 01       	movw	r30, r24
    1202:	20 81       	ld	r18, Z
    1204:	31 81       	ldd	r19, Z+1	; 0x01
    1206:	42 81       	ldd	r20, Z+2	; 0x02
    1208:	53 81       	ldd	r21, Z+3	; 0x03
    120a:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    120e:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    1212:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    1216:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    121a:	82 2b       	or	r24, r18
    121c:	93 2b       	or	r25, r19
    121e:	a4 2b       	or	r26, r20
    1220:	b5 2b       	or	r27, r21
    1222:	9b 01       	movw	r18, r22
    1224:	22 0f       	add	r18, r18
    1226:	33 1f       	adc	r19, r19
    1228:	22 0f       	add	r18, r18
    122a:	33 1f       	adc	r19, r19
    122c:	21 5c       	subi	r18, 0xC1	; 193
    122e:	37 4f       	sbci	r19, 0xF7	; 247
    1230:	f9 01       	movw	r30, r18
    1232:	80 83       	st	Z, r24
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	a2 83       	std	Z+2, r26	; 0x02
    1238:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 1] |= temp_line[1];
    123a:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	bc 01       	movw	r22, r24
    1244:	6f 5f       	subi	r22, 0xFF	; 255
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	81 5c       	subi	r24, 0xC1	; 193
    125c:	97 4f       	sbci	r25, 0xF7	; 247
    125e:	fc 01       	movw	r30, r24
    1260:	20 81       	ld	r18, Z
    1262:	31 81       	ldd	r19, Z+1	; 0x01
    1264:	42 81       	ldd	r20, Z+2	; 0x02
    1266:	53 81       	ldd	r21, Z+3	; 0x03
    1268:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    126c:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    1270:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    1274:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    1278:	82 2b       	or	r24, r18
    127a:	93 2b       	or	r25, r19
    127c:	a4 2b       	or	r26, r20
    127e:	b5 2b       	or	r27, r21
    1280:	9b 01       	movw	r18, r22
    1282:	22 0f       	add	r18, r18
    1284:	33 1f       	adc	r19, r19
    1286:	22 0f       	add	r18, r18
    1288:	33 1f       	adc	r19, r19
    128a:	21 5c       	subi	r18, 0xC1	; 193
    128c:	37 4f       	sbci	r19, 0xF7	; 247
    128e:	f9 01       	movw	r30, r18
    1290:	80 83       	st	Z, r24
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	a2 83       	std	Z+2, r26	; 0x02
    1296:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 2] |= temp_line[2];
    1298:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	bc 01       	movw	r22, r24
    12a2:	6e 5f       	subi	r22, 0xFE	; 254
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 96       	adiw	r24, 0x02	; 2
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	81 5c       	subi	r24, 0xC1	; 193
    12ba:	97 4f       	sbci	r25, 0xF7	; 247
    12bc:	fc 01       	movw	r30, r24
    12be:	20 81       	ld	r18, Z
    12c0:	31 81       	ldd	r19, Z+1	; 0x01
    12c2:	42 81       	ldd	r20, Z+2	; 0x02
    12c4:	53 81       	ldd	r21, Z+3	; 0x03
    12c6:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    12ca:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    12ce:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    12d2:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    12d6:	82 2b       	or	r24, r18
    12d8:	93 2b       	or	r25, r19
    12da:	a4 2b       	or	r26, r20
    12dc:	b5 2b       	or	r27, r21
    12de:	9b 01       	movw	r18, r22
    12e0:	22 0f       	add	r18, r18
    12e2:	33 1f       	adc	r19, r19
    12e4:	22 0f       	add	r18, r18
    12e6:	33 1f       	adc	r19, r19
    12e8:	21 5c       	subi	r18, 0xC1	; 193
    12ea:	37 4f       	sbci	r19, 0xF7	; 247
    12ec:	f9 01       	movw	r30, r18
    12ee:	80 83       	st	Z, r24
    12f0:	91 83       	std	Z+1, r25	; 0x01
    12f2:	a2 83       	std	Z+2, r26	; 0x02
    12f4:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 3] |= temp_line[3];
    12f6:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	bc 01       	movw	r22, r24
    1300:	6d 5f       	subi	r22, 0xFD	; 253
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	03 96       	adiw	r24, 0x03	; 3
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	81 5c       	subi	r24, 0xC1	; 193
    1318:	97 4f       	sbci	r25, 0xF7	; 247
    131a:	fc 01       	movw	r30, r24
    131c:	20 81       	ld	r18, Z
    131e:	31 81       	ldd	r19, Z+1	; 0x01
    1320:	42 81       	ldd	r20, Z+2	; 0x02
    1322:	53 81       	ldd	r21, Z+3	; 0x03
    1324:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    1328:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    132c:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    1330:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    1334:	82 2b       	or	r24, r18
    1336:	93 2b       	or	r25, r19
    1338:	a4 2b       	or	r26, r20
    133a:	b5 2b       	or	r27, r21
    133c:	9b 01       	movw	r18, r22
    133e:	22 0f       	add	r18, r18
    1340:	33 1f       	adc	r19, r19
    1342:	22 0f       	add	r18, r18
    1344:	33 1f       	adc	r19, r19
    1346:	21 5c       	subi	r18, 0xC1	; 193
    1348:	37 4f       	sbci	r19, 0xF7	; 247
    134a:	f9 01       	movw	r30, r18
    134c:	80 83       	st	Z, r24
    134e:	91 83       	std	Z+1, r25	; 0x01
    1350:	a2 83       	std	Z+2, r26	; 0x02
    1352:	b3 83       	std	Z+3, r27	; 0x03
	}
	else
	{
		screen = Ready;
	}
}
    1354:	03 c0       	rjmp	.+6      	; 0x135c <__stack+0x25d>
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
	else
	{
		screen = Ready;
    1356:	86 e0       	ldi	r24, 0x06	; 6
    1358:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
	}
}
    135c:	00 00       	nop
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	ff 91       	pop	r31
    1368:	ef 91       	pop	r30
    136a:	bf 91       	pop	r27
    136c:	af 91       	pop	r26
    136e:	9f 91       	pop	r25
    1370:	8f 91       	pop	r24
    1372:	7f 91       	pop	r23
    1374:	6f 91       	pop	r22
    1376:	5f 91       	pop	r21
    1378:	4f 91       	pop	r20
    137a:	3f 91       	pop	r19
    137c:	2f 91       	pop	r18
    137e:	0f 90       	pop	r0
    1380:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1384:	0f 90       	pop	r0
    1386:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    138a:	0f 90       	pop	r0
    138c:	1f 90       	pop	r1
    138e:	18 95       	reti

00001390 <__vector_6>:




ISR(INT5_vect)
{
    1390:	1f 92       	push	r1
    1392:	0f 92       	push	r0
    1394:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1398:	0f 92       	push	r0
    139a:	11 24       	eor	r1, r1
    139c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    13a0:	0f 92       	push	r0
    13a2:	2f 93       	push	r18
    13a4:	3f 93       	push	r19
    13a6:	4f 93       	push	r20
    13a8:	5f 93       	push	r21
    13aa:	6f 93       	push	r22
    13ac:	7f 93       	push	r23
    13ae:	8f 93       	push	r24
    13b0:	9f 93       	push	r25
    13b2:	af 93       	push	r26
    13b4:	bf 93       	push	r27
    13b6:	ef 93       	push	r30
    13b8:	ff 93       	push	r31
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <__vector_6+0x30>
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	SendCommand01(0x0F, 0x01, 0x03);
    13c4:	43 e0       	ldi	r20, 0x03	; 3
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	8f e0       	ldi	r24, 0x0F	; 15
    13ca:	4f d9       	rcall	.-3426   	; 0x66a <SendCommand01>
	if(screen == Menu_snake)
    13cc:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    13d0:	88 23       	and	r24, r24
    13d2:	21 f4       	brne	.+8      	; 0x13dc <__vector_6+0x4c>
	{
		screen = Menu_tetris;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
		game_board[cur_line + 1] |= temp_line[1];
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
	
}
    13da:	12 c1       	rjmp	.+548    	; 0x1600 <__vector_6+0x270>
	SendCommand01(0x0F, 0x01, 0x03);
	if(screen == Menu_snake)
	{
		screen = Menu_tetris;
	}
	else if(screen == Menu_tetris)
    13dc:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	19 f4       	brne	.+6      	; 0x13ea <__vector_6+0x5a>
	{
		screen = Menu_snake;
    13e4:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <screen>
		game_board[cur_line + 1] |= temp_line[1];
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
	
}
    13e8:	0b c1       	rjmp	.+534    	; 0x1600 <__vector_6+0x270>
	}
	else if(screen == Menu_tetris)
	{
		screen = Menu_snake;
	}
	else if(screen == Play_snake)
    13ea:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    13ee:	82 30       	cpi	r24, 0x02	; 2
    13f0:	79 f4       	brne	.+30     	; 0x1410 <__vector_6+0x80>
	{
		if(dir != DOWN)
    13f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    13f6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    13fa:	80 35       	cpi	r24, 0x50	; 80
    13fc:	91 05       	cpc	r25, r1
    13fe:	09 f4       	brne	.+2      	; 0x1402 <__vector_6+0x72>
    1400:	ff c0       	rjmp	.+510    	; 0x1600 <__vector_6+0x270>
		{
			//SendCommand01(0x0F, 0x01, 0x03);
			
			dir = UP;
    1402:	88 e4       	ldi	r24, 0x48	; 72
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    140a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
		game_board[cur_line + 1] |= temp_line[1];
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
	
}
    140e:	f8 c0       	rjmp	.+496    	; 0x1600 <__vector_6+0x270>
			//SendCommand01(0x0F, 0x01, 0x03);
			
			dir = UP;
		}
	}
	else if(screen == Play_tetris)
    1410:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1414:	83 30       	cpi	r24, 0x03	; 3
    1416:	09 f0       	breq	.+2      	; 0x141a <__vector_6+0x8a>
    1418:	f3 c0       	rjmp	.+486    	; 0x1600 <__vector_6+0x270>
	{
		for(int i = 0; i < 32; i++)
    141a:	1a 82       	std	Y+2, r1	; 0x02
    141c:	19 82       	std	Y+1, r1	; 0x01
    141e:	1f c0       	rjmp	.+62     	; 0x145e <__vector_6+0xce>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	84 56       	subi	r24, 0x64	; 100
    142e:	98 4f       	sbci	r25, 0xF8	; 248
    1430:	fc 01       	movw	r30, r24
    1432:	80 81       	ld	r24, Z
    1434:	91 81       	ldd	r25, Z+1	; 0x01
    1436:	a2 81       	ldd	r26, Z+2	; 0x02
    1438:	b3 81       	ldd	r27, Z+3	; 0x03
    143a:	29 81       	ldd	r18, Y+1	; 0x01
    143c:	3a 81       	ldd	r19, Y+2	; 0x02
    143e:	22 0f       	add	r18, r18
    1440:	33 1f       	adc	r19, r19
    1442:	22 0f       	add	r18, r18
    1444:	33 1f       	adc	r19, r19
    1446:	21 5c       	subi	r18, 0xC1	; 193
    1448:	37 4f       	sbci	r19, 0xF7	; 247
    144a:	f9 01       	movw	r30, r18
    144c:	80 83       	st	Z, r24
    144e:	91 83       	std	Z+1, r25	; 0x01
    1450:	a2 83       	std	Z+2, r26	; 0x02
    1452:	b3 83       	std	Z+3, r27	; 0x03
			dir = UP;
		}
	}
	else if(screen == Play_tetris)
	{
		for(int i = 0; i < 32; i++)
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	9a 81       	ldd	r25, Y+2	; 0x02
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	9a 81       	ldd	r25, Y+2	; 0x02
    1462:	80 97       	sbiw	r24, 0x20	; 32
    1464:	ec f2       	brlt	.-70     	; 0x1420 <__vector_6+0x90>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
		}

		pattern++;	//회전으로 상태 변화
    1466:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
    146a:	8f 5f       	subi	r24, 0xFF	; 255
    146c:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <pattern>
		if(pattern == 4) pattern = 0; //마지막에서 처음으로
    1470:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
    1474:	84 30       	cpi	r24, 0x04	; 4
    1476:	11 f4       	brne	.+4      	; 0x147c <__vector_6+0xec>
    1478:	10 92 2b 08 	sts	0x082B, r1	; 0x80082b <pattern>

		tetriminos_to_temp_line();

		if(Collision() == 1) pattern--;
    147c:	45 dc       	rcall	.-1910   	; 0xd08 <tetriminos_to_temp_line>
    147e:	a5 db       	rcall	.-2230   	; 0xbca <Collision>
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	29 f4       	brne	.+10     	; 0x148e <__vector_6+0xfe>
    1484:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
    1488:	81 50       	subi	r24, 0x01	; 1
    148a:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <pattern>


		tetriminos_to_temp_line();
    148e:	3c dc       	rcall	.-1928   	; 0xd08 <tetriminos_to_temp_line>

		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
    1490:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1494:	68 2f       	mov	r22, r24
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    149c:	88 2f       	mov	r24, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	81 5c       	subi	r24, 0xC1	; 193
    14aa:	97 4f       	sbci	r25, 0xF7	; 247
    14ac:	fc 01       	movw	r30, r24
    14ae:	20 81       	ld	r18, Z
    14b0:	31 81       	ldd	r19, Z+1	; 0x01
    14b2:	42 81       	ldd	r20, Z+2	; 0x02
    14b4:	53 81       	ldd	r21, Z+3	; 0x03
    14b6:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    14ba:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    14be:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    14c2:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    14c6:	82 2b       	or	r24, r18
    14c8:	93 2b       	or	r25, r19
    14ca:	a4 2b       	or	r26, r20
    14cc:	b5 2b       	or	r27, r21
    14ce:	9b 01       	movw	r18, r22
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	22 0f       	add	r18, r18
    14d6:	33 1f       	adc	r19, r19
    14d8:	21 5c       	subi	r18, 0xC1	; 193
    14da:	37 4f       	sbci	r19, 0xF7	; 247
    14dc:	f9 01       	movw	r30, r18
    14de:	80 83       	st	Z, r24
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	a2 83       	std	Z+2, r26	; 0x02
    14e4:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 1] |= temp_line[1];
    14e6:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	bc 01       	movw	r22, r24
    14f0:	6f 5f       	subi	r22, 0xFF	; 255
    14f2:	7f 4f       	sbci	r23, 0xFF	; 255
    14f4:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	81 5c       	subi	r24, 0xC1	; 193
    1508:	97 4f       	sbci	r25, 0xF7	; 247
    150a:	fc 01       	movw	r30, r24
    150c:	20 81       	ld	r18, Z
    150e:	31 81       	ldd	r19, Z+1	; 0x01
    1510:	42 81       	ldd	r20, Z+2	; 0x02
    1512:	53 81       	ldd	r21, Z+3	; 0x03
    1514:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    1518:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    151c:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    1520:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    1524:	82 2b       	or	r24, r18
    1526:	93 2b       	or	r25, r19
    1528:	a4 2b       	or	r26, r20
    152a:	b5 2b       	or	r27, r21
    152c:	9b 01       	movw	r18, r22
    152e:	22 0f       	add	r18, r18
    1530:	33 1f       	adc	r19, r19
    1532:	22 0f       	add	r18, r18
    1534:	33 1f       	adc	r19, r19
    1536:	21 5c       	subi	r18, 0xC1	; 193
    1538:	37 4f       	sbci	r19, 0xF7	; 247
    153a:	f9 01       	movw	r30, r18
    153c:	80 83       	st	Z, r24
    153e:	91 83       	std	Z+1, r25	; 0x01
    1540:	a2 83       	std	Z+2, r26	; 0x02
    1542:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 2] |= temp_line[2];
    1544:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1548:	88 2f       	mov	r24, r24
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	bc 01       	movw	r22, r24
    154e:	6e 5f       	subi	r22, 0xFE	; 254
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 96       	adiw	r24, 0x02	; 2
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	81 5c       	subi	r24, 0xC1	; 193
    1566:	97 4f       	sbci	r25, 0xF7	; 247
    1568:	fc 01       	movw	r30, r24
    156a:	20 81       	ld	r18, Z
    156c:	31 81       	ldd	r19, Z+1	; 0x01
    156e:	42 81       	ldd	r20, Z+2	; 0x02
    1570:	53 81       	ldd	r21, Z+3	; 0x03
    1572:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    1576:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    157a:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    157e:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    1582:	82 2b       	or	r24, r18
    1584:	93 2b       	or	r25, r19
    1586:	a4 2b       	or	r26, r20
    1588:	b5 2b       	or	r27, r21
    158a:	9b 01       	movw	r18, r22
    158c:	22 0f       	add	r18, r18
    158e:	33 1f       	adc	r19, r19
    1590:	22 0f       	add	r18, r18
    1592:	33 1f       	adc	r19, r19
    1594:	21 5c       	subi	r18, 0xC1	; 193
    1596:	37 4f       	sbci	r19, 0xF7	; 247
    1598:	f9 01       	movw	r30, r18
    159a:	80 83       	st	Z, r24
    159c:	91 83       	std	Z+1, r25	; 0x01
    159e:	a2 83       	std	Z+2, r26	; 0x02
    15a0:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 3] |= temp_line[3];
    15a2:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    15a6:	88 2f       	mov	r24, r24
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	bc 01       	movw	r22, r24
    15ac:	6d 5f       	subi	r22, 0xFD	; 253
    15ae:	7f 4f       	sbci	r23, 0xFF	; 255
    15b0:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	03 96       	adiw	r24, 0x03	; 3
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	81 5c       	subi	r24, 0xC1	; 193
    15c4:	97 4f       	sbci	r25, 0xF7	; 247
    15c6:	fc 01       	movw	r30, r24
    15c8:	20 81       	ld	r18, Z
    15ca:	31 81       	ldd	r19, Z+1	; 0x01
    15cc:	42 81       	ldd	r20, Z+2	; 0x02
    15ce:	53 81       	ldd	r21, Z+3	; 0x03
    15d0:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    15d4:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    15d8:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    15dc:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    15e0:	82 2b       	or	r24, r18
    15e2:	93 2b       	or	r25, r19
    15e4:	a4 2b       	or	r26, r20
    15e6:	b5 2b       	or	r27, r21
    15e8:	9b 01       	movw	r18, r22
    15ea:	22 0f       	add	r18, r18
    15ec:	33 1f       	adc	r19, r19
    15ee:	22 0f       	add	r18, r18
    15f0:	33 1f       	adc	r19, r19
    15f2:	21 5c       	subi	r18, 0xC1	; 193
    15f4:	37 4f       	sbci	r19, 0xF7	; 247
    15f6:	f9 01       	movw	r30, r18
    15f8:	80 83       	st	Z, r24
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	a2 83       	std	Z+2, r26	; 0x02
    15fe:	b3 83       	std	Z+3, r27	; 0x03
	}
	
}
    1600:	00 00       	nop
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	ff 91       	pop	r31
    160c:	ef 91       	pop	r30
    160e:	bf 91       	pop	r27
    1610:	af 91       	pop	r26
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	7f 91       	pop	r23
    1618:	6f 91       	pop	r22
    161a:	5f 91       	pop	r21
    161c:	4f 91       	pop	r20
    161e:	3f 91       	pop	r19
    1620:	2f 91       	pop	r18
    1622:	0f 90       	pop	r0
    1624:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1628:	0f 90       	pop	r0
    162a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    162e:	0f 90       	pop	r0
    1630:	1f 90       	pop	r1
    1632:	18 95       	reti

00001634 <__vector_7>:

ISR(INT6_vect)
{
    1634:	1f 92       	push	r1
    1636:	0f 92       	push	r0
    1638:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    163c:	0f 92       	push	r0
    163e:	11 24       	eor	r1, r1
    1640:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1644:	0f 92       	push	r0
    1646:	2f 93       	push	r18
    1648:	3f 93       	push	r19
    164a:	4f 93       	push	r20
    164c:	5f 93       	push	r21
    164e:	6f 93       	push	r22
    1650:	7f 93       	push	r23
    1652:	8f 93       	push	r24
    1654:	9f 93       	push	r25
    1656:	af 93       	push	r26
    1658:	bf 93       	push	r27
    165a:	ef 93       	push	r30
    165c:	ff 93       	push	r31
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	00 d0       	rcall	.+0      	; 0x1664 <__vector_7+0x30>
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
	SendCommand01(0x0F, 0x01, 0x03);
    1668:	43 e0       	ldi	r20, 0x03	; 3
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	8f e0       	ldi	r24, 0x0F	; 15
    166e:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
	if(screen == Menu_snake)
    1672:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1676:	88 23       	and	r24, r24
    1678:	21 f4       	brne	.+8      	; 0x1682 <__vector_7+0x4e>
	{
		screen = Menu_tetris;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
		game_board[cur_line + 1] |= temp_line[1];
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
}
    1680:	0d c1       	rjmp	.+538    	; 0x189c <__vector_7+0x268>
	SendCommand01(0x0F, 0x01, 0x03);
	if(screen == Menu_snake)
	{
		screen = Menu_tetris;
	}
	else if(screen == Menu_tetris)
    1682:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	19 f4       	brne	.+6      	; 0x1690 <__vector_7+0x5c>
	{
		screen = Menu_snake;
    168a:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <screen>
		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
		game_board[cur_line + 1] |= temp_line[1];
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
}
    168e:	06 c1       	rjmp	.+524    	; 0x189c <__vector_7+0x268>
	}
	else if(screen == Menu_tetris)
	{
		screen = Menu_snake;
	}
	else if(screen == Play_snake)
    1690:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1694:	82 30       	cpi	r24, 0x02	; 2
    1696:	79 f4       	brne	.+30     	; 0x16b6 <__vector_7+0x82>
	{
		if(dir != UP)
    1698:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    169c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    16a0:	88 34       	cpi	r24, 0x48	; 72
    16a2:	91 05       	cpc	r25, r1
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <__vector_7+0x74>
    16a6:	fa c0       	rjmp	.+500    	; 0x189c <__vector_7+0x268>
		{
			//SendCommand01(0x0F, 0x01, 0x03);
			
			dir = DOWN;
    16a8:	80 e5       	ldi	r24, 0x50	; 80
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    16b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
		game_board[cur_line + 1] |= temp_line[1];
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
}
    16b4:	f3 c0       	rjmp	.+486    	; 0x189c <__vector_7+0x268>
			//SendCommand01(0x0F, 0x01, 0x03);
			
			dir = DOWN;
		}
	}
	else if(screen == Play_tetris)
    16b6:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    16ba:	83 30       	cpi	r24, 0x03	; 3
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <__vector_7+0x8c>
    16be:	ee c0       	rjmp	.+476    	; 0x189c <__vector_7+0x268>
	{
		for(int i = 0; i < 32; i++)
    16c0:	1a 82       	std	Y+2, r1	; 0x02
    16c2:	19 82       	std	Y+1, r1	; 0x01
    16c4:	1f c0       	rjmp	.+62     	; 0x1704 <__vector_7+0xd0>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	84 56       	subi	r24, 0x64	; 100
    16d4:	98 4f       	sbci	r25, 0xF8	; 248
    16d6:	fc 01       	movw	r30, r24
    16d8:	80 81       	ld	r24, Z
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	a2 81       	ldd	r26, Z+2	; 0x02
    16de:	b3 81       	ldd	r27, Z+3	; 0x03
    16e0:	29 81       	ldd	r18, Y+1	; 0x01
    16e2:	3a 81       	ldd	r19, Y+2	; 0x02
    16e4:	22 0f       	add	r18, r18
    16e6:	33 1f       	adc	r19, r19
    16e8:	22 0f       	add	r18, r18
    16ea:	33 1f       	adc	r19, r19
    16ec:	21 5c       	subi	r18, 0xC1	; 193
    16ee:	37 4f       	sbci	r19, 0xF7	; 247
    16f0:	f9 01       	movw	r30, r18
    16f2:	80 83       	st	Z, r24
    16f4:	91 83       	std	Z+1, r25	; 0x01
    16f6:	a2 83       	std	Z+2, r26	; 0x02
    16f8:	b3 83       	std	Z+3, r27	; 0x03
			dir = DOWN;
		}
	}
	else if(screen == Play_tetris)
	{
		for(int i = 0; i < 32; i++)
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	9a 81       	ldd	r25, Y+2	; 0x02
    16fe:	01 96       	adiw	r24, 0x01	; 1
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	80 97       	sbiw	r24, 0x20	; 32
    170a:	ec f2       	brlt	.-70     	; 0x16c6 <__vector_7+0x92>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
		}
		
		tetriminos_to_temp_line();
    170c:	fd da       	rcall	.-2566   	; 0xd08 <tetriminos_to_temp_line>

		while(Collision() == 0) cur_line++;
    170e:	05 c0       	rjmp	.+10     	; 0x171a <__vector_7+0xe6>
    1710:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1714:	8f 5f       	subi	r24, 0xFF	; 255
    1716:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <cur_line>
    171a:	57 da       	rcall	.-2898   	; 0xbca <Collision>
    171c:	88 23       	and	r24, r24
    171e:	c1 f3       	breq	.-16     	; 0x1710 <__vector_7+0xdc>

		cur_line--;
    1720:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1724:	81 50       	subi	r24, 0x01	; 1
    1726:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <cur_line>

		tetriminos_to_temp_line();
    172a:	ee da       	rcall	.-2596   	; 0xd08 <tetriminos_to_temp_line>

		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
    172c:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1730:	68 2f       	mov	r22, r24
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	81 5c       	subi	r24, 0xC1	; 193
    1746:	97 4f       	sbci	r25, 0xF7	; 247
    1748:	fc 01       	movw	r30, r24
    174a:	20 81       	ld	r18, Z
    174c:	31 81       	ldd	r19, Z+1	; 0x01
    174e:	42 81       	ldd	r20, Z+2	; 0x02
    1750:	53 81       	ldd	r21, Z+3	; 0x03
    1752:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    1756:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    175a:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    175e:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    1762:	82 2b       	or	r24, r18
    1764:	93 2b       	or	r25, r19
    1766:	a4 2b       	or	r26, r20
    1768:	b5 2b       	or	r27, r21
    176a:	9b 01       	movw	r18, r22
    176c:	22 0f       	add	r18, r18
    176e:	33 1f       	adc	r19, r19
    1770:	22 0f       	add	r18, r18
    1772:	33 1f       	adc	r19, r19
    1774:	21 5c       	subi	r18, 0xC1	; 193
    1776:	37 4f       	sbci	r19, 0xF7	; 247
    1778:	f9 01       	movw	r30, r18
    177a:	80 83       	st	Z, r24
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	a2 83       	std	Z+2, r26	; 0x02
    1780:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 1] |= temp_line[1];
    1782:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	bc 01       	movw	r22, r24
    178c:	6f 5f       	subi	r22, 0xFF	; 255
    178e:	7f 4f       	sbci	r23, 0xFF	; 255
    1790:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1794:	88 2f       	mov	r24, r24
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	81 5c       	subi	r24, 0xC1	; 193
    17a4:	97 4f       	sbci	r25, 0xF7	; 247
    17a6:	fc 01       	movw	r30, r24
    17a8:	20 81       	ld	r18, Z
    17aa:	31 81       	ldd	r19, Z+1	; 0x01
    17ac:	42 81       	ldd	r20, Z+2	; 0x02
    17ae:	53 81       	ldd	r21, Z+3	; 0x03
    17b0:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    17b4:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    17b8:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    17bc:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    17c0:	82 2b       	or	r24, r18
    17c2:	93 2b       	or	r25, r19
    17c4:	a4 2b       	or	r26, r20
    17c6:	b5 2b       	or	r27, r21
    17c8:	9b 01       	movw	r18, r22
    17ca:	22 0f       	add	r18, r18
    17cc:	33 1f       	adc	r19, r19
    17ce:	22 0f       	add	r18, r18
    17d0:	33 1f       	adc	r19, r19
    17d2:	21 5c       	subi	r18, 0xC1	; 193
    17d4:	37 4f       	sbci	r19, 0xF7	; 247
    17d6:	f9 01       	movw	r30, r18
    17d8:	80 83       	st	Z, r24
    17da:	91 83       	std	Z+1, r25	; 0x01
    17dc:	a2 83       	std	Z+2, r26	; 0x02
    17de:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 2] |= temp_line[2];
    17e0:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	bc 01       	movw	r22, r24
    17ea:	6e 5f       	subi	r22, 0xFE	; 254
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    17f2:	88 2f       	mov	r24, r24
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 96       	adiw	r24, 0x02	; 2
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	81 5c       	subi	r24, 0xC1	; 193
    1802:	97 4f       	sbci	r25, 0xF7	; 247
    1804:	fc 01       	movw	r30, r24
    1806:	20 81       	ld	r18, Z
    1808:	31 81       	ldd	r19, Z+1	; 0x01
    180a:	42 81       	ldd	r20, Z+2	; 0x02
    180c:	53 81       	ldd	r21, Z+3	; 0x03
    180e:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    1812:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    1816:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    181a:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    181e:	82 2b       	or	r24, r18
    1820:	93 2b       	or	r25, r19
    1822:	a4 2b       	or	r26, r20
    1824:	b5 2b       	or	r27, r21
    1826:	9b 01       	movw	r18, r22
    1828:	22 0f       	add	r18, r18
    182a:	33 1f       	adc	r19, r19
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
    1830:	21 5c       	subi	r18, 0xC1	; 193
    1832:	37 4f       	sbci	r19, 0xF7	; 247
    1834:	f9 01       	movw	r30, r18
    1836:	80 83       	st	Z, r24
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	a2 83       	std	Z+2, r26	; 0x02
    183c:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 3] |= temp_line[3];
    183e:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1842:	88 2f       	mov	r24, r24
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	bc 01       	movw	r22, r24
    1848:	6d 5f       	subi	r22, 0xFD	; 253
    184a:	7f 4f       	sbci	r23, 0xFF	; 255
    184c:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1850:	88 2f       	mov	r24, r24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	03 96       	adiw	r24, 0x03	; 3
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	81 5c       	subi	r24, 0xC1	; 193
    1860:	97 4f       	sbci	r25, 0xF7	; 247
    1862:	fc 01       	movw	r30, r24
    1864:	20 81       	ld	r18, Z
    1866:	31 81       	ldd	r19, Z+1	; 0x01
    1868:	42 81       	ldd	r20, Z+2	; 0x02
    186a:	53 81       	ldd	r21, Z+3	; 0x03
    186c:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    1870:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    1874:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    1878:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    187c:	82 2b       	or	r24, r18
    187e:	93 2b       	or	r25, r19
    1880:	a4 2b       	or	r26, r20
    1882:	b5 2b       	or	r27, r21
    1884:	9b 01       	movw	r18, r22
    1886:	22 0f       	add	r18, r18
    1888:	33 1f       	adc	r19, r19
    188a:	22 0f       	add	r18, r18
    188c:	33 1f       	adc	r19, r19
    188e:	21 5c       	subi	r18, 0xC1	; 193
    1890:	37 4f       	sbci	r19, 0xF7	; 247
    1892:	f9 01       	movw	r30, r18
    1894:	80 83       	st	Z, r24
    1896:	91 83       	std	Z+1, r25	; 0x01
    1898:	a2 83       	std	Z+2, r26	; 0x02
    189a:	b3 83       	std	Z+3, r27	; 0x03
	}
}
    189c:	00 00       	nop
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	ff 91       	pop	r31
    18a8:	ef 91       	pop	r30
    18aa:	bf 91       	pop	r27
    18ac:	af 91       	pop	r26
    18ae:	9f 91       	pop	r25
    18b0:	8f 91       	pop	r24
    18b2:	7f 91       	pop	r23
    18b4:	6f 91       	pop	r22
    18b6:	5f 91       	pop	r21
    18b8:	4f 91       	pop	r20
    18ba:	3f 91       	pop	r19
    18bc:	2f 91       	pop	r18
    18be:	0f 90       	pop	r0
    18c0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    18c4:	0f 90       	pop	r0
    18c6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18ca:	0f 90       	pop	r0
    18cc:	1f 90       	pop	r1
    18ce:	18 95       	reti

000018d0 <__vector_8>:

ISR(INT7_vect)
{
    18d0:	1f 92       	push	r1
    18d2:	0f 92       	push	r0
    18d4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18d8:	0f 92       	push	r0
    18da:	11 24       	eor	r1, r1
    18dc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    18e0:	0f 92       	push	r0
    18e2:	2f 93       	push	r18
    18e4:	3f 93       	push	r19
    18e6:	4f 93       	push	r20
    18e8:	5f 93       	push	r21
    18ea:	6f 93       	push	r22
    18ec:	7f 93       	push	r23
    18ee:	8f 93       	push	r24
    18f0:	9f 93       	push	r25
    18f2:	af 93       	push	r26
    18f4:	bf 93       	push	r27
    18f6:	ef 93       	push	r30
    18f8:	ff 93       	push	r31
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <__vector_8+0x30>
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
	SendCommand01(0x0F, 0x01, 0x03);
    1904:	43 e0       	ldi	r20, 0x03	; 3
    1906:	61 e0       	ldi	r22, 0x01	; 1
    1908:	8f e0       	ldi	r24, 0x0F	; 15
    190a:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
	if(screen == Menu_snake)
    190e:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1912:	88 23       	and	r24, r24
    1914:	21 f4       	brne	.+8      	; 0x191e <__vector_8+0x4e>
	{
		screen = Play_snake;
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
	}
	else
	{
		screen = Ready;
	}
}
    191c:	11 c1       	rjmp	.+546    	; 0x1b40 <__vector_8+0x270>
	SendCommand01(0x0F, 0x01, 0x03);
	if(screen == Menu_snake)
	{
		screen = Play_snake;
	}
	else if(screen == Menu_tetris)
    191e:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	21 f4       	brne	.+8      	; 0x192e <__vector_8+0x5e>
	{
		screen = Play_tetris;
    1926:	83 e0       	ldi	r24, 0x03	; 3
    1928:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
	}
	else
	{
		screen = Ready;
	}
}
    192c:	09 c1       	rjmp	.+530    	; 0x1b40 <__vector_8+0x270>
	}
	else if(screen == Menu_tetris)
	{
		screen = Play_tetris;
	}
	else if(screen == Play_snake)
    192e:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1932:	82 30       	cpi	r24, 0x02	; 2
    1934:	79 f4       	brne	.+30     	; 0x1954 <__vector_8+0x84>
	{
		if(dir != RIGHT)
    1936:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    193a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    193e:	8d 34       	cpi	r24, 0x4D	; 77
    1940:	91 05       	cpc	r25, r1
    1942:	09 f4       	brne	.+2      	; 0x1946 <__vector_8+0x76>
    1944:	fd c0       	rjmp	.+506    	; 0x1b40 <__vector_8+0x270>
		{
			//SendCommand01(0x0F, 0x01, 0x03);
			
			dir = LEFT;
    1946:	8b e4       	ldi	r24, 0x4B	; 75
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    194e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
	else
	{
		screen = Ready;
	}
}
    1952:	f6 c0       	rjmp	.+492    	; 0x1b40 <__vector_8+0x270>
			//SendCommand01(0x0F, 0x01, 0x03);
			
			dir = LEFT;
		}
	}
	else if(screen == Play_tetris)
    1954:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1958:	83 30       	cpi	r24, 0x03	; 3
    195a:	09 f0       	breq	.+2      	; 0x195e <__vector_8+0x8e>
    195c:	ee c0       	rjmp	.+476    	; 0x1b3a <__vector_8+0x26a>
	{
		for(int i = 0; i < 32; i++)
    195e:	1a 82       	std	Y+2, r1	; 0x02
    1960:	19 82       	std	Y+1, r1	; 0x01
    1962:	1f c0       	rjmp	.+62     	; 0x19a2 <__vector_8+0xd2>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	9a 81       	ldd	r25, Y+2	; 0x02
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	84 56       	subi	r24, 0x64	; 100
    1972:	98 4f       	sbci	r25, 0xF8	; 248
    1974:	fc 01       	movw	r30, r24
    1976:	80 81       	ld	r24, Z
    1978:	91 81       	ldd	r25, Z+1	; 0x01
    197a:	a2 81       	ldd	r26, Z+2	; 0x02
    197c:	b3 81       	ldd	r27, Z+3	; 0x03
    197e:	29 81       	ldd	r18, Y+1	; 0x01
    1980:	3a 81       	ldd	r19, Y+2	; 0x02
    1982:	22 0f       	add	r18, r18
    1984:	33 1f       	adc	r19, r19
    1986:	22 0f       	add	r18, r18
    1988:	33 1f       	adc	r19, r19
    198a:	21 5c       	subi	r18, 0xC1	; 193
    198c:	37 4f       	sbci	r19, 0xF7	; 247
    198e:	f9 01       	movw	r30, r18
    1990:	80 83       	st	Z, r24
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	a2 83       	std	Z+2, r26	; 0x02
    1996:	b3 83       	std	Z+3, r27	; 0x03
			dir = LEFT;
		}
	}
	else if(screen == Play_tetris)
	{
		for(int i = 0; i < 32; i++)
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	9a 81       	ldd	r25, Y+2	; 0x02
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	9a 83       	std	Y+2, r25	; 0x02
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	80 97       	sbiw	r24, 0x20	; 32
    19a8:	ec f2       	brlt	.-70     	; 0x1964 <__vector_8+0x94>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
		}

		cur_col++;
    19aa:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <cur_col>
    19ae:	8f 5f       	subi	r24, 0xFF	; 255
    19b0:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <cur_col>

		tetriminos_to_temp_line();
    19b4:	a9 d9       	rcall	.-3246   	; 0xd08 <tetriminos_to_temp_line>

		if(Collision() == 1) cur_col--;
    19b6:	09 d9       	rcall	.-3566   	; 0xbca <Collision>
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	29 f4       	brne	.+10     	; 0x19c6 <__vector_8+0xf6>
    19bc:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <cur_col>
    19c0:	81 50       	subi	r24, 0x01	; 1
    19c2:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <cur_col>
		
		tetriminos_to_temp_line();
    19c6:	a0 d9       	rcall	.-3264   	; 0xd08 <tetriminos_to_temp_line>
    19c8:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>

		
		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
    19cc:	68 2f       	mov	r22, r24
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	81 5c       	subi	r24, 0xC1	; 193
    19e2:	97 4f       	sbci	r25, 0xF7	; 247
    19e4:	fc 01       	movw	r30, r24
    19e6:	20 81       	ld	r18, Z
    19e8:	31 81       	ldd	r19, Z+1	; 0x01
    19ea:	42 81       	ldd	r20, Z+2	; 0x02
    19ec:	53 81       	ldd	r21, Z+3	; 0x03
    19ee:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    19f2:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    19f6:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    19fa:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    19fe:	82 2b       	or	r24, r18
    1a00:	93 2b       	or	r25, r19
    1a02:	a4 2b       	or	r26, r20
    1a04:	b5 2b       	or	r27, r21
    1a06:	9b 01       	movw	r18, r22
    1a08:	22 0f       	add	r18, r18
    1a0a:	33 1f       	adc	r19, r19
    1a0c:	22 0f       	add	r18, r18
    1a0e:	33 1f       	adc	r19, r19
    1a10:	21 5c       	subi	r18, 0xC1	; 193
    1a12:	37 4f       	sbci	r19, 0xF7	; 247
    1a14:	f9 01       	movw	r30, r18
    1a16:	80 83       	st	Z, r24
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	a2 83       	std	Z+2, r26	; 0x02
    1a1c:	b3 83       	std	Z+3, r27	; 0x03
    1a1e:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
		game_board[cur_line + 1] |= temp_line[1];
    1a22:	88 2f       	mov	r24, r24
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	bc 01       	movw	r22, r24
    1a28:	6f 5f       	subi	r22, 0xFF	; 255
    1a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2c:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	01 96       	adiw	r24, 0x01	; 1
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	81 5c       	subi	r24, 0xC1	; 193
    1a40:	97 4f       	sbci	r25, 0xF7	; 247
    1a42:	fc 01       	movw	r30, r24
    1a44:	20 81       	ld	r18, Z
    1a46:	31 81       	ldd	r19, Z+1	; 0x01
    1a48:	42 81       	ldd	r20, Z+2	; 0x02
    1a4a:	53 81       	ldd	r21, Z+3	; 0x03
    1a4c:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    1a50:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    1a54:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    1a58:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    1a5c:	82 2b       	or	r24, r18
    1a5e:	93 2b       	or	r25, r19
    1a60:	a4 2b       	or	r26, r20
    1a62:	b5 2b       	or	r27, r21
    1a64:	9b 01       	movw	r18, r22
    1a66:	22 0f       	add	r18, r18
    1a68:	33 1f       	adc	r19, r19
    1a6a:	22 0f       	add	r18, r18
    1a6c:	33 1f       	adc	r19, r19
    1a6e:	21 5c       	subi	r18, 0xC1	; 193
    1a70:	37 4f       	sbci	r19, 0xF7	; 247
    1a72:	f9 01       	movw	r30, r18
    1a74:	80 83       	st	Z, r24
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	a2 83       	std	Z+2, r26	; 0x02
    1a7a:	b3 83       	std	Z+3, r27	; 0x03
    1a7c:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
		game_board[cur_line + 2] |= temp_line[2];
    1a80:	88 2f       	mov	r24, r24
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	bc 01       	movw	r22, r24
    1a86:	6e 5f       	subi	r22, 0xFE	; 254
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1a8e:	88 2f       	mov	r24, r24
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	02 96       	adiw	r24, 0x02	; 2
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	81 5c       	subi	r24, 0xC1	; 193
    1a9e:	97 4f       	sbci	r25, 0xF7	; 247
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	20 81       	ld	r18, Z
    1aa4:	31 81       	ldd	r19, Z+1	; 0x01
    1aa6:	42 81       	ldd	r20, Z+2	; 0x02
    1aa8:	53 81       	ldd	r21, Z+3	; 0x03
    1aaa:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    1aae:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    1ab2:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    1ab6:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    1aba:	82 2b       	or	r24, r18
    1abc:	93 2b       	or	r25, r19
    1abe:	a4 2b       	or	r26, r20
    1ac0:	b5 2b       	or	r27, r21
    1ac2:	9b 01       	movw	r18, r22
    1ac4:	22 0f       	add	r18, r18
    1ac6:	33 1f       	adc	r19, r19
    1ac8:	22 0f       	add	r18, r18
    1aca:	33 1f       	adc	r19, r19
    1acc:	21 5c       	subi	r18, 0xC1	; 193
    1ace:	37 4f       	sbci	r19, 0xF7	; 247
    1ad0:	f9 01       	movw	r30, r18
    1ad2:	80 83       	st	Z, r24
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	a2 83       	std	Z+2, r26	; 0x02
    1ad8:	b3 83       	std	Z+3, r27	; 0x03
    1ada:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
		game_board[cur_line + 3] |= temp_line[3];
    1ade:	88 2f       	mov	r24, r24
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	bc 01       	movw	r22, r24
    1ae4:	6d 5f       	subi	r22, 0xFD	; 253
    1ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae8:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1aec:	88 2f       	mov	r24, r24
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	03 96       	adiw	r24, 0x03	; 3
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	81 5c       	subi	r24, 0xC1	; 193
    1afc:	97 4f       	sbci	r25, 0xF7	; 247
    1afe:	fc 01       	movw	r30, r24
    1b00:	20 81       	ld	r18, Z
    1b02:	31 81       	ldd	r19, Z+1	; 0x01
    1b04:	42 81       	ldd	r20, Z+2	; 0x02
    1b06:	53 81       	ldd	r21, Z+3	; 0x03
    1b08:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    1b0c:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    1b10:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    1b14:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    1b18:	82 2b       	or	r24, r18
    1b1a:	93 2b       	or	r25, r19
    1b1c:	a4 2b       	or	r26, r20
    1b1e:	b5 2b       	or	r27, r21
    1b20:	9b 01       	movw	r18, r22
    1b22:	22 0f       	add	r18, r18
    1b24:	33 1f       	adc	r19, r19
    1b26:	22 0f       	add	r18, r18
    1b28:	33 1f       	adc	r19, r19
    1b2a:	21 5c       	subi	r18, 0xC1	; 193
    1b2c:	37 4f       	sbci	r19, 0xF7	; 247
    1b2e:	f9 01       	movw	r30, r18
    1b30:	80 83       	st	Z, r24
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	a2 83       	std	Z+2, r26	; 0x02
    1b36:	b3 83       	std	Z+3, r27	; 0x03
    1b38:	03 c0       	rjmp	.+6      	; 0x1b40 <__vector_8+0x270>
	}
	else
	{
		screen = Ready;
	}
}
    1b3a:	86 e0       	ldi	r24, 0x06	; 6
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
	else
	{
		screen = Ready;
    1b3c:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
    1b40:	00 00       	nop
	}
}
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	ff 91       	pop	r31
    1b4c:	ef 91       	pop	r30
    1b4e:	bf 91       	pop	r27
    1b50:	af 91       	pop	r26
    1b52:	9f 91       	pop	r25
    1b54:	8f 91       	pop	r24
    1b56:	7f 91       	pop	r23
    1b58:	6f 91       	pop	r22
    1b5a:	5f 91       	pop	r21
    1b5c:	4f 91       	pop	r20
    1b5e:	3f 91       	pop	r19
    1b60:	2f 91       	pop	r18
    1b62:	0f 90       	pop	r0
    1b64:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1b68:	0f 90       	pop	r0
    1b6a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b6e:	0f 90       	pop	r0
    1b70:	1f 90       	pop	r1
    1b72:	18 95       	reti

00001b74 <__vector_12>:
    1b74:	1f 92       	push	r1

ISR(TIMER1_COMPA_vect)	//OCR1A값에 따라 블록 이동속도가 결정된다.
{
    1b76:	0f 92       	push	r0
    1b78:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b7c:	0f 92       	push	r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1b84:	0f 92       	push	r0
    1b86:	2f 93       	push	r18
    1b88:	3f 93       	push	r19
    1b8a:	4f 93       	push	r20
    1b8c:	5f 93       	push	r21
    1b8e:	6f 93       	push	r22
    1b90:	7f 93       	push	r23
    1b92:	8f 93       	push	r24
    1b94:	9f 93       	push	r25
    1b96:	af 93       	push	r26
    1b98:	bf 93       	push	r27
    1b9a:	ef 93       	push	r30
    1b9c:	ff 93       	push	r31
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <__vector_12+0x30>
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <__vector_12+0x32>
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
	if(screen == Play_tetris)
    1baa:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1bae:	83 30       	cpi	r24, 0x03	; 3
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <__vector_12+0x40>
    1bb2:	d3 c1       	rjmp	.+934    	; 0x1f5a <__vector_12+0x3e6>
	{
		if(new_block == 0)
    1bb4:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <new_block>
    1bb8:	88 23       	and	r24, r24
    1bba:	09 f0       	breq	.+2      	; 0x1bbe <__vector_12+0x4a>
    1bbc:	ce c1       	rjmp	.+924    	; 0x1f5a <__vector_12+0x3e6>
		{
			for(int i = 0; i < 32; i++)
    1bbe:	1a 82       	std	Y+2, r1	; 0x02
    1bc0:	19 82       	std	Y+1, r1	; 0x01
    1bc2:	1f c0       	rjmp	.+62     	; 0x1c02 <__vector_12+0x8e>
			{
				game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	84 56       	subi	r24, 0x64	; 100
    1bd2:	98 4f       	sbci	r25, 0xF8	; 248
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	80 81       	ld	r24, Z
    1bd8:	91 81       	ldd	r25, Z+1	; 0x01
    1bda:	a2 81       	ldd	r26, Z+2	; 0x02
    1bdc:	b3 81       	ldd	r27, Z+3	; 0x03
    1bde:	29 81       	ldd	r18, Y+1	; 0x01
    1be0:	3a 81       	ldd	r19, Y+2	; 0x02
    1be2:	22 0f       	add	r18, r18
    1be4:	33 1f       	adc	r19, r19
    1be6:	22 0f       	add	r18, r18
    1be8:	33 1f       	adc	r19, r19
    1bea:	21 5c       	subi	r18, 0xC1	; 193
    1bec:	37 4f       	sbci	r19, 0xF7	; 247
    1bee:	f9 01       	movw	r30, r18
    1bf0:	80 83       	st	Z, r24
    1bf2:	91 83       	std	Z+1, r25	; 0x01
    1bf4:	a2 83       	std	Z+2, r26	; 0x02
    1bf6:	b3 83       	std	Z+3, r27	; 0x03
{
	if(screen == Play_tetris)
	{
		if(new_block == 0)
		{
			for(int i = 0; i < 32; i++)
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	01 96       	adiw	r24, 0x01	; 1
    1bfe:	9a 83       	std	Y+2, r25	; 0x02
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	9a 81       	ldd	r25, Y+2	; 0x02
    1c06:	80 97       	sbiw	r24, 0x20	; 32
    1c08:	ec f2       	brlt	.-70     	; 0x1bc4 <__vector_12+0x50>
			{
				game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
			}

			cur_line++;	//현재라인 아래로 이동
    1c0a:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1c0e:	8f 5f       	subi	r24, 0xFF	; 255
    1c10:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <cur_line>
			
			if(Collision() == 1)	//이동후 충돌 발생시
    1c14:	0e 94 e5 05 	call	0xbca	; 0xbca <Collision>
    1c18:	81 30       	cpi	r24, 0x01	; 1
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <__vector_12+0xaa>
    1c1c:	c0 c0       	rjmp	.+384    	; 0x1d9e <__vector_12+0x22a>
			{
				cur_line--;	//원래 라인으로 복귀
    1c1e:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1c22:	81 50       	subi	r24, 0x01	; 1
    1c24:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <cur_line>
				main_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
    1c28:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1c2c:	68 2f       	mov	r22, r24
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1c34:	88 2f       	mov	r24, r24
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	84 56       	subi	r24, 0x64	; 100
    1c42:	98 4f       	sbci	r25, 0xF8	; 248
    1c44:	fc 01       	movw	r30, r24
    1c46:	20 81       	ld	r18, Z
    1c48:	31 81       	ldd	r19, Z+1	; 0x01
    1c4a:	42 81       	ldd	r20, Z+2	; 0x02
    1c4c:	53 81       	ldd	r21, Z+3	; 0x03
    1c4e:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    1c52:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    1c56:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    1c5a:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    1c5e:	82 2b       	or	r24, r18
    1c60:	93 2b       	or	r25, r19
    1c62:	a4 2b       	or	r26, r20
    1c64:	b5 2b       	or	r27, r21
    1c66:	9b 01       	movw	r18, r22
    1c68:	22 0f       	add	r18, r18
    1c6a:	33 1f       	adc	r19, r19
    1c6c:	22 0f       	add	r18, r18
    1c6e:	33 1f       	adc	r19, r19
    1c70:	24 56       	subi	r18, 0x64	; 100
    1c72:	38 4f       	sbci	r19, 0xF8	; 248
    1c74:	f9 01       	movw	r30, r18
    1c76:	80 83       	st	Z, r24
    1c78:	91 83       	std	Z+1, r25	; 0x01
    1c7a:	a2 83       	std	Z+2, r26	; 0x02
    1c7c:	b3 83       	std	Z+3, r27	; 0x03
				main_board[cur_line + 1] |= temp_line[1];
    1c7e:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1c82:	88 2f       	mov	r24, r24
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	bc 01       	movw	r22, r24
    1c88:	6f 5f       	subi	r22, 0xFF	; 255
    1c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8c:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	01 96       	adiw	r24, 0x01	; 1
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	84 56       	subi	r24, 0x64	; 100
    1ca0:	98 4f       	sbci	r25, 0xF8	; 248
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	20 81       	ld	r18, Z
    1ca6:	31 81       	ldd	r19, Z+1	; 0x01
    1ca8:	42 81       	ldd	r20, Z+2	; 0x02
    1caa:	53 81       	ldd	r21, Z+3	; 0x03
    1cac:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    1cb0:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    1cb4:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    1cb8:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    1cbc:	82 2b       	or	r24, r18
    1cbe:	93 2b       	or	r25, r19
    1cc0:	a4 2b       	or	r26, r20
    1cc2:	b5 2b       	or	r27, r21
    1cc4:	9b 01       	movw	r18, r22
    1cc6:	22 0f       	add	r18, r18
    1cc8:	33 1f       	adc	r19, r19
    1cca:	22 0f       	add	r18, r18
    1ccc:	33 1f       	adc	r19, r19
    1cce:	24 56       	subi	r18, 0x64	; 100
    1cd0:	38 4f       	sbci	r19, 0xF8	; 248
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	80 83       	st	Z, r24
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	a2 83       	std	Z+2, r26	; 0x02
    1cda:	b3 83       	std	Z+3, r27	; 0x03
				main_board[cur_line + 2] |= temp_line[2];
    1cdc:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1ce0:	88 2f       	mov	r24, r24
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	bc 01       	movw	r22, r24
    1ce6:	6e 5f       	subi	r22, 0xFE	; 254
    1ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cea:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1cee:	88 2f       	mov	r24, r24
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	02 96       	adiw	r24, 0x02	; 2
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	84 56       	subi	r24, 0x64	; 100
    1cfe:	98 4f       	sbci	r25, 0xF8	; 248
    1d00:	fc 01       	movw	r30, r24
    1d02:	20 81       	ld	r18, Z
    1d04:	31 81       	ldd	r19, Z+1	; 0x01
    1d06:	42 81       	ldd	r20, Z+2	; 0x02
    1d08:	53 81       	ldd	r21, Z+3	; 0x03
    1d0a:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    1d0e:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    1d12:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    1d16:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    1d1a:	82 2b       	or	r24, r18
    1d1c:	93 2b       	or	r25, r19
    1d1e:	a4 2b       	or	r26, r20
    1d20:	b5 2b       	or	r27, r21
    1d22:	9b 01       	movw	r18, r22
    1d24:	22 0f       	add	r18, r18
    1d26:	33 1f       	adc	r19, r19
    1d28:	22 0f       	add	r18, r18
    1d2a:	33 1f       	adc	r19, r19
    1d2c:	24 56       	subi	r18, 0x64	; 100
    1d2e:	38 4f       	sbci	r19, 0xF8	; 248
    1d30:	f9 01       	movw	r30, r18
    1d32:	80 83       	st	Z, r24
    1d34:	91 83       	std	Z+1, r25	; 0x01
    1d36:	a2 83       	std	Z+2, r26	; 0x02
    1d38:	b3 83       	std	Z+3, r27	; 0x03
				main_board[cur_line + 3] |= temp_line[3];
    1d3a:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1d3e:	88 2f       	mov	r24, r24
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	bc 01       	movw	r22, r24
    1d44:	6d 5f       	subi	r22, 0xFD	; 253
    1d46:	7f 4f       	sbci	r23, 0xFF	; 255
    1d48:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1d4c:	88 2f       	mov	r24, r24
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	03 96       	adiw	r24, 0x03	; 3
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	84 56       	subi	r24, 0x64	; 100
    1d5c:	98 4f       	sbci	r25, 0xF8	; 248
    1d5e:	fc 01       	movw	r30, r24
    1d60:	20 81       	ld	r18, Z
    1d62:	31 81       	ldd	r19, Z+1	; 0x01
    1d64:	42 81       	ldd	r20, Z+2	; 0x02
    1d66:	53 81       	ldd	r21, Z+3	; 0x03
    1d68:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    1d6c:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    1d70:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    1d74:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    1d78:	82 2b       	or	r24, r18
    1d7a:	93 2b       	or	r25, r19
    1d7c:	a4 2b       	or	r26, r20
    1d7e:	b5 2b       	or	r27, r21
    1d80:	9b 01       	movw	r18, r22
    1d82:	22 0f       	add	r18, r18
    1d84:	33 1f       	adc	r19, r19
    1d86:	22 0f       	add	r18, r18
    1d88:	33 1f       	adc	r19, r19
    1d8a:	24 56       	subi	r18, 0x64	; 100
    1d8c:	38 4f       	sbci	r19, 0xF8	; 248
    1d8e:	f9 01       	movw	r30, r18
    1d90:	80 83       	st	Z, r24
    1d92:	91 83       	std	Z+1, r25	; 0x01
    1d94:	a2 83       	std	Z+2, r26	; 0x02
    1d96:	b3 83       	std	Z+3, r27	; 0x03

				new_block = 1;	//새로운 블록 플레그 켜짐
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <new_block>
			}

			for(int i = 0; i < 32; i++)
    1d9e:	1c 82       	std	Y+4, r1	; 0x04
    1da0:	1b 82       	std	Y+3, r1	; 0x03
    1da2:	1f c0       	rjmp	.+62     	; 0x1de2 <__vector_12+0x26e>
			{
				game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	9c 81       	ldd	r25, Y+4	; 0x04
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	84 56       	subi	r24, 0x64	; 100
    1db2:	98 4f       	sbci	r25, 0xF8	; 248
    1db4:	fc 01       	movw	r30, r24
    1db6:	80 81       	ld	r24, Z
    1db8:	91 81       	ldd	r25, Z+1	; 0x01
    1dba:	a2 81       	ldd	r26, Z+2	; 0x02
    1dbc:	b3 81       	ldd	r27, Z+3	; 0x03
    1dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc2:	22 0f       	add	r18, r18
    1dc4:	33 1f       	adc	r19, r19
    1dc6:	22 0f       	add	r18, r18
    1dc8:	33 1f       	adc	r19, r19
    1dca:	21 5c       	subi	r18, 0xC1	; 193
    1dcc:	37 4f       	sbci	r19, 0xF7	; 247
    1dce:	f9 01       	movw	r30, r18
    1dd0:	80 83       	st	Z, r24
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	a2 83       	std	Z+2, r26	; 0x02
    1dd6:	b3 83       	std	Z+3, r27	; 0x03
				main_board[cur_line + 3] |= temp_line[3];

				new_block = 1;	//새로운 블록 플레그 켜짐
			}

			for(int i = 0; i < 32; i++)
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	9c 83       	std	Y+4, r25	; 0x04
    1de0:	8b 83       	std	Y+3, r24	; 0x03
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	80 97       	sbiw	r24, 0x20	; 32
    1de8:	ec f2       	brlt	.-70     	; 0x1da4 <__vector_12+0x230>
			{
				game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
			}

			game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
    1dea:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1dee:	68 2f       	mov	r22, r24
    1df0:	70 e0       	ldi	r23, 0x00	; 0
    1df2:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	81 5c       	subi	r24, 0xC1	; 193
    1e04:	97 4f       	sbci	r25, 0xF7	; 247
    1e06:	fc 01       	movw	r30, r24
    1e08:	20 81       	ld	r18, Z
    1e0a:	31 81       	ldd	r19, Z+1	; 0x01
    1e0c:	42 81       	ldd	r20, Z+2	; 0x02
    1e0e:	53 81       	ldd	r21, Z+3	; 0x03
    1e10:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    1e14:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    1e18:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    1e1c:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    1e20:	82 2b       	or	r24, r18
    1e22:	93 2b       	or	r25, r19
    1e24:	a4 2b       	or	r26, r20
    1e26:	b5 2b       	or	r27, r21
    1e28:	9b 01       	movw	r18, r22
    1e2a:	22 0f       	add	r18, r18
    1e2c:	33 1f       	adc	r19, r19
    1e2e:	22 0f       	add	r18, r18
    1e30:	33 1f       	adc	r19, r19
    1e32:	21 5c       	subi	r18, 0xC1	; 193
    1e34:	37 4f       	sbci	r19, 0xF7	; 247
    1e36:	f9 01       	movw	r30, r18
    1e38:	80 83       	st	Z, r24
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	a2 83       	std	Z+2, r26	; 0x02
    1e3e:	b3 83       	std	Z+3, r27	; 0x03
			game_board[cur_line + 1] |= temp_line[1];
    1e40:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1e44:	88 2f       	mov	r24, r24
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	bc 01       	movw	r22, r24
    1e4a:	6f 5f       	subi	r22, 0xFF	; 255
    1e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4e:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1e52:	88 2f       	mov	r24, r24
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	01 96       	adiw	r24, 0x01	; 1
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	81 5c       	subi	r24, 0xC1	; 193
    1e62:	97 4f       	sbci	r25, 0xF7	; 247
    1e64:	fc 01       	movw	r30, r24
    1e66:	20 81       	ld	r18, Z
    1e68:	31 81       	ldd	r19, Z+1	; 0x01
    1e6a:	42 81       	ldd	r20, Z+2	; 0x02
    1e6c:	53 81       	ldd	r21, Z+3	; 0x03
    1e6e:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    1e72:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    1e76:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    1e7a:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    1e7e:	82 2b       	or	r24, r18
    1e80:	93 2b       	or	r25, r19
    1e82:	a4 2b       	or	r26, r20
    1e84:	b5 2b       	or	r27, r21
    1e86:	9b 01       	movw	r18, r22
    1e88:	22 0f       	add	r18, r18
    1e8a:	33 1f       	adc	r19, r19
    1e8c:	22 0f       	add	r18, r18
    1e8e:	33 1f       	adc	r19, r19
    1e90:	21 5c       	subi	r18, 0xC1	; 193
    1e92:	37 4f       	sbci	r19, 0xF7	; 247
    1e94:	f9 01       	movw	r30, r18
    1e96:	80 83       	st	Z, r24
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	a2 83       	std	Z+2, r26	; 0x02
    1e9c:	b3 83       	std	Z+3, r27	; 0x03
			game_board[cur_line + 2] |= temp_line[2];
    1e9e:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1ea2:	88 2f       	mov	r24, r24
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	bc 01       	movw	r22, r24
    1ea8:	6e 5f       	subi	r22, 0xFE	; 254
    1eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1eac:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1eb0:	88 2f       	mov	r24, r24
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	02 96       	adiw	r24, 0x02	; 2
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	81 5c       	subi	r24, 0xC1	; 193
    1ec0:	97 4f       	sbci	r25, 0xF7	; 247
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	20 81       	ld	r18, Z
    1ec6:	31 81       	ldd	r19, Z+1	; 0x01
    1ec8:	42 81       	ldd	r20, Z+2	; 0x02
    1eca:	53 81       	ldd	r21, Z+3	; 0x03
    1ecc:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    1ed0:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    1ed4:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    1ed8:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    1edc:	82 2b       	or	r24, r18
    1ede:	93 2b       	or	r25, r19
    1ee0:	a4 2b       	or	r26, r20
    1ee2:	b5 2b       	or	r27, r21
    1ee4:	9b 01       	movw	r18, r22
    1ee6:	22 0f       	add	r18, r18
    1ee8:	33 1f       	adc	r19, r19
    1eea:	22 0f       	add	r18, r18
    1eec:	33 1f       	adc	r19, r19
    1eee:	21 5c       	subi	r18, 0xC1	; 193
    1ef0:	37 4f       	sbci	r19, 0xF7	; 247
    1ef2:	f9 01       	movw	r30, r18
    1ef4:	80 83       	st	Z, r24
    1ef6:	91 83       	std	Z+1, r25	; 0x01
    1ef8:	a2 83       	std	Z+2, r26	; 0x02
    1efa:	b3 83       	std	Z+3, r27	; 0x03
			game_board[cur_line + 3] |= temp_line[3];
    1efc:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1f00:	88 2f       	mov	r24, r24
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	bc 01       	movw	r22, r24
    1f06:	6d 5f       	subi	r22, 0xFD	; 253
    1f08:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0a:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	03 96       	adiw	r24, 0x03	; 3
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	81 5c       	subi	r24, 0xC1	; 193
    1f1e:	97 4f       	sbci	r25, 0xF7	; 247
    1f20:	fc 01       	movw	r30, r24
    1f22:	20 81       	ld	r18, Z
    1f24:	31 81       	ldd	r19, Z+1	; 0x01
    1f26:	42 81       	ldd	r20, Z+2	; 0x02
    1f28:	53 81       	ldd	r21, Z+3	; 0x03
    1f2a:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    1f2e:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    1f32:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    1f36:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    1f3a:	82 2b       	or	r24, r18
    1f3c:	93 2b       	or	r25, r19
    1f3e:	a4 2b       	or	r26, r20
    1f40:	b5 2b       	or	r27, r21
    1f42:	9b 01       	movw	r18, r22
    1f44:	22 0f       	add	r18, r18
    1f46:	33 1f       	adc	r19, r19
    1f48:	22 0f       	add	r18, r18
    1f4a:	33 1f       	adc	r19, r19
    1f4c:	21 5c       	subi	r18, 0xC1	; 193
    1f4e:	37 4f       	sbci	r19, 0xF7	; 247
    1f50:	f9 01       	movw	r30, r18
    1f52:	80 83       	st	Z, r24
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	a2 83       	std	Z+2, r26	; 0x02
    1f58:	b3 83       	std	Z+3, r27	; 0x03

		}
	}
}
    1f5a:	00 00       	nop
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	ff 91       	pop	r31
    1f6a:	ef 91       	pop	r30
    1f6c:	bf 91       	pop	r27
    1f6e:	af 91       	pop	r26
    1f70:	9f 91       	pop	r25
    1f72:	8f 91       	pop	r24
    1f74:	7f 91       	pop	r23
    1f76:	6f 91       	pop	r22
    1f78:	5f 91       	pop	r21
    1f7a:	4f 91       	pop	r20
    1f7c:	3f 91       	pop	r19
    1f7e:	2f 91       	pop	r18
    1f80:	0f 90       	pop	r0
    1f82:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1f86:	0f 90       	pop	r0
    1f88:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1f8c:	0f 90       	pop	r0
    1f8e:	1f 90       	pop	r1
    1f90:	18 95       	reti

00001f92 <snake_title>:




void snake_title()
{
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <snake_title+0x6>
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <snake_title+0x8>
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
	oled_msg(0, 3, "KMM's SNAKE GAME");
    1f9e:	8b e9       	ldi	r24, 0x9B	; 155
    1fa0:	92 e0       	ldi	r25, 0x02	; 2
    1fa2:	89 2f       	mov	r24, r25
    1fa4:	8f 93       	push	r24
    1fa6:	8b e9       	ldi	r24, 0x9B	; 155
    1fa8:	92 e0       	ldi	r25, 0x02	; 2
    1faa:	8f 93       	push	r24
    1fac:	1f 92       	push	r1
    1fae:	83 e0       	ldi	r24, 0x03	; 3
    1fb0:	8f 93       	push	r24
    1fb2:	1f 92       	push	r1
    1fb4:	1f 92       	push	r1
    1fb6:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
	for(int i = 0; i < 128; i++)
    1fc6:	1a 82       	std	Y+2, r1	; 0x02
    1fc8:	19 82       	std	Y+1, r1	; 0x01
    1fca:	1d c0       	rjmp	.+58     	; 0x2006 <snake_title+0x74>
	{
		ssd1306_set_page_start(2);
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
		ssd1306_data(horizon1, 1);
    1fd8:	61 e0       	ldi	r22, 0x01	; 1
    1fda:	70 e0       	ldi	r23, 0x00	; 0
    1fdc:	88 e0       	ldi	r24, 0x08	; 8
    1fde:	91 e0       	ldi	r25, 0x01	; 1
    1fe0:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
		ssd1306_set_page_start(7);
    1fe4:	87 e0       	ldi	r24, 0x07	; 7
    1fe6:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
		ssd1306_data(horizon2, 1);
    1ff0:	61 e0       	ldi	r22, 0x01	; 1
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	89 e0       	ldi	r24, 0x09	; 9
    1ff6:	91 e0       	ldi	r25, 0x01	; 1
    1ff8:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>


void snake_title()
{
	oled_msg(0, 3, "KMM's SNAKE GAME");
	for(int i = 0; i < 128; i++)
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	01 96       	adiw	r24, 0x01	; 1
    2002:	9a 83       	std	Y+2, r25	; 0x02
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	9a 81       	ldd	r25, Y+2	; 0x02
    200a:	80 38       	cpi	r24, 0x80	; 128
    200c:	91 05       	cpc	r25, r1
    200e:	f4 f2       	brlt	.-68     	; 0x1fcc <snake_title+0x3a>
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
    2010:	1c 82       	std	Y+4, r1	; 0x04
    2012:	1b 82       	std	Y+3, r1	; 0x03
    2014:	1a c0       	rjmp	.+52     	; 0x204a <snake_title+0xb8>
	{
		ssd1306_set_page_start(i);
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_set_column_addr(0);
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
		ssd1306_data(vertical, 1);
    2022:	61 e0       	ldi	r22, 0x01	; 1
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	8a e0       	ldi	r24, 0x0A	; 10
    2028:	91 e0       	ldi	r25, 0x01	; 1
    202a:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
		ssd1306_set_column_addr(127);
    202e:	8f e7       	ldi	r24, 0x7F	; 127
    2030:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
		ssd1306_data(vertical, 1);
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	70 e0       	ldi	r23, 0x00	; 0
    2038:	8a e0       	ldi	r24, 0x0A	; 10
    203a:	91 e0       	ldi	r25, 0x01	; 1
    203c:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	01 96       	adiw	r24, 0x01	; 1
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	8b 83       	std	Y+3, r24	; 0x03
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	08 97       	sbiw	r24, 0x08	; 8
    2050:	14 f3       	brlt	.-60     	; 0x2016 <snake_title+0x84>
		ssd1306_data(vertical, 1);
		ssd1306_set_column_addr(127);
		ssd1306_data(vertical, 1);
	}

	snake_draw_map();
    2052:	09 d0       	rcall	.+18     	; 0x2066 <snake_draw_map>
	
	food(); // food 생성
    2054:	2f d3       	rcall	.+1630   	; 0x26b4 <food>
    2056:	00 00       	nop

}
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	08 95       	ret

00002066 <snake_draw_map>:
    2066:	cf 93       	push	r28

void snake_draw_map()
{
    2068:	df 93       	push	r29
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	c7 50       	subi	r28, 0x07	; 7
    2070:	d3 40       	sbci	r29, 0x03	; 3
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
	unsigned char MAP [6][128] = {0};
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	33 e0       	ldi	r19, 0x03	; 3
    2080:	ce 01       	movw	r24, r28
    2082:	08 96       	adiw	r24, 0x08	; 8
    2084:	dc 01       	movw	r26, r24
    2086:	f9 01       	movw	r30, r18
    2088:	1d 92       	st	X+, r1
    208a:	31 97       	sbiw	r30, 0x01	; 1
    208c:	e9 f7       	brne	.-6      	; 0x2088 <snake_draw_map+0x22>

	for(int i = 0; i < 6; i++)
    208e:	1a 82       	std	Y+2, r1	; 0x02
    2090:	19 82       	std	Y+1, r1	; 0x01
    2092:	7b c0       	rjmp	.+246    	; 0x218a <snake_draw_map+0x124>
	{
		for(int j = 0; j < 128; j++)
    2094:	1c 82       	std	Y+4, r1	; 0x04
    2096:	1b 82       	std	Y+3, r1	; 0x03
    2098:	6d c0       	rjmp	.+218    	; 0x2174 <snake_draw_map+0x10e>
		{
			if(j == 0) MAP[i][j] = vertical[0];
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	9c 81       	ldd	r25, Y+4	; 0x04
    209e:	89 2b       	or	r24, r25
    20a0:	b1 f4       	brne	.+44     	; 0x20ce <snake_draw_map+0x68>
    20a2:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <vertical>
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	96 95       	lsr	r25
    20ac:	98 2f       	mov	r25, r24
    20ae:	88 27       	eor	r24, r24
    20b0:	97 95       	ror	r25
    20b2:	87 95       	ror	r24
    20b4:	9e 01       	movw	r18, r28
    20b6:	2f 5f       	subi	r18, 0xFF	; 255
    20b8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ba:	28 0f       	add	r18, r24
    20bc:	39 1f       	adc	r19, r25
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	9c 81       	ldd	r25, Y+4	; 0x04
    20c2:	82 0f       	add	r24, r18
    20c4:	93 1f       	adc	r25, r19
    20c6:	07 96       	adiw	r24, 0x07	; 7
    20c8:	dc 01       	movw	r26, r24
    20ca:	4c 93       	st	X, r20
    20cc:	4e c0       	rjmp	.+156    	; 0x216a <snake_draw_map+0x104>
			else if(j == 127) MAP[i][j] = vertical[0];
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	8f 37       	cpi	r24, 0x7F	; 127
    20d4:	91 05       	cpc	r25, r1
    20d6:	b1 f4       	brne	.+44     	; 0x2104 <snake_draw_map+0x9e>
    20d8:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <vertical>
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	9a 81       	ldd	r25, Y+2	; 0x02
    20e0:	96 95       	lsr	r25
    20e2:	98 2f       	mov	r25, r24
    20e4:	88 27       	eor	r24, r24
    20e6:	97 95       	ror	r25
    20e8:	87 95       	ror	r24
    20ea:	9e 01       	movw	r18, r28
    20ec:	2f 5f       	subi	r18, 0xFF	; 255
    20ee:	3f 4f       	sbci	r19, 0xFF	; 255
    20f0:	28 0f       	add	r18, r24
    20f2:	39 1f       	adc	r19, r25
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	82 0f       	add	r24, r18
    20fa:	93 1f       	adc	r25, r19
    20fc:	07 96       	adiw	r24, 0x07	; 7
    20fe:	fc 01       	movw	r30, r24
    2100:	40 83       	st	Z, r20
    2102:	33 c0       	rjmp	.+102    	; 0x216a <snake_draw_map+0x104>
			else if(i == 0) MAP[i][j] = horizon1[0];
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	89 2b       	or	r24, r25
    210a:	b1 f4       	brne	.+44     	; 0x2138 <snake_draw_map+0xd2>
    210c:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <horizon1>
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	9a 81       	ldd	r25, Y+2	; 0x02
    2114:	96 95       	lsr	r25
    2116:	98 2f       	mov	r25, r24
    2118:	88 27       	eor	r24, r24
    211a:	97 95       	ror	r25
    211c:	87 95       	ror	r24
    211e:	9e 01       	movw	r18, r28
    2120:	2f 5f       	subi	r18, 0xFF	; 255
    2122:	3f 4f       	sbci	r19, 0xFF	; 255
    2124:	28 0f       	add	r18, r24
    2126:	39 1f       	adc	r19, r25
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	9c 81       	ldd	r25, Y+4	; 0x04
    212c:	82 0f       	add	r24, r18
    212e:	93 1f       	adc	r25, r19
    2130:	07 96       	adiw	r24, 0x07	; 7
    2132:	dc 01       	movw	r26, r24
    2134:	4c 93       	st	X, r20
    2136:	19 c0       	rjmp	.+50     	; 0x216a <snake_draw_map+0x104>
			else if(i == 5) MAP[i][j] = horizon2[0];
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	9a 81       	ldd	r25, Y+2	; 0x02
    213c:	05 97       	sbiw	r24, 0x05	; 5
    213e:	a9 f4       	brne	.+42     	; 0x216a <snake_draw_map+0x104>
    2140:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <horizon2>
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	96 95       	lsr	r25
    214a:	98 2f       	mov	r25, r24
    214c:	88 27       	eor	r24, r24
    214e:	97 95       	ror	r25
    2150:	87 95       	ror	r24
    2152:	9e 01       	movw	r18, r28
    2154:	2f 5f       	subi	r18, 0xFF	; 255
    2156:	3f 4f       	sbci	r19, 0xFF	; 255
    2158:	28 0f       	add	r18, r24
    215a:	39 1f       	adc	r19, r25
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	82 0f       	add	r24, r18
    2162:	93 1f       	adc	r25, r19
    2164:	07 96       	adiw	r24, 0x07	; 7
    2166:	fc 01       	movw	r30, r24
    2168:	40 83       	st	Z, r20
{
	unsigned char MAP [6][128] = {0};

	for(int i = 0; i < 6; i++)
	{
		for(int j = 0; j < 128; j++)
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	9c 81       	ldd	r25, Y+4	; 0x04
    216e:	01 96       	adiw	r24, 0x01	; 1
    2170:	9c 83       	std	Y+4, r25	; 0x04
    2172:	8b 83       	std	Y+3, r24	; 0x03
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	9c 81       	ldd	r25, Y+4	; 0x04
    2178:	80 38       	cpi	r24, 0x80	; 128
    217a:	91 05       	cpc	r25, r1
    217c:	0c f4       	brge	.+2      	; 0x2180 <snake_draw_map+0x11a>
    217e:	8d cf       	rjmp	.-230    	; 0x209a <snake_draw_map+0x34>

void snake_draw_map()
{
	unsigned char MAP [6][128] = {0};

	for(int i = 0; i < 6; i++)
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	9a 81       	ldd	r25, Y+2	; 0x02
    2184:	01 96       	adiw	r24, 0x01	; 1
    2186:	9a 83       	std	Y+2, r25	; 0x02
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	06 97       	sbiw	r24, 0x06	; 6
    2190:	0c f4       	brge	.+2      	; 0x2194 <snake_draw_map+0x12e>
    2192:	80 cf       	rjmp	.-256    	; 0x2094 <snake_draw_map+0x2e>
			else if(i == 0) MAP[i][j] = horizon1[0];
			else if(i == 5) MAP[i][j] = horizon2[0];
		}
	}

	MAP[2*(food_y)/8][2*(food_x)] |= ((0x03 << (2*(food_y) % 8)));
    2194:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <food_y>
    2198:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <food_y+0x1>
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	99 23       	and	r25, r25
    21a2:	0c f4       	brge	.+2      	; 0x21a6 <snake_draw_map+0x140>
    21a4:	07 96       	adiw	r24, 0x07	; 7
    21a6:	95 95       	asr	r25
    21a8:	87 95       	ror	r24
    21aa:	95 95       	asr	r25
    21ac:	87 95       	ror	r24
    21ae:	95 95       	asr	r25
    21b0:	87 95       	ror	r24
    21b2:	9c 01       	movw	r18, r24
    21b4:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <food_x>
    21b8:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <food_x+0x1>
    21bc:	ac 01       	movw	r20, r24
    21be:	44 0f       	add	r20, r20
    21c0:	55 1f       	adc	r21, r21
    21c2:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <food_x>
    21c6:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <food_x+0x1>
    21ca:	88 0f       	add	r24, r24
    21cc:	99 1f       	adc	r25, r25
    21ce:	b9 01       	movw	r22, r18
    21d0:	76 95       	lsr	r23
    21d2:	76 2f       	mov	r23, r22
    21d4:	66 27       	eor	r22, r22
    21d6:	77 95       	ror	r23
    21d8:	67 95       	ror	r22
    21da:	fe 01       	movw	r30, r28
    21dc:	31 96       	adiw	r30, 0x01	; 1
    21de:	6e 0f       	add	r22, r30
    21e0:	7f 1f       	adc	r23, r31
    21e2:	86 0f       	add	r24, r22
    21e4:	97 1f       	adc	r25, r23
    21e6:	07 96       	adiw	r24, 0x07	; 7
    21e8:	dc 01       	movw	r26, r24
    21ea:	8c 91       	ld	r24, X
    21ec:	e8 2f       	mov	r30, r24
    21ee:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <food_y>
    21f2:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <food_y+0x1>
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	87 70       	andi	r24, 0x07	; 7
    21fc:	90 78       	andi	r25, 0x80	; 128
    21fe:	99 23       	and	r25, r25
    2200:	24 f4       	brge	.+8      	; 0x220a <snake_draw_map+0x1a4>
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	88 6f       	ori	r24, 0xF8	; 248
    2206:	9f 6f       	ori	r25, 0xFF	; 255
    2208:	01 96       	adiw	r24, 0x01	; 1
    220a:	bc 01       	movw	r22, r24
    220c:	83 e0       	ldi	r24, 0x03	; 3
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <snake_draw_map+0x1b0>
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	6a 95       	dec	r22
    2218:	e2 f7       	brpl	.-8      	; 0x2212 <snake_draw_map+0x1ac>
    221a:	8e 2b       	or	r24, r30
    221c:	68 2f       	mov	r22, r24
    221e:	c9 01       	movw	r24, r18
    2220:	96 95       	lsr	r25
    2222:	98 2f       	mov	r25, r24
    2224:	88 27       	eor	r24, r24
    2226:	97 95       	ror	r25
    2228:	87 95       	ror	r24
    222a:	9e 01       	movw	r18, r28
    222c:	2f 5f       	subi	r18, 0xFF	; 255
    222e:	3f 4f       	sbci	r19, 0xFF	; 255
    2230:	82 0f       	add	r24, r18
    2232:	93 1f       	adc	r25, r19
    2234:	84 0f       	add	r24, r20
    2236:	95 1f       	adc	r25, r21
    2238:	07 96       	adiw	r24, 0x07	; 7
    223a:	fc 01       	movw	r30, r24
    223c:	60 83       	st	Z, r22
	MAP[2*(food_y)/8][2*(food_x) + 1] |= ((0x03 << (2*(food_y) % 8)));
    223e:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <food_y>
    2242:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <food_y+0x1>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	99 23       	and	r25, r25
    224c:	0c f4       	brge	.+2      	; 0x2250 <snake_draw_map+0x1ea>
    224e:	07 96       	adiw	r24, 0x07	; 7
    2250:	95 95       	asr	r25
    2252:	87 95       	ror	r24
    2254:	95 95       	asr	r25
    2256:	87 95       	ror	r24
    2258:	95 95       	asr	r25
    225a:	87 95       	ror	r24
    225c:	9c 01       	movw	r18, r24
    225e:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <food_x>
    2262:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <food_x+0x1>
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	ac 01       	movw	r20, r24
    226c:	4f 5f       	subi	r20, 0xFF	; 255
    226e:	5f 4f       	sbci	r21, 0xFF	; 255
    2270:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <food_x>
    2274:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <food_x+0x1>
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	01 96       	adiw	r24, 0x01	; 1
    227e:	b9 01       	movw	r22, r18
    2280:	76 95       	lsr	r23
    2282:	76 2f       	mov	r23, r22
    2284:	66 27       	eor	r22, r22
    2286:	77 95       	ror	r23
    2288:	67 95       	ror	r22
    228a:	fe 01       	movw	r30, r28
    228c:	31 96       	adiw	r30, 0x01	; 1
    228e:	6e 0f       	add	r22, r30
    2290:	7f 1f       	adc	r23, r31
    2292:	86 0f       	add	r24, r22
    2294:	97 1f       	adc	r25, r23
    2296:	07 96       	adiw	r24, 0x07	; 7
    2298:	dc 01       	movw	r26, r24
    229a:	8c 91       	ld	r24, X
    229c:	e8 2f       	mov	r30, r24
    229e:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <food_y>
    22a2:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <food_y+0x1>
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	87 70       	andi	r24, 0x07	; 7
    22ac:	90 78       	andi	r25, 0x80	; 128
    22ae:	99 23       	and	r25, r25
    22b0:	24 f4       	brge	.+8      	; 0x22ba <snake_draw_map+0x254>
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	88 6f       	ori	r24, 0xF8	; 248
    22b6:	9f 6f       	ori	r25, 0xFF	; 255
    22b8:	01 96       	adiw	r24, 0x01	; 1
    22ba:	bc 01       	movw	r22, r24
    22bc:	83 e0       	ldi	r24, 0x03	; 3
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <snake_draw_map+0x260>
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	6a 95       	dec	r22
    22c8:	e2 f7       	brpl	.-8      	; 0x22c2 <snake_draw_map+0x25c>
    22ca:	8e 2b       	or	r24, r30
    22cc:	68 2f       	mov	r22, r24
    22ce:	c9 01       	movw	r24, r18
    22d0:	96 95       	lsr	r25
    22d2:	98 2f       	mov	r25, r24
    22d4:	88 27       	eor	r24, r24
    22d6:	97 95       	ror	r25
    22d8:	87 95       	ror	r24
    22da:	9e 01       	movw	r18, r28
    22dc:	2f 5f       	subi	r18, 0xFF	; 255
    22de:	3f 4f       	sbci	r19, 0xFF	; 255
    22e0:	82 0f       	add	r24, r18
    22e2:	93 1f       	adc	r25, r19
    22e4:	84 0f       	add	r24, r20
    22e6:	95 1f       	adc	r25, r21
    22e8:	07 96       	adiw	r24, 0x07	; 7
    22ea:	fc 01       	movw	r30, r24
    22ec:	60 83       	st	Z, r22


	for(int i=0;i<length;i++)	//뱀 몸통값 입력
    22ee:	1e 82       	std	Y+6, r1	; 0x06
    22f0:	1d 82       	std	Y+5, r1	; 0x05
    22f2:	c3 c0       	rjmp	.+390    	; 0x247a <snake_draw_map+0x414>
	{
		MAP[2*(y[i])/8][2*(x[i])] |= ((0x03 << (2*(y[i]) % 8)));
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05
    22f6:	9e 81       	ldd	r25, Y+6	; 0x06
    22f8:	8d 52       	subi	r24, 0x2D	; 45
    22fa:	9e 4f       	sbci	r25, 0xFE	; 254
    22fc:	dc 01       	movw	r26, r24
    22fe:	8c 91       	ld	r24, X
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	99 23       	and	r25, r25
    230a:	0c f4       	brge	.+2      	; 0x230e <snake_draw_map+0x2a8>
    230c:	07 96       	adiw	r24, 0x07	; 7
    230e:	95 95       	asr	r25
    2310:	87 95       	ror	r24
    2312:	95 95       	asr	r25
    2314:	87 95       	ror	r24
    2316:	95 95       	asr	r25
    2318:	87 95       	ror	r24
    231a:	2d 81       	ldd	r18, Y+5	; 0x05
    231c:	3e 81       	ldd	r19, Y+6	; 0x06
    231e:	25 5f       	subi	r18, 0xF5	; 245
    2320:	3e 4f       	sbci	r19, 0xFE	; 254
    2322:	f9 01       	movw	r30, r18
    2324:	20 81       	ld	r18, Z
    2326:	22 2f       	mov	r18, r18
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	22 0f       	add	r18, r18
    232c:	33 1f       	adc	r19, r19
    232e:	4d 81       	ldd	r20, Y+5	; 0x05
    2330:	5e 81       	ldd	r21, Y+6	; 0x06
    2332:	45 5f       	subi	r20, 0xF5	; 245
    2334:	5e 4f       	sbci	r21, 0xFE	; 254
    2336:	da 01       	movw	r26, r20
    2338:	4c 91       	ld	r20, X
    233a:	44 2f       	mov	r20, r20
    233c:	50 e0       	ldi	r21, 0x00	; 0
    233e:	44 0f       	add	r20, r20
    2340:	55 1f       	adc	r21, r21
    2342:	bc 01       	movw	r22, r24
    2344:	76 95       	lsr	r23
    2346:	76 2f       	mov	r23, r22
    2348:	66 27       	eor	r22, r22
    234a:	77 95       	ror	r23
    234c:	67 95       	ror	r22
    234e:	fe 01       	movw	r30, r28
    2350:	31 96       	adiw	r30, 0x01	; 1
    2352:	6e 0f       	add	r22, r30
    2354:	7f 1f       	adc	r23, r31
    2356:	46 0f       	add	r20, r22
    2358:	57 1f       	adc	r21, r23
    235a:	49 5f       	subi	r20, 0xF9	; 249
    235c:	5f 4f       	sbci	r21, 0xFF	; 255
    235e:	fa 01       	movw	r30, r20
    2360:	40 81       	ld	r20, Z
    2362:	e4 2f       	mov	r30, r20
    2364:	4d 81       	ldd	r20, Y+5	; 0x05
    2366:	5e 81       	ldd	r21, Y+6	; 0x06
    2368:	4d 52       	subi	r20, 0x2D	; 45
    236a:	5e 4f       	sbci	r21, 0xFE	; 254
    236c:	da 01       	movw	r26, r20
    236e:	4c 91       	ld	r20, X
    2370:	44 2f       	mov	r20, r20
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	44 0f       	add	r20, r20
    2376:	55 1f       	adc	r21, r21
    2378:	ba 01       	movw	r22, r20
    237a:	66 70       	andi	r22, 0x06	; 6
    237c:	77 27       	eor	r23, r23
    237e:	43 e0       	ldi	r20, 0x03	; 3
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <snake_draw_map+0x322>
    2384:	44 0f       	add	r20, r20
    2386:	55 1f       	adc	r21, r21
    2388:	6a 95       	dec	r22
    238a:	e2 f7       	brpl	.-8      	; 0x2384 <snake_draw_map+0x31e>
    238c:	4e 2b       	or	r20, r30
    238e:	64 2f       	mov	r22, r20
    2390:	96 95       	lsr	r25
    2392:	98 2f       	mov	r25, r24
    2394:	88 27       	eor	r24, r24
    2396:	97 95       	ror	r25
    2398:	87 95       	ror	r24
    239a:	ae 01       	movw	r20, r28
    239c:	4f 5f       	subi	r20, 0xFF	; 255
    239e:	5f 4f       	sbci	r21, 0xFF	; 255
    23a0:	84 0f       	add	r24, r20
    23a2:	95 1f       	adc	r25, r21
    23a4:	82 0f       	add	r24, r18
    23a6:	93 1f       	adc	r25, r19
    23a8:	07 96       	adiw	r24, 0x07	; 7
    23aa:	fc 01       	movw	r30, r24
    23ac:	60 83       	st	Z, r22
		MAP[2*(y[i])/8][2*(x[i]) + 1] |= ((0x03 << (2*(y[i]) % 8)));
    23ae:	8d 81       	ldd	r24, Y+5	; 0x05
    23b0:	9e 81       	ldd	r25, Y+6	; 0x06
    23b2:	8d 52       	subi	r24, 0x2D	; 45
    23b4:	9e 4f       	sbci	r25, 0xFE	; 254
    23b6:	dc 01       	movw	r26, r24
    23b8:	8c 91       	ld	r24, X
    23ba:	88 2f       	mov	r24, r24
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	99 23       	and	r25, r25
    23c4:	0c f4       	brge	.+2      	; 0x23c8 <snake_draw_map+0x362>
    23c6:	07 96       	adiw	r24, 0x07	; 7
    23c8:	95 95       	asr	r25
    23ca:	87 95       	ror	r24
    23cc:	95 95       	asr	r25
    23ce:	87 95       	ror	r24
    23d0:	95 95       	asr	r25
    23d2:	87 95       	ror	r24
    23d4:	2d 81       	ldd	r18, Y+5	; 0x05
    23d6:	3e 81       	ldd	r19, Y+6	; 0x06
    23d8:	25 5f       	subi	r18, 0xF5	; 245
    23da:	3e 4f       	sbci	r19, 0xFE	; 254
    23dc:	f9 01       	movw	r30, r18
    23de:	20 81       	ld	r18, Z
    23e0:	22 2f       	mov	r18, r18
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	22 0f       	add	r18, r18
    23e6:	33 1f       	adc	r19, r19
    23e8:	2f 5f       	subi	r18, 0xFF	; 255
    23ea:	3f 4f       	sbci	r19, 0xFF	; 255
    23ec:	4d 81       	ldd	r20, Y+5	; 0x05
    23ee:	5e 81       	ldd	r21, Y+6	; 0x06
    23f0:	45 5f       	subi	r20, 0xF5	; 245
    23f2:	5e 4f       	sbci	r21, 0xFE	; 254
    23f4:	da 01       	movw	r26, r20
    23f6:	4c 91       	ld	r20, X
    23f8:	44 2f       	mov	r20, r20
    23fa:	50 e0       	ldi	r21, 0x00	; 0
    23fc:	44 0f       	add	r20, r20
    23fe:	55 1f       	adc	r21, r21
    2400:	4f 5f       	subi	r20, 0xFF	; 255
    2402:	5f 4f       	sbci	r21, 0xFF	; 255
    2404:	bc 01       	movw	r22, r24
    2406:	76 95       	lsr	r23
    2408:	76 2f       	mov	r23, r22
    240a:	66 27       	eor	r22, r22
    240c:	77 95       	ror	r23
    240e:	67 95       	ror	r22
    2410:	fe 01       	movw	r30, r28
    2412:	31 96       	adiw	r30, 0x01	; 1
    2414:	6e 0f       	add	r22, r30
    2416:	7f 1f       	adc	r23, r31
    2418:	46 0f       	add	r20, r22
    241a:	57 1f       	adc	r21, r23
    241c:	49 5f       	subi	r20, 0xF9	; 249
    241e:	5f 4f       	sbci	r21, 0xFF	; 255
    2420:	fa 01       	movw	r30, r20
    2422:	40 81       	ld	r20, Z
    2424:	e4 2f       	mov	r30, r20
    2426:	4d 81       	ldd	r20, Y+5	; 0x05
    2428:	5e 81       	ldd	r21, Y+6	; 0x06
    242a:	4d 52       	subi	r20, 0x2D	; 45
    242c:	5e 4f       	sbci	r21, 0xFE	; 254
    242e:	da 01       	movw	r26, r20
    2430:	4c 91       	ld	r20, X
    2432:	44 2f       	mov	r20, r20
    2434:	50 e0       	ldi	r21, 0x00	; 0
    2436:	44 0f       	add	r20, r20
    2438:	55 1f       	adc	r21, r21
    243a:	ba 01       	movw	r22, r20
    243c:	66 70       	andi	r22, 0x06	; 6
    243e:	77 27       	eor	r23, r23
    2440:	43 e0       	ldi	r20, 0x03	; 3
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	02 c0       	rjmp	.+4      	; 0x244a <snake_draw_map+0x3e4>
    2446:	44 0f       	add	r20, r20
    2448:	55 1f       	adc	r21, r21
    244a:	6a 95       	dec	r22
    244c:	e2 f7       	brpl	.-8      	; 0x2446 <snake_draw_map+0x3e0>
    244e:	4e 2b       	or	r20, r30
    2450:	64 2f       	mov	r22, r20
    2452:	96 95       	lsr	r25
    2454:	98 2f       	mov	r25, r24
    2456:	88 27       	eor	r24, r24
    2458:	97 95       	ror	r25
    245a:	87 95       	ror	r24
    245c:	ae 01       	movw	r20, r28
    245e:	4f 5f       	subi	r20, 0xFF	; 255
    2460:	5f 4f       	sbci	r21, 0xFF	; 255
    2462:	84 0f       	add	r24, r20
    2464:	95 1f       	adc	r25, r21
    2466:	82 0f       	add	r24, r18
    2468:	93 1f       	adc	r25, r19
    246a:	07 96       	adiw	r24, 0x07	; 7
    246c:	fc 01       	movw	r30, r24
    246e:	60 83       	st	Z, r22

	MAP[2*(food_y)/8][2*(food_x)] |= ((0x03 << (2*(food_y) % 8)));
	MAP[2*(food_y)/8][2*(food_x) + 1] |= ((0x03 << (2*(food_y) % 8)));


	for(int i=0;i<length;i++)	//뱀 몸통값 입력
    2470:	8d 81       	ldd	r24, Y+5	; 0x05
    2472:	9e 81       	ldd	r25, Y+6	; 0x06
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
    247a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    247e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    2482:	2d 81       	ldd	r18, Y+5	; 0x05
    2484:	3e 81       	ldd	r19, Y+6	; 0x06
    2486:	28 17       	cp	r18, r24
    2488:	39 07       	cpc	r19, r25
    248a:	0c f4       	brge	.+2      	; 0x248e <snake_draw_map+0x428>
    248c:	33 cf       	rjmp	.-410    	; 0x22f4 <snake_draw_map+0x28e>
		MAP[2*(y[i])/8][2*(x[i])] |= ((0x03 << (2*(y[i]) % 8)));
		MAP[2*(y[i])/8][2*(x[i]) + 1] |= ((0x03 << (2*(y[i]) % 8)));
	}

	unsigned char x,y;
	for(y=2;y<8;y++)
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	8f 83       	std	Y+7, r24	; 0x07
    2492:	18 c0       	rjmp	.+48     	; 0x24c4 <snake_draw_map+0x45e>
	{
		ssd1306_set_page_start(y);
    2494:	8f 81       	ldd	r24, Y+7	; 0x07
    2496:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_data(MAP[y - 2], COL_NUM);
    249a:	8f 81       	ldd	r24, Y+7	; 0x07
    249c:	88 2f       	mov	r24, r24
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	02 97       	sbiw	r24, 0x02	; 2
    24a2:	9e 01       	movw	r18, r28
    24a4:	28 5f       	subi	r18, 0xF8	; 248
    24a6:	3f 4f       	sbci	r19, 0xFF	; 255
    24a8:	96 95       	lsr	r25
    24aa:	98 2f       	mov	r25, r24
    24ac:	88 27       	eor	r24, r24
    24ae:	97 95       	ror	r25
    24b0:	87 95       	ror	r24
    24b2:	82 0f       	add	r24, r18
    24b4:	93 1f       	adc	r25, r19
    24b6:	60 e8       	ldi	r22, 0x80	; 128
    24b8:	70 e0       	ldi	r23, 0x00	; 0
    24ba:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
		MAP[2*(y[i])/8][2*(x[i])] |= ((0x03 << (2*(y[i]) % 8)));
		MAP[2*(y[i])/8][2*(x[i]) + 1] |= ((0x03 << (2*(y[i]) % 8)));
	}

	unsigned char x,y;
	for(y=2;y<8;y++)
    24be:	8f 81       	ldd	r24, Y+7	; 0x07
    24c0:	8f 5f       	subi	r24, 0xFF	; 255
    24c2:	8f 83       	std	Y+7, r24	; 0x07
    24c4:	8f 81       	ldd	r24, Y+7	; 0x07
    24c6:	88 30       	cpi	r24, 0x08	; 8
    24c8:	28 f3       	brcs	.-54     	; 0x2494 <snake_draw_map+0x42e>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(MAP[y - 2], COL_NUM);
	}
}
    24ca:	00 00       	nop
    24cc:	c9 5f       	subi	r28, 0xF9	; 249
    24ce:	dc 4f       	sbci	r29, 0xFC	; 252
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	08 95       	ret

000024e0 <snake_move>:


void snake_move(int dir)
{
    24e0:	cf 93       	push	r28
    24e2:	df 93       	push	r29
    24e4:	00 d0       	rcall	.+0      	; 0x24e6 <snake_move+0x6>
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <snake_move+0x8>
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <snake_move+0xa>
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	9e 83       	std	Y+6, r25	; 0x06
    24f0:	8d 83       	std	Y+5, r24	; 0x05
	
	

	if(x[0]==food_x&&y[0]==food_y)
    24f2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <x>
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <food_x>
    24fe:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <food_x+0x1>
    2502:	28 17       	cp	r18, r24
    2504:	39 07       	cpc	r19, r25
    2506:	d9 f5       	brne	.+118    	; 0x257e <snake_move+0x9e>
    2508:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <y>
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <food_y>
    2514:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <food_y+0x1>
    2518:	28 17       	cp	r18, r24
    251a:	39 07       	cpc	r19, r25
    251c:	81 f5       	brne	.+96     	; 0x257e <snake_move+0x9e>
	{ //food와 충돌했을 경우
		food(); //새로운 food 추가
    251e:	ca d0       	rcall	.+404    	; 0x26b4 <food>
		length++; //길이증가
    2520:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    2524:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    2528:	01 96       	adiw	r24, 0x01	; 1
    252a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <length+0x1>
    252e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <length>
		x[length-1]=x[length-2]; //새로만든 몸통에 값 입력
    2532:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    2536:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <length>
    2540:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <length+0x1>
    2544:	22 50       	subi	r18, 0x02	; 2
    2546:	31 09       	sbc	r19, r1
    2548:	25 5f       	subi	r18, 0xF5	; 245
    254a:	3e 4f       	sbci	r19, 0xFE	; 254
    254c:	f9 01       	movw	r30, r18
    254e:	20 81       	ld	r18, Z
    2550:	85 5f       	subi	r24, 0xF5	; 245
    2552:	9e 4f       	sbci	r25, 0xFE	; 254
    2554:	fc 01       	movw	r30, r24
    2556:	20 83       	st	Z, r18
		y[length-1]=y[length-2];
    2558:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    255c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <length>
    2566:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <length+0x1>
    256a:	22 50       	subi	r18, 0x02	; 2
    256c:	31 09       	sbc	r19, r1
    256e:	2d 52       	subi	r18, 0x2D	; 45
    2570:	3e 4f       	sbci	r19, 0xFE	; 254
    2572:	f9 01       	movw	r30, r18
    2574:	20 81       	ld	r18, Z
    2576:	8d 52       	subi	r24, 0x2D	; 45
    2578:	9e 4f       	sbci	r25, 0xFE	; 254
    257a:	fc 01       	movw	r30, r24
    257c:	20 83       	st	Z, r18
	}
	if(x[0]==0||x[0]== 63||y[0]==0||y[0]==23)
    257e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <x>
    2582:	88 23       	and	r24, r24
    2584:	61 f0       	breq	.+24     	; 0x259e <snake_move+0xbe>
    2586:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <x>
    258a:	8f 33       	cpi	r24, 0x3F	; 63
    258c:	41 f0       	breq	.+16     	; 0x259e <snake_move+0xbe>
    258e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <y>
    2592:	88 23       	and	r24, r24
    2594:	21 f0       	breq	.+8      	; 0x259e <snake_move+0xbe>
    2596:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <y>
    259a:	87 31       	cpi	r24, 0x17	; 23
	{ //벽과 충돌했을 경우
		snake_game_over();
    259c:	11 f4       	brne	.+4      	; 0x25a2 <snake_move+0xc2>
    259e:	fb d0       	rcall	.+502    	; 0x2796 <snake_game_over>
		return; //game_over에서 게임을 다시 시작하게 되면 여기서부터 반복되므로
    25a0:	80 c0       	rjmp	.+256    	; 0x26a2 <snake_move+0x1c2>
		//return을 사용하여 snake_move의 나머지 부분이 실행되지 않도록 합니다.
	}
	for(int i=1;i<length;i++)
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	9a 83       	std	Y+2, r25	; 0x02
    25a8:	89 83       	std	Y+1, r24	; 0x01
    25aa:	1b c0       	rjmp	.+54     	; 0x25e2 <snake_move+0x102>
	{ //자기몸과 충돌했는지 검사
		if(x[0]==x[i] && y[0]==y[i])
    25ac:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <x>
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	9a 81       	ldd	r25, Y+2	; 0x02
    25b4:	85 5f       	subi	r24, 0xF5	; 245
    25b6:	9e 4f       	sbci	r25, 0xFE	; 254
    25b8:	fc 01       	movw	r30, r24
    25ba:	80 81       	ld	r24, Z
    25bc:	28 17       	cp	r18, r24
    25be:	61 f4       	brne	.+24     	; 0x25d8 <snake_move+0xf8>
    25c0:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <y>
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	9a 81       	ldd	r25, Y+2	; 0x02
    25c8:	8d 52       	subi	r24, 0x2D	; 45
    25ca:	9e 4f       	sbci	r25, 0xFE	; 254
    25cc:	fc 01       	movw	r30, r24
    25ce:	80 81       	ld	r24, Z
    25d0:	28 17       	cp	r18, r24
		{
			snake_game_over();
    25d2:	11 f4       	brne	.+4      	; 0x25d8 <snake_move+0xf8>
    25d4:	e0 d0       	rcall	.+448    	; 0x2796 <snake_game_over>
			return;
    25d6:	65 c0       	rjmp	.+202    	; 0x26a2 <snake_move+0x1c2>
	{ //벽과 충돌했을 경우
		snake_game_over();
		return; //game_over에서 게임을 다시 시작하게 되면 여기서부터 반복되므로
		//return을 사용하여 snake_move의 나머지 부분이 실행되지 않도록 합니다.
	}
	for(int i=1;i<length;i++)
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	01 96       	adiw	r24, 0x01	; 1
    25de:	9a 83       	std	Y+2, r25	; 0x02
    25e0:	89 83       	std	Y+1, r24	; 0x01
    25e2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    25e6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    25ea:	29 81       	ldd	r18, Y+1	; 0x01
    25ec:	3a 81       	ldd	r19, Y+2	; 0x02
    25ee:	28 17       	cp	r18, r24
    25f0:	39 07       	cpc	r19, r25
    25f2:	e4 f2       	brlt	.-72     	; 0x25ac <snake_move+0xcc>
			return;
		}
	}
	

	for(int i=length - 1;i>0;i--){ //몸통좌표를 한칸씩 옮김
    25f4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    25f8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	9c 83       	std	Y+4, r25	; 0x04
    2600:	8b 83       	std	Y+3, r24	; 0x03
    2602:	1f c0       	rjmp	.+62     	; 0x2642 <snake_move+0x162>
		x[i]=x[i-1];
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	9c 81       	ldd	r25, Y+4	; 0x04
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	85 5f       	subi	r24, 0xF5	; 245
    260c:	9e 4f       	sbci	r25, 0xFE	; 254
    260e:	fc 01       	movw	r30, r24
    2610:	20 81       	ld	r18, Z
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	9c 81       	ldd	r25, Y+4	; 0x04
    2616:	85 5f       	subi	r24, 0xF5	; 245
    2618:	9e 4f       	sbci	r25, 0xFE	; 254
    261a:	fc 01       	movw	r30, r24
    261c:	20 83       	st	Z, r18
		y[i]=y[i-1];
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	9c 81       	ldd	r25, Y+4	; 0x04
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	8d 52       	subi	r24, 0x2D	; 45
    2626:	9e 4f       	sbci	r25, 0xFE	; 254
    2628:	fc 01       	movw	r30, r24
    262a:	20 81       	ld	r18, Z
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	9c 81       	ldd	r25, Y+4	; 0x04
    2630:	8d 52       	subi	r24, 0x2D	; 45
    2632:	9e 4f       	sbci	r25, 0xFE	; 254
    2634:	fc 01       	movw	r30, r24
    2636:	20 83       	st	Z, r18
			return;
		}
	}
	

	for(int i=length - 1;i>0;i--){ //몸통좌표를 한칸씩 옮김
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	9c 81       	ldd	r25, Y+4	; 0x04
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	9c 83       	std	Y+4, r25	; 0x04
    2640:	8b 83       	std	Y+3, r24	; 0x03
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	9c 81       	ldd	r25, Y+4	; 0x04
    2646:	18 16       	cp	r1, r24
    2648:	19 06       	cpc	r1, r25
    264a:	e4 f2       	brlt	.-72     	; 0x2604 <snake_move+0x124>
		y[i]=y[i-1];
	}

	

	if(dir==LEFT) x[0]--; //방향에 따라 새로운 머리좌표(x[0],y[0])값을 변경
    264c:	8d 81       	ldd	r24, Y+5	; 0x05
    264e:	9e 81       	ldd	r25, Y+6	; 0x06
    2650:	8b 34       	cpi	r24, 0x4B	; 75
    2652:	91 05       	cpc	r25, r1
    2654:	31 f4       	brne	.+12     	; 0x2662 <snake_move+0x182>
    2656:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <x>
    265a:	81 50       	subi	r24, 0x01	; 1
    265c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <x>
    2660:	20 c0       	rjmp	.+64     	; 0x26a2 <snake_move+0x1c2>
	else if(dir==RIGHT) x[0]++;
    2662:	8d 81       	ldd	r24, Y+5	; 0x05
    2664:	9e 81       	ldd	r25, Y+6	; 0x06
    2666:	8d 34       	cpi	r24, 0x4D	; 77
    2668:	91 05       	cpc	r25, r1
    266a:	31 f4       	brne	.+12     	; 0x2678 <snake_move+0x198>
    266c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <x>
    2670:	8f 5f       	subi	r24, 0xFF	; 255
    2672:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <x>
    2676:	15 c0       	rjmp	.+42     	; 0x26a2 <snake_move+0x1c2>
	else if(dir==UP) y[0]--;
    2678:	8d 81       	ldd	r24, Y+5	; 0x05
    267a:	9e 81       	ldd	r25, Y+6	; 0x06
    267c:	88 34       	cpi	r24, 0x48	; 72
    267e:	91 05       	cpc	r25, r1
    2680:	31 f4       	brne	.+12     	; 0x268e <snake_move+0x1ae>
    2682:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <y>
    2686:	81 50       	subi	r24, 0x01	; 1
    2688:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <y>
    268c:	0a c0       	rjmp	.+20     	; 0x26a2 <snake_move+0x1c2>
	else if(dir==DOWN) y[0]++;
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	80 35       	cpi	r24, 0x50	; 80
    2694:	91 05       	cpc	r25, r1
    2696:	29 f4       	brne	.+10     	; 0x26a2 <snake_move+0x1c2>
    2698:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <y>
    269c:	8f 5f       	subi	r24, 0xFF	; 255
    269e:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <y>
	

	
	
}
    26a2:	26 96       	adiw	r28, 0x06	; 6
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	de bf       	out	0x3e, r29	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	cd bf       	out	0x3d, r28	; 61
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	08 95       	ret

000026b4 <food>:

void food()
{
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <food+0x6>
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <food+0x8>
    26bc:	00 d0       	rcall	.+0      	; 0x26be <food+0xa>
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
	int food_crush_on=0;//food가 뱀 몸통좌표에 생길 경우 on
    26c2:	1a 82       	std	Y+2, r1	; 0x02
    26c4:	19 82       	std	Y+1, r1	; 0x01
	int r=0; //난수 생성에 사동되는 변수
    26c6:	1e 82       	std	Y+6, r1	; 0x06
    26c8:	1d 82       	std	Y+5, r1	; 0x05
	
	
	
	while(1){
		food_crush_on=0;
    26ca:	1a 82       	std	Y+2, r1	; 0x02
    26cc:	19 82       	std	Y+1, r1	; 0x01
		srand(TCNT0); //난수표생성
    26ce:	82 e5       	ldi	r24, 0x52	; 82
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	fc 01       	movw	r30, r24
    26d4:	80 81       	ld	r24, Z
    26d6:	88 2f       	mov	r24, r24
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	0e 94 28 23 	call	0x4650	; 0x4650 <srand>
		food_x=(rand()%62)+2;    //난수를 좌표값에 넣음
    26de:	0e 94 25 23 	call	0x464a	; 0x464a <rand>
    26e2:	2e e3       	ldi	r18, 0x3E	; 62
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	b9 01       	movw	r22, r18
    26e8:	0e 94 b7 22 	call	0x456e	; 0x456e <__divmodhi4>
    26ec:	02 96       	adiw	r24, 0x02	; 2
    26ee:	90 93 28 08 	sts	0x0828, r25	; 0x800828 <food_x+0x1>
    26f2:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <food_x>
		food_y=(rand()%22)+2;
    26f6:	0e 94 25 23 	call	0x464a	; 0x464a <rand>
    26fa:	26 e1       	ldi	r18, 0x16	; 22
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	b9 01       	movw	r22, r18
    2700:	0e 94 b7 22 	call	0x456e	; 0x456e <__divmodhi4>
    2704:	02 96       	adiw	r24, 0x02	; 2
    2706:	90 93 3e 08 	sts	0x083E, r25	; 0x80083e <food_y+0x1>
    270a:	80 93 3d 08 	sts	0x083D, r24	; 0x80083d <food_y>
		
		for(int i=0;i<length;i++)
    270e:	1c 82       	std	Y+4, r1	; 0x04
    2710:	1b 82       	std	Y+3, r1	; 0x03
    2712:	28 c0       	rjmp	.+80     	; 0x2764 <food+0xb0>
		{ //food가 뱀 몸통과 겹치는지 확인
			if(food_x==x[i]&&food_y==y[i])
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	9c 81       	ldd	r25, Y+4	; 0x04
    2718:	85 5f       	subi	r24, 0xF5	; 245
    271a:	9e 4f       	sbci	r25, 0xFE	; 254
    271c:	fc 01       	movw	r30, r24
    271e:	80 81       	ld	r24, Z
    2720:	28 2f       	mov	r18, r24
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <food_x>
    2728:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <food_x+0x1>
    272c:	28 17       	cp	r18, r24
    272e:	39 07       	cpc	r19, r25
    2730:	a1 f4       	brne	.+40     	; 0x275a <food+0xa6>
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	9c 81       	ldd	r25, Y+4	; 0x04
    2736:	8d 52       	subi	r24, 0x2D	; 45
    2738:	9e 4f       	sbci	r25, 0xFE	; 254
    273a:	fc 01       	movw	r30, r24
    273c:	80 81       	ld	r24, Z
    273e:	28 2f       	mov	r18, r24
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <food_y>
    2746:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <food_y+0x1>
    274a:	28 17       	cp	r18, r24
    274c:	39 07       	cpc	r19, r25
    274e:	29 f4       	brne	.+10     	; 0x275a <food+0xa6>
			{
				food_crush_on=1; //겹치면 food_crush_on 를 on
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	9a 83       	std	Y+2, r25	; 0x02
    2756:	89 83       	std	Y+1, r24	; 0x01
				break;
    2758:	0e c0       	rjmp	.+28     	; 0x2776 <food+0xc2>
		food_crush_on=0;
		srand(TCNT0); //난수표생성
		food_x=(rand()%62)+2;    //난수를 좌표값에 넣음
		food_y=(rand()%22)+2;
		
		for(int i=0;i<length;i++)
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	9c 81       	ldd	r25, Y+4	; 0x04
    275e:	01 96       	adiw	r24, 0x01	; 1
    2760:	9c 83       	std	Y+4, r25	; 0x04
    2762:	8b 83       	std	Y+3, r24	; 0x03
    2764:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    2768:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    276c:	2b 81       	ldd	r18, Y+3	; 0x03
    276e:	3c 81       	ldd	r19, Y+4	; 0x04
    2770:	28 17       	cp	r18, r24
    2772:	39 07       	cpc	r19, r25
    2774:	7c f2       	brlt	.-98     	; 0x2714 <food+0x60>
				food_crush_on=1; //겹치면 food_crush_on 를 on
				break;
			}
		}
		
		if(food_crush_on==1) continue; //겹쳤을 경우 while문을 다시 시작
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	09 f4       	brne	.+2      	; 0x2780 <food+0xcc>
		
		break;
		
	}
    277e:	a5 cf       	rjmp	.-182    	; 0x26ca <food+0x16>
			}
		}
		
		if(food_crush_on==1) continue; //겹쳤을 경우 while문을 다시 시작
		
		break;
    2780:	00 00       	nop
		
	}
}
    2782:	00 00       	nop
    2784:	26 96       	adiw	r28, 0x06	; 6
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	08 95       	ret

00002796 <snake_game_over>:


void snake_game_over()
{
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
    279e:	2e 97       	sbiw	r28, 0x0e	; 14
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
	SendCommand01(0x06, 0x00, 0x0F);	//게임오버소리 너무 커서 절반으로 
    27aa:	4f e0       	ldi	r20, 0x0F	; 15
    27ac:	60 e0       	ldi	r22, 0x00	; 0
    27ae:	86 e0       	ldi	r24, 0x06	; 6
    27b0:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	a8 e4       	ldi	r26, 0x48	; 72
    27ba:	b3 e4       	ldi	r27, 0x43	; 67
    27bc:	89 83       	std	Y+1, r24	; 0x01
    27be:	9a 83       	std	Y+2, r25	; 0x02
    27c0:	ab 83       	std	Y+3, r26	; 0x03
    27c2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	4a e7       	ldi	r20, 0x7A	; 122
    27ca:	55 e4       	ldi	r21, 0x45	; 69
    27cc:	69 81       	ldd	r22, Y+1	; 0x01
    27ce:	7a 81       	ldd	r23, Y+2	; 0x02
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	9c 81       	ldd	r25, Y+4	; 0x04
    27d4:	0e 94 2c 22 	call	0x4458	; 0x4458 <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	8d 83       	std	Y+5, r24	; 0x05
    27de:	9e 83       	std	Y+6, r25	; 0x06
    27e0:	af 83       	std	Y+7, r26	; 0x07
    27e2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e8       	ldi	r20, 0x80	; 128
    27ea:	5f e3       	ldi	r21, 0x3F	; 63
    27ec:	6d 81       	ldd	r22, Y+5	; 0x05
    27ee:	7e 81       	ldd	r23, Y+6	; 0x06
    27f0:	8f 81       	ldd	r24, Y+7	; 0x07
    27f2:	98 85       	ldd	r25, Y+8	; 0x08
    27f4:	0e 94 ab 21 	call	0x4356	; 0x4356 <__cmpsf2>
    27f8:	88 23       	and	r24, r24
    27fa:	2c f4       	brge	.+10     	; 0x2806 <snake_game_over+0x70>
		__ticks = 1;
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9a 87       	std	Y+10, r25	; 0x0a
    2802:	89 87       	std	Y+9, r24	; 0x09
    2804:	3f c0       	rjmp	.+126    	; 0x2884 <snake_game_over+0xee>
	else if (__tmp > 65535)
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	3f ef       	ldi	r19, 0xFF	; 255
    280a:	4f e7       	ldi	r20, 0x7F	; 127
    280c:	57 e4       	ldi	r21, 0x47	; 71
    280e:	6d 81       	ldd	r22, Y+5	; 0x05
    2810:	7e 81       	ldd	r23, Y+6	; 0x06
    2812:	8f 81       	ldd	r24, Y+7	; 0x07
    2814:	98 85       	ldd	r25, Y+8	; 0x08
    2816:	0e 94 28 22 	call	0x4450	; 0x4450 <__gesf2>
    281a:	18 16       	cp	r1, r24
    281c:	4c f5       	brge	.+82     	; 0x2870 <snake_game_over+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e2       	ldi	r20, 0x20	; 32
    2824:	51 e4       	ldi	r21, 0x41	; 65
    2826:	69 81       	ldd	r22, Y+1	; 0x01
    2828:	7a 81       	ldd	r23, Y+2	; 0x02
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9c 81       	ldd	r25, Y+4	; 0x04
    282e:	0e 94 2c 22 	call	0x4458	; 0x4458 <__mulsf3>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	bc 01       	movw	r22, r24
    2838:	cd 01       	movw	r24, r26
    283a:	0e 94 af 21 	call	0x435e	; 0x435e <__fixunssfsi>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	9a 87       	std	Y+10, r25	; 0x0a
    2844:	89 87       	std	Y+9, r24	; 0x09
    2846:	0f c0       	rjmp	.+30     	; 0x2866 <snake_game_over+0xd0>
    2848:	80 e9       	ldi	r24, 0x90	; 144
    284a:	91 e0       	ldi	r25, 0x01	; 1
    284c:	9c 87       	std	Y+12, r25	; 0x0c
    284e:	8b 87       	std	Y+11, r24	; 0x0b
    2850:	8b 85       	ldd	r24, Y+11	; 0x0b
    2852:	9c 85       	ldd	r25, Y+12	; 0x0c
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <snake_game_over+0xbe>
    2858:	9c 87       	std	Y+12, r25	; 0x0c
    285a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285c:	89 85       	ldd	r24, Y+9	; 0x09
    285e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	9a 87       	std	Y+10, r25	; 0x0a
    2864:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2866:	89 85       	ldd	r24, Y+9	; 0x09
    2868:	9a 85       	ldd	r25, Y+10	; 0x0a
    286a:	89 2b       	or	r24, r25
    286c:	69 f7       	brne	.-38     	; 0x2848 <snake_game_over+0xb2>
    286e:	14 c0       	rjmp	.+40     	; 0x2898 <snake_game_over+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2870:	6d 81       	ldd	r22, Y+5	; 0x05
    2872:	7e 81       	ldd	r23, Y+6	; 0x06
    2874:	8f 81       	ldd	r24, Y+7	; 0x07
    2876:	98 85       	ldd	r25, Y+8	; 0x08
    2878:	0e 94 af 21 	call	0x435e	; 0x435e <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9a 87       	std	Y+10, r25	; 0x0a
    2882:	89 87       	std	Y+9, r24	; 0x09
    2884:	89 85       	ldd	r24, Y+9	; 0x09
    2886:	9a 85       	ldd	r25, Y+10	; 0x0a
    2888:	9e 87       	std	Y+14, r25	; 0x0e
    288a:	8d 87       	std	Y+13, r24	; 0x0d
    288c:	8d 85       	ldd	r24, Y+13	; 0x0d
    288e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <snake_game_over+0xfa>
    2894:	9e 87       	std	Y+14, r25	; 0x0e
    2896:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(200);
	SendCommand01(0x0F, 0x01, 0x04);
    2898:	44 e0       	ldi	r20, 0x04	; 4
    289a:	61 e0       	ldi	r22, 0x01	; 1
    289c:	8f e0       	ldi	r24, 0x0F	; 15
    289e:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
	snake_clear_map();
    28a2:	0e 94 4a 21 	call	0x4294	; 0x4294 <snake_clear_map>

	ssd1306_set_column_addr(0);
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
	
	screen = Over_snake;
    28ac:	84 e0       	ldi	r24, 0x04	; 4
    28ae:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
}
    28b2:	00 00       	nop
    28b4:	2e 96       	adiw	r28, 0x0e	; 14
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	08 95       	ret

000028c6 <Tetris_draw_map>:




void Tetris_draw_map()
{
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	c5 50       	subi	r28, 0x05	; 5
    28d0:	d3 40       	sbci	r29, 0x03	; 3
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
	unsigned char MAP [6][128] = {0};
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	33 e0       	ldi	r19, 0x03	; 3
    28e0:	ce 01       	movw	r24, r28
    28e2:	06 96       	adiw	r24, 0x06	; 6
    28e4:	fc 01       	movw	r30, r24
    28e6:	a9 01       	movw	r20, r18
    28e8:	11 92       	st	Z+, r1
    28ea:	41 50       	subi	r20, 0x01	; 1
    28ec:	50 40       	sbci	r21, 0x00	; 0
    28ee:	e1 f7       	brne	.-8      	; 0x28e8 <Tetris_draw_map+0x22>
	for(int i=0;i<12;i++)
    28f0:	1a 82       	std	Y+2, r1	; 0x02
    28f2:	19 82       	std	Y+1, r1	; 0x01
    28f4:	f0 c1       	rjmp	.+992    	; 0x2cd6 <Tetris_draw_map+0x410>
	{
		for(int j = 0; j < 32; j++)
    28f6:	1c 82       	std	Y+4, r1	; 0x04
    28f8:	1b 82       	std	Y+3, r1	; 0x03
    28fa:	e3 c1       	rjmp	.+966    	; 0x2cc2 <Tetris_draw_map+0x3fc>
		{
			if((game_board[j] & (unsigned long int)1 << i) != 0)
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	81 5c       	subi	r24, 0xC1	; 193
    290a:	97 4f       	sbci	r25, 0xF7	; 247
    290c:	fc 01       	movw	r30, r24
    290e:	80 81       	ld	r24, Z
    2910:	91 81       	ldd	r25, Z+1	; 0x01
    2912:	a2 81       	ldd	r26, Z+2	; 0x02
    2914:	b3 81       	ldd	r27, Z+3	; 0x03
    2916:	09 80       	ldd	r0, Y+1	; 0x01
    2918:	04 c0       	rjmp	.+8      	; 0x2922 <Tetris_draw_map+0x5c>
    291a:	b6 95       	lsr	r27
    291c:	a7 95       	ror	r26
    291e:	97 95       	ror	r25
    2920:	87 95       	ror	r24
    2922:	0a 94       	dec	r0
    2924:	d2 f7       	brpl	.-12     	; 0x291a <Tetris_draw_map+0x54>
    2926:	81 70       	andi	r24, 0x01	; 1
    2928:	99 27       	eor	r25, r25
    292a:	aa 27       	eor	r26, r26
    292c:	bb 27       	eor	r27, r27
    292e:	89 2b       	or	r24, r25
    2930:	8a 2b       	or	r24, r26
    2932:	8b 2b       	or	r24, r27
    2934:	09 f4       	brne	.+2      	; 0x2938 <Tetris_draw_map+0x72>
    2936:	c0 c1       	rjmp	.+896    	; 0x2cb8 <Tetris_draw_map+0x3f2>
			{
				if(i % 2 == 0)
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	9a 81       	ldd	r25, Y+2	; 0x02
    293c:	81 70       	andi	r24, 0x01	; 1
    293e:	99 27       	eor	r25, r25
    2940:	89 2b       	or	r24, r25
    2942:	09 f0       	breq	.+2      	; 0x2946 <Tetris_draw_map+0x80>
    2944:	dd c0       	rjmp	.+442    	; 0x2b00 <Tetris_draw_map+0x23a>
				{
					MAP[i/2][4*j] |= 0x0F;
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	9a 81       	ldd	r25, Y+2	; 0x02
    294a:	99 23       	and	r25, r25
    294c:	0c f4       	brge	.+2      	; 0x2950 <Tetris_draw_map+0x8a>
    294e:	01 96       	adiw	r24, 0x01	; 1
    2950:	95 95       	asr	r25
    2952:	87 95       	ror	r24
    2954:	2b 81       	ldd	r18, Y+3	; 0x03
    2956:	3c 81       	ldd	r19, Y+4	; 0x04
    2958:	22 0f       	add	r18, r18
    295a:	33 1f       	adc	r19, r19
    295c:	22 0f       	add	r18, r18
    295e:	33 1f       	adc	r19, r19
    2960:	4b 81       	ldd	r20, Y+3	; 0x03
    2962:	5c 81       	ldd	r21, Y+4	; 0x04
    2964:	44 0f       	add	r20, r20
    2966:	55 1f       	adc	r21, r21
    2968:	44 0f       	add	r20, r20
    296a:	55 1f       	adc	r21, r21
    296c:	bc 01       	movw	r22, r24
    296e:	76 95       	lsr	r23
    2970:	76 2f       	mov	r23, r22
    2972:	66 27       	eor	r22, r22
    2974:	77 95       	ror	r23
    2976:	67 95       	ror	r22
    2978:	fe 01       	movw	r30, r28
    297a:	31 96       	adiw	r30, 0x01	; 1
    297c:	6e 0f       	add	r22, r30
    297e:	7f 1f       	adc	r23, r31
    2980:	46 0f       	add	r20, r22
    2982:	57 1f       	adc	r21, r23
    2984:	4b 5f       	subi	r20, 0xFB	; 251
    2986:	5f 4f       	sbci	r21, 0xFF	; 255
    2988:	fa 01       	movw	r30, r20
    298a:	40 81       	ld	r20, Z
    298c:	64 2f       	mov	r22, r20
    298e:	6f 60       	ori	r22, 0x0F	; 15
    2990:	96 95       	lsr	r25
    2992:	98 2f       	mov	r25, r24
    2994:	88 27       	eor	r24, r24
    2996:	97 95       	ror	r25
    2998:	87 95       	ror	r24
    299a:	ae 01       	movw	r20, r28
    299c:	4f 5f       	subi	r20, 0xFF	; 255
    299e:	5f 4f       	sbci	r21, 0xFF	; 255
    29a0:	84 0f       	add	r24, r20
    29a2:	95 1f       	adc	r25, r21
    29a4:	82 0f       	add	r24, r18
    29a6:	93 1f       	adc	r25, r19
    29a8:	05 96       	adiw	r24, 0x05	; 5
    29aa:	fc 01       	movw	r30, r24
    29ac:	60 83       	st	Z, r22
					MAP[i/2][4*j + 1] |= 0x0F;
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	9a 81       	ldd	r25, Y+2	; 0x02
    29b2:	99 23       	and	r25, r25
    29b4:	0c f4       	brge	.+2      	; 0x29b8 <Tetris_draw_map+0xf2>
    29b6:	01 96       	adiw	r24, 0x01	; 1
    29b8:	95 95       	asr	r25
    29ba:	87 95       	ror	r24
    29bc:	2b 81       	ldd	r18, Y+3	; 0x03
    29be:	3c 81       	ldd	r19, Y+4	; 0x04
    29c0:	22 0f       	add	r18, r18
    29c2:	33 1f       	adc	r19, r19
    29c4:	22 0f       	add	r18, r18
    29c6:	33 1f       	adc	r19, r19
    29c8:	2f 5f       	subi	r18, 0xFF	; 255
    29ca:	3f 4f       	sbci	r19, 0xFF	; 255
    29cc:	4b 81       	ldd	r20, Y+3	; 0x03
    29ce:	5c 81       	ldd	r21, Y+4	; 0x04
    29d0:	44 0f       	add	r20, r20
    29d2:	55 1f       	adc	r21, r21
    29d4:	44 0f       	add	r20, r20
    29d6:	55 1f       	adc	r21, r21
    29d8:	4f 5f       	subi	r20, 0xFF	; 255
    29da:	5f 4f       	sbci	r21, 0xFF	; 255
    29dc:	bc 01       	movw	r22, r24
    29de:	76 95       	lsr	r23
    29e0:	76 2f       	mov	r23, r22
    29e2:	66 27       	eor	r22, r22
    29e4:	77 95       	ror	r23
    29e6:	67 95       	ror	r22
    29e8:	fe 01       	movw	r30, r28
    29ea:	31 96       	adiw	r30, 0x01	; 1
    29ec:	6e 0f       	add	r22, r30
    29ee:	7f 1f       	adc	r23, r31
    29f0:	46 0f       	add	r20, r22
    29f2:	57 1f       	adc	r21, r23
    29f4:	4b 5f       	subi	r20, 0xFB	; 251
    29f6:	5f 4f       	sbci	r21, 0xFF	; 255
    29f8:	fa 01       	movw	r30, r20
    29fa:	40 81       	ld	r20, Z
    29fc:	64 2f       	mov	r22, r20
    29fe:	6f 60       	ori	r22, 0x0F	; 15
    2a00:	96 95       	lsr	r25
    2a02:	98 2f       	mov	r25, r24
    2a04:	88 27       	eor	r24, r24
    2a06:	97 95       	ror	r25
    2a08:	87 95       	ror	r24
    2a0a:	ae 01       	movw	r20, r28
    2a0c:	4f 5f       	subi	r20, 0xFF	; 255
    2a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a10:	84 0f       	add	r24, r20
    2a12:	95 1f       	adc	r25, r21
    2a14:	82 0f       	add	r24, r18
    2a16:	93 1f       	adc	r25, r19
    2a18:	05 96       	adiw	r24, 0x05	; 5
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	60 83       	st	Z, r22
					MAP[i/2][4*j + 2] |= 0x0F;
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	9a 81       	ldd	r25, Y+2	; 0x02
    2a22:	99 23       	and	r25, r25
    2a24:	0c f4       	brge	.+2      	; 0x2a28 <Tetris_draw_map+0x162>
    2a26:	01 96       	adiw	r24, 0x01	; 1
    2a28:	95 95       	asr	r25
    2a2a:	87 95       	ror	r24
    2a2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a2e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a30:	22 0f       	add	r18, r18
    2a32:	33 1f       	adc	r19, r19
    2a34:	22 0f       	add	r18, r18
    2a36:	33 1f       	adc	r19, r19
    2a38:	2e 5f       	subi	r18, 0xFE	; 254
    2a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3c:	4b 81       	ldd	r20, Y+3	; 0x03
    2a3e:	5c 81       	ldd	r21, Y+4	; 0x04
    2a40:	44 0f       	add	r20, r20
    2a42:	55 1f       	adc	r21, r21
    2a44:	44 0f       	add	r20, r20
    2a46:	55 1f       	adc	r21, r21
    2a48:	4e 5f       	subi	r20, 0xFE	; 254
    2a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4c:	bc 01       	movw	r22, r24
    2a4e:	76 95       	lsr	r23
    2a50:	76 2f       	mov	r23, r22
    2a52:	66 27       	eor	r22, r22
    2a54:	77 95       	ror	r23
    2a56:	67 95       	ror	r22
    2a58:	fe 01       	movw	r30, r28
    2a5a:	31 96       	adiw	r30, 0x01	; 1
    2a5c:	6e 0f       	add	r22, r30
    2a5e:	7f 1f       	adc	r23, r31
    2a60:	46 0f       	add	r20, r22
    2a62:	57 1f       	adc	r21, r23
    2a64:	4b 5f       	subi	r20, 0xFB	; 251
    2a66:	5f 4f       	sbci	r21, 0xFF	; 255
    2a68:	fa 01       	movw	r30, r20
    2a6a:	40 81       	ld	r20, Z
    2a6c:	64 2f       	mov	r22, r20
    2a6e:	6f 60       	ori	r22, 0x0F	; 15
    2a70:	96 95       	lsr	r25
    2a72:	98 2f       	mov	r25, r24
    2a74:	88 27       	eor	r24, r24
    2a76:	97 95       	ror	r25
    2a78:	87 95       	ror	r24
    2a7a:	ae 01       	movw	r20, r28
    2a7c:	4f 5f       	subi	r20, 0xFF	; 255
    2a7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a80:	84 0f       	add	r24, r20
    2a82:	95 1f       	adc	r25, r21
    2a84:	82 0f       	add	r24, r18
    2a86:	93 1f       	adc	r25, r19
    2a88:	05 96       	adiw	r24, 0x05	; 5
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	60 83       	st	Z, r22
					MAP[i/2][4*j + 3] |= 0x0F;
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	9a 81       	ldd	r25, Y+2	; 0x02
    2a92:	99 23       	and	r25, r25
    2a94:	0c f4       	brge	.+2      	; 0x2a98 <Tetris_draw_map+0x1d2>
    2a96:	01 96       	adiw	r24, 0x01	; 1
    2a98:	95 95       	asr	r25
    2a9a:	87 95       	ror	r24
    2a9c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a9e:	3c 81       	ldd	r19, Y+4	; 0x04
    2aa0:	22 0f       	add	r18, r18
    2aa2:	33 1f       	adc	r19, r19
    2aa4:	22 0f       	add	r18, r18
    2aa6:	33 1f       	adc	r19, r19
    2aa8:	2d 5f       	subi	r18, 0xFD	; 253
    2aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    2aac:	4b 81       	ldd	r20, Y+3	; 0x03
    2aae:	5c 81       	ldd	r21, Y+4	; 0x04
    2ab0:	44 0f       	add	r20, r20
    2ab2:	55 1f       	adc	r21, r21
    2ab4:	44 0f       	add	r20, r20
    2ab6:	55 1f       	adc	r21, r21
    2ab8:	4d 5f       	subi	r20, 0xFD	; 253
    2aba:	5f 4f       	sbci	r21, 0xFF	; 255
    2abc:	bc 01       	movw	r22, r24
    2abe:	76 95       	lsr	r23
    2ac0:	76 2f       	mov	r23, r22
    2ac2:	66 27       	eor	r22, r22
    2ac4:	77 95       	ror	r23
    2ac6:	67 95       	ror	r22
    2ac8:	fe 01       	movw	r30, r28
    2aca:	31 96       	adiw	r30, 0x01	; 1
    2acc:	6e 0f       	add	r22, r30
    2ace:	7f 1f       	adc	r23, r31
    2ad0:	46 0f       	add	r20, r22
    2ad2:	57 1f       	adc	r21, r23
    2ad4:	4b 5f       	subi	r20, 0xFB	; 251
    2ad6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ad8:	fa 01       	movw	r30, r20
    2ada:	40 81       	ld	r20, Z
    2adc:	64 2f       	mov	r22, r20
    2ade:	6f 60       	ori	r22, 0x0F	; 15
    2ae0:	96 95       	lsr	r25
    2ae2:	98 2f       	mov	r25, r24
    2ae4:	88 27       	eor	r24, r24
    2ae6:	97 95       	ror	r25
    2ae8:	87 95       	ror	r24
    2aea:	ae 01       	movw	r20, r28
    2aec:	4f 5f       	subi	r20, 0xFF	; 255
    2aee:	5f 4f       	sbci	r21, 0xFF	; 255
    2af0:	84 0f       	add	r24, r20
    2af2:	95 1f       	adc	r25, r21
    2af4:	82 0f       	add	r24, r18
    2af6:	93 1f       	adc	r25, r19
    2af8:	05 96       	adiw	r24, 0x05	; 5
    2afa:	fc 01       	movw	r30, r24
    2afc:	60 83       	st	Z, r22
    2afe:	dc c0       	rjmp	.+440    	; 0x2cb8 <Tetris_draw_map+0x3f2>
				}
				else
				{
					MAP[i/2][4*j] |= 0xF0;
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	9a 81       	ldd	r25, Y+2	; 0x02
    2b04:	99 23       	and	r25, r25
    2b06:	0c f4       	brge	.+2      	; 0x2b0a <Tetris_draw_map+0x244>
    2b08:	01 96       	adiw	r24, 0x01	; 1
    2b0a:	95 95       	asr	r25
    2b0c:	87 95       	ror	r24
    2b0e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b10:	3c 81       	ldd	r19, Y+4	; 0x04
    2b12:	22 0f       	add	r18, r18
    2b14:	33 1f       	adc	r19, r19
    2b16:	22 0f       	add	r18, r18
    2b18:	33 1f       	adc	r19, r19
    2b1a:	4b 81       	ldd	r20, Y+3	; 0x03
    2b1c:	5c 81       	ldd	r21, Y+4	; 0x04
    2b1e:	44 0f       	add	r20, r20
    2b20:	55 1f       	adc	r21, r21
    2b22:	44 0f       	add	r20, r20
    2b24:	55 1f       	adc	r21, r21
    2b26:	bc 01       	movw	r22, r24
    2b28:	76 95       	lsr	r23
    2b2a:	76 2f       	mov	r23, r22
    2b2c:	66 27       	eor	r22, r22
    2b2e:	77 95       	ror	r23
    2b30:	67 95       	ror	r22
    2b32:	fe 01       	movw	r30, r28
    2b34:	31 96       	adiw	r30, 0x01	; 1
    2b36:	6e 0f       	add	r22, r30
    2b38:	7f 1f       	adc	r23, r31
    2b3a:	46 0f       	add	r20, r22
    2b3c:	57 1f       	adc	r21, r23
    2b3e:	4b 5f       	subi	r20, 0xFB	; 251
    2b40:	5f 4f       	sbci	r21, 0xFF	; 255
    2b42:	fa 01       	movw	r30, r20
    2b44:	40 81       	ld	r20, Z
    2b46:	64 2f       	mov	r22, r20
    2b48:	60 6f       	ori	r22, 0xF0	; 240
    2b4a:	96 95       	lsr	r25
    2b4c:	98 2f       	mov	r25, r24
    2b4e:	88 27       	eor	r24, r24
    2b50:	97 95       	ror	r25
    2b52:	87 95       	ror	r24
    2b54:	ae 01       	movw	r20, r28
    2b56:	4f 5f       	subi	r20, 0xFF	; 255
    2b58:	5f 4f       	sbci	r21, 0xFF	; 255
    2b5a:	84 0f       	add	r24, r20
    2b5c:	95 1f       	adc	r25, r21
    2b5e:	82 0f       	add	r24, r18
    2b60:	93 1f       	adc	r25, r19
    2b62:	05 96       	adiw	r24, 0x05	; 5
    2b64:	fc 01       	movw	r30, r24
    2b66:	60 83       	st	Z, r22
					MAP[i/2][4*j + 1] |= 0xF0;
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6c:	99 23       	and	r25, r25
    2b6e:	0c f4       	brge	.+2      	; 0x2b72 <Tetris_draw_map+0x2ac>
    2b70:	01 96       	adiw	r24, 0x01	; 1
    2b72:	95 95       	asr	r25
    2b74:	87 95       	ror	r24
    2b76:	2b 81       	ldd	r18, Y+3	; 0x03
    2b78:	3c 81       	ldd	r19, Y+4	; 0x04
    2b7a:	22 0f       	add	r18, r18
    2b7c:	33 1f       	adc	r19, r19
    2b7e:	22 0f       	add	r18, r18
    2b80:	33 1f       	adc	r19, r19
    2b82:	2f 5f       	subi	r18, 0xFF	; 255
    2b84:	3f 4f       	sbci	r19, 0xFF	; 255
    2b86:	4b 81       	ldd	r20, Y+3	; 0x03
    2b88:	5c 81       	ldd	r21, Y+4	; 0x04
    2b8a:	44 0f       	add	r20, r20
    2b8c:	55 1f       	adc	r21, r21
    2b8e:	44 0f       	add	r20, r20
    2b90:	55 1f       	adc	r21, r21
    2b92:	4f 5f       	subi	r20, 0xFF	; 255
    2b94:	5f 4f       	sbci	r21, 0xFF	; 255
    2b96:	bc 01       	movw	r22, r24
    2b98:	76 95       	lsr	r23
    2b9a:	76 2f       	mov	r23, r22
    2b9c:	66 27       	eor	r22, r22
    2b9e:	77 95       	ror	r23
    2ba0:	67 95       	ror	r22
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	31 96       	adiw	r30, 0x01	; 1
    2ba6:	6e 0f       	add	r22, r30
    2ba8:	7f 1f       	adc	r23, r31
    2baa:	46 0f       	add	r20, r22
    2bac:	57 1f       	adc	r21, r23
    2bae:	4b 5f       	subi	r20, 0xFB	; 251
    2bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb2:	fa 01       	movw	r30, r20
    2bb4:	40 81       	ld	r20, Z
    2bb6:	64 2f       	mov	r22, r20
    2bb8:	60 6f       	ori	r22, 0xF0	; 240
    2bba:	96 95       	lsr	r25
    2bbc:	98 2f       	mov	r25, r24
    2bbe:	88 27       	eor	r24, r24
    2bc0:	97 95       	ror	r25
    2bc2:	87 95       	ror	r24
    2bc4:	ae 01       	movw	r20, r28
    2bc6:	4f 5f       	subi	r20, 0xFF	; 255
    2bc8:	5f 4f       	sbci	r21, 0xFF	; 255
    2bca:	84 0f       	add	r24, r20
    2bcc:	95 1f       	adc	r25, r21
    2bce:	82 0f       	add	r24, r18
    2bd0:	93 1f       	adc	r25, r19
    2bd2:	05 96       	adiw	r24, 0x05	; 5
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	60 83       	st	Z, r22
					MAP[i/2][4*j + 2] |= 0xF0;
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	9a 81       	ldd	r25, Y+2	; 0x02
    2bdc:	99 23       	and	r25, r25
    2bde:	0c f4       	brge	.+2      	; 0x2be2 <Tetris_draw_map+0x31c>
    2be0:	01 96       	adiw	r24, 0x01	; 1
    2be2:	95 95       	asr	r25
    2be4:	87 95       	ror	r24
    2be6:	2b 81       	ldd	r18, Y+3	; 0x03
    2be8:	3c 81       	ldd	r19, Y+4	; 0x04
    2bea:	22 0f       	add	r18, r18
    2bec:	33 1f       	adc	r19, r19
    2bee:	22 0f       	add	r18, r18
    2bf0:	33 1f       	adc	r19, r19
    2bf2:	2e 5f       	subi	r18, 0xFE	; 254
    2bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf6:	4b 81       	ldd	r20, Y+3	; 0x03
    2bf8:	5c 81       	ldd	r21, Y+4	; 0x04
    2bfa:	44 0f       	add	r20, r20
    2bfc:	55 1f       	adc	r21, r21
    2bfe:	44 0f       	add	r20, r20
    2c00:	55 1f       	adc	r21, r21
    2c02:	4e 5f       	subi	r20, 0xFE	; 254
    2c04:	5f 4f       	sbci	r21, 0xFF	; 255
    2c06:	bc 01       	movw	r22, r24
    2c08:	76 95       	lsr	r23
    2c0a:	76 2f       	mov	r23, r22
    2c0c:	66 27       	eor	r22, r22
    2c0e:	77 95       	ror	r23
    2c10:	67 95       	ror	r22
    2c12:	fe 01       	movw	r30, r28
    2c14:	31 96       	adiw	r30, 0x01	; 1
    2c16:	6e 0f       	add	r22, r30
    2c18:	7f 1f       	adc	r23, r31
    2c1a:	46 0f       	add	r20, r22
    2c1c:	57 1f       	adc	r21, r23
    2c1e:	4b 5f       	subi	r20, 0xFB	; 251
    2c20:	5f 4f       	sbci	r21, 0xFF	; 255
    2c22:	fa 01       	movw	r30, r20
    2c24:	40 81       	ld	r20, Z
    2c26:	64 2f       	mov	r22, r20
    2c28:	60 6f       	ori	r22, 0xF0	; 240
    2c2a:	96 95       	lsr	r25
    2c2c:	98 2f       	mov	r25, r24
    2c2e:	88 27       	eor	r24, r24
    2c30:	97 95       	ror	r25
    2c32:	87 95       	ror	r24
    2c34:	ae 01       	movw	r20, r28
    2c36:	4f 5f       	subi	r20, 0xFF	; 255
    2c38:	5f 4f       	sbci	r21, 0xFF	; 255
    2c3a:	84 0f       	add	r24, r20
    2c3c:	95 1f       	adc	r25, r21
    2c3e:	82 0f       	add	r24, r18
    2c40:	93 1f       	adc	r25, r19
    2c42:	05 96       	adiw	r24, 0x05	; 5
    2c44:	fc 01       	movw	r30, r24
    2c46:	60 83       	st	Z, r22
					MAP[i/2][4*j + 3] |= 0xF0;
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4c:	99 23       	and	r25, r25
    2c4e:	0c f4       	brge	.+2      	; 0x2c52 <Tetris_draw_map+0x38c>
    2c50:	01 96       	adiw	r24, 0x01	; 1
    2c52:	95 95       	asr	r25
    2c54:	87 95       	ror	r24
    2c56:	2b 81       	ldd	r18, Y+3	; 0x03
    2c58:	3c 81       	ldd	r19, Y+4	; 0x04
    2c5a:	22 0f       	add	r18, r18
    2c5c:	33 1f       	adc	r19, r19
    2c5e:	22 0f       	add	r18, r18
    2c60:	33 1f       	adc	r19, r19
    2c62:	2d 5f       	subi	r18, 0xFD	; 253
    2c64:	3f 4f       	sbci	r19, 0xFF	; 255
    2c66:	4b 81       	ldd	r20, Y+3	; 0x03
    2c68:	5c 81       	ldd	r21, Y+4	; 0x04
    2c6a:	44 0f       	add	r20, r20
    2c6c:	55 1f       	adc	r21, r21
    2c6e:	44 0f       	add	r20, r20
    2c70:	55 1f       	adc	r21, r21
    2c72:	4d 5f       	subi	r20, 0xFD	; 253
    2c74:	5f 4f       	sbci	r21, 0xFF	; 255
    2c76:	bc 01       	movw	r22, r24
    2c78:	76 95       	lsr	r23
    2c7a:	76 2f       	mov	r23, r22
    2c7c:	66 27       	eor	r22, r22
    2c7e:	77 95       	ror	r23
    2c80:	67 95       	ror	r22
    2c82:	fe 01       	movw	r30, r28
    2c84:	31 96       	adiw	r30, 0x01	; 1
    2c86:	6e 0f       	add	r22, r30
    2c88:	7f 1f       	adc	r23, r31
    2c8a:	46 0f       	add	r20, r22
    2c8c:	57 1f       	adc	r21, r23
    2c8e:	4b 5f       	subi	r20, 0xFB	; 251
    2c90:	5f 4f       	sbci	r21, 0xFF	; 255
    2c92:	fa 01       	movw	r30, r20
    2c94:	40 81       	ld	r20, Z
    2c96:	64 2f       	mov	r22, r20
    2c98:	60 6f       	ori	r22, 0xF0	; 240
    2c9a:	96 95       	lsr	r25
    2c9c:	98 2f       	mov	r25, r24
    2c9e:	88 27       	eor	r24, r24
    2ca0:	97 95       	ror	r25
    2ca2:	87 95       	ror	r24
    2ca4:	ae 01       	movw	r20, r28
    2ca6:	4f 5f       	subi	r20, 0xFF	; 255
    2ca8:	5f 4f       	sbci	r21, 0xFF	; 255
    2caa:	84 0f       	add	r24, r20
    2cac:	95 1f       	adc	r25, r21
    2cae:	82 0f       	add	r24, r18
    2cb0:	93 1f       	adc	r25, r19
    2cb2:	05 96       	adiw	r24, 0x05	; 5
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	60 83       	st	Z, r22
void Tetris_draw_map()
{
	unsigned char MAP [6][128] = {0};
	for(int i=0;i<12;i++)
	{
		for(int j = 0; j < 32; j++)
    2cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cba:	9c 81       	ldd	r25, Y+4	; 0x04
    2cbc:	01 96       	adiw	r24, 0x01	; 1
    2cbe:	9c 83       	std	Y+4, r25	; 0x04
    2cc0:	8b 83       	std	Y+3, r24	; 0x03
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc6:	80 97       	sbiw	r24, 0x20	; 32
    2cc8:	0c f4       	brge	.+2      	; 0x2ccc <Tetris_draw_map+0x406>
    2cca:	18 ce       	rjmp	.-976    	; 0x28fc <Tetris_draw_map+0x36>


void Tetris_draw_map()
{
	unsigned char MAP [6][128] = {0};
	for(int i=0;i<12;i++)
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd0:	01 96       	adiw	r24, 0x01	; 1
    2cd2:	9a 83       	std	Y+2, r25	; 0x02
    2cd4:	89 83       	std	Y+1, r24	; 0x01
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cda:	0c 97       	sbiw	r24, 0x0c	; 12
    2cdc:	0c f4       	brge	.+2      	; 0x2ce0 <Tetris_draw_map+0x41a>
    2cde:	0b ce       	rjmp	.-1002   	; 0x28f6 <Tetris_draw_map+0x30>
			}
		}
	}


	for(unsigned char y=2;y<8;y++)
    2ce0:	82 e0       	ldi	r24, 0x02	; 2
    2ce2:	8d 83       	std	Y+5, r24	; 0x05
    2ce4:	18 c0       	rjmp	.+48     	; 0x2d16 <Tetris_draw_map+0x450>
	{
		ssd1306_set_page_start(y);
    2ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce8:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_data(MAP[y - 2], COL_NUM);
    2cec:	8d 81       	ldd	r24, Y+5	; 0x05
    2cee:	88 2f       	mov	r24, r24
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	02 97       	sbiw	r24, 0x02	; 2
    2cf4:	9e 01       	movw	r18, r28
    2cf6:	2a 5f       	subi	r18, 0xFA	; 250
    2cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfa:	96 95       	lsr	r25
    2cfc:	98 2f       	mov	r25, r24
    2cfe:	88 27       	eor	r24, r24
    2d00:	97 95       	ror	r25
    2d02:	87 95       	ror	r24
    2d04:	82 0f       	add	r24, r18
    2d06:	93 1f       	adc	r25, r19
    2d08:	60 e8       	ldi	r22, 0x80	; 128
    2d0a:	70 e0       	ldi	r23, 0x00	; 0
    2d0c:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
			}
		}
	}


	for(unsigned char y=2;y<8;y++)
    2d10:	8d 81       	ldd	r24, Y+5	; 0x05
    2d12:	8f 5f       	subi	r24, 0xFF	; 255
    2d14:	8d 83       	std	Y+5, r24	; 0x05
    2d16:	8d 81       	ldd	r24, Y+5	; 0x05
    2d18:	88 30       	cpi	r24, 0x08	; 8
    2d1a:	28 f3       	brcs	.-54     	; 0x2ce6 <Tetris_draw_map+0x420>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(MAP[y - 2], COL_NUM);
	}
}
    2d1c:	00 00       	nop
    2d1e:	cb 5f       	subi	r28, 0xFB	; 251
    2d20:	dc 4f       	sbci	r29, 0xFC	; 252
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	08 95       	ret

00002d32 <NewTetriminos>:

void NewTetriminos()
{
    2d32:	cf 93       	push	r28
    2d34:	df 93       	push	r29
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
    2d3a:	62 97       	sbiw	r28, 0x12	; 18
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	cd bf       	out	0x3d, r28	; 61
	new_block = 0;	//새로운 블록 플레그 끄기
    2d46:	10 92 1c 08 	sts	0x081C, r1	; 0x80081c <new_block>
	shape = next_block;
    2d4a:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <next_block>
    2d4e:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <shape>
	next_block = TCNT0 % 7;					//다음에 올 테트리미노스 랜덤 출력
    2d52:	82 e5       	ldi	r24, 0x52	; 82
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	fc 01       	movw	r30, r24
    2d58:	20 81       	ld	r18, Z
    2d5a:	85 e2       	ldi	r24, 0x25	; 37
    2d5c:	28 9f       	mul	r18, r24
    2d5e:	81 2d       	mov	r24, r1
    2d60:	11 24       	eor	r1, r1
    2d62:	92 2f       	mov	r25, r18
    2d64:	98 1b       	sub	r25, r24
    2d66:	96 95       	lsr	r25
    2d68:	89 0f       	add	r24, r25
    2d6a:	98 2f       	mov	r25, r24
    2d6c:	96 95       	lsr	r25
    2d6e:	96 95       	lsr	r25
    2d70:	89 2f       	mov	r24, r25
    2d72:	88 0f       	add	r24, r24
    2d74:	88 0f       	add	r24, r24
    2d76:	88 0f       	add	r24, r24
    2d78:	89 1b       	sub	r24, r25
    2d7a:	92 2f       	mov	r25, r18
    2d7c:	98 1b       	sub	r25, r24
    2d7e:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <next_block>
	pattern = 0;	//기본 회전모향 설정
    2d82:	10 92 2b 08 	sts	0x082B, r1	; 0x80082b <pattern>
	cur_line = 0;                 // 테트리미노스 현재 라인 (최상위 라인)
    2d86:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <cur_line>
	cur_col = 6;                // 테트리미노스의 현재 칸
    2d8a:	86 e0       	ldi	r24, 0x06	; 6
    2d8c:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <cur_col>

	tetriminos_to_temp_line();
    2d90:	0e 94 84 06 	call	0xd08	; 0xd08 <tetriminos_to_temp_line>

	
	game_over |= game_board[cur_line] & temp_line[0];	//게임보드에 있는 테트리미노스와 임시저장소에 생긴 테트리미노스가 겹치는지 확인하고 겹치면 게임오버 플레그 켜짐
    2d94:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    2d98:	88 2f       	mov	r24, r24
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	88 0f       	add	r24, r24
    2d9e:	99 1f       	adc	r25, r25
    2da0:	88 0f       	add	r24, r24
    2da2:	99 1f       	adc	r25, r25
    2da4:	81 5c       	subi	r24, 0xC1	; 193
    2da6:	97 4f       	sbci	r25, 0xF7	; 247
    2da8:	fc 01       	movw	r30, r24
    2daa:	80 81       	ld	r24, Z
    2dac:	91 81       	ldd	r25, Z+1	; 0x01
    2dae:	a2 81       	ldd	r26, Z+2	; 0x02
    2db0:	b3 81       	ldd	r27, Z+3	; 0x03
    2db2:	28 2f       	mov	r18, r24
    2db4:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    2db8:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    2dbc:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    2dc0:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    2dc4:	92 2f       	mov	r25, r18
    2dc6:	98 23       	and	r25, r24
    2dc8:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <game_over>
    2dcc:	89 2b       	or	r24, r25
    2dce:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <game_over>
	game_over |= game_board[cur_line + 1] & temp_line[1];	//or 연산으로 어디든 겹치면 플레그 켜진다
    2dd2:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    2dd6:	88 2f       	mov	r24, r24
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	01 96       	adiw	r24, 0x01	; 1
    2ddc:	88 0f       	add	r24, r24
    2dde:	99 1f       	adc	r25, r25
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	81 5c       	subi	r24, 0xC1	; 193
    2de6:	97 4f       	sbci	r25, 0xF7	; 247
    2de8:	fc 01       	movw	r30, r24
    2dea:	80 81       	ld	r24, Z
    2dec:	91 81       	ldd	r25, Z+1	; 0x01
    2dee:	a2 81       	ldd	r26, Z+2	; 0x02
    2df0:	b3 81       	ldd	r27, Z+3	; 0x03
    2df2:	28 2f       	mov	r18, r24
    2df4:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    2df8:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    2dfc:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    2e00:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    2e04:	92 2f       	mov	r25, r18
    2e06:	98 23       	and	r25, r24
    2e08:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <game_over>
    2e0c:	89 2b       	or	r24, r25
    2e0e:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <game_over>
	game_over |= game_board[cur_line + 2] & temp_line[2];
    2e12:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    2e16:	88 2f       	mov	r24, r24
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	02 96       	adiw	r24, 0x02	; 2
    2e1c:	88 0f       	add	r24, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	88 0f       	add	r24, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	81 5c       	subi	r24, 0xC1	; 193
    2e26:	97 4f       	sbci	r25, 0xF7	; 247
    2e28:	fc 01       	movw	r30, r24
    2e2a:	80 81       	ld	r24, Z
    2e2c:	91 81       	ldd	r25, Z+1	; 0x01
    2e2e:	a2 81       	ldd	r26, Z+2	; 0x02
    2e30:	b3 81       	ldd	r27, Z+3	; 0x03
    2e32:	28 2f       	mov	r18, r24
    2e34:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    2e38:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    2e3c:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    2e40:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    2e44:	92 2f       	mov	r25, r18
    2e46:	98 23       	and	r25, r24
    2e48:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <game_over>
    2e4c:	89 2b       	or	r24, r25
    2e4e:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <game_over>
	game_over |= game_board[cur_line + 3] & temp_line[3];
    2e52:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    2e56:	88 2f       	mov	r24, r24
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	03 96       	adiw	r24, 0x03	; 3
    2e5c:	88 0f       	add	r24, r24
    2e5e:	99 1f       	adc	r25, r25
    2e60:	88 0f       	add	r24, r24
    2e62:	99 1f       	adc	r25, r25
    2e64:	81 5c       	subi	r24, 0xC1	; 193
    2e66:	97 4f       	sbci	r25, 0xF7	; 247
    2e68:	fc 01       	movw	r30, r24
    2e6a:	80 81       	ld	r24, Z
    2e6c:	91 81       	ldd	r25, Z+1	; 0x01
    2e6e:	a2 81       	ldd	r26, Z+2	; 0x02
    2e70:	b3 81       	ldd	r27, Z+3	; 0x03
    2e72:	28 2f       	mov	r18, r24
    2e74:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    2e78:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    2e7c:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    2e80:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    2e84:	92 2f       	mov	r25, r18
    2e86:	98 23       	and	r25, r24
    2e88:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <game_over>
    2e8c:	89 2b       	or	r24, r25
    2e8e:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <game_over>

	if(game_over != 0)
    2e92:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <game_over>
    2e96:	88 23       	and	r24, r24
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <NewTetriminos+0x16a>
    2e9a:	d4 c0       	rjmp	.+424    	; 0x3044 <NewTetriminos+0x312>
	{
		for (int i = 0; i < 31; i++ ) main_board[i] = 0x801;	//메인보드 초기화
    2e9c:	1a 82       	std	Y+2, r1	; 0x02
    2e9e:	19 82       	std	Y+1, r1	; 0x01
    2ea0:	17 c0       	rjmp	.+46     	; 0x2ed0 <NewTetriminos+0x19e>
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea6:	88 0f       	add	r24, r24
    2ea8:	99 1f       	adc	r25, r25
    2eaa:	88 0f       	add	r24, r24
    2eac:	99 1f       	adc	r25, r25
    2eae:	9c 01       	movw	r18, r24
    2eb0:	24 56       	subi	r18, 0x64	; 100
    2eb2:	38 4f       	sbci	r19, 0xF8	; 248
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	98 e0       	ldi	r25, 0x08	; 8
    2eb8:	a0 e0       	ldi	r26, 0x00	; 0
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	f9 01       	movw	r30, r18
    2ebe:	80 83       	st	Z, r24
    2ec0:	91 83       	std	Z+1, r25	; 0x01
    2ec2:	a2 83       	std	Z+2, r26	; 0x02
    2ec4:	b3 83       	std	Z+3, r27	; 0x03
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eca:	01 96       	adiw	r24, 0x01	; 1
    2ecc:	9a 83       	std	Y+2, r25	; 0x02
    2ece:	89 83       	std	Y+1, r24	; 0x01
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed4:	4f 97       	sbiw	r24, 0x1f	; 31
    2ed6:	2c f3       	brlt	.-54     	; 0x2ea2 <NewTetriminos+0x170>
		main_board[31] = 0xFFF;
    2ed8:	8f ef       	ldi	r24, 0xFF	; 255
    2eda:	9f e0       	ldi	r25, 0x0F	; 15
    2edc:	a0 e0       	ldi	r26, 0x00	; 0
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <main_board+0x7c>
    2ee4:	90 93 19 08 	sts	0x0819, r25	; 0x800819 <main_board+0x7d>
    2ee8:	a0 93 1a 08 	sts	0x081A, r26	; 0x80081a <main_board+0x7e>
    2eec:	b0 93 1b 08 	sts	0x081B, r27	; 0x80081b <main_board+0x7f>
		for (int i = 0; i < 31; i++ ) game_board[i] = 0x801;	//게임보드 초기화
    2ef0:	1c 82       	std	Y+4, r1	; 0x04
    2ef2:	1b 82       	std	Y+3, r1	; 0x03
    2ef4:	17 c0       	rjmp	.+46     	; 0x2f24 <NewTetriminos+0x1f2>
    2ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	88 0f       	add	r24, r24
    2f00:	99 1f       	adc	r25, r25
    2f02:	9c 01       	movw	r18, r24
    2f04:	21 5c       	subi	r18, 0xC1	; 193
    2f06:	37 4f       	sbci	r19, 0xF7	; 247
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	98 e0       	ldi	r25, 0x08	; 8
    2f0c:	a0 e0       	ldi	r26, 0x00	; 0
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	f9 01       	movw	r30, r18
    2f12:	80 83       	st	Z, r24
    2f14:	91 83       	std	Z+1, r25	; 0x01
    2f16:	a2 83       	std	Z+2, r26	; 0x02
    2f18:	b3 83       	std	Z+3, r27	; 0x03
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1e:	01 96       	adiw	r24, 0x01	; 1
    2f20:	9c 83       	std	Y+4, r25	; 0x04
    2f22:	8b 83       	std	Y+3, r24	; 0x03
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	9c 81       	ldd	r25, Y+4	; 0x04
    2f28:	4f 97       	sbiw	r24, 0x1f	; 31
    2f2a:	2c f3       	brlt	.-54     	; 0x2ef6 <NewTetriminos+0x1c4>
		game_board[31] = 0xFFF;
    2f2c:	8f ef       	ldi	r24, 0xFF	; 255
    2f2e:	9f e0       	ldi	r25, 0x0F	; 15
    2f30:	a0 e0       	ldi	r26, 0x00	; 0
    2f32:	b0 e0       	ldi	r27, 0x00	; 0
    2f34:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <game_board+0x7c>
    2f38:	90 93 bc 08 	sts	0x08BC, r25	; 0x8008bc <game_board+0x7d>
    2f3c:	a0 93 bd 08 	sts	0x08BD, r26	; 0x8008bd <game_board+0x7e>
    2f40:	b0 93 be 08 	sts	0x08BE, r27	; 0x8008be <game_board+0x7f>
		Tetris_draw_map();
    2f44:	c0 dc       	rcall	.-1664   	; 0x28c6 <Tetris_draw_map>

		SendCommand01(0x06, 0x00, 0x0F);	//게임오버소리 너무 커서 절반으로 
    2f46:	4f e0       	ldi	r20, 0x0F	; 15
    2f48:	60 e0       	ldi	r22, 0x00	; 0
    2f4a:	86 e0       	ldi	r24, 0x06	; 6
    2f4c:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	a8 e4       	ldi	r26, 0x48	; 72
    2f56:	b3 e4       	ldi	r27, 0x43	; 67
    2f58:	8d 83       	std	Y+5, r24	; 0x05
    2f5a:	9e 83       	std	Y+6, r25	; 0x06
    2f5c:	af 83       	std	Y+7, r26	; 0x07
    2f5e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	4a e7       	ldi	r20, 0x7A	; 122
    2f66:	55 e4       	ldi	r21, 0x45	; 69
    2f68:	6d 81       	ldd	r22, Y+5	; 0x05
    2f6a:	7e 81       	ldd	r23, Y+6	; 0x06
    2f6c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f6e:	98 85       	ldd	r25, Y+8	; 0x08
    2f70:	0e 94 2c 22 	call	0x4458	; 0x4458 <__mulsf3>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	89 87       	std	Y+9, r24	; 0x09
    2f7a:	9a 87       	std	Y+10, r25	; 0x0a
    2f7c:	ab 87       	std	Y+11, r26	; 0x0b
    2f7e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e8       	ldi	r20, 0x80	; 128
    2f86:	5f e3       	ldi	r21, 0x3F	; 63
    2f88:	69 85       	ldd	r22, Y+9	; 0x09
    2f8a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f90:	0e 94 ab 21 	call	0x4356	; 0x4356 <__cmpsf2>
    2f94:	88 23       	and	r24, r24
    2f96:	2c f4       	brge	.+10     	; 0x2fa2 <NewTetriminos+0x270>
		__ticks = 1;
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	9e 87       	std	Y+14, r25	; 0x0e
    2f9e:	8d 87       	std	Y+13, r24	; 0x0d
    2fa0:	3f c0       	rjmp	.+126    	; 0x3020 <NewTetriminos+0x2ee>
	else if (__tmp > 65535)
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	3f ef       	ldi	r19, 0xFF	; 255
    2fa6:	4f e7       	ldi	r20, 0x7F	; 127
    2fa8:	57 e4       	ldi	r21, 0x47	; 71
    2faa:	69 85       	ldd	r22, Y+9	; 0x09
    2fac:	7a 85       	ldd	r23, Y+10	; 0x0a
    2fae:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fb0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fb2:	0e 94 28 22 	call	0x4450	; 0x4450 <__gesf2>
    2fb6:	18 16       	cp	r1, r24
    2fb8:	4c f5       	brge	.+82     	; 0x300c <NewTetriminos+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e2       	ldi	r20, 0x20	; 32
    2fc0:	51 e4       	ldi	r21, 0x41	; 65
    2fc2:	6d 81       	ldd	r22, Y+5	; 0x05
    2fc4:	7e 81       	ldd	r23, Y+6	; 0x06
    2fc6:	8f 81       	ldd	r24, Y+7	; 0x07
    2fc8:	98 85       	ldd	r25, Y+8	; 0x08
    2fca:	0e 94 2c 22 	call	0x4458	; 0x4458 <__mulsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	bc 01       	movw	r22, r24
    2fd4:	cd 01       	movw	r24, r26
    2fd6:	0e 94 af 21 	call	0x435e	; 0x435e <__fixunssfsi>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	9e 87       	std	Y+14, r25	; 0x0e
    2fe0:	8d 87       	std	Y+13, r24	; 0x0d
    2fe2:	0f c0       	rjmp	.+30     	; 0x3002 <NewTetriminos+0x2d0>
    2fe4:	80 e9       	ldi	r24, 0x90	; 144
    2fe6:	91 e0       	ldi	r25, 0x01	; 1
    2fe8:	98 8b       	std	Y+16, r25	; 0x10
    2fea:	8f 87       	std	Y+15, r24	; 0x0f
    2fec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fee:	98 89       	ldd	r25, Y+16	; 0x10
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	f1 f7       	brne	.-4      	; 0x2ff0 <NewTetriminos+0x2be>
    2ff4:	98 8b       	std	Y+16, r25	; 0x10
    2ff6:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	9e 87       	std	Y+14, r25	; 0x0e
    3000:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3002:	8d 85       	ldd	r24, Y+13	; 0x0d
    3004:	9e 85       	ldd	r25, Y+14	; 0x0e
    3006:	89 2b       	or	r24, r25
    3008:	69 f7       	brne	.-38     	; 0x2fe4 <NewTetriminos+0x2b2>
    300a:	14 c0       	rjmp	.+40     	; 0x3034 <NewTetriminos+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300c:	69 85       	ldd	r22, Y+9	; 0x09
    300e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3010:	8b 85       	ldd	r24, Y+11	; 0x0b
    3012:	9c 85       	ldd	r25, Y+12	; 0x0c
    3014:	0e 94 af 21 	call	0x435e	; 0x435e <__fixunssfsi>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	9e 87       	std	Y+14, r25	; 0x0e
    301e:	8d 87       	std	Y+13, r24	; 0x0d
    3020:	8d 85       	ldd	r24, Y+13	; 0x0d
    3022:	9e 85       	ldd	r25, Y+14	; 0x0e
    3024:	9a 8b       	std	Y+18, r25	; 0x12
    3026:	89 8b       	std	Y+17, r24	; 0x11
    3028:	89 89       	ldd	r24, Y+17	; 0x11
    302a:	9a 89       	ldd	r25, Y+18	; 0x12
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	f1 f7       	brne	.-4      	; 0x302c <NewTetriminos+0x2fa>
    3030:	9a 8b       	std	Y+18, r25	; 0x12
    3032:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms(200);
		SendCommand01(0x0F, 0x01, 0x04);
    3034:	44 e0       	ldi	r20, 0x04	; 4
    3036:	61 e0       	ldi	r22, 0x01	; 1
    3038:	8f e0       	ldi	r24, 0x0F	; 15
    303a:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>

		screen = Over_tetris;
    303e:	85 e0       	ldi	r24, 0x05	; 5
    3040:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
	}
	
	
	if(screen == Play_tetris)
    3044:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    3048:	83 30       	cpi	r24, 0x03	; 3
    304a:	09 f0       	breq	.+2      	; 0x304e <NewTetriminos+0x31c>
    304c:	b8 c0       	rjmp	.+368    	; 0x31be <NewTetriminos+0x48c>
	{
		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
    304e:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    3052:	68 2f       	mov	r22, r24
    3054:	70 e0       	ldi	r23, 0x00	; 0
    3056:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    305a:	88 2f       	mov	r24, r24
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	88 0f       	add	r24, r24
    3060:	99 1f       	adc	r25, r25
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	81 5c       	subi	r24, 0xC1	; 193
    3068:	97 4f       	sbci	r25, 0xF7	; 247
    306a:	fc 01       	movw	r30, r24
    306c:	20 81       	ld	r18, Z
    306e:	31 81       	ldd	r19, Z+1	; 0x01
    3070:	42 81       	ldd	r20, Z+2	; 0x02
    3072:	53 81       	ldd	r21, Z+3	; 0x03
    3074:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    3078:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    307c:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    3080:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    3084:	82 2b       	or	r24, r18
    3086:	93 2b       	or	r25, r19
    3088:	a4 2b       	or	r26, r20
    308a:	b5 2b       	or	r27, r21
    308c:	9b 01       	movw	r18, r22
    308e:	22 0f       	add	r18, r18
    3090:	33 1f       	adc	r19, r19
    3092:	22 0f       	add	r18, r18
    3094:	33 1f       	adc	r19, r19
    3096:	21 5c       	subi	r18, 0xC1	; 193
    3098:	37 4f       	sbci	r19, 0xF7	; 247
    309a:	f9 01       	movw	r30, r18
    309c:	80 83       	st	Z, r24
    309e:	91 83       	std	Z+1, r25	; 0x01
    30a0:	a2 83       	std	Z+2, r26	; 0x02
    30a2:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 1] |= temp_line[1];
    30a4:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    30a8:	88 2f       	mov	r24, r24
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	bc 01       	movw	r22, r24
    30ae:	6f 5f       	subi	r22, 0xFF	; 255
    30b0:	7f 4f       	sbci	r23, 0xFF	; 255
    30b2:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    30b6:	88 2f       	mov	r24, r24
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	01 96       	adiw	r24, 0x01	; 1
    30bc:	88 0f       	add	r24, r24
    30be:	99 1f       	adc	r25, r25
    30c0:	88 0f       	add	r24, r24
    30c2:	99 1f       	adc	r25, r25
    30c4:	81 5c       	subi	r24, 0xC1	; 193
    30c6:	97 4f       	sbci	r25, 0xF7	; 247
    30c8:	fc 01       	movw	r30, r24
    30ca:	20 81       	ld	r18, Z
    30cc:	31 81       	ldd	r19, Z+1	; 0x01
    30ce:	42 81       	ldd	r20, Z+2	; 0x02
    30d0:	53 81       	ldd	r21, Z+3	; 0x03
    30d2:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    30d6:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    30da:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    30de:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    30e2:	82 2b       	or	r24, r18
    30e4:	93 2b       	or	r25, r19
    30e6:	a4 2b       	or	r26, r20
    30e8:	b5 2b       	or	r27, r21
    30ea:	9b 01       	movw	r18, r22
    30ec:	22 0f       	add	r18, r18
    30ee:	33 1f       	adc	r19, r19
    30f0:	22 0f       	add	r18, r18
    30f2:	33 1f       	adc	r19, r19
    30f4:	21 5c       	subi	r18, 0xC1	; 193
    30f6:	37 4f       	sbci	r19, 0xF7	; 247
    30f8:	f9 01       	movw	r30, r18
    30fa:	80 83       	st	Z, r24
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	a2 83       	std	Z+2, r26	; 0x02
    3100:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 2] |= temp_line[2];
    3102:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    3106:	88 2f       	mov	r24, r24
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	bc 01       	movw	r22, r24
    310c:	6e 5f       	subi	r22, 0xFE	; 254
    310e:	7f 4f       	sbci	r23, 0xFF	; 255
    3110:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    3114:	88 2f       	mov	r24, r24
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	02 96       	adiw	r24, 0x02	; 2
    311a:	88 0f       	add	r24, r24
    311c:	99 1f       	adc	r25, r25
    311e:	88 0f       	add	r24, r24
    3120:	99 1f       	adc	r25, r25
    3122:	81 5c       	subi	r24, 0xC1	; 193
    3124:	97 4f       	sbci	r25, 0xF7	; 247
    3126:	fc 01       	movw	r30, r24
    3128:	20 81       	ld	r18, Z
    312a:	31 81       	ldd	r19, Z+1	; 0x01
    312c:	42 81       	ldd	r20, Z+2	; 0x02
    312e:	53 81       	ldd	r21, Z+3	; 0x03
    3130:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    3134:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    3138:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    313c:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    3140:	82 2b       	or	r24, r18
    3142:	93 2b       	or	r25, r19
    3144:	a4 2b       	or	r26, r20
    3146:	b5 2b       	or	r27, r21
    3148:	9b 01       	movw	r18, r22
    314a:	22 0f       	add	r18, r18
    314c:	33 1f       	adc	r19, r19
    314e:	22 0f       	add	r18, r18
    3150:	33 1f       	adc	r19, r19
    3152:	21 5c       	subi	r18, 0xC1	; 193
    3154:	37 4f       	sbci	r19, 0xF7	; 247
    3156:	f9 01       	movw	r30, r18
    3158:	80 83       	st	Z, r24
    315a:	91 83       	std	Z+1, r25	; 0x01
    315c:	a2 83       	std	Z+2, r26	; 0x02
    315e:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 3] |= temp_line[3];
    3160:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    3164:	88 2f       	mov	r24, r24
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	bc 01       	movw	r22, r24
    316a:	6d 5f       	subi	r22, 0xFD	; 253
    316c:	7f 4f       	sbci	r23, 0xFF	; 255
    316e:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    3172:	88 2f       	mov	r24, r24
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	03 96       	adiw	r24, 0x03	; 3
    3178:	88 0f       	add	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	88 0f       	add	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	81 5c       	subi	r24, 0xC1	; 193
    3182:	97 4f       	sbci	r25, 0xF7	; 247
    3184:	fc 01       	movw	r30, r24
    3186:	20 81       	ld	r18, Z
    3188:	31 81       	ldd	r19, Z+1	; 0x01
    318a:	42 81       	ldd	r20, Z+2	; 0x02
    318c:	53 81       	ldd	r21, Z+3	; 0x03
    318e:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    3192:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    3196:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    319a:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    319e:	82 2b       	or	r24, r18
    31a0:	93 2b       	or	r25, r19
    31a2:	a4 2b       	or	r26, r20
    31a4:	b5 2b       	or	r27, r21
    31a6:	9b 01       	movw	r18, r22
    31a8:	22 0f       	add	r18, r18
    31aa:	33 1f       	adc	r19, r19
    31ac:	22 0f       	add	r18, r18
    31ae:	33 1f       	adc	r19, r19
    31b0:	21 5c       	subi	r18, 0xC1	; 193
    31b2:	37 4f       	sbci	r19, 0xF7	; 247
    31b4:	f9 01       	movw	r30, r18
    31b6:	80 83       	st	Z, r24
    31b8:	91 83       	std	Z+1, r25	; 0x01
    31ba:	a2 83       	std	Z+2, r26	; 0x02
    31bc:	b3 83       	std	Z+3, r27	; 0x03
	}
}
    31be:	00 00       	nop
    31c0:	62 96       	adiw	r28, 0x12	; 18
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
    31cc:	df 91       	pop	r29
    31ce:	cf 91       	pop	r28
    31d0:	08 95       	ret

000031d2 <NextTetriminos>:

void NextTetriminos()
{
    31d2:	cf 93       	push	r28
    31d4:	df 93       	push	r29
    31d6:	cd b7       	in	r28, 0x3d	; 61
    31d8:	de b7       	in	r29, 0x3e	; 62
    31da:	c9 50       	subi	r28, 0x09	; 9
    31dc:	d1 40       	sbci	r29, 0x01	; 1
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	f8 94       	cli
    31e2:	de bf       	out	0x3e, r29	; 62
    31e4:	0f be       	out	0x3f, r0	; 63
    31e6:	cd bf       	out	0x3d, r28	; 61
	for(int i = 0; i < 8; i++)	//넥스트 보드 초기화
    31e8:	1a 82       	std	Y+2, r1	; 0x02
    31ea:	19 82       	std	Y+1, r1	; 0x01
    31ec:	0b c0       	rjmp	.+22     	; 0x3204 <NextTetriminos+0x32>
	{
		next_board[i] = 0;
    31ee:	89 81       	ldd	r24, Y+1	; 0x01
    31f0:	9a 81       	ldd	r25, Y+2	; 0x02
    31f2:	81 5e       	subi	r24, 0xE1	; 225
    31f4:	97 4f       	sbci	r25, 0xF7	; 247
    31f6:	fc 01       	movw	r30, r24
    31f8:	10 82       	st	Z, r1
	}
}

void NextTetriminos()
{
	for(int i = 0; i < 8; i++)	//넥스트 보드 초기화
    31fa:	89 81       	ldd	r24, Y+1	; 0x01
    31fc:	9a 81       	ldd	r25, Y+2	; 0x02
    31fe:	01 96       	adiw	r24, 0x01	; 1
    3200:	9a 83       	std	Y+2, r25	; 0x02
    3202:	89 83       	std	Y+1, r24	; 0x01
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	9a 81       	ldd	r25, Y+2	; 0x02
    3208:	08 97       	sbiw	r24, 0x08	; 8
    320a:	8c f3       	brlt	.-30     	; 0x31ee <NextTetriminos+0x1c>
	{
		next_board[i] = 0;
	}

	
	next_board[2] |= (unsigned char)((tetriminos[next_block][0] & 0xF000) >> 10);
    320c:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <next_board+0x2>
    3210:	48 2f       	mov	r20, r24
    3212:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <next_block>
    3216:	88 2f       	mov	r24, r24
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	2c e6       	ldi	r18, 0x6C	; 108
    321c:	32 e0       	ldi	r19, 0x02	; 2
    321e:	88 0f       	add	r24, r24
    3220:	99 1f       	adc	r25, r25
    3222:	88 0f       	add	r24, r24
    3224:	99 1f       	adc	r25, r25
    3226:	88 0f       	add	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	82 0f       	add	r24, r18
    322c:	93 1f       	adc	r25, r19
    322e:	fc 01       	movw	r30, r24
    3230:	85 91       	lpm	r24, Z+
    3232:	95 91       	lpm	r25, Z+
    3234:	32 97       	sbiw	r30, 0x02	; 2
    3236:	88 27       	eor	r24, r24
    3238:	90 7f       	andi	r25, 0xF0	; 240
    323a:	89 2f       	mov	r24, r25
    323c:	99 27       	eor	r25, r25
    323e:	86 95       	lsr	r24
    3240:	86 95       	lsr	r24
    3242:	84 2b       	or	r24, r20
    3244:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <next_board+0x2>
	next_board[3] |= (unsigned char)((tetriminos[next_block][0] & 0x0F00) >> 6);
    3248:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <next_board+0x3>
    324c:	48 2f       	mov	r20, r24
    324e:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <next_block>
    3252:	88 2f       	mov	r24, r24
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	2c e6       	ldi	r18, 0x6C	; 108
    3258:	32 e0       	ldi	r19, 0x02	; 2
    325a:	88 0f       	add	r24, r24
    325c:	99 1f       	adc	r25, r25
    325e:	88 0f       	add	r24, r24
    3260:	99 1f       	adc	r25, r25
    3262:	88 0f       	add	r24, r24
    3264:	99 1f       	adc	r25, r25
    3266:	82 0f       	add	r24, r18
    3268:	93 1f       	adc	r25, r19
    326a:	fc 01       	movw	r30, r24
    326c:	85 91       	lpm	r24, Z+
    326e:	95 91       	lpm	r25, Z+
    3270:	32 97       	sbiw	r30, 0x02	; 2
    3272:	88 27       	eor	r24, r24
    3274:	9f 70       	andi	r25, 0x0F	; 15
    3276:	00 24       	eor	r0, r0
    3278:	88 0f       	add	r24, r24
    327a:	99 1f       	adc	r25, r25
    327c:	00 1c       	adc	r0, r0
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	00 1c       	adc	r0, r0
    3284:	89 2f       	mov	r24, r25
    3286:	90 2d       	mov	r25, r0
    3288:	84 2b       	or	r24, r20
    328a:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <next_board+0x3>
	next_board[4] |= (unsigned char)((tetriminos[next_block][0] & 0x00F0) >> 2);
    328e:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <next_board+0x4>
    3292:	48 2f       	mov	r20, r24
    3294:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <next_block>
    3298:	88 2f       	mov	r24, r24
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	2c e6       	ldi	r18, 0x6C	; 108
    329e:	32 e0       	ldi	r19, 0x02	; 2
    32a0:	88 0f       	add	r24, r24
    32a2:	99 1f       	adc	r25, r25
    32a4:	88 0f       	add	r24, r24
    32a6:	99 1f       	adc	r25, r25
    32a8:	88 0f       	add	r24, r24
    32aa:	99 1f       	adc	r25, r25
    32ac:	82 0f       	add	r24, r18
    32ae:	93 1f       	adc	r25, r19
    32b0:	fc 01       	movw	r30, r24
    32b2:	85 91       	lpm	r24, Z+
    32b4:	95 91       	lpm	r25, Z+
    32b6:	32 97       	sbiw	r30, 0x02	; 2
    32b8:	80 7f       	andi	r24, 0xF0	; 240
    32ba:	99 27       	eor	r25, r25
    32bc:	96 95       	lsr	r25
    32be:	87 95       	ror	r24
    32c0:	96 95       	lsr	r25
    32c2:	87 95       	ror	r24
    32c4:	84 2b       	or	r24, r20
    32c6:	80 93 23 08 	sts	0x0823, r24	; 0x800823 <next_board+0x4>
	next_board[5] |= (unsigned char)((tetriminos[next_block][0] & 0x000F) << 2);
    32ca:	40 91 24 08 	lds	r20, 0x0824	; 0x800824 <next_board+0x5>
    32ce:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <next_block>
    32d2:	88 2f       	mov	r24, r24
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	2c e6       	ldi	r18, 0x6C	; 108
    32d8:	32 e0       	ldi	r19, 0x02	; 2
    32da:	88 0f       	add	r24, r24
    32dc:	99 1f       	adc	r25, r25
    32de:	88 0f       	add	r24, r24
    32e0:	99 1f       	adc	r25, r25
    32e2:	88 0f       	add	r24, r24
    32e4:	99 1f       	adc	r25, r25
    32e6:	82 0f       	add	r24, r18
    32e8:	93 1f       	adc	r25, r19
    32ea:	fc 01       	movw	r30, r24
    32ec:	85 91       	lpm	r24, Z+
    32ee:	95 91       	lpm	r25, Z+
    32f0:	32 97       	sbiw	r30, 0x02	; 2
    32f2:	8f 70       	andi	r24, 0x0F	; 15
    32f4:	88 0f       	add	r24, r24
    32f6:	88 0f       	add	r24, r24
    32f8:	84 2b       	or	r24, r20
    32fa:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <next_board+0x5>


	unsigned char MAP [2][128] = {0};
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	31 e0       	ldi	r19, 0x01	; 1
    3302:	ce 01       	movw	r24, r28
    3304:	0a 96       	adiw	r24, 0x0a	; 10
    3306:	fc 01       	movw	r30, r24
    3308:	a9 01       	movw	r20, r18
    330a:	11 92       	st	Z+, r1
    330c:	41 50       	subi	r20, 0x01	; 1
    330e:	50 40       	sbci	r21, 0x00	; 0
    3310:	e1 f7       	brne	.-8      	; 0x330a <NextTetriminos+0x138>
	

	MAP[0][2] |= 0xFF;	//위에 보드 2칸 줄은 너무 두꺼워서 한줄로 만들었다
    3312:	8f ef       	ldi	r24, 0xFF	; 255
    3314:	8c 87       	std	Y+12, r24	; 0x0c
	MAP[1][2] |= 0xFF;
    3316:	ce 01       	movw	r24, r28
    3318:	84 57       	subi	r24, 0x74	; 116
    331a:	9f 4f       	sbci	r25, 0xFF	; 255
    331c:	2f ef       	ldi	r18, 0xFF	; 255
    331e:	fc 01       	movw	r30, r24
    3320:	20 83       	st	Z, r18
	MAP[0][17] |= 0xFF;
    3322:	8f ef       	ldi	r24, 0xFF	; 255
    3324:	8b 8f       	std	Y+27, r24	; 0x1b
	MAP[1][17] |= 0xFF;
    3326:	ce 01       	movw	r24, r28
    3328:	85 56       	subi	r24, 0x65	; 101
    332a:	9f 4f       	sbci	r25, 0xFF	; 255
    332c:	2f ef       	ldi	r18, 0xFF	; 255
    332e:	fc 01       	movw	r30, r24
    3330:	20 83       	st	Z, r18

	for(int i = 2; i < 18; i++)
    3332:	82 e0       	ldi	r24, 0x02	; 2
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	9c 83       	std	Y+4, r25	; 0x04
    3338:	8b 83       	std	Y+3, r24	; 0x03
    333a:	2d c0       	rjmp	.+90     	; 0x3396 <NextTetriminos+0x1c4>
	{
		MAP[0][i] |= 0x01;
    333c:	9e 01       	movw	r18, r28
    333e:	26 5f       	subi	r18, 0xF6	; 246
    3340:	3f 4f       	sbci	r19, 0xFF	; 255
    3342:	8b 81       	ldd	r24, Y+3	; 0x03
    3344:	9c 81       	ldd	r25, Y+4	; 0x04
    3346:	82 0f       	add	r24, r18
    3348:	93 1f       	adc	r25, r19
    334a:	fc 01       	movw	r30, r24
    334c:	80 81       	ld	r24, Z
    334e:	48 2f       	mov	r20, r24
    3350:	41 60       	ori	r20, 0x01	; 1
    3352:	9e 01       	movw	r18, r28
    3354:	26 5f       	subi	r18, 0xF6	; 246
    3356:	3f 4f       	sbci	r19, 0xFF	; 255
    3358:	8b 81       	ldd	r24, Y+3	; 0x03
    335a:	9c 81       	ldd	r25, Y+4	; 0x04
    335c:	82 0f       	add	r24, r18
    335e:	93 1f       	adc	r25, r19
    3360:	fc 01       	movw	r30, r24
    3362:	40 83       	st	Z, r20
		MAP[1][i] |= 0x80;
    3364:	9e 01       	movw	r18, r28
    3366:	26 57       	subi	r18, 0x76	; 118
    3368:	3f 4f       	sbci	r19, 0xFF	; 255
    336a:	8b 81       	ldd	r24, Y+3	; 0x03
    336c:	9c 81       	ldd	r25, Y+4	; 0x04
    336e:	82 0f       	add	r24, r18
    3370:	93 1f       	adc	r25, r19
    3372:	fc 01       	movw	r30, r24
    3374:	80 81       	ld	r24, Z
    3376:	48 2f       	mov	r20, r24
    3378:	40 68       	ori	r20, 0x80	; 128
    337a:	9e 01       	movw	r18, r28
    337c:	26 57       	subi	r18, 0x76	; 118
    337e:	3f 4f       	sbci	r19, 0xFF	; 255
    3380:	8b 81       	ldd	r24, Y+3	; 0x03
    3382:	9c 81       	ldd	r25, Y+4	; 0x04
    3384:	82 0f       	add	r24, r18
    3386:	93 1f       	adc	r25, r19
    3388:	fc 01       	movw	r30, r24
    338a:	40 83       	st	Z, r20
	MAP[0][2] |= 0xFF;	//위에 보드 2칸 줄은 너무 두꺼워서 한줄로 만들었다
	MAP[1][2] |= 0xFF;
	MAP[0][17] |= 0xFF;
	MAP[1][17] |= 0xFF;

	for(int i = 2; i < 18; i++)
    338c:	8b 81       	ldd	r24, Y+3	; 0x03
    338e:	9c 81       	ldd	r25, Y+4	; 0x04
    3390:	01 96       	adiw	r24, 0x01	; 1
    3392:	9c 83       	std	Y+4, r25	; 0x04
    3394:	8b 83       	std	Y+3, r24	; 0x03
    3396:	8b 81       	ldd	r24, Y+3	; 0x03
    3398:	9c 81       	ldd	r25, Y+4	; 0x04
    339a:	42 97       	sbiw	r24, 0x12	; 18
    339c:	7c f2       	brlt	.-98     	; 0x333c <NextTetriminos+0x16a>
		MAP[0][i] |= 0x01;
		MAP[1][i] |= 0x80;
	}


	for(int i = 0;i < 8; i++)
    339e:	1e 82       	std	Y+6, r1	; 0x06
    33a0:	1d 82       	std	Y+5, r1	; 0x05
    33a2:	e3 c0       	rjmp	.+454    	; 0x356a <NextTetriminos+0x398>
	{
		for(int j = 0; j < 8; j++)
    33a4:	18 86       	std	Y+8, r1	; 0x08
    33a6:	1f 82       	std	Y+7, r1	; 0x07
    33a8:	d6 c0       	rjmp	.+428    	; 0x3556 <NextTetriminos+0x384>
		{
			if((next_board[i] & (1 << j)) != 0)
    33aa:	8d 81       	ldd	r24, Y+5	; 0x05
    33ac:	9e 81       	ldd	r25, Y+6	; 0x06
    33ae:	81 5e       	subi	r24, 0xE1	; 225
    33b0:	97 4f       	sbci	r25, 0xF7	; 247
    33b2:	fc 01       	movw	r30, r24
    33b4:	80 81       	ld	r24, Z
    33b6:	88 2f       	mov	r24, r24
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	0f 80       	ldd	r0, Y+7	; 0x07
    33bc:	02 c0       	rjmp	.+4      	; 0x33c2 <NextTetriminos+0x1f0>
    33be:	95 95       	asr	r25
    33c0:	87 95       	ror	r24
    33c2:	0a 94       	dec	r0
    33c4:	e2 f7       	brpl	.-8      	; 0x33be <NextTetriminos+0x1ec>
    33c6:	81 70       	andi	r24, 0x01	; 1
    33c8:	99 27       	eor	r25, r25
    33ca:	89 2b       	or	r24, r25
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <NextTetriminos+0x1fe>
    33ce:	be c0       	rjmp	.+380    	; 0x354c <NextTetriminos+0x37a>
			{
				if(j < 4)
    33d0:	8f 81       	ldd	r24, Y+7	; 0x07
    33d2:	98 85       	ldd	r25, Y+8	; 0x08
    33d4:	04 97       	sbiw	r24, 0x04	; 4
    33d6:	0c f0       	brlt	.+2      	; 0x33da <NextTetriminos+0x208>
    33d8:	5d c0       	rjmp	.+186    	; 0x3494 <NextTetriminos+0x2c2>
				{
					MAP[1][2 + (2 * i)] |= (0x03 << 2 * (3 - j));
    33da:	8d 81       	ldd	r24, Y+5	; 0x05
    33dc:	9e 81       	ldd	r25, Y+6	; 0x06
    33de:	01 96       	adiw	r24, 0x01	; 1
    33e0:	88 0f       	add	r24, r24
    33e2:	99 1f       	adc	r25, r25
    33e4:	2d 81       	ldd	r18, Y+5	; 0x05
    33e6:	3e 81       	ldd	r19, Y+6	; 0x06
    33e8:	2f 5f       	subi	r18, 0xFF	; 255
    33ea:	3f 4f       	sbci	r19, 0xFF	; 255
    33ec:	22 0f       	add	r18, r18
    33ee:	33 1f       	adc	r19, r19
    33f0:	ae 01       	movw	r20, r28
    33f2:	46 57       	subi	r20, 0x76	; 118
    33f4:	5f 4f       	sbci	r21, 0xFF	; 255
    33f6:	24 0f       	add	r18, r20
    33f8:	35 1f       	adc	r19, r21
    33fa:	f9 01       	movw	r30, r18
    33fc:	20 81       	ld	r18, Z
    33fe:	62 2f       	mov	r22, r18
    3400:	43 e0       	ldi	r20, 0x03	; 3
    3402:	50 e0       	ldi	r21, 0x00	; 0
    3404:	2f 81       	ldd	r18, Y+7	; 0x07
    3406:	38 85       	ldd	r19, Y+8	; 0x08
    3408:	fa 01       	movw	r30, r20
    340a:	e2 1b       	sub	r30, r18
    340c:	f3 0b       	sbc	r31, r19
    340e:	9f 01       	movw	r18, r30
    3410:	a9 01       	movw	r20, r18
    3412:	44 0f       	add	r20, r20
    3414:	55 1f       	adc	r21, r21
    3416:	23 e0       	ldi	r18, 0x03	; 3
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	02 c0       	rjmp	.+4      	; 0x3420 <NextTetriminos+0x24e>
    341c:	22 0f       	add	r18, r18
    341e:	33 1f       	adc	r19, r19
    3420:	4a 95       	dec	r20
    3422:	e2 f7       	brpl	.-8      	; 0x341c <NextTetriminos+0x24a>
    3424:	26 2b       	or	r18, r22
    3426:	42 2f       	mov	r20, r18
    3428:	9e 01       	movw	r18, r28
    342a:	26 57       	subi	r18, 0x76	; 118
    342c:	3f 4f       	sbci	r19, 0xFF	; 255
    342e:	82 0f       	add	r24, r18
    3430:	93 1f       	adc	r25, r19
    3432:	fc 01       	movw	r30, r24
    3434:	40 83       	st	Z, r20
					MAP[1][2 + (2 * i + 1)] |= (0x03 << 2 * (3 - j));
    3436:	8d 81       	ldd	r24, Y+5	; 0x05
    3438:	9e 81       	ldd	r25, Y+6	; 0x06
    343a:	88 0f       	add	r24, r24
    343c:	99 1f       	adc	r25, r25
    343e:	03 96       	adiw	r24, 0x03	; 3
    3440:	2d 81       	ldd	r18, Y+5	; 0x05
    3442:	3e 81       	ldd	r19, Y+6	; 0x06
    3444:	22 0f       	add	r18, r18
    3446:	33 1f       	adc	r19, r19
    3448:	2d 5f       	subi	r18, 0xFD	; 253
    344a:	3f 4f       	sbci	r19, 0xFF	; 255
    344c:	ae 01       	movw	r20, r28
    344e:	46 57       	subi	r20, 0x76	; 118
    3450:	5f 4f       	sbci	r21, 0xFF	; 255
    3452:	24 0f       	add	r18, r20
    3454:	35 1f       	adc	r19, r21
    3456:	f9 01       	movw	r30, r18
    3458:	20 81       	ld	r18, Z
    345a:	62 2f       	mov	r22, r18
    345c:	43 e0       	ldi	r20, 0x03	; 3
    345e:	50 e0       	ldi	r21, 0x00	; 0
    3460:	2f 81       	ldd	r18, Y+7	; 0x07
    3462:	38 85       	ldd	r19, Y+8	; 0x08
    3464:	fa 01       	movw	r30, r20
    3466:	e2 1b       	sub	r30, r18
    3468:	f3 0b       	sbc	r31, r19
    346a:	9f 01       	movw	r18, r30
    346c:	a9 01       	movw	r20, r18
    346e:	44 0f       	add	r20, r20
    3470:	55 1f       	adc	r21, r21
    3472:	23 e0       	ldi	r18, 0x03	; 3
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	02 c0       	rjmp	.+4      	; 0x347c <NextTetriminos+0x2aa>
    3478:	22 0f       	add	r18, r18
    347a:	33 1f       	adc	r19, r19
    347c:	4a 95       	dec	r20
    347e:	e2 f7       	brpl	.-8      	; 0x3478 <NextTetriminos+0x2a6>
    3480:	26 2b       	or	r18, r22
    3482:	42 2f       	mov	r20, r18
    3484:	9e 01       	movw	r18, r28
    3486:	26 57       	subi	r18, 0x76	; 118
    3488:	3f 4f       	sbci	r19, 0xFF	; 255
    348a:	82 0f       	add	r24, r18
    348c:	93 1f       	adc	r25, r19
    348e:	fc 01       	movw	r30, r24
    3490:	40 83       	st	Z, r20
    3492:	5c c0       	rjmp	.+184    	; 0x354c <NextTetriminos+0x37a>
				}
				else
				{
					MAP[0][2 + (2 * i)] |= (0x03 << 2 * (7 - j));
    3494:	8d 81       	ldd	r24, Y+5	; 0x05
    3496:	9e 81       	ldd	r25, Y+6	; 0x06
    3498:	01 96       	adiw	r24, 0x01	; 1
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	2d 81       	ldd	r18, Y+5	; 0x05
    34a0:	3e 81       	ldd	r19, Y+6	; 0x06
    34a2:	2f 5f       	subi	r18, 0xFF	; 255
    34a4:	3f 4f       	sbci	r19, 0xFF	; 255
    34a6:	22 0f       	add	r18, r18
    34a8:	33 1f       	adc	r19, r19
    34aa:	ae 01       	movw	r20, r28
    34ac:	46 5f       	subi	r20, 0xF6	; 246
    34ae:	5f 4f       	sbci	r21, 0xFF	; 255
    34b0:	24 0f       	add	r18, r20
    34b2:	35 1f       	adc	r19, r21
    34b4:	f9 01       	movw	r30, r18
    34b6:	20 81       	ld	r18, Z
    34b8:	62 2f       	mov	r22, r18
    34ba:	47 e0       	ldi	r20, 0x07	; 7
    34bc:	50 e0       	ldi	r21, 0x00	; 0
    34be:	2f 81       	ldd	r18, Y+7	; 0x07
    34c0:	38 85       	ldd	r19, Y+8	; 0x08
    34c2:	fa 01       	movw	r30, r20
    34c4:	e2 1b       	sub	r30, r18
    34c6:	f3 0b       	sbc	r31, r19
    34c8:	9f 01       	movw	r18, r30
    34ca:	a9 01       	movw	r20, r18
    34cc:	44 0f       	add	r20, r20
    34ce:	55 1f       	adc	r21, r21
    34d0:	23 e0       	ldi	r18, 0x03	; 3
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	02 c0       	rjmp	.+4      	; 0x34da <NextTetriminos+0x308>
    34d6:	22 0f       	add	r18, r18
    34d8:	33 1f       	adc	r19, r19
    34da:	4a 95       	dec	r20
    34dc:	e2 f7       	brpl	.-8      	; 0x34d6 <NextTetriminos+0x304>
    34de:	26 2b       	or	r18, r22
    34e0:	42 2f       	mov	r20, r18
    34e2:	9e 01       	movw	r18, r28
    34e4:	26 5f       	subi	r18, 0xF6	; 246
    34e6:	3f 4f       	sbci	r19, 0xFF	; 255
    34e8:	82 0f       	add	r24, r18
    34ea:	93 1f       	adc	r25, r19
    34ec:	fc 01       	movw	r30, r24
    34ee:	40 83       	st	Z, r20
					MAP[0][2 + (2 * i + 1)] |= (0x03 << 2 * (7 - j));
    34f0:	8d 81       	ldd	r24, Y+5	; 0x05
    34f2:	9e 81       	ldd	r25, Y+6	; 0x06
    34f4:	88 0f       	add	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	03 96       	adiw	r24, 0x03	; 3
    34fa:	2d 81       	ldd	r18, Y+5	; 0x05
    34fc:	3e 81       	ldd	r19, Y+6	; 0x06
    34fe:	22 0f       	add	r18, r18
    3500:	33 1f       	adc	r19, r19
    3502:	2d 5f       	subi	r18, 0xFD	; 253
    3504:	3f 4f       	sbci	r19, 0xFF	; 255
    3506:	ae 01       	movw	r20, r28
    3508:	46 5f       	subi	r20, 0xF6	; 246
    350a:	5f 4f       	sbci	r21, 0xFF	; 255
    350c:	24 0f       	add	r18, r20
    350e:	35 1f       	adc	r19, r21
    3510:	f9 01       	movw	r30, r18
    3512:	20 81       	ld	r18, Z
    3514:	62 2f       	mov	r22, r18
    3516:	47 e0       	ldi	r20, 0x07	; 7
    3518:	50 e0       	ldi	r21, 0x00	; 0
    351a:	2f 81       	ldd	r18, Y+7	; 0x07
    351c:	38 85       	ldd	r19, Y+8	; 0x08
    351e:	fa 01       	movw	r30, r20
    3520:	e2 1b       	sub	r30, r18
    3522:	f3 0b       	sbc	r31, r19
    3524:	9f 01       	movw	r18, r30
    3526:	a9 01       	movw	r20, r18
    3528:	44 0f       	add	r20, r20
    352a:	55 1f       	adc	r21, r21
    352c:	23 e0       	ldi	r18, 0x03	; 3
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	02 c0       	rjmp	.+4      	; 0x3536 <NextTetriminos+0x364>
    3532:	22 0f       	add	r18, r18
    3534:	33 1f       	adc	r19, r19
    3536:	4a 95       	dec	r20
    3538:	e2 f7       	brpl	.-8      	; 0x3532 <NextTetriminos+0x360>
    353a:	26 2b       	or	r18, r22
    353c:	42 2f       	mov	r20, r18
    353e:	9e 01       	movw	r18, r28
    3540:	26 5f       	subi	r18, 0xF6	; 246
    3542:	3f 4f       	sbci	r19, 0xFF	; 255
    3544:	82 0f       	add	r24, r18
    3546:	93 1f       	adc	r25, r19
    3548:	fc 01       	movw	r30, r24
    354a:	40 83       	st	Z, r20
	}


	for(int i = 0;i < 8; i++)
	{
		for(int j = 0; j < 8; j++)
    354c:	8f 81       	ldd	r24, Y+7	; 0x07
    354e:	98 85       	ldd	r25, Y+8	; 0x08
    3550:	01 96       	adiw	r24, 0x01	; 1
    3552:	98 87       	std	Y+8, r25	; 0x08
    3554:	8f 83       	std	Y+7, r24	; 0x07
    3556:	8f 81       	ldd	r24, Y+7	; 0x07
    3558:	98 85       	ldd	r25, Y+8	; 0x08
    355a:	08 97       	sbiw	r24, 0x08	; 8
    355c:	0c f4       	brge	.+2      	; 0x3560 <NextTetriminos+0x38e>
    355e:	25 cf       	rjmp	.-438    	; 0x33aa <NextTetriminos+0x1d8>
		MAP[0][i] |= 0x01;
		MAP[1][i] |= 0x80;
	}


	for(int i = 0;i < 8; i++)
    3560:	8d 81       	ldd	r24, Y+5	; 0x05
    3562:	9e 81       	ldd	r25, Y+6	; 0x06
    3564:	01 96       	adiw	r24, 0x01	; 1
    3566:	9e 83       	std	Y+6, r25	; 0x06
    3568:	8d 83       	std	Y+5, r24	; 0x05
    356a:	8d 81       	ldd	r24, Y+5	; 0x05
    356c:	9e 81       	ldd	r25, Y+6	; 0x06
    356e:	08 97       	sbiw	r24, 0x08	; 8
    3570:	0c f4       	brge	.+2      	; 0x3574 <NextTetriminos+0x3a2>
    3572:	18 cf       	rjmp	.-464    	; 0x33a4 <NextTetriminos+0x1d2>
				}
			}
		}
	}

	for(unsigned char y=0;y<2;y++)
    3574:	19 86       	std	Y+9, r1	; 0x09
    3576:	17 c0       	rjmp	.+46     	; 0x35a6 <NextTetriminos+0x3d4>
	{
		ssd1306_set_page_start(y);
    3578:	89 85       	ldd	r24, Y+9	; 0x09
    357a:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_data(MAP[y], 128);
    357e:	89 85       	ldd	r24, Y+9	; 0x09
    3580:	88 2f       	mov	r24, r24
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	9e 01       	movw	r18, r28
    3586:	26 5f       	subi	r18, 0xF6	; 246
    3588:	3f 4f       	sbci	r19, 0xFF	; 255
    358a:	96 95       	lsr	r25
    358c:	98 2f       	mov	r25, r24
    358e:	88 27       	eor	r24, r24
    3590:	97 95       	ror	r25
    3592:	87 95       	ror	r24
    3594:	82 0f       	add	r24, r18
    3596:	93 1f       	adc	r25, r19
    3598:	60 e8       	ldi	r22, 0x80	; 128
    359a:	70 e0       	ldi	r23, 0x00	; 0
    359c:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
				}
			}
		}
	}

	for(unsigned char y=0;y<2;y++)
    35a0:	89 85       	ldd	r24, Y+9	; 0x09
    35a2:	8f 5f       	subi	r24, 0xFF	; 255
    35a4:	89 87       	std	Y+9, r24	; 0x09
    35a6:	89 85       	ldd	r24, Y+9	; 0x09
    35a8:	82 30       	cpi	r24, 0x02	; 2
    35aa:	30 f3       	brcs	.-52     	; 0x3578 <NextTetriminos+0x3a6>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(MAP[y], 128);
	}
}
    35ac:	00 00       	nop
    35ae:	c7 5f       	subi	r28, 0xF7	; 247
    35b0:	de 4f       	sbci	r29, 0xFE	; 254
    35b2:	0f b6       	in	r0, 0x3f	; 63
    35b4:	f8 94       	cli
    35b6:	de bf       	out	0x3e, r29	; 62
    35b8:	0f be       	out	0x3f, r0	; 63
    35ba:	cd bf       	out	0x3d, r28	; 61
    35bc:	df 91       	pop	r29
    35be:	cf 91       	pop	r28
    35c0:	08 95       	ret

000035c2 <main>:

int main(void)
{
    35c2:	0f 93       	push	r16
    35c4:	1f 93       	push	r17
    35c6:	cf 93       	push	r28
    35c8:	df 93       	push	r29
    35ca:	cd b7       	in	r28, 0x3d	; 61
    35cc:	de b7       	in	r29, 0x3e	; 62
    35ce:	c4 55       	subi	r28, 0x54	; 84
    35d0:	d1 09       	sbc	r29, r1
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	de bf       	out	0x3e, r29	; 62
    35d8:	0f be       	out	0x3f, r0	; 63
    35da:	cd bf       	out	0x3d, r28	; 61
	char cmd;

	UART_Init();
    35dc:	0e 94 b9 02 	call	0x572	; 0x572 <UART_Init>

	long int val_x;
	long int val_y;
	long int val_ADC_button;
	
	SendCommand(CMD_TF);
    35e0:	89 e0       	ldi	r24, 0x09	; 9
    35e2:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SendCommand>
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	a0 ea       	ldi	r26, 0xA0	; 160
    35ec:	b1 e4       	ldi	r27, 0x41	; 65
    35ee:	89 8f       	std	Y+25, r24	; 0x19
    35f0:	9a 8f       	std	Y+26, r25	; 0x1a
    35f2:	ab 8f       	std	Y+27, r26	; 0x1b
    35f4:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    35f6:	8e 01       	movw	r16, r28
    35f8:	0f 5b       	subi	r16, 0xBF	; 191
    35fa:	1f 4f       	sbci	r17, 0xFF	; 255
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	4a e7       	ldi	r20, 0x7A	; 122
    3602:	55 e4       	ldi	r21, 0x45	; 69
    3604:	69 8d       	ldd	r22, Y+25	; 0x19
    3606:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3608:	8b 8d       	ldd	r24, Y+27	; 0x1b
    360a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    360c:	25 d7       	rcall	.+3658   	; 0x4458 <__mulsf3>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	f8 01       	movw	r30, r16
    3614:	80 83       	st	Z, r24
    3616:	91 83       	std	Z+1, r25	; 0x01
    3618:	a2 83       	std	Z+2, r26	; 0x02
    361a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    361c:	ce 01       	movw	r24, r28
    361e:	8f 5b       	subi	r24, 0xBF	; 191
    3620:	9f 4f       	sbci	r25, 0xFF	; 255
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	40 e8       	ldi	r20, 0x80	; 128
    3628:	5f e3       	ldi	r21, 0x3F	; 63
    362a:	fc 01       	movw	r30, r24
    362c:	60 81       	ld	r22, Z
    362e:	71 81       	ldd	r23, Z+1	; 0x01
    3630:	82 81       	ldd	r24, Z+2	; 0x02
    3632:	93 81       	ldd	r25, Z+3	; 0x03
    3634:	90 d6       	rcall	.+3360   	; 0x4356 <__cmpsf2>
    3636:	88 23       	and	r24, r24
    3638:	4c f4       	brge	.+18     	; 0x364c <main+0x8a>
		__ticks = 1;
    363a:	ce 01       	movw	r24, r28
    363c:	8b 5b       	subi	r24, 0xBB	; 187
    363e:	9f 4f       	sbci	r25, 0xFF	; 255
    3640:	21 e0       	ldi	r18, 0x01	; 1
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	fc 01       	movw	r30, r24
    3646:	31 83       	std	Z+1, r19	; 0x01
    3648:	20 83       	st	Z, r18
    364a:	65 c0       	rjmp	.+202    	; 0x3716 <main+0x154>
	else if (__tmp > 65535)
    364c:	ce 01       	movw	r24, r28
    364e:	8f 5b       	subi	r24, 0xBF	; 191
    3650:	9f 4f       	sbci	r25, 0xFF	; 255
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	3f ef       	ldi	r19, 0xFF	; 255
    3656:	4f e7       	ldi	r20, 0x7F	; 127
    3658:	57 e4       	ldi	r21, 0x47	; 71
    365a:	fc 01       	movw	r30, r24
    365c:	60 81       	ld	r22, Z
    365e:	71 81       	ldd	r23, Z+1	; 0x01
    3660:	82 81       	ldd	r24, Z+2	; 0x02
    3662:	93 81       	ldd	r25, Z+3	; 0x03
    3664:	f5 d6       	rcall	.+3562   	; 0x4450 <__gesf2>
    3666:	18 16       	cp	r1, r24
    3668:	0c f0       	brlt	.+2      	; 0x366c <main+0xaa>
    366a:	44 c0       	rjmp	.+136    	; 0x36f4 <main+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	40 e2       	ldi	r20, 0x20	; 32
    3672:	51 e4       	ldi	r21, 0x41	; 65
    3674:	69 8d       	ldd	r22, Y+25	; 0x19
    3676:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3678:	8b 8d       	ldd	r24, Y+27	; 0x1b
    367a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    367c:	ed d6       	rcall	.+3546   	; 0x4458 <__mulsf3>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	8e 01       	movw	r16, r28
    3684:	0b 5b       	subi	r16, 0xBB	; 187
    3686:	1f 4f       	sbci	r17, 0xFF	; 255
    3688:	bc 01       	movw	r22, r24
    368a:	cd 01       	movw	r24, r26
    368c:	68 d6       	rcall	.+3280   	; 0x435e <__fixunssfsi>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	f8 01       	movw	r30, r16
    3694:	91 83       	std	Z+1, r25	; 0x01
    3696:	80 83       	st	Z, r24
    3698:	24 c0       	rjmp	.+72     	; 0x36e2 <main+0x120>
    369a:	ce 01       	movw	r24, r28
    369c:	89 5b       	subi	r24, 0xB9	; 185
    369e:	9f 4f       	sbci	r25, 0xFF	; 255
    36a0:	20 e9       	ldi	r18, 0x90	; 144
    36a2:	31 e0       	ldi	r19, 0x01	; 1
    36a4:	fc 01       	movw	r30, r24
    36a6:	31 83       	std	Z+1, r19	; 0x01
    36a8:	20 83       	st	Z, r18
    36aa:	ce 01       	movw	r24, r28
    36ac:	89 5b       	subi	r24, 0xB9	; 185
    36ae:	9f 4f       	sbci	r25, 0xFF	; 255
    36b0:	fc 01       	movw	r30, r24
    36b2:	80 81       	ld	r24, Z
    36b4:	91 81       	ldd	r25, Z+1	; 0x01
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	f1 f7       	brne	.-4      	; 0x36b6 <main+0xf4>
    36ba:	9e 01       	movw	r18, r28
    36bc:	29 5b       	subi	r18, 0xB9	; 185
    36be:	3f 4f       	sbci	r19, 0xFF	; 255
    36c0:	f9 01       	movw	r30, r18
    36c2:	91 83       	std	Z+1, r25	; 0x01
    36c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c6:	ce 01       	movw	r24, r28
    36c8:	8b 5b       	subi	r24, 0xBB	; 187
    36ca:	9f 4f       	sbci	r25, 0xFF	; 255
    36cc:	9e 01       	movw	r18, r28
    36ce:	2b 5b       	subi	r18, 0xBB	; 187
    36d0:	3f 4f       	sbci	r19, 0xFF	; 255
    36d2:	f9 01       	movw	r30, r18
    36d4:	20 81       	ld	r18, Z
    36d6:	31 81       	ldd	r19, Z+1	; 0x01
    36d8:	21 50       	subi	r18, 0x01	; 1
    36da:	31 09       	sbc	r19, r1
    36dc:	fc 01       	movw	r30, r24
    36de:	31 83       	std	Z+1, r19	; 0x01
    36e0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e2:	ce 01       	movw	r24, r28
    36e4:	8b 5b       	subi	r24, 0xBB	; 187
    36e6:	9f 4f       	sbci	r25, 0xFF	; 255
    36e8:	fc 01       	movw	r30, r24
    36ea:	80 81       	ld	r24, Z
    36ec:	91 81       	ldd	r25, Z+1	; 0x01
    36ee:	89 2b       	or	r24, r25
    36f0:	a1 f6       	brne	.-88     	; 0x369a <main+0xd8>
    36f2:	2b c0       	rjmp	.+86     	; 0x374a <main+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f4:	8e 01       	movw	r16, r28
    36f6:	0b 5b       	subi	r16, 0xBB	; 187
    36f8:	1f 4f       	sbci	r17, 0xFF	; 255
    36fa:	ce 01       	movw	r24, r28
    36fc:	8f 5b       	subi	r24, 0xBF	; 191
    36fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3700:	fc 01       	movw	r30, r24
    3702:	60 81       	ld	r22, Z
    3704:	71 81       	ldd	r23, Z+1	; 0x01
    3706:	82 81       	ldd	r24, Z+2	; 0x02
    3708:	93 81       	ldd	r25, Z+3	; 0x03
    370a:	29 d6       	rcall	.+3154   	; 0x435e <__fixunssfsi>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	f8 01       	movw	r30, r16
    3712:	91 83       	std	Z+1, r25	; 0x01
    3714:	80 83       	st	Z, r24
    3716:	ce 01       	movw	r24, r28
    3718:	87 5b       	subi	r24, 0xB7	; 183
    371a:	9f 4f       	sbci	r25, 0xFF	; 255
    371c:	9e 01       	movw	r18, r28
    371e:	2b 5b       	subi	r18, 0xBB	; 187
    3720:	3f 4f       	sbci	r19, 0xFF	; 255
    3722:	f9 01       	movw	r30, r18
    3724:	20 81       	ld	r18, Z
    3726:	31 81       	ldd	r19, Z+1	; 0x01
    3728:	fc 01       	movw	r30, r24
    372a:	31 83       	std	Z+1, r19	; 0x01
    372c:	20 83       	st	Z, r18
    372e:	ce 01       	movw	r24, r28
    3730:	87 5b       	subi	r24, 0xB7	; 183
    3732:	9f 4f       	sbci	r25, 0xFF	; 255
    3734:	fc 01       	movw	r30, r24
    3736:	80 81       	ld	r24, Z
    3738:	91 81       	ldd	r25, Z+1	; 0x01
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	f1 f7       	brne	.-4      	; 0x373a <main+0x178>
    373e:	9e 01       	movw	r18, r28
    3740:	27 5b       	subi	r18, 0xB7	; 183
    3742:	3f 4f       	sbci	r19, 0xFF	; 255
    3744:	f9 01       	movw	r30, r18
    3746:	91 83       	std	Z+1, r25	; 0x01
    3748:	80 83       	st	Z, r24
	_delay_ms(20);
	//SendCommand01(0x06, 0x00, 0x0F);
	//_delay_ms(200);
	SendCommand01(0x0F, 0x01, 0x01);
    374a:	41 e0       	ldi	r20, 0x01	; 1
    374c:	61 e0       	ldi	r22, 0x01	; 1
    374e:	8f e0       	ldi	r24, 0x0F	; 15
    3750:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	a8 e4       	ldi	r26, 0x48	; 72
    375a:	b3 e4       	ldi	r27, 0x43	; 67
    375c:	8d 8f       	std	Y+29, r24	; 0x1d
    375e:	9e 8f       	std	Y+30, r25	; 0x1e
    3760:	af 8f       	std	Y+31, r26	; 0x1f
    3762:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	4a e7       	ldi	r20, 0x7A	; 122
    376a:	55 e4       	ldi	r21, 0x45	; 69
    376c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    376e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3770:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3772:	98 a1       	ldd	r25, Y+32	; 0x20
    3774:	71 d6       	rcall	.+3298   	; 0x4458 <__mulsf3>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	8f ab       	std	Y+55, r24	; 0x37
    377c:	98 af       	std	Y+56, r25	; 0x38
    377e:	a9 af       	std	Y+57, r26	; 0x39
    3780:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	40 e8       	ldi	r20, 0x80	; 128
    3788:	5f e3       	ldi	r21, 0x3F	; 63
    378a:	6f a9       	ldd	r22, Y+55	; 0x37
    378c:	78 ad       	ldd	r23, Y+56	; 0x38
    378e:	89 ad       	ldd	r24, Y+57	; 0x39
    3790:	9a ad       	ldd	r25, Y+58	; 0x3a
    3792:	e1 d5       	rcall	.+3010   	; 0x4356 <__cmpsf2>
    3794:	88 23       	and	r24, r24
    3796:	2c f4       	brge	.+10     	; 0x37a2 <main+0x1e0>
		__ticks = 1;
    3798:	81 e0       	ldi	r24, 0x01	; 1
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	9c af       	std	Y+60, r25	; 0x3c
    379e:	8b af       	std	Y+59, r24	; 0x3b
    37a0:	3b c0       	rjmp	.+118    	; 0x3818 <main+0x256>
	else if (__tmp > 65535)
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	3f ef       	ldi	r19, 0xFF	; 255
    37a6:	4f e7       	ldi	r20, 0x7F	; 127
    37a8:	57 e4       	ldi	r21, 0x47	; 71
    37aa:	6f a9       	ldd	r22, Y+55	; 0x37
    37ac:	78 ad       	ldd	r23, Y+56	; 0x38
    37ae:	89 ad       	ldd	r24, Y+57	; 0x39
    37b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    37b2:	4e d6       	rcall	.+3228   	; 0x4450 <__gesf2>
    37b4:	18 16       	cp	r1, r24
    37b6:	3c f5       	brge	.+78     	; 0x3806 <main+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	40 e2       	ldi	r20, 0x20	; 32
    37be:	51 e4       	ldi	r21, 0x41	; 65
    37c0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    37c2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    37c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37c6:	98 a1       	ldd	r25, Y+32	; 0x20
    37c8:	47 d6       	rcall	.+3214   	; 0x4458 <__mulsf3>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	bc 01       	movw	r22, r24
    37d0:	cd 01       	movw	r24, r26
    37d2:	c5 d5       	rcall	.+2954   	; 0x435e <__fixunssfsi>
    37d4:	dc 01       	movw	r26, r24
    37d6:	cb 01       	movw	r24, r22
    37d8:	9c af       	std	Y+60, r25	; 0x3c
    37da:	8b af       	std	Y+59, r24	; 0x3b
    37dc:	0f c0       	rjmp	.+30     	; 0x37fc <main+0x23a>
    37de:	80 e9       	ldi	r24, 0x90	; 144
    37e0:	91 e0       	ldi	r25, 0x01	; 1
    37e2:	9e af       	std	Y+62, r25	; 0x3e
    37e4:	8d af       	std	Y+61, r24	; 0x3d
    37e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    37e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    37ea:	01 97       	sbiw	r24, 0x01	; 1
    37ec:	f1 f7       	brne	.-4      	; 0x37ea <main+0x228>
    37ee:	9e af       	std	Y+62, r25	; 0x3e
    37f0:	8d af       	std	Y+61, r24	; 0x3d
    37f2:	8b ad       	ldd	r24, Y+59	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    37f6:	01 97       	sbiw	r24, 0x01	; 1
    37f8:	9c af       	std	Y+60, r25	; 0x3c
    37fa:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    37fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    3800:	89 2b       	or	r24, r25
    3802:	69 f7       	brne	.-38     	; 0x37de <main+0x21c>
    3804:	1d c0       	rjmp	.+58     	; 0x3840 <main+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3806:	6f a9       	ldd	r22, Y+55	; 0x37
    3808:	78 ad       	ldd	r23, Y+56	; 0x38
    380a:	89 ad       	ldd	r24, Y+57	; 0x39
    380c:	9a ad       	ldd	r25, Y+58	; 0x3a
    380e:	a7 d5       	rcall	.+2894   	; 0x435e <__fixunssfsi>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	9c af       	std	Y+60, r25	; 0x3c
    3816:	8b af       	std	Y+59, r24	; 0x3b
    3818:	2b ad       	ldd	r18, Y+59	; 0x3b
    381a:	3c ad       	ldd	r19, Y+60	; 0x3c
    381c:	ce 01       	movw	r24, r28
    381e:	cf 96       	adiw	r24, 0x3f	; 63
    3820:	fc 01       	movw	r30, r24
    3822:	31 83       	std	Z+1, r19	; 0x01
    3824:	20 83       	st	Z, r18
    3826:	ce 01       	movw	r24, r28
    3828:	cf 96       	adiw	r24, 0x3f	; 63
    382a:	fc 01       	movw	r30, r24
    382c:	80 81       	ld	r24, Z
    382e:	91 81       	ldd	r25, Z+1	; 0x01
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	f1 f7       	brne	.-4      	; 0x3830 <main+0x26e>
    3834:	9e 01       	movw	r18, r28
    3836:	21 5c       	subi	r18, 0xC1	; 193
    3838:	3f 4f       	sbci	r19, 0xFF	; 255
    383a:	f9 01       	movw	r30, r18
    383c:	91 83       	std	Z+1, r25	; 0x01
    383e:	80 83       	st	Z, r24
    3840:	83 e5       	ldi	r24, 0x53	; 83
	_delay_ms(200);
	
	TCCR0 = 0x07;	//타이머 카운터 0 1024분주로 켜기
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	27 e0       	ldi	r18, 0x07	; 7
    3846:	fc 01       	movw	r30, r24
    3848:	20 83       	st	Z, r18
    384a:	8f e4       	ldi	r24, 0x4F	; 79

	TCCR1A |= (0 << COM1A0) | (0 << WGM10);	//CTC, OC1A핀 차단
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	2f e4       	ldi	r18, 0x4F	; 79
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	f9 01       	movw	r30, r18
    3854:	20 81       	ld	r18, Z
    3856:	fc 01       	movw	r30, r24
    3858:	20 83       	st	Z, r18
    385a:	8e e4       	ldi	r24, 0x4E	; 78
	TCCR1B |= (1 << WGM12) | (5 << CS10); //CTC, 1024분주
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	2e e4       	ldi	r18, 0x4E	; 78
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	f9 01       	movw	r30, r18
    3864:	20 81       	ld	r18, Z
    3866:	2d 60       	ori	r18, 0x0D	; 13
    3868:	fc 01       	movw	r30, r24
    386a:	20 83       	st	Z, r18
    386c:	8a e4       	ldi	r24, 0x4A	; 74
	OCR1A = 0xFFF;
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	2f ef       	ldi	r18, 0xFF	; 255
    3872:	3f e0       	ldi	r19, 0x0F	; 15
    3874:	fc 01       	movw	r30, r24
    3876:	31 83       	std	Z+1, r19	; 0x01
    3878:	20 83       	st	Z, r18
    387a:	81 e3       	ldi	r24, 0x31	; 49
	

	DDRD = 0x00;	//인터럽트 4,5,6,7 켜기위해 포트 입력으로
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	fc 01       	movw	r30, r24
    3880:	10 82       	st	Z, r1
    3882:	8a e5       	ldi	r24, 0x5A	; 90

	EICRB = (2 << ISC40) | (2 << ISC50) | (2 << ISC60) | (2 << ISC70);
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	2a ea       	ldi	r18, 0xAA	; 170
    3888:	fc 01       	movw	r30, r24
    388a:	20 83       	st	Z, r18
    388c:	8a e6       	ldi	r24, 0x6A	; 106
	
	EICRA = (2 << ISC30);
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	20 e8       	ldi	r18, 0x80	; 128
    3892:	fc 01       	movw	r30, r24
    3894:	20 83       	st	Z, r18
    3896:	89 e5       	ldi	r24, 0x59	; 89

	EIMSK = (1 << INT4) | (1 << INT5) | (1 << INT6) | (1 << INT7);
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	20 ef       	ldi	r18, 0xF0	; 240
    389c:	fc 01       	movw	r30, r24
    389e:	20 83       	st	Z, r18
    38a0:	78 94       	sei

	sei();
    38a2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <setup>

	setup();
    38a6:	8a e1       	ldi	r24, 0x1A	; 26
	draw_picture(KO);
    38a8:	93 e0       	ldi	r25, 0x03	; 3
    38aa:	0e 94 a6 05 	call	0xb4c	; 0xb4c <draw_picture>
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	aa e7       	ldi	r26, 0x7A	; 122
    38b4:	b4 e4       	ldi	r27, 0x44	; 68
    38b6:	89 a7       	std	Y+41, r24	; 0x29
    38b8:	9a a7       	std	Y+42, r25	; 0x2a
    38ba:	ab a7       	std	Y+43, r26	; 0x2b
    38bc:	bc a7       	std	Y+44, r27	; 0x2c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	4a e7       	ldi	r20, 0x7A	; 122
    38c4:	55 e4       	ldi	r21, 0x45	; 69
    38c6:	69 a5       	ldd	r22, Y+41	; 0x29
    38c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    38ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    38cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    38ce:	c4 d5       	rcall	.+2952   	; 0x4458 <__mulsf3>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	8d a7       	std	Y+45, r24	; 0x2d
    38d6:	9e a7       	std	Y+46, r25	; 0x2e
    38d8:	af a7       	std	Y+47, r26	; 0x2f
    38da:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    38dc:	20 e0       	ldi	r18, 0x00	; 0
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	40 e8       	ldi	r20, 0x80	; 128
    38e2:	5f e3       	ldi	r21, 0x3F	; 63
    38e4:	6d a5       	ldd	r22, Y+45	; 0x2d
    38e6:	7e a5       	ldd	r23, Y+46	; 0x2e
    38e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    38ea:	98 a9       	ldd	r25, Y+48	; 0x30
    38ec:	34 d5       	rcall	.+2664   	; 0x4356 <__cmpsf2>
    38ee:	88 23       	and	r24, r24
    38f0:	2c f4       	brge	.+10     	; 0x38fc <main+0x33a>
		__ticks = 1;
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	9a ab       	std	Y+50, r25	; 0x32
    38f8:	89 ab       	std	Y+49, r24	; 0x31
    38fa:	3b c0       	rjmp	.+118    	; 0x3972 <main+0x3b0>
	else if (__tmp > 65535)
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	3f ef       	ldi	r19, 0xFF	; 255
    3900:	4f e7       	ldi	r20, 0x7F	; 127
    3902:	57 e4       	ldi	r21, 0x47	; 71
    3904:	6d a5       	ldd	r22, Y+45	; 0x2d
    3906:	7e a5       	ldd	r23, Y+46	; 0x2e
    3908:	8f a5       	ldd	r24, Y+47	; 0x2f
    390a:	98 a9       	ldd	r25, Y+48	; 0x30
    390c:	a1 d5       	rcall	.+2882   	; 0x4450 <__gesf2>
    390e:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3910:	3c f5       	brge	.+78     	; 0x3960 <main+0x39e>
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	40 e2       	ldi	r20, 0x20	; 32
    3918:	51 e4       	ldi	r21, 0x41	; 65
    391a:	69 a5       	ldd	r22, Y+41	; 0x29
    391c:	7a a5       	ldd	r23, Y+42	; 0x2a
    391e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3920:	9c a5       	ldd	r25, Y+44	; 0x2c
    3922:	9a d5       	rcall	.+2868   	; 0x4458 <__mulsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	bc 01       	movw	r22, r24
    392a:	cd 01       	movw	r24, r26
    392c:	18 d5       	rcall	.+2608   	; 0x435e <__fixunssfsi>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	9a ab       	std	Y+50, r25	; 0x32
    3934:	89 ab       	std	Y+49, r24	; 0x31
    3936:	0f c0       	rjmp	.+30     	; 0x3956 <main+0x394>
    3938:	80 e9       	ldi	r24, 0x90	; 144
    393a:	91 e0       	ldi	r25, 0x01	; 1
    393c:	9c ab       	std	Y+52, r25	; 0x34
    393e:	8b ab       	std	Y+51, r24	; 0x33
    3940:	8b a9       	ldd	r24, Y+51	; 0x33
    3942:	9c a9       	ldd	r25, Y+52	; 0x34
    3944:	01 97       	sbiw	r24, 0x01	; 1
    3946:	f1 f7       	brne	.-4      	; 0x3944 <main+0x382>
    3948:	9c ab       	std	Y+52, r25	; 0x34
    394a:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    394c:	89 a9       	ldd	r24, Y+49	; 0x31
    394e:	9a a9       	ldd	r25, Y+50	; 0x32
    3950:	01 97       	sbiw	r24, 0x01	; 1
    3952:	9a ab       	std	Y+50, r25	; 0x32
    3954:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3956:	89 a9       	ldd	r24, Y+49	; 0x31
    3958:	9a a9       	ldd	r25, Y+50	; 0x32
    395a:	89 2b       	or	r24, r25
    395c:	69 f7       	brne	.-38     	; 0x3938 <main+0x376>
    395e:	13 c0       	rjmp	.+38     	; 0x3986 <main+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3960:	6d a5       	ldd	r22, Y+45	; 0x2d
    3962:	7e a5       	ldd	r23, Y+46	; 0x2e
    3964:	8f a5       	ldd	r24, Y+47	; 0x2f
    3966:	98 a9       	ldd	r25, Y+48	; 0x30
    3968:	fa d4       	rcall	.+2548   	; 0x435e <__fixunssfsi>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	9a ab       	std	Y+50, r25	; 0x32
    3970:	89 ab       	std	Y+49, r24	; 0x31
    3972:	89 a9       	ldd	r24, Y+49	; 0x31
    3974:	9a a9       	ldd	r25, Y+50	; 0x32
    3976:	9e ab       	std	Y+54, r25	; 0x36
    3978:	8d ab       	std	Y+53, r24	; 0x35
    397a:	8d a9       	ldd	r24, Y+53	; 0x35
    397c:	9e a9       	ldd	r25, Y+54	; 0x36
    397e:	01 97       	sbiw	r24, 0x01	; 1
    3980:	f1 f7       	brne	.-4      	; 0x397e <main+0x3bc>
    3982:	9e ab       	std	Y+54, r25	; 0x36
    3984:	8d ab       	std	Y+53, r24	; 0x35
    3986:	0e 94 16 05 	call	0xa2c	; 0xa2c <clear_screen>
	_delay_ms(1000);
	clear_screen();
    398a:	1a 82       	std	Y+2, r1	; 0x02
	for(int i = 0; i < 128; i++)
    398c:	19 82       	std	Y+1, r1	; 0x01
    398e:	1d c0       	rjmp	.+58     	; 0x39ca <main+0x408>
    3990:	82 e0       	ldi	r24, 0x02	; 2
	{
		ssd1306_set_page_start(2);
    3992:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    3996:	89 81       	ldd	r24, Y+1	; 0x01
		ssd1306_set_column_addr(i);
    3998:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    399c:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(horizon1, 1);
    399e:	70 e0       	ldi	r23, 0x00	; 0
    39a0:	88 e0       	ldi	r24, 0x08	; 8
    39a2:	91 e0       	ldi	r25, 0x01	; 1
    39a4:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    39a8:	87 e0       	ldi	r24, 0x07	; 7
		ssd1306_set_page_start(7);
    39aa:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    39ae:	89 81       	ldd	r24, Y+1	; 0x01
		ssd1306_set_column_addr(i);
    39b0:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    39b4:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(horizon2, 1);
    39b6:	70 e0       	ldi	r23, 0x00	; 0
    39b8:	89 e0       	ldi	r24, 0x09	; 9
    39ba:	91 e0       	ldi	r25, 0x01	; 1
    39bc:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    39c0:	89 81       	ldd	r24, Y+1	; 0x01

	setup();
	draw_picture(KO);
	_delay_ms(1000);
	clear_screen();
	for(int i = 0; i < 128; i++)
    39c2:	9a 81       	ldd	r25, Y+2	; 0x02
    39c4:	01 96       	adiw	r24, 0x01	; 1
    39c6:	9a 83       	std	Y+2, r25	; 0x02
    39c8:	89 83       	std	Y+1, r24	; 0x01
    39ca:	89 81       	ldd	r24, Y+1	; 0x01
    39cc:	9a 81       	ldd	r25, Y+2	; 0x02
    39ce:	80 38       	cpi	r24, 0x80	; 128
    39d0:	91 05       	cpc	r25, r1
    39d2:	f4 f2       	brlt	.-68     	; 0x3990 <main+0x3ce>
    39d4:	1c 82       	std	Y+4, r1	; 0x04
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
    39d6:	1b 82       	std	Y+3, r1	; 0x03
    39d8:	1a c0       	rjmp	.+52     	; 0x3a0e <main+0x44c>
    39da:	8b 81       	ldd	r24, Y+3	; 0x03
	{
		ssd1306_set_page_start(i);
    39dc:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    39e0:	80 e0       	ldi	r24, 0x00	; 0
		ssd1306_set_column_addr(0);
    39e2:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    39e6:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(vertical, 1);
    39e8:	70 e0       	ldi	r23, 0x00	; 0
    39ea:	8a e0       	ldi	r24, 0x0A	; 10
    39ec:	91 e0       	ldi	r25, 0x01	; 1
    39ee:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    39f2:	8f e7       	ldi	r24, 0x7F	; 127
		ssd1306_set_column_addr(127);
    39f4:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    39f8:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(vertical, 1);
    39fa:	70 e0       	ldi	r23, 0x00	; 0
    39fc:	8a e0       	ldi	r24, 0x0A	; 10
    39fe:	91 e0       	ldi	r25, 0x01	; 1
    3a00:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    3a04:	8b 81       	ldd	r24, Y+3	; 0x03
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
    3a06:	9c 81       	ldd	r25, Y+4	; 0x04
    3a08:	01 96       	adiw	r24, 0x01	; 1
    3a0a:	9c 83       	std	Y+4, r25	; 0x04
    3a0c:	8b 83       	std	Y+3, r24	; 0x03
    3a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a10:	9c 81       	ldd	r25, Y+4	; 0x04
    3a12:	08 97       	sbiw	r24, 0x08	; 8
    3a14:	14 f3       	brlt	.-60     	; 0x39da <main+0x418>
    3a16:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
		ssd1306_set_column_addr(127);
		ssd1306_data(vertical, 1);
	}
	while(1)
	{
		if(screen == Ready)
    3a1a:	86 30       	cpi	r24, 0x06	; 6
    3a1c:	09 f0       	breq	.+2      	; 0x3a20 <main+0x45e>
    3a1e:	4f c0       	rjmp	.+158    	; 0x3abe <main+0x4fc>
    3a20:	4e e1       	ldi	r20, 0x1E	; 30
		{
			SendCommand01(0x06, 0x00, 0x1E);	//게임 오버로 줄인 볼륨 다시 원상태
    3a22:	60 e0       	ldi	r22, 0x00	; 0
    3a24:	86 e0       	ldi	r24, 0x06	; 6
    3a26:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
    3a2a:	0e 94 16 05 	call	0xa2c	; 0xa2c <clear_screen>
			clear_screen();
    3a2e:	1e 82       	std	Y+6, r1	; 0x06
			for(int i = 0; i < 128; i++)
    3a30:	1d 82       	std	Y+5, r1	; 0x05
    3a32:	1d c0       	rjmp	.+58     	; 0x3a6e <main+0x4ac>
    3a34:	82 e0       	ldi	r24, 0x02	; 2
			{
				ssd1306_set_page_start(2);
    3a36:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05
				ssd1306_set_column_addr(i);
    3a3c:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3a40:	61 e0       	ldi	r22, 0x01	; 1
				ssd1306_data(horizon1, 1);
    3a42:	70 e0       	ldi	r23, 0x00	; 0
    3a44:	88 e0       	ldi	r24, 0x08	; 8
    3a46:	91 e0       	ldi	r25, 0x01	; 1
    3a48:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    3a4c:	87 e0       	ldi	r24, 0x07	; 7
				ssd1306_set_page_start(7);
    3a4e:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    3a52:	8d 81       	ldd	r24, Y+5	; 0x05
				ssd1306_set_column_addr(i);
    3a54:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3a58:	61 e0       	ldi	r22, 0x01	; 1
				ssd1306_data(horizon2, 1);
    3a5a:	70 e0       	ldi	r23, 0x00	; 0
    3a5c:	89 e0       	ldi	r24, 0x09	; 9
    3a5e:	91 e0       	ldi	r25, 0x01	; 1
    3a60:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    3a64:	8d 81       	ldd	r24, Y+5	; 0x05
	{
		if(screen == Ready)
		{
			SendCommand01(0x06, 0x00, 0x1E);	//게임 오버로 줄인 볼륨 다시 원상태
			clear_screen();
			for(int i = 0; i < 128; i++)
    3a66:	9e 81       	ldd	r25, Y+6	; 0x06
    3a68:	01 96       	adiw	r24, 0x01	; 1
    3a6a:	9e 83       	std	Y+6, r25	; 0x06
    3a6c:	8d 83       	std	Y+5, r24	; 0x05
    3a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a70:	9e 81       	ldd	r25, Y+6	; 0x06
    3a72:	80 38       	cpi	r24, 0x80	; 128
    3a74:	91 05       	cpc	r25, r1
    3a76:	f4 f2       	brlt	.-68     	; 0x3a34 <main+0x472>
    3a78:	18 86       	std	Y+8, r1	; 0x08
				ssd1306_data(horizon1, 1);
				ssd1306_set_page_start(7);
				ssd1306_set_column_addr(i);
				ssd1306_data(horizon2, 1);
			}
			for(int i = 0; i < 8; i++)
    3a7a:	1f 82       	std	Y+7, r1	; 0x07
    3a7c:	1a c0       	rjmp	.+52     	; 0x3ab2 <main+0x4f0>
    3a7e:	8f 81       	ldd	r24, Y+7	; 0x07
			{
				ssd1306_set_page_start(i);
    3a80:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    3a84:	80 e0       	ldi	r24, 0x00	; 0
				ssd1306_set_column_addr(0);
    3a86:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3a8a:	61 e0       	ldi	r22, 0x01	; 1
				ssd1306_data(vertical, 1);
    3a8c:	70 e0       	ldi	r23, 0x00	; 0
    3a8e:	8a e0       	ldi	r24, 0x0A	; 10
    3a90:	91 e0       	ldi	r25, 0x01	; 1
    3a92:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    3a96:	8f e7       	ldi	r24, 0x7F	; 127
				ssd1306_set_column_addr(127);
    3a98:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3a9c:	61 e0       	ldi	r22, 0x01	; 1
				ssd1306_data(vertical, 1);
    3a9e:	70 e0       	ldi	r23, 0x00	; 0
    3aa0:	8a e0       	ldi	r24, 0x0A	; 10
    3aa2:	91 e0       	ldi	r25, 0x01	; 1
    3aa4:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    3aa8:	8f 81       	ldd	r24, Y+7	; 0x07
				ssd1306_data(horizon1, 1);
				ssd1306_set_page_start(7);
				ssd1306_set_column_addr(i);
				ssd1306_data(horizon2, 1);
			}
			for(int i = 0; i < 8; i++)
    3aaa:	98 85       	ldd	r25, Y+8	; 0x08
    3aac:	01 96       	adiw	r24, 0x01	; 1
    3aae:	98 87       	std	Y+8, r25	; 0x08
    3ab0:	8f 83       	std	Y+7, r24	; 0x07
    3ab2:	8f 81       	ldd	r24, Y+7	; 0x07
    3ab4:	98 85       	ldd	r25, Y+8	; 0x08
    3ab6:	08 97       	sbiw	r24, 0x08	; 8
    3ab8:	14 f3       	brlt	.-60     	; 0x3a7e <main+0x4bc>
    3aba:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <screen>
				ssd1306_set_column_addr(0);
				ssd1306_data(vertical, 1);
				ssd1306_set_column_addr(127);
				ssd1306_data(vertical, 1);
			}
			screen = Menu_snake;
    3abe:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
		}
		if(screen == Menu_snake)
    3ac2:	88 23       	and	r24, r24
    3ac4:	09 f0       	breq	.+2      	; 0x3ac8 <main+0x506>
    3ac6:	45 c0       	rjmp	.+138    	; 0x3b52 <main+0x590>
    3ac8:	8c ea       	ldi	r24, 0xAC	; 172
		{	
			oled_msg(0, 3, "Myoungmin's GAME");
    3aca:	92 e0       	ldi	r25, 0x02	; 2
    3acc:	89 2f       	mov	r24, r25
    3ace:	8f 93       	push	r24
    3ad0:	8c ea       	ldi	r24, 0xAC	; 172
    3ad2:	92 e0       	ldi	r25, 0x02	; 2
    3ad4:	8f 93       	push	r24
    3ad6:	1f 92       	push	r1
    3ad8:	83 e0       	ldi	r24, 0x03	; 3
    3ada:	8f 93       	push	r24
    3adc:	1f 92       	push	r1
    3ade:	1f 92       	push	r1
    3ae0:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    3ae4:	0f 90       	pop	r0
    3ae6:	0f 90       	pop	r0
    3ae8:	0f 90       	pop	r0
    3aea:	0f 90       	pop	r0
    3aec:	0f 90       	pop	r0
    3aee:	0f 90       	pop	r0
    3af0:	8d eb       	ldi	r24, 0xBD	; 189
			oled_msg(3, 3, ">> SNAKE GAME");
    3af2:	92 e0       	ldi	r25, 0x02	; 2
    3af4:	89 2f       	mov	r24, r25
    3af6:	8f 93       	push	r24
    3af8:	8d eb       	ldi	r24, 0xBD	; 189
    3afa:	92 e0       	ldi	r25, 0x02	; 2
    3afc:	8f 93       	push	r24
    3afe:	1f 92       	push	r1
    3b00:	83 e0       	ldi	r24, 0x03	; 3
    3b02:	8f 93       	push	r24
    3b04:	1f 92       	push	r1
    3b06:	83 e0       	ldi	r24, 0x03	; 3
    3b08:	8f 93       	push	r24
    3b0a:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    3b0e:	0f 90       	pop	r0
    3b10:	0f 90       	pop	r0
    3b12:	0f 90       	pop	r0
    3b14:	0f 90       	pop	r0
    3b16:	0f 90       	pop	r0
    3b18:	0f 90       	pop	r0
    3b1a:	8b ec       	ldi	r24, 0xCB	; 203
			oled_msg(6, 3, "   TETRIS");
    3b1c:	92 e0       	ldi	r25, 0x02	; 2
    3b1e:	89 2f       	mov	r24, r25
    3b20:	8f 93       	push	r24
    3b22:	8b ec       	ldi	r24, 0xCB	; 203
    3b24:	92 e0       	ldi	r25, 0x02	; 2
    3b26:	8f 93       	push	r24
    3b28:	1f 92       	push	r1
    3b2a:	83 e0       	ldi	r24, 0x03	; 3
    3b2c:	8f 93       	push	r24
    3b2e:	1f 92       	push	r1
    3b30:	86 e0       	ldi	r24, 0x06	; 6
    3b32:	8f 93       	push	r24
    3b34:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	0f 90       	pop	r0
    3b42:	0f 90       	pop	r0
    3b44:	80 e0       	ldi	r24, 0x00	; 0
			ssd1306_set_page_start(0);
    3b46:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
			ssd1306_set_column_addr(0);
    3b4c:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3b50:	62 cf       	rjmp	.-316    	; 0x3a16 <main+0x454>
    3b52:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
		}
		else if (screen == Menu_tetris)
    3b56:	81 30       	cpi	r24, 0x01	; 1
    3b58:	09 f0       	breq	.+2      	; 0x3b5c <main+0x59a>
    3b5a:	45 c0       	rjmp	.+138    	; 0x3be6 <main+0x624>
    3b5c:	8c ea       	ldi	r24, 0xAC	; 172
		{		
			oled_msg(0, 3, "Myoungmin's GAME");
    3b5e:	92 e0       	ldi	r25, 0x02	; 2
    3b60:	89 2f       	mov	r24, r25
    3b62:	8f 93       	push	r24
    3b64:	8c ea       	ldi	r24, 0xAC	; 172
    3b66:	92 e0       	ldi	r25, 0x02	; 2
    3b68:	8f 93       	push	r24
    3b6a:	1f 92       	push	r1
    3b6c:	83 e0       	ldi	r24, 0x03	; 3
    3b6e:	8f 93       	push	r24
    3b70:	1f 92       	push	r1
    3b72:	1f 92       	push	r1
    3b74:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    3b78:	0f 90       	pop	r0
    3b7a:	0f 90       	pop	r0
    3b7c:	0f 90       	pop	r0
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
    3b82:	0f 90       	pop	r0
    3b84:	85 ed       	ldi	r24, 0xD5	; 213
			oled_msg(3, 3, "   SNAKE GAME");
    3b86:	92 e0       	ldi	r25, 0x02	; 2
    3b88:	89 2f       	mov	r24, r25
    3b8a:	8f 93       	push	r24
    3b8c:	85 ed       	ldi	r24, 0xD5	; 213
    3b8e:	92 e0       	ldi	r25, 0x02	; 2
    3b90:	8f 93       	push	r24
    3b92:	1f 92       	push	r1
    3b94:	83 e0       	ldi	r24, 0x03	; 3
    3b96:	8f 93       	push	r24
    3b98:	1f 92       	push	r1
    3b9a:	83 e0       	ldi	r24, 0x03	; 3
    3b9c:	8f 93       	push	r24
    3b9e:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    3ba2:	0f 90       	pop	r0
    3ba4:	0f 90       	pop	r0
    3ba6:	0f 90       	pop	r0
    3ba8:	0f 90       	pop	r0
    3baa:	0f 90       	pop	r0
    3bac:	0f 90       	pop	r0
    3bae:	83 ee       	ldi	r24, 0xE3	; 227
			oled_msg(6, 3, ">> TETRIS");
    3bb0:	92 e0       	ldi	r25, 0x02	; 2
    3bb2:	89 2f       	mov	r24, r25
    3bb4:	8f 93       	push	r24
    3bb6:	83 ee       	ldi	r24, 0xE3	; 227
    3bb8:	92 e0       	ldi	r25, 0x02	; 2
    3bba:	8f 93       	push	r24
    3bbc:	1f 92       	push	r1
    3bbe:	83 e0       	ldi	r24, 0x03	; 3
    3bc0:	8f 93       	push	r24
    3bc2:	1f 92       	push	r1
    3bc4:	86 e0       	ldi	r24, 0x06	; 6
    3bc6:	8f 93       	push	r24
    3bc8:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    3bcc:	0f 90       	pop	r0
    3bce:	0f 90       	pop	r0
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
			ssd1306_set_page_start(0);
    3bda:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    3bde:	80 e0       	ldi	r24, 0x00	; 0
			ssd1306_set_column_addr(0);
    3be0:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3be4:	18 cf       	rjmp	.-464    	; 0x3a16 <main+0x454>
    3be6:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
		}
		else if(screen == Play_snake)
    3bea:	82 30       	cpi	r24, 0x02	; 2
    3bec:	09 f0       	breq	.+2      	; 0x3bf0 <main+0x62e>
    3bee:	d7 c1       	rjmp	.+942    	; 0x3f9e <main+0x9dc>
    3bf0:	87 e5       	ldi	r24, 0x57	; 87
		{
			TIMSK |= (0 << OCIE1A);	//타이머 카운터 1 출력비교 A 매치 인터럽트 인에이블
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	27 e5       	ldi	r18, 0x57	; 87
    3bf6:	30 e0       	ldi	r19, 0x00	; 0
    3bf8:	f9 01       	movw	r30, r18
    3bfa:	20 81       	ld	r18, Z
    3bfc:	fc 01       	movw	r30, r24
    3bfe:	20 83       	st	Z, r18
    3c00:	80 e2       	ldi	r24, 0x20	; 32
			x[0] = 32;
    3c02:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <x>
    3c06:	8f e1       	ldi	r24, 0x1F	; 31
			x[1] = 31;
    3c08:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <x+0x1>
    3c0c:	8e e1       	ldi	r24, 0x1E	; 30
			x[2] = 30;
    3c0e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <x+0x2>
    3c12:	8c e0       	ldi	r24, 0x0C	; 12
			y[0] = 12;
    3c14:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <y>
    3c18:	8c e0       	ldi	r24, 0x0C	; 12
			y[1] = 12;
    3c1a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <y+0x1>
    3c1e:	8c e0       	ldi	r24, 0x0C	; 12
			y[2] = 12;
    3c20:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <y+0x2>
    3c24:	83 e0       	ldi	r24, 0x03	; 3

			for(int i = 3; i < 200; i++)
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	9a 87       	std	Y+10, r25	; 0x0a
    3c2a:	89 87       	std	Y+9, r24	; 0x09
    3c2c:	0b c0       	rjmp	.+22     	; 0x3c44 <main+0x682>
    3c2e:	89 85       	ldd	r24, Y+9	; 0x09
			{
				x[i] = 0;
    3c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c32:	85 5f       	subi	r24, 0xF5	; 245
    3c34:	9e 4f       	sbci	r25, 0xFE	; 254
    3c36:	fc 01       	movw	r30, r24
    3c38:	10 82       	st	Z, r1
    3c3a:	89 85       	ldd	r24, Y+9	; 0x09
			x[2] = 30;
			y[0] = 12;
			y[1] = 12;
			y[2] = 12;

			for(int i = 3; i < 200; i++)
    3c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3e:	01 96       	adiw	r24, 0x01	; 1
    3c40:	9a 87       	std	Y+10, r25	; 0x0a
    3c42:	89 87       	std	Y+9, r24	; 0x09
    3c44:	89 85       	ldd	r24, Y+9	; 0x09
    3c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c48:	88 3c       	cpi	r24, 0xC8	; 200
    3c4a:	91 05       	cpc	r25, r1
    3c4c:	84 f3       	brlt	.-32     	; 0x3c2e <main+0x66c>
    3c4e:	83 e0       	ldi	r24, 0x03	; 3
			{
				x[i] = 0;
			}
			for(int i = 3; i < 200; i++)
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	9c 87       	std	Y+12, r25	; 0x0c
    3c54:	8b 87       	std	Y+11, r24	; 0x0b
    3c56:	0b c0       	rjmp	.+22     	; 0x3c6e <main+0x6ac>
    3c58:	8b 85       	ldd	r24, Y+11	; 0x0b
			{
				y[i] = 0;
    3c5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c5c:	8d 52       	subi	r24, 0x2D	; 45
    3c5e:	9e 4f       	sbci	r25, 0xFE	; 254
    3c60:	fc 01       	movw	r30, r24
    3c62:	10 82       	st	Z, r1
    3c64:	8b 85       	ldd	r24, Y+11	; 0x0b

			for(int i = 3; i < 200; i++)
			{
				x[i] = 0;
			}
			for(int i = 3; i < 200; i++)
    3c66:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c68:	01 96       	adiw	r24, 0x01	; 1
    3c6a:	9c 87       	std	Y+12, r25	; 0x0c
    3c6c:	8b 87       	std	Y+11, r24	; 0x0b
    3c6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c70:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c72:	88 3c       	cpi	r24, 0xC8	; 200
    3c74:	91 05       	cpc	r25, r1
    3c76:	84 f3       	brlt	.-32     	; 0x3c58 <main+0x696>
    3c78:	83 e0       	ldi	r24, 0x03	; 3
			{
				y[i] = 0;
			}

			length = 3;
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <length+0x1>
    3c80:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <length>
    3c84:	8d e4       	ldi	r24, 0x4D	; 77
			dir = RIGHT;
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    3c8c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    3c90:	0e 94 16 05 	call	0xa2c	; 0xa2c <clear_screen>

			clear_screen();
    3c94:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <snake_title>

			snake_title();
    3c98:	7c c1       	rjmp	.+760    	; 0x3f92 <main+0x9d0>
			

			while(screen == Play_snake)
    3c9a:	87 e2       	ldi	r24, 0x27	; 39
			{
				ADMUX = (1<<REFS0) | (0 << MUX0);//기준전압 AVCC 사용, ADC0 단극성 입력
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	20 e4       	ldi	r18, 0x40	; 64
    3ca0:	fc 01       	movw	r30, r24
    3ca2:	20 83       	st	Z, r18
    3ca4:	86 e2       	ldi	r24, 0x26	; 38
				ADCSRA = (1<<ADEN) | (1<<ADSC) | (7 << ADPS0);	//ADCSRA = 0x87;// ADEN=1, 16MHz의 128분주 -> 125kHz
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	27 ec       	ldi	r18, 0xC7	; 199
    3caa:	fc 01       	movw	r30, r24
    3cac:	20 83       	st	Z, r18
    3cae:	00 00       	nop
				
				while((ADCSRA & (1<<ADIF)) == 0);	//변환 종료를 기다림
    3cb0:	86 e2       	ldi	r24, 0x26	; 38
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	fc 01       	movw	r30, r24
    3cb6:	80 81       	ld	r24, Z
    3cb8:	88 2f       	mov	r24, r24
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	80 71       	andi	r24, 0x10	; 16
    3cbe:	99 27       	eor	r25, r25
    3cc0:	89 2b       	or	r24, r25
    3cc2:	b1 f3       	breq	.-20     	; 0x3cb0 <main+0x6ee>
    3cc4:	86 e2       	ldi	r24, 0x26	; 38
				ADCSRA |= (1<<ADIF);	//ADIF 플래그를 지움
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	26 e2       	ldi	r18, 0x26	; 38
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	f9 01       	movw	r30, r18
    3cce:	20 81       	ld	r18, Z
    3cd0:	20 61       	ori	r18, 0x10	; 16
    3cd2:	fc 01       	movw	r30, r24
    3cd4:	20 83       	st	Z, r18
    3cd6:	84 e2       	ldi	r24, 0x24	; 36
				
				val_x = ADC;
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	fc 01       	movw	r30, r24
    3cdc:	80 81       	ld	r24, Z
    3cde:	91 81       	ldd	r25, Z+1	; 0x01
    3ce0:	cc 01       	movw	r24, r24
    3ce2:	a0 e0       	ldi	r26, 0x00	; 0
    3ce4:	b0 e0       	ldi	r27, 0x00	; 0
    3ce6:	89 a3       	std	Y+33, r24	; 0x21
    3ce8:	9a a3       	std	Y+34, r25	; 0x22
    3cea:	ab a3       	std	Y+35, r26	; 0x23
    3cec:	bc a3       	std	Y+36, r27	; 0x24
    3cee:	89 a1       	ldd	r24, Y+33	; 0x21
				if(val_x <=100 && dir != LEFT)
    3cf0:	9a a1       	ldd	r25, Y+34	; 0x22
    3cf2:	ab a1       	ldd	r26, Y+35	; 0x23
    3cf4:	bc a1       	ldd	r27, Y+36	; 0x24
    3cf6:	85 36       	cpi	r24, 0x65	; 101
    3cf8:	91 05       	cpc	r25, r1
    3cfa:	a1 05       	cpc	r26, r1
    3cfc:	b1 05       	cpc	r27, r1
    3cfe:	9c f4       	brge	.+38     	; 0x3d26 <main+0x764>
    3d00:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    3d04:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    3d08:	8b 34       	cpi	r24, 0x4B	; 75
    3d0a:	91 05       	cpc	r25, r1
    3d0c:	61 f0       	breq	.+24     	; 0x3d26 <main+0x764>
    3d0e:	43 e0       	ldi	r20, 0x03	; 3
				{
					SendCommand01(0x0F, 0x01, 0x03);
    3d10:	61 e0       	ldi	r22, 0x01	; 1
    3d12:	8f e0       	ldi	r24, 0x0F	; 15
    3d14:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
    3d18:	8d e4       	ldi	r24, 0x4D	; 77
					dir = RIGHT;
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    3d20:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    3d24:	1b c0       	rjmp	.+54     	; 0x3d5c <main+0x79a>
    3d26:	89 a1       	ldd	r24, Y+33	; 0x21
				}
				
				else if(val_x >=800 && dir != RIGHT)
    3d28:	9a a1       	ldd	r25, Y+34	; 0x22
    3d2a:	ab a1       	ldd	r26, Y+35	; 0x23
    3d2c:	bc a1       	ldd	r27, Y+36	; 0x24
    3d2e:	80 32       	cpi	r24, 0x20	; 32
    3d30:	93 40       	sbci	r25, 0x03	; 3
    3d32:	a1 05       	cpc	r26, r1
    3d34:	b1 05       	cpc	r27, r1
    3d36:	94 f0       	brlt	.+36     	; 0x3d5c <main+0x79a>
    3d38:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    3d3c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    3d40:	8d 34       	cpi	r24, 0x4D	; 77
    3d42:	91 05       	cpc	r25, r1
    3d44:	59 f0       	breq	.+22     	; 0x3d5c <main+0x79a>
    3d46:	43 e0       	ldi	r20, 0x03	; 3
				{
					SendCommand01(0x0F, 0x01, 0x03);
    3d48:	61 e0       	ldi	r22, 0x01	; 1
    3d4a:	8f e0       	ldi	r24, 0x0F	; 15
    3d4c:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
    3d50:	8b e4       	ldi	r24, 0x4B	; 75
					dir = LEFT;
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    3d58:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    3d5c:	87 e2       	ldi	r24, 0x27	; 39
				}
				

				ADMUX = (1<<REFS0) | (1 << MUX0);//기준전압 AVCC 사용, ADC1 단극성 입력
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	21 e4       	ldi	r18, 0x41	; 65
    3d62:	fc 01       	movw	r30, r24
    3d64:	20 83       	st	Z, r18
    3d66:	86 e2       	ldi	r24, 0x26	; 38
				ADCSRA = (1<<ADEN) | (1<<ADSC) | (7 << ADPS0);	//ADCSRA = 0x87;// ADEN=1, 16MHz의 128분주 -> 125kHz
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	27 ec       	ldi	r18, 0xC7	; 199
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	20 83       	st	Z, r18
    3d70:	00 00       	nop
				
				while((ADCSRA & (1<<ADIF)) == 0);	//변환 종료를 기다림
    3d72:	86 e2       	ldi	r24, 0x26	; 38
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	fc 01       	movw	r30, r24
    3d78:	80 81       	ld	r24, Z
    3d7a:	88 2f       	mov	r24, r24
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	80 71       	andi	r24, 0x10	; 16
    3d80:	99 27       	eor	r25, r25
    3d82:	89 2b       	or	r24, r25
    3d84:	b1 f3       	breq	.-20     	; 0x3d72 <main+0x7b0>
    3d86:	86 e2       	ldi	r24, 0x26	; 38
				ADCSRA |= (1<<ADIF);	//ADIF 플래그를 지움
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	26 e2       	ldi	r18, 0x26	; 38
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	f9 01       	movw	r30, r18
    3d90:	20 81       	ld	r18, Z
    3d92:	20 61       	ori	r18, 0x10	; 16
    3d94:	fc 01       	movw	r30, r24
    3d96:	20 83       	st	Z, r18
    3d98:	84 e2       	ldi	r24, 0x24	; 36

				val_y = ADC;
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	fc 01       	movw	r30, r24
    3d9e:	80 81       	ld	r24, Z
    3da0:	91 81       	ldd	r25, Z+1	; 0x01
    3da2:	cc 01       	movw	r24, r24
    3da4:	a0 e0       	ldi	r26, 0x00	; 0
    3da6:	b0 e0       	ldi	r27, 0x00	; 0
    3da8:	8d a3       	std	Y+37, r24	; 0x25
    3daa:	9e a3       	std	Y+38, r25	; 0x26
    3dac:	af a3       	std	Y+39, r26	; 0x27
    3dae:	b8 a7       	std	Y+40, r27	; 0x28
    3db0:	8d a1       	ldd	r24, Y+37	; 0x25
				if(val_y >=800 && dir != DOWN)
    3db2:	9e a1       	ldd	r25, Y+38	; 0x26
    3db4:	af a1       	ldd	r26, Y+39	; 0x27
    3db6:	b8 a5       	ldd	r27, Y+40	; 0x28
    3db8:	80 32       	cpi	r24, 0x20	; 32
    3dba:	93 40       	sbci	r25, 0x03	; 3
    3dbc:	a1 05       	cpc	r26, r1
    3dbe:	b1 05       	cpc	r27, r1
    3dc0:	9c f0       	brlt	.+38     	; 0x3de8 <main+0x826>
    3dc2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    3dc6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    3dca:	80 35       	cpi	r24, 0x50	; 80
    3dcc:	91 05       	cpc	r25, r1
    3dce:	61 f0       	breq	.+24     	; 0x3de8 <main+0x826>
    3dd0:	43 e0       	ldi	r20, 0x03	; 3
				{
					SendCommand01(0x0F, 0x01, 0x03);
    3dd2:	61 e0       	ldi	r22, 0x01	; 1
    3dd4:	8f e0       	ldi	r24, 0x0F	; 15
    3dd6:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
    3dda:	88 e4       	ldi	r24, 0x48	; 72
					dir = UP;
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    3de2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    3de6:	1b c0       	rjmp	.+54     	; 0x3e1e <main+0x85c>
    3de8:	8d a1       	ldd	r24, Y+37	; 0x25
				}
				else if(val_y <=100 && dir != UP)
    3dea:	9e a1       	ldd	r25, Y+38	; 0x26
    3dec:	af a1       	ldd	r26, Y+39	; 0x27
    3dee:	b8 a5       	ldd	r27, Y+40	; 0x28
    3df0:	85 36       	cpi	r24, 0x65	; 101
    3df2:	91 05       	cpc	r25, r1
    3df4:	a1 05       	cpc	r26, r1
    3df6:	b1 05       	cpc	r27, r1
    3df8:	94 f4       	brge	.+36     	; 0x3e1e <main+0x85c>
    3dfa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    3dfe:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    3e02:	88 34       	cpi	r24, 0x48	; 72
    3e04:	91 05       	cpc	r25, r1
    3e06:	59 f0       	breq	.+22     	; 0x3e1e <main+0x85c>
    3e08:	43 e0       	ldi	r20, 0x03	; 3
				{
					SendCommand01(0x0F, 0x01, 0x03);
    3e0a:	61 e0       	ldi	r22, 0x01	; 1
    3e0c:	8f e0       	ldi	r24, 0x0F	; 15
    3e0e:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
    3e12:	80 e5       	ldi	r24, 0x50	; 80
					dir = DOWN;
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    3e1a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    3e1e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
				}


				snake_move(dir);
    3e22:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    3e26:	0e 94 70 12 	call	0x24e0	; 0x24e0 <snake_move>
    3e2a:	0e 94 33 10 	call	0x2066	; 0x2066 <snake_draw_map>
				//SendCommand01(0x0F, 0x01, 0x02);
				snake_draw_map();
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	a0 ea       	ldi	r26, 0xA0	; 160
    3e34:	b2 e4       	ldi	r27, 0x42	; 66
    3e36:	8d 8b       	std	Y+21, r24	; 0x15
    3e38:	9e 8b       	std	Y+22, r25	; 0x16
    3e3a:	af 8b       	std	Y+23, r26	; 0x17
    3e3c:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3e3e:	8e 01       	movw	r16, r28
    3e40:	05 5b       	subi	r16, 0xB5	; 181
    3e42:	1f 4f       	sbci	r17, 0xFF	; 255
    3e44:	20 e0       	ldi	r18, 0x00	; 0
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	4a e7       	ldi	r20, 0x7A	; 122
    3e4a:	55 e4       	ldi	r21, 0x45	; 69
    3e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    3e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    3e50:	8f 89       	ldd	r24, Y+23	; 0x17
    3e52:	98 8d       	ldd	r25, Y+24	; 0x18
    3e54:	01 d3       	rcall	.+1538   	; 0x4458 <__mulsf3>
    3e56:	dc 01       	movw	r26, r24
    3e58:	cb 01       	movw	r24, r22
    3e5a:	f8 01       	movw	r30, r16
    3e5c:	80 83       	st	Z, r24
    3e5e:	91 83       	std	Z+1, r25	; 0x01
    3e60:	a2 83       	std	Z+2, r26	; 0x02
    3e62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e64:	ce 01       	movw	r24, r28
    3e66:	85 5b       	subi	r24, 0xB5	; 181
    3e68:	9f 4f       	sbci	r25, 0xFF	; 255
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	40 e8       	ldi	r20, 0x80	; 128
    3e70:	5f e3       	ldi	r21, 0x3F	; 63
    3e72:	fc 01       	movw	r30, r24
    3e74:	60 81       	ld	r22, Z
    3e76:	71 81       	ldd	r23, Z+1	; 0x01
    3e78:	82 81       	ldd	r24, Z+2	; 0x02
    3e7a:	93 81       	ldd	r25, Z+3	; 0x03
    3e7c:	6c d2       	rcall	.+1240   	; 0x4356 <__cmpsf2>
    3e7e:	88 23       	and	r24, r24
    3e80:	4c f4       	brge	.+18     	; 0x3e94 <main+0x8d2>
    3e82:	ce 01       	movw	r24, r28
		__ticks = 1;
    3e84:	81 5b       	subi	r24, 0xB1	; 177
    3e86:	9f 4f       	sbci	r25, 0xFF	; 255
    3e88:	21 e0       	ldi	r18, 0x01	; 1
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	fc 01       	movw	r30, r24
    3e8e:	31 83       	std	Z+1, r19	; 0x01
    3e90:	20 83       	st	Z, r18
    3e92:	65 c0       	rjmp	.+202    	; 0x3f5e <main+0x99c>
	else if (__tmp > 65535)
    3e94:	ce 01       	movw	r24, r28
    3e96:	85 5b       	subi	r24, 0xB5	; 181
    3e98:	9f 4f       	sbci	r25, 0xFF	; 255
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	3f ef       	ldi	r19, 0xFF	; 255
    3e9e:	4f e7       	ldi	r20, 0x7F	; 127
    3ea0:	57 e4       	ldi	r21, 0x47	; 71
    3ea2:	fc 01       	movw	r30, r24
    3ea4:	60 81       	ld	r22, Z
    3ea6:	71 81       	ldd	r23, Z+1	; 0x01
    3ea8:	82 81       	ldd	r24, Z+2	; 0x02
    3eaa:	93 81       	ldd	r25, Z+3	; 0x03
    3eac:	d1 d2       	rcall	.+1442   	; 0x4450 <__gesf2>
    3eae:	18 16       	cp	r1, r24
    3eb0:	0c f0       	brlt	.+2      	; 0x3eb4 <main+0x8f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb2:	44 c0       	rjmp	.+136    	; 0x3f3c <main+0x97a>
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	40 e2       	ldi	r20, 0x20	; 32
    3eba:	51 e4       	ldi	r21, 0x41	; 65
    3ebc:	6d 89       	ldd	r22, Y+21	; 0x15
    3ebe:	7e 89       	ldd	r23, Y+22	; 0x16
    3ec0:	8f 89       	ldd	r24, Y+23	; 0x17
    3ec2:	98 8d       	ldd	r25, Y+24	; 0x18
    3ec4:	c9 d2       	rcall	.+1426   	; 0x4458 <__mulsf3>
    3ec6:	dc 01       	movw	r26, r24
    3ec8:	cb 01       	movw	r24, r22
    3eca:	8e 01       	movw	r16, r28
    3ecc:	01 5b       	subi	r16, 0xB1	; 177
    3ece:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed0:	bc 01       	movw	r22, r24
    3ed2:	cd 01       	movw	r24, r26
    3ed4:	44 d2       	rcall	.+1160   	; 0x435e <__fixunssfsi>
    3ed6:	dc 01       	movw	r26, r24
    3ed8:	cb 01       	movw	r24, r22
    3eda:	f8 01       	movw	r30, r16
    3edc:	91 83       	std	Z+1, r25	; 0x01
    3ede:	80 83       	st	Z, r24
    3ee0:	24 c0       	rjmp	.+72     	; 0x3f2a <main+0x968>
    3ee2:	ce 01       	movw	r24, r28
    3ee4:	8f 5a       	subi	r24, 0xAF	; 175
    3ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee8:	20 e9       	ldi	r18, 0x90	; 144
    3eea:	31 e0       	ldi	r19, 0x01	; 1
    3eec:	fc 01       	movw	r30, r24
    3eee:	31 83       	std	Z+1, r19	; 0x01
    3ef0:	20 83       	st	Z, r18
    3ef2:	ce 01       	movw	r24, r28
    3ef4:	8f 5a       	subi	r24, 0xAF	; 175
    3ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef8:	fc 01       	movw	r30, r24
    3efa:	80 81       	ld	r24, Z
    3efc:	91 81       	ldd	r25, Z+1	; 0x01
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	f1 f7       	brne	.-4      	; 0x3efe <main+0x93c>
    3f02:	9e 01       	movw	r18, r28
    3f04:	2f 5a       	subi	r18, 0xAF	; 175
    3f06:	3f 4f       	sbci	r19, 0xFF	; 255
    3f08:	f9 01       	movw	r30, r18
    3f0a:	91 83       	std	Z+1, r25	; 0x01
    3f0c:	80 83       	st	Z, r24
    3f0e:	ce 01       	movw	r24, r28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f10:	81 5b       	subi	r24, 0xB1	; 177
    3f12:	9f 4f       	sbci	r25, 0xFF	; 255
    3f14:	9e 01       	movw	r18, r28
    3f16:	21 5b       	subi	r18, 0xB1	; 177
    3f18:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1a:	f9 01       	movw	r30, r18
    3f1c:	20 81       	ld	r18, Z
    3f1e:	31 81       	ldd	r19, Z+1	; 0x01
    3f20:	21 50       	subi	r18, 0x01	; 1
    3f22:	31 09       	sbc	r19, r1
    3f24:	fc 01       	movw	r30, r24
    3f26:	31 83       	std	Z+1, r19	; 0x01
    3f28:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f2a:	ce 01       	movw	r24, r28
    3f2c:	81 5b       	subi	r24, 0xB1	; 177
    3f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f30:	fc 01       	movw	r30, r24
    3f32:	80 81       	ld	r24, Z
    3f34:	91 81       	ldd	r25, Z+1	; 0x01
    3f36:	89 2b       	or	r24, r25
    3f38:	a1 f6       	brne	.-88     	; 0x3ee2 <main+0x920>
    3f3a:	2b c0       	rjmp	.+86     	; 0x3f92 <main+0x9d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f3c:	8e 01       	movw	r16, r28
    3f3e:	01 5b       	subi	r16, 0xB1	; 177
    3f40:	1f 4f       	sbci	r17, 0xFF	; 255
    3f42:	ce 01       	movw	r24, r28
    3f44:	85 5b       	subi	r24, 0xB5	; 181
    3f46:	9f 4f       	sbci	r25, 0xFF	; 255
    3f48:	fc 01       	movw	r30, r24
    3f4a:	60 81       	ld	r22, Z
    3f4c:	71 81       	ldd	r23, Z+1	; 0x01
    3f4e:	82 81       	ldd	r24, Z+2	; 0x02
    3f50:	93 81       	ldd	r25, Z+3	; 0x03
    3f52:	05 d2       	rcall	.+1034   	; 0x435e <__fixunssfsi>
    3f54:	dc 01       	movw	r26, r24
    3f56:	cb 01       	movw	r24, r22
    3f58:	f8 01       	movw	r30, r16
    3f5a:	91 83       	std	Z+1, r25	; 0x01
    3f5c:	80 83       	st	Z, r24
    3f5e:	ce 01       	movw	r24, r28
    3f60:	8d 5a       	subi	r24, 0xAD	; 173
    3f62:	9f 4f       	sbci	r25, 0xFF	; 255
    3f64:	9e 01       	movw	r18, r28
    3f66:	21 5b       	subi	r18, 0xB1	; 177
    3f68:	3f 4f       	sbci	r19, 0xFF	; 255
    3f6a:	f9 01       	movw	r30, r18
    3f6c:	20 81       	ld	r18, Z
    3f6e:	31 81       	ldd	r19, Z+1	; 0x01
    3f70:	fc 01       	movw	r30, r24
    3f72:	31 83       	std	Z+1, r19	; 0x01
    3f74:	20 83       	st	Z, r18
    3f76:	ce 01       	movw	r24, r28
    3f78:	8d 5a       	subi	r24, 0xAD	; 173
    3f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f7c:	fc 01       	movw	r30, r24
    3f7e:	80 81       	ld	r24, Z
    3f80:	91 81       	ldd	r25, Z+1	; 0x01
    3f82:	01 97       	sbiw	r24, 0x01	; 1
    3f84:	f1 f7       	brne	.-4      	; 0x3f82 <main+0x9c0>
    3f86:	9e 01       	movw	r18, r28
    3f88:	2d 5a       	subi	r18, 0xAD	; 173
    3f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f8c:	f9 01       	movw	r30, r18
    3f8e:	91 83       	std	Z+1, r25	; 0x01
    3f90:	80 83       	st	Z, r24
    3f92:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
			clear_screen();

			snake_title();
			

			while(screen == Play_snake)
    3f96:	82 30       	cpi	r24, 0x02	; 2
    3f98:	09 f4       	brne	.+2      	; 0x3f9c <main+0x9da>
    3f9a:	7f ce       	rjmp	.-770    	; 0x3c9a <main+0x6d8>
    3f9c:	3c cd       	rjmp	.-1416   	; 0x3a16 <main+0x454>
    3f9e:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
				//SendCommand01(0x0F, 0x01, 0x02);
				snake_draw_map();
				_delay_ms(80);
			}
		}
		else if(screen == Play_tetris)
    3fa2:	83 30       	cpi	r24, 0x03	; 3
    3fa4:	09 f0       	breq	.+2      	; 0x3fa8 <main+0x9e6>
    3fa6:	ca c0       	rjmp	.+404    	; 0x413c <main+0xb7a>
    3fa8:	87 e5       	ldi	r24, 0x57	; 87
		{
			TIMSK |= (1 << OCIE1A);	//타이머 카운터 1 출력비교 A 매치 인터럽트 인에이블
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	27 e5       	ldi	r18, 0x57	; 87
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	f9 01       	movw	r30, r18
    3fb2:	20 81       	ld	r18, Z
    3fb4:	20 61       	ori	r18, 0x10	; 16
    3fb6:	fc 01       	movw	r30, r24
    3fb8:	20 83       	st	Z, r18
    3fba:	1e 86       	std	Y+14, r1	; 0x0e


			for (int i = 0; i < 31; i++ ) main_board[i] = 0x801;	//메인보드 초기화
    3fbc:	1d 86       	std	Y+13, r1	; 0x0d
    3fbe:	17 c0       	rjmp	.+46     	; 0x3fee <main+0xa2c>
    3fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fc4:	88 0f       	add	r24, r24
    3fc6:	99 1f       	adc	r25, r25
    3fc8:	88 0f       	add	r24, r24
    3fca:	99 1f       	adc	r25, r25
    3fcc:	9c 01       	movw	r18, r24
    3fce:	24 56       	subi	r18, 0x64	; 100
    3fd0:	38 4f       	sbci	r19, 0xF8	; 248
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	98 e0       	ldi	r25, 0x08	; 8
    3fd6:	a0 e0       	ldi	r26, 0x00	; 0
    3fd8:	b0 e0       	ldi	r27, 0x00	; 0
    3fda:	f9 01       	movw	r30, r18
    3fdc:	80 83       	st	Z, r24
    3fde:	91 83       	std	Z+1, r25	; 0x01
    3fe0:	a2 83       	std	Z+2, r26	; 0x02
    3fe2:	b3 83       	std	Z+3, r27	; 0x03
    3fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fe8:	01 96       	adiw	r24, 0x01	; 1
    3fea:	9e 87       	std	Y+14, r25	; 0x0e
    3fec:	8d 87       	std	Y+13, r24	; 0x0d
    3fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ff2:	4f 97       	sbiw	r24, 0x1f	; 31
    3ff4:	2c f3       	brlt	.-54     	; 0x3fc0 <main+0x9fe>
    3ff6:	8f ef       	ldi	r24, 0xFF	; 255
			main_board[31] = 0xFFF;
    3ff8:	9f e0       	ldi	r25, 0x0F	; 15
    3ffa:	a0 e0       	ldi	r26, 0x00	; 0
    3ffc:	b0 e0       	ldi	r27, 0x00	; 0
    3ffe:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <main_board+0x7c>
    4002:	90 93 19 08 	sts	0x0819, r25	; 0x800819 <main_board+0x7d>
    4006:	a0 93 1a 08 	sts	0x081A, r26	; 0x80081a <main_board+0x7e>
    400a:	b0 93 1b 08 	sts	0x081B, r27	; 0x80081b <main_board+0x7f>
    400e:	90 c0       	rjmp	.+288    	; 0x4130 <main+0xb6e>




			while(screen == Play_tetris)	//게임종료 플레그가 꺼저있을동안 반복
    4010:	18 8a       	std	Y+16, r1	; 0x10
			{
				for(int i = 0; i < 31; i++)
    4012:	1f 86       	std	Y+15, r1	; 0x0f
    4014:	53 c0       	rjmp	.+166    	; 0x40bc <main+0xafa>
    4016:	8f 85       	ldd	r24, Y+15	; 0x0f
				{
					if(main_board[i] == 0xFFF)
    4018:	98 89       	ldd	r25, Y+16	; 0x10
    401a:	88 0f       	add	r24, r24
    401c:	99 1f       	adc	r25, r25
    401e:	88 0f       	add	r24, r24
    4020:	99 1f       	adc	r25, r25
    4022:	84 56       	subi	r24, 0x64	; 100
    4024:	98 4f       	sbci	r25, 0xF8	; 248
    4026:	fc 01       	movw	r30, r24
    4028:	80 81       	ld	r24, Z
    402a:	91 81       	ldd	r25, Z+1	; 0x01
    402c:	a2 81       	ldd	r26, Z+2	; 0x02
    402e:	b3 81       	ldd	r27, Z+3	; 0x03
    4030:	8f 3f       	cpi	r24, 0xFF	; 255
    4032:	9f 40       	sbci	r25, 0x0F	; 15
    4034:	a1 05       	cpc	r26, r1
    4036:	b1 05       	cpc	r27, r1
    4038:	e1 f5       	brne	.+120    	; 0x40b2 <main+0xaf0>
    403a:	8f 85       	ldd	r24, Y+15	; 0x0f
					//1줄이 모두 완성되어서 깨질 줄이 있는지 확인
					{
						main_board[i] = 0x801;
    403c:	98 89       	ldd	r25, Y+16	; 0x10
    403e:	88 0f       	add	r24, r24
    4040:	99 1f       	adc	r25, r25
    4042:	88 0f       	add	r24, r24
    4044:	99 1f       	adc	r25, r25
    4046:	9c 01       	movw	r18, r24
    4048:	24 56       	subi	r18, 0x64	; 100
    404a:	38 4f       	sbci	r19, 0xF8	; 248
    404c:	81 e0       	ldi	r24, 0x01	; 1
    404e:	98 e0       	ldi	r25, 0x08	; 8
    4050:	a0 e0       	ldi	r26, 0x00	; 0
    4052:	b0 e0       	ldi	r27, 0x00	; 0
    4054:	f9 01       	movw	r30, r18
    4056:	80 83       	st	Z, r24
    4058:	91 83       	std	Z+1, r25	; 0x01
    405a:	a2 83       	std	Z+2, r26	; 0x02
    405c:	b3 83       	std	Z+3, r27	; 0x03
    405e:	8f 85       	ldd	r24, Y+15	; 0x0f
						for(int k = i; k > 0; k--)
    4060:	98 89       	ldd	r25, Y+16	; 0x10
    4062:	9a 8b       	std	Y+18, r25	; 0x12
    4064:	89 8b       	std	Y+17, r24	; 0x11
    4066:	20 c0       	rjmp	.+64     	; 0x40a8 <main+0xae6>
    4068:	89 89       	ldd	r24, Y+17	; 0x11
						{
							main_board[k] = main_board[k - 1];	//깨진 줄의 위에 줄들 아래로 이동(행렬상 열 증가)
    406a:	9a 89       	ldd	r25, Y+18	; 0x12
    406c:	01 97       	sbiw	r24, 0x01	; 1
    406e:	88 0f       	add	r24, r24
    4070:	99 1f       	adc	r25, r25
    4072:	88 0f       	add	r24, r24
    4074:	99 1f       	adc	r25, r25
    4076:	84 56       	subi	r24, 0x64	; 100
    4078:	98 4f       	sbci	r25, 0xF8	; 248
    407a:	fc 01       	movw	r30, r24
    407c:	80 81       	ld	r24, Z
    407e:	91 81       	ldd	r25, Z+1	; 0x01
    4080:	a2 81       	ldd	r26, Z+2	; 0x02
    4082:	b3 81       	ldd	r27, Z+3	; 0x03
    4084:	29 89       	ldd	r18, Y+17	; 0x11
    4086:	3a 89       	ldd	r19, Y+18	; 0x12
    4088:	22 0f       	add	r18, r18
    408a:	33 1f       	adc	r19, r19
    408c:	22 0f       	add	r18, r18
    408e:	33 1f       	adc	r19, r19
    4090:	24 56       	subi	r18, 0x64	; 100
    4092:	38 4f       	sbci	r19, 0xF8	; 248
    4094:	f9 01       	movw	r30, r18
    4096:	80 83       	st	Z, r24
    4098:	91 83       	std	Z+1, r25	; 0x01
    409a:	a2 83       	std	Z+2, r26	; 0x02
    409c:	b3 83       	std	Z+3, r27	; 0x03
    409e:	89 89       	ldd	r24, Y+17	; 0x11
				{
					if(main_board[i] == 0xFFF)
					//1줄이 모두 완성되어서 깨질 줄이 있는지 확인
					{
						main_board[i] = 0x801;
						for(int k = i; k > 0; k--)
    40a0:	9a 89       	ldd	r25, Y+18	; 0x12
    40a2:	01 97       	sbiw	r24, 0x01	; 1
    40a4:	9a 8b       	std	Y+18, r25	; 0x12
    40a6:	89 8b       	std	Y+17, r24	; 0x11
    40a8:	89 89       	ldd	r24, Y+17	; 0x11
    40aa:	9a 89       	ldd	r25, Y+18	; 0x12
    40ac:	18 16       	cp	r1, r24
    40ae:	19 06       	cpc	r1, r25
    40b0:	dc f2       	brlt	.-74     	; 0x4068 <main+0xaa6>
    40b2:	8f 85       	ldd	r24, Y+15	; 0x0f



			while(screen == Play_tetris)	//게임종료 플레그가 꺼저있을동안 반복
			{
				for(int i = 0; i < 31; i++)
    40b4:	98 89       	ldd	r25, Y+16	; 0x10
    40b6:	01 96       	adiw	r24, 0x01	; 1
    40b8:	98 8b       	std	Y+16, r25	; 0x10
    40ba:	8f 87       	std	Y+15, r24	; 0x0f
    40bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    40be:	98 89       	ldd	r25, Y+16	; 0x10
    40c0:	4f 97       	sbiw	r24, 0x1f	; 31
    40c2:	0c f4       	brge	.+2      	; 0x40c6 <main+0xb04>
    40c4:	a8 cf       	rjmp	.-176    	; 0x4016 <main+0xa54>
    40c6:	1c 8a       	std	Y+20, r1	; 0x14
							main_board[k] = main_board[k - 1];	//깨진 줄의 위에 줄들 아래로 이동(행렬상 열 증가)
						}
					}
				}

				for(int i = 0; i < 32; i++)
    40c8:	1b 8a       	std	Y+19, r1	; 0x13
    40ca:	1f c0       	rjmp	.+62     	; 0x410a <main+0xb48>
    40cc:	8b 89       	ldd	r24, Y+19	; 0x13
				{
					game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    40ce:	9c 89       	ldd	r25, Y+20	; 0x14
    40d0:	88 0f       	add	r24, r24
    40d2:	99 1f       	adc	r25, r25
    40d4:	88 0f       	add	r24, r24
    40d6:	99 1f       	adc	r25, r25
    40d8:	84 56       	subi	r24, 0x64	; 100
    40da:	98 4f       	sbci	r25, 0xF8	; 248
    40dc:	fc 01       	movw	r30, r24
    40de:	80 81       	ld	r24, Z
    40e0:	91 81       	ldd	r25, Z+1	; 0x01
    40e2:	a2 81       	ldd	r26, Z+2	; 0x02
    40e4:	b3 81       	ldd	r27, Z+3	; 0x03
    40e6:	2b 89       	ldd	r18, Y+19	; 0x13
    40e8:	3c 89       	ldd	r19, Y+20	; 0x14
    40ea:	22 0f       	add	r18, r18
    40ec:	33 1f       	adc	r19, r19
    40ee:	22 0f       	add	r18, r18
    40f0:	33 1f       	adc	r19, r19
    40f2:	21 5c       	subi	r18, 0xC1	; 193
    40f4:	37 4f       	sbci	r19, 0xF7	; 247
    40f6:	f9 01       	movw	r30, r18
    40f8:	80 83       	st	Z, r24
    40fa:	91 83       	std	Z+1, r25	; 0x01
    40fc:	a2 83       	std	Z+2, r26	; 0x02
    40fe:	b3 83       	std	Z+3, r27	; 0x03
							main_board[k] = main_board[k - 1];	//깨진 줄의 위에 줄들 아래로 이동(행렬상 열 증가)
						}
					}
				}

				for(int i = 0; i < 32; i++)
    4100:	8b 89       	ldd	r24, Y+19	; 0x13
    4102:	9c 89       	ldd	r25, Y+20	; 0x14
    4104:	01 96       	adiw	r24, 0x01	; 1
    4106:	9c 8b       	std	Y+20, r25	; 0x14
    4108:	8b 8b       	std	Y+19, r24	; 0x13
    410a:	8b 89       	ldd	r24, Y+19	; 0x13
    410c:	9c 89       	ldd	r25, Y+20	; 0x14
    410e:	80 97       	sbiw	r24, 0x20	; 32
    4110:	ec f2       	brlt	.-70     	; 0x40cc <main+0xb0a>
				{
					game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
				}
				
				NewTetriminos();	//새로운 테트리미노스 생성
    4112:	0e 94 99 16 	call	0x2d32	; 0x2d32 <NewTetriminos>
				if(screen != Play_tetris) break;
    4116:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    411a:	83 30       	cpi	r24, 0x03	; 3
    411c:	09 f0       	breq	.+2      	; 0x4120 <main+0xb5e>
    411e:	b8 c0       	rjmp	.+368    	; 0x4290 <main+0xcce>
				NextTetriminos();
    4120:	58 d8       	rcall	.-3920   	; 0x31d2 <NextTetriminos>
    4122:	02 c0       	rjmp	.+4      	; 0x4128 <main+0xb66>
				while(new_block == 0)	//새로운 블록 프레그 꺼져있는 동안 반복
    4124:	0e 94 63 14 	call	0x28c6	; 0x28c6 <Tetris_draw_map>
				{
					Tetris_draw_map();	//반영된 변화하는 보드 화면으로 출력
    4128:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <new_block>
				}
				
				NewTetriminos();	//새로운 테트리미노스 생성
				if(screen != Play_tetris) break;
				NextTetriminos();
				while(new_block == 0)	//새로운 블록 프레그 꺼져있는 동안 반복
    412c:	88 23       	and	r24, r24
    412e:	d1 f3       	breq	.-12     	; 0x4124 <main+0xb62>
    4130:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
			main_board[31] = 0xFFF;




			while(screen == Play_tetris)	//게임종료 플레그가 꺼저있을동안 반복
    4134:	83 30       	cpi	r24, 0x03	; 3
    4136:	09 f4       	brne	.+2      	; 0x413a <main+0xb78>
    4138:	6b cf       	rjmp	.-298    	; 0x4010 <main+0xa4e>
    413a:	6d cc       	rjmp	.-1830   	; 0x3a16 <main+0x454>
    413c:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
				{
					Tetris_draw_map();	//반영된 변화하는 보드 화면으로 출력
				}
			}
		}
		else if(screen == Over_snake)
    4140:	84 30       	cpi	r24, 0x04	; 4
    4142:	09 f0       	breq	.+2      	; 0x4146 <main+0xb84>
    4144:	4f c0       	rjmp	.+158    	; 0x41e4 <main+0xc22>
    4146:	0e 94 16 05 	call	0xa2c	; 0xa2c <clear_screen>
		{
			clear_screen();
    414a:	44 c0       	rjmp	.+136    	; 0x41d4 <main+0xc12>
			while(screen == Over_snake)
    414c:	8d ee       	ldi	r24, 0xED	; 237
			{
				oled_msg(0, 5, " SNAKE GAME");
    414e:	92 e0       	ldi	r25, 0x02	; 2
    4150:	89 2f       	mov	r24, r25
    4152:	8f 93       	push	r24
    4154:	8d ee       	ldi	r24, 0xED	; 237
    4156:	92 e0       	ldi	r25, 0x02	; 2
    4158:	8f 93       	push	r24
    415a:	1f 92       	push	r1
    415c:	85 e0       	ldi	r24, 0x05	; 5
    415e:	8f 93       	push	r24
    4160:	1f 92       	push	r1
    4162:	1f 92       	push	r1
    4164:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    4168:	0f 90       	pop	r0
    416a:	0f 90       	pop	r0
    416c:	0f 90       	pop	r0
    416e:	0f 90       	pop	r0
    4170:	0f 90       	pop	r0
    4172:	0f 90       	pop	r0
    4174:	89 ef       	ldi	r24, 0xF9	; 249
				oled_msg(3, 5, "  G A M E ");
    4176:	92 e0       	ldi	r25, 0x02	; 2
    4178:	89 2f       	mov	r24, r25
    417a:	8f 93       	push	r24
    417c:	89 ef       	ldi	r24, 0xF9	; 249
    417e:	92 e0       	ldi	r25, 0x02	; 2
    4180:	8f 93       	push	r24
    4182:	1f 92       	push	r1
    4184:	85 e0       	ldi	r24, 0x05	; 5
    4186:	8f 93       	push	r24
    4188:	1f 92       	push	r1
    418a:	83 e0       	ldi	r24, 0x03	; 3
    418c:	8f 93       	push	r24
    418e:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    4192:	0f 90       	pop	r0
    4194:	0f 90       	pop	r0
    4196:	0f 90       	pop	r0
    4198:	0f 90       	pop	r0
    419a:	0f 90       	pop	r0
    419c:	0f 90       	pop	r0
    419e:	84 e0       	ldi	r24, 0x04	; 4
				oled_msg(6, 5, "  O V E R ");
    41a0:	93 e0       	ldi	r25, 0x03	; 3
    41a2:	89 2f       	mov	r24, r25
    41a4:	8f 93       	push	r24
    41a6:	84 e0       	ldi	r24, 0x04	; 4
    41a8:	93 e0       	ldi	r25, 0x03	; 3
    41aa:	8f 93       	push	r24
    41ac:	1f 92       	push	r1
    41ae:	85 e0       	ldi	r24, 0x05	; 5
    41b0:	8f 93       	push	r24
    41b2:	1f 92       	push	r1
    41b4:	86 e0       	ldi	r24, 0x06	; 6
    41b6:	8f 93       	push	r24
    41b8:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    41bc:	0f 90       	pop	r0
    41be:	0f 90       	pop	r0
    41c0:	0f 90       	pop	r0
    41c2:	0f 90       	pop	r0
    41c4:	0f 90       	pop	r0
    41c6:	0f 90       	pop	r0
    41c8:	80 e0       	ldi	r24, 0x00	; 0
				ssd1306_set_page_start(0);
    41ca:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    41ce:	80 e0       	ldi	r24, 0x00	; 0
				ssd1306_set_column_addr(0);
    41d0:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    41d4:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
			}
		}
		else if(screen == Over_snake)
		{
			clear_screen();
			while(screen == Over_snake)
    41d8:	84 30       	cpi	r24, 0x04	; 4
    41da:	09 f4       	brne	.+2      	; 0x41de <main+0xc1c>
    41dc:	b7 cf       	rjmp	.-146    	; 0x414c <main+0xb8a>
    41de:	0e 94 16 05 	call	0xa2c	; 0xa2c <clear_screen>
				oled_msg(3, 5, "  G A M E ");
				oled_msg(6, 5, "  O V E R ");
				ssd1306_set_page_start(0);
				ssd1306_set_column_addr(0);
			}
			clear_screen();
    41e2:	19 cc       	rjmp	.-1998   	; 0x3a16 <main+0x454>
    41e4:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
		}
		else if(screen == Over_tetris)
    41e8:	85 30       	cpi	r24, 0x05	; 5
    41ea:	09 f0       	breq	.+2      	; 0x41ee <main+0xc2c>
    41ec:	14 cc       	rjmp	.-2008   	; 0x3a16 <main+0x454>
    41ee:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <game_over>
		{
			game_over = 0;
    41f2:	0e 94 16 05 	call	0xa2c	; 0xa2c <clear_screen>
			clear_screen();
    41f6:	44 c0       	rjmp	.+136    	; 0x4280 <main+0xcbe>
			while(screen == Over_tetris)
    41f8:	8f e0       	ldi	r24, 0x0F	; 15
			{
				oled_msg(0, 5, "   TETRIS ");
    41fa:	93 e0       	ldi	r25, 0x03	; 3
    41fc:	89 2f       	mov	r24, r25
    41fe:	8f 93       	push	r24
    4200:	8f e0       	ldi	r24, 0x0F	; 15
    4202:	93 e0       	ldi	r25, 0x03	; 3
    4204:	8f 93       	push	r24
    4206:	1f 92       	push	r1
    4208:	85 e0       	ldi	r24, 0x05	; 5
    420a:	8f 93       	push	r24
    420c:	1f 92       	push	r1
    420e:	1f 92       	push	r1
    4210:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    4214:	0f 90       	pop	r0
    4216:	0f 90       	pop	r0
    4218:	0f 90       	pop	r0
    421a:	0f 90       	pop	r0
    421c:	0f 90       	pop	r0
    421e:	0f 90       	pop	r0
    4220:	89 ef       	ldi	r24, 0xF9	; 249
				oled_msg(3, 5, "  G A M E ");
    4222:	92 e0       	ldi	r25, 0x02	; 2
    4224:	89 2f       	mov	r24, r25
    4226:	8f 93       	push	r24
    4228:	89 ef       	ldi	r24, 0xF9	; 249
    422a:	92 e0       	ldi	r25, 0x02	; 2
    422c:	8f 93       	push	r24
    422e:	1f 92       	push	r1
    4230:	85 e0       	ldi	r24, 0x05	; 5
    4232:	8f 93       	push	r24
    4234:	1f 92       	push	r1
    4236:	83 e0       	ldi	r24, 0x03	; 3
    4238:	8f 93       	push	r24
    423a:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    423e:	0f 90       	pop	r0
    4240:	0f 90       	pop	r0
    4242:	0f 90       	pop	r0
    4244:	0f 90       	pop	r0
    4246:	0f 90       	pop	r0
    4248:	0f 90       	pop	r0
    424a:	84 e0       	ldi	r24, 0x04	; 4
				oled_msg(6, 5, "  O V E R ");
    424c:	93 e0       	ldi	r25, 0x03	; 3
    424e:	89 2f       	mov	r24, r25
    4250:	8f 93       	push	r24
    4252:	84 e0       	ldi	r24, 0x04	; 4
    4254:	93 e0       	ldi	r25, 0x03	; 3
    4256:	8f 93       	push	r24
    4258:	1f 92       	push	r1
    425a:	85 e0       	ldi	r24, 0x05	; 5
    425c:	8f 93       	push	r24
    425e:	1f 92       	push	r1
    4260:	86 e0       	ldi	r24, 0x06	; 6
    4262:	8f 93       	push	r24
    4264:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    4268:	0f 90       	pop	r0
    426a:	0f 90       	pop	r0
    426c:	0f 90       	pop	r0
    426e:	0f 90       	pop	r0
    4270:	0f 90       	pop	r0
    4272:	0f 90       	pop	r0
    4274:	80 e0       	ldi	r24, 0x00	; 0
				ssd1306_set_page_start(0);
    4276:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    427a:	80 e0       	ldi	r24, 0x00	; 0
				ssd1306_set_column_addr(0);
    427c:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    4280:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
		}
		else if(screen == Over_tetris)
		{
			game_over = 0;
			clear_screen();
			while(screen == Over_tetris)
    4284:	85 30       	cpi	r24, 0x05	; 5
    4286:	09 f4       	brne	.+2      	; 0x428a <main+0xcc8>
    4288:	b7 cf       	rjmp	.-146    	; 0x41f8 <main+0xc36>
    428a:	0e 94 16 05 	call	0xa2c	; 0xa2c <clear_screen>
				oled_msg(3, 5, "  G A M E ");
				oled_msg(6, 5, "  O V E R ");
				ssd1306_set_page_start(0);
				ssd1306_set_column_addr(0);
			}
			clear_screen();
    428e:	c3 cb       	rjmp	.-2170   	; 0x3a16 <main+0x454>
    4290:	00 00       	nop
				{
					game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
				}
				
				NewTetriminos();	//새로운 테트리미노스 생성
				if(screen != Play_tetris) break;
    4292:	c1 cb       	rjmp	.-2174   	; 0x3a16 <main+0x454>

00004294 <snake_clear_map>:
				ssd1306_set_page_start(0);
				ssd1306_set_column_addr(0);
			}
			clear_screen();
		}
	}
    4294:	cf 93       	push	r28
}

void snake_clear_map()
{
    4296:	df 93       	push	r29
    4298:	00 d0       	rcall	.+0      	; 0x429a <snake_clear_map+0x6>
    429a:	00 d0       	rcall	.+0      	; 0x429c <snake_clear_map+0x8>
    429c:	00 d0       	rcall	.+0      	; 0x429e <snake_clear_map+0xa>
    429e:	cd b7       	in	r28, 0x3d	; 61
    42a0:	de b7       	in	r29, 0x3e	; 62
	for(int i = 1; i < 127; i++)
    42a2:	81 e0       	ldi	r24, 0x01	; 1
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	9a 83       	std	Y+2, r25	; 0x02
    42a8:	89 83       	std	Y+1, r24	; 0x01
    42aa:	1f c0       	rjmp	.+62     	; 0x42ea <snake_clear_map+0x56>
	{
		
		for(int j = 3; j < 7; j++)
    42ac:	83 e0       	ldi	r24, 0x03	; 3
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	9c 83       	std	Y+4, r25	; 0x04
    42b2:	8b 83       	std	Y+3, r24	; 0x03
    42b4:	11 c0       	rjmp	.+34     	; 0x42d8 <snake_clear_map+0x44>
		{
			ssd1306_set_page_start(j);
    42b6:	8b 81       	ldd	r24, Y+3	; 0x03
    42b8:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
			ssd1306_set_column_addr(i);
    42bc:	89 81       	ldd	r24, Y+1	; 0x01
    42be:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
			ssd1306_data(blank, 1);
    42c2:	61 e0       	ldi	r22, 0x01	; 1
    42c4:	70 e0       	ldi	r23, 0x00	; 0
    42c6:	8b e9       	ldi	r24, 0x9B	; 155
    42c8:	97 e0       	ldi	r25, 0x07	; 7
    42ca:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
void snake_clear_map()
{
	for(int i = 1; i < 127; i++)
	{
		
		for(int j = 3; j < 7; j++)
    42ce:	8b 81       	ldd	r24, Y+3	; 0x03
    42d0:	9c 81       	ldd	r25, Y+4	; 0x04
    42d2:	01 96       	adiw	r24, 0x01	; 1
    42d4:	9c 83       	std	Y+4, r25	; 0x04
    42d6:	8b 83       	std	Y+3, r24	; 0x03
    42d8:	8b 81       	ldd	r24, Y+3	; 0x03
    42da:	9c 81       	ldd	r25, Y+4	; 0x04
    42dc:	07 97       	sbiw	r24, 0x07	; 7
    42de:	5c f3       	brlt	.-42     	; 0x42b6 <snake_clear_map+0x22>
	}
}

void snake_clear_map()
{
	for(int i = 1; i < 127; i++)
    42e0:	89 81       	ldd	r24, Y+1	; 0x01
    42e2:	9a 81       	ldd	r25, Y+2	; 0x02
    42e4:	01 96       	adiw	r24, 0x01	; 1
    42e6:	9a 83       	std	Y+2, r25	; 0x02
    42e8:	89 83       	std	Y+1, r24	; 0x01
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
    42ec:	9a 81       	ldd	r25, Y+2	; 0x02
    42ee:	8f 37       	cpi	r24, 0x7F	; 127
    42f0:	91 05       	cpc	r25, r1
    42f2:	e4 f2       	brlt	.-72     	; 0x42ac <snake_clear_map+0x18>
			ssd1306_set_column_addr(i);
			ssd1306_data(blank, 1);
		}
	}

	for(int i = 1; i < 127; i++)
    42f4:	81 e0       	ldi	r24, 0x01	; 1
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	9e 83       	std	Y+6, r25	; 0x06
    42fa:	8d 83       	std	Y+5, r24	; 0x05
    42fc:	1d c0       	rjmp	.+58     	; 0x4338 <snake_clear_map+0xa4>
	{
		ssd1306_set_page_start(2);
    42fe:	82 e0       	ldi	r24, 0x02	; 2
    4300:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    4304:	8d 81       	ldd	r24, Y+5	; 0x05
    4306:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
		ssd1306_data(horizon1, 1);
    430a:	61 e0       	ldi	r22, 0x01	; 1
    430c:	70 e0       	ldi	r23, 0x00	; 0
    430e:	88 e0       	ldi	r24, 0x08	; 8
    4310:	91 e0       	ldi	r25, 0x01	; 1
    4312:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
		ssd1306_set_page_start(7);
    4316:	87 e0       	ldi	r24, 0x07	; 7
    4318:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    431c:	8d 81       	ldd	r24, Y+5	; 0x05
    431e:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
		ssd1306_data(horizon2, 1);
    4322:	61 e0       	ldi	r22, 0x01	; 1
    4324:	70 e0       	ldi	r23, 0x00	; 0
    4326:	89 e0       	ldi	r24, 0x09	; 9
    4328:	91 e0       	ldi	r25, 0x01	; 1
    432a:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
			ssd1306_set_column_addr(i);
			ssd1306_data(blank, 1);
		}
	}

	for(int i = 1; i < 127; i++)
    432e:	8d 81       	ldd	r24, Y+5	; 0x05
    4330:	9e 81       	ldd	r25, Y+6	; 0x06
    4332:	01 96       	adiw	r24, 0x01	; 1
    4334:	9e 83       	std	Y+6, r25	; 0x06
    4336:	8d 83       	std	Y+5, r24	; 0x05
    4338:	8d 81       	ldd	r24, Y+5	; 0x05
    433a:	9e 81       	ldd	r25, Y+6	; 0x06
    433c:	8f 37       	cpi	r24, 0x7F	; 127
    433e:	91 05       	cpc	r25, r1
    4340:	f4 f2       	brlt	.-68     	; 0x42fe <snake_clear_map+0x6a>
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
    4342:	00 00       	nop
    4344:	26 96       	adiw	r28, 0x06	; 6
    4346:	0f b6       	in	r0, 0x3f	; 63
    4348:	f8 94       	cli
    434a:	de bf       	out	0x3e, r29	; 62
    434c:	0f be       	out	0x3f, r0	; 63
    434e:	cd bf       	out	0x3d, r28	; 61
    4350:	df 91       	pop	r29
    4352:	cf 91       	pop	r28
    4354:	08 95       	ret

00004356 <__cmpsf2>:
    4356:	2f d0       	rcall	.+94     	; 0x43b6 <__fp_cmp>
    4358:	08 f4       	brcc	.+2      	; 0x435c <__cmpsf2+0x6>
    435a:	81 e0       	ldi	r24, 0x01	; 1
    435c:	08 95       	ret

0000435e <__fixunssfsi>:
    435e:	57 d0       	rcall	.+174    	; 0x440e <__fp_splitA>
    4360:	88 f0       	brcs	.+34     	; 0x4384 <__fixunssfsi+0x26>
    4362:	9f 57       	subi	r25, 0x7F	; 127
    4364:	90 f0       	brcs	.+36     	; 0x438a <__fixunssfsi+0x2c>
    4366:	b9 2f       	mov	r27, r25
    4368:	99 27       	eor	r25, r25
    436a:	b7 51       	subi	r27, 0x17	; 23
    436c:	a0 f0       	brcs	.+40     	; 0x4396 <__fixunssfsi+0x38>
    436e:	d1 f0       	breq	.+52     	; 0x43a4 <__fixunssfsi+0x46>
    4370:	66 0f       	add	r22, r22
    4372:	77 1f       	adc	r23, r23
    4374:	88 1f       	adc	r24, r24
    4376:	99 1f       	adc	r25, r25
    4378:	1a f0       	brmi	.+6      	; 0x4380 <__fixunssfsi+0x22>
    437a:	ba 95       	dec	r27
    437c:	c9 f7       	brne	.-14     	; 0x4370 <__fixunssfsi+0x12>
    437e:	12 c0       	rjmp	.+36     	; 0x43a4 <__fixunssfsi+0x46>
    4380:	b1 30       	cpi	r27, 0x01	; 1
    4382:	81 f0       	breq	.+32     	; 0x43a4 <__fixunssfsi+0x46>
    4384:	5e d0       	rcall	.+188    	; 0x4442 <__fp_zero>
    4386:	b1 e0       	ldi	r27, 0x01	; 1
    4388:	08 95       	ret
    438a:	5b c0       	rjmp	.+182    	; 0x4442 <__fp_zero>
    438c:	67 2f       	mov	r22, r23
    438e:	78 2f       	mov	r23, r24
    4390:	88 27       	eor	r24, r24
    4392:	b8 5f       	subi	r27, 0xF8	; 248
    4394:	39 f0       	breq	.+14     	; 0x43a4 <__fixunssfsi+0x46>
    4396:	b9 3f       	cpi	r27, 0xF9	; 249
    4398:	cc f3       	brlt	.-14     	; 0x438c <__fixunssfsi+0x2e>
    439a:	86 95       	lsr	r24
    439c:	77 95       	ror	r23
    439e:	67 95       	ror	r22
    43a0:	b3 95       	inc	r27
    43a2:	d9 f7       	brne	.-10     	; 0x439a <__fixunssfsi+0x3c>
    43a4:	3e f4       	brtc	.+14     	; 0x43b4 <__fixunssfsi+0x56>
    43a6:	90 95       	com	r25
    43a8:	80 95       	com	r24
    43aa:	70 95       	com	r23
    43ac:	61 95       	neg	r22
    43ae:	7f 4f       	sbci	r23, 0xFF	; 255
    43b0:	8f 4f       	sbci	r24, 0xFF	; 255
    43b2:	9f 4f       	sbci	r25, 0xFF	; 255
    43b4:	08 95       	ret

000043b6 <__fp_cmp>:
    43b6:	99 0f       	add	r25, r25
    43b8:	00 08       	sbc	r0, r0
    43ba:	55 0f       	add	r21, r21
    43bc:	aa 0b       	sbc	r26, r26
    43be:	e0 e8       	ldi	r30, 0x80	; 128
    43c0:	fe ef       	ldi	r31, 0xFE	; 254
    43c2:	16 16       	cp	r1, r22
    43c4:	17 06       	cpc	r1, r23
    43c6:	e8 07       	cpc	r30, r24
    43c8:	f9 07       	cpc	r31, r25
    43ca:	c0 f0       	brcs	.+48     	; 0x43fc <__fp_cmp+0x46>
    43cc:	12 16       	cp	r1, r18
    43ce:	13 06       	cpc	r1, r19
    43d0:	e4 07       	cpc	r30, r20
    43d2:	f5 07       	cpc	r31, r21
    43d4:	98 f0       	brcs	.+38     	; 0x43fc <__fp_cmp+0x46>
    43d6:	62 1b       	sub	r22, r18
    43d8:	73 0b       	sbc	r23, r19
    43da:	84 0b       	sbc	r24, r20
    43dc:	95 0b       	sbc	r25, r21
    43de:	39 f4       	brne	.+14     	; 0x43ee <__fp_cmp+0x38>
    43e0:	0a 26       	eor	r0, r26
    43e2:	61 f0       	breq	.+24     	; 0x43fc <__fp_cmp+0x46>
    43e4:	23 2b       	or	r18, r19
    43e6:	24 2b       	or	r18, r20
    43e8:	25 2b       	or	r18, r21
    43ea:	21 f4       	brne	.+8      	; 0x43f4 <__fp_cmp+0x3e>
    43ec:	08 95       	ret
    43ee:	0a 26       	eor	r0, r26
    43f0:	09 f4       	brne	.+2      	; 0x43f4 <__fp_cmp+0x3e>
    43f2:	a1 40       	sbci	r26, 0x01	; 1
    43f4:	a6 95       	lsr	r26
    43f6:	8f ef       	ldi	r24, 0xFF	; 255
    43f8:	81 1d       	adc	r24, r1
    43fa:	81 1d       	adc	r24, r1
    43fc:	08 95       	ret

000043fe <__fp_split3>:
    43fe:	57 fd       	sbrc	r21, 7
    4400:	90 58       	subi	r25, 0x80	; 128
    4402:	44 0f       	add	r20, r20
    4404:	55 1f       	adc	r21, r21
    4406:	59 f0       	breq	.+22     	; 0x441e <__fp_splitA+0x10>
    4408:	5f 3f       	cpi	r21, 0xFF	; 255
    440a:	71 f0       	breq	.+28     	; 0x4428 <__fp_splitA+0x1a>
    440c:	47 95       	ror	r20

0000440e <__fp_splitA>:
    440e:	88 0f       	add	r24, r24
    4410:	97 fb       	bst	r25, 7
    4412:	99 1f       	adc	r25, r25
    4414:	61 f0       	breq	.+24     	; 0x442e <__fp_splitA+0x20>
    4416:	9f 3f       	cpi	r25, 0xFF	; 255
    4418:	79 f0       	breq	.+30     	; 0x4438 <__fp_splitA+0x2a>
    441a:	87 95       	ror	r24
    441c:	08 95       	ret
    441e:	12 16       	cp	r1, r18
    4420:	13 06       	cpc	r1, r19
    4422:	14 06       	cpc	r1, r20
    4424:	55 1f       	adc	r21, r21
    4426:	f2 cf       	rjmp	.-28     	; 0x440c <__fp_split3+0xe>
    4428:	46 95       	lsr	r20
    442a:	f1 df       	rcall	.-30     	; 0x440e <__fp_splitA>
    442c:	08 c0       	rjmp	.+16     	; 0x443e <__fp_splitA+0x30>
    442e:	16 16       	cp	r1, r22
    4430:	17 06       	cpc	r1, r23
    4432:	18 06       	cpc	r1, r24
    4434:	99 1f       	adc	r25, r25
    4436:	f1 cf       	rjmp	.-30     	; 0x441a <__fp_splitA+0xc>
    4438:	86 95       	lsr	r24
    443a:	71 05       	cpc	r23, r1
    443c:	61 05       	cpc	r22, r1
    443e:	08 94       	sec
    4440:	08 95       	ret

00004442 <__fp_zero>:
    4442:	e8 94       	clt

00004444 <__fp_szero>:
    4444:	bb 27       	eor	r27, r27
    4446:	66 27       	eor	r22, r22
    4448:	77 27       	eor	r23, r23
    444a:	cb 01       	movw	r24, r22
    444c:	97 f9       	bld	r25, 7
    444e:	08 95       	ret

00004450 <__gesf2>:
    4450:	b2 df       	rcall	.-156    	; 0x43b6 <__fp_cmp>
    4452:	08 f4       	brcc	.+2      	; 0x4456 <__gesf2+0x6>
    4454:	8f ef       	ldi	r24, 0xFF	; 255
    4456:	08 95       	ret

00004458 <__mulsf3>:
    4458:	0b d0       	rcall	.+22     	; 0x4470 <__mulsf3x>
    445a:	78 c0       	rjmp	.+240    	; 0x454c <__fp_round>
    445c:	69 d0       	rcall	.+210    	; 0x4530 <__fp_pscA>
    445e:	28 f0       	brcs	.+10     	; 0x446a <__mulsf3+0x12>
    4460:	6e d0       	rcall	.+220    	; 0x453e <__fp_pscB>
    4462:	18 f0       	brcs	.+6      	; 0x446a <__mulsf3+0x12>
    4464:	95 23       	and	r25, r21
    4466:	09 f0       	breq	.+2      	; 0x446a <__mulsf3+0x12>
    4468:	5a c0       	rjmp	.+180    	; 0x451e <__fp_inf>
    446a:	5f c0       	rjmp	.+190    	; 0x452a <__fp_nan>
    446c:	11 24       	eor	r1, r1
    446e:	ea cf       	rjmp	.-44     	; 0x4444 <__fp_szero>

00004470 <__mulsf3x>:
    4470:	c6 df       	rcall	.-116    	; 0x43fe <__fp_split3>
    4472:	a0 f3       	brcs	.-24     	; 0x445c <__mulsf3+0x4>

00004474 <__mulsf3_pse>:
    4474:	95 9f       	mul	r25, r21
    4476:	d1 f3       	breq	.-12     	; 0x446c <__mulsf3+0x14>
    4478:	95 0f       	add	r25, r21
    447a:	50 e0       	ldi	r21, 0x00	; 0
    447c:	55 1f       	adc	r21, r21
    447e:	62 9f       	mul	r22, r18
    4480:	f0 01       	movw	r30, r0
    4482:	72 9f       	mul	r23, r18
    4484:	bb 27       	eor	r27, r27
    4486:	f0 0d       	add	r31, r0
    4488:	b1 1d       	adc	r27, r1
    448a:	63 9f       	mul	r22, r19
    448c:	aa 27       	eor	r26, r26
    448e:	f0 0d       	add	r31, r0
    4490:	b1 1d       	adc	r27, r1
    4492:	aa 1f       	adc	r26, r26
    4494:	64 9f       	mul	r22, r20
    4496:	66 27       	eor	r22, r22
    4498:	b0 0d       	add	r27, r0
    449a:	a1 1d       	adc	r26, r1
    449c:	66 1f       	adc	r22, r22
    449e:	82 9f       	mul	r24, r18
    44a0:	22 27       	eor	r18, r18
    44a2:	b0 0d       	add	r27, r0
    44a4:	a1 1d       	adc	r26, r1
    44a6:	62 1f       	adc	r22, r18
    44a8:	73 9f       	mul	r23, r19
    44aa:	b0 0d       	add	r27, r0
    44ac:	a1 1d       	adc	r26, r1
    44ae:	62 1f       	adc	r22, r18
    44b0:	83 9f       	mul	r24, r19
    44b2:	a0 0d       	add	r26, r0
    44b4:	61 1d       	adc	r22, r1
    44b6:	22 1f       	adc	r18, r18
    44b8:	74 9f       	mul	r23, r20
    44ba:	33 27       	eor	r19, r19
    44bc:	a0 0d       	add	r26, r0
    44be:	61 1d       	adc	r22, r1
    44c0:	23 1f       	adc	r18, r19
    44c2:	84 9f       	mul	r24, r20
    44c4:	60 0d       	add	r22, r0
    44c6:	21 1d       	adc	r18, r1
    44c8:	82 2f       	mov	r24, r18
    44ca:	76 2f       	mov	r23, r22
    44cc:	6a 2f       	mov	r22, r26
    44ce:	11 24       	eor	r1, r1
    44d0:	9f 57       	subi	r25, 0x7F	; 127
    44d2:	50 40       	sbci	r21, 0x00	; 0
    44d4:	8a f0       	brmi	.+34     	; 0x44f8 <__mulsf3_pse+0x84>
    44d6:	e1 f0       	breq	.+56     	; 0x4510 <__mulsf3_pse+0x9c>
    44d8:	88 23       	and	r24, r24
    44da:	4a f0       	brmi	.+18     	; 0x44ee <__mulsf3_pse+0x7a>
    44dc:	ee 0f       	add	r30, r30
    44de:	ff 1f       	adc	r31, r31
    44e0:	bb 1f       	adc	r27, r27
    44e2:	66 1f       	adc	r22, r22
    44e4:	77 1f       	adc	r23, r23
    44e6:	88 1f       	adc	r24, r24
    44e8:	91 50       	subi	r25, 0x01	; 1
    44ea:	50 40       	sbci	r21, 0x00	; 0
    44ec:	a9 f7       	brne	.-22     	; 0x44d8 <__mulsf3_pse+0x64>
    44ee:	9e 3f       	cpi	r25, 0xFE	; 254
    44f0:	51 05       	cpc	r21, r1
    44f2:	70 f0       	brcs	.+28     	; 0x4510 <__mulsf3_pse+0x9c>
    44f4:	14 c0       	rjmp	.+40     	; 0x451e <__fp_inf>
    44f6:	a6 cf       	rjmp	.-180    	; 0x4444 <__fp_szero>
    44f8:	5f 3f       	cpi	r21, 0xFF	; 255
    44fa:	ec f3       	brlt	.-6      	; 0x44f6 <__mulsf3_pse+0x82>
    44fc:	98 3e       	cpi	r25, 0xE8	; 232
    44fe:	dc f3       	brlt	.-10     	; 0x44f6 <__mulsf3_pse+0x82>
    4500:	86 95       	lsr	r24
    4502:	77 95       	ror	r23
    4504:	67 95       	ror	r22
    4506:	b7 95       	ror	r27
    4508:	f7 95       	ror	r31
    450a:	e7 95       	ror	r30
    450c:	9f 5f       	subi	r25, 0xFF	; 255
    450e:	c1 f7       	brne	.-16     	; 0x4500 <__mulsf3_pse+0x8c>
    4510:	fe 2b       	or	r31, r30
    4512:	88 0f       	add	r24, r24
    4514:	91 1d       	adc	r25, r1
    4516:	96 95       	lsr	r25
    4518:	87 95       	ror	r24
    451a:	97 f9       	bld	r25, 7
    451c:	08 95       	ret

0000451e <__fp_inf>:
    451e:	97 f9       	bld	r25, 7
    4520:	9f 67       	ori	r25, 0x7F	; 127
    4522:	80 e8       	ldi	r24, 0x80	; 128
    4524:	70 e0       	ldi	r23, 0x00	; 0
    4526:	60 e0       	ldi	r22, 0x00	; 0
    4528:	08 95       	ret

0000452a <__fp_nan>:
    452a:	9f ef       	ldi	r25, 0xFF	; 255
    452c:	80 ec       	ldi	r24, 0xC0	; 192
    452e:	08 95       	ret

00004530 <__fp_pscA>:
    4530:	00 24       	eor	r0, r0
    4532:	0a 94       	dec	r0
    4534:	16 16       	cp	r1, r22
    4536:	17 06       	cpc	r1, r23
    4538:	18 06       	cpc	r1, r24
    453a:	09 06       	cpc	r0, r25
    453c:	08 95       	ret

0000453e <__fp_pscB>:
    453e:	00 24       	eor	r0, r0
    4540:	0a 94       	dec	r0
    4542:	12 16       	cp	r1, r18
    4544:	13 06       	cpc	r1, r19
    4546:	14 06       	cpc	r1, r20
    4548:	05 06       	cpc	r0, r21
    454a:	08 95       	ret

0000454c <__fp_round>:
    454c:	09 2e       	mov	r0, r25
    454e:	03 94       	inc	r0
    4550:	00 0c       	add	r0, r0
    4552:	11 f4       	brne	.+4      	; 0x4558 <__fp_round+0xc>
    4554:	88 23       	and	r24, r24
    4556:	52 f0       	brmi	.+20     	; 0x456c <__fp_round+0x20>
    4558:	bb 0f       	add	r27, r27
    455a:	40 f4       	brcc	.+16     	; 0x456c <__fp_round+0x20>
    455c:	bf 2b       	or	r27, r31
    455e:	11 f4       	brne	.+4      	; 0x4564 <__fp_round+0x18>
    4560:	60 ff       	sbrs	r22, 0
    4562:	04 c0       	rjmp	.+8      	; 0x456c <__fp_round+0x20>
    4564:	6f 5f       	subi	r22, 0xFF	; 255
    4566:	7f 4f       	sbci	r23, 0xFF	; 255
    4568:	8f 4f       	sbci	r24, 0xFF	; 255
    456a:	9f 4f       	sbci	r25, 0xFF	; 255
    456c:	08 95       	ret

0000456e <__divmodhi4>:
    456e:	97 fb       	bst	r25, 7
    4570:	07 2e       	mov	r0, r23
    4572:	16 f4       	brtc	.+4      	; 0x4578 <__divmodhi4+0xa>
    4574:	00 94       	com	r0
    4576:	06 d0       	rcall	.+12     	; 0x4584 <__divmodhi4_neg1>
    4578:	77 fd       	sbrc	r23, 7
    457a:	08 d0       	rcall	.+16     	; 0x458c <__divmodhi4_neg2>
    457c:	0b d0       	rcall	.+22     	; 0x4594 <__udivmodhi4>
    457e:	07 fc       	sbrc	r0, 7
    4580:	05 d0       	rcall	.+10     	; 0x458c <__divmodhi4_neg2>
    4582:	3e f4       	brtc	.+14     	; 0x4592 <__divmodhi4_exit>

00004584 <__divmodhi4_neg1>:
    4584:	90 95       	com	r25
    4586:	81 95       	neg	r24
    4588:	9f 4f       	sbci	r25, 0xFF	; 255
    458a:	08 95       	ret

0000458c <__divmodhi4_neg2>:
    458c:	70 95       	com	r23
    458e:	61 95       	neg	r22
    4590:	7f 4f       	sbci	r23, 0xFF	; 255

00004592 <__divmodhi4_exit>:
    4592:	08 95       	ret

00004594 <__udivmodhi4>:
    4594:	aa 1b       	sub	r26, r26
    4596:	bb 1b       	sub	r27, r27
    4598:	51 e1       	ldi	r21, 0x11	; 17
    459a:	07 c0       	rjmp	.+14     	; 0x45aa <__udivmodhi4_ep>

0000459c <__udivmodhi4_loop>:
    459c:	aa 1f       	adc	r26, r26
    459e:	bb 1f       	adc	r27, r27
    45a0:	a6 17       	cp	r26, r22
    45a2:	b7 07       	cpc	r27, r23
    45a4:	10 f0       	brcs	.+4      	; 0x45aa <__udivmodhi4_ep>
    45a6:	a6 1b       	sub	r26, r22
    45a8:	b7 0b       	sbc	r27, r23

000045aa <__udivmodhi4_ep>:
    45aa:	88 1f       	adc	r24, r24
    45ac:	99 1f       	adc	r25, r25
    45ae:	5a 95       	dec	r21
    45b0:	a9 f7       	brne	.-22     	; 0x459c <__udivmodhi4_loop>
    45b2:	80 95       	com	r24
    45b4:	90 95       	com	r25
    45b6:	bc 01       	movw	r22, r24
    45b8:	cd 01       	movw	r24, r26
    45ba:	08 95       	ret

000045bc <do_rand>:
    45bc:	8f 92       	push	r8
    45be:	9f 92       	push	r9
    45c0:	af 92       	push	r10
    45c2:	bf 92       	push	r11
    45c4:	cf 92       	push	r12
    45c6:	df 92       	push	r13
    45c8:	ef 92       	push	r14
    45ca:	ff 92       	push	r15
    45cc:	cf 93       	push	r28
    45ce:	df 93       	push	r29
    45d0:	ec 01       	movw	r28, r24
    45d2:	68 81       	ld	r22, Y
    45d4:	79 81       	ldd	r23, Y+1	; 0x01
    45d6:	8a 81       	ldd	r24, Y+2	; 0x02
    45d8:	9b 81       	ldd	r25, Y+3	; 0x03
    45da:	61 15       	cp	r22, r1
    45dc:	71 05       	cpc	r23, r1
    45de:	81 05       	cpc	r24, r1
    45e0:	91 05       	cpc	r25, r1
    45e2:	21 f4       	brne	.+8      	; 0x45ec <do_rand+0x30>
    45e4:	64 e2       	ldi	r22, 0x24	; 36
    45e6:	79 ed       	ldi	r23, 0xD9	; 217
    45e8:	8b e5       	ldi	r24, 0x5B	; 91
    45ea:	97 e0       	ldi	r25, 0x07	; 7
    45ec:	2d e1       	ldi	r18, 0x1D	; 29
    45ee:	33 ef       	ldi	r19, 0xF3	; 243
    45f0:	41 e0       	ldi	r20, 0x01	; 1
    45f2:	50 e0       	ldi	r21, 0x00	; 0
    45f4:	0d d3       	rcall	.+1562   	; 0x4c10 <__divmodsi4>
    45f6:	49 01       	movw	r8, r18
    45f8:	5a 01       	movw	r10, r20
    45fa:	9b 01       	movw	r18, r22
    45fc:	ac 01       	movw	r20, r24
    45fe:	a7 ea       	ldi	r26, 0xA7	; 167
    4600:	b1 e4       	ldi	r27, 0x41	; 65
    4602:	22 d3       	rcall	.+1604   	; 0x4c48 <__muluhisi3>
    4604:	6b 01       	movw	r12, r22
    4606:	7c 01       	movw	r14, r24
    4608:	ac ee       	ldi	r26, 0xEC	; 236
    460a:	b4 ef       	ldi	r27, 0xF4	; 244
    460c:	a5 01       	movw	r20, r10
    460e:	94 01       	movw	r18, r8
    4610:	27 d3       	rcall	.+1614   	; 0x4c60 <__mulohisi3>
    4612:	dc 01       	movw	r26, r24
    4614:	cb 01       	movw	r24, r22
    4616:	8c 0d       	add	r24, r12
    4618:	9d 1d       	adc	r25, r13
    461a:	ae 1d       	adc	r26, r14
    461c:	bf 1d       	adc	r27, r15
    461e:	b7 ff       	sbrs	r27, 7
    4620:	03 c0       	rjmp	.+6      	; 0x4628 <do_rand+0x6c>
    4622:	01 97       	sbiw	r24, 0x01	; 1
    4624:	a1 09       	sbc	r26, r1
    4626:	b0 48       	sbci	r27, 0x80	; 128
    4628:	88 83       	st	Y, r24
    462a:	99 83       	std	Y+1, r25	; 0x01
    462c:	aa 83       	std	Y+2, r26	; 0x02
    462e:	bb 83       	std	Y+3, r27	; 0x03
    4630:	9f 77       	andi	r25, 0x7F	; 127
    4632:	df 91       	pop	r29
    4634:	cf 91       	pop	r28
    4636:	ff 90       	pop	r15
    4638:	ef 90       	pop	r14
    463a:	df 90       	pop	r13
    463c:	cf 90       	pop	r12
    463e:	bf 90       	pop	r11
    4640:	af 90       	pop	r10
    4642:	9f 90       	pop	r9
    4644:	8f 90       	pop	r8
    4646:	08 95       	ret

00004648 <rand_r>:
    4648:	b9 cf       	rjmp	.-142    	; 0x45bc <do_rand>

0000464a <rand>:
    464a:	80 e0       	ldi	r24, 0x00	; 0
    464c:	91 e0       	ldi	r25, 0x01	; 1
    464e:	b6 cf       	rjmp	.-148    	; 0x45bc <do_rand>

00004650 <srand>:
    4650:	a0 e0       	ldi	r26, 0x00	; 0
    4652:	b0 e0       	ldi	r27, 0x00	; 0
    4654:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    4658:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    465c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    4660:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    4664:	08 95       	ret

00004666 <vsprintf>:
    4666:	0f 93       	push	r16
    4668:	1f 93       	push	r17
    466a:	cf 93       	push	r28
    466c:	df 93       	push	r29
    466e:	cd b7       	in	r28, 0x3d	; 61
    4670:	de b7       	in	r29, 0x3e	; 62
    4672:	2e 97       	sbiw	r28, 0x0e	; 14
    4674:	0f b6       	in	r0, 0x3f	; 63
    4676:	f8 94       	cli
    4678:	de bf       	out	0x3e, r29	; 62
    467a:	0f be       	out	0x3f, r0	; 63
    467c:	cd bf       	out	0x3d, r28	; 61
    467e:	8c 01       	movw	r16, r24
    4680:	86 e0       	ldi	r24, 0x06	; 6
    4682:	8c 83       	std	Y+4, r24	; 0x04
    4684:	1a 83       	std	Y+2, r17	; 0x02
    4686:	09 83       	std	Y+1, r16	; 0x01
    4688:	8f ef       	ldi	r24, 0xFF	; 255
    468a:	9f e7       	ldi	r25, 0x7F	; 127
    468c:	9e 83       	std	Y+6, r25	; 0x06
    468e:	8d 83       	std	Y+5, r24	; 0x05
    4690:	ce 01       	movw	r24, r28
    4692:	01 96       	adiw	r24, 0x01	; 1
    4694:	10 d0       	rcall	.+32     	; 0x46b6 <vfprintf>
    4696:	ef 81       	ldd	r30, Y+7	; 0x07
    4698:	f8 85       	ldd	r31, Y+8	; 0x08
    469a:	e0 0f       	add	r30, r16
    469c:	f1 1f       	adc	r31, r17
    469e:	10 82       	st	Z, r1
    46a0:	2e 96       	adiw	r28, 0x0e	; 14
    46a2:	0f b6       	in	r0, 0x3f	; 63
    46a4:	f8 94       	cli
    46a6:	de bf       	out	0x3e, r29	; 62
    46a8:	0f be       	out	0x3f, r0	; 63
    46aa:	cd bf       	out	0x3d, r28	; 61
    46ac:	df 91       	pop	r29
    46ae:	cf 91       	pop	r28
    46b0:	1f 91       	pop	r17
    46b2:	0f 91       	pop	r16
    46b4:	08 95       	ret

000046b6 <vfprintf>:
    46b6:	2f 92       	push	r2
    46b8:	3f 92       	push	r3
    46ba:	4f 92       	push	r4
    46bc:	5f 92       	push	r5
    46be:	6f 92       	push	r6
    46c0:	7f 92       	push	r7
    46c2:	8f 92       	push	r8
    46c4:	9f 92       	push	r9
    46c6:	af 92       	push	r10
    46c8:	bf 92       	push	r11
    46ca:	cf 92       	push	r12
    46cc:	df 92       	push	r13
    46ce:	ef 92       	push	r14
    46d0:	ff 92       	push	r15
    46d2:	0f 93       	push	r16
    46d4:	1f 93       	push	r17
    46d6:	cf 93       	push	r28
    46d8:	df 93       	push	r29
    46da:	cd b7       	in	r28, 0x3d	; 61
    46dc:	de b7       	in	r29, 0x3e	; 62
    46de:	2b 97       	sbiw	r28, 0x0b	; 11
    46e0:	0f b6       	in	r0, 0x3f	; 63
    46e2:	f8 94       	cli
    46e4:	de bf       	out	0x3e, r29	; 62
    46e6:	0f be       	out	0x3f, r0	; 63
    46e8:	cd bf       	out	0x3d, r28	; 61
    46ea:	6c 01       	movw	r12, r24
    46ec:	7b 01       	movw	r14, r22
    46ee:	8a 01       	movw	r16, r20
    46f0:	fc 01       	movw	r30, r24
    46f2:	17 82       	std	Z+7, r1	; 0x07
    46f4:	16 82       	std	Z+6, r1	; 0x06
    46f6:	83 81       	ldd	r24, Z+3	; 0x03
    46f8:	81 ff       	sbrs	r24, 1
    46fa:	bf c1       	rjmp	.+894    	; 0x4a7a <vfprintf+0x3c4>
    46fc:	ce 01       	movw	r24, r28
    46fe:	01 96       	adiw	r24, 0x01	; 1
    4700:	3c 01       	movw	r6, r24
    4702:	f6 01       	movw	r30, r12
    4704:	93 81       	ldd	r25, Z+3	; 0x03
    4706:	f7 01       	movw	r30, r14
    4708:	93 fd       	sbrc	r25, 3
    470a:	85 91       	lpm	r24, Z+
    470c:	93 ff       	sbrs	r25, 3
    470e:	81 91       	ld	r24, Z+
    4710:	7f 01       	movw	r14, r30
    4712:	88 23       	and	r24, r24
    4714:	09 f4       	brne	.+2      	; 0x4718 <vfprintf+0x62>
    4716:	ad c1       	rjmp	.+858    	; 0x4a72 <vfprintf+0x3bc>
    4718:	85 32       	cpi	r24, 0x25	; 37
    471a:	39 f4       	brne	.+14     	; 0x472a <vfprintf+0x74>
    471c:	93 fd       	sbrc	r25, 3
    471e:	85 91       	lpm	r24, Z+
    4720:	93 ff       	sbrs	r25, 3
    4722:	81 91       	ld	r24, Z+
    4724:	7f 01       	movw	r14, r30
    4726:	85 32       	cpi	r24, 0x25	; 37
    4728:	21 f4       	brne	.+8      	; 0x4732 <vfprintf+0x7c>
    472a:	b6 01       	movw	r22, r12
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	d6 d1       	rcall	.+940    	; 0x4adc <fputc>
    4730:	e8 cf       	rjmp	.-48     	; 0x4702 <vfprintf+0x4c>
    4732:	91 2c       	mov	r9, r1
    4734:	21 2c       	mov	r2, r1
    4736:	31 2c       	mov	r3, r1
    4738:	ff e1       	ldi	r31, 0x1F	; 31
    473a:	f3 15       	cp	r31, r3
    473c:	d8 f0       	brcs	.+54     	; 0x4774 <vfprintf+0xbe>
    473e:	8b 32       	cpi	r24, 0x2B	; 43
    4740:	79 f0       	breq	.+30     	; 0x4760 <vfprintf+0xaa>
    4742:	38 f4       	brcc	.+14     	; 0x4752 <vfprintf+0x9c>
    4744:	80 32       	cpi	r24, 0x20	; 32
    4746:	79 f0       	breq	.+30     	; 0x4766 <vfprintf+0xb0>
    4748:	83 32       	cpi	r24, 0x23	; 35
    474a:	a1 f4       	brne	.+40     	; 0x4774 <vfprintf+0xbe>
    474c:	23 2d       	mov	r18, r3
    474e:	20 61       	ori	r18, 0x10	; 16
    4750:	1d c0       	rjmp	.+58     	; 0x478c <vfprintf+0xd6>
    4752:	8d 32       	cpi	r24, 0x2D	; 45
    4754:	61 f0       	breq	.+24     	; 0x476e <vfprintf+0xb8>
    4756:	80 33       	cpi	r24, 0x30	; 48
    4758:	69 f4       	brne	.+26     	; 0x4774 <vfprintf+0xbe>
    475a:	23 2d       	mov	r18, r3
    475c:	21 60       	ori	r18, 0x01	; 1
    475e:	16 c0       	rjmp	.+44     	; 0x478c <vfprintf+0xd6>
    4760:	83 2d       	mov	r24, r3
    4762:	82 60       	ori	r24, 0x02	; 2
    4764:	38 2e       	mov	r3, r24
    4766:	e3 2d       	mov	r30, r3
    4768:	e4 60       	ori	r30, 0x04	; 4
    476a:	3e 2e       	mov	r3, r30
    476c:	2a c0       	rjmp	.+84     	; 0x47c2 <vfprintf+0x10c>
    476e:	f3 2d       	mov	r31, r3
    4770:	f8 60       	ori	r31, 0x08	; 8
    4772:	1d c0       	rjmp	.+58     	; 0x47ae <vfprintf+0xf8>
    4774:	37 fc       	sbrc	r3, 7
    4776:	2d c0       	rjmp	.+90     	; 0x47d2 <vfprintf+0x11c>
    4778:	20 ed       	ldi	r18, 0xD0	; 208
    477a:	28 0f       	add	r18, r24
    477c:	2a 30       	cpi	r18, 0x0A	; 10
    477e:	40 f0       	brcs	.+16     	; 0x4790 <vfprintf+0xda>
    4780:	8e 32       	cpi	r24, 0x2E	; 46
    4782:	b9 f4       	brne	.+46     	; 0x47b2 <vfprintf+0xfc>
    4784:	36 fc       	sbrc	r3, 6
    4786:	75 c1       	rjmp	.+746    	; 0x4a72 <vfprintf+0x3bc>
    4788:	23 2d       	mov	r18, r3
    478a:	20 64       	ori	r18, 0x40	; 64
    478c:	32 2e       	mov	r3, r18
    478e:	19 c0       	rjmp	.+50     	; 0x47c2 <vfprintf+0x10c>
    4790:	36 fe       	sbrs	r3, 6
    4792:	06 c0       	rjmp	.+12     	; 0x47a0 <vfprintf+0xea>
    4794:	8a e0       	ldi	r24, 0x0A	; 10
    4796:	98 9e       	mul	r9, r24
    4798:	20 0d       	add	r18, r0
    479a:	11 24       	eor	r1, r1
    479c:	92 2e       	mov	r9, r18
    479e:	11 c0       	rjmp	.+34     	; 0x47c2 <vfprintf+0x10c>
    47a0:	ea e0       	ldi	r30, 0x0A	; 10
    47a2:	2e 9e       	mul	r2, r30
    47a4:	20 0d       	add	r18, r0
    47a6:	11 24       	eor	r1, r1
    47a8:	22 2e       	mov	r2, r18
    47aa:	f3 2d       	mov	r31, r3
    47ac:	f0 62       	ori	r31, 0x20	; 32
    47ae:	3f 2e       	mov	r3, r31
    47b0:	08 c0       	rjmp	.+16     	; 0x47c2 <vfprintf+0x10c>
    47b2:	8c 36       	cpi	r24, 0x6C	; 108
    47b4:	21 f4       	brne	.+8      	; 0x47be <vfprintf+0x108>
    47b6:	83 2d       	mov	r24, r3
    47b8:	80 68       	ori	r24, 0x80	; 128
    47ba:	38 2e       	mov	r3, r24
    47bc:	02 c0       	rjmp	.+4      	; 0x47c2 <vfprintf+0x10c>
    47be:	88 36       	cpi	r24, 0x68	; 104
    47c0:	41 f4       	brne	.+16     	; 0x47d2 <vfprintf+0x11c>
    47c2:	f7 01       	movw	r30, r14
    47c4:	93 fd       	sbrc	r25, 3
    47c6:	85 91       	lpm	r24, Z+
    47c8:	93 ff       	sbrs	r25, 3
    47ca:	81 91       	ld	r24, Z+
    47cc:	7f 01       	movw	r14, r30
    47ce:	81 11       	cpse	r24, r1
    47d0:	b3 cf       	rjmp	.-154    	; 0x4738 <vfprintf+0x82>
    47d2:	98 2f       	mov	r25, r24
    47d4:	9f 7d       	andi	r25, 0xDF	; 223
    47d6:	95 54       	subi	r25, 0x45	; 69
    47d8:	93 30       	cpi	r25, 0x03	; 3
    47da:	28 f4       	brcc	.+10     	; 0x47e6 <vfprintf+0x130>
    47dc:	0c 5f       	subi	r16, 0xFC	; 252
    47de:	1f 4f       	sbci	r17, 0xFF	; 255
    47e0:	9f e3       	ldi	r25, 0x3F	; 63
    47e2:	99 83       	std	Y+1, r25	; 0x01
    47e4:	0d c0       	rjmp	.+26     	; 0x4800 <vfprintf+0x14a>
    47e6:	83 36       	cpi	r24, 0x63	; 99
    47e8:	31 f0       	breq	.+12     	; 0x47f6 <vfprintf+0x140>
    47ea:	83 37       	cpi	r24, 0x73	; 115
    47ec:	71 f0       	breq	.+28     	; 0x480a <vfprintf+0x154>
    47ee:	83 35       	cpi	r24, 0x53	; 83
    47f0:	09 f0       	breq	.+2      	; 0x47f4 <vfprintf+0x13e>
    47f2:	55 c0       	rjmp	.+170    	; 0x489e <vfprintf+0x1e8>
    47f4:	20 c0       	rjmp	.+64     	; 0x4836 <vfprintf+0x180>
    47f6:	f8 01       	movw	r30, r16
    47f8:	80 81       	ld	r24, Z
    47fa:	89 83       	std	Y+1, r24	; 0x01
    47fc:	0e 5f       	subi	r16, 0xFE	; 254
    47fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4800:	88 24       	eor	r8, r8
    4802:	83 94       	inc	r8
    4804:	91 2c       	mov	r9, r1
    4806:	53 01       	movw	r10, r6
    4808:	12 c0       	rjmp	.+36     	; 0x482e <vfprintf+0x178>
    480a:	28 01       	movw	r4, r16
    480c:	f2 e0       	ldi	r31, 0x02	; 2
    480e:	4f 0e       	add	r4, r31
    4810:	51 1c       	adc	r5, r1
    4812:	f8 01       	movw	r30, r16
    4814:	a0 80       	ld	r10, Z
    4816:	b1 80       	ldd	r11, Z+1	; 0x01
    4818:	36 fe       	sbrs	r3, 6
    481a:	03 c0       	rjmp	.+6      	; 0x4822 <vfprintf+0x16c>
    481c:	69 2d       	mov	r22, r9
    481e:	70 e0       	ldi	r23, 0x00	; 0
    4820:	02 c0       	rjmp	.+4      	; 0x4826 <vfprintf+0x170>
    4822:	6f ef       	ldi	r22, 0xFF	; 255
    4824:	7f ef       	ldi	r23, 0xFF	; 255
    4826:	c5 01       	movw	r24, r10
    4828:	4e d1       	rcall	.+668    	; 0x4ac6 <strnlen>
    482a:	4c 01       	movw	r8, r24
    482c:	82 01       	movw	r16, r4
    482e:	f3 2d       	mov	r31, r3
    4830:	ff 77       	andi	r31, 0x7F	; 127
    4832:	3f 2e       	mov	r3, r31
    4834:	15 c0       	rjmp	.+42     	; 0x4860 <vfprintf+0x1aa>
    4836:	28 01       	movw	r4, r16
    4838:	22 e0       	ldi	r18, 0x02	; 2
    483a:	42 0e       	add	r4, r18
    483c:	51 1c       	adc	r5, r1
    483e:	f8 01       	movw	r30, r16
    4840:	a0 80       	ld	r10, Z
    4842:	b1 80       	ldd	r11, Z+1	; 0x01
    4844:	36 fe       	sbrs	r3, 6
    4846:	03 c0       	rjmp	.+6      	; 0x484e <vfprintf+0x198>
    4848:	69 2d       	mov	r22, r9
    484a:	70 e0       	ldi	r23, 0x00	; 0
    484c:	02 c0       	rjmp	.+4      	; 0x4852 <vfprintf+0x19c>
    484e:	6f ef       	ldi	r22, 0xFF	; 255
    4850:	7f ef       	ldi	r23, 0xFF	; 255
    4852:	c5 01       	movw	r24, r10
    4854:	2d d1       	rcall	.+602    	; 0x4ab0 <strnlen_P>
    4856:	4c 01       	movw	r8, r24
    4858:	f3 2d       	mov	r31, r3
    485a:	f0 68       	ori	r31, 0x80	; 128
    485c:	3f 2e       	mov	r3, r31
    485e:	82 01       	movw	r16, r4
    4860:	33 fc       	sbrc	r3, 3
    4862:	19 c0       	rjmp	.+50     	; 0x4896 <vfprintf+0x1e0>
    4864:	82 2d       	mov	r24, r2
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	88 16       	cp	r8, r24
    486a:	99 06       	cpc	r9, r25
    486c:	a0 f4       	brcc	.+40     	; 0x4896 <vfprintf+0x1e0>
    486e:	b6 01       	movw	r22, r12
    4870:	80 e2       	ldi	r24, 0x20	; 32
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	33 d1       	rcall	.+614    	; 0x4adc <fputc>
    4876:	2a 94       	dec	r2
    4878:	f5 cf       	rjmp	.-22     	; 0x4864 <vfprintf+0x1ae>
    487a:	f5 01       	movw	r30, r10
    487c:	37 fc       	sbrc	r3, 7
    487e:	85 91       	lpm	r24, Z+
    4880:	37 fe       	sbrs	r3, 7
    4882:	81 91       	ld	r24, Z+
    4884:	5f 01       	movw	r10, r30
    4886:	b6 01       	movw	r22, r12
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	28 d1       	rcall	.+592    	; 0x4adc <fputc>
    488c:	21 10       	cpse	r2, r1
    488e:	2a 94       	dec	r2
    4890:	21 e0       	ldi	r18, 0x01	; 1
    4892:	82 1a       	sub	r8, r18
    4894:	91 08       	sbc	r9, r1
    4896:	81 14       	cp	r8, r1
    4898:	91 04       	cpc	r9, r1
    489a:	79 f7       	brne	.-34     	; 0x487a <vfprintf+0x1c4>
    489c:	e1 c0       	rjmp	.+450    	; 0x4a60 <vfprintf+0x3aa>
    489e:	84 36       	cpi	r24, 0x64	; 100
    48a0:	11 f0       	breq	.+4      	; 0x48a6 <vfprintf+0x1f0>
    48a2:	89 36       	cpi	r24, 0x69	; 105
    48a4:	39 f5       	brne	.+78     	; 0x48f4 <vfprintf+0x23e>
    48a6:	f8 01       	movw	r30, r16
    48a8:	37 fe       	sbrs	r3, 7
    48aa:	07 c0       	rjmp	.+14     	; 0x48ba <vfprintf+0x204>
    48ac:	60 81       	ld	r22, Z
    48ae:	71 81       	ldd	r23, Z+1	; 0x01
    48b0:	82 81       	ldd	r24, Z+2	; 0x02
    48b2:	93 81       	ldd	r25, Z+3	; 0x03
    48b4:	0c 5f       	subi	r16, 0xFC	; 252
    48b6:	1f 4f       	sbci	r17, 0xFF	; 255
    48b8:	08 c0       	rjmp	.+16     	; 0x48ca <vfprintf+0x214>
    48ba:	60 81       	ld	r22, Z
    48bc:	71 81       	ldd	r23, Z+1	; 0x01
    48be:	07 2e       	mov	r0, r23
    48c0:	00 0c       	add	r0, r0
    48c2:	88 0b       	sbc	r24, r24
    48c4:	99 0b       	sbc	r25, r25
    48c6:	0e 5f       	subi	r16, 0xFE	; 254
    48c8:	1f 4f       	sbci	r17, 0xFF	; 255
    48ca:	f3 2d       	mov	r31, r3
    48cc:	ff 76       	andi	r31, 0x6F	; 111
    48ce:	3f 2e       	mov	r3, r31
    48d0:	97 ff       	sbrs	r25, 7
    48d2:	09 c0       	rjmp	.+18     	; 0x48e6 <vfprintf+0x230>
    48d4:	90 95       	com	r25
    48d6:	80 95       	com	r24
    48d8:	70 95       	com	r23
    48da:	61 95       	neg	r22
    48dc:	7f 4f       	sbci	r23, 0xFF	; 255
    48de:	8f 4f       	sbci	r24, 0xFF	; 255
    48e0:	9f 4f       	sbci	r25, 0xFF	; 255
    48e2:	f0 68       	ori	r31, 0x80	; 128
    48e4:	3f 2e       	mov	r3, r31
    48e6:	2a e0       	ldi	r18, 0x0A	; 10
    48e8:	30 e0       	ldi	r19, 0x00	; 0
    48ea:	a3 01       	movw	r20, r6
    48ec:	33 d1       	rcall	.+614    	; 0x4b54 <__ultoa_invert>
    48ee:	88 2e       	mov	r8, r24
    48f0:	86 18       	sub	r8, r6
    48f2:	44 c0       	rjmp	.+136    	; 0x497c <vfprintf+0x2c6>
    48f4:	85 37       	cpi	r24, 0x75	; 117
    48f6:	31 f4       	brne	.+12     	; 0x4904 <vfprintf+0x24e>
    48f8:	23 2d       	mov	r18, r3
    48fa:	2f 7e       	andi	r18, 0xEF	; 239
    48fc:	b2 2e       	mov	r11, r18
    48fe:	2a e0       	ldi	r18, 0x0A	; 10
    4900:	30 e0       	ldi	r19, 0x00	; 0
    4902:	25 c0       	rjmp	.+74     	; 0x494e <vfprintf+0x298>
    4904:	93 2d       	mov	r25, r3
    4906:	99 7f       	andi	r25, 0xF9	; 249
    4908:	b9 2e       	mov	r11, r25
    490a:	8f 36       	cpi	r24, 0x6F	; 111
    490c:	c1 f0       	breq	.+48     	; 0x493e <vfprintf+0x288>
    490e:	18 f4       	brcc	.+6      	; 0x4916 <vfprintf+0x260>
    4910:	88 35       	cpi	r24, 0x58	; 88
    4912:	79 f0       	breq	.+30     	; 0x4932 <vfprintf+0x27c>
    4914:	ae c0       	rjmp	.+348    	; 0x4a72 <vfprintf+0x3bc>
    4916:	80 37       	cpi	r24, 0x70	; 112
    4918:	19 f0       	breq	.+6      	; 0x4920 <vfprintf+0x26a>
    491a:	88 37       	cpi	r24, 0x78	; 120
    491c:	21 f0       	breq	.+8      	; 0x4926 <vfprintf+0x270>
    491e:	a9 c0       	rjmp	.+338    	; 0x4a72 <vfprintf+0x3bc>
    4920:	e9 2f       	mov	r30, r25
    4922:	e0 61       	ori	r30, 0x10	; 16
    4924:	be 2e       	mov	r11, r30
    4926:	b4 fe       	sbrs	r11, 4
    4928:	0d c0       	rjmp	.+26     	; 0x4944 <vfprintf+0x28e>
    492a:	fb 2d       	mov	r31, r11
    492c:	f4 60       	ori	r31, 0x04	; 4
    492e:	bf 2e       	mov	r11, r31
    4930:	09 c0       	rjmp	.+18     	; 0x4944 <vfprintf+0x28e>
    4932:	34 fe       	sbrs	r3, 4
    4934:	0a c0       	rjmp	.+20     	; 0x494a <vfprintf+0x294>
    4936:	29 2f       	mov	r18, r25
    4938:	26 60       	ori	r18, 0x06	; 6
    493a:	b2 2e       	mov	r11, r18
    493c:	06 c0       	rjmp	.+12     	; 0x494a <vfprintf+0x294>
    493e:	28 e0       	ldi	r18, 0x08	; 8
    4940:	30 e0       	ldi	r19, 0x00	; 0
    4942:	05 c0       	rjmp	.+10     	; 0x494e <vfprintf+0x298>
    4944:	20 e1       	ldi	r18, 0x10	; 16
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	02 c0       	rjmp	.+4      	; 0x494e <vfprintf+0x298>
    494a:	20 e1       	ldi	r18, 0x10	; 16
    494c:	32 e0       	ldi	r19, 0x02	; 2
    494e:	f8 01       	movw	r30, r16
    4950:	b7 fe       	sbrs	r11, 7
    4952:	07 c0       	rjmp	.+14     	; 0x4962 <vfprintf+0x2ac>
    4954:	60 81       	ld	r22, Z
    4956:	71 81       	ldd	r23, Z+1	; 0x01
    4958:	82 81       	ldd	r24, Z+2	; 0x02
    495a:	93 81       	ldd	r25, Z+3	; 0x03
    495c:	0c 5f       	subi	r16, 0xFC	; 252
    495e:	1f 4f       	sbci	r17, 0xFF	; 255
    4960:	06 c0       	rjmp	.+12     	; 0x496e <vfprintf+0x2b8>
    4962:	60 81       	ld	r22, Z
    4964:	71 81       	ldd	r23, Z+1	; 0x01
    4966:	80 e0       	ldi	r24, 0x00	; 0
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	0e 5f       	subi	r16, 0xFE	; 254
    496c:	1f 4f       	sbci	r17, 0xFF	; 255
    496e:	a3 01       	movw	r20, r6
    4970:	f1 d0       	rcall	.+482    	; 0x4b54 <__ultoa_invert>
    4972:	88 2e       	mov	r8, r24
    4974:	86 18       	sub	r8, r6
    4976:	fb 2d       	mov	r31, r11
    4978:	ff 77       	andi	r31, 0x7F	; 127
    497a:	3f 2e       	mov	r3, r31
    497c:	36 fe       	sbrs	r3, 6
    497e:	0d c0       	rjmp	.+26     	; 0x499a <vfprintf+0x2e4>
    4980:	23 2d       	mov	r18, r3
    4982:	2e 7f       	andi	r18, 0xFE	; 254
    4984:	a2 2e       	mov	r10, r18
    4986:	89 14       	cp	r8, r9
    4988:	58 f4       	brcc	.+22     	; 0x49a0 <vfprintf+0x2ea>
    498a:	34 fe       	sbrs	r3, 4
    498c:	0b c0       	rjmp	.+22     	; 0x49a4 <vfprintf+0x2ee>
    498e:	32 fc       	sbrc	r3, 2
    4990:	09 c0       	rjmp	.+18     	; 0x49a4 <vfprintf+0x2ee>
    4992:	83 2d       	mov	r24, r3
    4994:	8e 7e       	andi	r24, 0xEE	; 238
    4996:	a8 2e       	mov	r10, r24
    4998:	05 c0       	rjmp	.+10     	; 0x49a4 <vfprintf+0x2ee>
    499a:	b8 2c       	mov	r11, r8
    499c:	a3 2c       	mov	r10, r3
    499e:	03 c0       	rjmp	.+6      	; 0x49a6 <vfprintf+0x2f0>
    49a0:	b8 2c       	mov	r11, r8
    49a2:	01 c0       	rjmp	.+2      	; 0x49a6 <vfprintf+0x2f0>
    49a4:	b9 2c       	mov	r11, r9
    49a6:	a4 fe       	sbrs	r10, 4
    49a8:	0f c0       	rjmp	.+30     	; 0x49c8 <vfprintf+0x312>
    49aa:	fe 01       	movw	r30, r28
    49ac:	e8 0d       	add	r30, r8
    49ae:	f1 1d       	adc	r31, r1
    49b0:	80 81       	ld	r24, Z
    49b2:	80 33       	cpi	r24, 0x30	; 48
    49b4:	21 f4       	brne	.+8      	; 0x49be <vfprintf+0x308>
    49b6:	9a 2d       	mov	r25, r10
    49b8:	99 7e       	andi	r25, 0xE9	; 233
    49ba:	a9 2e       	mov	r10, r25
    49bc:	09 c0       	rjmp	.+18     	; 0x49d0 <vfprintf+0x31a>
    49be:	a2 fe       	sbrs	r10, 2
    49c0:	06 c0       	rjmp	.+12     	; 0x49ce <vfprintf+0x318>
    49c2:	b3 94       	inc	r11
    49c4:	b3 94       	inc	r11
    49c6:	04 c0       	rjmp	.+8      	; 0x49d0 <vfprintf+0x31a>
    49c8:	8a 2d       	mov	r24, r10
    49ca:	86 78       	andi	r24, 0x86	; 134
    49cc:	09 f0       	breq	.+2      	; 0x49d0 <vfprintf+0x31a>
    49ce:	b3 94       	inc	r11
    49d0:	a3 fc       	sbrc	r10, 3
    49d2:	10 c0       	rjmp	.+32     	; 0x49f4 <vfprintf+0x33e>
    49d4:	a0 fe       	sbrs	r10, 0
    49d6:	06 c0       	rjmp	.+12     	; 0x49e4 <vfprintf+0x32e>
    49d8:	b2 14       	cp	r11, r2
    49da:	80 f4       	brcc	.+32     	; 0x49fc <vfprintf+0x346>
    49dc:	28 0c       	add	r2, r8
    49de:	92 2c       	mov	r9, r2
    49e0:	9b 18       	sub	r9, r11
    49e2:	0d c0       	rjmp	.+26     	; 0x49fe <vfprintf+0x348>
    49e4:	b2 14       	cp	r11, r2
    49e6:	58 f4       	brcc	.+22     	; 0x49fe <vfprintf+0x348>
    49e8:	b6 01       	movw	r22, r12
    49ea:	80 e2       	ldi	r24, 0x20	; 32
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	76 d0       	rcall	.+236    	; 0x4adc <fputc>
    49f0:	b3 94       	inc	r11
    49f2:	f8 cf       	rjmp	.-16     	; 0x49e4 <vfprintf+0x32e>
    49f4:	b2 14       	cp	r11, r2
    49f6:	18 f4       	brcc	.+6      	; 0x49fe <vfprintf+0x348>
    49f8:	2b 18       	sub	r2, r11
    49fa:	02 c0       	rjmp	.+4      	; 0x4a00 <vfprintf+0x34a>
    49fc:	98 2c       	mov	r9, r8
    49fe:	21 2c       	mov	r2, r1
    4a00:	a4 fe       	sbrs	r10, 4
    4a02:	0f c0       	rjmp	.+30     	; 0x4a22 <vfprintf+0x36c>
    4a04:	b6 01       	movw	r22, r12
    4a06:	80 e3       	ldi	r24, 0x30	; 48
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	68 d0       	rcall	.+208    	; 0x4adc <fputc>
    4a0c:	a2 fe       	sbrs	r10, 2
    4a0e:	16 c0       	rjmp	.+44     	; 0x4a3c <vfprintf+0x386>
    4a10:	a1 fc       	sbrc	r10, 1
    4a12:	03 c0       	rjmp	.+6      	; 0x4a1a <vfprintf+0x364>
    4a14:	88 e7       	ldi	r24, 0x78	; 120
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	02 c0       	rjmp	.+4      	; 0x4a1e <vfprintf+0x368>
    4a1a:	88 e5       	ldi	r24, 0x58	; 88
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	b6 01       	movw	r22, r12
    4a20:	0c c0       	rjmp	.+24     	; 0x4a3a <vfprintf+0x384>
    4a22:	8a 2d       	mov	r24, r10
    4a24:	86 78       	andi	r24, 0x86	; 134
    4a26:	51 f0       	breq	.+20     	; 0x4a3c <vfprintf+0x386>
    4a28:	a1 fe       	sbrs	r10, 1
    4a2a:	02 c0       	rjmp	.+4      	; 0x4a30 <vfprintf+0x37a>
    4a2c:	8b e2       	ldi	r24, 0x2B	; 43
    4a2e:	01 c0       	rjmp	.+2      	; 0x4a32 <vfprintf+0x37c>
    4a30:	80 e2       	ldi	r24, 0x20	; 32
    4a32:	a7 fc       	sbrc	r10, 7
    4a34:	8d e2       	ldi	r24, 0x2D	; 45
    4a36:	b6 01       	movw	r22, r12
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	50 d0       	rcall	.+160    	; 0x4adc <fputc>
    4a3c:	89 14       	cp	r8, r9
    4a3e:	30 f4       	brcc	.+12     	; 0x4a4c <vfprintf+0x396>
    4a40:	b6 01       	movw	r22, r12
    4a42:	80 e3       	ldi	r24, 0x30	; 48
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	4a d0       	rcall	.+148    	; 0x4adc <fputc>
    4a48:	9a 94       	dec	r9
    4a4a:	f8 cf       	rjmp	.-16     	; 0x4a3c <vfprintf+0x386>
    4a4c:	8a 94       	dec	r8
    4a4e:	f3 01       	movw	r30, r6
    4a50:	e8 0d       	add	r30, r8
    4a52:	f1 1d       	adc	r31, r1
    4a54:	80 81       	ld	r24, Z
    4a56:	b6 01       	movw	r22, r12
    4a58:	90 e0       	ldi	r25, 0x00	; 0
    4a5a:	40 d0       	rcall	.+128    	; 0x4adc <fputc>
    4a5c:	81 10       	cpse	r8, r1
    4a5e:	f6 cf       	rjmp	.-20     	; 0x4a4c <vfprintf+0x396>
    4a60:	22 20       	and	r2, r2
    4a62:	09 f4       	brne	.+2      	; 0x4a66 <vfprintf+0x3b0>
    4a64:	4e ce       	rjmp	.-868    	; 0x4702 <vfprintf+0x4c>
    4a66:	b6 01       	movw	r22, r12
    4a68:	80 e2       	ldi	r24, 0x20	; 32
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	37 d0       	rcall	.+110    	; 0x4adc <fputc>
    4a6e:	2a 94       	dec	r2
    4a70:	f7 cf       	rjmp	.-18     	; 0x4a60 <vfprintf+0x3aa>
    4a72:	f6 01       	movw	r30, r12
    4a74:	86 81       	ldd	r24, Z+6	; 0x06
    4a76:	97 81       	ldd	r25, Z+7	; 0x07
    4a78:	02 c0       	rjmp	.+4      	; 0x4a7e <vfprintf+0x3c8>
    4a7a:	8f ef       	ldi	r24, 0xFF	; 255
    4a7c:	9f ef       	ldi	r25, 0xFF	; 255
    4a7e:	2b 96       	adiw	r28, 0x0b	; 11
    4a80:	0f b6       	in	r0, 0x3f	; 63
    4a82:	f8 94       	cli
    4a84:	de bf       	out	0x3e, r29	; 62
    4a86:	0f be       	out	0x3f, r0	; 63
    4a88:	cd bf       	out	0x3d, r28	; 61
    4a8a:	df 91       	pop	r29
    4a8c:	cf 91       	pop	r28
    4a8e:	1f 91       	pop	r17
    4a90:	0f 91       	pop	r16
    4a92:	ff 90       	pop	r15
    4a94:	ef 90       	pop	r14
    4a96:	df 90       	pop	r13
    4a98:	cf 90       	pop	r12
    4a9a:	bf 90       	pop	r11
    4a9c:	af 90       	pop	r10
    4a9e:	9f 90       	pop	r9
    4aa0:	8f 90       	pop	r8
    4aa2:	7f 90       	pop	r7
    4aa4:	6f 90       	pop	r6
    4aa6:	5f 90       	pop	r5
    4aa8:	4f 90       	pop	r4
    4aaa:	3f 90       	pop	r3
    4aac:	2f 90       	pop	r2
    4aae:	08 95       	ret

00004ab0 <strnlen_P>:
    4ab0:	fc 01       	movw	r30, r24
    4ab2:	05 90       	lpm	r0, Z+
    4ab4:	61 50       	subi	r22, 0x01	; 1
    4ab6:	70 40       	sbci	r23, 0x00	; 0
    4ab8:	01 10       	cpse	r0, r1
    4aba:	d8 f7       	brcc	.-10     	; 0x4ab2 <strnlen_P+0x2>
    4abc:	80 95       	com	r24
    4abe:	90 95       	com	r25
    4ac0:	8e 0f       	add	r24, r30
    4ac2:	9f 1f       	adc	r25, r31
    4ac4:	08 95       	ret

00004ac6 <strnlen>:
    4ac6:	fc 01       	movw	r30, r24
    4ac8:	61 50       	subi	r22, 0x01	; 1
    4aca:	70 40       	sbci	r23, 0x00	; 0
    4acc:	01 90       	ld	r0, Z+
    4ace:	01 10       	cpse	r0, r1
    4ad0:	d8 f7       	brcc	.-10     	; 0x4ac8 <strnlen+0x2>
    4ad2:	80 95       	com	r24
    4ad4:	90 95       	com	r25
    4ad6:	8e 0f       	add	r24, r30
    4ad8:	9f 1f       	adc	r25, r31
    4ada:	08 95       	ret

00004adc <fputc>:
    4adc:	0f 93       	push	r16
    4ade:	1f 93       	push	r17
    4ae0:	cf 93       	push	r28
    4ae2:	df 93       	push	r29
    4ae4:	fb 01       	movw	r30, r22
    4ae6:	23 81       	ldd	r18, Z+3	; 0x03
    4ae8:	21 fd       	sbrc	r18, 1
    4aea:	03 c0       	rjmp	.+6      	; 0x4af2 <fputc+0x16>
    4aec:	8f ef       	ldi	r24, 0xFF	; 255
    4aee:	9f ef       	ldi	r25, 0xFF	; 255
    4af0:	2c c0       	rjmp	.+88     	; 0x4b4a <fputc+0x6e>
    4af2:	22 ff       	sbrs	r18, 2
    4af4:	16 c0       	rjmp	.+44     	; 0x4b22 <fputc+0x46>
    4af6:	46 81       	ldd	r20, Z+6	; 0x06
    4af8:	57 81       	ldd	r21, Z+7	; 0x07
    4afa:	24 81       	ldd	r18, Z+4	; 0x04
    4afc:	35 81       	ldd	r19, Z+5	; 0x05
    4afe:	42 17       	cp	r20, r18
    4b00:	53 07       	cpc	r21, r19
    4b02:	44 f4       	brge	.+16     	; 0x4b14 <fputc+0x38>
    4b04:	a0 81       	ld	r26, Z
    4b06:	b1 81       	ldd	r27, Z+1	; 0x01
    4b08:	9d 01       	movw	r18, r26
    4b0a:	2f 5f       	subi	r18, 0xFF	; 255
    4b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b0e:	31 83       	std	Z+1, r19	; 0x01
    4b10:	20 83       	st	Z, r18
    4b12:	8c 93       	st	X, r24
    4b14:	26 81       	ldd	r18, Z+6	; 0x06
    4b16:	37 81       	ldd	r19, Z+7	; 0x07
    4b18:	2f 5f       	subi	r18, 0xFF	; 255
    4b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b1c:	37 83       	std	Z+7, r19	; 0x07
    4b1e:	26 83       	std	Z+6, r18	; 0x06
    4b20:	14 c0       	rjmp	.+40     	; 0x4b4a <fputc+0x6e>
    4b22:	8b 01       	movw	r16, r22
    4b24:	ec 01       	movw	r28, r24
    4b26:	fb 01       	movw	r30, r22
    4b28:	00 84       	ldd	r0, Z+8	; 0x08
    4b2a:	f1 85       	ldd	r31, Z+9	; 0x09
    4b2c:	e0 2d       	mov	r30, r0
    4b2e:	09 95       	icall
    4b30:	89 2b       	or	r24, r25
    4b32:	e1 f6       	brne	.-72     	; 0x4aec <fputc+0x10>
    4b34:	d8 01       	movw	r26, r16
    4b36:	16 96       	adiw	r26, 0x06	; 6
    4b38:	8d 91       	ld	r24, X+
    4b3a:	9c 91       	ld	r25, X
    4b3c:	17 97       	sbiw	r26, 0x07	; 7
    4b3e:	01 96       	adiw	r24, 0x01	; 1
    4b40:	17 96       	adiw	r26, 0x07	; 7
    4b42:	9c 93       	st	X, r25
    4b44:	8e 93       	st	-X, r24
    4b46:	16 97       	sbiw	r26, 0x06	; 6
    4b48:	ce 01       	movw	r24, r28
    4b4a:	df 91       	pop	r29
    4b4c:	cf 91       	pop	r28
    4b4e:	1f 91       	pop	r17
    4b50:	0f 91       	pop	r16
    4b52:	08 95       	ret

00004b54 <__ultoa_invert>:
    4b54:	fa 01       	movw	r30, r20
    4b56:	aa 27       	eor	r26, r26
    4b58:	28 30       	cpi	r18, 0x08	; 8
    4b5a:	51 f1       	breq	.+84     	; 0x4bb0 <__ultoa_invert+0x5c>
    4b5c:	20 31       	cpi	r18, 0x10	; 16
    4b5e:	81 f1       	breq	.+96     	; 0x4bc0 <__ultoa_invert+0x6c>
    4b60:	e8 94       	clt
    4b62:	6f 93       	push	r22
    4b64:	6e 7f       	andi	r22, 0xFE	; 254
    4b66:	6e 5f       	subi	r22, 0xFE	; 254
    4b68:	7f 4f       	sbci	r23, 0xFF	; 255
    4b6a:	8f 4f       	sbci	r24, 0xFF	; 255
    4b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b6e:	af 4f       	sbci	r26, 0xFF	; 255
    4b70:	b1 e0       	ldi	r27, 0x01	; 1
    4b72:	3e d0       	rcall	.+124    	; 0x4bf0 <__ultoa_invert+0x9c>
    4b74:	b4 e0       	ldi	r27, 0x04	; 4
    4b76:	3c d0       	rcall	.+120    	; 0x4bf0 <__ultoa_invert+0x9c>
    4b78:	67 0f       	add	r22, r23
    4b7a:	78 1f       	adc	r23, r24
    4b7c:	89 1f       	adc	r24, r25
    4b7e:	9a 1f       	adc	r25, r26
    4b80:	a1 1d       	adc	r26, r1
    4b82:	68 0f       	add	r22, r24
    4b84:	79 1f       	adc	r23, r25
    4b86:	8a 1f       	adc	r24, r26
    4b88:	91 1d       	adc	r25, r1
    4b8a:	a1 1d       	adc	r26, r1
    4b8c:	6a 0f       	add	r22, r26
    4b8e:	71 1d       	adc	r23, r1
    4b90:	81 1d       	adc	r24, r1
    4b92:	91 1d       	adc	r25, r1
    4b94:	a1 1d       	adc	r26, r1
    4b96:	20 d0       	rcall	.+64     	; 0x4bd8 <__ultoa_invert+0x84>
    4b98:	09 f4       	brne	.+2      	; 0x4b9c <__ultoa_invert+0x48>
    4b9a:	68 94       	set
    4b9c:	3f 91       	pop	r19
    4b9e:	2a e0       	ldi	r18, 0x0A	; 10
    4ba0:	26 9f       	mul	r18, r22
    4ba2:	11 24       	eor	r1, r1
    4ba4:	30 19       	sub	r19, r0
    4ba6:	30 5d       	subi	r19, 0xD0	; 208
    4ba8:	31 93       	st	Z+, r19
    4baa:	de f6       	brtc	.-74     	; 0x4b62 <__ultoa_invert+0xe>
    4bac:	cf 01       	movw	r24, r30
    4bae:	08 95       	ret
    4bb0:	46 2f       	mov	r20, r22
    4bb2:	47 70       	andi	r20, 0x07	; 7
    4bb4:	40 5d       	subi	r20, 0xD0	; 208
    4bb6:	41 93       	st	Z+, r20
    4bb8:	b3 e0       	ldi	r27, 0x03	; 3
    4bba:	0f d0       	rcall	.+30     	; 0x4bda <__ultoa_invert+0x86>
    4bbc:	c9 f7       	brne	.-14     	; 0x4bb0 <__ultoa_invert+0x5c>
    4bbe:	f6 cf       	rjmp	.-20     	; 0x4bac <__ultoa_invert+0x58>
    4bc0:	46 2f       	mov	r20, r22
    4bc2:	4f 70       	andi	r20, 0x0F	; 15
    4bc4:	40 5d       	subi	r20, 0xD0	; 208
    4bc6:	4a 33       	cpi	r20, 0x3A	; 58
    4bc8:	18 f0       	brcs	.+6      	; 0x4bd0 <__ultoa_invert+0x7c>
    4bca:	49 5d       	subi	r20, 0xD9	; 217
    4bcc:	31 fd       	sbrc	r19, 1
    4bce:	40 52       	subi	r20, 0x20	; 32
    4bd0:	41 93       	st	Z+, r20
    4bd2:	02 d0       	rcall	.+4      	; 0x4bd8 <__ultoa_invert+0x84>
    4bd4:	a9 f7       	brne	.-22     	; 0x4bc0 <__ultoa_invert+0x6c>
    4bd6:	ea cf       	rjmp	.-44     	; 0x4bac <__ultoa_invert+0x58>
    4bd8:	b4 e0       	ldi	r27, 0x04	; 4
    4bda:	a6 95       	lsr	r26
    4bdc:	97 95       	ror	r25
    4bde:	87 95       	ror	r24
    4be0:	77 95       	ror	r23
    4be2:	67 95       	ror	r22
    4be4:	ba 95       	dec	r27
    4be6:	c9 f7       	brne	.-14     	; 0x4bda <__ultoa_invert+0x86>
    4be8:	00 97       	sbiw	r24, 0x00	; 0
    4bea:	61 05       	cpc	r22, r1
    4bec:	71 05       	cpc	r23, r1
    4bee:	08 95       	ret
    4bf0:	9b 01       	movw	r18, r22
    4bf2:	ac 01       	movw	r20, r24
    4bf4:	0a 2e       	mov	r0, r26
    4bf6:	06 94       	lsr	r0
    4bf8:	57 95       	ror	r21
    4bfa:	47 95       	ror	r20
    4bfc:	37 95       	ror	r19
    4bfe:	27 95       	ror	r18
    4c00:	ba 95       	dec	r27
    4c02:	c9 f7       	brne	.-14     	; 0x4bf6 <__ultoa_invert+0xa2>
    4c04:	62 0f       	add	r22, r18
    4c06:	73 1f       	adc	r23, r19
    4c08:	84 1f       	adc	r24, r20
    4c0a:	95 1f       	adc	r25, r21
    4c0c:	a0 1d       	adc	r26, r0
    4c0e:	08 95       	ret

00004c10 <__divmodsi4>:
    4c10:	05 2e       	mov	r0, r21
    4c12:	97 fb       	bst	r25, 7
    4c14:	16 f4       	brtc	.+4      	; 0x4c1a <__divmodsi4+0xa>
    4c16:	00 94       	com	r0
    4c18:	0f d0       	rcall	.+30     	; 0x4c38 <__negsi2>
    4c1a:	57 fd       	sbrc	r21, 7
    4c1c:	05 d0       	rcall	.+10     	; 0x4c28 <__divmodsi4_neg2>
    4c1e:	24 d0       	rcall	.+72     	; 0x4c68 <__udivmodsi4>
    4c20:	07 fc       	sbrc	r0, 7
    4c22:	02 d0       	rcall	.+4      	; 0x4c28 <__divmodsi4_neg2>
    4c24:	46 f4       	brtc	.+16     	; 0x4c36 <__divmodsi4_exit>
    4c26:	08 c0       	rjmp	.+16     	; 0x4c38 <__negsi2>

00004c28 <__divmodsi4_neg2>:
    4c28:	50 95       	com	r21
    4c2a:	40 95       	com	r20
    4c2c:	30 95       	com	r19
    4c2e:	21 95       	neg	r18
    4c30:	3f 4f       	sbci	r19, 0xFF	; 255
    4c32:	4f 4f       	sbci	r20, 0xFF	; 255
    4c34:	5f 4f       	sbci	r21, 0xFF	; 255

00004c36 <__divmodsi4_exit>:
    4c36:	08 95       	ret

00004c38 <__negsi2>:
    4c38:	90 95       	com	r25
    4c3a:	80 95       	com	r24
    4c3c:	70 95       	com	r23
    4c3e:	61 95       	neg	r22
    4c40:	7f 4f       	sbci	r23, 0xFF	; 255
    4c42:	8f 4f       	sbci	r24, 0xFF	; 255
    4c44:	9f 4f       	sbci	r25, 0xFF	; 255
    4c46:	08 95       	ret

00004c48 <__muluhisi3>:
    4c48:	31 d0       	rcall	.+98     	; 0x4cac <__umulhisi3>
    4c4a:	a5 9f       	mul	r26, r21
    4c4c:	90 0d       	add	r25, r0
    4c4e:	b4 9f       	mul	r27, r20
    4c50:	90 0d       	add	r25, r0
    4c52:	a4 9f       	mul	r26, r20
    4c54:	80 0d       	add	r24, r0
    4c56:	91 1d       	adc	r25, r1
    4c58:	11 24       	eor	r1, r1
    4c5a:	08 95       	ret

00004c5c <__mulshisi3>:
    4c5c:	b7 ff       	sbrs	r27, 7
    4c5e:	f4 cf       	rjmp	.-24     	; 0x4c48 <__muluhisi3>

00004c60 <__mulohisi3>:
    4c60:	f3 df       	rcall	.-26     	; 0x4c48 <__muluhisi3>
    4c62:	82 1b       	sub	r24, r18
    4c64:	93 0b       	sbc	r25, r19
    4c66:	08 95       	ret

00004c68 <__udivmodsi4>:
    4c68:	a1 e2       	ldi	r26, 0x21	; 33
    4c6a:	1a 2e       	mov	r1, r26
    4c6c:	aa 1b       	sub	r26, r26
    4c6e:	bb 1b       	sub	r27, r27
    4c70:	fd 01       	movw	r30, r26
    4c72:	0d c0       	rjmp	.+26     	; 0x4c8e <__udivmodsi4_ep>

00004c74 <__udivmodsi4_loop>:
    4c74:	aa 1f       	adc	r26, r26
    4c76:	bb 1f       	adc	r27, r27
    4c78:	ee 1f       	adc	r30, r30
    4c7a:	ff 1f       	adc	r31, r31
    4c7c:	a2 17       	cp	r26, r18
    4c7e:	b3 07       	cpc	r27, r19
    4c80:	e4 07       	cpc	r30, r20
    4c82:	f5 07       	cpc	r31, r21
    4c84:	20 f0       	brcs	.+8      	; 0x4c8e <__udivmodsi4_ep>
    4c86:	a2 1b       	sub	r26, r18
    4c88:	b3 0b       	sbc	r27, r19
    4c8a:	e4 0b       	sbc	r30, r20
    4c8c:	f5 0b       	sbc	r31, r21

00004c8e <__udivmodsi4_ep>:
    4c8e:	66 1f       	adc	r22, r22
    4c90:	77 1f       	adc	r23, r23
    4c92:	88 1f       	adc	r24, r24
    4c94:	99 1f       	adc	r25, r25
    4c96:	1a 94       	dec	r1
    4c98:	69 f7       	brne	.-38     	; 0x4c74 <__udivmodsi4_loop>
    4c9a:	60 95       	com	r22
    4c9c:	70 95       	com	r23
    4c9e:	80 95       	com	r24
    4ca0:	90 95       	com	r25
    4ca2:	9b 01       	movw	r18, r22
    4ca4:	ac 01       	movw	r20, r24
    4ca6:	bd 01       	movw	r22, r26
    4ca8:	cf 01       	movw	r24, r30
    4caa:	08 95       	ret

00004cac <__umulhisi3>:
    4cac:	a2 9f       	mul	r26, r18
    4cae:	b0 01       	movw	r22, r0
    4cb0:	b3 9f       	mul	r27, r19
    4cb2:	c0 01       	movw	r24, r0
    4cb4:	a3 9f       	mul	r26, r19
    4cb6:	70 0d       	add	r23, r0
    4cb8:	81 1d       	adc	r24, r1
    4cba:	11 24       	eor	r1, r1
    4cbc:	91 1d       	adc	r25, r1
    4cbe:	b2 9f       	mul	r27, r18
    4cc0:	70 0d       	add	r23, r0
    4cc2:	81 1d       	adc	r24, r1
    4cc4:	11 24       	eor	r1, r1
    4cc6:	91 1d       	adc	r25, r1
    4cc8:	08 95       	ret

00004cca <_exit>:
    4cca:	f8 94       	cli

00004ccc <__stop_program>:
    4ccc:	ff cf       	rjmp	.-2      	; 0x4ccc <__stop_program>
