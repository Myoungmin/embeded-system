
Snake_game3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005b8  00800100  00002a48  00002adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  008006b8  008006b8  00003094  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003094  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00003130  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001aff  00000000  00000000  00003338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c34  00000000  00000000  00004e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016c9  00000000  00000000  00005a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000870  00000000  00000000  00007134  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083f  00000000  00000000  000079a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011e7  00000000  00000000  000081e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000093ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	35 c1       	rjmp	.+618    	; 0x26c <__ctors_end>
       2:	00 00       	nop
       4:	52 c1       	rjmp	.+676    	; 0x2aa <__bad_interrupt>
       6:	00 00       	nop
       8:	50 c1       	rjmp	.+672    	; 0x2aa <__bad_interrupt>
       a:	00 00       	nop
       c:	4e c1       	rjmp	.+668    	; 0x2aa <__bad_interrupt>
       e:	00 00       	nop
      10:	e0 c6       	rjmp	.+3520   	; 0xdd2 <__vector_4>
      12:	00 00       	nop
      14:	96 c6       	rjmp	.+3372   	; 0xd42 <__vector_5>
      16:	00 00       	nop
      18:	bc c5       	rjmp	.+2936   	; 0xb92 <__vector_6>
      1a:	00 00       	nop
      1c:	02 c6       	rjmp	.+3076   	; 0xc22 <__vector_7>
      1e:	00 00       	nop
      20:	48 c6       	rjmp	.+3216   	; 0xcb2 <__vector_8>
      22:	00 00       	nop
      24:	42 c1       	rjmp	.+644    	; 0x2aa <__bad_interrupt>
      26:	00 00       	nop
      28:	40 c1       	rjmp	.+640    	; 0x2aa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3e c1       	rjmp	.+636    	; 0x2aa <__bad_interrupt>
      2e:	00 00       	nop
      30:	3c c1       	rjmp	.+632    	; 0x2aa <__bad_interrupt>
      32:	00 00       	nop
      34:	3a c1       	rjmp	.+628    	; 0x2aa <__bad_interrupt>
      36:	00 00       	nop
      38:	38 c1       	rjmp	.+624    	; 0x2aa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	36 c1       	rjmp	.+620    	; 0x2aa <__bad_interrupt>
      3e:	00 00       	nop
      40:	34 c1       	rjmp	.+616    	; 0x2aa <__bad_interrupt>
      42:	00 00       	nop
      44:	32 c1       	rjmp	.+612    	; 0x2aa <__bad_interrupt>
      46:	00 00       	nop
      48:	30 c1       	rjmp	.+608    	; 0x2aa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2e c1       	rjmp	.+604    	; 0x2aa <__bad_interrupt>
      4e:	00 00       	nop
      50:	2c c1       	rjmp	.+600    	; 0x2aa <__bad_interrupt>
      52:	00 00       	nop
      54:	2a c1       	rjmp	.+596    	; 0x2aa <__bad_interrupt>
      56:	00 00       	nop
      58:	28 c1       	rjmp	.+592    	; 0x2aa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	26 c1       	rjmp	.+588    	; 0x2aa <__bad_interrupt>
      5e:	00 00       	nop
      60:	24 c1       	rjmp	.+584    	; 0x2aa <__bad_interrupt>
      62:	00 00       	nop
      64:	22 c1       	rjmp	.+580    	; 0x2aa <__bad_interrupt>
      66:	00 00       	nop
      68:	20 c1       	rjmp	.+576    	; 0x2aa <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1e c1       	rjmp	.+572    	; 0x2aa <__bad_interrupt>
      6e:	00 00       	nop
      70:	1c c1       	rjmp	.+568    	; 0x2aa <__bad_interrupt>
      72:	00 00       	nop
      74:	1a c1       	rjmp	.+564    	; 0x2aa <__bad_interrupt>
      76:	00 00       	nop
      78:	18 c1       	rjmp	.+560    	; 0x2aa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	16 c1       	rjmp	.+556    	; 0x2aa <__bad_interrupt>
      7e:	00 00       	nop
      80:	14 c1       	rjmp	.+552    	; 0x2aa <__bad_interrupt>
      82:	00 00       	nop
      84:	12 c1       	rjmp	.+548    	; 0x2aa <__bad_interrupt>
      86:	00 00       	nop
      88:	10 c1       	rjmp	.+544    	; 0x2aa <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	00 00       	nop
      92:	00 5f       	subi	r16, 0xF0	; 240
      94:	00 00       	nop
      96:	00 07       	cpc	r16, r16
      98:	00 07       	cpc	r16, r16
      9a:	00 14       	cp	r0, r0
      9c:	7f 14       	cp	r7, r15
      9e:	7f 14       	cp	r7, r15
      a0:	24 2a       	or	r2, r20
      a2:	7f 2a       	or	r7, r31
      a4:	12 23       	and	r17, r18
      a6:	13 08       	sbc	r1, r3
      a8:	64 62       	ori	r22, 0x24	; 36
      aa:	36 49       	sbci	r19, 0x96	; 150
      ac:	55 22       	and	r5, r21
      ae:	50 00       	.word	0x0050	; ????
      b0:	05 03       	mulsu	r16, r21
      b2:	00 00       	nop
      b4:	00 1c       	adc	r0, r0
      b6:	22 41       	sbci	r18, 0x12	; 18
      b8:	00 00       	nop
      ba:	41 22       	and	r4, r17
      bc:	1c 00       	.word	0x001c	; ????
      be:	14 08       	sbc	r1, r4
      c0:	3e 08       	sbc	r3, r14
      c2:	14 08       	sbc	r1, r4
      c4:	08 3e       	cpi	r16, 0xE8	; 232
      c6:	08 08       	sbc	r0, r8
      c8:	00 50       	subi	r16, 0x00	; 0
      ca:	30 00       	.word	0x0030	; ????
      cc:	00 08       	sbc	r0, r0
      ce:	08 08       	sbc	r0, r8
      d0:	08 08       	sbc	r0, r8
      d2:	00 60       	ori	r16, 0x00	; 0
      d4:	60 00       	.word	0x0060	; ????
      d6:	00 20       	and	r0, r0
      d8:	10 08       	sbc	r1, r0
      da:	04 02       	muls	r16, r20
      dc:	3e 51       	subi	r19, 0x1E	; 30
      de:	49 45       	sbci	r20, 0x59	; 89
      e0:	3e 00       	.word	0x003e	; ????
      e2:	42 7f       	andi	r20, 0xF2	; 242
      e4:	40 00       	.word	0x0040	; ????
      e6:	42 61       	ori	r20, 0x12	; 18
      e8:	51 49       	sbci	r21, 0x91	; 145
      ea:	46 21       	and	r20, r6
      ec:	41 45       	sbci	r20, 0x51	; 81
      ee:	4b 31       	cpi	r20, 0x1B	; 27
      f0:	18 14       	cp	r1, r8
      f2:	12 7f       	andi	r17, 0xF2	; 242
      f4:	10 27       	eor	r17, r16
      f6:	45 45       	sbci	r20, 0x55	; 85
      f8:	45 39       	cpi	r20, 0x95	; 149
      fa:	3c 4a       	sbci	r19, 0xAC	; 172
      fc:	49 49       	sbci	r20, 0x99	; 153
      fe:	30 01       	movw	r6, r0
     100:	71 09       	sbc	r23, r1
     102:	05 03       	mulsu	r16, r21
     104:	36 49       	sbci	r19, 0x96	; 150
     106:	49 49       	sbci	r20, 0x99	; 153
     108:	36 06       	cpc	r3, r22
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	29 1e       	adc	r2, r25
     10e:	00 36       	cpi	r16, 0x60	; 96
     110:	36 00       	.word	0x0036	; ????
     112:	00 00       	nop
     114:	56 36       	cpi	r21, 0x66	; 102
     116:	00 00       	nop
     118:	08 14       	cp	r0, r8
     11a:	22 41       	sbci	r18, 0x12	; 18
     11c:	00 14       	cp	r0, r0
     11e:	14 14       	cp	r1, r4
     120:	14 14       	cp	r1, r4
     122:	00 41       	sbci	r16, 0x10	; 16
     124:	22 14       	cp	r2, r2
     126:	08 02       	muls	r16, r24
     128:	01 51       	subi	r16, 0x11	; 17
     12a:	09 06       	cpc	r0, r25
     12c:	32 49       	sbci	r19, 0x92	; 146
     12e:	79 41       	sbci	r23, 0x19	; 25
     130:	3e 7e       	andi	r19, 0xEE	; 238
     132:	11 11       	cpse	r17, r1
     134:	11 7e       	andi	r17, 0xE1	; 225
     136:	7f 49       	sbci	r23, 0x9F	; 159
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	36 3e       	cpi	r19, 0xE6	; 230
     13c:	41 41       	sbci	r20, 0x11	; 17
     13e:	41 22       	and	r4, r17
     140:	7f 41       	sbci	r23, 0x1F	; 31
     142:	41 22       	and	r4, r17
     144:	1c 7f       	andi	r17, 0xFC	; 252
     146:	49 49       	sbci	r20, 0x99	; 153
     148:	49 41       	sbci	r20, 0x19	; 25
     14a:	7f 09       	sbc	r23, r15
     14c:	09 09       	sbc	r16, r9
     14e:	01 3e       	cpi	r16, 0xE1	; 225
     150:	41 49       	sbci	r20, 0x91	; 145
     152:	49 7a       	andi	r20, 0xA9	; 169
     154:	7f 08       	sbc	r7, r15
     156:	08 08       	sbc	r0, r8
     158:	7f 00       	.word	0x007f	; ????
     15a:	41 7f       	andi	r20, 0xF1	; 241
     15c:	41 00       	.word	0x0041	; ????
     15e:	20 40       	sbci	r18, 0x00	; 0
     160:	41 3f       	cpi	r20, 0xF1	; 241
     162:	01 7f       	andi	r16, 0xF1	; 241
     164:	08 14       	cp	r0, r8
     166:	22 41       	sbci	r18, 0x12	; 18
     168:	7f 40       	sbci	r23, 0x0F	; 15
     16a:	40 40       	sbci	r20, 0x00	; 0
     16c:	40 7f       	andi	r20, 0xF0	; 240
     16e:	02 0c       	add	r0, r2
     170:	02 7f       	andi	r16, 0xF2	; 242
     172:	7f 04       	cpc	r7, r15
     174:	08 10       	cpse	r0, r8
     176:	7f 3e       	cpi	r23, 0xEF	; 239
     178:	41 41       	sbci	r20, 0x11	; 17
     17a:	41 3e       	cpi	r20, 0xE1	; 225
     17c:	7f 09       	sbc	r23, r15
     17e:	09 09       	sbc	r16, r9
     180:	06 3e       	cpi	r16, 0xE6	; 230
     182:	41 51       	subi	r20, 0x11	; 17
     184:	21 5e       	subi	r18, 0xE1	; 225
     186:	7f 09       	sbc	r23, r15
     188:	19 29       	or	r17, r9
     18a:	46 46       	sbci	r20, 0x66	; 102
     18c:	49 49       	sbci	r20, 0x99	; 153
     18e:	49 31       	cpi	r20, 0x19	; 25
     190:	01 01       	movw	r0, r2
     192:	7f 01       	movw	r14, r30
     194:	01 3f       	cpi	r16, 0xF1	; 241
     196:	40 40       	sbci	r20, 0x00	; 0
     198:	40 3f       	cpi	r20, 0xF0	; 240
     19a:	1f 20       	and	r1, r15
     19c:	40 20       	and	r4, r0
     19e:	1f 3f       	cpi	r17, 0xFF	; 255
     1a0:	40 38       	cpi	r20, 0x80	; 128
     1a2:	40 3f       	cpi	r20, 0xF0	; 240
     1a4:	63 14       	cp	r6, r3
     1a6:	08 14       	cp	r0, r8
     1a8:	63 07       	cpc	r22, r19
     1aa:	08 70       	andi	r16, 0x08	; 8
     1ac:	08 07       	cpc	r16, r24
     1ae:	61 51       	subi	r22, 0x11	; 17
     1b0:	49 45       	sbci	r20, 0x59	; 89
     1b2:	43 00       	.word	0x0043	; ????
     1b4:	7f 41       	sbci	r23, 0x1F	; 31
     1b6:	41 00       	.word	0x0041	; ????
     1b8:	02 04       	cpc	r0, r2
     1ba:	08 10       	cpse	r0, r8
     1bc:	20 00       	.word	0x0020	; ????
     1be:	41 41       	sbci	r20, 0x11	; 17
     1c0:	7f 00       	.word	0x007f	; ????
     1c2:	04 02       	muls	r16, r20
     1c4:	01 02       	muls	r16, r17
     1c6:	04 40       	sbci	r16, 0x04	; 4
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	40 40       	sbci	r20, 0x00	; 0
     1cc:	00 01       	movw	r0, r0
     1ce:	02 04       	cpc	r0, r2
     1d0:	00 20       	and	r0, r0
     1d2:	54 54       	subi	r21, 0x44	; 68
     1d4:	54 78       	andi	r21, 0x84	; 132
     1d6:	7f 48       	sbci	r23, 0x8F	; 143
     1d8:	44 44       	sbci	r20, 0x44	; 68
     1da:	38 38       	cpi	r19, 0x88	; 136
     1dc:	44 44       	sbci	r20, 0x44	; 68
     1de:	44 20       	and	r4, r4
     1e0:	38 44       	sbci	r19, 0x48	; 72
     1e2:	44 48       	sbci	r20, 0x84	; 132
     1e4:	7f 38       	cpi	r23, 0x8F	; 143
     1e6:	54 54       	subi	r21, 0x44	; 68
     1e8:	54 18       	sub	r5, r4
     1ea:	08 7e       	andi	r16, 0xE8	; 232
     1ec:	09 01       	movw	r0, r18
     1ee:	02 0c       	add	r0, r2
     1f0:	52 52       	subi	r21, 0x22	; 34
     1f2:	52 3e       	cpi	r21, 0xE2	; 226
     1f4:	7f 08       	sbc	r7, r15
     1f6:	04 04       	cpc	r0, r4
     1f8:	78 00       	.word	0x0078	; ????
     1fa:	44 7d       	andi	r20, 0xD4	; 212
     1fc:	40 00       	.word	0x0040	; ????
     1fe:	20 40       	sbci	r18, 0x00	; 0
     200:	44 3d       	cpi	r20, 0xD4	; 212
     202:	00 7f       	andi	r16, 0xF0	; 240
     204:	10 28       	or	r1, r0
     206:	44 00       	.word	0x0044	; ????
     208:	00 41       	sbci	r16, 0x10	; 16
     20a:	7f 40       	sbci	r23, 0x0F	; 15
     20c:	00 7c       	andi	r16, 0xC0	; 192
     20e:	04 18       	sub	r0, r4
     210:	04 78       	andi	r16, 0x84	; 132
     212:	7c 08       	sbc	r7, r12
     214:	04 04       	cpc	r0, r4
     216:	78 38       	cpi	r23, 0x88	; 136
     218:	44 44       	sbci	r20, 0x44	; 68
     21a:	44 38       	cpi	r20, 0x84	; 132
     21c:	7c 14       	cp	r7, r12
     21e:	14 14       	cp	r1, r4
     220:	08 08       	sbc	r0, r8
     222:	14 14       	cp	r1, r4
     224:	18 7c       	andi	r17, 0xC8	; 200
     226:	7c 08       	sbc	r7, r12
     228:	04 04       	cpc	r0, r4
     22a:	08 48       	sbci	r16, 0x88	; 136
     22c:	54 54       	subi	r21, 0x44	; 68
     22e:	54 20       	and	r5, r4
     230:	04 3f       	cpi	r16, 0xF4	; 244
     232:	44 40       	sbci	r20, 0x04	; 4
     234:	20 3c       	cpi	r18, 0xC0	; 192
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	20 7c       	andi	r18, 0xC0	; 192
     23a:	1c 20       	and	r1, r12
     23c:	40 20       	and	r4, r0
     23e:	1c 3c       	cpi	r17, 0xCC	; 204
     240:	40 30       	cpi	r20, 0x00	; 0
     242:	40 3c       	cpi	r20, 0xC0	; 192
     244:	44 28       	or	r4, r4
     246:	10 28       	or	r1, r0
     248:	44 0c       	add	r4, r4
     24a:	50 50       	subi	r21, 0x00	; 0
     24c:	50 3c       	cpi	r21, 0xC0	; 192
     24e:	44 64       	ori	r20, 0x44	; 68
     250:	54 4c       	sbci	r21, 0xC4	; 196
     252:	44 00       	.word	0x0044	; ????
     254:	08 36       	cpi	r16, 0x68	; 104
     256:	41 00       	.word	0x0041	; ????
     258:	00 00       	nop
     25a:	7f 00       	.word	0x007f	; ????
     25c:	00 00       	nop
     25e:	41 36       	cpi	r20, 0x61	; 97
     260:	08 00       	.word	0x0008	; ????
     262:	10 08       	sbc	r1, r0
     264:	08 10       	cpse	r0, r8
     266:	08 78       	andi	r16, 0x88	; 136
     268:	46 41       	sbci	r20, 0x16	; 22
     26a:	46 78       	andi	r20, 0x86	; 134

0000026c <__ctors_end>:
     26c:	11 24       	eor	r1, r1
     26e:	1f be       	out	0x3f, r1	; 63
     270:	cf ef       	ldi	r28, 0xFF	; 255
     272:	d0 e1       	ldi	r29, 0x10	; 16
     274:	de bf       	out	0x3e, r29	; 62
     276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
     278:	16 e0       	ldi	r17, 0x06	; 6
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b1 e0       	ldi	r27, 0x01	; 1
     27e:	e8 e4       	ldi	r30, 0x48	; 72
     280:	fa e2       	ldi	r31, 0x2A	; 42
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	0b bf       	out	0x3b, r16	; 59
     286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
     288:	07 90       	elpm	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	a8 3b       	cpi	r26, 0xB8	; 184
     28e:	b1 07       	cpc	r27, r17
     290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
     292:	27 e0       	ldi	r18, 0x07	; 7
     294:	a8 eb       	ldi	r26, 0xB8	; 184
     296:	b6 e0       	ldi	r27, 0x06	; 6
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	a1 34       	cpi	r26, 0x41	; 65
     29e:	b2 07       	cpc	r27, r18
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
     2a2:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <main>
     2a6:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <_exit>

000002aa <__bad_interrupt>:
     2aa:	aa ce       	rjmp	.-684    	; 0x0 <__vectors>

000002ac <get_ch_data>:
    {0x10, 0x08, 0x08, 0x10, 0x08}, // 7e ~
    {0x78, 0x46, 0x41, 0x46, 0x78}, // 7f 
};

void get_ch_data(char ch, uint8_t *buffer)
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	28 97       	sbiw	r28, 0x08	; 8
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	8e 83       	std	Y+6, r24	; 0x06
     2c2:	78 87       	std	Y+8, r23	; 0x08
     2c4:	6f 83       	std	Y+7, r22	; 0x07
    int     i;

    for (i=0; i<5; i++)
     2c6:	1a 82       	std	Y+2, r1	; 0x02
     2c8:	19 82       	std	Y+1, r1	; 0x01
     2ca:	29 c0       	rjmp	.+82     	; 0x31e <get_ch_data+0x72>
    {
        *buffer++ = pgm_read_byte(&ASCII[ch - ' '][i]);
     2cc:	2f 81       	ldd	r18, Y+7	; 0x07
     2ce:	38 85       	ldd	r19, Y+8	; 0x08
     2d0:	c9 01       	movw	r24, r18
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	98 87       	std	Y+8, r25	; 0x08
     2d6:	8f 83       	std	Y+7, r24	; 0x07
     2d8:	8e 81       	ldd	r24, Y+6	; 0x06
     2da:	08 2e       	mov	r0, r24
     2dc:	00 0c       	add	r0, r0
     2de:	99 0b       	sbc	r25, r25
     2e0:	ac 01       	movw	r20, r24
     2e2:	40 52       	subi	r20, 0x20	; 32
     2e4:	51 09       	sbc	r21, r1
     2e6:	ca 01       	movw	r24, r20
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	84 0f       	add	r24, r20
     2f2:	95 1f       	adc	r25, r21
     2f4:	49 81       	ldd	r20, Y+1	; 0x01
     2f6:	5a 81       	ldd	r21, Y+2	; 0x02
     2f8:	84 0f       	add	r24, r20
     2fa:	95 1f       	adc	r25, r21
     2fc:	84 57       	subi	r24, 0x74	; 116
     2fe:	9f 4f       	sbci	r25, 0xFF	; 255
     300:	9c 83       	std	Y+4, r25	; 0x04
     302:	8b 83       	std	Y+3, r24	; 0x03
     304:	8b 81       	ldd	r24, Y+3	; 0x03
     306:	9c 81       	ldd	r25, Y+4	; 0x04
     308:	fc 01       	movw	r30, r24
     30a:	84 91       	lpm	r24, Z
     30c:	8d 83       	std	Y+5, r24	; 0x05
     30e:	8d 81       	ldd	r24, Y+5	; 0x05
     310:	f9 01       	movw	r30, r18
     312:	80 83       	st	Z, r24

void get_ch_data(char ch, uint8_t *buffer)
{
    int     i;

    for (i=0; i<5; i++)
     314:	89 81       	ldd	r24, Y+1	; 0x01
     316:	9a 81       	ldd	r25, Y+2	; 0x02
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	9a 83       	std	Y+2, r25	; 0x02
     31c:	89 83       	std	Y+1, r24	; 0x01
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	9a 81       	ldd	r25, Y+2	; 0x02
     322:	05 97       	sbiw	r24, 0x05	; 5
     324:	9c f2       	brlt	.-90     	; 0x2cc <get_ch_data+0x20>
    {
        *buffer++ = pgm_read_byte(&ASCII[ch - ' '][i]);
    }
    *buffer = 0;
     326:	8f 81       	ldd	r24, Y+7	; 0x07
     328:	98 85       	ldd	r25, Y+8	; 0x08
     32a:	fc 01       	movw	r30, r24
     32c:	10 82       	st	Z, r1
}
     32e:	00 00       	nop
     330:	28 96       	adiw	r28, 0x08	; 8
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	de bf       	out	0x3e, r29	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	cd bf       	out	0x3d, r28	; 61
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <twiStart>:
        return -1;

    twi_stop();

    return 0;
}
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	80 e7       	ldi	r24, 0x70	; 112
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	24 ea       	ldi	r18, 0xA4	; 164
     350:	fc 01       	movw	r30, r24
     352:	24 83       	std	Z+4, r18	; 0x04
     354:	00 00       	nop
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <twiStop>:
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	80 e7       	ldi	r24, 0x70	; 112
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	24 e9       	ldi	r18, 0x94	; 148
     36a:	fc 01       	movw	r30, r24
     36c:	24 83       	std	Z+4, r18	; 0x04
     36e:	00 00       	nop
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	08 95       	ret

00000376 <twiWaitAck>:
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	00 00       	nop
     380:	80 e7       	ldi	r24, 0x70	; 112
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	fc 01       	movw	r30, r24
     386:	84 81       	ldd	r24, Z+4	; 0x04
     388:	88 23       	and	r24, r24
     38a:	d4 f7       	brge	.-12     	; 0x380 <twiWaitAck+0xa>
     38c:	00 00       	nop
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <twiChkAck>:
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	80 e7       	ldi	r24, 0x70	; 112
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	fc 01       	movw	r30, r24
     3a2:	81 81       	ldd	r24, Z+1	; 0x01
     3a4:	88 7f       	andi	r24, 0xF8	; 248
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret

000003ac <twiSendByte>:
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	1f 92       	push	r1
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	80 e7       	ldi	r24, 0x70	; 112
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	29 81       	ldd	r18, Y+1	; 0x01
     3be:	fc 01       	movw	r30, r24
     3c0:	23 83       	std	Z+3, r18	; 0x03
     3c2:	80 e7       	ldi	r24, 0x70	; 112
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	24 e8       	ldi	r18, 0x84	; 132
     3c8:	fc 01       	movw	r30, r24
     3ca:	24 83       	std	Z+4, r18	; 0x04
     3cc:	00 00       	nop
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <twi_start>:
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	b1 df       	rcall	.-158    	; 0x342 <twiStart>
     3e0:	ca df       	rcall	.-108    	; 0x376 <twiWaitAck>
     3e2:	d8 df       	rcall	.-80     	; 0x394 <twiChkAck>
     3e4:	88 30       	cpi	r24, 0x08	; 8
     3e6:	19 f0       	breq	.+6      	; 0x3ee <twi_start+0x18>
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
     3ea:	9f ef       	ldi	r25, 0xFF	; 255
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <twi_start+0x1c>
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <twi_stop>:
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	ad df       	rcall	.-166    	; 0x35c <twiStop>
     402:	00 00       	nop
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <twi_send_dev_addr>:
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	00 d0       	rcall	.+0      	; 0x410 <twi_send_dev_addr+0x6>
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	8a 83       	std	Y+2, r24	; 0x02
     416:	8a 81       	ldd	r24, Y+2	; 0x02
     418:	88 2f       	mov	r24, r24
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	81 70       	andi	r24, 0x01	; 1
     41e:	99 27       	eor	r25, r25
     420:	89 2b       	or	r24, r25
     422:	11 f0       	breq	.+4      	; 0x428 <twi_send_dev_addr+0x1e>
     424:	80 e4       	ldi	r24, 0x40	; 64
     426:	01 c0       	rjmp	.+2      	; 0x42a <twi_send_dev_addr+0x20>
     428:	88 e1       	ldi	r24, 0x18	; 24
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	8a 81       	ldd	r24, Y+2	; 0x02
     42e:	be df       	rcall	.-132    	; 0x3ac <twiSendByte>
     430:	a2 df       	rcall	.-188    	; 0x376 <twiWaitAck>
     432:	b0 df       	rcall	.-160    	; 0x394 <twiChkAck>
     434:	98 2f       	mov	r25, r24
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	98 17       	cp	r25, r24
     43a:	19 f0       	breq	.+6      	; 0x442 <twi_send_dev_addr+0x38>
     43c:	8f ef       	ldi	r24, 0xFF	; 255
     43e:	9f ef       	ldi	r25, 0xFF	; 255
     440:	02 c0       	rjmp	.+4      	; 0x446 <twi_send_dev_addr+0x3c>
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <twi_send_data>:
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	1f 92       	push	r1
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	a6 df       	rcall	.-180    	; 0x3ac <twiSendByte>
     460:	8a df       	rcall	.-236    	; 0x376 <twiWaitAck>
     462:	98 df       	rcall	.-208    	; 0x394 <twiChkAck>
     464:	88 32       	cpi	r24, 0x28	; 40
     466:	19 f0       	breq	.+6      	; 0x46e <twi_send_data+0x1e>
     468:	8f ef       	ldi	r24, 0xFF	; 255
     46a:	9f ef       	ldi	r25, 0xFF	; 255
     46c:	02 c0       	rjmp	.+4      	; 0x472 <twi_send_data+0x22>
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0f 90       	pop	r0
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <twi_write>:
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	28 97       	sbiw	r28, 0x08	; 8
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	8b 83       	std	Y+3, r24	; 0x03
     490:	6c 83       	std	Y+4, r22	; 0x04
     492:	5e 83       	std	Y+6, r21	; 0x06
     494:	4d 83       	std	Y+5, r20	; 0x05
     496:	38 87       	std	Y+8, r19	; 0x08
     498:	2f 83       	std	Y+7, r18	; 0x07
     49a:	9d df       	rcall	.-198    	; 0x3d6 <twi_start>
     49c:	89 2b       	or	r24, r25
     49e:	19 f0       	breq	.+6      	; 0x4a6 <twi_write+0x2c>
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	9f ef       	ldi	r25, 0xFF	; 255
     4a4:	30 c0       	rjmp	.+96     	; 0x506 <twi_write+0x8c>
     4a6:	8b 81       	ldd	r24, Y+3	; 0x03
     4a8:	88 0f       	add	r24, r24
     4aa:	af df       	rcall	.-162    	; 0x40a <twi_send_dev_addr>
     4ac:	89 2b       	or	r24, r25
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <twi_write+0x3c>
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	9f ef       	ldi	r25, 0xFF	; 255
     4b4:	28 c0       	rjmp	.+80     	; 0x506 <twi_write+0x8c>
     4b6:	8c 81       	ldd	r24, Y+4	; 0x04
     4b8:	cb df       	rcall	.-106    	; 0x450 <twi_send_data>
     4ba:	89 2b       	or	r24, r25
     4bc:	19 f0       	breq	.+6      	; 0x4c4 <twi_write+0x4a>
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	9f ef       	ldi	r25, 0xFF	; 255
     4c2:	21 c0       	rjmp	.+66     	; 0x506 <twi_write+0x8c>
     4c4:	1a 82       	std	Y+2, r1	; 0x02
     4c6:	19 82       	std	Y+1, r1	; 0x01
     4c8:	14 c0       	rjmp	.+40     	; 0x4f2 <twi_write+0x78>
     4ca:	8d 81       	ldd	r24, Y+5	; 0x05
     4cc:	9e 81       	ldd	r25, Y+6	; 0x06
     4ce:	9c 01       	movw	r18, r24
     4d0:	2f 5f       	subi	r18, 0xFF	; 255
     4d2:	3f 4f       	sbci	r19, 0xFF	; 255
     4d4:	3e 83       	std	Y+6, r19	; 0x06
     4d6:	2d 83       	std	Y+5, r18	; 0x05
     4d8:	fc 01       	movw	r30, r24
     4da:	80 81       	ld	r24, Z
     4dc:	b9 df       	rcall	.-142    	; 0x450 <twi_send_data>
     4de:	89 2b       	or	r24, r25
     4e0:	19 f0       	breq	.+6      	; 0x4e8 <twi_write+0x6e>
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	9f ef       	ldi	r25, 0xFF	; 255
     4e6:	0f c0       	rjmp	.+30     	; 0x506 <twi_write+0x8c>
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	9a 81       	ldd	r25, Y+2	; 0x02
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	9a 83       	std	Y+2, r25	; 0x02
     4f0:	89 83       	std	Y+1, r24	; 0x01
     4f2:	29 81       	ldd	r18, Y+1	; 0x01
     4f4:	3a 81       	ldd	r19, Y+2	; 0x02
     4f6:	8f 81       	ldd	r24, Y+7	; 0x07
     4f8:	98 85       	ldd	r25, Y+8	; 0x08
     4fa:	28 17       	cp	r18, r24
     4fc:	39 07       	cpc	r19, r25
     4fe:	2c f3       	brlt	.-54     	; 0x4ca <twi_write+0x50>
     500:	7b df       	rcall	.-266    	; 0x3f8 <twi_stop>
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	28 96       	adiw	r28, 0x08	; 8
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	cd bf       	out	0x3d, r28	; 61
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <twi_init>:

void twi_init(void)
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
    twi->twbr = 5;
     520:	80 e7       	ldi	r24, 0x70	; 112
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	25 e0       	ldi	r18, 0x05	; 5
     526:	fc 01       	movw	r30, r24
     528:	20 83       	st	Z, r18
    twi->twsr = 0;
     52a:	80 e7       	ldi	r24, 0x70	; 112
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	fc 01       	movw	r30, r24
     530:	11 82       	std	Z+1, r1	; 0x01
}
     532:	00 00       	nop
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <UART_Init>:
static void ssd1306_output_scan_direction2(bool enable)
{
	uint8_t cmd = 0xc0 | enable;

	ssd1306_cmd(&cmd, 1);
}
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
     542:	8a e2       	ldi	r24, 0x2A	; 42
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	28 e1       	ldi	r18, 0x18	; 24
     548:	fc 01       	movw	r30, r24
     54a:	20 83       	st	Z, r18
     54c:	85 e9       	ldi	r24, 0x95	; 149
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	26 e0       	ldi	r18, 0x06	; 6
     552:	fc 01       	movw	r30, r24
     554:	20 83       	st	Z, r18
     556:	89 e2       	ldi	r24, 0x29	; 41
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	27 e6       	ldi	r18, 0x67	; 103
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
     560:	00 00       	nop
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <UART0_Putch>:
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	1f 92       	push	r1
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	89 83       	std	Y+1, r24	; 0x01
     574:	00 00       	nop
     576:	8b e2       	ldi	r24, 0x2B	; 43
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	fc 01       	movw	r30, r24
     57c:	80 81       	ld	r24, Z
     57e:	88 2f       	mov	r24, r24
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	80 72       	andi	r24, 0x20	; 32
     584:	99 27       	eor	r25, r25
     586:	89 2b       	or	r24, r25
     588:	b1 f3       	breq	.-20     	; 0x576 <UART0_Putch+0xe>
     58a:	8c e2       	ldi	r24, 0x2C	; 44
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	29 81       	ldd	r18, Y+1	; 0x01
     590:	fc 01       	movw	r30, r24
     592:	20 83       	st	Z, r18
     594:	00 00       	nop
     596:	0f 90       	pop	r0
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <SendCommand>:
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	67 97       	sbiw	r28, 0x17	; 23
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	8f 8b       	std	Y+23, r24	; 0x17
     5b4:	1a 82       	std	Y+2, r1	; 0x02
     5b6:	19 82       	std	Y+1, r1	; 0x01
     5b8:	8e e7       	ldi	r24, 0x7E	; 126
     5ba:	d6 df       	rcall	.-84     	; 0x568 <UART0_Putch>
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	d4 df       	rcall	.-88     	; 0x568 <UART0_Putch>
     5c0:	86 e0       	ldi	r24, 0x06	; 6
     5c2:	d2 df       	rcall	.-92     	; 0x568 <UART0_Putch>
     5c4:	8f 89       	ldd	r24, Y+23	; 0x17
     5c6:	d0 df       	rcall	.-96     	; 0x568 <UART0_Putch>
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	ce df       	rcall	.-100    	; 0x568 <UART0_Putch>
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	cc df       	rcall	.-104    	; 0x568 <UART0_Putch>
     5d0:	8f 89       	ldd	r24, Y+23	; 0x17
     5d2:	89 30       	cpi	r24, 0x09	; 9
     5d4:	71 f0       	breq	.+28     	; 0x5f2 <SendCommand+0x54>
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	c7 df       	rcall	.-114    	; 0x568 <UART0_Putch>
     5da:	8f 89       	ldd	r24, Y+23	; 0x17
     5dc:	88 2f       	mov	r24, r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	2b ef       	ldi	r18, 0xFB	; 251
     5e2:	3e ef       	ldi	r19, 0xFE	; 254
     5e4:	a9 01       	movw	r20, r18
     5e6:	48 1b       	sub	r20, r24
     5e8:	59 0b       	sbc	r21, r25
     5ea:	ca 01       	movw	r24, r20
     5ec:	9a 83       	std	Y+2, r25	; 0x02
     5ee:	89 83       	std	Y+1, r24	; 0x01
     5f0:	0d c0       	rjmp	.+26     	; 0x60c <SendCommand+0x6e>
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	b9 df       	rcall	.-142    	; 0x568 <UART0_Putch>
     5f6:	8f 89       	ldd	r24, Y+23	; 0x17
     5f8:	88 2f       	mov	r24, r24
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	29 ef       	ldi	r18, 0xF9	; 249
     5fe:	3e ef       	ldi	r19, 0xFE	; 254
     600:	a9 01       	movw	r20, r18
     602:	48 1b       	sub	r20, r24
     604:	59 0b       	sbc	r21, r25
     606:	ca 01       	movw	r24, r20
     608:	9a 83       	std	Y+2, r25	; 0x02
     60a:	89 83       	std	Y+1, r24	; 0x01
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	9a 81       	ldd	r25, Y+2	; 0x02
     610:	89 2f       	mov	r24, r25
     612:	99 27       	eor	r25, r25
     614:	a9 df       	rcall	.-174    	; 0x568 <UART0_Putch>
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	a7 df       	rcall	.-178    	; 0x568 <UART0_Putch>
     61a:	8f ee       	ldi	r24, 0xEF	; 239
     61c:	a5 df       	rcall	.-182    	; 0x568 <UART0_Putch>
     61e:	00 00       	nop
     620:	67 96       	adiw	r28, 0x17	; 23
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <SendCommand01>:
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	69 97       	sbiw	r28, 0x19	; 25
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	8f 8b       	std	Y+23, r24	; 0x17
     648:	68 8f       	std	Y+24, r22	; 0x18
     64a:	49 8f       	std	Y+25, r20	; 0x19
     64c:	1a 82       	std	Y+2, r1	; 0x02
     64e:	19 82       	std	Y+1, r1	; 0x01
     650:	8e e7       	ldi	r24, 0x7E	; 126
     652:	8a df       	rcall	.-236    	; 0x568 <UART0_Putch>
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	88 df       	rcall	.-240    	; 0x568 <UART0_Putch>
     658:	86 e0       	ldi	r24, 0x06	; 6
     65a:	86 df       	rcall	.-244    	; 0x568 <UART0_Putch>
     65c:	8f 89       	ldd	r24, Y+23	; 0x17
     65e:	84 df       	rcall	.-248    	; 0x568 <UART0_Putch>
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	82 df       	rcall	.-252    	; 0x568 <UART0_Putch>
     664:	88 8d       	ldd	r24, Y+24	; 0x18
     666:	80 df       	rcall	.-256    	; 0x568 <UART0_Putch>
     668:	89 8d       	ldd	r24, Y+25	; 0x19
     66a:	7e df       	rcall	.-260    	; 0x568 <UART0_Putch>
     66c:	8f 89       	ldd	r24, Y+23	; 0x17
     66e:	88 2f       	mov	r24, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	9c 01       	movw	r18, r24
     674:	2b 5f       	subi	r18, 0xFB	; 251
     676:	3e 4f       	sbci	r19, 0xFE	; 254
     678:	88 8d       	ldd	r24, Y+24	; 0x18
     67a:	88 2f       	mov	r24, r24
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	28 0f       	add	r18, r24
     680:	39 1f       	adc	r19, r25
     682:	89 8d       	ldd	r24, Y+25	; 0x19
     684:	88 2f       	mov	r24, r24
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	82 0f       	add	r24, r18
     68a:	93 1f       	adc	r25, r19
     68c:	91 95       	neg	r25
     68e:	81 95       	neg	r24
     690:	91 09       	sbc	r25, r1
     692:	9a 83       	std	Y+2, r25	; 0x02
     694:	89 83       	std	Y+1, r24	; 0x01
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	9a 81       	ldd	r25, Y+2	; 0x02
     69a:	89 2f       	mov	r24, r25
     69c:	99 27       	eor	r25, r25
     69e:	64 df       	rcall	.-312    	; 0x568 <UART0_Putch>
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	62 df       	rcall	.-316    	; 0x568 <UART0_Putch>
     6a4:	8f ee       	ldi	r24, 0xEF	; 239
     6a6:	60 df       	rcall	.-320    	; 0x568 <UART0_Putch>
     6a8:	00 00       	nop
     6aa:	69 96       	adiw	r28, 0x19	; 25
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	f8 94       	cli
     6b0:	de bf       	out	0x3e, r29	; 62
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	cd bf       	out	0x3d, r28	; 61
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <ssd1306_cmd>:
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <ssd1306_cmd+0x6>
     6c2:	1f 92       	push	r1
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	9a 83       	std	Y+2, r25	; 0x02
     6ca:	89 83       	std	Y+1, r24	; 0x01
     6cc:	6b 83       	std	Y+3, r22	; 0x03
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	28 2f       	mov	r18, r24
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	9a 81       	ldd	r25, Y+2	; 0x02
     6d8:	ac 01       	movw	r20, r24
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	8c e3       	ldi	r24, 0x3C	; 60
     6de:	cd de       	rcall	.-614    	; 0x47a <twi_write>
     6e0:	00 00       	nop
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <ssd1306_data>:
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	00 d0       	rcall	.+0      	; 0x6f4 <ssd1306_data+0x6>
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <ssd1306_data+0x8>
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	9a 83       	std	Y+2, r25	; 0x02
     6fc:	89 83       	std	Y+1, r24	; 0x01
     6fe:	7c 83       	std	Y+4, r23	; 0x04
     700:	6b 83       	std	Y+3, r22	; 0x03
     702:	2b 81       	ldd	r18, Y+3	; 0x03
     704:	3c 81       	ldd	r19, Y+4	; 0x04
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	9a 81       	ldd	r25, Y+2	; 0x02
     70a:	ac 01       	movw	r20, r24
     70c:	60 e4       	ldi	r22, 0x40	; 64
     70e:	8c e3       	ldi	r24, 0x3C	; 60
     710:	b4 de       	rcall	.-664    	; 0x47a <twi_write>
     712:	00 00       	nop
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <ssd1306_reset>:
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	00 00       	nop
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <ssd1306_chargepump_enable>:
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	00 d0       	rcall	.+0      	; 0x738 <ssd1306_chargepump_enable+0x6>
     738:	00 d0       	rcall	.+0      	; 0x73a <ssd1306_chargepump_enable+0x8>
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	8b 83       	std	Y+3, r24	; 0x03
     742:	8d e8       	ldi	r24, 0x8D	; 141
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	9c 81       	ldd	r25, Y+4	; 0x04
     74a:	89 2b       	or	r24, r25
     74c:	11 f0       	breq	.+4      	; 0x752 <ssd1306_chargepump_enable+0x20>
     74e:	84 e1       	ldi	r24, 0x14	; 20
     750:	01 c0       	rjmp	.+2      	; 0x754 <ssd1306_chargepump_enable+0x22>
     752:	80 e1       	ldi	r24, 0x10	; 16
     754:	8a 83       	std	Y+2, r24	; 0x02
     756:	62 e0       	ldi	r22, 0x02	; 2
     758:	ce 01       	movw	r24, r28
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	af df       	rcall	.-162    	; 0x6bc <ssd1306_cmd>
     75e:	00 00       	nop
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <ssd1306_entire_on>:
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	00 d0       	rcall	.+0      	; 0x774 <ssd1306_entire_on+0x6>
     774:	1f 92       	push	r1
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	9b 83       	std	Y+3, r25	; 0x03
     77c:	8a 83       	std	Y+2, r24	; 0x02
     77e:	8a 81       	ldd	r24, Y+2	; 0x02
     780:	84 6a       	ori	r24, 0xA4	; 164
     782:	89 83       	std	Y+1, r24	; 0x01
     784:	61 e0       	ldi	r22, 0x01	; 1
     786:	ce 01       	movw	r24, r28
     788:	01 96       	adiw	r24, 0x01	; 1
     78a:	98 df       	rcall	.-208    	; 0x6bc <ssd1306_cmd>
     78c:	00 00       	nop
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <ssd1306_display_on>:
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <ssd1306_display_on+0x6>
     7a0:	1f 92       	push	r1
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	9b 83       	std	Y+3, r25	; 0x03
     7a8:	8a 83       	std	Y+2, r24	; 0x02
     7aa:	8a 81       	ldd	r24, Y+2	; 0x02
     7ac:	8e 6a       	ori	r24, 0xAE	; 174
     7ae:	89 83       	std	Y+1, r24	; 0x01
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	82 df       	rcall	.-252    	; 0x6bc <ssd1306_cmd>
     7b8:	00 00       	nop
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	08 95       	ret

000007c6 <ssd1306_set_addr_mode>:
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <ssd1306_set_addr_mode+0x6>
     7cc:	1f 92       	push	r1
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	8b 83       	std	Y+3, r24	; 0x03
     7d4:	80 e2       	ldi	r24, 0x20	; 32
     7d6:	89 83       	std	Y+1, r24	; 0x01
     7d8:	8b 81       	ldd	r24, Y+3	; 0x03
     7da:	8a 83       	std	Y+2, r24	; 0x02
     7dc:	62 e0       	ldi	r22, 0x02	; 2
     7de:	ce 01       	movw	r24, r28
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	6c df       	rcall	.-296    	; 0x6bc <ssd1306_cmd>
     7e4:	00 00       	nop
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <ssd1306_set_page_start>:
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <ssd1306_set_page_start+0x6>
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	8a 83       	std	Y+2, r24	; 0x02
     7fe:	8a 81       	ldd	r24, Y+2	; 0x02
     800:	80 6b       	ori	r24, 0xB0	; 176
     802:	89 83       	std	Y+1, r24	; 0x01
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	ce 01       	movw	r24, r28
     808:	01 96       	adiw	r24, 0x01	; 1
     80a:	58 df       	rcall	.-336    	; 0x6bc <ssd1306_cmd>
     80c:	00 00       	nop
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <ssd1306_set_column_addr>:
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	00 d0       	rcall	.+0      	; 0x81e <ssd1306_set_column_addr+0x6>
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
     822:	8a 83       	std	Y+2, r24	; 0x02
     824:	8a 81       	ldd	r24, Y+2	; 0x02
     826:	8f 70       	andi	r24, 0x0F	; 15
     828:	89 83       	std	Y+1, r24	; 0x01
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	ce 01       	movw	r24, r28
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	45 df       	rcall	.-374    	; 0x6bc <ssd1306_cmd>
     832:	8a 81       	ldd	r24, Y+2	; 0x02
     834:	82 95       	swap	r24
     836:	8f 70       	andi	r24, 0x0F	; 15
     838:	80 61       	ori	r24, 0x10	; 16
     83a:	89 83       	std	Y+1, r24	; 0x01
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	3c df       	rcall	.-392    	; 0x6bc <ssd1306_cmd>
     844:	00 00       	nop
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <ssd1306_reverse>:
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <ssd1306_reverse+0x6>
     856:	1f 92       	push	r1
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	9b 83       	std	Y+3, r25	; 0x03
     85e:	8a 83       	std	Y+2, r24	; 0x02
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	80 6a       	ori	r24, 0xA0	; 160
     864:	89 83       	std	Y+1, r24	; 0x01
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	ce 01       	movw	r24, r28
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	27 df       	rcall	.-434    	; 0x6bc <ssd1306_cmd>
     86e:	00 00       	nop
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <ssd1306_normal_display>:
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	00 d0       	rcall	.+0      	; 0x882 <ssd1306_normal_display+0x6>
     882:	1f 92       	push	r1
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	9b 83       	std	Y+3, r25	; 0x03
     88a:	8a 83       	std	Y+2, r24	; 0x02
     88c:	8a 81       	ldd	r24, Y+2	; 0x02
     88e:	86 6a       	ori	r24, 0xA6	; 166
     890:	89 83       	std	Y+1, r24	; 0x01
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	ce 01       	movw	r24, r28
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	11 df       	rcall	.-478    	; 0x6bc <ssd1306_cmd>
     89a:	00 00       	nop
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <ssd1306_output_scan_direction>:
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <ssd1306_output_scan_direction+0x6>
     8ae:	1f 92       	push	r1
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	9b 83       	std	Y+3, r25	; 0x03
     8b6:	8a 83       	std	Y+2, r24	; 0x02
     8b8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ba:	88 6c       	ori	r24, 0xC8	; 200
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	61 e0       	ldi	r22, 0x01	; 1
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	fb de       	rcall	.-522    	; 0x6bc <ssd1306_cmd>
     8c6:	00 00       	nop
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <ssd1306_init>:


void ssd1306_init(void)
{
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	2e 97       	sbiw	r28, 0x0e	; 14
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	a0 e8       	ldi	r26, 0x80	; 128
     8ee:	bf e3       	ldi	r27, 0x3F	; 63
     8f0:	89 83       	std	Y+1, r24	; 0x01
     8f2:	9a 83       	std	Y+2, r25	; 0x02
     8f4:	ab 83       	std	Y+3, r26	; 0x03
     8f6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	4a e7       	ldi	r20, 0x7A	; 122
     8fe:	55 e4       	ldi	r21, 0x45	; 69
     900:	69 81       	ldd	r22, Y+1	; 0x01
     902:	7a 81       	ldd	r23, Y+2	; 0x02
     904:	8b 81       	ldd	r24, Y+3	; 0x03
     906:	9c 81       	ldd	r25, Y+4	; 0x04
     908:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__mulsf3>
     90c:	dc 01       	movw	r26, r24
     90e:	cb 01       	movw	r24, r22
     910:	8d 83       	std	Y+5, r24	; 0x05
     912:	9e 83       	std	Y+6, r25	; 0x06
     914:	af 83       	std	Y+7, r26	; 0x07
     916:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	40 e8       	ldi	r20, 0x80	; 128
     91e:	5f e3       	ldi	r21, 0x3F	; 63
     920:	6d 81       	ldd	r22, Y+5	; 0x05
     922:	7e 81       	ldd	r23, Y+6	; 0x06
     924:	8f 81       	ldd	r24, Y+7	; 0x07
     926:	98 85       	ldd	r25, Y+8	; 0x08
     928:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__cmpsf2>
     92c:	88 23       	and	r24, r24
     92e:	2c f4       	brge	.+10     	; 0x93a <ssd1306_init+0x66>
		__ticks = 1;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	9a 87       	std	Y+10, r25	; 0x0a
     936:	89 87       	std	Y+9, r24	; 0x09
     938:	3f c0       	rjmp	.+126    	; 0x9b8 <ssd1306_init+0xe4>
	else if (__tmp > 65535)
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	3f ef       	ldi	r19, 0xFF	; 255
     93e:	4f e7       	ldi	r20, 0x7F	; 127
     940:	57 e4       	ldi	r21, 0x47	; 71
     942:	6d 81       	ldd	r22, Y+5	; 0x05
     944:	7e 81       	ldd	r23, Y+6	; 0x06
     946:	8f 81       	ldd	r24, Y+7	; 0x07
     948:	98 85       	ldd	r25, Y+8	; 0x08
     94a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__gesf2>
     94e:	18 16       	cp	r1, r24
     950:	4c f5       	brge	.+82     	; 0x9a4 <ssd1306_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e2       	ldi	r20, 0x20	; 32
     958:	51 e4       	ldi	r21, 0x41	; 65
     95a:	69 81       	ldd	r22, Y+1	; 0x01
     95c:	7a 81       	ldd	r23, Y+2	; 0x02
     95e:	8b 81       	ldd	r24, Y+3	; 0x03
     960:	9c 81       	ldd	r25, Y+4	; 0x04
     962:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__mulsf3>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	bc 01       	movw	r22, r24
     96c:	cd 01       	movw	r24, r26
     96e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__fixunssfsi>
     972:	dc 01       	movw	r26, r24
     974:	cb 01       	movw	r24, r22
     976:	9a 87       	std	Y+10, r25	; 0x0a
     978:	89 87       	std	Y+9, r24	; 0x09
     97a:	0f c0       	rjmp	.+30     	; 0x99a <ssd1306_init+0xc6>
     97c:	80 e9       	ldi	r24, 0x90	; 144
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	9c 87       	std	Y+12, r25	; 0x0c
     982:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     984:	8b 85       	ldd	r24, Y+11	; 0x0b
     986:	9c 85       	ldd	r25, Y+12	; 0x0c
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	f1 f7       	brne	.-4      	; 0x988 <ssd1306_init+0xb4>
     98c:	9c 87       	std	Y+12, r25	; 0x0c
     98e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     990:	89 85       	ldd	r24, Y+9	; 0x09
     992:	9a 85       	ldd	r25, Y+10	; 0x0a
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	9a 87       	std	Y+10, r25	; 0x0a
     998:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     99a:	89 85       	ldd	r24, Y+9	; 0x09
     99c:	9a 85       	ldd	r25, Y+10	; 0x0a
     99e:	89 2b       	or	r24, r25
     9a0:	69 f7       	brne	.-38     	; 0x97c <ssd1306_init+0xa8>
     9a2:	14 c0       	rjmp	.+40     	; 0x9cc <ssd1306_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9a4:	6d 81       	ldd	r22, Y+5	; 0x05
     9a6:	7e 81       	ldd	r23, Y+6	; 0x06
     9a8:	8f 81       	ldd	r24, Y+7	; 0x07
     9aa:	98 85       	ldd	r25, Y+8	; 0x08
     9ac:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__fixunssfsi>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	9a 87       	std	Y+10, r25	; 0x0a
     9b6:	89 87       	std	Y+9, r24	; 0x09
     9b8:	89 85       	ldd	r24, Y+9	; 0x09
     9ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     9bc:	9e 87       	std	Y+14, r25	; 0x0e
     9be:	8d 87       	std	Y+13, r24	; 0x0d
     9c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     9c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <ssd1306_init+0xf0>
     9c8:	9e 87       	std	Y+14, r25	; 0x0e
     9ca:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);

	ssd1306_reset();
     9cc:	aa de       	rcall	.-684    	; 0x722 <ssd1306_reset>

	ssd1306_chargepump_enable(true);
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	af de       	rcall	.-674    	; 0x732 <ssd1306_chargepump_enable>
	ssd1306_entire_on(false);
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	ca de       	rcall	.-620    	; 0x76e <ssd1306_entire_on>
	ssd1306_display_on(true);
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	dd de       	rcall	.-582    	; 0x79a <ssd1306_display_on>
     9e0:	00 00       	nop
}
     9e2:	2e 96       	adiw	r28, 0x0e	; 14
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <clear_screen>:
     9f4:	cf 93       	push	r28
static uint8_t gddram[COL_NUM];



void clear_screen(void)
{
     9f6:	df 93       	push	r29
     9f8:	00 d0       	rcall	.+0      	; 0x9fa <clear_screen+0x6>
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
     9fe:	1a 82       	std	Y+2, r1	; 0x02
     a00:	0a c0       	rjmp	.+20     	; 0xa16 <clear_screen+0x22>
	gddram[col] = 0;
     a02:	8a 81       	ldd	r24, Y+2	; 0x02
     a04:	88 2f       	mov	r24, r24
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	88 54       	subi	r24, 0x48	; 72
     a0a:	99 4f       	sbci	r25, 0xF9	; 249
     a0c:	fc 01       	movw	r30, r24
     a0e:	10 82       	st	Z, r1
void clear_screen(void)
{
	uint8_t page;
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
     a10:	8a 81       	ldd	r24, Y+2	; 0x02
     a12:	8f 5f       	subi	r24, 0xFF	; 255
     a14:	8a 83       	std	Y+2, r24	; 0x02
     a16:	8a 81       	ldd	r24, Y+2	; 0x02
     a18:	88 23       	and	r24, r24
     a1a:	9c f7       	brge	.-26     	; 0xa02 <clear_screen+0xe>
	gddram[col] = 0;

	for (page=0; page<PAGE_NUM; page++)
     a1c:	19 82       	std	Y+1, r1	; 0x01
     a1e:	0a c0       	rjmp	.+20     	; 0xa34 <clear_screen+0x40>
	{
		ssd1306_set_page_start(page);
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	e7 de       	rcall	.-562    	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_data(gddram, COL_NUM);
     a24:	60 e8       	ldi	r22, 0x80	; 128
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	88 eb       	ldi	r24, 0xB8	; 184
     a2a:	96 e0       	ldi	r25, 0x06	; 6
     a2c:	60 de       	rcall	.-832    	; 0x6ee <ssd1306_data>
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
	gddram[col] = 0;

	for (page=0; page<PAGE_NUM; page++)
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	8f 5f       	subi	r24, 0xFF	; 255
     a32:	89 83       	std	Y+1, r24	; 0x01
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	88 30       	cpi	r24, 0x08	; 8
	{
		ssd1306_set_page_start(page);
		ssd1306_data(gddram, COL_NUM);
	}

	ssd1306_set_column_addr(0);
     a38:	98 f3       	brcs	.-26     	; 0xa20 <clear_screen+0x2c>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	ed de       	rcall	.-550    	; 0x818 <ssd1306_set_column_addr>
}
     a3e:	00 00       	nop
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <oled_msg>:



extern void get_ch_data(char ch, uint8_t *buffer);
int oled_msg(int row, int col, const char *fmt, ...)
{
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	6c 97       	sbiw	r28, 0x1c	; 28
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
	va_list     ap;
	char        buf[MAX_CH_PER_LINE + 1];
	int         rc, i;

	va_start(ap, fmt);
     a5e:	ce 01       	movw	r24, r28
     a60:	87 96       	adiw	r24, 0x27	; 39
     a62:	9e 83       	std	Y+6, r25	; 0x06
     a64:	8d 83       	std	Y+5, r24	; 0x05
	rc = vsprintf(buf, fmt, ap);
     a66:	4d 81       	ldd	r20, Y+5	; 0x05
     a68:	5e 81       	ldd	r21, Y+6	; 0x06
     a6a:	2d a1       	ldd	r18, Y+37	; 0x25
     a6c:	3e a1       	ldd	r19, Y+38	; 0x26
     a6e:	ce 01       	movw	r24, r28
     a70:	07 96       	adiw	r24, 0x07	; 7
     a72:	b9 01       	movw	r22, r18
     a74:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <vsprintf>
     a78:	9c 83       	std	Y+4, r25	; 0x04
     a7a:	8b 83       	std	Y+3, r24	; 0x03
	va_end(ap);

	if (rc > 0)
     a7c:	8b 81       	ldd	r24, Y+3	; 0x03
     a7e:	9c 81       	ldd	r25, Y+4	; 0x04
     a80:	18 16       	cp	r1, r24
     a82:	19 06       	cpc	r1, r25
     a84:	0c f0       	brlt	.+2      	; 0xa88 <oled_msg+0x3e>
     a86:	3b c0       	rjmp	.+118    	; 0xafe <oled_msg+0xb4>
	{
		for (i=0; i<rc; i++)
     a88:	1a 82       	std	Y+2, r1	; 0x02
     a8a:	19 82       	std	Y+1, r1	; 0x01
     a8c:	1c c0       	rjmp	.+56     	; 0xac6 <oled_msg+0x7c>
		get_ch_data(buf[i], &gddram[i * CHAR_WIDTH]);
     a8e:	29 81       	ldd	r18, Y+1	; 0x01
     a90:	3a 81       	ldd	r19, Y+2	; 0x02
     a92:	c9 01       	movw	r24, r18
     a94:	88 0f       	add	r24, r24
     a96:	99 1f       	adc	r25, r25
     a98:	82 0f       	add	r24, r18
     a9a:	93 1f       	adc	r25, r19
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	ac 01       	movw	r20, r24
     aa2:	48 54       	subi	r20, 0x48	; 72
     aa4:	59 4f       	sbci	r21, 0xF9	; 249
     aa6:	9e 01       	movw	r18, r28
     aa8:	29 5f       	subi	r18, 0xF9	; 249
     aaa:	3f 4f       	sbci	r19, 0xFF	; 255
     aac:	89 81       	ldd	r24, Y+1	; 0x01
     aae:	9a 81       	ldd	r25, Y+2	; 0x02
     ab0:	82 0f       	add	r24, r18
     ab2:	93 1f       	adc	r25, r19
     ab4:	fc 01       	movw	r30, r24
     ab6:	80 81       	ld	r24, Z
     ab8:	ba 01       	movw	r22, r20
     aba:	f8 db       	rcall	.-2064   	; 0x2ac <get_ch_data>
	rc = vsprintf(buf, fmt, ap);
	va_end(ap);

	if (rc > 0)
	{
		for (i=0; i<rc; i++)
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	9a 81       	ldd	r25, Y+2	; 0x02
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	9a 83       	std	Y+2, r25	; 0x02
     ac4:	89 83       	std	Y+1, r24	; 0x01
     ac6:	29 81       	ldd	r18, Y+1	; 0x01
     ac8:	3a 81       	ldd	r19, Y+2	; 0x02
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	9c 81       	ldd	r25, Y+4	; 0x04
     ace:	28 17       	cp	r18, r24
     ad0:	39 07       	cpc	r19, r25
     ad2:	ec f2       	brlt	.-70     	; 0xa8e <oled_msg+0x44>
		get_ch_data(buf[i], &gddram[i * CHAR_WIDTH]);

		ssd1306_set_page_start(row);
     ad4:	89 a1       	ldd	r24, Y+33	; 0x21
     ad6:	8d de       	rcall	.-742    	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_set_column_addr(col * CHAR_WIDTH);
     ad8:	9b a1       	ldd	r25, Y+35	; 0x23
     ada:	89 2f       	mov	r24, r25
     adc:	88 0f       	add	r24, r24
     ade:	89 0f       	add	r24, r25
     ae0:	88 0f       	add	r24, r24
     ae2:	9a de       	rcall	.-716    	; 0x818 <ssd1306_set_column_addr>
		ssd1306_data(gddram, rc * CHAR_WIDTH);
     ae4:	2b 81       	ldd	r18, Y+3	; 0x03
     ae6:	3c 81       	ldd	r19, Y+4	; 0x04
     ae8:	c9 01       	movw	r24, r18
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	82 0f       	add	r24, r18
     af0:	93 1f       	adc	r25, r19
     af2:	88 0f       	add	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	bc 01       	movw	r22, r24
     af8:	88 eb       	ldi	r24, 0xB8	; 184
     afa:	96 e0       	ldi	r25, 0x06	; 6
     afc:	f8 dd       	rcall	.-1040   	; 0x6ee <ssd1306_data>
	}

	return rc;
     afe:	8b 81       	ldd	r24, Y+3	; 0x03
     b00:	9c 81       	ldd	r25, Y+4	; 0x04
}
     b02:	6c 96       	adiw	r28, 0x1c	; 28
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <draw_picture>:




void draw_picture(char array[])
{
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	00 d0       	rcall	.+0      	; 0xb1a <draw_picture+0x6>
     b1a:	1f 92       	push	r1
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	9b 83       	std	Y+3, r25	; 0x03
     b22:	8a 83       	std	Y+2, r24	; 0x02
	//clear_screen();
	unsigned char x,y;
	for(y=0;y<8;y++)
     b24:	19 82       	std	Y+1, r1	; 0x01
     b26:	15 c0       	rjmp	.+42     	; 0xb52 <draw_picture+0x3e>
	{
		ssd1306_set_page_start(y);
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	63 de       	rcall	.-826    	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_data(array+(y*COL_NUM), COL_NUM);
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	88 2f       	mov	r24, r24
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	96 95       	lsr	r25
     b34:	98 2f       	mov	r25, r24
     b36:	88 27       	eor	r24, r24
     b38:	97 95       	ror	r25
     b3a:	87 95       	ror	r24
     b3c:	9c 01       	movw	r18, r24
     b3e:	8a 81       	ldd	r24, Y+2	; 0x02
     b40:	9b 81       	ldd	r25, Y+3	; 0x03
     b42:	82 0f       	add	r24, r18
     b44:	93 1f       	adc	r25, r19
     b46:	60 e8       	ldi	r22, 0x80	; 128
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	d1 dd       	rcall	.-1118   	; 0x6ee <ssd1306_data>

void draw_picture(char array[])
{
	//clear_screen();
	unsigned char x,y;
	for(y=0;y<8;y++)
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	8f 5f       	subi	r24, 0xFF	; 255
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	88 30       	cpi	r24, 0x08	; 8
     b56:	40 f3       	brcs	.-48     	; 0xb28 <draw_picture+0x14>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(array+(y*COL_NUM), COL_NUM);
	}
}
     b58:	00 00       	nop
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <setup>:

void setup(void)
{
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
	twi_init();
     b6e:	d4 dc       	rcall	.-1624   	; 0x518 <twi_init>

	ssd1306_init();
     b70:	b1 de       	rcall	.-670    	; 0x8d4 <ssd1306_init>
	ssd1306_set_addr_mode(PAGE);
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	28 de       	rcall	.-944    	; 0x7c6 <ssd1306_set_addr_mode>
	

	clear_screen();
     b76:	3e df       	rcall	.-388    	; 0x9f4 <clear_screen>
	
	ssd1306_output_scan_direction(0);		//위아래 역전
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	95 de       	rcall	.-726    	; 0x8a8 <ssd1306_output_scan_direction>
	ssd1306_reverse(1);		//왼쪽 오른쪽 역전
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	66 de       	rcall	.-820    	; 0x850 <ssd1306_reverse>
	ssd1306_normal_display(0);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	79 de       	rcall	.-782    	; 0x87c <ssd1306_normal_display>
     b8a:	00 00       	nop

}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <__vector_6>:
     b92:	1f 92       	push	r1
void game_over();
void food();
void clear_map();

ISR(INT5_vect)
{
     b94:	0f 92       	push	r0
     b96:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b9a:	0f 92       	push	r0
     b9c:	11 24       	eor	r1, r1
     b9e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     ba2:	0f 92       	push	r0
     ba4:	2f 93       	push	r18
     ba6:	3f 93       	push	r19
     ba8:	4f 93       	push	r20
     baa:	5f 93       	push	r21
     bac:	6f 93       	push	r22
     bae:	7f 93       	push	r23
     bb0:	8f 93       	push	r24
     bb2:	9f 93       	push	r25
     bb4:	af 93       	push	r26
     bb6:	bf 93       	push	r27
     bb8:	ef 93       	push	r30
     bba:	ff 93       	push	r31
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
	game = 1;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     bcc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if(dir != DOWN)
     bd0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     bd4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     bd8:	80 35       	cpi	r24, 0x50	; 80
     bda:	91 05       	cpc	r25, r1
     bdc:	51 f0       	breq	.+20     	; 0xbf2 <__vector_6+0x60>
	{
		SendCommand01(0x0F, 0x01, 0x03);
     bde:	43 e0       	ldi	r20, 0x03	; 3
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	8f e0       	ldi	r24, 0x0F	; 15
     be4:	26 dd       	rcall	.-1460   	; 0x632 <SendCommand01>
		
		dir = UP;
     be6:	88 e4       	ldi	r24, 0x48	; 72
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     bee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     bf2:	00 00       	nop
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	ff 91       	pop	r31
     bfa:	ef 91       	pop	r30
     bfc:	bf 91       	pop	r27
     bfe:	af 91       	pop	r26
     c00:	9f 91       	pop	r25
     c02:	8f 91       	pop	r24
     c04:	7f 91       	pop	r23
     c06:	6f 91       	pop	r22
     c08:	5f 91       	pop	r21
     c0a:	4f 91       	pop	r20
     c0c:	3f 91       	pop	r19
     c0e:	2f 91       	pop	r18
     c10:	0f 90       	pop	r0
     c12:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     c16:	0f 90       	pop	r0
     c18:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c1c:	0f 90       	pop	r0
     c1e:	1f 90       	pop	r1
     c20:	18 95       	reti

00000c22 <__vector_7>:

ISR(INT6_vect)
{
     c22:	1f 92       	push	r1
     c24:	0f 92       	push	r0
     c26:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c2a:	0f 92       	push	r0
     c2c:	11 24       	eor	r1, r1
     c2e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     c32:	0f 92       	push	r0
     c34:	2f 93       	push	r18
     c36:	3f 93       	push	r19
     c38:	4f 93       	push	r20
     c3a:	5f 93       	push	r21
     c3c:	6f 93       	push	r22
     c3e:	7f 93       	push	r23
     c40:	8f 93       	push	r24
     c42:	9f 93       	push	r25
     c44:	af 93       	push	r26
     c46:	bf 93       	push	r27
     c48:	ef 93       	push	r30
     c4a:	ff 93       	push	r31
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
	game = 1;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     c5c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if(dir != UP)
     c60:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     c64:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     c68:	88 34       	cpi	r24, 0x48	; 72
     c6a:	91 05       	cpc	r25, r1
     c6c:	51 f0       	breq	.+20     	; 0xc82 <__vector_7+0x60>
	{
		SendCommand01(0x0F, 0x01, 0x03);
     c6e:	43 e0       	ldi	r20, 0x03	; 3
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	8f e0       	ldi	r24, 0x0F	; 15
     c74:	de dc       	rcall	.-1604   	; 0x632 <SendCommand01>
		
		dir = DOWN;
     c76:	80 e5       	ldi	r24, 0x50	; 80
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     c7e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     c82:	00 00       	nop
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	ff 91       	pop	r31
     c8a:	ef 91       	pop	r30
     c8c:	bf 91       	pop	r27
     c8e:	af 91       	pop	r26
     c90:	9f 91       	pop	r25
     c92:	8f 91       	pop	r24
     c94:	7f 91       	pop	r23
     c96:	6f 91       	pop	r22
     c98:	5f 91       	pop	r21
     c9a:	4f 91       	pop	r20
     c9c:	3f 91       	pop	r19
     c9e:	2f 91       	pop	r18
     ca0:	0f 90       	pop	r0
     ca2:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     ca6:	0f 90       	pop	r0
     ca8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <__vector_8>:

ISR(INT7_vect)
{	
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     cc2:	0f 92       	push	r0
     cc4:	2f 93       	push	r18
     cc6:	3f 93       	push	r19
     cc8:	4f 93       	push	r20
     cca:	5f 93       	push	r21
     ccc:	6f 93       	push	r22
     cce:	7f 93       	push	r23
     cd0:	8f 93       	push	r24
     cd2:	9f 93       	push	r25
     cd4:	af 93       	push	r26
     cd6:	bf 93       	push	r27
     cd8:	ef 93       	push	r30
     cda:	ff 93       	push	r31
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
	game = 1;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     cec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if(dir != RIGHT)
     cf0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     cf4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     cf8:	8d 34       	cpi	r24, 0x4D	; 77
     cfa:	91 05       	cpc	r25, r1
     cfc:	51 f0       	breq	.+20     	; 0xd12 <__vector_8+0x60>
	{
		SendCommand01(0x0F, 0x01, 0x03);
     cfe:	43 e0       	ldi	r20, 0x03	; 3
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	8f e0       	ldi	r24, 0x0F	; 15
     d04:	96 dc       	rcall	.-1748   	; 0x632 <SendCommand01>
		
		dir = LEFT;
     d06:	8b e4       	ldi	r24, 0x4B	; 75
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     d0e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     d12:	00 00       	nop
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	ff 91       	pop	r31
     d1a:	ef 91       	pop	r30
     d1c:	bf 91       	pop	r27
     d1e:	af 91       	pop	r26
     d20:	9f 91       	pop	r25
     d22:	8f 91       	pop	r24
     d24:	7f 91       	pop	r23
     d26:	6f 91       	pop	r22
     d28:	5f 91       	pop	r21
     d2a:	4f 91       	pop	r20
     d2c:	3f 91       	pop	r19
     d2e:	2f 91       	pop	r18
     d30:	0f 90       	pop	r0
     d32:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     d36:	0f 90       	pop	r0
     d38:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d3c:	0f 90       	pop	r0
     d3e:	1f 90       	pop	r1
     d40:	18 95       	reti

00000d42 <__vector_5>:

ISR(INT4_vect)
{
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d4a:	0f 92       	push	r0
     d4c:	11 24       	eor	r1, r1
     d4e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     d52:	0f 92       	push	r0
     d54:	2f 93       	push	r18
     d56:	3f 93       	push	r19
     d58:	4f 93       	push	r20
     d5a:	5f 93       	push	r21
     d5c:	6f 93       	push	r22
     d5e:	7f 93       	push	r23
     d60:	8f 93       	push	r24
     d62:	9f 93       	push	r25
     d64:	af 93       	push	r26
     d66:	bf 93       	push	r27
     d68:	ef 93       	push	r30
     d6a:	ff 93       	push	r31
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
	game = 1;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     d7c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if(dir != LEFT)
     d80:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     d84:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     d88:	8b 34       	cpi	r24, 0x4B	; 75
     d8a:	91 05       	cpc	r25, r1
     d8c:	51 f0       	breq	.+20     	; 0xda2 <__vector_5+0x60>
	{
		SendCommand01(0x0F, 0x01, 0x03);
     d8e:	43 e0       	ldi	r20, 0x03	; 3
     d90:	61 e0       	ldi	r22, 0x01	; 1
     d92:	8f e0       	ldi	r24, 0x0F	; 15
     d94:	4e dc       	rcall	.-1892   	; 0x632 <SendCommand01>
		
		dir = RIGHT;
     d96:	8d e4       	ldi	r24, 0x4D	; 77
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     d9e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     da2:	00 00       	nop
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	ff 91       	pop	r31
     daa:	ef 91       	pop	r30
     dac:	bf 91       	pop	r27
     dae:	af 91       	pop	r26
     db0:	9f 91       	pop	r25
     db2:	8f 91       	pop	r24
     db4:	7f 91       	pop	r23
     db6:	6f 91       	pop	r22
     db8:	5f 91       	pop	r21
     dba:	4f 91       	pop	r20
     dbc:	3f 91       	pop	r19
     dbe:	2f 91       	pop	r18
     dc0:	0f 90       	pop	r0
     dc2:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     dc6:	0f 90       	pop	r0
     dc8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <__vector_4>:

ISR(INT3_vect)
{
     dd2:	1f 92       	push	r1
     dd4:	0f 92       	push	r0
     dd6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     dda:	0f 92       	push	r0
     ddc:	11 24       	eor	r1, r1
     dde:	8f 93       	push	r24
     de0:	9f 93       	push	r25
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
	game = 1;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     df2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
}
     df6:	00 00       	nop
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	9f 91       	pop	r25
     dfe:	8f 91       	pop	r24
     e00:	0f 90       	pop	r0
     e02:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <title>:


void title()
{
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	00 d0       	rcall	.+0      	; 0xe12 <title+0x6>
     e12:	00 d0       	rcall	.+0      	; 0xe14 <title+0x8>
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
	oled_msg(0, 3, "KMM's SNAKE GAME");
     e18:	8d e9       	ldi	r24, 0x9D	; 157
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	89 2f       	mov	r24, r25
     e1e:	8f 93       	push	r24
     e20:	8d e9       	ldi	r24, 0x9D	; 157
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	8f 93       	push	r24
     e26:	1f 92       	push	r1
     e28:	83 e0       	ldi	r24, 0x03	; 3
     e2a:	8f 93       	push	r24
     e2c:	1f 92       	push	r1
     e2e:	1f 92       	push	r1
     e30:	0c de       	rcall	.-1000   	; 0xa4a <oled_msg>
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
	for(int i = 0; i < 128; i++)
     e3e:	1a 82       	std	Y+2, r1	; 0x02
     e40:	19 82       	std	Y+1, r1	; 0x01
     e42:	17 c0       	rjmp	.+46     	; 0xe72 <title+0x66>
	{
		ssd1306_set_page_start(2);
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	d5 dc       	rcall	.-1622   	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	e6 dc       	rcall	.-1588   	; 0x818 <ssd1306_set_column_addr>
     e4c:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(horizon1, 1);
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	8a e0       	ldi	r24, 0x0A	; 10
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	4c dc       	rcall	.-1896   	; 0x6ee <ssd1306_data>
		ssd1306_set_page_start(7);
     e56:	87 e0       	ldi	r24, 0x07	; 7
     e58:	cc dc       	rcall	.-1640   	; 0x7f2 <ssd1306_set_page_start>
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
		ssd1306_set_column_addr(i);
     e5c:	dd dc       	rcall	.-1606   	; 0x818 <ssd1306_set_column_addr>
     e5e:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(horizon2, 1);
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	8b e0       	ldi	r24, 0x0B	; 11
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	43 dc       	rcall	.-1914   	; 0x6ee <ssd1306_data>
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	9a 81       	ldd	r25, Y+2	; 0x02


void title()
{
	oled_msg(0, 3, "KMM's SNAKE GAME");
	for(int i = 0; i < 128; i++)
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	9a 83       	std	Y+2, r25	; 0x02
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	80 38       	cpi	r24, 0x80	; 128
     e78:	91 05       	cpc	r25, r1
     e7a:	24 f3       	brlt	.-56     	; 0xe44 <title+0x38>
     e7c:	1c 82       	std	Y+4, r1	; 0x04
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
     e7e:	1b 82       	std	Y+3, r1	; 0x03
     e80:	15 c0       	rjmp	.+42     	; 0xeac <title+0xa0>
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
	{
		ssd1306_set_page_start(i);
     e84:	b6 dc       	rcall	.-1684   	; 0x7f2 <ssd1306_set_page_start>
     e86:	80 e0       	ldi	r24, 0x00	; 0
		ssd1306_set_column_addr(0);
     e88:	c7 dc       	rcall	.-1650   	; 0x818 <ssd1306_set_column_addr>
     e8a:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(vertical, 1);
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	8c e0       	ldi	r24, 0x0C	; 12
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	2d dc       	rcall	.-1958   	; 0x6ee <ssd1306_data>
     e94:	8f e7       	ldi	r24, 0x7F	; 127
		ssd1306_set_column_addr(127);
     e96:	c0 dc       	rcall	.-1664   	; 0x818 <ssd1306_set_column_addr>
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	70 e0       	ldi	r23, 0x00	; 0
		ssd1306_data(vertical, 1);
     e9c:	8c e0       	ldi	r24, 0x0C	; 12
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	26 dc       	rcall	.-1972   	; 0x6ee <ssd1306_data>
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
     ea4:	9c 81       	ldd	r25, Y+4	; 0x04
     ea6:	01 96       	adiw	r24, 0x01	; 1
     ea8:	9c 83       	std	Y+4, r25	; 0x04
     eaa:	8b 83       	std	Y+3, r24	; 0x03
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	08 97       	sbiw	r24, 0x08	; 8
     eb2:	3c f3       	brlt	.-50     	; 0xe82 <title+0x76>
     eb4:	09 d0       	rcall	.+18     	; 0xec8 <draw_map>
		ssd1306_data(vertical, 1);
		ssd1306_set_column_addr(127);
		ssd1306_data(vertical, 1);
	}

	draw_map();
     eb6:	2d d3       	rcall	.+1626   	; 0x1512 <food>
     eb8:	00 00       	nop
	
	food(); // food 생성
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0

}
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <draw_map>:
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	cd b7       	in	r28, 0x3d	; 61

void draw_map()
{
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	c7 50       	subi	r28, 0x07	; 7
     ed2:	d3 40       	sbci	r29, 0x03	; 3
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61
	unsigned char MAP [6][128] = {0};
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	33 e0       	ldi	r19, 0x03	; 3
     ee2:	ce 01       	movw	r24, r28
     ee4:	08 96       	adiw	r24, 0x08	; 8
     ee6:	dc 01       	movw	r26, r24
     ee8:	f9 01       	movw	r30, r18
     eea:	1d 92       	st	X+, r1
     eec:	31 97       	sbiw	r30, 0x01	; 1
     eee:	e9 f7       	brne	.-6      	; 0xeea <draw_map+0x22>

	for(int i = 0; i < 6; i++)
     ef0:	1a 82       	std	Y+2, r1	; 0x02
     ef2:	19 82       	std	Y+1, r1	; 0x01
     ef4:	7b c0       	rjmp	.+246    	; 0xfec <draw_map+0x124>
	{
		for(int j = 0; j < 128; j++)
     ef6:	1c 82       	std	Y+4, r1	; 0x04
     ef8:	1b 82       	std	Y+3, r1	; 0x03
     efa:	6d c0       	rjmp	.+218    	; 0xfd6 <draw_map+0x10e>
		{
			if(j == 0) MAP[i][j] = vertical[0];
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	89 2b       	or	r24, r25
     f02:	b1 f4       	brne	.+44     	; 0xf30 <draw_map+0x68>
     f04:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <vertical>
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	9a 81       	ldd	r25, Y+2	; 0x02
     f0c:	96 95       	lsr	r25
     f0e:	98 2f       	mov	r25, r24
     f10:	88 27       	eor	r24, r24
     f12:	97 95       	ror	r25
     f14:	87 95       	ror	r24
     f16:	9e 01       	movw	r18, r28
     f18:	2f 5f       	subi	r18, 0xFF	; 255
     f1a:	3f 4f       	sbci	r19, 0xFF	; 255
     f1c:	28 0f       	add	r18, r24
     f1e:	39 1f       	adc	r19, r25
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	9c 81       	ldd	r25, Y+4	; 0x04
     f24:	82 0f       	add	r24, r18
     f26:	93 1f       	adc	r25, r19
     f28:	07 96       	adiw	r24, 0x07	; 7
     f2a:	dc 01       	movw	r26, r24
     f2c:	4c 93       	st	X, r20
     f2e:	4e c0       	rjmp	.+156    	; 0xfcc <draw_map+0x104>
			else if(j == 127) MAP[i][j] = vertical[0];
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	8f 37       	cpi	r24, 0x7F	; 127
     f36:	91 05       	cpc	r25, r1
     f38:	b1 f4       	brne	.+44     	; 0xf66 <draw_map+0x9e>
     f3a:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <vertical>
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	96 95       	lsr	r25
     f44:	98 2f       	mov	r25, r24
     f46:	88 27       	eor	r24, r24
     f48:	97 95       	ror	r25
     f4a:	87 95       	ror	r24
     f4c:	9e 01       	movw	r18, r28
     f4e:	2f 5f       	subi	r18, 0xFF	; 255
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	28 0f       	add	r18, r24
     f54:	39 1f       	adc	r19, r25
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	82 0f       	add	r24, r18
     f5c:	93 1f       	adc	r25, r19
     f5e:	07 96       	adiw	r24, 0x07	; 7
     f60:	fc 01       	movw	r30, r24
     f62:	40 83       	st	Z, r20
     f64:	33 c0       	rjmp	.+102    	; 0xfcc <draw_map+0x104>
			else if(i == 0) MAP[i][j] = horizon1[0];
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	89 2b       	or	r24, r25
     f6c:	b1 f4       	brne	.+44     	; 0xf9a <draw_map+0xd2>
     f6e:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <horizon1>
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	96 95       	lsr	r25
     f78:	98 2f       	mov	r25, r24
     f7a:	88 27       	eor	r24, r24
     f7c:	97 95       	ror	r25
     f7e:	87 95       	ror	r24
     f80:	9e 01       	movw	r18, r28
     f82:	2f 5f       	subi	r18, 0xFF	; 255
     f84:	3f 4f       	sbci	r19, 0xFF	; 255
     f86:	28 0f       	add	r18, r24
     f88:	39 1f       	adc	r19, r25
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	82 0f       	add	r24, r18
     f90:	93 1f       	adc	r25, r19
     f92:	07 96       	adiw	r24, 0x07	; 7
     f94:	dc 01       	movw	r26, r24
     f96:	4c 93       	st	X, r20
     f98:	19 c0       	rjmp	.+50     	; 0xfcc <draw_map+0x104>
			else if(i == 5) MAP[i][j] = horizon2[0];
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	05 97       	sbiw	r24, 0x05	; 5
     fa0:	a9 f4       	brne	.+42     	; 0xfcc <draw_map+0x104>
     fa2:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <horizon2>
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	96 95       	lsr	r25
     fac:	98 2f       	mov	r25, r24
     fae:	88 27       	eor	r24, r24
     fb0:	97 95       	ror	r25
     fb2:	87 95       	ror	r24
     fb4:	9e 01       	movw	r18, r28
     fb6:	2f 5f       	subi	r18, 0xFF	; 255
     fb8:	3f 4f       	sbci	r19, 0xFF	; 255
     fba:	28 0f       	add	r18, r24
     fbc:	39 1f       	adc	r19, r25
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	9c 81       	ldd	r25, Y+4	; 0x04
     fc2:	82 0f       	add	r24, r18
     fc4:	93 1f       	adc	r25, r19
     fc6:	07 96       	adiw	r24, 0x07	; 7
     fc8:	fc 01       	movw	r30, r24
     fca:	40 83       	st	Z, r20
{
	unsigned char MAP [6][128] = {0};

	for(int i = 0; i < 6; i++)
	{
		for(int j = 0; j < 128; j++)
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9c 81       	ldd	r25, Y+4	; 0x04
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	9c 83       	std	Y+4, r25	; 0x04
     fd4:	8b 83       	std	Y+3, r24	; 0x03
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	80 38       	cpi	r24, 0x80	; 128
     fdc:	91 05       	cpc	r25, r1
     fde:	0c f4       	brge	.+2      	; 0xfe2 <draw_map+0x11a>
     fe0:	8d cf       	rjmp	.-230    	; 0xefc <draw_map+0x34>

void draw_map()
{
	unsigned char MAP [6][128] = {0};

	for(int i = 0; i < 6; i++)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	06 97       	sbiw	r24, 0x06	; 6
     ff2:	0c f4       	brge	.+2      	; 0xff6 <draw_map+0x12e>
     ff4:	80 cf       	rjmp	.-256    	; 0xef6 <draw_map+0x2e>
			else if(i == 0) MAP[i][j] = horizon1[0];
			else if(i == 5) MAP[i][j] = horizon2[0];
		}
	}

	MAP[2*(food_y)/8][2*(food_x)] |= ((0x03 << (2*(food_y) % 8)));
     ff6:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
     ffa:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	99 23       	and	r25, r25
    1004:	0c f4       	brge	.+2      	; 0x1008 <draw_map+0x140>
    1006:	07 96       	adiw	r24, 0x07	; 7
    1008:	95 95       	asr	r25
    100a:	87 95       	ror	r24
    100c:	95 95       	asr	r25
    100e:	87 95       	ror	r24
    1010:	95 95       	asr	r25
    1012:	87 95       	ror	r24
    1014:	9c 01       	movw	r18, r24
    1016:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    101a:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    101e:	ac 01       	movw	r20, r24
    1020:	44 0f       	add	r20, r20
    1022:	55 1f       	adc	r21, r21
    1024:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    1028:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	b9 01       	movw	r22, r18
    1032:	76 95       	lsr	r23
    1034:	76 2f       	mov	r23, r22
    1036:	66 27       	eor	r22, r22
    1038:	77 95       	ror	r23
    103a:	67 95       	ror	r22
    103c:	fe 01       	movw	r30, r28
    103e:	31 96       	adiw	r30, 0x01	; 1
    1040:	6e 0f       	add	r22, r30
    1042:	7f 1f       	adc	r23, r31
    1044:	86 0f       	add	r24, r22
    1046:	97 1f       	adc	r25, r23
    1048:	07 96       	adiw	r24, 0x07	; 7
    104a:	dc 01       	movw	r26, r24
    104c:	8c 91       	ld	r24, X
    104e:	e8 2f       	mov	r30, r24
    1050:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    1054:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	87 70       	andi	r24, 0x07	; 7
    105e:	90 78       	andi	r25, 0x80	; 128
    1060:	99 23       	and	r25, r25
    1062:	24 f4       	brge	.+8      	; 0x106c <draw_map+0x1a4>
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	88 6f       	ori	r24, 0xF8	; 248
    1068:	9f 6f       	ori	r25, 0xFF	; 255
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	bc 01       	movw	r22, r24
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <draw_map+0x1b0>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	6a 95       	dec	r22
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <draw_map+0x1ac>
    107c:	8e 2b       	or	r24, r30
    107e:	68 2f       	mov	r22, r24
    1080:	c9 01       	movw	r24, r18
    1082:	96 95       	lsr	r25
    1084:	98 2f       	mov	r25, r24
    1086:	88 27       	eor	r24, r24
    1088:	97 95       	ror	r25
    108a:	87 95       	ror	r24
    108c:	9e 01       	movw	r18, r28
    108e:	2f 5f       	subi	r18, 0xFF	; 255
    1090:	3f 4f       	sbci	r19, 0xFF	; 255
    1092:	82 0f       	add	r24, r18
    1094:	93 1f       	adc	r25, r19
    1096:	84 0f       	add	r24, r20
    1098:	95 1f       	adc	r25, r21
    109a:	07 96       	adiw	r24, 0x07	; 7
    109c:	fc 01       	movw	r30, r24
    109e:	60 83       	st	Z, r22
	MAP[2*(food_y)/8][2*(food_x) + 1] |= ((0x03 << (2*(food_y) % 8)));
    10a0:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    10a4:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	99 23       	and	r25, r25
    10ae:	0c f4       	brge	.+2      	; 0x10b2 <draw_map+0x1ea>
    10b0:	07 96       	adiw	r24, 0x07	; 7
    10b2:	95 95       	asr	r25
    10b4:	87 95       	ror	r24
    10b6:	95 95       	asr	r25
    10b8:	87 95       	ror	r24
    10ba:	95 95       	asr	r25
    10bc:	87 95       	ror	r24
    10be:	9c 01       	movw	r18, r24
    10c0:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    10c4:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	ac 01       	movw	r20, r24
    10ce:	4f 5f       	subi	r20, 0xFF	; 255
    10d0:	5f 4f       	sbci	r21, 0xFF	; 255
    10d2:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    10d6:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	01 96       	adiw	r24, 0x01	; 1
    10e0:	b9 01       	movw	r22, r18
    10e2:	76 95       	lsr	r23
    10e4:	76 2f       	mov	r23, r22
    10e6:	66 27       	eor	r22, r22
    10e8:	77 95       	ror	r23
    10ea:	67 95       	ror	r22
    10ec:	fe 01       	movw	r30, r28
    10ee:	31 96       	adiw	r30, 0x01	; 1
    10f0:	6e 0f       	add	r22, r30
    10f2:	7f 1f       	adc	r23, r31
    10f4:	86 0f       	add	r24, r22
    10f6:	97 1f       	adc	r25, r23
    10f8:	07 96       	adiw	r24, 0x07	; 7
    10fa:	dc 01       	movw	r26, r24
    10fc:	8c 91       	ld	r24, X
    10fe:	e8 2f       	mov	r30, r24
    1100:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    1104:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	87 70       	andi	r24, 0x07	; 7
    110e:	90 78       	andi	r25, 0x80	; 128
    1110:	99 23       	and	r25, r25
    1112:	24 f4       	brge	.+8      	; 0x111c <__stack+0x1d>
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	88 6f       	ori	r24, 0xF8	; 248
    1118:	9f 6f       	ori	r25, 0xFF	; 255
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	bc 01       	movw	r22, r24
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <__stack+0x29>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	6a 95       	dec	r22
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <__stack+0x25>
    112c:	8e 2b       	or	r24, r30
    112e:	68 2f       	mov	r22, r24
    1130:	c9 01       	movw	r24, r18
    1132:	96 95       	lsr	r25
    1134:	98 2f       	mov	r25, r24
    1136:	88 27       	eor	r24, r24
    1138:	97 95       	ror	r25
    113a:	87 95       	ror	r24
    113c:	9e 01       	movw	r18, r28
    113e:	2f 5f       	subi	r18, 0xFF	; 255
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	82 0f       	add	r24, r18
    1144:	93 1f       	adc	r25, r19
    1146:	84 0f       	add	r24, r20
    1148:	95 1f       	adc	r25, r21
    114a:	07 96       	adiw	r24, 0x07	; 7
    114c:	fc 01       	movw	r30, r24
    114e:	60 83       	st	Z, r22


	for(int i=0;i<length;i++)	//뱀 몸통값 입력
    1150:	1e 82       	std	Y+6, r1	; 0x06
    1152:	1d 82       	std	Y+5, r1	; 0x05
    1154:	c3 c0       	rjmp	.+390    	; 0x12dc <__stack+0x1dd>
	{
		MAP[2*(y[i])/8][2*(x[i])] |= ((0x03 << (2*(y[i]) % 8)));
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
    1158:	9e 81       	ldd	r25, Y+6	; 0x06
    115a:	8b 52       	subi	r24, 0x2B	; 43
    115c:	9e 4f       	sbci	r25, 0xFE	; 254
    115e:	dc 01       	movw	r26, r24
    1160:	8c 91       	ld	r24, X
    1162:	88 2f       	mov	r24, r24
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	99 23       	and	r25, r25
    116c:	0c f4       	brge	.+2      	; 0x1170 <__stack+0x71>
    116e:	07 96       	adiw	r24, 0x07	; 7
    1170:	95 95       	asr	r25
    1172:	87 95       	ror	r24
    1174:	95 95       	asr	r25
    1176:	87 95       	ror	r24
    1178:	95 95       	asr	r25
    117a:	87 95       	ror	r24
    117c:	2d 81       	ldd	r18, Y+5	; 0x05
    117e:	3e 81       	ldd	r19, Y+6	; 0x06
    1180:	23 5f       	subi	r18, 0xF3	; 243
    1182:	3e 4f       	sbci	r19, 0xFE	; 254
    1184:	f9 01       	movw	r30, r18
    1186:	20 81       	ld	r18, Z
    1188:	22 2f       	mov	r18, r18
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	22 0f       	add	r18, r18
    118e:	33 1f       	adc	r19, r19
    1190:	4d 81       	ldd	r20, Y+5	; 0x05
    1192:	5e 81       	ldd	r21, Y+6	; 0x06
    1194:	43 5f       	subi	r20, 0xF3	; 243
    1196:	5e 4f       	sbci	r21, 0xFE	; 254
    1198:	da 01       	movw	r26, r20
    119a:	4c 91       	ld	r20, X
    119c:	44 2f       	mov	r20, r20
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	44 0f       	add	r20, r20
    11a2:	55 1f       	adc	r21, r21
    11a4:	bc 01       	movw	r22, r24
    11a6:	76 95       	lsr	r23
    11a8:	76 2f       	mov	r23, r22
    11aa:	66 27       	eor	r22, r22
    11ac:	77 95       	ror	r23
    11ae:	67 95       	ror	r22
    11b0:	fe 01       	movw	r30, r28
    11b2:	31 96       	adiw	r30, 0x01	; 1
    11b4:	6e 0f       	add	r22, r30
    11b6:	7f 1f       	adc	r23, r31
    11b8:	46 0f       	add	r20, r22
    11ba:	57 1f       	adc	r21, r23
    11bc:	49 5f       	subi	r20, 0xF9	; 249
    11be:	5f 4f       	sbci	r21, 0xFF	; 255
    11c0:	fa 01       	movw	r30, r20
    11c2:	40 81       	ld	r20, Z
    11c4:	e4 2f       	mov	r30, r20
    11c6:	4d 81       	ldd	r20, Y+5	; 0x05
    11c8:	5e 81       	ldd	r21, Y+6	; 0x06
    11ca:	4b 52       	subi	r20, 0x2B	; 43
    11cc:	5e 4f       	sbci	r21, 0xFE	; 254
    11ce:	da 01       	movw	r26, r20
    11d0:	4c 91       	ld	r20, X
    11d2:	44 2f       	mov	r20, r20
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	44 0f       	add	r20, r20
    11d8:	55 1f       	adc	r21, r21
    11da:	ba 01       	movw	r22, r20
    11dc:	66 70       	andi	r22, 0x06	; 6
    11de:	77 27       	eor	r23, r23
    11e0:	43 e0       	ldi	r20, 0x03	; 3
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <__stack+0xeb>
    11e6:	44 0f       	add	r20, r20
    11e8:	55 1f       	adc	r21, r21
    11ea:	6a 95       	dec	r22
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <__stack+0xe7>
    11ee:	4e 2b       	or	r20, r30
    11f0:	64 2f       	mov	r22, r20
    11f2:	96 95       	lsr	r25
    11f4:	98 2f       	mov	r25, r24
    11f6:	88 27       	eor	r24, r24
    11f8:	97 95       	ror	r25
    11fa:	87 95       	ror	r24
    11fc:	ae 01       	movw	r20, r28
    11fe:	4f 5f       	subi	r20, 0xFF	; 255
    1200:	5f 4f       	sbci	r21, 0xFF	; 255
    1202:	84 0f       	add	r24, r20
    1204:	95 1f       	adc	r25, r21
    1206:	82 0f       	add	r24, r18
    1208:	93 1f       	adc	r25, r19
    120a:	07 96       	adiw	r24, 0x07	; 7
    120c:	fc 01       	movw	r30, r24
    120e:	60 83       	st	Z, r22
		MAP[2*(y[i])/8][2*(x[i]) + 1] |= ((0x03 << (2*(y[i]) % 8)));
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	9e 81       	ldd	r25, Y+6	; 0x06
    1214:	8b 52       	subi	r24, 0x2B	; 43
    1216:	9e 4f       	sbci	r25, 0xFE	; 254
    1218:	dc 01       	movw	r26, r24
    121a:	8c 91       	ld	r24, X
    121c:	88 2f       	mov	r24, r24
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	99 23       	and	r25, r25
    1226:	0c f4       	brge	.+2      	; 0x122a <__stack+0x12b>
    1228:	07 96       	adiw	r24, 0x07	; 7
    122a:	95 95       	asr	r25
    122c:	87 95       	ror	r24
    122e:	95 95       	asr	r25
    1230:	87 95       	ror	r24
    1232:	95 95       	asr	r25
    1234:	87 95       	ror	r24
    1236:	2d 81       	ldd	r18, Y+5	; 0x05
    1238:	3e 81       	ldd	r19, Y+6	; 0x06
    123a:	23 5f       	subi	r18, 0xF3	; 243
    123c:	3e 4f       	sbci	r19, 0xFE	; 254
    123e:	f9 01       	movw	r30, r18
    1240:	20 81       	ld	r18, Z
    1242:	22 2f       	mov	r18, r18
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	22 0f       	add	r18, r18
    1248:	33 1f       	adc	r19, r19
    124a:	2f 5f       	subi	r18, 0xFF	; 255
    124c:	3f 4f       	sbci	r19, 0xFF	; 255
    124e:	4d 81       	ldd	r20, Y+5	; 0x05
    1250:	5e 81       	ldd	r21, Y+6	; 0x06
    1252:	43 5f       	subi	r20, 0xF3	; 243
    1254:	5e 4f       	sbci	r21, 0xFE	; 254
    1256:	da 01       	movw	r26, r20
    1258:	4c 91       	ld	r20, X
    125a:	44 2f       	mov	r20, r20
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	44 0f       	add	r20, r20
    1260:	55 1f       	adc	r21, r21
    1262:	4f 5f       	subi	r20, 0xFF	; 255
    1264:	5f 4f       	sbci	r21, 0xFF	; 255
    1266:	bc 01       	movw	r22, r24
    1268:	76 95       	lsr	r23
    126a:	76 2f       	mov	r23, r22
    126c:	66 27       	eor	r22, r22
    126e:	77 95       	ror	r23
    1270:	67 95       	ror	r22
    1272:	fe 01       	movw	r30, r28
    1274:	31 96       	adiw	r30, 0x01	; 1
    1276:	6e 0f       	add	r22, r30
    1278:	7f 1f       	adc	r23, r31
    127a:	46 0f       	add	r20, r22
    127c:	57 1f       	adc	r21, r23
    127e:	49 5f       	subi	r20, 0xF9	; 249
    1280:	5f 4f       	sbci	r21, 0xFF	; 255
    1282:	fa 01       	movw	r30, r20
    1284:	40 81       	ld	r20, Z
    1286:	e4 2f       	mov	r30, r20
    1288:	4d 81       	ldd	r20, Y+5	; 0x05
    128a:	5e 81       	ldd	r21, Y+6	; 0x06
    128c:	4b 52       	subi	r20, 0x2B	; 43
    128e:	5e 4f       	sbci	r21, 0xFE	; 254
    1290:	da 01       	movw	r26, r20
    1292:	4c 91       	ld	r20, X
    1294:	44 2f       	mov	r20, r20
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	44 0f       	add	r20, r20
    129a:	55 1f       	adc	r21, r21
    129c:	ba 01       	movw	r22, r20
    129e:	66 70       	andi	r22, 0x06	; 6
    12a0:	77 27       	eor	r23, r23
    12a2:	43 e0       	ldi	r20, 0x03	; 3
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <__stack+0x1ad>
    12a8:	44 0f       	add	r20, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	6a 95       	dec	r22
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <__stack+0x1a9>
    12b0:	4e 2b       	or	r20, r30
    12b2:	64 2f       	mov	r22, r20
    12b4:	96 95       	lsr	r25
    12b6:	98 2f       	mov	r25, r24
    12b8:	88 27       	eor	r24, r24
    12ba:	97 95       	ror	r25
    12bc:	87 95       	ror	r24
    12be:	ae 01       	movw	r20, r28
    12c0:	4f 5f       	subi	r20, 0xFF	; 255
    12c2:	5f 4f       	sbci	r21, 0xFF	; 255
    12c4:	84 0f       	add	r24, r20
    12c6:	95 1f       	adc	r25, r21
    12c8:	82 0f       	add	r24, r18
    12ca:	93 1f       	adc	r25, r19
    12cc:	07 96       	adiw	r24, 0x07	; 7
    12ce:	fc 01       	movw	r30, r24
    12d0:	60 83       	st	Z, r22

	MAP[2*(food_y)/8][2*(food_x)] |= ((0x03 << (2*(food_y) % 8)));
	MAP[2*(food_y)/8][2*(food_x) + 1] |= ((0x03 << (2*(food_y) % 8)));


	for(int i=0;i<length;i++)	//뱀 몸통값 입력
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	9e 81       	ldd	r25, Y+6	; 0x06
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	9e 83       	std	Y+6, r25	; 0x06
    12da:	8d 83       	std	Y+5, r24	; 0x05
    12dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    12e0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    12e4:	2d 81       	ldd	r18, Y+5	; 0x05
    12e6:	3e 81       	ldd	r19, Y+6	; 0x06
    12e8:	28 17       	cp	r18, r24
    12ea:	39 07       	cpc	r19, r25
    12ec:	0c f4       	brge	.+2      	; 0x12f0 <__stack+0x1f1>
    12ee:	33 cf       	rjmp	.-410    	; 0x1156 <__stack+0x57>
		MAP[2*(y[i])/8][2*(x[i])] |= ((0x03 << (2*(y[i]) % 8)));
		MAP[2*(y[i])/8][2*(x[i]) + 1] |= ((0x03 << (2*(y[i]) % 8)));
	}

	unsigned char x,y;
	for(y=2;y<8;y++)
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	8f 83       	std	Y+7, r24	; 0x07
    12f4:	16 c0       	rjmp	.+44     	; 0x1322 <__stack+0x223>
	{
		ssd1306_set_page_start(y);
    12f6:	8f 81       	ldd	r24, Y+7	; 0x07
    12f8:	7c da       	rcall	.-2824   	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_data(MAP[y - 2], COL_NUM);
    12fa:	8f 81       	ldd	r24, Y+7	; 0x07
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 97       	sbiw	r24, 0x02	; 2
    1302:	9e 01       	movw	r18, r28
    1304:	28 5f       	subi	r18, 0xF8	; 248
    1306:	3f 4f       	sbci	r19, 0xFF	; 255
    1308:	96 95       	lsr	r25
    130a:	98 2f       	mov	r25, r24
    130c:	88 27       	eor	r24, r24
    130e:	97 95       	ror	r25
    1310:	87 95       	ror	r24
    1312:	82 0f       	add	r24, r18
    1314:	93 1f       	adc	r25, r19
    1316:	60 e8       	ldi	r22, 0x80	; 128
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	e9 d9       	rcall	.-3118   	; 0x6ee <ssd1306_data>
		MAP[2*(y[i])/8][2*(x[i])] |= ((0x03 << (2*(y[i]) % 8)));
		MAP[2*(y[i])/8][2*(x[i]) + 1] |= ((0x03 << (2*(y[i]) % 8)));
	}

	unsigned char x,y;
	for(y=2;y<8;y++)
    131c:	8f 81       	ldd	r24, Y+7	; 0x07
    131e:	8f 5f       	subi	r24, 0xFF	; 255
    1320:	8f 83       	std	Y+7, r24	; 0x07
    1322:	8f 81       	ldd	r24, Y+7	; 0x07
    1324:	88 30       	cpi	r24, 0x08	; 8
    1326:	38 f3       	brcs	.-50     	; 0x12f6 <__stack+0x1f7>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(MAP[y - 2], COL_NUM);
	}
}
    1328:	00 00       	nop
    132a:	c9 5f       	subi	r28, 0xF9	; 249
    132c:	dc 4f       	sbci	r29, 0xFC	; 252
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	08 95       	ret

0000133e <move>:


void move(int dir)
{
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	00 d0       	rcall	.+0      	; 0x1344 <move+0x6>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <move+0x8>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <move+0xa>
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	9e 83       	std	Y+6, r25	; 0x06
    134e:	8d 83       	std	Y+5, r24	; 0x05
	
	

	if(x[0]==food_x&&y[0]==food_y)
    1350:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    135c:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    1360:	28 17       	cp	r18, r24
    1362:	39 07       	cpc	r19, r25
    1364:	d9 f5       	brne	.+118    	; 0x13dc <move+0x9e>
    1366:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    1372:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    1376:	28 17       	cp	r18, r24
    1378:	39 07       	cpc	r19, r25
    137a:	81 f5       	brne	.+96     	; 0x13dc <move+0x9e>
	{ //food와 충돌했을 경우
		food(); //새로운 food 추가
    137c:	ca d0       	rcall	.+404    	; 0x1512 <food>
		length++; //길이증가
    137e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    1382:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <length+0x1>
    138c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <length>
		x[length-1]=x[length-2]; //새로만든 몸통에 값 입력
    1390:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    1394:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <length>
    139e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <length+0x1>
    13a2:	22 50       	subi	r18, 0x02	; 2
    13a4:	31 09       	sbc	r19, r1
    13a6:	23 5f       	subi	r18, 0xF3	; 243
    13a8:	3e 4f       	sbci	r19, 0xFE	; 254
    13aa:	f9 01       	movw	r30, r18
    13ac:	20 81       	ld	r18, Z
    13ae:	83 5f       	subi	r24, 0xF3	; 243
    13b0:	9e 4f       	sbci	r25, 0xFE	; 254
    13b2:	fc 01       	movw	r30, r24
    13b4:	20 83       	st	Z, r18
		y[length-1]=y[length-2];
    13b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    13ba:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <length>
    13c4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <length+0x1>
    13c8:	22 50       	subi	r18, 0x02	; 2
    13ca:	31 09       	sbc	r19, r1
    13cc:	2b 52       	subi	r18, 0x2B	; 43
    13ce:	3e 4f       	sbci	r19, 0xFE	; 254
    13d0:	f9 01       	movw	r30, r18
    13d2:	20 81       	ld	r18, Z
    13d4:	8b 52       	subi	r24, 0x2B	; 43
    13d6:	9e 4f       	sbci	r25, 0xFE	; 254
    13d8:	fc 01       	movw	r30, r24
    13da:	20 83       	st	Z, r18
	}
	if(x[0]==0||x[0]== 63||y[0]==0||y[0]==23)
    13dc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    13e0:	88 23       	and	r24, r24
    13e2:	61 f0       	breq	.+24     	; 0x13fc <move+0xbe>
    13e4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    13e8:	8f 33       	cpi	r24, 0x3F	; 63
    13ea:	41 f0       	breq	.+16     	; 0x13fc <move+0xbe>
    13ec:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    13f0:	88 23       	and	r24, r24
    13f2:	21 f0       	breq	.+8      	; 0x13fc <move+0xbe>
    13f4:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    13f8:	87 31       	cpi	r24, 0x17	; 23
	{ //벽과 충돌했을 경우
		game_over();
    13fa:	11 f4       	brne	.+4      	; 0x1400 <move+0xc2>
    13fc:	f6 d0       	rcall	.+492    	; 0x15ea <game_over>
		return; //game_over에서 게임을 다시 시작하게 되면 여기서부터 반복되므로
    13fe:	80 c0       	rjmp	.+256    	; 0x1500 <move+0x1c2>
		//return을 사용하여 move의 나머지 부분이 실행되지 않도록 합니다.
	}
	for(int i=1;i<length;i++)
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	1b c0       	rjmp	.+54     	; 0x1440 <move+0x102>
	{ //자기몸과 충돌했는지 검사
		if(x[0]==x[i] && y[0]==y[i])
    140a:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <x>
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	9a 81       	ldd	r25, Y+2	; 0x02
    1412:	83 5f       	subi	r24, 0xF3	; 243
    1414:	9e 4f       	sbci	r25, 0xFE	; 254
    1416:	fc 01       	movw	r30, r24
    1418:	80 81       	ld	r24, Z
    141a:	28 17       	cp	r18, r24
    141c:	61 f4       	brne	.+24     	; 0x1436 <move+0xf8>
    141e:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <y>
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	8b 52       	subi	r24, 0x2B	; 43
    1428:	9e 4f       	sbci	r25, 0xFE	; 254
    142a:	fc 01       	movw	r30, r24
    142c:	80 81       	ld	r24, Z
    142e:	28 17       	cp	r18, r24
		{
			game_over();
    1430:	11 f4       	brne	.+4      	; 0x1436 <move+0xf8>
    1432:	db d0       	rcall	.+438    	; 0x15ea <game_over>
			return;
    1434:	65 c0       	rjmp	.+202    	; 0x1500 <move+0x1c2>
	{ //벽과 충돌했을 경우
		game_over();
		return; //game_over에서 게임을 다시 시작하게 되면 여기서부터 반복되므로
		//return을 사용하여 move의 나머지 부분이 실행되지 않도록 합니다.
	}
	for(int i=1;i<length;i++)
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	9a 81       	ldd	r25, Y+2	; 0x02
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    1444:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    1448:	29 81       	ldd	r18, Y+1	; 0x01
    144a:	3a 81       	ldd	r19, Y+2	; 0x02
    144c:	28 17       	cp	r18, r24
    144e:	39 07       	cpc	r19, r25
    1450:	e4 f2       	brlt	.-72     	; 0x140a <move+0xcc>
			return;
		}
	}
	

	for(int i=length - 1;i>0;i--){ //몸통좌표를 한칸씩 옮김
    1452:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    1456:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	9c 83       	std	Y+4, r25	; 0x04
    145e:	8b 83       	std	Y+3, r24	; 0x03
    1460:	1f c0       	rjmp	.+62     	; 0x14a0 <move+0x162>
		x[i]=x[i-1];
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	83 5f       	subi	r24, 0xF3	; 243
    146a:	9e 4f       	sbci	r25, 0xFE	; 254
    146c:	fc 01       	movw	r30, r24
    146e:	20 81       	ld	r18, Z
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	9c 81       	ldd	r25, Y+4	; 0x04
    1474:	83 5f       	subi	r24, 0xF3	; 243
    1476:	9e 4f       	sbci	r25, 0xFE	; 254
    1478:	fc 01       	movw	r30, r24
    147a:	20 83       	st	Z, r18
		y[i]=y[i-1];
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	8b 52       	subi	r24, 0x2B	; 43
    1484:	9e 4f       	sbci	r25, 0xFE	; 254
    1486:	fc 01       	movw	r30, r24
    1488:	20 81       	ld	r18, Z
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	8b 52       	subi	r24, 0x2B	; 43
    1490:	9e 4f       	sbci	r25, 0xFE	; 254
    1492:	fc 01       	movw	r30, r24
    1494:	20 83       	st	Z, r18
			return;
		}
	}
	

	for(int i=length - 1;i>0;i--){ //몸통좌표를 한칸씩 옮김
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	9c 83       	std	Y+4, r25	; 0x04
    149e:	8b 83       	std	Y+3, r24	; 0x03
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	18 16       	cp	r1, r24
    14a6:	19 06       	cpc	r1, r25
    14a8:	e4 f2       	brlt	.-72     	; 0x1462 <move+0x124>
		y[i]=y[i-1];
	}

	

	if(dir==LEFT) x[0]--; //방향에 따라 새로운 머리좌표(x[0],y[0])값을 변경
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	9e 81       	ldd	r25, Y+6	; 0x06
    14ae:	8b 34       	cpi	r24, 0x4B	; 75
    14b0:	91 05       	cpc	r25, r1
    14b2:	31 f4       	brne	.+12     	; 0x14c0 <move+0x182>
    14b4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    14b8:	81 50       	subi	r24, 0x01	; 1
    14ba:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <x>
    14be:	20 c0       	rjmp	.+64     	; 0x1500 <move+0x1c2>
	else if(dir==RIGHT) x[0]++;
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	8d 34       	cpi	r24, 0x4D	; 77
    14c6:	91 05       	cpc	r25, r1
    14c8:	31 f4       	brne	.+12     	; 0x14d6 <move+0x198>
    14ca:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <x>
    14d4:	15 c0       	rjmp	.+42     	; 0x1500 <move+0x1c2>
	else if(dir==UP) y[0]--;
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	88 34       	cpi	r24, 0x48	; 72
    14dc:	91 05       	cpc	r25, r1
    14de:	31 f4       	brne	.+12     	; 0x14ec <move+0x1ae>
    14e0:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    14e4:	81 50       	subi	r24, 0x01	; 1
    14e6:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <y>
    14ea:	0a c0       	rjmp	.+20     	; 0x1500 <move+0x1c2>
	else if(dir==DOWN) y[0]++;
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	80 35       	cpi	r24, 0x50	; 80
    14f2:	91 05       	cpc	r25, r1
    14f4:	29 f4       	brne	.+10     	; 0x1500 <move+0x1c2>
    14f6:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    14fa:	8f 5f       	subi	r24, 0xFF	; 255
    14fc:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <y>
	

	
	
}
    1500:	26 96       	adiw	r28, 0x06	; 6
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	08 95       	ret

00001512 <food>:

void food()
{
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	00 d0       	rcall	.+0      	; 0x1518 <food+0x6>
    1518:	00 d0       	rcall	.+0      	; 0x151a <food+0x8>
    151a:	00 d0       	rcall	.+0      	; 0x151c <food+0xa>
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
	int food_crush_on=0;//food가 뱀 몸통좌표에 생길 경우 on
    1520:	1a 82       	std	Y+2, r1	; 0x02
    1522:	19 82       	std	Y+1, r1	; 0x01
	int r=0; //난수 생성에 사동되는 변수
    1524:	1e 82       	std	Y+6, r1	; 0x06
    1526:	1d 82       	std	Y+5, r1	; 0x05
	
	
	
	while(1){
		food_crush_on=0;
    1528:	1a 82       	std	Y+2, r1	; 0x02
    152a:	19 82       	std	Y+1, r1	; 0x01
		srand(TCNT0); //난수표생성
    152c:	82 e5       	ldi	r24, 0x52	; 82
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	fc 01       	movw	r30, r24
    1532:	80 81       	ld	r24, Z
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	48 d7       	rcall	.+3728   	; 0x23ca <srand>
		food_x=(rand()%62)+2;    //난수를 좌표값에 넣음
    153a:	44 d7       	rcall	.+3720   	; 0x23c4 <rand>
    153c:	2e e3       	ldi	r18, 0x3E	; 62
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	b9 01       	movw	r22, r18
    1542:	d2 d6       	rcall	.+3492   	; 0x22e8 <__divmodhi4>
    1544:	02 96       	adiw	r24, 0x02	; 2
    1546:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <food_x+0x1>
    154a:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <food_x>
		food_y=(rand()%22)+2;
    154e:	3a d7       	rcall	.+3700   	; 0x23c4 <rand>
    1550:	26 e1       	ldi	r18, 0x16	; 22
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	b9 01       	movw	r22, r18
    1556:	c8 d6       	rcall	.+3472   	; 0x22e8 <__divmodhi4>
    1558:	02 96       	adiw	r24, 0x02	; 2
    155a:	90 93 40 07 	sts	0x0740, r25	; 0x800740 <food_y+0x1>
    155e:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <food_y>
    1562:	1c 82       	std	Y+4, r1	; 0x04
		
		for(int i=0;i<length;i++)
    1564:	1b 82       	std	Y+3, r1	; 0x03
    1566:	28 c0       	rjmp	.+80     	; 0x15b8 <food+0xa6>
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
		{ //food가 뱀 몸통과 겹치는지 확인
			if(food_x==x[i]&&food_y==y[i])
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	83 5f       	subi	r24, 0xF3	; 243
    156e:	9e 4f       	sbci	r25, 0xFE	; 254
    1570:	fc 01       	movw	r30, r24
    1572:	80 81       	ld	r24, Z
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    157c:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    1580:	28 17       	cp	r18, r24
    1582:	39 07       	cpc	r19, r25
    1584:	a1 f4       	brne	.+40     	; 0x15ae <food+0x9c>
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	8b 52       	subi	r24, 0x2B	; 43
    158c:	9e 4f       	sbci	r25, 0xFE	; 254
    158e:	fc 01       	movw	r30, r24
    1590:	80 81       	ld	r24, Z
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    159a:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    159e:	28 17       	cp	r18, r24
    15a0:	39 07       	cpc	r19, r25
    15a2:	29 f4       	brne	.+10     	; 0x15ae <food+0x9c>
    15a4:	81 e0       	ldi	r24, 0x01	; 1
			{
				food_crush_on=1; //겹치면 food_crush_on 를 on
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	9a 83       	std	Y+2, r25	; 0x02
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	0e c0       	rjmp	.+28     	; 0x15ca <food+0xb8>
				break;
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
		food_crush_on=0;
		srand(TCNT0); //난수표생성
		food_x=(rand()%62)+2;    //난수를 좌표값에 넣음
		food_y=(rand()%22)+2;
		
		for(int i=0;i<length;i++)
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	8b 83       	std	Y+3, r24	; 0x03
    15b8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    15bc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    15c0:	2b 81       	ldd	r18, Y+3	; 0x03
    15c2:	3c 81       	ldd	r19, Y+4	; 0x04
    15c4:	28 17       	cp	r18, r24
    15c6:	39 07       	cpc	r19, r25
    15c8:	7c f2       	brlt	.-98     	; 0x1568 <food+0x56>
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
				food_crush_on=1; //겹치면 food_crush_on 를 on
				break;
			}
		}
		
		if(food_crush_on==1) continue; //겹쳤을 경우 while문을 다시 시작
    15cc:	9a 81       	ldd	r25, Y+2	; 0x02
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <food+0xc2>
    15d2:	aa cf       	rjmp	.-172    	; 0x1528 <food+0x16>
		
		break;
		
	}
    15d4:	00 00       	nop
			}
		}
		
		if(food_crush_on==1) continue; //겹쳤을 경우 while문을 다시 시작
		
		break;
    15d6:	00 00       	nop
		
	}
}
    15d8:	26 96       	adiw	r28, 0x06	; 6
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	08 95       	ret

000015ea <game_over>:
    15ea:	cf 93       	push	r28


void game_over()
{
    15ec:	df 93       	push	r29
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	a0 97       	sbiw	r28, 0x20	; 32
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
	SendCommand01(0x06, 0x00, 0x0F);
    15fe:	4f e0       	ldi	r20, 0x0F	; 15
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	86 e0       	ldi	r24, 0x06	; 6
    1604:	16 d8       	rcall	.-4052   	; 0x632 <SendCommand01>
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a8 e4       	ldi	r26, 0x48	; 72
    160c:	b3 e4       	ldi	r27, 0x43	; 67
    160e:	89 87       	std	Y+9, r24	; 0x09
    1610:	9a 87       	std	Y+10, r25	; 0x0a
    1612:	ab 87       	std	Y+11, r26	; 0x0b
    1614:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	4a e7       	ldi	r20, 0x7A	; 122
    161c:	55 e4       	ldi	r21, 0x45	; 69
    161e:	69 85       	ldd	r22, Y+9	; 0x09
    1620:	7a 85       	ldd	r23, Y+10	; 0x0a
    1622:	8b 85       	ldd	r24, Y+11	; 0x0b
    1624:	9c 85       	ldd	r25, Y+12	; 0x0c
    1626:	d5 d5       	rcall	.+2986   	; 0x21d2 <__mulsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	8d 87       	std	Y+13, r24	; 0x0d
    162e:	9e 87       	std	Y+14, r25	; 0x0e
    1630:	af 87       	std	Y+15, r26	; 0x0f
    1632:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e8       	ldi	r20, 0x80	; 128
    163a:	5f e3       	ldi	r21, 0x3F	; 63
    163c:	6d 85       	ldd	r22, Y+13	; 0x0d
    163e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1640:	8f 85       	ldd	r24, Y+15	; 0x0f
    1642:	98 89       	ldd	r25, Y+16	; 0x10
    1644:	45 d5       	rcall	.+2698   	; 0x20d0 <__cmpsf2>
    1646:	88 23       	and	r24, r24
    1648:	2c f4       	brge	.+10     	; 0x1654 <game_over+0x6a>
		__ticks = 1;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	9a 8b       	std	Y+18, r25	; 0x12
    1650:	89 8b       	std	Y+17, r24	; 0x11
    1652:	3b c0       	rjmp	.+118    	; 0x16ca <game_over+0xe0>
	else if (__tmp > 65535)
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	3f ef       	ldi	r19, 0xFF	; 255
    1658:	4f e7       	ldi	r20, 0x7F	; 127
    165a:	57 e4       	ldi	r21, 0x47	; 71
    165c:	6d 85       	ldd	r22, Y+13	; 0x0d
    165e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1660:	8f 85       	ldd	r24, Y+15	; 0x0f
    1662:	98 89       	ldd	r25, Y+16	; 0x10
    1664:	b2 d5       	rcall	.+2916   	; 0x21ca <__gesf2>
    1666:	18 16       	cp	r1, r24
    1668:	3c f5       	brge	.+78     	; 0x16b8 <game_over+0xce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e2       	ldi	r20, 0x20	; 32
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	69 85       	ldd	r22, Y+9	; 0x09
    1674:	7a 85       	ldd	r23, Y+10	; 0x0a
    1676:	8b 85       	ldd	r24, Y+11	; 0x0b
    1678:	9c 85       	ldd	r25, Y+12	; 0x0c
    167a:	ab d5       	rcall	.+2902   	; 0x21d2 <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	bc 01       	movw	r22, r24
    1682:	cd 01       	movw	r24, r26
    1684:	29 d5       	rcall	.+2642   	; 0x20d8 <__fixunssfsi>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	9a 8b       	std	Y+18, r25	; 0x12
    168c:	89 8b       	std	Y+17, r24	; 0x11
    168e:	0f c0       	rjmp	.+30     	; 0x16ae <game_over+0xc4>
    1690:	80 e9       	ldi	r24, 0x90	; 144
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	9c 8b       	std	Y+20, r25	; 0x14
    1696:	8b 8b       	std	Y+19, r24	; 0x13
    1698:	8b 89       	ldd	r24, Y+19	; 0x13
    169a:	9c 89       	ldd	r25, Y+20	; 0x14
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <game_over+0xb2>
    16a0:	9c 8b       	std	Y+20, r25	; 0x14
    16a2:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a4:	89 89       	ldd	r24, Y+17	; 0x11
    16a6:	9a 89       	ldd	r25, Y+18	; 0x12
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	9a 8b       	std	Y+18, r25	; 0x12
    16ac:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ae:	89 89       	ldd	r24, Y+17	; 0x11
    16b0:	9a 89       	ldd	r25, Y+18	; 0x12
    16b2:	89 2b       	or	r24, r25
    16b4:	69 f7       	brne	.-38     	; 0x1690 <game_over+0xa6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b6:	13 c0       	rjmp	.+38     	; 0x16de <game_over+0xf4>
    16b8:	6d 85       	ldd	r22, Y+13	; 0x0d
    16ba:	7e 85       	ldd	r23, Y+14	; 0x0e
    16bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    16be:	98 89       	ldd	r25, Y+16	; 0x10
    16c0:	0b d5       	rcall	.+2582   	; 0x20d8 <__fixunssfsi>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	9a 8b       	std	Y+18, r25	; 0x12
    16c8:	89 8b       	std	Y+17, r24	; 0x11
    16ca:	89 89       	ldd	r24, Y+17	; 0x11
    16cc:	9a 89       	ldd	r25, Y+18	; 0x12
    16ce:	9e 8b       	std	Y+22, r25	; 0x16
    16d0:	8d 8b       	std	Y+21, r24	; 0x15
    16d2:	8d 89       	ldd	r24, Y+21	; 0x15
    16d4:	9e 89       	ldd	r25, Y+22	; 0x16
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <game_over+0xec>
    16da:	9e 8b       	std	Y+22, r25	; 0x16
    16dc:	8d 8b       	std	Y+21, r24	; 0x15
	_delay_ms(200);
	SendCommand01(0x0F, 0x01, 0x04);
    16de:	44 e0       	ldi	r20, 0x04	; 4
    16e0:	61 e0       	ldi	r22, 0x01	; 1
    16e2:	8f e0       	ldi	r24, 0x0F	; 15
    16e4:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
	game = 0;
    16e8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <game+0x1>
    16ec:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <game>
	clear_map();
    16f0:	8e d4       	rcall	.+2332   	; 0x200e <clear_map>
	oled_msg(4, 6, "GAME OVER");
    16f2:	8e ea       	ldi	r24, 0xAE	; 174
    16f4:	92 e0       	ldi	r25, 0x02	; 2
    16f6:	89 2f       	mov	r24, r25
    16f8:	8f 93       	push	r24
    16fa:	8e ea       	ldi	r24, 0xAE	; 174
    16fc:	92 e0       	ldi	r25, 0x02	; 2
    16fe:	8f 93       	push	r24
    1700:	1f 92       	push	r1
    1702:	86 e0       	ldi	r24, 0x06	; 6
    1704:	8f 93       	push	r24
    1706:	1f 92       	push	r1
    1708:	84 e0       	ldi	r24, 0x04	; 4
    170a:	8f 93       	push	r24
    170c:	9e d9       	rcall	.-3268   	; 0xa4a <oled_msg>
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
	ssd1306_set_column_addr(0);
    1718:	0f 90       	pop	r0
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	7d d8       	rcall	.-3846   	; 0x818 <ssd1306_set_column_addr>
	while(game != 1);
    171e:	00 00       	nop
    1720:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
    1724:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	d1 f7       	brne	.-12     	; 0x1720 <game_over+0x136>

	x[0] = 32;
    172c:	80 e2       	ldi	r24, 0x20	; 32
    172e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <x>
	x[1] = 31;
    1732:	8f e1       	ldi	r24, 0x1F	; 31
    1734:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <x+0x1>
	x[2] = 30;
    1738:	8e e1       	ldi	r24, 0x1E	; 30
    173a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <x+0x2>
	y[0] = 12;
    173e:	8c e0       	ldi	r24, 0x0C	; 12
    1740:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <y>
	y[1] = 12;
    1744:	8c e0       	ldi	r24, 0x0C	; 12
    1746:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <y+0x1>
	y[2] = 12;
    174a:	8c e0       	ldi	r24, 0x0C	; 12
    174c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <y+0x2>

	for(int i = 3; i < 200; i++)
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	0b c0       	rjmp	.+22     	; 0x1770 <game_over+0x186>
	{
		x[i] = 0;
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a 81       	ldd	r25, Y+2	; 0x02
    175e:	83 5f       	subi	r24, 0xF3	; 243
    1760:	9e 4f       	sbci	r25, 0xFE	; 254
    1762:	fc 01       	movw	r30, r24
    1764:	10 82       	st	Z, r1
	x[2] = 30;
	y[0] = 12;
	y[1] = 12;
	y[2] = 12;

	for(int i = 3; i < 200; i++)
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	9a 81       	ldd	r25, Y+2	; 0x02
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	9a 83       	std	Y+2, r25	; 0x02
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	88 3c       	cpi	r24, 0xC8	; 200
    1776:	91 05       	cpc	r25, r1
    1778:	84 f3       	brlt	.-32     	; 0x175a <game_over+0x170>
	{
		x[i] = 0;
	}
	for(int i = 3; i < 200; i++)
    177a:	83 e0       	ldi	r24, 0x03	; 3
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	9c 83       	std	Y+4, r25	; 0x04
    1780:	8b 83       	std	Y+3, r24	; 0x03
    1782:	0b c0       	rjmp	.+22     	; 0x179a <game_over+0x1b0>
	{
		y[i] = 0;
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	8b 52       	subi	r24, 0x2B	; 43
    178a:	9e 4f       	sbci	r25, 0xFE	; 254
    178c:	fc 01       	movw	r30, r24
    178e:	10 82       	st	Z, r1

	for(int i = 3; i < 200; i++)
	{
		x[i] = 0;
	}
	for(int i = 3; i < 200; i++)
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	9c 83       	std	Y+4, r25	; 0x04
    1798:	8b 83       	std	Y+3, r24	; 0x03
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	88 3c       	cpi	r24, 0xC8	; 200
    17a0:	91 05       	cpc	r25, r1
    17a2:	84 f3       	brlt	.-32     	; 0x1784 <game_over+0x19a>
	{
		y[i] = 0;
	}
	length = 3;
    17a4:	83 e0       	ldi	r24, 0x03	; 3
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <length+0x1>
    17ac:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <length>
	dir = RIGHT;
    17b0:	8d e4       	ldi	r24, 0x4D	; 77
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    17b8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	draw_picture(KO);
    17bc:	88 eb       	ldi	r24, 0xB8	; 184
    17be:	92 e0       	ldi	r25, 0x02	; 2
    17c0:	a9 d9       	rcall	.-3246   	; 0xb14 <draw_picture>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	a8 ec       	ldi	r26, 0xC8	; 200
    17c8:	b3 e4       	ldi	r27, 0x43	; 67
    17ca:	8d 83       	std	Y+5, r24	; 0x05
    17cc:	9e 83       	std	Y+6, r25	; 0x06
    17ce:	af 83       	std	Y+7, r26	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17d0:	b8 87       	std	Y+8, r27	; 0x08
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4a e7       	ldi	r20, 0x7A	; 122
    17d8:	55 e4       	ldi	r21, 0x45	; 69
    17da:	6d 81       	ldd	r22, Y+5	; 0x05
    17dc:	7e 81       	ldd	r23, Y+6	; 0x06
    17de:	8f 81       	ldd	r24, Y+7	; 0x07
    17e0:	98 85       	ldd	r25, Y+8	; 0x08
    17e2:	f7 d4       	rcall	.+2542   	; 0x21d2 <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	8f 8b       	std	Y+23, r24	; 0x17
    17ea:	98 8f       	std	Y+24, r25	; 0x18
    17ec:	a9 8f       	std	Y+25, r26	; 0x19
	if (__tmp < 1.0)
    17ee:	ba 8f       	std	Y+26, r27	; 0x1a
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e8       	ldi	r20, 0x80	; 128
    17f6:	5f e3       	ldi	r21, 0x3F	; 63
    17f8:	6f 89       	ldd	r22, Y+23	; 0x17
    17fa:	78 8d       	ldd	r23, Y+24	; 0x18
    17fc:	89 8d       	ldd	r24, Y+25	; 0x19
    17fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1800:	67 d4       	rcall	.+2254   	; 0x20d0 <__cmpsf2>
    1802:	88 23       	and	r24, r24
    1804:	2c f4       	brge	.+10     	; 0x1810 <game_over+0x226>
		__ticks = 1;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	9c 8f       	std	Y+28, r25	; 0x1c
    180c:	8b 8f       	std	Y+27, r24	; 0x1b
	else if (__tmp > 65535)
    180e:	3b c0       	rjmp	.+118    	; 0x1886 <game_over+0x29c>
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	3f ef       	ldi	r19, 0xFF	; 255
    1814:	4f e7       	ldi	r20, 0x7F	; 127
    1816:	57 e4       	ldi	r21, 0x47	; 71
    1818:	6f 89       	ldd	r22, Y+23	; 0x17
    181a:	78 8d       	ldd	r23, Y+24	; 0x18
    181c:	89 8d       	ldd	r24, Y+25	; 0x19
    181e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1820:	d4 d4       	rcall	.+2472   	; 0x21ca <__gesf2>
    1822:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1824:	3c f5       	brge	.+78     	; 0x1874 <game_over+0x28a>
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e2       	ldi	r20, 0x20	; 32
    182c:	51 e4       	ldi	r21, 0x41	; 65
    182e:	6d 81       	ldd	r22, Y+5	; 0x05
    1830:	7e 81       	ldd	r23, Y+6	; 0x06
    1832:	8f 81       	ldd	r24, Y+7	; 0x07
    1834:	98 85       	ldd	r25, Y+8	; 0x08
    1836:	cd d4       	rcall	.+2458   	; 0x21d2 <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	4b d4       	rcall	.+2198   	; 0x20d8 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	9c 8f       	std	Y+28, r25	; 0x1c
    1848:	8b 8f       	std	Y+27, r24	; 0x1b
    184a:	0f c0       	rjmp	.+30     	; 0x186a <game_over+0x280>
    184c:	80 e9       	ldi	r24, 0x90	; 144
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	9e 8f       	std	Y+30, r25	; 0x1e
    1852:	8d 8f       	std	Y+29, r24	; 0x1d
    1854:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1856:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <game_over+0x26e>
    185c:	9e 8f       	std	Y+30, r25	; 0x1e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185e:	8d 8f       	std	Y+29, r24	; 0x1d
    1860:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1862:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	9c 8f       	std	Y+28, r25	; 0x1c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1868:	8b 8f       	std	Y+27, r24	; 0x1b
    186a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    186c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    186e:	89 2b       	or	r24, r25
    1870:	69 f7       	brne	.-38     	; 0x184c <game_over+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1872:	13 c0       	rjmp	.+38     	; 0x189a <game_over+0x2b0>
    1874:	6f 89       	ldd	r22, Y+23	; 0x17
    1876:	78 8d       	ldd	r23, Y+24	; 0x18
    1878:	89 8d       	ldd	r24, Y+25	; 0x19
    187a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    187c:	2d d4       	rcall	.+2138   	; 0x20d8 <__fixunssfsi>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	9c 8f       	std	Y+28, r25	; 0x1c
    1884:	8b 8f       	std	Y+27, r24	; 0x1b
    1886:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1888:	9c 8d       	ldd	r25, Y+28	; 0x1c
    188a:	98 a3       	std	Y+32, r25	; 0x20
    188c:	8f 8f       	std	Y+31, r24	; 0x1f
    188e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1890:	98 a1       	ldd	r25, Y+32	; 0x20
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <game_over+0x2a8>
	_delay_ms(400);
	clear_screen();
    1896:	98 a3       	std	Y+32, r25	; 0x20
    1898:	8f 8f       	std	Y+31, r24	; 0x1f
	title();
    189a:	ac d8       	rcall	.-3752   	; 0x9f4 <clear_screen>
    189c:	b7 da       	rcall	.-2706   	; 0xe0c <title>
}
    189e:	00 00       	nop
    18a0:	a0 96       	adiw	r28, 0x20	; 32
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	08 95       	ret

000018b2 <main>:


int main(void)
{
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	ce 54       	subi	r28, 0x4E	; 78
    18c0:	d1 09       	sbc	r29, r1
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
	char cmd;

	UART_Init();
    18cc:	0e 94 9d 02 	call	0x53a	; 0x53a <UART_Init>
	long int val_y;
	
	
	while(1)
	{
		SendCommand(CMD_TF);
    18d0:	89 e0       	ldi	r24, 0x09	; 9
    18d2:	0e 94 cf 02 	call	0x59e	; 0x59e <SendCommand>
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	a0 ea       	ldi	r26, 0xA0	; 160
    18dc:	b1 e4       	ldi	r27, 0x41	; 65
    18de:	8d 83       	std	Y+5, r24	; 0x05
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	af 83       	std	Y+7, r26	; 0x07
    18e4:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	4a e7       	ldi	r20, 0x7A	; 122
    18ec:	55 e4       	ldi	r21, 0x45	; 69
    18ee:	6d 81       	ldd	r22, Y+5	; 0x05
    18f0:	7e 81       	ldd	r23, Y+6	; 0x06
    18f2:	8f 81       	ldd	r24, Y+7	; 0x07
    18f4:	98 85       	ldd	r25, Y+8	; 0x08
    18f6:	6d d4       	rcall	.+2266   	; 0x21d2 <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	8b af       	std	Y+59, r24	; 0x3b
    18fe:	9c af       	std	Y+60, r25	; 0x3c
    1900:	ad af       	std	Y+61, r26	; 0x3d
    1902:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	6b ad       	ldd	r22, Y+59	; 0x3b
    190e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1910:	8d ad       	ldd	r24, Y+61	; 0x3d
    1912:	9e ad       	ldd	r25, Y+62	; 0x3e
    1914:	dd d3       	rcall	.+1978   	; 0x20d0 <__cmpsf2>
    1916:	88 23       	and	r24, r24
    1918:	44 f4       	brge	.+16     	; 0x192a <main+0x78>
		__ticks = 1;
    191a:	21 e0       	ldi	r18, 0x01	; 1
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	ce 01       	movw	r24, r28
    1920:	cf 96       	adiw	r24, 0x3f	; 63
    1922:	fc 01       	movw	r30, r24
    1924:	31 83       	std	Z+1, r19	; 0x01
    1926:	20 83       	st	Z, r18
    1928:	5b c0       	rjmp	.+182    	; 0x19e0 <main+0x12e>
	else if (__tmp > 65535)
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	3f ef       	ldi	r19, 0xFF	; 255
    192e:	4f e7       	ldi	r20, 0x7F	; 127
    1930:	57 e4       	ldi	r21, 0x47	; 71
    1932:	6b ad       	ldd	r22, Y+59	; 0x3b
    1934:	7c ad       	ldd	r23, Y+60	; 0x3c
    1936:	8d ad       	ldd	r24, Y+61	; 0x3d
    1938:	9e ad       	ldd	r25, Y+62	; 0x3e
    193a:	47 d4       	rcall	.+2190   	; 0x21ca <__gesf2>
    193c:	18 16       	cp	r1, r24
    193e:	0c f0       	brlt	.+2      	; 0x1942 <main+0x90>
    1940:	42 c0       	rjmp	.+132    	; 0x19c6 <main+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e2       	ldi	r20, 0x20	; 32
    1948:	51 e4       	ldi	r21, 0x41	; 65
    194a:	6d 81       	ldd	r22, Y+5	; 0x05
    194c:	7e 81       	ldd	r23, Y+6	; 0x06
    194e:	8f 81       	ldd	r24, Y+7	; 0x07
    1950:	98 85       	ldd	r25, Y+8	; 0x08
    1952:	3f d4       	rcall	.+2174   	; 0x21d2 <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	bc 01       	movw	r22, r24
    195a:	cd 01       	movw	r24, r26
    195c:	bd d3       	rcall	.+1914   	; 0x20d8 <__fixunssfsi>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	9e 01       	movw	r18, r28
    1964:	21 5c       	subi	r18, 0xC1	; 193
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	f9 01       	movw	r30, r18
    196a:	91 83       	std	Z+1, r25	; 0x01
    196c:	80 83       	st	Z, r24
    196e:	23 c0       	rjmp	.+70     	; 0x19b6 <main+0x104>
    1970:	ce 01       	movw	r24, r28
    1972:	8f 5b       	subi	r24, 0xBF	; 191
    1974:	9f 4f       	sbci	r25, 0xFF	; 255
    1976:	20 e9       	ldi	r18, 0x90	; 144
    1978:	31 e0       	ldi	r19, 0x01	; 1
    197a:	fc 01       	movw	r30, r24
    197c:	31 83       	std	Z+1, r19	; 0x01
    197e:	20 83       	st	Z, r18
    1980:	ce 01       	movw	r24, r28
    1982:	8f 5b       	subi	r24, 0xBF	; 191
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	fc 01       	movw	r30, r24
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <main+0xda>
    1990:	9e 01       	movw	r18, r28
    1992:	2f 5b       	subi	r18, 0xBF	; 191
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	f9 01       	movw	r30, r18
    1998:	91 83       	std	Z+1, r25	; 0x01
    199a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199c:	ce 01       	movw	r24, r28
    199e:	cf 96       	adiw	r24, 0x3f	; 63
    19a0:	fc 01       	movw	r30, r24
    19a2:	80 81       	ld	r24, Z
    19a4:	91 81       	ldd	r25, Z+1	; 0x01
    19a6:	9c 01       	movw	r18, r24
    19a8:	21 50       	subi	r18, 0x01	; 1
    19aa:	31 09       	sbc	r19, r1
    19ac:	ce 01       	movw	r24, r28
    19ae:	cf 96       	adiw	r24, 0x3f	; 63
    19b0:	fc 01       	movw	r30, r24
    19b2:	31 83       	std	Z+1, r19	; 0x01
    19b4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b6:	ce 01       	movw	r24, r28
    19b8:	cf 96       	adiw	r24, 0x3f	; 63
    19ba:	fc 01       	movw	r30, r24
    19bc:	80 81       	ld	r24, Z
    19be:	91 81       	ldd	r25, Z+1	; 0x01
    19c0:	89 2b       	or	r24, r25
    19c2:	b1 f6       	brne	.-84     	; 0x1970 <main+0xbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c4:	27 c0       	rjmp	.+78     	; 0x1a14 <main+0x162>
    19c6:	6b ad       	ldd	r22, Y+59	; 0x3b
    19c8:	7c ad       	ldd	r23, Y+60	; 0x3c
    19ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    19cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ce:	84 d3       	rcall	.+1800   	; 0x20d8 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9e 01       	movw	r18, r28
    19d6:	21 5c       	subi	r18, 0xC1	; 193
    19d8:	3f 4f       	sbci	r19, 0xFF	; 255
    19da:	f9 01       	movw	r30, r18
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	80 83       	st	Z, r24
    19e0:	ce 01       	movw	r24, r28
    19e2:	8d 5b       	subi	r24, 0xBD	; 189
    19e4:	9f 4f       	sbci	r25, 0xFF	; 255
    19e6:	9e 01       	movw	r18, r28
    19e8:	21 5c       	subi	r18, 0xC1	; 193
    19ea:	3f 4f       	sbci	r19, 0xFF	; 255
    19ec:	f9 01       	movw	r30, r18
    19ee:	20 81       	ld	r18, Z
    19f0:	31 81       	ldd	r19, Z+1	; 0x01
    19f2:	fc 01       	movw	r30, r24
    19f4:	31 83       	std	Z+1, r19	; 0x01
    19f6:	20 83       	st	Z, r18
    19f8:	ce 01       	movw	r24, r28
    19fa:	8d 5b       	subi	r24, 0xBD	; 189
    19fc:	9f 4f       	sbci	r25, 0xFF	; 255
    19fe:	fc 01       	movw	r30, r24
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <main+0x152>
    1a08:	9e 01       	movw	r18, r28
    1a0a:	2d 5b       	subi	r18, 0xBD	; 189
    1a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0e:	f9 01       	movw	r30, r18
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	80 83       	st	Z, r24
		_delay_ms(20);
		SendCommand01(0x06, 0x00, 0x0F);
    1a14:	4f e0       	ldi	r20, 0x0F	; 15
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	86 e0       	ldi	r24, 0x06	; 6
    1a1a:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a8 e4       	ldi	r26, 0x48	; 72
    1a24:	b3 e4       	ldi	r27, 0x43	; 67
    1a26:	89 87       	std	Y+9, r24	; 0x09
    1a28:	9a 87       	std	Y+10, r25	; 0x0a
    1a2a:	ab 87       	std	Y+11, r26	; 0x0b
    1a2c:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	4a e7       	ldi	r20, 0x7A	; 122
    1a34:	55 e4       	ldi	r21, 0x45	; 69
    1a36:	69 85       	ldd	r22, Y+9	; 0x09
    1a38:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a3e:	c9 d3       	rcall	.+1938   	; 0x21d2 <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	89 ab       	std	Y+49, r24	; 0x31
    1a46:	9a ab       	std	Y+50, r25	; 0x32
    1a48:	ab ab       	std	Y+51, r26	; 0x33
    1a4a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e8       	ldi	r20, 0x80	; 128
    1a52:	5f e3       	ldi	r21, 0x3F	; 63
    1a54:	69 a9       	ldd	r22, Y+49	; 0x31
    1a56:	7a a9       	ldd	r23, Y+50	; 0x32
    1a58:	8b a9       	ldd	r24, Y+51	; 0x33
    1a5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a5c:	39 d3       	rcall	.+1650   	; 0x20d0 <__cmpsf2>
    1a5e:	88 23       	and	r24, r24
    1a60:	2c f4       	brge	.+10     	; 0x1a6c <main+0x1ba>
		__ticks = 1;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9e ab       	std	Y+54, r25	; 0x36
    1a68:	8d ab       	std	Y+53, r24	; 0x35
    1a6a:	3b c0       	rjmp	.+118    	; 0x1ae2 <main+0x230>
	else if (__tmp > 65535)
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	3f ef       	ldi	r19, 0xFF	; 255
    1a70:	4f e7       	ldi	r20, 0x7F	; 127
    1a72:	57 e4       	ldi	r21, 0x47	; 71
    1a74:	69 a9       	ldd	r22, Y+49	; 0x31
    1a76:	7a a9       	ldd	r23, Y+50	; 0x32
    1a78:	8b a9       	ldd	r24, Y+51	; 0x33
    1a7a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a7c:	a6 d3       	rcall	.+1868   	; 0x21ca <__gesf2>
    1a7e:	18 16       	cp	r1, r24
    1a80:	3c f5       	brge	.+78     	; 0x1ad0 <main+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e2       	ldi	r20, 0x20	; 32
    1a88:	51 e4       	ldi	r21, 0x41	; 65
    1a8a:	69 85       	ldd	r22, Y+9	; 0x09
    1a8c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a90:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a92:	9f d3       	rcall	.+1854   	; 0x21d2 <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	1d d3       	rcall	.+1594   	; 0x20d8 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	9e ab       	std	Y+54, r25	; 0x36
    1aa4:	8d ab       	std	Y+53, r24	; 0x35
    1aa6:	0f c0       	rjmp	.+30     	; 0x1ac6 <main+0x214>
    1aa8:	80 e9       	ldi	r24, 0x90	; 144
    1aaa:	91 e0       	ldi	r25, 0x01	; 1
    1aac:	98 af       	std	Y+56, r25	; 0x38
    1aae:	8f ab       	std	Y+55, r24	; 0x37
    1ab0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ab2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <main+0x202>
    1ab8:	98 af       	std	Y+56, r25	; 0x38
    1aba:	8f ab       	std	Y+55, r24	; 0x37
    1abc:	8d a9       	ldd	r24, Y+53	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	9e a9       	ldd	r25, Y+54	; 0x36
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	9e ab       	std	Y+54, r25	; 0x36
    1ac4:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac6:	8d a9       	ldd	r24, Y+53	; 0x35
    1ac8:	9e a9       	ldd	r25, Y+54	; 0x36
    1aca:	89 2b       	or	r24, r25
    1acc:	69 f7       	brne	.-38     	; 0x1aa8 <main+0x1f6>
    1ace:	13 c0       	rjmp	.+38     	; 0x1af6 <main+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad8:	ff d2       	rcall	.+1534   	; 0x20d8 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	9e ab       	std	Y+54, r25	; 0x36
    1ae0:	8d ab       	std	Y+53, r24	; 0x35
    1ae2:	8d a9       	ldd	r24, Y+53	; 0x35
    1ae4:	9e a9       	ldd	r25, Y+54	; 0x36
    1ae6:	9a af       	std	Y+58, r25	; 0x3a
    1ae8:	89 af       	std	Y+57, r24	; 0x39
    1aea:	89 ad       	ldd	r24, Y+57	; 0x39
    1aec:	9a ad       	ldd	r25, Y+58	; 0x3a
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <main+0x23c>
    1af2:	9a af       	std	Y+58, r25	; 0x3a
    1af4:	89 af       	std	Y+57, r24	; 0x39
    1af6:	41 e0       	ldi	r20, 0x01	; 1
		_delay_ms(200);
		SendCommand01(0x0F, 0x01, 0x01);
    1af8:	61 e0       	ldi	r22, 0x01	; 1
    1afa:	8f e0       	ldi	r24, 0x0F	; 15
    1afc:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a8 e4       	ldi	r26, 0x48	; 72
    1b06:	b3 e4       	ldi	r27, 0x43	; 67
    1b08:	8d 87       	std	Y+13, r24	; 0x0d
    1b0a:	9e 87       	std	Y+14, r25	; 0x0e
    1b0c:	af 87       	std	Y+15, r26	; 0x0f
    1b0e:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4a e7       	ldi	r20, 0x7A	; 122
    1b16:	55 e4       	ldi	r21, 0x45	; 69
    1b18:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b1a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b1e:	98 89       	ldd	r25, Y+16	; 0x10
    1b20:	58 d3       	rcall	.+1712   	; 0x21d2 <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	8f a3       	std	Y+39, r24	; 0x27
    1b28:	98 a7       	std	Y+40, r25	; 0x28
    1b2a:	a9 a7       	std	Y+41, r26	; 0x29
    1b2c:	ba a7       	std	Y+42, r27	; 0x2a
	if (__tmp < 1.0)
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e8       	ldi	r20, 0x80	; 128
    1b34:	5f e3       	ldi	r21, 0x3F	; 63
    1b36:	6f a1       	ldd	r22, Y+39	; 0x27
    1b38:	78 a5       	ldd	r23, Y+40	; 0x28
    1b3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b3e:	c8 d2       	rcall	.+1424   	; 0x20d0 <__cmpsf2>
    1b40:	88 23       	and	r24, r24
    1b42:	2c f4       	brge	.+10     	; 0x1b4e <main+0x29c>
		__ticks = 1;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9c a7       	std	Y+44, r25	; 0x2c
    1b4a:	8b a7       	std	Y+43, r24	; 0x2b
    1b4c:	3b c0       	rjmp	.+118    	; 0x1bc4 <main+0x312>
	else if (__tmp > 65535)
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	3f ef       	ldi	r19, 0xFF	; 255
    1b52:	4f e7       	ldi	r20, 0x7F	; 127
    1b54:	57 e4       	ldi	r21, 0x47	; 71
    1b56:	6f a1       	ldd	r22, Y+39	; 0x27
    1b58:	78 a5       	ldd	r23, Y+40	; 0x28
    1b5a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b5e:	35 d3       	rcall	.+1642   	; 0x21ca <__gesf2>
    1b60:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b62:	3c f5       	brge	.+78     	; 0x1bb2 <main+0x300>
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e2       	ldi	r20, 0x20	; 32
    1b6a:	51 e4       	ldi	r21, 0x41	; 65
    1b6c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b6e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b72:	98 89       	ldd	r25, Y+16	; 0x10
    1b74:	2e d3       	rcall	.+1628   	; 0x21d2 <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	ac d2       	rcall	.+1368   	; 0x20d8 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9c a7       	std	Y+44, r25	; 0x2c
    1b86:	8b a7       	std	Y+43, r24	; 0x2b
    1b88:	0f c0       	rjmp	.+30     	; 0x1ba8 <main+0x2f6>
    1b8a:	80 e9       	ldi	r24, 0x90	; 144
    1b8c:	91 e0       	ldi	r25, 0x01	; 1
    1b8e:	9e a7       	std	Y+46, r25	; 0x2e
    1b90:	8d a7       	std	Y+45, r24	; 0x2d
    1b92:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b94:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <main+0x2e4>
    1b9a:	9e a7       	std	Y+46, r25	; 0x2e
    1b9c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	9c a7       	std	Y+44, r25	; 0x2c
    1ba6:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1baa:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bac:	89 2b       	or	r24, r25
    1bae:	69 f7       	brne	.-38     	; 0x1b8a <main+0x2d8>
    1bb0:	13 c0       	rjmp	.+38     	; 0x1bd8 <main+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb2:	6f a1       	ldd	r22, Y+39	; 0x27
    1bb4:	78 a5       	ldd	r23, Y+40	; 0x28
    1bb6:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bba:	8e d2       	rcall	.+1308   	; 0x20d8 <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	9c a7       	std	Y+44, r25	; 0x2c
    1bc2:	8b a7       	std	Y+43, r24	; 0x2b
    1bc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bc8:	98 ab       	std	Y+48, r25	; 0x30
    1bca:	8f a7       	std	Y+47, r24	; 0x2f
    1bcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bce:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <main+0x31e>
    1bd4:	98 ab       	std	Y+48, r25	; 0x30
    1bd6:	8f a7       	std	Y+47, r24	; 0x2f
    1bd8:	81 e3       	ldi	r24, 0x31	; 49
		_delay_ms(200);

		DDRD = 0x00;
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	fc 01       	movw	r30, r24
    1bde:	10 82       	st	Z, r1
    1be0:	82 e2       	ldi	r24, 0x22	; 34
		DDRE = 0x00;
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	fc 01       	movw	r30, r24
    1be6:	10 82       	st	Z, r1
    1be8:	8a e5       	ldi	r24, 0x5A	; 90
		EICRB = (2 << ISC40) | (2 << ISC50) | (2 << ISC60) | (2 << ISC70);
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	2a ea       	ldi	r18, 0xAA	; 170
    1bee:	fc 01       	movw	r30, r24
    1bf0:	20 83       	st	Z, r18
    1bf2:	8a e6       	ldi	r24, 0x6A	; 106
		
		EICRA = (2 << ISC30);
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	20 e8       	ldi	r18, 0x80	; 128
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	20 83       	st	Z, r18
    1bfc:	89 e5       	ldi	r24, 0x59	; 89

		EIMSK = (1 << INT3) | (1 << INT4) | (1 << INT5) | (1 << INT6) | (1 << INT7);
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	28 ef       	ldi	r18, 0xF8	; 248
    1c02:	fc 01       	movw	r30, r24
    1c04:	20 83       	st	Z, r18
    1c06:	78 94       	sei

		sei();
    1c08:	83 e5       	ldi	r24, 0x53	; 83

		

		TCCR0 = 0x07;
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	27 e0       	ldi	r18, 0x07	; 7
    1c0e:	fc 01       	movw	r30, r24
    1c10:	20 83       	st	Z, r18
    1c12:	0e 94 b3 05 	call	0xb66	; 0xb66 <setup>
		//TCNT0 = 0x00;

		setup();
    1c16:	88 eb       	ldi	r24, 0xB8	; 184
		
		draw_picture(KO);
    1c18:	92 e0       	ldi	r25, 0x02	; 2
    1c1a:	0e 94 8a 05 	call	0xb14	; 0xb14 <draw_picture>
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	90 e8       	ldi	r25, 0x80	; 128
    1c22:	ab eb       	ldi	r26, 0xBB	; 187
    1c24:	b4 e4       	ldi	r27, 0x44	; 68
    1c26:	89 8f       	std	Y+25, r24	; 0x19
    1c28:	9a 8f       	std	Y+26, r25	; 0x1a
    1c2a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c2c:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	4a e7       	ldi	r20, 0x7A	; 122
    1c34:	55 e4       	ldi	r21, 0x45	; 69
    1c36:	69 8d       	ldd	r22, Y+25	; 0x19
    1c38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c3e:	c9 d2       	rcall	.+1426   	; 0x21d2 <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	8d 8f       	std	Y+29, r24	; 0x1d
    1c46:	9e 8f       	std	Y+30, r25	; 0x1e
    1c48:	af 8f       	std	Y+31, r26	; 0x1f
    1c4a:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e8       	ldi	r20, 0x80	; 128
    1c52:	5f e3       	ldi	r21, 0x3F	; 63
    1c54:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c56:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1c58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c5a:	98 a1       	ldd	r25, Y+32	; 0x20
    1c5c:	39 d2       	rcall	.+1138   	; 0x20d0 <__cmpsf2>
    1c5e:	88 23       	and	r24, r24
    1c60:	2c f4       	brge	.+10     	; 0x1c6c <main+0x3ba>
		__ticks = 1;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	9a a3       	std	Y+34, r25	; 0x22
    1c68:	89 a3       	std	Y+33, r24	; 0x21
	else if (__tmp > 65535)
    1c6a:	3b c0       	rjmp	.+118    	; 0x1ce2 <main+0x430>
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	3f ef       	ldi	r19, 0xFF	; 255
    1c70:	4f e7       	ldi	r20, 0x7F	; 127
    1c72:	57 e4       	ldi	r21, 0x47	; 71
    1c74:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c76:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1c78:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c7a:	98 a1       	ldd	r25, Y+32	; 0x20
    1c7c:	a6 d2       	rcall	.+1356   	; 0x21ca <__gesf2>
    1c7e:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c80:	3c f5       	brge	.+78     	; 0x1cd0 <main+0x41e>
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e2       	ldi	r20, 0x20	; 32
    1c88:	51 e4       	ldi	r21, 0x41	; 65
    1c8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c92:	9f d2       	rcall	.+1342   	; 0x21d2 <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	bc 01       	movw	r22, r24
    1c9a:	cd 01       	movw	r24, r26
    1c9c:	1d d2       	rcall	.+1082   	; 0x20d8 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9a a3       	std	Y+34, r25	; 0x22
    1ca4:	89 a3       	std	Y+33, r24	; 0x21
    1ca6:	0f c0       	rjmp	.+30     	; 0x1cc6 <main+0x414>
    1ca8:	80 e9       	ldi	r24, 0x90	; 144
    1caa:	91 e0       	ldi	r25, 0x01	; 1
    1cac:	9c a3       	std	Y+36, r25	; 0x24
    1cae:	8b a3       	std	Y+35, r24	; 0x23
    1cb0:	8b a1       	ldd	r24, Y+35	; 0x23
    1cb2:	9c a1       	ldd	r25, Y+36	; 0x24
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <main+0x402>
    1cb8:	9c a3       	std	Y+36, r25	; 0x24
    1cba:	8b a3       	std	Y+35, r24	; 0x23
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbc:	89 a1       	ldd	r24, Y+33	; 0x21
    1cbe:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	9a a3       	std	Y+34, r25	; 0x22
    1cc4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc8:	9a a1       	ldd	r25, Y+34	; 0x22
    1cca:	89 2b       	or	r24, r25
    1ccc:	69 f7       	brne	.-38     	; 0x1ca8 <main+0x3f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cce:	13 c0       	rjmp	.+38     	; 0x1cf6 <main+0x444>
    1cd0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1cd2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1cd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cd6:	98 a1       	ldd	r25, Y+32	; 0x20
    1cd8:	ff d1       	rcall	.+1022   	; 0x20d8 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9a a3       	std	Y+34, r25	; 0x22
    1ce0:	89 a3       	std	Y+33, r24	; 0x21
    1ce2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce6:	9e a3       	std	Y+38, r25	; 0x26
    1ce8:	8d a3       	std	Y+37, r24	; 0x25
    1cea:	8d a1       	ldd	r24, Y+37	; 0x25
    1cec:	9e a1       	ldd	r25, Y+38	; 0x26
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <main+0x43c>
    1cf2:	9e a3       	std	Y+38, r25	; 0x26
    1cf4:	8d a3       	std	Y+37, r24	; 0x25
		_delay_ms(1500);
		clear_screen();
    1cf6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <clear_screen>
		title();
    1cfa:	88 d8       	rcall	.-3824   	; 0xe0c <title>
    1cfc:	8d e4       	ldi	r24, 0x4D	; 77
		
		dir = RIGHT;
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    1d04:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    1d08:	7a c1       	rjmp	.+756    	; 0x1ffe <main+0x74c>

		while(game == 1)
    1d0a:	87 e2       	ldi	r24, 0x27	; 39
		{
			ADMUX = (1<<REFS0) | (0 << MUX0);//기준전압 AVCC 사용, ADC0 단극성 입력
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	20 e4       	ldi	r18, 0x40	; 64
    1d10:	fc 01       	movw	r30, r24
    1d12:	20 83       	st	Z, r18
    1d14:	86 e2       	ldi	r24, 0x26	; 38
			ADCSRA = (1<<ADEN) | (1<<ADSC) | (7 << ADPS0);	//ADCSRA = 0x87;// ADEN=1, 16MHz의 128분주 -> 125kHz
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	27 ec       	ldi	r18, 0xC7	; 199
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	20 83       	st	Z, r18
    1d1e:	00 00       	nop
			
			while((ADCSRA & (1<<ADIF)) == 0);	//변환 종료를 기다림
    1d20:	86 e2       	ldi	r24, 0x26	; 38
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	fc 01       	movw	r30, r24
    1d26:	80 81       	ld	r24, Z
    1d28:	88 2f       	mov	r24, r24
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	80 71       	andi	r24, 0x10	; 16
    1d2e:	99 27       	eor	r25, r25
    1d30:	89 2b       	or	r24, r25
    1d32:	b1 f3       	breq	.-20     	; 0x1d20 <main+0x46e>
    1d34:	86 e2       	ldi	r24, 0x26	; 38
			ADCSRA |= (1<<ADIF);	//ADIF 플래그를 지움
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	26 e2       	ldi	r18, 0x26	; 38
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	f9 01       	movw	r30, r18
    1d3e:	20 81       	ld	r18, Z
    1d40:	20 61       	ori	r18, 0x10	; 16
    1d42:	fc 01       	movw	r30, r24
    1d44:	20 83       	st	Z, r18
    1d46:	84 e2       	ldi	r24, 0x24	; 36
			
			val_x = ADC;
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	80 81       	ld	r24, Z
    1d4e:	91 81       	ldd	r25, Z+1	; 0x01
    1d50:	cc 01       	movw	r24, r24
    1d52:	a0 e0       	ldi	r26, 0x00	; 0
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	89 8b       	std	Y+17, r24	; 0x11
    1d58:	9a 8b       	std	Y+18, r25	; 0x12
    1d5a:	ab 8b       	std	Y+19, r26	; 0x13
    1d5c:	bc 8b       	std	Y+20, r27	; 0x14
    1d5e:	89 89       	ldd	r24, Y+17	; 0x11
			if(val_x <=100 && dir != LEFT)
    1d60:	9a 89       	ldd	r25, Y+18	; 0x12
    1d62:	ab 89       	ldd	r26, Y+19	; 0x13
    1d64:	bc 89       	ldd	r27, Y+20	; 0x14
    1d66:	85 36       	cpi	r24, 0x65	; 101
    1d68:	91 05       	cpc	r25, r1
    1d6a:	a1 05       	cpc	r26, r1
    1d6c:	b1 05       	cpc	r27, r1
    1d6e:	9c f4       	brge	.+38     	; 0x1d96 <main+0x4e4>
    1d70:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    1d74:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    1d78:	8b 34       	cpi	r24, 0x4B	; 75
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	61 f0       	breq	.+24     	; 0x1d96 <main+0x4e4>
    1d7e:	43 e0       	ldi	r20, 0x03	; 3
			{
				SendCommand01(0x0F, 0x01, 0x03);
    1d80:	61 e0       	ldi	r22, 0x01	; 1
    1d82:	8f e0       	ldi	r24, 0x0F	; 15
    1d84:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
    1d88:	8d e4       	ldi	r24, 0x4D	; 77
				dir = RIGHT;
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    1d90:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    1d94:	1b c0       	rjmp	.+54     	; 0x1dcc <main+0x51a>
    1d96:	89 89       	ldd	r24, Y+17	; 0x11
			}
			
			else if(val_x >=800 && dir != RIGHT)
    1d98:	9a 89       	ldd	r25, Y+18	; 0x12
    1d9a:	ab 89       	ldd	r26, Y+19	; 0x13
    1d9c:	bc 89       	ldd	r27, Y+20	; 0x14
    1d9e:	80 32       	cpi	r24, 0x20	; 32
    1da0:	93 40       	sbci	r25, 0x03	; 3
    1da2:	a1 05       	cpc	r26, r1
    1da4:	b1 05       	cpc	r27, r1
    1da6:	94 f0       	brlt	.+36     	; 0x1dcc <main+0x51a>
    1da8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    1dac:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    1db0:	8d 34       	cpi	r24, 0x4D	; 77
    1db2:	91 05       	cpc	r25, r1
    1db4:	59 f0       	breq	.+22     	; 0x1dcc <main+0x51a>
    1db6:	43 e0       	ldi	r20, 0x03	; 3
			{
				SendCommand01(0x0F, 0x01, 0x03);
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	8f e0       	ldi	r24, 0x0F	; 15
    1dbc:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
    1dc0:	8b e4       	ldi	r24, 0x4B	; 75
				dir = LEFT;
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    1dc8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    1dcc:	87 e2       	ldi	r24, 0x27	; 39
			}
			

			ADMUX = (1<<REFS0) | (1 << MUX0);//기준전압 AVCC 사용, ADC1 단극성 입력
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	21 e4       	ldi	r18, 0x41	; 65
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	20 83       	st	Z, r18
    1dd6:	86 e2       	ldi	r24, 0x26	; 38
			ADCSRA = (1<<ADEN) | (1<<ADSC) | (7 << ADPS0);	//ADCSRA = 0x87;// ADEN=1, 16MHz의 128분주 -> 125kHz
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	27 ec       	ldi	r18, 0xC7	; 199
    1ddc:	fc 01       	movw	r30, r24
    1dde:	20 83       	st	Z, r18
    1de0:	00 00       	nop
			
			while((ADCSRA & (1<<ADIF)) == 0);	//변환 종료를 기다림
    1de2:	86 e2       	ldi	r24, 0x26	; 38
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	fc 01       	movw	r30, r24
    1de8:	80 81       	ld	r24, Z
    1dea:	88 2f       	mov	r24, r24
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	80 71       	andi	r24, 0x10	; 16
    1df0:	99 27       	eor	r25, r25
    1df2:	89 2b       	or	r24, r25
    1df4:	b1 f3       	breq	.-20     	; 0x1de2 <main+0x530>
    1df6:	86 e2       	ldi	r24, 0x26	; 38
			ADCSRA |= (1<<ADIF);	//ADIF 플래그를 지움
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	26 e2       	ldi	r18, 0x26	; 38
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	f9 01       	movw	r30, r18
    1e00:	20 81       	ld	r18, Z
    1e02:	20 61       	ori	r18, 0x10	; 16
    1e04:	fc 01       	movw	r30, r24
    1e06:	20 83       	st	Z, r18
    1e08:	84 e2       	ldi	r24, 0x24	; 36

			val_y = ADC;
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	80 81       	ld	r24, Z
    1e10:	91 81       	ldd	r25, Z+1	; 0x01
    1e12:	cc 01       	movw	r24, r24
    1e14:	a0 e0       	ldi	r26, 0x00	; 0
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	8d 8b       	std	Y+21, r24	; 0x15
    1e1a:	9e 8b       	std	Y+22, r25	; 0x16
    1e1c:	af 8b       	std	Y+23, r26	; 0x17
    1e1e:	b8 8f       	std	Y+24, r27	; 0x18
    1e20:	8d 89       	ldd	r24, Y+21	; 0x15
			if(val_y >=800 && dir != DOWN) 
    1e22:	9e 89       	ldd	r25, Y+22	; 0x16
    1e24:	af 89       	ldd	r26, Y+23	; 0x17
    1e26:	b8 8d       	ldd	r27, Y+24	; 0x18
    1e28:	80 32       	cpi	r24, 0x20	; 32
    1e2a:	93 40       	sbci	r25, 0x03	; 3
    1e2c:	a1 05       	cpc	r26, r1
    1e2e:	b1 05       	cpc	r27, r1
    1e30:	9c f0       	brlt	.+38     	; 0x1e58 <main+0x5a6>
    1e32:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    1e36:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    1e3a:	80 35       	cpi	r24, 0x50	; 80
    1e3c:	91 05       	cpc	r25, r1
    1e3e:	61 f0       	breq	.+24     	; 0x1e58 <main+0x5a6>
    1e40:	43 e0       	ldi	r20, 0x03	; 3
			{
				SendCommand01(0x0F, 0x01, 0x03);
    1e42:	61 e0       	ldi	r22, 0x01	; 1
    1e44:	8f e0       	ldi	r24, 0x0F	; 15
    1e46:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
    1e4a:	88 e4       	ldi	r24, 0x48	; 72
				dir = UP;
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    1e52:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    1e56:	1b c0       	rjmp	.+54     	; 0x1e8e <main+0x5dc>
    1e58:	8d 89       	ldd	r24, Y+21	; 0x15
			}
			else if(val_y <=100 && dir != UP)
    1e5a:	9e 89       	ldd	r25, Y+22	; 0x16
    1e5c:	af 89       	ldd	r26, Y+23	; 0x17
    1e5e:	b8 8d       	ldd	r27, Y+24	; 0x18
    1e60:	85 36       	cpi	r24, 0x65	; 101
    1e62:	91 05       	cpc	r25, r1
    1e64:	a1 05       	cpc	r26, r1
    1e66:	b1 05       	cpc	r27, r1
    1e68:	94 f4       	brge	.+36     	; 0x1e8e <main+0x5dc>
    1e6a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    1e6e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    1e72:	88 34       	cpi	r24, 0x48	; 72
    1e74:	91 05       	cpc	r25, r1
			{
				SendCommand01(0x0F, 0x01, 0x03);
    1e76:	59 f0       	breq	.+22     	; 0x1e8e <main+0x5dc>
    1e78:	43 e0       	ldi	r20, 0x03	; 3
    1e7a:	61 e0       	ldi	r22, 0x01	; 1
    1e7c:	8f e0       	ldi	r24, 0x0F	; 15
    1e7e:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
				dir = DOWN;
    1e82:	80 e5       	ldi	r24, 0x50	; 80
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    1e8a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
			}


			move(dir);
    1e8e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    1e92:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
			//SendCommand01(0x0F, 0x01, 0x02);
			draw_map();
    1e96:	53 da       	rcall	.-2906   	; 0x133e <move>
    1e98:	17 d8       	rcall	.-4050   	; 0xec8 <draw_map>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	a0 ea       	ldi	r26, 0xA0	; 160
    1ea0:	b2 e4       	ldi	r27, 0x42	; 66
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	9a 83       	std	Y+2, r25	; 0x02
    1ea6:	ab 83       	std	Y+3, r26	; 0x03
    1ea8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1eaa:	8e 01       	movw	r16, r28
    1eac:	0b 5b       	subi	r16, 0xBB	; 187
    1eae:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a e7       	ldi	r20, 0x7A	; 122
    1eb6:	55 e4       	ldi	r21, 0x45	; 69
    1eb8:	69 81       	ldd	r22, Y+1	; 0x01
    1eba:	7a 81       	ldd	r23, Y+2	; 0x02
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec0:	88 d1       	rcall	.+784    	; 0x21d2 <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	80 83       	st	Z, r24
    1eca:	91 83       	std	Z+1, r25	; 0x01
    1ecc:	a2 83       	std	Z+2, r26	; 0x02
    1ece:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	8b 5b       	subi	r24, 0xBB	; 187
    1ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e8       	ldi	r20, 0x80	; 128
    1edc:	5f e3       	ldi	r21, 0x3F	; 63
    1ede:	fc 01       	movw	r30, r24
    1ee0:	60 81       	ld	r22, Z
    1ee2:	71 81       	ldd	r23, Z+1	; 0x01
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	93 81       	ldd	r25, Z+3	; 0x03
    1ee8:	f3 d0       	rcall	.+486    	; 0x20d0 <__cmpsf2>
    1eea:	88 23       	and	r24, r24
    1eec:	4c f4       	brge	.+18     	; 0x1f00 <main+0x64e>
		__ticks = 1;
    1eee:	ce 01       	movw	r24, r28
    1ef0:	87 5b       	subi	r24, 0xB7	; 183
    1ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef4:	21 e0       	ldi	r18, 0x01	; 1
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	fc 01       	movw	r30, r24
    1efa:	31 83       	std	Z+1, r19	; 0x01
    1efc:	20 83       	st	Z, r18
	else if (__tmp > 65535)
    1efe:	65 c0       	rjmp	.+202    	; 0x1fca <main+0x718>
    1f00:	ce 01       	movw	r24, r28
    1f02:	8b 5b       	subi	r24, 0xBB	; 187
    1f04:	9f 4f       	sbci	r25, 0xFF	; 255
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	57 e4       	ldi	r21, 0x47	; 71
    1f0e:	fc 01       	movw	r30, r24
    1f10:	60 81       	ld	r22, Z
    1f12:	71 81       	ldd	r23, Z+1	; 0x01
    1f14:	82 81       	ldd	r24, Z+2	; 0x02
    1f16:	93 81       	ldd	r25, Z+3	; 0x03
    1f18:	58 d1       	rcall	.+688    	; 0x21ca <__gesf2>
    1f1a:	18 16       	cp	r1, r24
    1f1c:	0c f0       	brlt	.+2      	; 0x1f20 <main+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1e:	44 c0       	rjmp	.+136    	; 0x1fa8 <main+0x6f6>
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e2       	ldi	r20, 0x20	; 32
    1f26:	51 e4       	ldi	r21, 0x41	; 65
    1f28:	69 81       	ldd	r22, Y+1	; 0x01
    1f2a:	7a 81       	ldd	r23, Y+2	; 0x02
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	50 d1       	rcall	.+672    	; 0x21d2 <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	8e 01       	movw	r16, r28
    1f38:	07 5b       	subi	r16, 0xB7	; 183
    1f3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3c:	bc 01       	movw	r22, r24
    1f3e:	cd 01       	movw	r24, r26
    1f40:	cb d0       	rcall	.+406    	; 0x20d8 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	f8 01       	movw	r30, r16
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	80 83       	st	Z, r24
    1f4c:	24 c0       	rjmp	.+72     	; 0x1f96 <main+0x6e4>
    1f4e:	ce 01       	movw	r24, r28
    1f50:	85 5b       	subi	r24, 0xB5	; 181
    1f52:	9f 4f       	sbci	r25, 0xFF	; 255
    1f54:	20 e9       	ldi	r18, 0x90	; 144
    1f56:	31 e0       	ldi	r19, 0x01	; 1
    1f58:	fc 01       	movw	r30, r24
    1f5a:	31 83       	std	Z+1, r19	; 0x01
    1f5c:	20 83       	st	Z, r18
    1f5e:	ce 01       	movw	r24, r28
    1f60:	85 5b       	subi	r24, 0xB5	; 181
    1f62:	9f 4f       	sbci	r25, 0xFF	; 255
    1f64:	fc 01       	movw	r30, r24
    1f66:	80 81       	ld	r24, Z
    1f68:	91 81       	ldd	r25, Z+1	; 0x01
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <main+0x6b8>
    1f6e:	9e 01       	movw	r18, r28
    1f70:	25 5b       	subi	r18, 0xB5	; 181
    1f72:	3f 4f       	sbci	r19, 0xFF	; 255
    1f74:	f9 01       	movw	r30, r18
    1f76:	91 83       	std	Z+1, r25	; 0x01
    1f78:	80 83       	st	Z, r24
    1f7a:	ce 01       	movw	r24, r28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7c:	87 5b       	subi	r24, 0xB7	; 183
    1f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f80:	9e 01       	movw	r18, r28
    1f82:	27 5b       	subi	r18, 0xB7	; 183
    1f84:	3f 4f       	sbci	r19, 0xFF	; 255
    1f86:	f9 01       	movw	r30, r18
    1f88:	20 81       	ld	r18, Z
    1f8a:	31 81       	ldd	r19, Z+1	; 0x01
    1f8c:	21 50       	subi	r18, 0x01	; 1
    1f8e:	31 09       	sbc	r19, r1
    1f90:	fc 01       	movw	r30, r24
    1f92:	31 83       	std	Z+1, r19	; 0x01
    1f94:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f96:	ce 01       	movw	r24, r28
    1f98:	87 5b       	subi	r24, 0xB7	; 183
    1f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	80 81       	ld	r24, Z
    1fa0:	91 81       	ldd	r25, Z+1	; 0x01
    1fa2:	89 2b       	or	r24, r25
    1fa4:	a1 f6       	brne	.-88     	; 0x1f4e <main+0x69c>
    1fa6:	2b c0       	rjmp	.+86     	; 0x1ffe <main+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa8:	8e 01       	movw	r16, r28
    1faa:	07 5b       	subi	r16, 0xB7	; 183
    1fac:	1f 4f       	sbci	r17, 0xFF	; 255
    1fae:	ce 01       	movw	r24, r28
    1fb0:	8b 5b       	subi	r24, 0xBB	; 187
    1fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	8c d0       	rcall	.+280    	; 0x20d8 <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	f8 01       	movw	r30, r16
    1fc6:	91 83       	std	Z+1, r25	; 0x01
    1fc8:	80 83       	st	Z, r24
    1fca:	ce 01       	movw	r24, r28
    1fcc:	83 5b       	subi	r24, 0xB3	; 179
    1fce:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd0:	9e 01       	movw	r18, r28
    1fd2:	27 5b       	subi	r18, 0xB7	; 183
    1fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd6:	f9 01       	movw	r30, r18
    1fd8:	20 81       	ld	r18, Z
    1fda:	31 81       	ldd	r19, Z+1	; 0x01
    1fdc:	fc 01       	movw	r30, r24
    1fde:	31 83       	std	Z+1, r19	; 0x01
    1fe0:	20 83       	st	Z, r18
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	83 5b       	subi	r24, 0xB3	; 179
    1fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe8:	fc 01       	movw	r30, r24
    1fea:	80 81       	ld	r24, Z
    1fec:	91 81       	ldd	r25, Z+1	; 0x01
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <main+0x73c>
    1ff2:	9e 01       	movw	r18, r28
    1ff4:	23 5b       	subi	r18, 0xB3	; 179
    1ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff8:	f9 01       	movw	r30, r18
    1ffa:	91 83       	std	Z+1, r25	; 0x01
    1ffc:	80 83       	st	Z, r24
    1ffe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
		clear_screen();
		title();
		
		dir = RIGHT;

		while(game == 1)
    2002:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	09 f4       	brne	.+2      	; 0x200c <main+0x75a>
    200a:	7f ce       	rjmp	.-770    	; 0x1d0a <main+0x458>
    200c:	61 cc       	rjmp	.-1854   	; 0x18d0 <main+0x1e>

0000200e <clear_map>:
			move(dir);
			//SendCommand01(0x0F, 0x01, 0x02);
			draw_map();
			_delay_ms(80);
		}
	}
    200e:	cf 93       	push	r28
	
}

void clear_map()
{
    2010:	df 93       	push	r29
    2012:	00 d0       	rcall	.+0      	; 0x2014 <clear_map+0x6>
    2014:	00 d0       	rcall	.+0      	; 0x2016 <clear_map+0x8>
    2016:	00 d0       	rcall	.+0      	; 0x2018 <clear_map+0xa>
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
	for(int i = 1; i < 127; i++)
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	1f c0       	rjmp	.+62     	; 0x2064 <clear_map+0x56>
	{
		
		for(int j = 3; j < 7; j++)
    2026:	83 e0       	ldi	r24, 0x03	; 3
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9c 83       	std	Y+4, r25	; 0x04
    202c:	8b 83       	std	Y+3, r24	; 0x03
    202e:	11 c0       	rjmp	.+34     	; 0x2052 <clear_map+0x44>
		{
			ssd1306_set_page_start(j);
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ssd1306_set_page_start>
			ssd1306_set_column_addr(i);
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	0e 94 0c 04 	call	0x818	; 0x818 <ssd1306_set_column_addr>
			ssd1306_data(blank, 1);
    203c:	61 e0       	ldi	r22, 0x01	; 1
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	88 e3       	ldi	r24, 0x38	; 56
    2042:	97 e0       	ldi	r25, 0x07	; 7
    2044:	0e 94 77 03 	call	0x6ee	; 0x6ee <ssd1306_data>
void clear_map()
{
	for(int i = 1; i < 127; i++)
	{
		
		for(int j = 3; j < 7; j++)
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	01 96       	adiw	r24, 0x01	; 1
    204e:	9c 83       	std	Y+4, r25	; 0x04
    2050:	8b 83       	std	Y+3, r24	; 0x03
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	07 97       	sbiw	r24, 0x07	; 7
    2058:	5c f3       	brlt	.-42     	; 0x2030 <clear_map+0x22>
	
}

void clear_map()
{
	for(int i = 1; i < 127; i++)
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	9a 81       	ldd	r25, Y+2	; 0x02
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	9a 83       	std	Y+2, r25	; 0x02
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	9a 81       	ldd	r25, Y+2	; 0x02
    2068:	8f 37       	cpi	r24, 0x7F	; 127
    206a:	91 05       	cpc	r25, r1
    206c:	e4 f2       	brlt	.-72     	; 0x2026 <clear_map+0x18>
			ssd1306_set_column_addr(i);
			ssd1306_data(blank, 1);
		}
	}

	for(int i = 1; i < 127; i++)
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9e 83       	std	Y+6, r25	; 0x06
    2074:	8d 83       	std	Y+5, r24	; 0x05
    2076:	1d c0       	rjmp	.+58     	; 0x20b2 <clear_map+0xa4>
	{
		ssd1306_set_page_start(2);
    2078:	82 e0       	ldi	r24, 0x02	; 2
    207a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	0e 94 0c 04 	call	0x818	; 0x818 <ssd1306_set_column_addr>
		ssd1306_data(horizon1, 1);
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	8a e0       	ldi	r24, 0x0A	; 10
    208a:	91 e0       	ldi	r25, 0x01	; 1
    208c:	0e 94 77 03 	call	0x6ee	; 0x6ee <ssd1306_data>
		ssd1306_set_page_start(7);
    2090:	87 e0       	ldi	r24, 0x07	; 7
    2092:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	0e 94 0c 04 	call	0x818	; 0x818 <ssd1306_set_column_addr>
		ssd1306_data(horizon2, 1);
    209c:	61 e0       	ldi	r22, 0x01	; 1
    209e:	70 e0       	ldi	r23, 0x00	; 0
    20a0:	8b e0       	ldi	r24, 0x0B	; 11
    20a2:	91 e0       	ldi	r25, 0x01	; 1
    20a4:	0e 94 77 03 	call	0x6ee	; 0x6ee <ssd1306_data>
			ssd1306_set_column_addr(i);
			ssd1306_data(blank, 1);
		}
	}

	for(int i = 1; i < 127; i++)
    20a8:	8d 81       	ldd	r24, Y+5	; 0x05
    20aa:	9e 81       	ldd	r25, Y+6	; 0x06
    20ac:	01 96       	adiw	r24, 0x01	; 1
    20ae:	9e 83       	std	Y+6, r25	; 0x06
    20b0:	8d 83       	std	Y+5, r24	; 0x05
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	9e 81       	ldd	r25, Y+6	; 0x06
    20b6:	8f 37       	cpi	r24, 0x7F	; 127
    20b8:	91 05       	cpc	r25, r1
    20ba:	f4 f2       	brlt	.-68     	; 0x2078 <clear_map+0x6a>
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
    20bc:	00 00       	nop
    20be:	26 96       	adiw	r28, 0x06	; 6
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	08 95       	ret

000020d0 <__cmpsf2>:
    20d0:	2f d0       	rcall	.+94     	; 0x2130 <__fp_cmp>
    20d2:	08 f4       	brcc	.+2      	; 0x20d6 <__cmpsf2+0x6>
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	08 95       	ret

000020d8 <__fixunssfsi>:
    20d8:	57 d0       	rcall	.+174    	; 0x2188 <__fp_splitA>
    20da:	88 f0       	brcs	.+34     	; 0x20fe <__fixunssfsi+0x26>
    20dc:	9f 57       	subi	r25, 0x7F	; 127
    20de:	90 f0       	brcs	.+36     	; 0x2104 <__fixunssfsi+0x2c>
    20e0:	b9 2f       	mov	r27, r25
    20e2:	99 27       	eor	r25, r25
    20e4:	b7 51       	subi	r27, 0x17	; 23
    20e6:	a0 f0       	brcs	.+40     	; 0x2110 <__fixunssfsi+0x38>
    20e8:	d1 f0       	breq	.+52     	; 0x211e <__fixunssfsi+0x46>
    20ea:	66 0f       	add	r22, r22
    20ec:	77 1f       	adc	r23, r23
    20ee:	88 1f       	adc	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	1a f0       	brmi	.+6      	; 0x20fa <__fixunssfsi+0x22>
    20f4:	ba 95       	dec	r27
    20f6:	c9 f7       	brne	.-14     	; 0x20ea <__fixunssfsi+0x12>
    20f8:	12 c0       	rjmp	.+36     	; 0x211e <__fixunssfsi+0x46>
    20fa:	b1 30       	cpi	r27, 0x01	; 1
    20fc:	81 f0       	breq	.+32     	; 0x211e <__fixunssfsi+0x46>
    20fe:	5e d0       	rcall	.+188    	; 0x21bc <__fp_zero>
    2100:	b1 e0       	ldi	r27, 0x01	; 1
    2102:	08 95       	ret
    2104:	5b c0       	rjmp	.+182    	; 0x21bc <__fp_zero>
    2106:	67 2f       	mov	r22, r23
    2108:	78 2f       	mov	r23, r24
    210a:	88 27       	eor	r24, r24
    210c:	b8 5f       	subi	r27, 0xF8	; 248
    210e:	39 f0       	breq	.+14     	; 0x211e <__fixunssfsi+0x46>
    2110:	b9 3f       	cpi	r27, 0xF9	; 249
    2112:	cc f3       	brlt	.-14     	; 0x2106 <__fixunssfsi+0x2e>
    2114:	86 95       	lsr	r24
    2116:	77 95       	ror	r23
    2118:	67 95       	ror	r22
    211a:	b3 95       	inc	r27
    211c:	d9 f7       	brne	.-10     	; 0x2114 <__fixunssfsi+0x3c>
    211e:	3e f4       	brtc	.+14     	; 0x212e <__fixunssfsi+0x56>
    2120:	90 95       	com	r25
    2122:	80 95       	com	r24
    2124:	70 95       	com	r23
    2126:	61 95       	neg	r22
    2128:	7f 4f       	sbci	r23, 0xFF	; 255
    212a:	8f 4f       	sbci	r24, 0xFF	; 255
    212c:	9f 4f       	sbci	r25, 0xFF	; 255
    212e:	08 95       	ret

00002130 <__fp_cmp>:
    2130:	99 0f       	add	r25, r25
    2132:	00 08       	sbc	r0, r0
    2134:	55 0f       	add	r21, r21
    2136:	aa 0b       	sbc	r26, r26
    2138:	e0 e8       	ldi	r30, 0x80	; 128
    213a:	fe ef       	ldi	r31, 0xFE	; 254
    213c:	16 16       	cp	r1, r22
    213e:	17 06       	cpc	r1, r23
    2140:	e8 07       	cpc	r30, r24
    2142:	f9 07       	cpc	r31, r25
    2144:	c0 f0       	brcs	.+48     	; 0x2176 <__fp_cmp+0x46>
    2146:	12 16       	cp	r1, r18
    2148:	13 06       	cpc	r1, r19
    214a:	e4 07       	cpc	r30, r20
    214c:	f5 07       	cpc	r31, r21
    214e:	98 f0       	brcs	.+38     	; 0x2176 <__fp_cmp+0x46>
    2150:	62 1b       	sub	r22, r18
    2152:	73 0b       	sbc	r23, r19
    2154:	84 0b       	sbc	r24, r20
    2156:	95 0b       	sbc	r25, r21
    2158:	39 f4       	brne	.+14     	; 0x2168 <__fp_cmp+0x38>
    215a:	0a 26       	eor	r0, r26
    215c:	61 f0       	breq	.+24     	; 0x2176 <__fp_cmp+0x46>
    215e:	23 2b       	or	r18, r19
    2160:	24 2b       	or	r18, r20
    2162:	25 2b       	or	r18, r21
    2164:	21 f4       	brne	.+8      	; 0x216e <__fp_cmp+0x3e>
    2166:	08 95       	ret
    2168:	0a 26       	eor	r0, r26
    216a:	09 f4       	brne	.+2      	; 0x216e <__fp_cmp+0x3e>
    216c:	a1 40       	sbci	r26, 0x01	; 1
    216e:	a6 95       	lsr	r26
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	81 1d       	adc	r24, r1
    2174:	81 1d       	adc	r24, r1
    2176:	08 95       	ret

00002178 <__fp_split3>:
    2178:	57 fd       	sbrc	r21, 7
    217a:	90 58       	subi	r25, 0x80	; 128
    217c:	44 0f       	add	r20, r20
    217e:	55 1f       	adc	r21, r21
    2180:	59 f0       	breq	.+22     	; 0x2198 <__fp_splitA+0x10>
    2182:	5f 3f       	cpi	r21, 0xFF	; 255
    2184:	71 f0       	breq	.+28     	; 0x21a2 <__fp_splitA+0x1a>
    2186:	47 95       	ror	r20

00002188 <__fp_splitA>:
    2188:	88 0f       	add	r24, r24
    218a:	97 fb       	bst	r25, 7
    218c:	99 1f       	adc	r25, r25
    218e:	61 f0       	breq	.+24     	; 0x21a8 <__fp_splitA+0x20>
    2190:	9f 3f       	cpi	r25, 0xFF	; 255
    2192:	79 f0       	breq	.+30     	; 0x21b2 <__fp_splitA+0x2a>
    2194:	87 95       	ror	r24
    2196:	08 95       	ret
    2198:	12 16       	cp	r1, r18
    219a:	13 06       	cpc	r1, r19
    219c:	14 06       	cpc	r1, r20
    219e:	55 1f       	adc	r21, r21
    21a0:	f2 cf       	rjmp	.-28     	; 0x2186 <__fp_split3+0xe>
    21a2:	46 95       	lsr	r20
    21a4:	f1 df       	rcall	.-30     	; 0x2188 <__fp_splitA>
    21a6:	08 c0       	rjmp	.+16     	; 0x21b8 <__fp_splitA+0x30>
    21a8:	16 16       	cp	r1, r22
    21aa:	17 06       	cpc	r1, r23
    21ac:	18 06       	cpc	r1, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	f1 cf       	rjmp	.-30     	; 0x2194 <__fp_splitA+0xc>
    21b2:	86 95       	lsr	r24
    21b4:	71 05       	cpc	r23, r1
    21b6:	61 05       	cpc	r22, r1
    21b8:	08 94       	sec
    21ba:	08 95       	ret

000021bc <__fp_zero>:
    21bc:	e8 94       	clt

000021be <__fp_szero>:
    21be:	bb 27       	eor	r27, r27
    21c0:	66 27       	eor	r22, r22
    21c2:	77 27       	eor	r23, r23
    21c4:	cb 01       	movw	r24, r22
    21c6:	97 f9       	bld	r25, 7
    21c8:	08 95       	ret

000021ca <__gesf2>:
    21ca:	b2 df       	rcall	.-156    	; 0x2130 <__fp_cmp>
    21cc:	08 f4       	brcc	.+2      	; 0x21d0 <__gesf2+0x6>
    21ce:	8f ef       	ldi	r24, 0xFF	; 255
    21d0:	08 95       	ret

000021d2 <__mulsf3>:
    21d2:	0b d0       	rcall	.+22     	; 0x21ea <__mulsf3x>
    21d4:	78 c0       	rjmp	.+240    	; 0x22c6 <__fp_round>
    21d6:	69 d0       	rcall	.+210    	; 0x22aa <__fp_pscA>
    21d8:	28 f0       	brcs	.+10     	; 0x21e4 <__mulsf3+0x12>
    21da:	6e d0       	rcall	.+220    	; 0x22b8 <__fp_pscB>
    21dc:	18 f0       	brcs	.+6      	; 0x21e4 <__mulsf3+0x12>
    21de:	95 23       	and	r25, r21
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <__mulsf3+0x12>
    21e2:	5a c0       	rjmp	.+180    	; 0x2298 <__fp_inf>
    21e4:	5f c0       	rjmp	.+190    	; 0x22a4 <__fp_nan>
    21e6:	11 24       	eor	r1, r1
    21e8:	ea cf       	rjmp	.-44     	; 0x21be <__fp_szero>

000021ea <__mulsf3x>:
    21ea:	c6 df       	rcall	.-116    	; 0x2178 <__fp_split3>
    21ec:	a0 f3       	brcs	.-24     	; 0x21d6 <__mulsf3+0x4>

000021ee <__mulsf3_pse>:
    21ee:	95 9f       	mul	r25, r21
    21f0:	d1 f3       	breq	.-12     	; 0x21e6 <__mulsf3+0x14>
    21f2:	95 0f       	add	r25, r21
    21f4:	50 e0       	ldi	r21, 0x00	; 0
    21f6:	55 1f       	adc	r21, r21
    21f8:	62 9f       	mul	r22, r18
    21fa:	f0 01       	movw	r30, r0
    21fc:	72 9f       	mul	r23, r18
    21fe:	bb 27       	eor	r27, r27
    2200:	f0 0d       	add	r31, r0
    2202:	b1 1d       	adc	r27, r1
    2204:	63 9f       	mul	r22, r19
    2206:	aa 27       	eor	r26, r26
    2208:	f0 0d       	add	r31, r0
    220a:	b1 1d       	adc	r27, r1
    220c:	aa 1f       	adc	r26, r26
    220e:	64 9f       	mul	r22, r20
    2210:	66 27       	eor	r22, r22
    2212:	b0 0d       	add	r27, r0
    2214:	a1 1d       	adc	r26, r1
    2216:	66 1f       	adc	r22, r22
    2218:	82 9f       	mul	r24, r18
    221a:	22 27       	eor	r18, r18
    221c:	b0 0d       	add	r27, r0
    221e:	a1 1d       	adc	r26, r1
    2220:	62 1f       	adc	r22, r18
    2222:	73 9f       	mul	r23, r19
    2224:	b0 0d       	add	r27, r0
    2226:	a1 1d       	adc	r26, r1
    2228:	62 1f       	adc	r22, r18
    222a:	83 9f       	mul	r24, r19
    222c:	a0 0d       	add	r26, r0
    222e:	61 1d       	adc	r22, r1
    2230:	22 1f       	adc	r18, r18
    2232:	74 9f       	mul	r23, r20
    2234:	33 27       	eor	r19, r19
    2236:	a0 0d       	add	r26, r0
    2238:	61 1d       	adc	r22, r1
    223a:	23 1f       	adc	r18, r19
    223c:	84 9f       	mul	r24, r20
    223e:	60 0d       	add	r22, r0
    2240:	21 1d       	adc	r18, r1
    2242:	82 2f       	mov	r24, r18
    2244:	76 2f       	mov	r23, r22
    2246:	6a 2f       	mov	r22, r26
    2248:	11 24       	eor	r1, r1
    224a:	9f 57       	subi	r25, 0x7F	; 127
    224c:	50 40       	sbci	r21, 0x00	; 0
    224e:	8a f0       	brmi	.+34     	; 0x2272 <__mulsf3_pse+0x84>
    2250:	e1 f0       	breq	.+56     	; 0x228a <__mulsf3_pse+0x9c>
    2252:	88 23       	and	r24, r24
    2254:	4a f0       	brmi	.+18     	; 0x2268 <__mulsf3_pse+0x7a>
    2256:	ee 0f       	add	r30, r30
    2258:	ff 1f       	adc	r31, r31
    225a:	bb 1f       	adc	r27, r27
    225c:	66 1f       	adc	r22, r22
    225e:	77 1f       	adc	r23, r23
    2260:	88 1f       	adc	r24, r24
    2262:	91 50       	subi	r25, 0x01	; 1
    2264:	50 40       	sbci	r21, 0x00	; 0
    2266:	a9 f7       	brne	.-22     	; 0x2252 <__mulsf3_pse+0x64>
    2268:	9e 3f       	cpi	r25, 0xFE	; 254
    226a:	51 05       	cpc	r21, r1
    226c:	70 f0       	brcs	.+28     	; 0x228a <__mulsf3_pse+0x9c>
    226e:	14 c0       	rjmp	.+40     	; 0x2298 <__fp_inf>
    2270:	a6 cf       	rjmp	.-180    	; 0x21be <__fp_szero>
    2272:	5f 3f       	cpi	r21, 0xFF	; 255
    2274:	ec f3       	brlt	.-6      	; 0x2270 <__mulsf3_pse+0x82>
    2276:	98 3e       	cpi	r25, 0xE8	; 232
    2278:	dc f3       	brlt	.-10     	; 0x2270 <__mulsf3_pse+0x82>
    227a:	86 95       	lsr	r24
    227c:	77 95       	ror	r23
    227e:	67 95       	ror	r22
    2280:	b7 95       	ror	r27
    2282:	f7 95       	ror	r31
    2284:	e7 95       	ror	r30
    2286:	9f 5f       	subi	r25, 0xFF	; 255
    2288:	c1 f7       	brne	.-16     	; 0x227a <__mulsf3_pse+0x8c>
    228a:	fe 2b       	or	r31, r30
    228c:	88 0f       	add	r24, r24
    228e:	91 1d       	adc	r25, r1
    2290:	96 95       	lsr	r25
    2292:	87 95       	ror	r24
    2294:	97 f9       	bld	r25, 7
    2296:	08 95       	ret

00002298 <__fp_inf>:
    2298:	97 f9       	bld	r25, 7
    229a:	9f 67       	ori	r25, 0x7F	; 127
    229c:	80 e8       	ldi	r24, 0x80	; 128
    229e:	70 e0       	ldi	r23, 0x00	; 0
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	08 95       	ret

000022a4 <__fp_nan>:
    22a4:	9f ef       	ldi	r25, 0xFF	; 255
    22a6:	80 ec       	ldi	r24, 0xC0	; 192
    22a8:	08 95       	ret

000022aa <__fp_pscA>:
    22aa:	00 24       	eor	r0, r0
    22ac:	0a 94       	dec	r0
    22ae:	16 16       	cp	r1, r22
    22b0:	17 06       	cpc	r1, r23
    22b2:	18 06       	cpc	r1, r24
    22b4:	09 06       	cpc	r0, r25
    22b6:	08 95       	ret

000022b8 <__fp_pscB>:
    22b8:	00 24       	eor	r0, r0
    22ba:	0a 94       	dec	r0
    22bc:	12 16       	cp	r1, r18
    22be:	13 06       	cpc	r1, r19
    22c0:	14 06       	cpc	r1, r20
    22c2:	05 06       	cpc	r0, r21
    22c4:	08 95       	ret

000022c6 <__fp_round>:
    22c6:	09 2e       	mov	r0, r25
    22c8:	03 94       	inc	r0
    22ca:	00 0c       	add	r0, r0
    22cc:	11 f4       	brne	.+4      	; 0x22d2 <__fp_round+0xc>
    22ce:	88 23       	and	r24, r24
    22d0:	52 f0       	brmi	.+20     	; 0x22e6 <__fp_round+0x20>
    22d2:	bb 0f       	add	r27, r27
    22d4:	40 f4       	brcc	.+16     	; 0x22e6 <__fp_round+0x20>
    22d6:	bf 2b       	or	r27, r31
    22d8:	11 f4       	brne	.+4      	; 0x22de <__fp_round+0x18>
    22da:	60 ff       	sbrs	r22, 0
    22dc:	04 c0       	rjmp	.+8      	; 0x22e6 <__fp_round+0x20>
    22de:	6f 5f       	subi	r22, 0xFF	; 255
    22e0:	7f 4f       	sbci	r23, 0xFF	; 255
    22e2:	8f 4f       	sbci	r24, 0xFF	; 255
    22e4:	9f 4f       	sbci	r25, 0xFF	; 255
    22e6:	08 95       	ret

000022e8 <__divmodhi4>:
    22e8:	97 fb       	bst	r25, 7
    22ea:	07 2e       	mov	r0, r23
    22ec:	16 f4       	brtc	.+4      	; 0x22f2 <__divmodhi4+0xa>
    22ee:	00 94       	com	r0
    22f0:	06 d0       	rcall	.+12     	; 0x22fe <__divmodhi4_neg1>
    22f2:	77 fd       	sbrc	r23, 7
    22f4:	08 d0       	rcall	.+16     	; 0x2306 <__divmodhi4_neg2>
    22f6:	0b d0       	rcall	.+22     	; 0x230e <__udivmodhi4>
    22f8:	07 fc       	sbrc	r0, 7
    22fa:	05 d0       	rcall	.+10     	; 0x2306 <__divmodhi4_neg2>
    22fc:	3e f4       	brtc	.+14     	; 0x230c <__divmodhi4_exit>

000022fe <__divmodhi4_neg1>:
    22fe:	90 95       	com	r25
    2300:	81 95       	neg	r24
    2302:	9f 4f       	sbci	r25, 0xFF	; 255
    2304:	08 95       	ret

00002306 <__divmodhi4_neg2>:
    2306:	70 95       	com	r23
    2308:	61 95       	neg	r22
    230a:	7f 4f       	sbci	r23, 0xFF	; 255

0000230c <__divmodhi4_exit>:
    230c:	08 95       	ret

0000230e <__udivmodhi4>:
    230e:	aa 1b       	sub	r26, r26
    2310:	bb 1b       	sub	r27, r27
    2312:	51 e1       	ldi	r21, 0x11	; 17
    2314:	07 c0       	rjmp	.+14     	; 0x2324 <__udivmodhi4_ep>

00002316 <__udivmodhi4_loop>:
    2316:	aa 1f       	adc	r26, r26
    2318:	bb 1f       	adc	r27, r27
    231a:	a6 17       	cp	r26, r22
    231c:	b7 07       	cpc	r27, r23
    231e:	10 f0       	brcs	.+4      	; 0x2324 <__udivmodhi4_ep>
    2320:	a6 1b       	sub	r26, r22
    2322:	b7 0b       	sbc	r27, r23

00002324 <__udivmodhi4_ep>:
    2324:	88 1f       	adc	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	5a 95       	dec	r21
    232a:	a9 f7       	brne	.-22     	; 0x2316 <__udivmodhi4_loop>
    232c:	80 95       	com	r24
    232e:	90 95       	com	r25
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	08 95       	ret

00002336 <do_rand>:
    2336:	8f 92       	push	r8
    2338:	9f 92       	push	r9
    233a:	af 92       	push	r10
    233c:	bf 92       	push	r11
    233e:	cf 92       	push	r12
    2340:	df 92       	push	r13
    2342:	ef 92       	push	r14
    2344:	ff 92       	push	r15
    2346:	cf 93       	push	r28
    2348:	df 93       	push	r29
    234a:	ec 01       	movw	r28, r24
    234c:	68 81       	ld	r22, Y
    234e:	79 81       	ldd	r23, Y+1	; 0x01
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	9b 81       	ldd	r25, Y+3	; 0x03
    2354:	61 15       	cp	r22, r1
    2356:	71 05       	cpc	r23, r1
    2358:	81 05       	cpc	r24, r1
    235a:	91 05       	cpc	r25, r1
    235c:	21 f4       	brne	.+8      	; 0x2366 <do_rand+0x30>
    235e:	64 e2       	ldi	r22, 0x24	; 36
    2360:	79 ed       	ldi	r23, 0xD9	; 217
    2362:	8b e5       	ldi	r24, 0x5B	; 91
    2364:	97 e0       	ldi	r25, 0x07	; 7
    2366:	2d e1       	ldi	r18, 0x1D	; 29
    2368:	33 ef       	ldi	r19, 0xF3	; 243
    236a:	41 e0       	ldi	r20, 0x01	; 1
    236c:	50 e0       	ldi	r21, 0x00	; 0
    236e:	0d d3       	rcall	.+1562   	; 0x298a <__divmodsi4>
    2370:	49 01       	movw	r8, r18
    2372:	5a 01       	movw	r10, r20
    2374:	9b 01       	movw	r18, r22
    2376:	ac 01       	movw	r20, r24
    2378:	a7 ea       	ldi	r26, 0xA7	; 167
    237a:	b1 e4       	ldi	r27, 0x41	; 65
    237c:	22 d3       	rcall	.+1604   	; 0x29c2 <__muluhisi3>
    237e:	6b 01       	movw	r12, r22
    2380:	7c 01       	movw	r14, r24
    2382:	ac ee       	ldi	r26, 0xEC	; 236
    2384:	b4 ef       	ldi	r27, 0xF4	; 244
    2386:	a5 01       	movw	r20, r10
    2388:	94 01       	movw	r18, r8
    238a:	27 d3       	rcall	.+1614   	; 0x29da <__mulohisi3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	8c 0d       	add	r24, r12
    2392:	9d 1d       	adc	r25, r13
    2394:	ae 1d       	adc	r26, r14
    2396:	bf 1d       	adc	r27, r15
    2398:	b7 ff       	sbrs	r27, 7
    239a:	03 c0       	rjmp	.+6      	; 0x23a2 <do_rand+0x6c>
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	a1 09       	sbc	r26, r1
    23a0:	b0 48       	sbci	r27, 0x80	; 128
    23a2:	88 83       	st	Y, r24
    23a4:	99 83       	std	Y+1, r25	; 0x01
    23a6:	aa 83       	std	Y+2, r26	; 0x02
    23a8:	bb 83       	std	Y+3, r27	; 0x03
    23aa:	9f 77       	andi	r25, 0x7F	; 127
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	ff 90       	pop	r15
    23b2:	ef 90       	pop	r14
    23b4:	df 90       	pop	r13
    23b6:	cf 90       	pop	r12
    23b8:	bf 90       	pop	r11
    23ba:	af 90       	pop	r10
    23bc:	9f 90       	pop	r9
    23be:	8f 90       	pop	r8
    23c0:	08 95       	ret

000023c2 <rand_r>:
    23c2:	b9 cf       	rjmp	.-142    	; 0x2336 <do_rand>

000023c4 <rand>:
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	91 e0       	ldi	r25, 0x01	; 1
    23c8:	b6 cf       	rjmp	.-148    	; 0x2336 <do_rand>

000023ca <srand>:
    23ca:	a0 e0       	ldi	r26, 0x00	; 0
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    23d2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    23d6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    23da:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    23de:	08 95       	ret

000023e0 <vsprintf>:
    23e0:	0f 93       	push	r16
    23e2:	1f 93       	push	r17
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	2e 97       	sbiw	r28, 0x0e	; 14
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	8c 01       	movw	r16, r24
    23fa:	86 e0       	ldi	r24, 0x06	; 6
    23fc:	8c 83       	std	Y+4, r24	; 0x04
    23fe:	1a 83       	std	Y+2, r17	; 0x02
    2400:	09 83       	std	Y+1, r16	; 0x01
    2402:	8f ef       	ldi	r24, 0xFF	; 255
    2404:	9f e7       	ldi	r25, 0x7F	; 127
    2406:	9e 83       	std	Y+6, r25	; 0x06
    2408:	8d 83       	std	Y+5, r24	; 0x05
    240a:	ce 01       	movw	r24, r28
    240c:	01 96       	adiw	r24, 0x01	; 1
    240e:	10 d0       	rcall	.+32     	; 0x2430 <vfprintf>
    2410:	ef 81       	ldd	r30, Y+7	; 0x07
    2412:	f8 85       	ldd	r31, Y+8	; 0x08
    2414:	e0 0f       	add	r30, r16
    2416:	f1 1f       	adc	r31, r17
    2418:	10 82       	st	Z, r1
    241a:	2e 96       	adiw	r28, 0x0e	; 14
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	1f 91       	pop	r17
    242c:	0f 91       	pop	r16
    242e:	08 95       	ret

00002430 <vfprintf>:
    2430:	2f 92       	push	r2
    2432:	3f 92       	push	r3
    2434:	4f 92       	push	r4
    2436:	5f 92       	push	r5
    2438:	6f 92       	push	r6
    243a:	7f 92       	push	r7
    243c:	8f 92       	push	r8
    243e:	9f 92       	push	r9
    2440:	af 92       	push	r10
    2442:	bf 92       	push	r11
    2444:	cf 92       	push	r12
    2446:	df 92       	push	r13
    2448:	ef 92       	push	r14
    244a:	ff 92       	push	r15
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	2b 97       	sbiw	r28, 0x0b	; 11
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	6c 01       	movw	r12, r24
    2466:	7b 01       	movw	r14, r22
    2468:	8a 01       	movw	r16, r20
    246a:	fc 01       	movw	r30, r24
    246c:	17 82       	std	Z+7, r1	; 0x07
    246e:	16 82       	std	Z+6, r1	; 0x06
    2470:	83 81       	ldd	r24, Z+3	; 0x03
    2472:	81 ff       	sbrs	r24, 1
    2474:	bf c1       	rjmp	.+894    	; 0x27f4 <vfprintf+0x3c4>
    2476:	ce 01       	movw	r24, r28
    2478:	01 96       	adiw	r24, 0x01	; 1
    247a:	3c 01       	movw	r6, r24
    247c:	f6 01       	movw	r30, r12
    247e:	93 81       	ldd	r25, Z+3	; 0x03
    2480:	f7 01       	movw	r30, r14
    2482:	93 fd       	sbrc	r25, 3
    2484:	85 91       	lpm	r24, Z+
    2486:	93 ff       	sbrs	r25, 3
    2488:	81 91       	ld	r24, Z+
    248a:	7f 01       	movw	r14, r30
    248c:	88 23       	and	r24, r24
    248e:	09 f4       	brne	.+2      	; 0x2492 <vfprintf+0x62>
    2490:	ad c1       	rjmp	.+858    	; 0x27ec <vfprintf+0x3bc>
    2492:	85 32       	cpi	r24, 0x25	; 37
    2494:	39 f4       	brne	.+14     	; 0x24a4 <vfprintf+0x74>
    2496:	93 fd       	sbrc	r25, 3
    2498:	85 91       	lpm	r24, Z+
    249a:	93 ff       	sbrs	r25, 3
    249c:	81 91       	ld	r24, Z+
    249e:	7f 01       	movw	r14, r30
    24a0:	85 32       	cpi	r24, 0x25	; 37
    24a2:	21 f4       	brne	.+8      	; 0x24ac <vfprintf+0x7c>
    24a4:	b6 01       	movw	r22, r12
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	d6 d1       	rcall	.+940    	; 0x2856 <fputc>
    24aa:	e8 cf       	rjmp	.-48     	; 0x247c <vfprintf+0x4c>
    24ac:	91 2c       	mov	r9, r1
    24ae:	21 2c       	mov	r2, r1
    24b0:	31 2c       	mov	r3, r1
    24b2:	ff e1       	ldi	r31, 0x1F	; 31
    24b4:	f3 15       	cp	r31, r3
    24b6:	d8 f0       	brcs	.+54     	; 0x24ee <vfprintf+0xbe>
    24b8:	8b 32       	cpi	r24, 0x2B	; 43
    24ba:	79 f0       	breq	.+30     	; 0x24da <vfprintf+0xaa>
    24bc:	38 f4       	brcc	.+14     	; 0x24cc <vfprintf+0x9c>
    24be:	80 32       	cpi	r24, 0x20	; 32
    24c0:	79 f0       	breq	.+30     	; 0x24e0 <vfprintf+0xb0>
    24c2:	83 32       	cpi	r24, 0x23	; 35
    24c4:	a1 f4       	brne	.+40     	; 0x24ee <vfprintf+0xbe>
    24c6:	23 2d       	mov	r18, r3
    24c8:	20 61       	ori	r18, 0x10	; 16
    24ca:	1d c0       	rjmp	.+58     	; 0x2506 <vfprintf+0xd6>
    24cc:	8d 32       	cpi	r24, 0x2D	; 45
    24ce:	61 f0       	breq	.+24     	; 0x24e8 <vfprintf+0xb8>
    24d0:	80 33       	cpi	r24, 0x30	; 48
    24d2:	69 f4       	brne	.+26     	; 0x24ee <vfprintf+0xbe>
    24d4:	23 2d       	mov	r18, r3
    24d6:	21 60       	ori	r18, 0x01	; 1
    24d8:	16 c0       	rjmp	.+44     	; 0x2506 <vfprintf+0xd6>
    24da:	83 2d       	mov	r24, r3
    24dc:	82 60       	ori	r24, 0x02	; 2
    24de:	38 2e       	mov	r3, r24
    24e0:	e3 2d       	mov	r30, r3
    24e2:	e4 60       	ori	r30, 0x04	; 4
    24e4:	3e 2e       	mov	r3, r30
    24e6:	2a c0       	rjmp	.+84     	; 0x253c <vfprintf+0x10c>
    24e8:	f3 2d       	mov	r31, r3
    24ea:	f8 60       	ori	r31, 0x08	; 8
    24ec:	1d c0       	rjmp	.+58     	; 0x2528 <vfprintf+0xf8>
    24ee:	37 fc       	sbrc	r3, 7
    24f0:	2d c0       	rjmp	.+90     	; 0x254c <vfprintf+0x11c>
    24f2:	20 ed       	ldi	r18, 0xD0	; 208
    24f4:	28 0f       	add	r18, r24
    24f6:	2a 30       	cpi	r18, 0x0A	; 10
    24f8:	40 f0       	brcs	.+16     	; 0x250a <vfprintf+0xda>
    24fa:	8e 32       	cpi	r24, 0x2E	; 46
    24fc:	b9 f4       	brne	.+46     	; 0x252c <vfprintf+0xfc>
    24fe:	36 fc       	sbrc	r3, 6
    2500:	75 c1       	rjmp	.+746    	; 0x27ec <vfprintf+0x3bc>
    2502:	23 2d       	mov	r18, r3
    2504:	20 64       	ori	r18, 0x40	; 64
    2506:	32 2e       	mov	r3, r18
    2508:	19 c0       	rjmp	.+50     	; 0x253c <vfprintf+0x10c>
    250a:	36 fe       	sbrs	r3, 6
    250c:	06 c0       	rjmp	.+12     	; 0x251a <vfprintf+0xea>
    250e:	8a e0       	ldi	r24, 0x0A	; 10
    2510:	98 9e       	mul	r9, r24
    2512:	20 0d       	add	r18, r0
    2514:	11 24       	eor	r1, r1
    2516:	92 2e       	mov	r9, r18
    2518:	11 c0       	rjmp	.+34     	; 0x253c <vfprintf+0x10c>
    251a:	ea e0       	ldi	r30, 0x0A	; 10
    251c:	2e 9e       	mul	r2, r30
    251e:	20 0d       	add	r18, r0
    2520:	11 24       	eor	r1, r1
    2522:	22 2e       	mov	r2, r18
    2524:	f3 2d       	mov	r31, r3
    2526:	f0 62       	ori	r31, 0x20	; 32
    2528:	3f 2e       	mov	r3, r31
    252a:	08 c0       	rjmp	.+16     	; 0x253c <vfprintf+0x10c>
    252c:	8c 36       	cpi	r24, 0x6C	; 108
    252e:	21 f4       	brne	.+8      	; 0x2538 <vfprintf+0x108>
    2530:	83 2d       	mov	r24, r3
    2532:	80 68       	ori	r24, 0x80	; 128
    2534:	38 2e       	mov	r3, r24
    2536:	02 c0       	rjmp	.+4      	; 0x253c <vfprintf+0x10c>
    2538:	88 36       	cpi	r24, 0x68	; 104
    253a:	41 f4       	brne	.+16     	; 0x254c <vfprintf+0x11c>
    253c:	f7 01       	movw	r30, r14
    253e:	93 fd       	sbrc	r25, 3
    2540:	85 91       	lpm	r24, Z+
    2542:	93 ff       	sbrs	r25, 3
    2544:	81 91       	ld	r24, Z+
    2546:	7f 01       	movw	r14, r30
    2548:	81 11       	cpse	r24, r1
    254a:	b3 cf       	rjmp	.-154    	; 0x24b2 <vfprintf+0x82>
    254c:	98 2f       	mov	r25, r24
    254e:	9f 7d       	andi	r25, 0xDF	; 223
    2550:	95 54       	subi	r25, 0x45	; 69
    2552:	93 30       	cpi	r25, 0x03	; 3
    2554:	28 f4       	brcc	.+10     	; 0x2560 <vfprintf+0x130>
    2556:	0c 5f       	subi	r16, 0xFC	; 252
    2558:	1f 4f       	sbci	r17, 0xFF	; 255
    255a:	9f e3       	ldi	r25, 0x3F	; 63
    255c:	99 83       	std	Y+1, r25	; 0x01
    255e:	0d c0       	rjmp	.+26     	; 0x257a <vfprintf+0x14a>
    2560:	83 36       	cpi	r24, 0x63	; 99
    2562:	31 f0       	breq	.+12     	; 0x2570 <vfprintf+0x140>
    2564:	83 37       	cpi	r24, 0x73	; 115
    2566:	71 f0       	breq	.+28     	; 0x2584 <vfprintf+0x154>
    2568:	83 35       	cpi	r24, 0x53	; 83
    256a:	09 f0       	breq	.+2      	; 0x256e <vfprintf+0x13e>
    256c:	55 c0       	rjmp	.+170    	; 0x2618 <vfprintf+0x1e8>
    256e:	20 c0       	rjmp	.+64     	; 0x25b0 <vfprintf+0x180>
    2570:	f8 01       	movw	r30, r16
    2572:	80 81       	ld	r24, Z
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	0e 5f       	subi	r16, 0xFE	; 254
    2578:	1f 4f       	sbci	r17, 0xFF	; 255
    257a:	88 24       	eor	r8, r8
    257c:	83 94       	inc	r8
    257e:	91 2c       	mov	r9, r1
    2580:	53 01       	movw	r10, r6
    2582:	12 c0       	rjmp	.+36     	; 0x25a8 <vfprintf+0x178>
    2584:	28 01       	movw	r4, r16
    2586:	f2 e0       	ldi	r31, 0x02	; 2
    2588:	4f 0e       	add	r4, r31
    258a:	51 1c       	adc	r5, r1
    258c:	f8 01       	movw	r30, r16
    258e:	a0 80       	ld	r10, Z
    2590:	b1 80       	ldd	r11, Z+1	; 0x01
    2592:	36 fe       	sbrs	r3, 6
    2594:	03 c0       	rjmp	.+6      	; 0x259c <vfprintf+0x16c>
    2596:	69 2d       	mov	r22, r9
    2598:	70 e0       	ldi	r23, 0x00	; 0
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <vfprintf+0x170>
    259c:	6f ef       	ldi	r22, 0xFF	; 255
    259e:	7f ef       	ldi	r23, 0xFF	; 255
    25a0:	c5 01       	movw	r24, r10
    25a2:	4e d1       	rcall	.+668    	; 0x2840 <strnlen>
    25a4:	4c 01       	movw	r8, r24
    25a6:	82 01       	movw	r16, r4
    25a8:	f3 2d       	mov	r31, r3
    25aa:	ff 77       	andi	r31, 0x7F	; 127
    25ac:	3f 2e       	mov	r3, r31
    25ae:	15 c0       	rjmp	.+42     	; 0x25da <vfprintf+0x1aa>
    25b0:	28 01       	movw	r4, r16
    25b2:	22 e0       	ldi	r18, 0x02	; 2
    25b4:	42 0e       	add	r4, r18
    25b6:	51 1c       	adc	r5, r1
    25b8:	f8 01       	movw	r30, r16
    25ba:	a0 80       	ld	r10, Z
    25bc:	b1 80       	ldd	r11, Z+1	; 0x01
    25be:	36 fe       	sbrs	r3, 6
    25c0:	03 c0       	rjmp	.+6      	; 0x25c8 <vfprintf+0x198>
    25c2:	69 2d       	mov	r22, r9
    25c4:	70 e0       	ldi	r23, 0x00	; 0
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <vfprintf+0x19c>
    25c8:	6f ef       	ldi	r22, 0xFF	; 255
    25ca:	7f ef       	ldi	r23, 0xFF	; 255
    25cc:	c5 01       	movw	r24, r10
    25ce:	2d d1       	rcall	.+602    	; 0x282a <strnlen_P>
    25d0:	4c 01       	movw	r8, r24
    25d2:	f3 2d       	mov	r31, r3
    25d4:	f0 68       	ori	r31, 0x80	; 128
    25d6:	3f 2e       	mov	r3, r31
    25d8:	82 01       	movw	r16, r4
    25da:	33 fc       	sbrc	r3, 3
    25dc:	19 c0       	rjmp	.+50     	; 0x2610 <vfprintf+0x1e0>
    25de:	82 2d       	mov	r24, r2
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	88 16       	cp	r8, r24
    25e4:	99 06       	cpc	r9, r25
    25e6:	a0 f4       	brcc	.+40     	; 0x2610 <vfprintf+0x1e0>
    25e8:	b6 01       	movw	r22, r12
    25ea:	80 e2       	ldi	r24, 0x20	; 32
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	33 d1       	rcall	.+614    	; 0x2856 <fputc>
    25f0:	2a 94       	dec	r2
    25f2:	f5 cf       	rjmp	.-22     	; 0x25de <vfprintf+0x1ae>
    25f4:	f5 01       	movw	r30, r10
    25f6:	37 fc       	sbrc	r3, 7
    25f8:	85 91       	lpm	r24, Z+
    25fa:	37 fe       	sbrs	r3, 7
    25fc:	81 91       	ld	r24, Z+
    25fe:	5f 01       	movw	r10, r30
    2600:	b6 01       	movw	r22, r12
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	28 d1       	rcall	.+592    	; 0x2856 <fputc>
    2606:	21 10       	cpse	r2, r1
    2608:	2a 94       	dec	r2
    260a:	21 e0       	ldi	r18, 0x01	; 1
    260c:	82 1a       	sub	r8, r18
    260e:	91 08       	sbc	r9, r1
    2610:	81 14       	cp	r8, r1
    2612:	91 04       	cpc	r9, r1
    2614:	79 f7       	brne	.-34     	; 0x25f4 <vfprintf+0x1c4>
    2616:	e1 c0       	rjmp	.+450    	; 0x27da <vfprintf+0x3aa>
    2618:	84 36       	cpi	r24, 0x64	; 100
    261a:	11 f0       	breq	.+4      	; 0x2620 <vfprintf+0x1f0>
    261c:	89 36       	cpi	r24, 0x69	; 105
    261e:	39 f5       	brne	.+78     	; 0x266e <vfprintf+0x23e>
    2620:	f8 01       	movw	r30, r16
    2622:	37 fe       	sbrs	r3, 7
    2624:	07 c0       	rjmp	.+14     	; 0x2634 <vfprintf+0x204>
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	0c 5f       	subi	r16, 0xFC	; 252
    2630:	1f 4f       	sbci	r17, 0xFF	; 255
    2632:	08 c0       	rjmp	.+16     	; 0x2644 <vfprintf+0x214>
    2634:	60 81       	ld	r22, Z
    2636:	71 81       	ldd	r23, Z+1	; 0x01
    2638:	07 2e       	mov	r0, r23
    263a:	00 0c       	add	r0, r0
    263c:	88 0b       	sbc	r24, r24
    263e:	99 0b       	sbc	r25, r25
    2640:	0e 5f       	subi	r16, 0xFE	; 254
    2642:	1f 4f       	sbci	r17, 0xFF	; 255
    2644:	f3 2d       	mov	r31, r3
    2646:	ff 76       	andi	r31, 0x6F	; 111
    2648:	3f 2e       	mov	r3, r31
    264a:	97 ff       	sbrs	r25, 7
    264c:	09 c0       	rjmp	.+18     	; 0x2660 <vfprintf+0x230>
    264e:	90 95       	com	r25
    2650:	80 95       	com	r24
    2652:	70 95       	com	r23
    2654:	61 95       	neg	r22
    2656:	7f 4f       	sbci	r23, 0xFF	; 255
    2658:	8f 4f       	sbci	r24, 0xFF	; 255
    265a:	9f 4f       	sbci	r25, 0xFF	; 255
    265c:	f0 68       	ori	r31, 0x80	; 128
    265e:	3f 2e       	mov	r3, r31
    2660:	2a e0       	ldi	r18, 0x0A	; 10
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	a3 01       	movw	r20, r6
    2666:	33 d1       	rcall	.+614    	; 0x28ce <__ultoa_invert>
    2668:	88 2e       	mov	r8, r24
    266a:	86 18       	sub	r8, r6
    266c:	44 c0       	rjmp	.+136    	; 0x26f6 <vfprintf+0x2c6>
    266e:	85 37       	cpi	r24, 0x75	; 117
    2670:	31 f4       	brne	.+12     	; 0x267e <vfprintf+0x24e>
    2672:	23 2d       	mov	r18, r3
    2674:	2f 7e       	andi	r18, 0xEF	; 239
    2676:	b2 2e       	mov	r11, r18
    2678:	2a e0       	ldi	r18, 0x0A	; 10
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	25 c0       	rjmp	.+74     	; 0x26c8 <vfprintf+0x298>
    267e:	93 2d       	mov	r25, r3
    2680:	99 7f       	andi	r25, 0xF9	; 249
    2682:	b9 2e       	mov	r11, r25
    2684:	8f 36       	cpi	r24, 0x6F	; 111
    2686:	c1 f0       	breq	.+48     	; 0x26b8 <vfprintf+0x288>
    2688:	18 f4       	brcc	.+6      	; 0x2690 <vfprintf+0x260>
    268a:	88 35       	cpi	r24, 0x58	; 88
    268c:	79 f0       	breq	.+30     	; 0x26ac <vfprintf+0x27c>
    268e:	ae c0       	rjmp	.+348    	; 0x27ec <vfprintf+0x3bc>
    2690:	80 37       	cpi	r24, 0x70	; 112
    2692:	19 f0       	breq	.+6      	; 0x269a <vfprintf+0x26a>
    2694:	88 37       	cpi	r24, 0x78	; 120
    2696:	21 f0       	breq	.+8      	; 0x26a0 <vfprintf+0x270>
    2698:	a9 c0       	rjmp	.+338    	; 0x27ec <vfprintf+0x3bc>
    269a:	e9 2f       	mov	r30, r25
    269c:	e0 61       	ori	r30, 0x10	; 16
    269e:	be 2e       	mov	r11, r30
    26a0:	b4 fe       	sbrs	r11, 4
    26a2:	0d c0       	rjmp	.+26     	; 0x26be <vfprintf+0x28e>
    26a4:	fb 2d       	mov	r31, r11
    26a6:	f4 60       	ori	r31, 0x04	; 4
    26a8:	bf 2e       	mov	r11, r31
    26aa:	09 c0       	rjmp	.+18     	; 0x26be <vfprintf+0x28e>
    26ac:	34 fe       	sbrs	r3, 4
    26ae:	0a c0       	rjmp	.+20     	; 0x26c4 <vfprintf+0x294>
    26b0:	29 2f       	mov	r18, r25
    26b2:	26 60       	ori	r18, 0x06	; 6
    26b4:	b2 2e       	mov	r11, r18
    26b6:	06 c0       	rjmp	.+12     	; 0x26c4 <vfprintf+0x294>
    26b8:	28 e0       	ldi	r18, 0x08	; 8
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	05 c0       	rjmp	.+10     	; 0x26c8 <vfprintf+0x298>
    26be:	20 e1       	ldi	r18, 0x10	; 16
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	02 c0       	rjmp	.+4      	; 0x26c8 <vfprintf+0x298>
    26c4:	20 e1       	ldi	r18, 0x10	; 16
    26c6:	32 e0       	ldi	r19, 0x02	; 2
    26c8:	f8 01       	movw	r30, r16
    26ca:	b7 fe       	sbrs	r11, 7
    26cc:	07 c0       	rjmp	.+14     	; 0x26dc <vfprintf+0x2ac>
    26ce:	60 81       	ld	r22, Z
    26d0:	71 81       	ldd	r23, Z+1	; 0x01
    26d2:	82 81       	ldd	r24, Z+2	; 0x02
    26d4:	93 81       	ldd	r25, Z+3	; 0x03
    26d6:	0c 5f       	subi	r16, 0xFC	; 252
    26d8:	1f 4f       	sbci	r17, 0xFF	; 255
    26da:	06 c0       	rjmp	.+12     	; 0x26e8 <vfprintf+0x2b8>
    26dc:	60 81       	ld	r22, Z
    26de:	71 81       	ldd	r23, Z+1	; 0x01
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	0e 5f       	subi	r16, 0xFE	; 254
    26e6:	1f 4f       	sbci	r17, 0xFF	; 255
    26e8:	a3 01       	movw	r20, r6
    26ea:	f1 d0       	rcall	.+482    	; 0x28ce <__ultoa_invert>
    26ec:	88 2e       	mov	r8, r24
    26ee:	86 18       	sub	r8, r6
    26f0:	fb 2d       	mov	r31, r11
    26f2:	ff 77       	andi	r31, 0x7F	; 127
    26f4:	3f 2e       	mov	r3, r31
    26f6:	36 fe       	sbrs	r3, 6
    26f8:	0d c0       	rjmp	.+26     	; 0x2714 <vfprintf+0x2e4>
    26fa:	23 2d       	mov	r18, r3
    26fc:	2e 7f       	andi	r18, 0xFE	; 254
    26fe:	a2 2e       	mov	r10, r18
    2700:	89 14       	cp	r8, r9
    2702:	58 f4       	brcc	.+22     	; 0x271a <vfprintf+0x2ea>
    2704:	34 fe       	sbrs	r3, 4
    2706:	0b c0       	rjmp	.+22     	; 0x271e <vfprintf+0x2ee>
    2708:	32 fc       	sbrc	r3, 2
    270a:	09 c0       	rjmp	.+18     	; 0x271e <vfprintf+0x2ee>
    270c:	83 2d       	mov	r24, r3
    270e:	8e 7e       	andi	r24, 0xEE	; 238
    2710:	a8 2e       	mov	r10, r24
    2712:	05 c0       	rjmp	.+10     	; 0x271e <vfprintf+0x2ee>
    2714:	b8 2c       	mov	r11, r8
    2716:	a3 2c       	mov	r10, r3
    2718:	03 c0       	rjmp	.+6      	; 0x2720 <vfprintf+0x2f0>
    271a:	b8 2c       	mov	r11, r8
    271c:	01 c0       	rjmp	.+2      	; 0x2720 <vfprintf+0x2f0>
    271e:	b9 2c       	mov	r11, r9
    2720:	a4 fe       	sbrs	r10, 4
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <vfprintf+0x312>
    2724:	fe 01       	movw	r30, r28
    2726:	e8 0d       	add	r30, r8
    2728:	f1 1d       	adc	r31, r1
    272a:	80 81       	ld	r24, Z
    272c:	80 33       	cpi	r24, 0x30	; 48
    272e:	21 f4       	brne	.+8      	; 0x2738 <vfprintf+0x308>
    2730:	9a 2d       	mov	r25, r10
    2732:	99 7e       	andi	r25, 0xE9	; 233
    2734:	a9 2e       	mov	r10, r25
    2736:	09 c0       	rjmp	.+18     	; 0x274a <vfprintf+0x31a>
    2738:	a2 fe       	sbrs	r10, 2
    273a:	06 c0       	rjmp	.+12     	; 0x2748 <vfprintf+0x318>
    273c:	b3 94       	inc	r11
    273e:	b3 94       	inc	r11
    2740:	04 c0       	rjmp	.+8      	; 0x274a <vfprintf+0x31a>
    2742:	8a 2d       	mov	r24, r10
    2744:	86 78       	andi	r24, 0x86	; 134
    2746:	09 f0       	breq	.+2      	; 0x274a <vfprintf+0x31a>
    2748:	b3 94       	inc	r11
    274a:	a3 fc       	sbrc	r10, 3
    274c:	10 c0       	rjmp	.+32     	; 0x276e <vfprintf+0x33e>
    274e:	a0 fe       	sbrs	r10, 0
    2750:	06 c0       	rjmp	.+12     	; 0x275e <vfprintf+0x32e>
    2752:	b2 14       	cp	r11, r2
    2754:	80 f4       	brcc	.+32     	; 0x2776 <vfprintf+0x346>
    2756:	28 0c       	add	r2, r8
    2758:	92 2c       	mov	r9, r2
    275a:	9b 18       	sub	r9, r11
    275c:	0d c0       	rjmp	.+26     	; 0x2778 <vfprintf+0x348>
    275e:	b2 14       	cp	r11, r2
    2760:	58 f4       	brcc	.+22     	; 0x2778 <vfprintf+0x348>
    2762:	b6 01       	movw	r22, r12
    2764:	80 e2       	ldi	r24, 0x20	; 32
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	76 d0       	rcall	.+236    	; 0x2856 <fputc>
    276a:	b3 94       	inc	r11
    276c:	f8 cf       	rjmp	.-16     	; 0x275e <vfprintf+0x32e>
    276e:	b2 14       	cp	r11, r2
    2770:	18 f4       	brcc	.+6      	; 0x2778 <vfprintf+0x348>
    2772:	2b 18       	sub	r2, r11
    2774:	02 c0       	rjmp	.+4      	; 0x277a <vfprintf+0x34a>
    2776:	98 2c       	mov	r9, r8
    2778:	21 2c       	mov	r2, r1
    277a:	a4 fe       	sbrs	r10, 4
    277c:	0f c0       	rjmp	.+30     	; 0x279c <vfprintf+0x36c>
    277e:	b6 01       	movw	r22, r12
    2780:	80 e3       	ldi	r24, 0x30	; 48
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	68 d0       	rcall	.+208    	; 0x2856 <fputc>
    2786:	a2 fe       	sbrs	r10, 2
    2788:	16 c0       	rjmp	.+44     	; 0x27b6 <vfprintf+0x386>
    278a:	a1 fc       	sbrc	r10, 1
    278c:	03 c0       	rjmp	.+6      	; 0x2794 <vfprintf+0x364>
    278e:	88 e7       	ldi	r24, 0x78	; 120
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <vfprintf+0x368>
    2794:	88 e5       	ldi	r24, 0x58	; 88
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	b6 01       	movw	r22, r12
    279a:	0c c0       	rjmp	.+24     	; 0x27b4 <vfprintf+0x384>
    279c:	8a 2d       	mov	r24, r10
    279e:	86 78       	andi	r24, 0x86	; 134
    27a0:	51 f0       	breq	.+20     	; 0x27b6 <vfprintf+0x386>
    27a2:	a1 fe       	sbrs	r10, 1
    27a4:	02 c0       	rjmp	.+4      	; 0x27aa <vfprintf+0x37a>
    27a6:	8b e2       	ldi	r24, 0x2B	; 43
    27a8:	01 c0       	rjmp	.+2      	; 0x27ac <vfprintf+0x37c>
    27aa:	80 e2       	ldi	r24, 0x20	; 32
    27ac:	a7 fc       	sbrc	r10, 7
    27ae:	8d e2       	ldi	r24, 0x2D	; 45
    27b0:	b6 01       	movw	r22, r12
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	50 d0       	rcall	.+160    	; 0x2856 <fputc>
    27b6:	89 14       	cp	r8, r9
    27b8:	30 f4       	brcc	.+12     	; 0x27c6 <vfprintf+0x396>
    27ba:	b6 01       	movw	r22, r12
    27bc:	80 e3       	ldi	r24, 0x30	; 48
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	4a d0       	rcall	.+148    	; 0x2856 <fputc>
    27c2:	9a 94       	dec	r9
    27c4:	f8 cf       	rjmp	.-16     	; 0x27b6 <vfprintf+0x386>
    27c6:	8a 94       	dec	r8
    27c8:	f3 01       	movw	r30, r6
    27ca:	e8 0d       	add	r30, r8
    27cc:	f1 1d       	adc	r31, r1
    27ce:	80 81       	ld	r24, Z
    27d0:	b6 01       	movw	r22, r12
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	40 d0       	rcall	.+128    	; 0x2856 <fputc>
    27d6:	81 10       	cpse	r8, r1
    27d8:	f6 cf       	rjmp	.-20     	; 0x27c6 <vfprintf+0x396>
    27da:	22 20       	and	r2, r2
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <vfprintf+0x3b0>
    27de:	4e ce       	rjmp	.-868    	; 0x247c <vfprintf+0x4c>
    27e0:	b6 01       	movw	r22, r12
    27e2:	80 e2       	ldi	r24, 0x20	; 32
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	37 d0       	rcall	.+110    	; 0x2856 <fputc>
    27e8:	2a 94       	dec	r2
    27ea:	f7 cf       	rjmp	.-18     	; 0x27da <vfprintf+0x3aa>
    27ec:	f6 01       	movw	r30, r12
    27ee:	86 81       	ldd	r24, Z+6	; 0x06
    27f0:	97 81       	ldd	r25, Z+7	; 0x07
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <vfprintf+0x3c8>
    27f4:	8f ef       	ldi	r24, 0xFF	; 255
    27f6:	9f ef       	ldi	r25, 0xFF	; 255
    27f8:	2b 96       	adiw	r28, 0x0b	; 11
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	cd bf       	out	0x3d, r28	; 61
    2804:	df 91       	pop	r29
    2806:	cf 91       	pop	r28
    2808:	1f 91       	pop	r17
    280a:	0f 91       	pop	r16
    280c:	ff 90       	pop	r15
    280e:	ef 90       	pop	r14
    2810:	df 90       	pop	r13
    2812:	cf 90       	pop	r12
    2814:	bf 90       	pop	r11
    2816:	af 90       	pop	r10
    2818:	9f 90       	pop	r9
    281a:	8f 90       	pop	r8
    281c:	7f 90       	pop	r7
    281e:	6f 90       	pop	r6
    2820:	5f 90       	pop	r5
    2822:	4f 90       	pop	r4
    2824:	3f 90       	pop	r3
    2826:	2f 90       	pop	r2
    2828:	08 95       	ret

0000282a <strnlen_P>:
    282a:	fc 01       	movw	r30, r24
    282c:	05 90       	lpm	r0, Z+
    282e:	61 50       	subi	r22, 0x01	; 1
    2830:	70 40       	sbci	r23, 0x00	; 0
    2832:	01 10       	cpse	r0, r1
    2834:	d8 f7       	brcc	.-10     	; 0x282c <strnlen_P+0x2>
    2836:	80 95       	com	r24
    2838:	90 95       	com	r25
    283a:	8e 0f       	add	r24, r30
    283c:	9f 1f       	adc	r25, r31
    283e:	08 95       	ret

00002840 <strnlen>:
    2840:	fc 01       	movw	r30, r24
    2842:	61 50       	subi	r22, 0x01	; 1
    2844:	70 40       	sbci	r23, 0x00	; 0
    2846:	01 90       	ld	r0, Z+
    2848:	01 10       	cpse	r0, r1
    284a:	d8 f7       	brcc	.-10     	; 0x2842 <strnlen+0x2>
    284c:	80 95       	com	r24
    284e:	90 95       	com	r25
    2850:	8e 0f       	add	r24, r30
    2852:	9f 1f       	adc	r25, r31
    2854:	08 95       	ret

00002856 <fputc>:
    2856:	0f 93       	push	r16
    2858:	1f 93       	push	r17
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	fb 01       	movw	r30, r22
    2860:	23 81       	ldd	r18, Z+3	; 0x03
    2862:	21 fd       	sbrc	r18, 1
    2864:	03 c0       	rjmp	.+6      	; 0x286c <fputc+0x16>
    2866:	8f ef       	ldi	r24, 0xFF	; 255
    2868:	9f ef       	ldi	r25, 0xFF	; 255
    286a:	2c c0       	rjmp	.+88     	; 0x28c4 <fputc+0x6e>
    286c:	22 ff       	sbrs	r18, 2
    286e:	16 c0       	rjmp	.+44     	; 0x289c <fputc+0x46>
    2870:	46 81       	ldd	r20, Z+6	; 0x06
    2872:	57 81       	ldd	r21, Z+7	; 0x07
    2874:	24 81       	ldd	r18, Z+4	; 0x04
    2876:	35 81       	ldd	r19, Z+5	; 0x05
    2878:	42 17       	cp	r20, r18
    287a:	53 07       	cpc	r21, r19
    287c:	44 f4       	brge	.+16     	; 0x288e <fputc+0x38>
    287e:	a0 81       	ld	r26, Z
    2880:	b1 81       	ldd	r27, Z+1	; 0x01
    2882:	9d 01       	movw	r18, r26
    2884:	2f 5f       	subi	r18, 0xFF	; 255
    2886:	3f 4f       	sbci	r19, 0xFF	; 255
    2888:	31 83       	std	Z+1, r19	; 0x01
    288a:	20 83       	st	Z, r18
    288c:	8c 93       	st	X, r24
    288e:	26 81       	ldd	r18, Z+6	; 0x06
    2890:	37 81       	ldd	r19, Z+7	; 0x07
    2892:	2f 5f       	subi	r18, 0xFF	; 255
    2894:	3f 4f       	sbci	r19, 0xFF	; 255
    2896:	37 83       	std	Z+7, r19	; 0x07
    2898:	26 83       	std	Z+6, r18	; 0x06
    289a:	14 c0       	rjmp	.+40     	; 0x28c4 <fputc+0x6e>
    289c:	8b 01       	movw	r16, r22
    289e:	ec 01       	movw	r28, r24
    28a0:	fb 01       	movw	r30, r22
    28a2:	00 84       	ldd	r0, Z+8	; 0x08
    28a4:	f1 85       	ldd	r31, Z+9	; 0x09
    28a6:	e0 2d       	mov	r30, r0
    28a8:	09 95       	icall
    28aa:	89 2b       	or	r24, r25
    28ac:	e1 f6       	brne	.-72     	; 0x2866 <fputc+0x10>
    28ae:	d8 01       	movw	r26, r16
    28b0:	16 96       	adiw	r26, 0x06	; 6
    28b2:	8d 91       	ld	r24, X+
    28b4:	9c 91       	ld	r25, X
    28b6:	17 97       	sbiw	r26, 0x07	; 7
    28b8:	01 96       	adiw	r24, 0x01	; 1
    28ba:	17 96       	adiw	r26, 0x07	; 7
    28bc:	9c 93       	st	X, r25
    28be:	8e 93       	st	-X, r24
    28c0:	16 97       	sbiw	r26, 0x06	; 6
    28c2:	ce 01       	movw	r24, r28
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	1f 91       	pop	r17
    28ca:	0f 91       	pop	r16
    28cc:	08 95       	ret

000028ce <__ultoa_invert>:
    28ce:	fa 01       	movw	r30, r20
    28d0:	aa 27       	eor	r26, r26
    28d2:	28 30       	cpi	r18, 0x08	; 8
    28d4:	51 f1       	breq	.+84     	; 0x292a <__ultoa_invert+0x5c>
    28d6:	20 31       	cpi	r18, 0x10	; 16
    28d8:	81 f1       	breq	.+96     	; 0x293a <__ultoa_invert+0x6c>
    28da:	e8 94       	clt
    28dc:	6f 93       	push	r22
    28de:	6e 7f       	andi	r22, 0xFE	; 254
    28e0:	6e 5f       	subi	r22, 0xFE	; 254
    28e2:	7f 4f       	sbci	r23, 0xFF	; 255
    28e4:	8f 4f       	sbci	r24, 0xFF	; 255
    28e6:	9f 4f       	sbci	r25, 0xFF	; 255
    28e8:	af 4f       	sbci	r26, 0xFF	; 255
    28ea:	b1 e0       	ldi	r27, 0x01	; 1
    28ec:	3e d0       	rcall	.+124    	; 0x296a <__ultoa_invert+0x9c>
    28ee:	b4 e0       	ldi	r27, 0x04	; 4
    28f0:	3c d0       	rcall	.+120    	; 0x296a <__ultoa_invert+0x9c>
    28f2:	67 0f       	add	r22, r23
    28f4:	78 1f       	adc	r23, r24
    28f6:	89 1f       	adc	r24, r25
    28f8:	9a 1f       	adc	r25, r26
    28fa:	a1 1d       	adc	r26, r1
    28fc:	68 0f       	add	r22, r24
    28fe:	79 1f       	adc	r23, r25
    2900:	8a 1f       	adc	r24, r26
    2902:	91 1d       	adc	r25, r1
    2904:	a1 1d       	adc	r26, r1
    2906:	6a 0f       	add	r22, r26
    2908:	71 1d       	adc	r23, r1
    290a:	81 1d       	adc	r24, r1
    290c:	91 1d       	adc	r25, r1
    290e:	a1 1d       	adc	r26, r1
    2910:	20 d0       	rcall	.+64     	; 0x2952 <__ultoa_invert+0x84>
    2912:	09 f4       	brne	.+2      	; 0x2916 <__ultoa_invert+0x48>
    2914:	68 94       	set
    2916:	3f 91       	pop	r19
    2918:	2a e0       	ldi	r18, 0x0A	; 10
    291a:	26 9f       	mul	r18, r22
    291c:	11 24       	eor	r1, r1
    291e:	30 19       	sub	r19, r0
    2920:	30 5d       	subi	r19, 0xD0	; 208
    2922:	31 93       	st	Z+, r19
    2924:	de f6       	brtc	.-74     	; 0x28dc <__ultoa_invert+0xe>
    2926:	cf 01       	movw	r24, r30
    2928:	08 95       	ret
    292a:	46 2f       	mov	r20, r22
    292c:	47 70       	andi	r20, 0x07	; 7
    292e:	40 5d       	subi	r20, 0xD0	; 208
    2930:	41 93       	st	Z+, r20
    2932:	b3 e0       	ldi	r27, 0x03	; 3
    2934:	0f d0       	rcall	.+30     	; 0x2954 <__ultoa_invert+0x86>
    2936:	c9 f7       	brne	.-14     	; 0x292a <__ultoa_invert+0x5c>
    2938:	f6 cf       	rjmp	.-20     	; 0x2926 <__ultoa_invert+0x58>
    293a:	46 2f       	mov	r20, r22
    293c:	4f 70       	andi	r20, 0x0F	; 15
    293e:	40 5d       	subi	r20, 0xD0	; 208
    2940:	4a 33       	cpi	r20, 0x3A	; 58
    2942:	18 f0       	brcs	.+6      	; 0x294a <__ultoa_invert+0x7c>
    2944:	49 5d       	subi	r20, 0xD9	; 217
    2946:	31 fd       	sbrc	r19, 1
    2948:	40 52       	subi	r20, 0x20	; 32
    294a:	41 93       	st	Z+, r20
    294c:	02 d0       	rcall	.+4      	; 0x2952 <__ultoa_invert+0x84>
    294e:	a9 f7       	brne	.-22     	; 0x293a <__ultoa_invert+0x6c>
    2950:	ea cf       	rjmp	.-44     	; 0x2926 <__ultoa_invert+0x58>
    2952:	b4 e0       	ldi	r27, 0x04	; 4
    2954:	a6 95       	lsr	r26
    2956:	97 95       	ror	r25
    2958:	87 95       	ror	r24
    295a:	77 95       	ror	r23
    295c:	67 95       	ror	r22
    295e:	ba 95       	dec	r27
    2960:	c9 f7       	brne	.-14     	; 0x2954 <__ultoa_invert+0x86>
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	61 05       	cpc	r22, r1
    2966:	71 05       	cpc	r23, r1
    2968:	08 95       	ret
    296a:	9b 01       	movw	r18, r22
    296c:	ac 01       	movw	r20, r24
    296e:	0a 2e       	mov	r0, r26
    2970:	06 94       	lsr	r0
    2972:	57 95       	ror	r21
    2974:	47 95       	ror	r20
    2976:	37 95       	ror	r19
    2978:	27 95       	ror	r18
    297a:	ba 95       	dec	r27
    297c:	c9 f7       	brne	.-14     	; 0x2970 <__ultoa_invert+0xa2>
    297e:	62 0f       	add	r22, r18
    2980:	73 1f       	adc	r23, r19
    2982:	84 1f       	adc	r24, r20
    2984:	95 1f       	adc	r25, r21
    2986:	a0 1d       	adc	r26, r0
    2988:	08 95       	ret

0000298a <__divmodsi4>:
    298a:	05 2e       	mov	r0, r21
    298c:	97 fb       	bst	r25, 7
    298e:	16 f4       	brtc	.+4      	; 0x2994 <__divmodsi4+0xa>
    2990:	00 94       	com	r0
    2992:	0f d0       	rcall	.+30     	; 0x29b2 <__negsi2>
    2994:	57 fd       	sbrc	r21, 7
    2996:	05 d0       	rcall	.+10     	; 0x29a2 <__divmodsi4_neg2>
    2998:	24 d0       	rcall	.+72     	; 0x29e2 <__udivmodsi4>
    299a:	07 fc       	sbrc	r0, 7
    299c:	02 d0       	rcall	.+4      	; 0x29a2 <__divmodsi4_neg2>
    299e:	46 f4       	brtc	.+16     	; 0x29b0 <__divmodsi4_exit>
    29a0:	08 c0       	rjmp	.+16     	; 0x29b2 <__negsi2>

000029a2 <__divmodsi4_neg2>:
    29a2:	50 95       	com	r21
    29a4:	40 95       	com	r20
    29a6:	30 95       	com	r19
    29a8:	21 95       	neg	r18
    29aa:	3f 4f       	sbci	r19, 0xFF	; 255
    29ac:	4f 4f       	sbci	r20, 0xFF	; 255
    29ae:	5f 4f       	sbci	r21, 0xFF	; 255

000029b0 <__divmodsi4_exit>:
    29b0:	08 95       	ret

000029b2 <__negsi2>:
    29b2:	90 95       	com	r25
    29b4:	80 95       	com	r24
    29b6:	70 95       	com	r23
    29b8:	61 95       	neg	r22
    29ba:	7f 4f       	sbci	r23, 0xFF	; 255
    29bc:	8f 4f       	sbci	r24, 0xFF	; 255
    29be:	9f 4f       	sbci	r25, 0xFF	; 255
    29c0:	08 95       	ret

000029c2 <__muluhisi3>:
    29c2:	31 d0       	rcall	.+98     	; 0x2a26 <__umulhisi3>
    29c4:	a5 9f       	mul	r26, r21
    29c6:	90 0d       	add	r25, r0
    29c8:	b4 9f       	mul	r27, r20
    29ca:	90 0d       	add	r25, r0
    29cc:	a4 9f       	mul	r26, r20
    29ce:	80 0d       	add	r24, r0
    29d0:	91 1d       	adc	r25, r1
    29d2:	11 24       	eor	r1, r1
    29d4:	08 95       	ret

000029d6 <__mulshisi3>:
    29d6:	b7 ff       	sbrs	r27, 7
    29d8:	f4 cf       	rjmp	.-24     	; 0x29c2 <__muluhisi3>

000029da <__mulohisi3>:
    29da:	f3 df       	rcall	.-26     	; 0x29c2 <__muluhisi3>
    29dc:	82 1b       	sub	r24, r18
    29de:	93 0b       	sbc	r25, r19
    29e0:	08 95       	ret

000029e2 <__udivmodsi4>:
    29e2:	a1 e2       	ldi	r26, 0x21	; 33
    29e4:	1a 2e       	mov	r1, r26
    29e6:	aa 1b       	sub	r26, r26
    29e8:	bb 1b       	sub	r27, r27
    29ea:	fd 01       	movw	r30, r26
    29ec:	0d c0       	rjmp	.+26     	; 0x2a08 <__udivmodsi4_ep>

000029ee <__udivmodsi4_loop>:
    29ee:	aa 1f       	adc	r26, r26
    29f0:	bb 1f       	adc	r27, r27
    29f2:	ee 1f       	adc	r30, r30
    29f4:	ff 1f       	adc	r31, r31
    29f6:	a2 17       	cp	r26, r18
    29f8:	b3 07       	cpc	r27, r19
    29fa:	e4 07       	cpc	r30, r20
    29fc:	f5 07       	cpc	r31, r21
    29fe:	20 f0       	brcs	.+8      	; 0x2a08 <__udivmodsi4_ep>
    2a00:	a2 1b       	sub	r26, r18
    2a02:	b3 0b       	sbc	r27, r19
    2a04:	e4 0b       	sbc	r30, r20
    2a06:	f5 0b       	sbc	r31, r21

00002a08 <__udivmodsi4_ep>:
    2a08:	66 1f       	adc	r22, r22
    2a0a:	77 1f       	adc	r23, r23
    2a0c:	88 1f       	adc	r24, r24
    2a0e:	99 1f       	adc	r25, r25
    2a10:	1a 94       	dec	r1
    2a12:	69 f7       	brne	.-38     	; 0x29ee <__udivmodsi4_loop>
    2a14:	60 95       	com	r22
    2a16:	70 95       	com	r23
    2a18:	80 95       	com	r24
    2a1a:	90 95       	com	r25
    2a1c:	9b 01       	movw	r18, r22
    2a1e:	ac 01       	movw	r20, r24
    2a20:	bd 01       	movw	r22, r26
    2a22:	cf 01       	movw	r24, r30
    2a24:	08 95       	ret

00002a26 <__umulhisi3>:
    2a26:	a2 9f       	mul	r26, r18
    2a28:	b0 01       	movw	r22, r0
    2a2a:	b3 9f       	mul	r27, r19
    2a2c:	c0 01       	movw	r24, r0
    2a2e:	a3 9f       	mul	r26, r19
    2a30:	70 0d       	add	r23, r0
    2a32:	81 1d       	adc	r24, r1
    2a34:	11 24       	eor	r1, r1
    2a36:	91 1d       	adc	r25, r1
    2a38:	b2 9f       	mul	r27, r18
    2a3a:	70 0d       	add	r23, r0
    2a3c:	81 1d       	adc	r24, r1
    2a3e:	11 24       	eor	r1, r1
    2a40:	91 1d       	adc	r25, r1
    2a42:	08 95       	ret

00002a44 <_exit>:
    2a44:	f8 94       	cli

00002a46 <__stop_program>:
    2a46:	ff cf       	rjmp	.-2      	; 0x2a46 <__stop_program>
