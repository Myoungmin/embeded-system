
OLED_1309_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000078c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000738  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cbe  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009e0  00000000  00000000  00001572  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062d  00000000  00000000  00001f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  00002580  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000507  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000444  00000000  00000000  00002ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003113  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e3       	ldi	r30, 0x38	; 56
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d2       	rcall	.+1028   	; 0x4b8 <main>
  b4:	3f c3       	rjmp	.+1662   	; 0x734 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <cs_high>:
#define DC      0x02
#define RST     0x01

/*============================================================================*/
static inline void cs_high(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
    portb->port |= CS;
  c0:	86 e1       	ldi	r24, 0x16	; 22
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	26 e1       	ldi	r18, 0x16	; 22
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	22 81       	ldd	r18, Z+2	; 0x02
  cc:	24 60       	ori	r18, 0x04	; 4
  ce:	fc 01       	movw	r30, r24
  d0:	22 83       	std	Z+2, r18	; 0x02
}
  d2:	00 00       	nop
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <cs_low>:

static inline void cs_low(void)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
    portb->port &= ~CS;
  e2:	86 e1       	ldi	r24, 0x16	; 22
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	26 e1       	ldi	r18, 0x16	; 22
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	22 81       	ldd	r18, Z+2	; 0x02
  ee:	2b 7f       	andi	r18, 0xFB	; 251
  f0:	fc 01       	movw	r30, r24
  f2:	22 83       	std	Z+2, r18	; 0x02
}
  f4:	00 00       	nop
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <dc_low>:
{
    portb->port |= DC;
}

static inline void dc_low(void)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
    portb->port &= ~DC;
 104:	86 e1       	ldi	r24, 0x16	; 22
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	26 e1       	ldi	r18, 0x16	; 22
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	f9 01       	movw	r30, r18
 10e:	22 81       	ldd	r18, Z+2	; 0x02
 110:	2d 7f       	andi	r18, 0xFD	; 253
 112:	fc 01       	movw	r30, r24
 114:	22 83       	std	Z+2, r18	; 0x02
}
 116:	00 00       	nop
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <rst_high>:

static inline void rst_high(void)
{
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
    portb->port |= RST;
 126:	86 e1       	ldi	r24, 0x16	; 22
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	26 e1       	ldi	r18, 0x16	; 22
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	f9 01       	movw	r30, r18
 130:	22 81       	ldd	r18, Z+2	; 0x02
 132:	21 60       	ori	r18, 0x01	; 1
 134:	fc 01       	movw	r30, r24
 136:	22 83       	std	Z+2, r18	; 0x02
}
 138:	00 00       	nop
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <rst_low>:

static inline void rst_low(void)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
    portb->port &= ~RST;
 148:	86 e1       	ldi	r24, 0x16	; 22
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	26 e1       	ldi	r18, 0x16	; 22
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	22 81       	ldd	r18, Z+2	; 0x02
 154:	2e 7f       	andi	r18, 0xFE	; 254
 156:	fc 01       	movw	r30, r24
 158:	22 83       	std	Z+2, r18	; 0x02
}
 15a:	00 00       	nop
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <port_init>:

/*============================================================================*/
static void port_init(void)
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
    portb->ddr  = (SCK | MOSI | CS | DC | RST);
 16a:	86 e1       	ldi	r24, 0x16	; 22
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	2f e2       	ldi	r18, 0x2F	; 47
 170:	fc 01       	movw	r30, r24
 172:	21 83       	std	Z+1, r18	; 0x01
    portb->port = (CS | DC | RST);
 174:	86 e1       	ldi	r24, 0x16	; 22
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	27 e0       	ldi	r18, 0x07	; 7
 17a:	fc 01       	movw	r30, r24
 17c:	22 83       	std	Z+2, r18	; 0x02
}
 17e:	00 00       	nop
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <ssd1306_reset>:
/* Charge Pump Command */
#define SSD1306_CMD_CHARGEPUMP          0x8D

/*============================================================================*/
void ssd1306_reset(void)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	2e 97       	sbiw	r28, 0x0e	; 14
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
    rst_low();
 19a:	d2 df       	rcall	.-92     	; 0x140 <rst_low>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	a0 e8       	ldi	r26, 0x80	; 128
 1a2:	bf e3       	ldi	r27, 0x3F	; 63
 1a4:	89 83       	std	Y+1, r24	; 0x01
 1a6:	9a 83       	std	Y+2, r25	; 0x02
 1a8:	ab 83       	std	Y+3, r26	; 0x03
 1aa:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	4a e7       	ldi	r20, 0x7A	; 122
 1b2:	55 e4       	ldi	r21, 0x45	; 69
 1b4:	69 81       	ldd	r22, Y+1	; 0x01
 1b6:	7a 81       	ldd	r23, Y+2	; 0x02
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	9c 81       	ldd	r25, Y+4	; 0x04
 1bc:	30 d2       	rcall	.+1120   	; 0x61e <__mulsf3>
 1be:	dc 01       	movw	r26, r24
 1c0:	cb 01       	movw	r24, r22
 1c2:	8d 83       	std	Y+5, r24	; 0x05
 1c4:	9e 83       	std	Y+6, r25	; 0x06
 1c6:	af 83       	std	Y+7, r26	; 0x07
 1c8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	40 e8       	ldi	r20, 0x80	; 128
 1d0:	5f e3       	ldi	r21, 0x3F	; 63
 1d2:	6d 81       	ldd	r22, Y+5	; 0x05
 1d4:	7e 81       	ldd	r23, Y+6	; 0x06
 1d6:	8f 81       	ldd	r24, Y+7	; 0x07
 1d8:	98 85       	ldd	r25, Y+8	; 0x08
 1da:	a0 d1       	rcall	.+832    	; 0x51c <__cmpsf2>
 1dc:	88 23       	and	r24, r24
 1de:	2c f4       	brge	.+10     	; 0x1ea <ssd1306_reset+0x64>
		__ticks = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	9a 87       	std	Y+10, r25	; 0x0a
 1e6:	89 87       	std	Y+9, r24	; 0x09
 1e8:	3b c0       	rjmp	.+118    	; 0x260 <ssd1306_reset+0xda>
	else if (__tmp > 65535)
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	3f ef       	ldi	r19, 0xFF	; 255
 1ee:	4f e7       	ldi	r20, 0x7F	; 127
 1f0:	57 e4       	ldi	r21, 0x47	; 71
 1f2:	6d 81       	ldd	r22, Y+5	; 0x05
 1f4:	7e 81       	ldd	r23, Y+6	; 0x06
 1f6:	8f 81       	ldd	r24, Y+7	; 0x07
 1f8:	98 85       	ldd	r25, Y+8	; 0x08
 1fa:	0d d2       	rcall	.+1050   	; 0x616 <__gesf2>
 1fc:	18 16       	cp	r1, r24
 1fe:	3c f5       	brge	.+78     	; 0x24e <ssd1306_reset+0xc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	40 e2       	ldi	r20, 0x20	; 32
 206:	51 e4       	ldi	r21, 0x41	; 65
 208:	69 81       	ldd	r22, Y+1	; 0x01
 20a:	7a 81       	ldd	r23, Y+2	; 0x02
 20c:	8b 81       	ldd	r24, Y+3	; 0x03
 20e:	9c 81       	ldd	r25, Y+4	; 0x04
 210:	06 d2       	rcall	.+1036   	; 0x61e <__mulsf3>
 212:	dc 01       	movw	r26, r24
 214:	cb 01       	movw	r24, r22
 216:	bc 01       	movw	r22, r24
 218:	cd 01       	movw	r24, r26
 21a:	84 d1       	rcall	.+776    	; 0x524 <__fixunssfsi>
 21c:	dc 01       	movw	r26, r24
 21e:	cb 01       	movw	r24, r22
 220:	9a 87       	std	Y+10, r25	; 0x0a
 222:	89 87       	std	Y+9, r24	; 0x09
 224:	0f c0       	rjmp	.+30     	; 0x244 <ssd1306_reset+0xbe>
 226:	80 e9       	ldi	r24, 0x90	; 144
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	9c 87       	std	Y+12, r25	; 0x0c
 22c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 22e:	8b 85       	ldd	r24, Y+11	; 0x0b
 230:	9c 85       	ldd	r25, Y+12	; 0x0c
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <ssd1306_reset+0xac>
 236:	9c 87       	std	Y+12, r25	; 0x0c
 238:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 23a:	89 85       	ldd	r24, Y+9	; 0x09
 23c:	9a 85       	ldd	r25, Y+10	; 0x0a
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	9a 87       	std	Y+10, r25	; 0x0a
 242:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 244:	89 85       	ldd	r24, Y+9	; 0x09
 246:	9a 85       	ldd	r25, Y+10	; 0x0a
 248:	89 2b       	or	r24, r25
 24a:	69 f7       	brne	.-38     	; 0x226 <ssd1306_reset+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 24c:	13 c0       	rjmp	.+38     	; 0x274 <ssd1306_reset+0xee>
 24e:	6d 81       	ldd	r22, Y+5	; 0x05
 250:	7e 81       	ldd	r23, Y+6	; 0x06
 252:	8f 81       	ldd	r24, Y+7	; 0x07
 254:	98 85       	ldd	r25, Y+8	; 0x08
 256:	66 d1       	rcall	.+716    	; 0x524 <__fixunssfsi>
 258:	dc 01       	movw	r26, r24
 25a:	cb 01       	movw	r24, r22
 25c:	9a 87       	std	Y+10, r25	; 0x0a
 25e:	89 87       	std	Y+9, r24	; 0x09
 260:	89 85       	ldd	r24, Y+9	; 0x09
 262:	9a 85       	ldd	r25, Y+10	; 0x0a
 264:	9e 87       	std	Y+14, r25	; 0x0e
 266:	8d 87       	std	Y+13, r24	; 0x0d
 268:	8d 85       	ldd	r24, Y+13	; 0x0d
 26a:	9e 85       	ldd	r25, Y+14	; 0x0e
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <ssd1306_reset+0xe6>
 270:	9e 87       	std	Y+14, r25	; 0x0e
    _delay_ms(1);
    rst_high();
 272:	8d 87       	std	Y+13, r24	; 0x0d
 274:	54 df       	rcall	.-344    	; 0x11e <rst_high>
}
 276:	00 00       	nop
 278:	2e 96       	adiw	r28, 0x0e	; 14
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <ssd1306_cmd>:

void ssd1306_cmd(uint8_t *cmd, uint8_t len)
{
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	00 d0       	rcall	.+0      	; 0x290 <ssd1306_cmd+0x6>
 290:	00 d0       	rcall	.+0      	; 0x292 <ssd1306_cmd+0x8>
 292:	1f 92       	push	r1
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	9c 83       	std	Y+4, r25	; 0x04
 29a:	8b 83       	std	Y+3, r24	; 0x03
 29c:	6d 83       	std	Y+5, r22	; 0x05
    int     i;

    dc_low();
 29e:	2e df       	rcall	.-420    	; 0xfc <dc_low>
    cs_low();
 2a0:	1c df       	rcall	.-456    	; 0xda <cs_low>
 2a2:	1a 82       	std	Y+2, r1	; 0x02

    for (i=0; i<len; i++)
 2a4:	19 82       	std	Y+1, r1	; 0x01
 2a6:	0f c0       	rjmp	.+30     	; 0x2c6 <ssd1306_cmd+0x3c>
 2a8:	8b 81       	ldd	r24, Y+3	; 0x03
        spi_rw(*cmd++);
 2aa:	9c 81       	ldd	r25, Y+4	; 0x04
 2ac:	9c 01       	movw	r18, r24
 2ae:	2f 5f       	subi	r18, 0xFF	; 255
 2b0:	3f 4f       	sbci	r19, 0xFF	; 255
 2b2:	3c 83       	std	Y+4, r19	; 0x04
 2b4:	2b 83       	std	Y+3, r18	; 0x03
 2b6:	fc 01       	movw	r30, r24
 2b8:	80 81       	ld	r24, Z
 2ba:	05 d1       	rcall	.+522    	; 0x4c6 <spi_rw>
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
    int     i;

    dc_low();
    cs_low();

    for (i=0; i<len; i++)
 2be:	9a 81       	ldd	r25, Y+2	; 0x02
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	9a 83       	std	Y+2, r25	; 0x02
 2c4:	89 83       	std	Y+1, r24	; 0x01
 2c6:	8d 81       	ldd	r24, Y+5	; 0x05
 2c8:	28 2f       	mov	r18, r24
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	9a 81       	ldd	r25, Y+2	; 0x02
 2d0:	82 17       	cp	r24, r18
 2d2:	93 07       	cpc	r25, r19
 2d4:	4c f3       	brlt	.-46     	; 0x2a8 <ssd1306_cmd+0x1e>
        spi_rw(*cmd++);

    cs_high();
 2d6:	f0 de       	rcall	.-544    	; 0xb8 <cs_high>
 2d8:	00 00       	nop
}
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <ssd1306_chargepump_enable>:
 2ea:	cf 93       	push	r28

/*============================================================================*/
static void ssd1306_chargepump_enable(bool enable)
{
 2ec:	df 93       	push	r29
 2ee:	00 d0       	rcall	.+0      	; 0x2f0 <ssd1306_chargepump_enable+0x6>
 2f0:	00 d0       	rcall	.+0      	; 0x2f2 <ssd1306_chargepump_enable+0x8>
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	9c 83       	std	Y+4, r25	; 0x04
 2f8:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t     cmd_buf[2];

    cmd_buf[0] = SSD1306_CMD_CHARGEPUMP;
 2fa:	8d e8       	ldi	r24, 0x8D	; 141
 2fc:	89 83       	std	Y+1, r24	; 0x01
    cmd_buf[1] = 0x10 | (enable ? 4 : 0);
 2fe:	8b 81       	ldd	r24, Y+3	; 0x03
 300:	9c 81       	ldd	r25, Y+4	; 0x04
 302:	89 2b       	or	r24, r25
 304:	11 f0       	breq	.+4      	; 0x30a <ssd1306_chargepump_enable+0x20>
 306:	84 e1       	ldi	r24, 0x14	; 20
 308:	01 c0       	rjmp	.+2      	; 0x30c <ssd1306_chargepump_enable+0x22>
 30a:	80 e1       	ldi	r24, 0x10	; 16
 30c:	8a 83       	std	Y+2, r24	; 0x02

    ssd1306_cmd(cmd_buf, 2);
 30e:	62 e0       	ldi	r22, 0x02	; 2
 310:	ce 01       	movw	r24, r28
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	ba df       	rcall	.-140    	; 0x28a <ssd1306_cmd>
}
 316:	00 00       	nop
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <ssd1306_entire_on>:

static void ssd1306_entire_on(bool enable)
{
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	00 d0       	rcall	.+0      	; 0x32c <ssd1306_entire_on+0x6>
 32c:	1f 92       	push	r1
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	9b 83       	std	Y+3, r25	; 0x03
 334:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t     cmd = SSD1306_CMD_ENTIRE_ON | enable;
 336:	8a 81       	ldd	r24, Y+2	; 0x02
 338:	84 6a       	ori	r24, 0xA4	; 164
 33a:	89 83       	std	Y+1, r24	; 0x01

    ssd1306_cmd(&cmd, 1);
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	ce 01       	movw	r24, r28
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	a3 df       	rcall	.-186    	; 0x28a <ssd1306_cmd>
}
 344:	00 00       	nop
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <ssd1306_display_on>:

static void ssd1306_display_on(bool enable)
{
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	00 d0       	rcall	.+0      	; 0x358 <ssd1306_display_on+0x6>
 358:	1f 92       	push	r1
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	9b 83       	std	Y+3, r25	; 0x03
 360:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t     cmd = SSD1306_CMD_DISPLAY_ON | enable;
 362:	8a 81       	ldd	r24, Y+2	; 0x02
 364:	8e 6a       	ori	r24, 0xAE	; 174
 366:	89 83       	std	Y+1, r24	; 0x01

    ssd1306_cmd(&cmd, 1);
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	ce 01       	movw	r24, r28
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	8d df       	rcall	.-230    	; 0x28a <ssd1306_cmd>
}
 370:	00 00       	nop
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <ssd1306_init>:

void ssd1306_init(void)
{
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	2e 97       	sbiw	r28, 0x0e	; 14
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	a0 e8       	ldi	r26, 0x80	; 128
 398:	bf e3       	ldi	r27, 0x3F	; 63
 39a:	89 83       	std	Y+1, r24	; 0x01
 39c:	9a 83       	std	Y+2, r25	; 0x02
 39e:	ab 83       	std	Y+3, r26	; 0x03
 3a0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	4a e7       	ldi	r20, 0x7A	; 122
 3a8:	55 e4       	ldi	r21, 0x45	; 69
 3aa:	69 81       	ldd	r22, Y+1	; 0x01
 3ac:	7a 81       	ldd	r23, Y+2	; 0x02
 3ae:	8b 81       	ldd	r24, Y+3	; 0x03
 3b0:	9c 81       	ldd	r25, Y+4	; 0x04
 3b2:	35 d1       	rcall	.+618    	; 0x61e <__mulsf3>
 3b4:	dc 01       	movw	r26, r24
 3b6:	cb 01       	movw	r24, r22
 3b8:	8d 83       	std	Y+5, r24	; 0x05
 3ba:	9e 83       	std	Y+6, r25	; 0x06
 3bc:	af 83       	std	Y+7, r26	; 0x07
 3be:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 3c0:	20 e0       	ldi	r18, 0x00	; 0
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	40 e8       	ldi	r20, 0x80	; 128
 3c6:	5f e3       	ldi	r21, 0x3F	; 63
 3c8:	6d 81       	ldd	r22, Y+5	; 0x05
 3ca:	7e 81       	ldd	r23, Y+6	; 0x06
 3cc:	8f 81       	ldd	r24, Y+7	; 0x07
 3ce:	98 85       	ldd	r25, Y+8	; 0x08
 3d0:	a5 d0       	rcall	.+330    	; 0x51c <__cmpsf2>
 3d2:	88 23       	and	r24, r24
 3d4:	2c f4       	brge	.+10     	; 0x3e0 <ssd1306_init+0x62>
		__ticks = 1;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	9a 87       	std	Y+10, r25	; 0x0a
 3dc:	89 87       	std	Y+9, r24	; 0x09
 3de:	3b c0       	rjmp	.+118    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	else if (__tmp > 65535)
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	3f ef       	ldi	r19, 0xFF	; 255
 3e4:	4f e7       	ldi	r20, 0x7F	; 127
 3e6:	57 e4       	ldi	r21, 0x47	; 71
 3e8:	6d 81       	ldd	r22, Y+5	; 0x05
 3ea:	7e 81       	ldd	r23, Y+6	; 0x06
 3ec:	8f 81       	ldd	r24, Y+7	; 0x07
 3ee:	98 85       	ldd	r25, Y+8	; 0x08
 3f0:	12 d1       	rcall	.+548    	; 0x616 <__gesf2>
 3f2:	18 16       	cp	r1, r24
 3f4:	3c f5       	brge	.+78     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	40 e2       	ldi	r20, 0x20	; 32
 3fc:	51 e4       	ldi	r21, 0x41	; 65
 3fe:	69 81       	ldd	r22, Y+1	; 0x01
 400:	7a 81       	ldd	r23, Y+2	; 0x02
 402:	8b 81       	ldd	r24, Y+3	; 0x03
 404:	9c 81       	ldd	r25, Y+4	; 0x04
 406:	0b d1       	rcall	.+534    	; 0x61e <__mulsf3>
 408:	dc 01       	movw	r26, r24
 40a:	cb 01       	movw	r24, r22
 40c:	bc 01       	movw	r22, r24
 40e:	cd 01       	movw	r24, r26
 410:	89 d0       	rcall	.+274    	; 0x524 <__fixunssfsi>
 412:	dc 01       	movw	r26, r24
 414:	cb 01       	movw	r24, r22
 416:	9a 87       	std	Y+10, r25	; 0x0a
 418:	89 87       	std	Y+9, r24	; 0x09
 41a:	0f c0       	rjmp	.+30     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 41c:	80 e9       	ldi	r24, 0x90	; 144
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	9c 87       	std	Y+12, r25	; 0x0c
 422:	8b 87       	std	Y+11, r24	; 0x0b
 424:	8b 85       	ldd	r24, Y+11	; 0x0b
 426:	9c 85       	ldd	r25, Y+12	; 0x0c
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 42c:	9c 87       	std	Y+12, r25	; 0x0c
 42e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 430:	89 85       	ldd	r24, Y+9	; 0x09
 432:	9a 85       	ldd	r25, Y+10	; 0x0a
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	9a 87       	std	Y+10, r25	; 0x0a
 438:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 43a:	89 85       	ldd	r24, Y+9	; 0x09
 43c:	9a 85       	ldd	r25, Y+10	; 0x0a
 43e:	89 2b       	or	r24, r25
 440:	69 f7       	brne	.-38     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 442:	13 c0       	rjmp	.+38     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 444:	6d 81       	ldd	r22, Y+5	; 0x05
 446:	7e 81       	ldd	r23, Y+6	; 0x06
 448:	8f 81       	ldd	r24, Y+7	; 0x07
 44a:	98 85       	ldd	r25, Y+8	; 0x08
 44c:	6b d0       	rcall	.+214    	; 0x524 <__fixunssfsi>
 44e:	dc 01       	movw	r26, r24
 450:	cb 01       	movw	r24, r22
 452:	9a 87       	std	Y+10, r25	; 0x0a
 454:	89 87       	std	Y+9, r24	; 0x09
 456:	89 85       	ldd	r24, Y+9	; 0x09
 458:	9a 85       	ldd	r25, Y+10	; 0x0a
 45a:	9e 87       	std	Y+14, r25	; 0x0e
 45c:	8d 87       	std	Y+13, r24	; 0x0d
 45e:	8d 85       	ldd	r24, Y+13	; 0x0d
 460:	9e 85       	ldd	r25, Y+14	; 0x0e
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
    _delay_ms(1);

    ssd1306_reset();
 466:	9e 87       	std	Y+14, r25	; 0x0e

    ssd1306_chargepump_enable(true);
 468:	8d 87       	std	Y+13, r24	; 0x0d
 46a:	8d de       	rcall	.-742    	; 0x186 <ssd1306_reset>
 46c:	81 e0       	ldi	r24, 0x01	; 1
    ssd1306_entire_on(true);
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	3c df       	rcall	.-392    	; 0x2ea <ssd1306_chargepump_enable>
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
    ssd1306_display_on(true);
 476:	57 df       	rcall	.-338    	; 0x326 <ssd1306_entire_on>
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	6a df       	rcall	.-300    	; 0x352 <ssd1306_display_on>
}
 47e:	00 00       	nop
 480:	2e 96       	adiw	r28, 0x0e	; 14
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	f8 94       	cli
 486:	de bf       	out	0x3e, r29	; 62
 488:	0f be       	out	0x3f, r0	; 63
 48a:	cd bf       	out	0x3d, r28	; 61
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	08 95       	ret

00000492 <setup>:

/*============================================================================*/
void setup(void)
{
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
    port_init();
 49a:	63 de       	rcall	.-826    	; 0x162 <port_init>
    spi_init();
 49c:	2e d0       	rcall	.+92     	; 0x4fa <spi_init>

    ssd1306_init();
 49e:	6f df       	rcall	.-290    	; 0x37e <ssd1306_init>
 4a0:	00 00       	nop
}
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <loop>:
 4a8:	cf 93       	push	r28

void loop(void)
{
 4aa:	df 93       	push	r29
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
}
 4b0:	00 00       	nop
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <main>:

int main(void)
{
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	cd b7       	in	r28, 0x3d	; 61
 4be:	de b7       	in	r29, 0x3e	; 62
    setup();
 4c0:	e8 df       	rcall	.-48     	; 0x492 <setup>

    while (1) 
        loop();
 4c2:	f2 df       	rcall	.-28     	; 0x4a8 <loop>
 4c4:	fe cf       	rjmp	.-4      	; 0x4c2 <main+0xa>

000004c6 <spi_rw>:
 4c6:	cf 93       	push	r28


volatile struct spi *const spi = (void*)SPI_REG;

uint8_t spi_rw(uint8_t data)
{
 4c8:	df 93       	push	r29
 4ca:	1f 92       	push	r1
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
 4d0:	89 83       	std	Y+1, r24	; 0x01
    spi->spdr = data;
 4d2:	8d e0       	ldi	r24, 0x0D	; 13
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	29 81       	ldd	r18, Y+1	; 0x01
 4d8:	fc 01       	movw	r30, r24
 4da:	22 83       	std	Z+2, r18	; 0x02
    while (!(spi->spsr & SPIF));
 4dc:	00 00       	nop
 4de:	8d e0       	ldi	r24, 0x0D	; 13
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	fc 01       	movw	r30, r24
 4e4:	81 81       	ldd	r24, Z+1	; 0x01
 4e6:	88 23       	and	r24, r24
 4e8:	d4 f7       	brge	.-12     	; 0x4de <spi_rw+0x18>
    return spi->spdr;
 4ea:	8d e0       	ldi	r24, 0x0D	; 13
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	fc 01       	movw	r30, r24
 4f0:	82 81       	ldd	r24, Z+2	; 0x02
}
 4f2:	0f 90       	pop	r0
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <spi_init>:


void spi_init(void)
{
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
    spi->spcr = (SPE | MSTR | DIV_16);
 502:	8d e0       	ldi	r24, 0x0D	; 13
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	21 e5       	ldi	r18, 0x51	; 81
 508:	fc 01       	movw	r30, r24
 50a:	20 83       	st	Z, r18
    spi->spsr = 0;
 50c:	8d e0       	ldi	r24, 0x0D	; 13
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	fc 01       	movw	r30, r24
 512:	11 82       	std	Z+1, r1	; 0x01
}
 514:	00 00       	nop
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <__cmpsf2>:
 51c:	2f d0       	rcall	.+94     	; 0x57c <__fp_cmp>
 51e:	08 f4       	brcc	.+2      	; 0x522 <__cmpsf2+0x6>
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	08 95       	ret

00000524 <__fixunssfsi>:
 524:	57 d0       	rcall	.+174    	; 0x5d4 <__fp_splitA>
 526:	88 f0       	brcs	.+34     	; 0x54a <__fixunssfsi+0x26>
 528:	9f 57       	subi	r25, 0x7F	; 127
 52a:	90 f0       	brcs	.+36     	; 0x550 <__fixunssfsi+0x2c>
 52c:	b9 2f       	mov	r27, r25
 52e:	99 27       	eor	r25, r25
 530:	b7 51       	subi	r27, 0x17	; 23
 532:	a0 f0       	brcs	.+40     	; 0x55c <__fixunssfsi+0x38>
 534:	d1 f0       	breq	.+52     	; 0x56a <__fixunssfsi+0x46>
 536:	66 0f       	add	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	88 1f       	adc	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	1a f0       	brmi	.+6      	; 0x546 <__fixunssfsi+0x22>
 540:	ba 95       	dec	r27
 542:	c9 f7       	brne	.-14     	; 0x536 <__fixunssfsi+0x12>
 544:	12 c0       	rjmp	.+36     	; 0x56a <__fixunssfsi+0x46>
 546:	b1 30       	cpi	r27, 0x01	; 1
 548:	81 f0       	breq	.+32     	; 0x56a <__fixunssfsi+0x46>
 54a:	5e d0       	rcall	.+188    	; 0x608 <__fp_zero>
 54c:	b1 e0       	ldi	r27, 0x01	; 1
 54e:	08 95       	ret
 550:	5b c0       	rjmp	.+182    	; 0x608 <__fp_zero>
 552:	67 2f       	mov	r22, r23
 554:	78 2f       	mov	r23, r24
 556:	88 27       	eor	r24, r24
 558:	b8 5f       	subi	r27, 0xF8	; 248
 55a:	39 f0       	breq	.+14     	; 0x56a <__fixunssfsi+0x46>
 55c:	b9 3f       	cpi	r27, 0xF9	; 249
 55e:	cc f3       	brlt	.-14     	; 0x552 <__fixunssfsi+0x2e>
 560:	86 95       	lsr	r24
 562:	77 95       	ror	r23
 564:	67 95       	ror	r22
 566:	b3 95       	inc	r27
 568:	d9 f7       	brne	.-10     	; 0x560 <__fixunssfsi+0x3c>
 56a:	3e f4       	brtc	.+14     	; 0x57a <__fixunssfsi+0x56>
 56c:	90 95       	com	r25
 56e:	80 95       	com	r24
 570:	70 95       	com	r23
 572:	61 95       	neg	r22
 574:	7f 4f       	sbci	r23, 0xFF	; 255
 576:	8f 4f       	sbci	r24, 0xFF	; 255
 578:	9f 4f       	sbci	r25, 0xFF	; 255
 57a:	08 95       	ret

0000057c <__fp_cmp>:
 57c:	99 0f       	add	r25, r25
 57e:	00 08       	sbc	r0, r0
 580:	55 0f       	add	r21, r21
 582:	aa 0b       	sbc	r26, r26
 584:	e0 e8       	ldi	r30, 0x80	; 128
 586:	fe ef       	ldi	r31, 0xFE	; 254
 588:	16 16       	cp	r1, r22
 58a:	17 06       	cpc	r1, r23
 58c:	e8 07       	cpc	r30, r24
 58e:	f9 07       	cpc	r31, r25
 590:	c0 f0       	brcs	.+48     	; 0x5c2 <__fp_cmp+0x46>
 592:	12 16       	cp	r1, r18
 594:	13 06       	cpc	r1, r19
 596:	e4 07       	cpc	r30, r20
 598:	f5 07       	cpc	r31, r21
 59a:	98 f0       	brcs	.+38     	; 0x5c2 <__fp_cmp+0x46>
 59c:	62 1b       	sub	r22, r18
 59e:	73 0b       	sbc	r23, r19
 5a0:	84 0b       	sbc	r24, r20
 5a2:	95 0b       	sbc	r25, r21
 5a4:	39 f4       	brne	.+14     	; 0x5b4 <__fp_cmp+0x38>
 5a6:	0a 26       	eor	r0, r26
 5a8:	61 f0       	breq	.+24     	; 0x5c2 <__fp_cmp+0x46>
 5aa:	23 2b       	or	r18, r19
 5ac:	24 2b       	or	r18, r20
 5ae:	25 2b       	or	r18, r21
 5b0:	21 f4       	brne	.+8      	; 0x5ba <__fp_cmp+0x3e>
 5b2:	08 95       	ret
 5b4:	0a 26       	eor	r0, r26
 5b6:	09 f4       	brne	.+2      	; 0x5ba <__fp_cmp+0x3e>
 5b8:	a1 40       	sbci	r26, 0x01	; 1
 5ba:	a6 95       	lsr	r26
 5bc:	8f ef       	ldi	r24, 0xFF	; 255
 5be:	81 1d       	adc	r24, r1
 5c0:	81 1d       	adc	r24, r1
 5c2:	08 95       	ret

000005c4 <__fp_split3>:
 5c4:	57 fd       	sbrc	r21, 7
 5c6:	90 58       	subi	r25, 0x80	; 128
 5c8:	44 0f       	add	r20, r20
 5ca:	55 1f       	adc	r21, r21
 5cc:	59 f0       	breq	.+22     	; 0x5e4 <__fp_splitA+0x10>
 5ce:	5f 3f       	cpi	r21, 0xFF	; 255
 5d0:	71 f0       	breq	.+28     	; 0x5ee <__fp_splitA+0x1a>
 5d2:	47 95       	ror	r20

000005d4 <__fp_splitA>:
 5d4:	88 0f       	add	r24, r24
 5d6:	97 fb       	bst	r25, 7
 5d8:	99 1f       	adc	r25, r25
 5da:	61 f0       	breq	.+24     	; 0x5f4 <__fp_splitA+0x20>
 5dc:	9f 3f       	cpi	r25, 0xFF	; 255
 5de:	79 f0       	breq	.+30     	; 0x5fe <__fp_splitA+0x2a>
 5e0:	87 95       	ror	r24
 5e2:	08 95       	ret
 5e4:	12 16       	cp	r1, r18
 5e6:	13 06       	cpc	r1, r19
 5e8:	14 06       	cpc	r1, r20
 5ea:	55 1f       	adc	r21, r21
 5ec:	f2 cf       	rjmp	.-28     	; 0x5d2 <__fp_split3+0xe>
 5ee:	46 95       	lsr	r20
 5f0:	f1 df       	rcall	.-30     	; 0x5d4 <__fp_splitA>
 5f2:	08 c0       	rjmp	.+16     	; 0x604 <__fp_splitA+0x30>
 5f4:	16 16       	cp	r1, r22
 5f6:	17 06       	cpc	r1, r23
 5f8:	18 06       	cpc	r1, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	f1 cf       	rjmp	.-30     	; 0x5e0 <__fp_splitA+0xc>
 5fe:	86 95       	lsr	r24
 600:	71 05       	cpc	r23, r1
 602:	61 05       	cpc	r22, r1
 604:	08 94       	sec
 606:	08 95       	ret

00000608 <__fp_zero>:
 608:	e8 94       	clt

0000060a <__fp_szero>:
 60a:	bb 27       	eor	r27, r27
 60c:	66 27       	eor	r22, r22
 60e:	77 27       	eor	r23, r23
 610:	cb 01       	movw	r24, r22
 612:	97 f9       	bld	r25, 7
 614:	08 95       	ret

00000616 <__gesf2>:
 616:	b2 df       	rcall	.-156    	; 0x57c <__fp_cmp>
 618:	08 f4       	brcc	.+2      	; 0x61c <__gesf2+0x6>
 61a:	8f ef       	ldi	r24, 0xFF	; 255
 61c:	08 95       	ret

0000061e <__mulsf3>:
 61e:	0b d0       	rcall	.+22     	; 0x636 <__mulsf3x>
 620:	78 c0       	rjmp	.+240    	; 0x712 <__fp_round>
 622:	69 d0       	rcall	.+210    	; 0x6f6 <__fp_pscA>
 624:	28 f0       	brcs	.+10     	; 0x630 <__mulsf3+0x12>
 626:	6e d0       	rcall	.+220    	; 0x704 <__fp_pscB>
 628:	18 f0       	brcs	.+6      	; 0x630 <__mulsf3+0x12>
 62a:	95 23       	and	r25, r21
 62c:	09 f0       	breq	.+2      	; 0x630 <__mulsf3+0x12>
 62e:	5a c0       	rjmp	.+180    	; 0x6e4 <__fp_inf>
 630:	5f c0       	rjmp	.+190    	; 0x6f0 <__fp_nan>
 632:	11 24       	eor	r1, r1
 634:	ea cf       	rjmp	.-44     	; 0x60a <__fp_szero>

00000636 <__mulsf3x>:
 636:	c6 df       	rcall	.-116    	; 0x5c4 <__fp_split3>
 638:	a0 f3       	brcs	.-24     	; 0x622 <__mulsf3+0x4>

0000063a <__mulsf3_pse>:
 63a:	95 9f       	mul	r25, r21
 63c:	d1 f3       	breq	.-12     	; 0x632 <__mulsf3+0x14>
 63e:	95 0f       	add	r25, r21
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	55 1f       	adc	r21, r21
 644:	62 9f       	mul	r22, r18
 646:	f0 01       	movw	r30, r0
 648:	72 9f       	mul	r23, r18
 64a:	bb 27       	eor	r27, r27
 64c:	f0 0d       	add	r31, r0
 64e:	b1 1d       	adc	r27, r1
 650:	63 9f       	mul	r22, r19
 652:	aa 27       	eor	r26, r26
 654:	f0 0d       	add	r31, r0
 656:	b1 1d       	adc	r27, r1
 658:	aa 1f       	adc	r26, r26
 65a:	64 9f       	mul	r22, r20
 65c:	66 27       	eor	r22, r22
 65e:	b0 0d       	add	r27, r0
 660:	a1 1d       	adc	r26, r1
 662:	66 1f       	adc	r22, r22
 664:	82 9f       	mul	r24, r18
 666:	22 27       	eor	r18, r18
 668:	b0 0d       	add	r27, r0
 66a:	a1 1d       	adc	r26, r1
 66c:	62 1f       	adc	r22, r18
 66e:	73 9f       	mul	r23, r19
 670:	b0 0d       	add	r27, r0
 672:	a1 1d       	adc	r26, r1
 674:	62 1f       	adc	r22, r18
 676:	83 9f       	mul	r24, r19
 678:	a0 0d       	add	r26, r0
 67a:	61 1d       	adc	r22, r1
 67c:	22 1f       	adc	r18, r18
 67e:	74 9f       	mul	r23, r20
 680:	33 27       	eor	r19, r19
 682:	a0 0d       	add	r26, r0
 684:	61 1d       	adc	r22, r1
 686:	23 1f       	adc	r18, r19
 688:	84 9f       	mul	r24, r20
 68a:	60 0d       	add	r22, r0
 68c:	21 1d       	adc	r18, r1
 68e:	82 2f       	mov	r24, r18
 690:	76 2f       	mov	r23, r22
 692:	6a 2f       	mov	r22, r26
 694:	11 24       	eor	r1, r1
 696:	9f 57       	subi	r25, 0x7F	; 127
 698:	50 40       	sbci	r21, 0x00	; 0
 69a:	8a f0       	brmi	.+34     	; 0x6be <__mulsf3_pse+0x84>
 69c:	e1 f0       	breq	.+56     	; 0x6d6 <__mulsf3_pse+0x9c>
 69e:	88 23       	and	r24, r24
 6a0:	4a f0       	brmi	.+18     	; 0x6b4 <__mulsf3_pse+0x7a>
 6a2:	ee 0f       	add	r30, r30
 6a4:	ff 1f       	adc	r31, r31
 6a6:	bb 1f       	adc	r27, r27
 6a8:	66 1f       	adc	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	88 1f       	adc	r24, r24
 6ae:	91 50       	subi	r25, 0x01	; 1
 6b0:	50 40       	sbci	r21, 0x00	; 0
 6b2:	a9 f7       	brne	.-22     	; 0x69e <__mulsf3_pse+0x64>
 6b4:	9e 3f       	cpi	r25, 0xFE	; 254
 6b6:	51 05       	cpc	r21, r1
 6b8:	70 f0       	brcs	.+28     	; 0x6d6 <__mulsf3_pse+0x9c>
 6ba:	14 c0       	rjmp	.+40     	; 0x6e4 <__fp_inf>
 6bc:	a6 cf       	rjmp	.-180    	; 0x60a <__fp_szero>
 6be:	5f 3f       	cpi	r21, 0xFF	; 255
 6c0:	ec f3       	brlt	.-6      	; 0x6bc <__mulsf3_pse+0x82>
 6c2:	98 3e       	cpi	r25, 0xE8	; 232
 6c4:	dc f3       	brlt	.-10     	; 0x6bc <__mulsf3_pse+0x82>
 6c6:	86 95       	lsr	r24
 6c8:	77 95       	ror	r23
 6ca:	67 95       	ror	r22
 6cc:	b7 95       	ror	r27
 6ce:	f7 95       	ror	r31
 6d0:	e7 95       	ror	r30
 6d2:	9f 5f       	subi	r25, 0xFF	; 255
 6d4:	c1 f7       	brne	.-16     	; 0x6c6 <__mulsf3_pse+0x8c>
 6d6:	fe 2b       	or	r31, r30
 6d8:	88 0f       	add	r24, r24
 6da:	91 1d       	adc	r25, r1
 6dc:	96 95       	lsr	r25
 6de:	87 95       	ror	r24
 6e0:	97 f9       	bld	r25, 7
 6e2:	08 95       	ret

000006e4 <__fp_inf>:
 6e4:	97 f9       	bld	r25, 7
 6e6:	9f 67       	ori	r25, 0x7F	; 127
 6e8:	80 e8       	ldi	r24, 0x80	; 128
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	08 95       	ret

000006f0 <__fp_nan>:
 6f0:	9f ef       	ldi	r25, 0xFF	; 255
 6f2:	80 ec       	ldi	r24, 0xC0	; 192
 6f4:	08 95       	ret

000006f6 <__fp_pscA>:
 6f6:	00 24       	eor	r0, r0
 6f8:	0a 94       	dec	r0
 6fa:	16 16       	cp	r1, r22
 6fc:	17 06       	cpc	r1, r23
 6fe:	18 06       	cpc	r1, r24
 700:	09 06       	cpc	r0, r25
 702:	08 95       	ret

00000704 <__fp_pscB>:
 704:	00 24       	eor	r0, r0
 706:	0a 94       	dec	r0
 708:	12 16       	cp	r1, r18
 70a:	13 06       	cpc	r1, r19
 70c:	14 06       	cpc	r1, r20
 70e:	05 06       	cpc	r0, r21
 710:	08 95       	ret

00000712 <__fp_round>:
 712:	09 2e       	mov	r0, r25
 714:	03 94       	inc	r0
 716:	00 0c       	add	r0, r0
 718:	11 f4       	brne	.+4      	; 0x71e <__fp_round+0xc>
 71a:	88 23       	and	r24, r24
 71c:	52 f0       	brmi	.+20     	; 0x732 <__fp_round+0x20>
 71e:	bb 0f       	add	r27, r27
 720:	40 f4       	brcc	.+16     	; 0x732 <__fp_round+0x20>
 722:	bf 2b       	or	r27, r31
 724:	11 f4       	brne	.+4      	; 0x72a <__fp_round+0x18>
 726:	60 ff       	sbrs	r22, 0
 728:	04 c0       	rjmp	.+8      	; 0x732 <__fp_round+0x20>
 72a:	6f 5f       	subi	r22, 0xFF	; 255
 72c:	7f 4f       	sbci	r23, 0xFF	; 255
 72e:	8f 4f       	sbci	r24, 0xFF	; 255
 730:	9f 4f       	sbci	r25, 0xFF	; 255
 732:	08 95       	ret

00000734 <_exit>:
 734:	f8 94       	cli

00000736 <__stop_program>:
 736:	ff cf       	rjmp	.-2      	; 0x736 <__stop_program>
