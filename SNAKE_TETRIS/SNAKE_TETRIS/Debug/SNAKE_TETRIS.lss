
SNAKE_TETRIS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000061a  00800100  00004d8a  00004e1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004d8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a5  0080071a  0080071a  00005438  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005438  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000054d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eef  00000000  00000000  00005704  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6d  00000000  00000000  000075f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002013  00000000  00000000  00008260  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000095c  00000000  00000000  0000a274  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094e  00000000  00000000  0000abd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001405  00000000  00000000  0000b51e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000c923  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c1       	rjmp	.+674    	; 0x2a4 <__ctors_end>
       2:	00 00       	nop
       4:	6e c1       	rjmp	.+732    	; 0x2e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c1       	rjmp	.+728    	; 0x2e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c1       	rjmp	.+724    	; 0x2e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c1       	rjmp	.+720    	; 0x2e2 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_5>
      18:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__vector_6>
      1c:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__vector_7>
      20:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__vector_8>
      24:	5e c1       	rjmp	.+700    	; 0x2e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c1       	rjmp	.+696    	; 0x2e2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5a c1       	rjmp	.+692    	; 0x2e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <__vector_12>
      34:	56 c1       	rjmp	.+684    	; 0x2e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	54 c1       	rjmp	.+680    	; 0x2e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	52 c1       	rjmp	.+676    	; 0x2e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c1       	rjmp	.+672    	; 0x2e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	4e c1       	rjmp	.+668    	; 0x2e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	4c c1       	rjmp	.+664    	; 0x2e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c1       	rjmp	.+660    	; 0x2e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	48 c1       	rjmp	.+656    	; 0x2e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	46 c1       	rjmp	.+652    	; 0x2e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c1       	rjmp	.+648    	; 0x2e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c1       	rjmp	.+644    	; 0x2e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c1       	rjmp	.+640    	; 0x2e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	3e c1       	rjmp	.+636    	; 0x2e2 <__bad_interrupt>
      66:	00 00       	nop
      68:	3c c1       	rjmp	.+632    	; 0x2e2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3a c1       	rjmp	.+628    	; 0x2e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c1       	rjmp	.+624    	; 0x2e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c1       	rjmp	.+620    	; 0x2e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c1       	rjmp	.+616    	; 0x2e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c1       	rjmp	.+612    	; 0x2e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c1       	rjmp	.+608    	; 0x2e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c1       	rjmp	.+604    	; 0x2e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	2c c1       	rjmp	.+600    	; 0x2e2 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	00 00       	nop
      92:	00 5f       	subi	r16, 0xF0	; 240
      94:	00 00       	nop
      96:	00 07       	cpc	r16, r16
      98:	00 07       	cpc	r16, r16
      9a:	00 14       	cp	r0, r0
      9c:	7f 14       	cp	r7, r15
      9e:	7f 14       	cp	r7, r15
      a0:	24 2a       	or	r2, r20
      a2:	7f 2a       	or	r7, r31
      a4:	12 23       	and	r17, r18
      a6:	13 08       	sbc	r1, r3
      a8:	64 62       	ori	r22, 0x24	; 36
      aa:	36 49       	sbci	r19, 0x96	; 150
      ac:	55 22       	and	r5, r21
      ae:	50 00       	.word	0x0050	; ????
      b0:	05 03       	mulsu	r16, r21
      b2:	00 00       	nop
      b4:	00 1c       	adc	r0, r0
      b6:	22 41       	sbci	r18, 0x12	; 18
      b8:	00 00       	nop
      ba:	41 22       	and	r4, r17
      bc:	1c 00       	.word	0x001c	; ????
      be:	14 08       	sbc	r1, r4
      c0:	3e 08       	sbc	r3, r14
      c2:	14 08       	sbc	r1, r4
      c4:	08 3e       	cpi	r16, 0xE8	; 232
      c6:	08 08       	sbc	r0, r8
      c8:	00 50       	subi	r16, 0x00	; 0
      ca:	30 00       	.word	0x0030	; ????
      cc:	00 08       	sbc	r0, r0
      ce:	08 08       	sbc	r0, r8
      d0:	08 08       	sbc	r0, r8
      d2:	00 60       	ori	r16, 0x00	; 0
      d4:	60 00       	.word	0x0060	; ????
      d6:	00 20       	and	r0, r0
      d8:	10 08       	sbc	r1, r0
      da:	04 02       	muls	r16, r20
      dc:	3e 51       	subi	r19, 0x1E	; 30
      de:	49 45       	sbci	r20, 0x59	; 89
      e0:	3e 00       	.word	0x003e	; ????
      e2:	42 7f       	andi	r20, 0xF2	; 242
      e4:	40 00       	.word	0x0040	; ????
      e6:	42 61       	ori	r20, 0x12	; 18
      e8:	51 49       	sbci	r21, 0x91	; 145
      ea:	46 21       	and	r20, r6
      ec:	41 45       	sbci	r20, 0x51	; 81
      ee:	4b 31       	cpi	r20, 0x1B	; 27
      f0:	18 14       	cp	r1, r8
      f2:	12 7f       	andi	r17, 0xF2	; 242
      f4:	10 27       	eor	r17, r16
      f6:	45 45       	sbci	r20, 0x55	; 85
      f8:	45 39       	cpi	r20, 0x95	; 149
      fa:	3c 4a       	sbci	r19, 0xAC	; 172
      fc:	49 49       	sbci	r20, 0x99	; 153
      fe:	30 01       	movw	r6, r0
     100:	71 09       	sbc	r23, r1
     102:	05 03       	mulsu	r16, r21
     104:	36 49       	sbci	r19, 0x96	; 150
     106:	49 49       	sbci	r20, 0x99	; 153
     108:	36 06       	cpc	r3, r22
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	29 1e       	adc	r2, r25
     10e:	00 36       	cpi	r16, 0x60	; 96
     110:	36 00       	.word	0x0036	; ????
     112:	00 00       	nop
     114:	56 36       	cpi	r21, 0x66	; 102
     116:	00 00       	nop
     118:	08 14       	cp	r0, r8
     11a:	22 41       	sbci	r18, 0x12	; 18
     11c:	00 14       	cp	r0, r0
     11e:	14 14       	cp	r1, r4
     120:	14 14       	cp	r1, r4
     122:	00 41       	sbci	r16, 0x10	; 16
     124:	22 14       	cp	r2, r2
     126:	08 02       	muls	r16, r24
     128:	01 51       	subi	r16, 0x11	; 17
     12a:	09 06       	cpc	r0, r25
     12c:	32 49       	sbci	r19, 0x92	; 146
     12e:	79 41       	sbci	r23, 0x19	; 25
     130:	3e 7e       	andi	r19, 0xEE	; 238
     132:	11 11       	cpse	r17, r1
     134:	11 7e       	andi	r17, 0xE1	; 225
     136:	7f 49       	sbci	r23, 0x9F	; 159
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	36 3e       	cpi	r19, 0xE6	; 230
     13c:	41 41       	sbci	r20, 0x11	; 17
     13e:	41 22       	and	r4, r17
     140:	7f 41       	sbci	r23, 0x1F	; 31
     142:	41 22       	and	r4, r17
     144:	1c 7f       	andi	r17, 0xFC	; 252
     146:	49 49       	sbci	r20, 0x99	; 153
     148:	49 41       	sbci	r20, 0x19	; 25
     14a:	7f 09       	sbc	r23, r15
     14c:	09 09       	sbc	r16, r9
     14e:	01 3e       	cpi	r16, 0xE1	; 225
     150:	41 49       	sbci	r20, 0x91	; 145
     152:	49 7a       	andi	r20, 0xA9	; 169
     154:	7f 08       	sbc	r7, r15
     156:	08 08       	sbc	r0, r8
     158:	7f 00       	.word	0x007f	; ????
     15a:	41 7f       	andi	r20, 0xF1	; 241
     15c:	41 00       	.word	0x0041	; ????
     15e:	20 40       	sbci	r18, 0x00	; 0
     160:	41 3f       	cpi	r20, 0xF1	; 241
     162:	01 7f       	andi	r16, 0xF1	; 241
     164:	08 14       	cp	r0, r8
     166:	22 41       	sbci	r18, 0x12	; 18
     168:	7f 40       	sbci	r23, 0x0F	; 15
     16a:	40 40       	sbci	r20, 0x00	; 0
     16c:	40 7f       	andi	r20, 0xF0	; 240
     16e:	02 0c       	add	r0, r2
     170:	02 7f       	andi	r16, 0xF2	; 242
     172:	7f 04       	cpc	r7, r15
     174:	08 10       	cpse	r0, r8
     176:	7f 3e       	cpi	r23, 0xEF	; 239
     178:	41 41       	sbci	r20, 0x11	; 17
     17a:	41 3e       	cpi	r20, 0xE1	; 225
     17c:	7f 09       	sbc	r23, r15
     17e:	09 09       	sbc	r16, r9
     180:	06 3e       	cpi	r16, 0xE6	; 230
     182:	41 51       	subi	r20, 0x11	; 17
     184:	21 5e       	subi	r18, 0xE1	; 225
     186:	7f 09       	sbc	r23, r15
     188:	19 29       	or	r17, r9
     18a:	46 46       	sbci	r20, 0x66	; 102
     18c:	49 49       	sbci	r20, 0x99	; 153
     18e:	49 31       	cpi	r20, 0x19	; 25
     190:	01 01       	movw	r0, r2
     192:	7f 01       	movw	r14, r30
     194:	01 3f       	cpi	r16, 0xF1	; 241
     196:	40 40       	sbci	r20, 0x00	; 0
     198:	40 3f       	cpi	r20, 0xF0	; 240
     19a:	1f 20       	and	r1, r15
     19c:	40 20       	and	r4, r0
     19e:	1f 3f       	cpi	r17, 0xFF	; 255
     1a0:	40 38       	cpi	r20, 0x80	; 128
     1a2:	40 3f       	cpi	r20, 0xF0	; 240
     1a4:	63 14       	cp	r6, r3
     1a6:	08 14       	cp	r0, r8
     1a8:	63 07       	cpc	r22, r19
     1aa:	08 70       	andi	r16, 0x08	; 8
     1ac:	08 07       	cpc	r16, r24
     1ae:	61 51       	subi	r22, 0x11	; 17
     1b0:	49 45       	sbci	r20, 0x59	; 89
     1b2:	43 00       	.word	0x0043	; ????
     1b4:	7f 41       	sbci	r23, 0x1F	; 31
     1b6:	41 00       	.word	0x0041	; ????
     1b8:	02 04       	cpc	r0, r2
     1ba:	08 10       	cpse	r0, r8
     1bc:	20 00       	.word	0x0020	; ????
     1be:	41 41       	sbci	r20, 0x11	; 17
     1c0:	7f 00       	.word	0x007f	; ????
     1c2:	04 02       	muls	r16, r20
     1c4:	01 02       	muls	r16, r17
     1c6:	04 40       	sbci	r16, 0x04	; 4
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	40 40       	sbci	r20, 0x00	; 0
     1cc:	00 01       	movw	r0, r0
     1ce:	02 04       	cpc	r0, r2
     1d0:	00 20       	and	r0, r0
     1d2:	54 54       	subi	r21, 0x44	; 68
     1d4:	54 78       	andi	r21, 0x84	; 132
     1d6:	7f 48       	sbci	r23, 0x8F	; 143
     1d8:	44 44       	sbci	r20, 0x44	; 68
     1da:	38 38       	cpi	r19, 0x88	; 136
     1dc:	44 44       	sbci	r20, 0x44	; 68
     1de:	44 20       	and	r4, r4
     1e0:	38 44       	sbci	r19, 0x48	; 72
     1e2:	44 48       	sbci	r20, 0x84	; 132
     1e4:	7f 38       	cpi	r23, 0x8F	; 143
     1e6:	54 54       	subi	r21, 0x44	; 68
     1e8:	54 18       	sub	r5, r4
     1ea:	08 7e       	andi	r16, 0xE8	; 232
     1ec:	09 01       	movw	r0, r18
     1ee:	02 0c       	add	r0, r2
     1f0:	52 52       	subi	r21, 0x22	; 34
     1f2:	52 3e       	cpi	r21, 0xE2	; 226
     1f4:	7f 08       	sbc	r7, r15
     1f6:	04 04       	cpc	r0, r4
     1f8:	78 00       	.word	0x0078	; ????
     1fa:	44 7d       	andi	r20, 0xD4	; 212
     1fc:	40 00       	.word	0x0040	; ????
     1fe:	20 40       	sbci	r18, 0x00	; 0
     200:	44 3d       	cpi	r20, 0xD4	; 212
     202:	00 7f       	andi	r16, 0xF0	; 240
     204:	10 28       	or	r1, r0
     206:	44 00       	.word	0x0044	; ????
     208:	00 41       	sbci	r16, 0x10	; 16
     20a:	7f 40       	sbci	r23, 0x0F	; 15
     20c:	00 7c       	andi	r16, 0xC0	; 192
     20e:	04 18       	sub	r0, r4
     210:	04 78       	andi	r16, 0x84	; 132
     212:	7c 08       	sbc	r7, r12
     214:	04 04       	cpc	r0, r4
     216:	78 38       	cpi	r23, 0x88	; 136
     218:	44 44       	sbci	r20, 0x44	; 68
     21a:	44 38       	cpi	r20, 0x84	; 132
     21c:	7c 14       	cp	r7, r12
     21e:	14 14       	cp	r1, r4
     220:	08 08       	sbc	r0, r8
     222:	14 14       	cp	r1, r4
     224:	18 7c       	andi	r17, 0xC8	; 200
     226:	7c 08       	sbc	r7, r12
     228:	04 04       	cpc	r0, r4
     22a:	08 48       	sbci	r16, 0x88	; 136
     22c:	54 54       	subi	r21, 0x44	; 68
     22e:	54 20       	and	r5, r4
     230:	04 3f       	cpi	r16, 0xF4	; 244
     232:	44 40       	sbci	r20, 0x04	; 4
     234:	20 3c       	cpi	r18, 0xC0	; 192
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	20 7c       	andi	r18, 0xC0	; 192
     23a:	1c 20       	and	r1, r12
     23c:	40 20       	and	r4, r0
     23e:	1c 3c       	cpi	r17, 0xCC	; 204
     240:	40 30       	cpi	r20, 0x00	; 0
     242:	40 3c       	cpi	r20, 0xC0	; 192
     244:	44 28       	or	r4, r4
     246:	10 28       	or	r1, r0
     248:	44 0c       	add	r4, r4
     24a:	50 50       	subi	r21, 0x00	; 0
     24c:	50 3c       	cpi	r21, 0xC0	; 192
     24e:	44 64       	ori	r20, 0x44	; 68
     250:	54 4c       	sbci	r21, 0xC4	; 196
     252:	44 00       	.word	0x0044	; ????
     254:	08 36       	cpi	r16, 0x68	; 104
     256:	41 00       	.word	0x0041	; ????
     258:	00 00       	nop
     25a:	7f 00       	.word	0x007f	; ????
     25c:	00 00       	nop
     25e:	41 36       	cpi	r20, 0x61	; 97
     260:	08 00       	.word	0x0008	; ????
     262:	10 08       	sbc	r1, r0
     264:	08 10       	cpse	r0, r8
     266:	08 78       	andi	r16, 0x88	; 136
     268:	46 41       	sbci	r20, 0x16	; 22
     26a:	46 78       	andi	r20, 0x86	; 134

0000026c <tetriminos>:
     26c:	00 66 00 66 00 66 00 66 00 f0 44 44 00 f0 44 44     .f.f.f.f..DD..DD
     27c:	00 6c 40 8c 00 6c 40 8c 00 c6 80 4c 00 c6 80 4c     .l@..l@....L...L
     28c:	00 4e 80 8c 00 e4 40 4c 00 2e 40 c4 00 e8 c0 88     .N....@L..@.....
     29c:	00 8e c0 44 00 e2 80 c8                             ...D....

000002a4 <__ctors_end>:
     2a4:	11 24       	eor	r1, r1
     2a6:	1f be       	out	0x3f, r1	; 63
     2a8:	cf ef       	ldi	r28, 0xFF	; 255
     2aa:	d0 e1       	ldi	r29, 0x10	; 16
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	cd bf       	out	0x3d, r28	; 61

000002b0 <__do_copy_data>:
     2b0:	17 e0       	ldi	r17, 0x07	; 7
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	b1 e0       	ldi	r27, 0x01	; 1
     2b6:	ea e8       	ldi	r30, 0x8A	; 138
     2b8:	fd e4       	ldi	r31, 0x4D	; 77
     2ba:	00 e0       	ldi	r16, 0x00	; 0
     2bc:	0b bf       	out	0x3b, r16	; 59
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x14>
     2c0:	07 90       	elpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	aa 31       	cpi	r26, 0x1A	; 26
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0x10>

000002ca <__do_clear_bss>:
     2ca:	28 e0       	ldi	r18, 0x08	; 8
     2cc:	aa e1       	ldi	r26, 0x1A	; 26
     2ce:	b7 e0       	ldi	r27, 0x07	; 7
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	af 3b       	cpi	r26, 0xBF	; 191
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <main>
     2de:	0c 94 c3 26 	jmp	0x4d86	; 0x4d86 <_exit>

000002e2 <__bad_interrupt>:
     2e2:	8e ce       	rjmp	.-740    	; 0x0 <__vectors>

000002e4 <get_ch_data>:
    {0x10, 0x08, 0x08, 0x10, 0x08}, // 7e ~
    {0x78, 0x46, 0x41, 0x46, 0x78}, // 7f 
};

void get_ch_data(char ch, uint8_t *buffer)
{
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	28 97       	sbiw	r28, 0x08	; 8
     2ee:	0f b6       	in	r0, 0x3f	; 63
     2f0:	f8 94       	cli
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	cd bf       	out	0x3d, r28	; 61
     2f8:	8e 83       	std	Y+6, r24	; 0x06
     2fa:	78 87       	std	Y+8, r23	; 0x08
     2fc:	6f 83       	std	Y+7, r22	; 0x07
    int     i;

    for (i=0; i<5; i++)
     2fe:	1a 82       	std	Y+2, r1	; 0x02
     300:	19 82       	std	Y+1, r1	; 0x01
     302:	29 c0       	rjmp	.+82     	; 0x356 <get_ch_data+0x72>
    {
        *buffer++ = pgm_read_byte(&ASCII[ch - ' '][i]);
     304:	2f 81       	ldd	r18, Y+7	; 0x07
     306:	38 85       	ldd	r19, Y+8	; 0x08
     308:	c9 01       	movw	r24, r18
     30a:	01 96       	adiw	r24, 0x01	; 1
     30c:	98 87       	std	Y+8, r25	; 0x08
     30e:	8f 83       	std	Y+7, r24	; 0x07
     310:	8e 81       	ldd	r24, Y+6	; 0x06
     312:	08 2e       	mov	r0, r24
     314:	00 0c       	add	r0, r0
     316:	99 0b       	sbc	r25, r25
     318:	ac 01       	movw	r20, r24
     31a:	40 52       	subi	r20, 0x20	; 32
     31c:	51 09       	sbc	r21, r1
     31e:	ca 01       	movw	r24, r20
     320:	88 0f       	add	r24, r24
     322:	99 1f       	adc	r25, r25
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	84 0f       	add	r24, r20
     32a:	95 1f       	adc	r25, r21
     32c:	49 81       	ldd	r20, Y+1	; 0x01
     32e:	5a 81       	ldd	r21, Y+2	; 0x02
     330:	84 0f       	add	r24, r20
     332:	95 1f       	adc	r25, r21
     334:	84 57       	subi	r24, 0x74	; 116
     336:	9f 4f       	sbci	r25, 0xFF	; 255
     338:	9c 83       	std	Y+4, r25	; 0x04
     33a:	8b 83       	std	Y+3, r24	; 0x03
     33c:	8b 81       	ldd	r24, Y+3	; 0x03
     33e:	9c 81       	ldd	r25, Y+4	; 0x04
     340:	fc 01       	movw	r30, r24
     342:	84 91       	lpm	r24, Z
     344:	8d 83       	std	Y+5, r24	; 0x05
     346:	8d 81       	ldd	r24, Y+5	; 0x05
     348:	f9 01       	movw	r30, r18
     34a:	80 83       	st	Z, r24

void get_ch_data(char ch, uint8_t *buffer)
{
    int     i;

    for (i=0; i<5; i++)
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	9a 81       	ldd	r25, Y+2	; 0x02
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	9a 83       	std	Y+2, r25	; 0x02
     354:	89 83       	std	Y+1, r24	; 0x01
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	9a 81       	ldd	r25, Y+2	; 0x02
     35a:	05 97       	sbiw	r24, 0x05	; 5
     35c:	9c f2       	brlt	.-90     	; 0x304 <get_ch_data+0x20>
    {
        *buffer++ = pgm_read_byte(&ASCII[ch - ' '][i]);
    }
    *buffer = 0;
     35e:	8f 81       	ldd	r24, Y+7	; 0x07
     360:	98 85       	ldd	r25, Y+8	; 0x08
     362:	fc 01       	movw	r30, r24
     364:	10 82       	st	Z, r1
}
     366:	00 00       	nop
     368:	28 96       	adiw	r28, 0x08	; 8
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	de bf       	out	0x3e, r29	; 62
     370:	0f be       	out	0x3f, r0	; 63
     372:	cd bf       	out	0x3d, r28	; 61
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <twiStart>:
        return -1;

    twi_stop();

    return 0;
}
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	80 e7       	ldi	r24, 0x70	; 112
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	24 ea       	ldi	r18, 0xA4	; 164
     388:	fc 01       	movw	r30, r24
     38a:	24 83       	std	Z+4, r18	; 0x04
     38c:	00 00       	nop
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <twiStop>:
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	80 e7       	ldi	r24, 0x70	; 112
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	24 e9       	ldi	r18, 0x94	; 148
     3a2:	fc 01       	movw	r30, r24
     3a4:	24 83       	std	Z+4, r18	; 0x04
     3a6:	00 00       	nop
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <twiWaitAck>:
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	00 00       	nop
     3b8:	80 e7       	ldi	r24, 0x70	; 112
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	fc 01       	movw	r30, r24
     3be:	84 81       	ldd	r24, Z+4	; 0x04
     3c0:	88 23       	and	r24, r24
     3c2:	d4 f7       	brge	.-12     	; 0x3b8 <twiWaitAck+0xa>
     3c4:	00 00       	nop
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <twiChkAck>:
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	80 e7       	ldi	r24, 0x70	; 112
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	fc 01       	movw	r30, r24
     3da:	81 81       	ldd	r24, Z+1	; 0x01
     3dc:	88 7f       	andi	r24, 0xF8	; 248
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <twiSendByte>:
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	1f 92       	push	r1
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	89 83       	std	Y+1, r24	; 0x01
     3f0:	80 e7       	ldi	r24, 0x70	; 112
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	29 81       	ldd	r18, Y+1	; 0x01
     3f6:	fc 01       	movw	r30, r24
     3f8:	23 83       	std	Z+3, r18	; 0x03
     3fa:	80 e7       	ldi	r24, 0x70	; 112
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	24 e8       	ldi	r18, 0x84	; 132
     400:	fc 01       	movw	r30, r24
     402:	24 83       	std	Z+4, r18	; 0x04
     404:	00 00       	nop
     406:	0f 90       	pop	r0
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <twi_start>:
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	b1 df       	rcall	.-158    	; 0x37a <twiStart>
     418:	ca df       	rcall	.-108    	; 0x3ae <twiWaitAck>
     41a:	d8 df       	rcall	.-80     	; 0x3cc <twiChkAck>
     41c:	88 30       	cpi	r24, 0x08	; 8
     41e:	19 f0       	breq	.+6      	; 0x426 <twi_start+0x18>
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	9f ef       	ldi	r25, 0xFF	; 255
     424:	02 c0       	rjmp	.+4      	; 0x42a <twi_start+0x1c>
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <twi_stop>:
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	ad df       	rcall	.-166    	; 0x394 <twiStop>
     43a:	00 00       	nop
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <twi_send_dev_addr>:
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	00 d0       	rcall	.+0      	; 0x448 <twi_send_dev_addr+0x6>
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
     44c:	8a 83       	std	Y+2, r24	; 0x02
     44e:	8a 81       	ldd	r24, Y+2	; 0x02
     450:	88 2f       	mov	r24, r24
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	81 70       	andi	r24, 0x01	; 1
     456:	99 27       	eor	r25, r25
     458:	89 2b       	or	r24, r25
     45a:	11 f0       	breq	.+4      	; 0x460 <twi_send_dev_addr+0x1e>
     45c:	80 e4       	ldi	r24, 0x40	; 64
     45e:	01 c0       	rjmp	.+2      	; 0x462 <twi_send_dev_addr+0x20>
     460:	88 e1       	ldi	r24, 0x18	; 24
     462:	89 83       	std	Y+1, r24	; 0x01
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	be df       	rcall	.-132    	; 0x3e4 <twiSendByte>
     468:	a2 df       	rcall	.-188    	; 0x3ae <twiWaitAck>
     46a:	b0 df       	rcall	.-160    	; 0x3cc <twiChkAck>
     46c:	98 2f       	mov	r25, r24
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	98 17       	cp	r25, r24
     472:	19 f0       	breq	.+6      	; 0x47a <twi_send_dev_addr+0x38>
     474:	8f ef       	ldi	r24, 0xFF	; 255
     476:	9f ef       	ldi	r25, 0xFF	; 255
     478:	02 c0       	rjmp	.+4      	; 0x47e <twi_send_dev_addr+0x3c>
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <twi_send_data>:
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	1f 92       	push	r1
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	89 83       	std	Y+1, r24	; 0x01
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	a6 df       	rcall	.-180    	; 0x3e4 <twiSendByte>
     498:	8a df       	rcall	.-236    	; 0x3ae <twiWaitAck>
     49a:	98 df       	rcall	.-208    	; 0x3cc <twiChkAck>
     49c:	88 32       	cpi	r24, 0x28	; 40
     49e:	19 f0       	breq	.+6      	; 0x4a6 <twi_send_data+0x1e>
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	9f ef       	ldi	r25, 0xFF	; 255
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <twi_send_data+0x22>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0f 90       	pop	r0
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <twi_write>:
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
     4ba:	28 97       	sbiw	r28, 0x08	; 8
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	cd bf       	out	0x3d, r28	; 61
     4c6:	8b 83       	std	Y+3, r24	; 0x03
     4c8:	6c 83       	std	Y+4, r22	; 0x04
     4ca:	5e 83       	std	Y+6, r21	; 0x06
     4cc:	4d 83       	std	Y+5, r20	; 0x05
     4ce:	38 87       	std	Y+8, r19	; 0x08
     4d0:	2f 83       	std	Y+7, r18	; 0x07
     4d2:	9d df       	rcall	.-198    	; 0x40e <twi_start>
     4d4:	89 2b       	or	r24, r25
     4d6:	19 f0       	breq	.+6      	; 0x4de <twi_write+0x2c>
     4d8:	8f ef       	ldi	r24, 0xFF	; 255
     4da:	9f ef       	ldi	r25, 0xFF	; 255
     4dc:	30 c0       	rjmp	.+96     	; 0x53e <twi_write+0x8c>
     4de:	8b 81       	ldd	r24, Y+3	; 0x03
     4e0:	88 0f       	add	r24, r24
     4e2:	af df       	rcall	.-162    	; 0x442 <twi_send_dev_addr>
     4e4:	89 2b       	or	r24, r25
     4e6:	19 f0       	breq	.+6      	; 0x4ee <twi_write+0x3c>
     4e8:	8f ef       	ldi	r24, 0xFF	; 255
     4ea:	9f ef       	ldi	r25, 0xFF	; 255
     4ec:	28 c0       	rjmp	.+80     	; 0x53e <twi_write+0x8c>
     4ee:	8c 81       	ldd	r24, Y+4	; 0x04
     4f0:	cb df       	rcall	.-106    	; 0x488 <twi_send_data>
     4f2:	89 2b       	or	r24, r25
     4f4:	19 f0       	breq	.+6      	; 0x4fc <twi_write+0x4a>
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	9f ef       	ldi	r25, 0xFF	; 255
     4fa:	21 c0       	rjmp	.+66     	; 0x53e <twi_write+0x8c>
     4fc:	1a 82       	std	Y+2, r1	; 0x02
     4fe:	19 82       	std	Y+1, r1	; 0x01
     500:	14 c0       	rjmp	.+40     	; 0x52a <twi_write+0x78>
     502:	8d 81       	ldd	r24, Y+5	; 0x05
     504:	9e 81       	ldd	r25, Y+6	; 0x06
     506:	9c 01       	movw	r18, r24
     508:	2f 5f       	subi	r18, 0xFF	; 255
     50a:	3f 4f       	sbci	r19, 0xFF	; 255
     50c:	3e 83       	std	Y+6, r19	; 0x06
     50e:	2d 83       	std	Y+5, r18	; 0x05
     510:	fc 01       	movw	r30, r24
     512:	80 81       	ld	r24, Z
     514:	b9 df       	rcall	.-142    	; 0x488 <twi_send_data>
     516:	89 2b       	or	r24, r25
     518:	19 f0       	breq	.+6      	; 0x520 <twi_write+0x6e>
     51a:	8f ef       	ldi	r24, 0xFF	; 255
     51c:	9f ef       	ldi	r25, 0xFF	; 255
     51e:	0f c0       	rjmp	.+30     	; 0x53e <twi_write+0x8c>
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	9a 81       	ldd	r25, Y+2	; 0x02
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	9a 83       	std	Y+2, r25	; 0x02
     528:	89 83       	std	Y+1, r24	; 0x01
     52a:	29 81       	ldd	r18, Y+1	; 0x01
     52c:	3a 81       	ldd	r19, Y+2	; 0x02
     52e:	8f 81       	ldd	r24, Y+7	; 0x07
     530:	98 85       	ldd	r25, Y+8	; 0x08
     532:	28 17       	cp	r18, r24
     534:	39 07       	cpc	r19, r25
     536:	2c f3       	brlt	.-54     	; 0x502 <twi_write+0x50>
     538:	7b df       	rcall	.-266    	; 0x430 <twi_stop>
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	28 96       	adiw	r28, 0x08	; 8
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <twi_init>:

void twi_init(void)
{
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
    twi->twbr = 5;
     558:	80 e7       	ldi	r24, 0x70	; 112
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	25 e0       	ldi	r18, 0x05	; 5
     55e:	fc 01       	movw	r30, r24
     560:	20 83       	st	Z, r18
    twi->twsr = 0;
     562:	80 e7       	ldi	r24, 0x70	; 112
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	fc 01       	movw	r30, r24
     568:	11 82       	std	Z+1, r1	; 0x01
}
     56a:	00 00       	nop
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	08 95       	ret

00000572 <UART_Init>:
static void ssd1306_output_scan_direction2(bool enable)
{
	uint8_t cmd = 0xc0 | enable;

	ssd1306_cmd(&cmd, 1);
}
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	8a e2       	ldi	r24, 0x2A	; 42
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	28 e1       	ldi	r18, 0x18	; 24
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
     584:	85 e9       	ldi	r24, 0x95	; 149
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	26 e0       	ldi	r18, 0x06	; 6
     58a:	fc 01       	movw	r30, r24
     58c:	20 83       	st	Z, r18
     58e:	89 e2       	ldi	r24, 0x29	; 41
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	27 e6       	ldi	r18, 0x67	; 103
     594:	fc 01       	movw	r30, r24
     596:	20 83       	st	Z, r18
     598:	00 00       	nop
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <UART0_Putch>:
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	1f 92       	push	r1
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	89 83       	std	Y+1, r24	; 0x01
     5ac:	00 00       	nop
     5ae:	8b e2       	ldi	r24, 0x2B	; 43
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	fc 01       	movw	r30, r24
     5b4:	80 81       	ld	r24, Z
     5b6:	88 2f       	mov	r24, r24
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	80 72       	andi	r24, 0x20	; 32
     5bc:	99 27       	eor	r25, r25
     5be:	89 2b       	or	r24, r25
     5c0:	b1 f3       	breq	.-20     	; 0x5ae <UART0_Putch+0xe>
     5c2:	8c e2       	ldi	r24, 0x2C	; 44
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	29 81       	ldd	r18, Y+1	; 0x01
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18
     5cc:	00 00       	nop
     5ce:	0f 90       	pop	r0
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <SendCommand>:
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	67 97       	sbiw	r28, 0x17	; 23
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	de bf       	out	0x3e, r29	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	cd bf       	out	0x3d, r28	; 61
     5ea:	8f 8b       	std	Y+23, r24	; 0x17
     5ec:	1a 82       	std	Y+2, r1	; 0x02
     5ee:	19 82       	std	Y+1, r1	; 0x01
     5f0:	8e e7       	ldi	r24, 0x7E	; 126
     5f2:	d6 df       	rcall	.-84     	; 0x5a0 <UART0_Putch>
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	d4 df       	rcall	.-88     	; 0x5a0 <UART0_Putch>
     5f8:	86 e0       	ldi	r24, 0x06	; 6
     5fa:	d2 df       	rcall	.-92     	; 0x5a0 <UART0_Putch>
     5fc:	8f 89       	ldd	r24, Y+23	; 0x17
     5fe:	d0 df       	rcall	.-96     	; 0x5a0 <UART0_Putch>
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	ce df       	rcall	.-100    	; 0x5a0 <UART0_Putch>
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	cc df       	rcall	.-104    	; 0x5a0 <UART0_Putch>
     608:	8f 89       	ldd	r24, Y+23	; 0x17
     60a:	89 30       	cpi	r24, 0x09	; 9
     60c:	71 f0       	breq	.+28     	; 0x62a <SendCommand+0x54>
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	c7 df       	rcall	.-114    	; 0x5a0 <UART0_Putch>
     612:	8f 89       	ldd	r24, Y+23	; 0x17
     614:	88 2f       	mov	r24, r24
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	2b ef       	ldi	r18, 0xFB	; 251
     61a:	3e ef       	ldi	r19, 0xFE	; 254
     61c:	a9 01       	movw	r20, r18
     61e:	48 1b       	sub	r20, r24
     620:	59 0b       	sbc	r21, r25
     622:	ca 01       	movw	r24, r20
     624:	9a 83       	std	Y+2, r25	; 0x02
     626:	89 83       	std	Y+1, r24	; 0x01
     628:	0d c0       	rjmp	.+26     	; 0x644 <SendCommand+0x6e>
     62a:	82 e0       	ldi	r24, 0x02	; 2
     62c:	b9 df       	rcall	.-142    	; 0x5a0 <UART0_Putch>
     62e:	8f 89       	ldd	r24, Y+23	; 0x17
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	29 ef       	ldi	r18, 0xF9	; 249
     636:	3e ef       	ldi	r19, 0xFE	; 254
     638:	a9 01       	movw	r20, r18
     63a:	48 1b       	sub	r20, r24
     63c:	59 0b       	sbc	r21, r25
     63e:	ca 01       	movw	r24, r20
     640:	9a 83       	std	Y+2, r25	; 0x02
     642:	89 83       	std	Y+1, r24	; 0x01
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	9a 81       	ldd	r25, Y+2	; 0x02
     648:	89 2f       	mov	r24, r25
     64a:	99 27       	eor	r25, r25
     64c:	a9 df       	rcall	.-174    	; 0x5a0 <UART0_Putch>
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	a7 df       	rcall	.-178    	; 0x5a0 <UART0_Putch>
     652:	8f ee       	ldi	r24, 0xEF	; 239
     654:	a5 df       	rcall	.-182    	; 0x5a0 <UART0_Putch>
     656:	00 00       	nop
     658:	67 96       	adiw	r28, 0x17	; 23
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <SendCommand01>:
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	69 97       	sbiw	r28, 0x19	; 25
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
     67e:	8f 8b       	std	Y+23, r24	; 0x17
     680:	68 8f       	std	Y+24, r22	; 0x18
     682:	49 8f       	std	Y+25, r20	; 0x19
     684:	1a 82       	std	Y+2, r1	; 0x02
     686:	19 82       	std	Y+1, r1	; 0x01
     688:	8e e7       	ldi	r24, 0x7E	; 126
     68a:	8a df       	rcall	.-236    	; 0x5a0 <UART0_Putch>
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	88 df       	rcall	.-240    	; 0x5a0 <UART0_Putch>
     690:	86 e0       	ldi	r24, 0x06	; 6
     692:	86 df       	rcall	.-244    	; 0x5a0 <UART0_Putch>
     694:	8f 89       	ldd	r24, Y+23	; 0x17
     696:	84 df       	rcall	.-248    	; 0x5a0 <UART0_Putch>
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	82 df       	rcall	.-252    	; 0x5a0 <UART0_Putch>
     69c:	88 8d       	ldd	r24, Y+24	; 0x18
     69e:	80 df       	rcall	.-256    	; 0x5a0 <UART0_Putch>
     6a0:	89 8d       	ldd	r24, Y+25	; 0x19
     6a2:	7e df       	rcall	.-260    	; 0x5a0 <UART0_Putch>
     6a4:	8f 89       	ldd	r24, Y+23	; 0x17
     6a6:	88 2f       	mov	r24, r24
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	9c 01       	movw	r18, r24
     6ac:	2b 5f       	subi	r18, 0xFB	; 251
     6ae:	3e 4f       	sbci	r19, 0xFE	; 254
     6b0:	88 8d       	ldd	r24, Y+24	; 0x18
     6b2:	88 2f       	mov	r24, r24
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	28 0f       	add	r18, r24
     6b8:	39 1f       	adc	r19, r25
     6ba:	89 8d       	ldd	r24, Y+25	; 0x19
     6bc:	88 2f       	mov	r24, r24
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	82 0f       	add	r24, r18
     6c2:	93 1f       	adc	r25, r19
     6c4:	91 95       	neg	r25
     6c6:	81 95       	neg	r24
     6c8:	91 09       	sbc	r25, r1
     6ca:	9a 83       	std	Y+2, r25	; 0x02
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	9a 81       	ldd	r25, Y+2	; 0x02
     6d2:	89 2f       	mov	r24, r25
     6d4:	99 27       	eor	r25, r25
     6d6:	64 df       	rcall	.-312    	; 0x5a0 <UART0_Putch>
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	62 df       	rcall	.-316    	; 0x5a0 <UART0_Putch>
     6dc:	8f ee       	ldi	r24, 0xEF	; 239
     6de:	60 df       	rcall	.-320    	; 0x5a0 <UART0_Putch>
     6e0:	00 00       	nop
     6e2:	69 96       	adiw	r28, 0x19	; 25
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <ssd1306_cmd>:
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <ssd1306_cmd+0x6>
     6fa:	1f 92       	push	r1
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	9a 83       	std	Y+2, r25	; 0x02
     702:	89 83       	std	Y+1, r24	; 0x01
     704:	6b 83       	std	Y+3, r22	; 0x03
     706:	8b 81       	ldd	r24, Y+3	; 0x03
     708:	28 2f       	mov	r18, r24
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	9a 81       	ldd	r25, Y+2	; 0x02
     710:	ac 01       	movw	r20, r24
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	8c e3       	ldi	r24, 0x3C	; 60
     716:	cd de       	rcall	.-614    	; 0x4b2 <twi_write>
     718:	00 00       	nop
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <ssd1306_data>:
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	00 d0       	rcall	.+0      	; 0x72c <ssd1306_data+0x6>
     72c:	00 d0       	rcall	.+0      	; 0x72e <ssd1306_data+0x8>
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	9a 83       	std	Y+2, r25	; 0x02
     734:	89 83       	std	Y+1, r24	; 0x01
     736:	7c 83       	std	Y+4, r23	; 0x04
     738:	6b 83       	std	Y+3, r22	; 0x03
     73a:	2b 81       	ldd	r18, Y+3	; 0x03
     73c:	3c 81       	ldd	r19, Y+4	; 0x04
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	9a 81       	ldd	r25, Y+2	; 0x02
     742:	ac 01       	movw	r20, r24
     744:	60 e4       	ldi	r22, 0x40	; 64
     746:	8c e3       	ldi	r24, 0x3C	; 60
     748:	b4 de       	rcall	.-664    	; 0x4b2 <twi_write>
     74a:	00 00       	nop
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <ssd1306_reset>:
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	00 00       	nop
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <ssd1306_chargepump_enable>:
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	00 d0       	rcall	.+0      	; 0x770 <ssd1306_chargepump_enable+0x6>
     770:	00 d0       	rcall	.+0      	; 0x772 <ssd1306_chargepump_enable+0x8>
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	9c 83       	std	Y+4, r25	; 0x04
     778:	8b 83       	std	Y+3, r24	; 0x03
     77a:	8d e8       	ldi	r24, 0x8D	; 141
     77c:	89 83       	std	Y+1, r24	; 0x01
     77e:	8b 81       	ldd	r24, Y+3	; 0x03
     780:	9c 81       	ldd	r25, Y+4	; 0x04
     782:	89 2b       	or	r24, r25
     784:	11 f0       	breq	.+4      	; 0x78a <ssd1306_chargepump_enable+0x20>
     786:	84 e1       	ldi	r24, 0x14	; 20
     788:	01 c0       	rjmp	.+2      	; 0x78c <ssd1306_chargepump_enable+0x22>
     78a:	80 e1       	ldi	r24, 0x10	; 16
     78c:	8a 83       	std	Y+2, r24	; 0x02
     78e:	62 e0       	ldi	r22, 0x02	; 2
     790:	ce 01       	movw	r24, r28
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	af df       	rcall	.-162    	; 0x6f4 <ssd1306_cmd>
     796:	00 00       	nop
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <ssd1306_entire_on>:
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <ssd1306_entire_on+0x6>
     7ac:	1f 92       	push	r1
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	9b 83       	std	Y+3, r25	; 0x03
     7b4:	8a 83       	std	Y+2, r24	; 0x02
     7b6:	8a 81       	ldd	r24, Y+2	; 0x02
     7b8:	84 6a       	ori	r24, 0xA4	; 164
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	ce 01       	movw	r24, r28
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	98 df       	rcall	.-208    	; 0x6f4 <ssd1306_cmd>
     7c4:	00 00       	nop
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <ssd1306_display_on>:
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <ssd1306_display_on+0x6>
     7d8:	1f 92       	push	r1
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	9b 83       	std	Y+3, r25	; 0x03
     7e0:	8a 83       	std	Y+2, r24	; 0x02
     7e2:	8a 81       	ldd	r24, Y+2	; 0x02
     7e4:	8e 6a       	ori	r24, 0xAE	; 174
     7e6:	89 83       	std	Y+1, r24	; 0x01
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	ce 01       	movw	r24, r28
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	82 df       	rcall	.-252    	; 0x6f4 <ssd1306_cmd>
     7f0:	00 00       	nop
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <ssd1306_set_addr_mode>:
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	00 d0       	rcall	.+0      	; 0x804 <ssd1306_set_addr_mode+0x6>
     804:	1f 92       	push	r1
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	8b 83       	std	Y+3, r24	; 0x03
     80c:	80 e2       	ldi	r24, 0x20	; 32
     80e:	89 83       	std	Y+1, r24	; 0x01
     810:	8b 81       	ldd	r24, Y+3	; 0x03
     812:	8a 83       	std	Y+2, r24	; 0x02
     814:	62 e0       	ldi	r22, 0x02	; 2
     816:	ce 01       	movw	r24, r28
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	6c df       	rcall	.-296    	; 0x6f4 <ssd1306_cmd>
     81c:	00 00       	nop
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <ssd1306_set_page_start>:
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	00 d0       	rcall	.+0      	; 0x830 <ssd1306_set_page_start+0x6>
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	8a 83       	std	Y+2, r24	; 0x02
     836:	8a 81       	ldd	r24, Y+2	; 0x02
     838:	80 6b       	ori	r24, 0xB0	; 176
     83a:	89 83       	std	Y+1, r24	; 0x01
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	58 df       	rcall	.-336    	; 0x6f4 <ssd1306_cmd>
     844:	00 00       	nop
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <ssd1306_set_column_addr>:
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <ssd1306_set_column_addr+0x6>
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	8a 83       	std	Y+2, r24	; 0x02
     85c:	8a 81       	ldd	r24, Y+2	; 0x02
     85e:	8f 70       	andi	r24, 0x0F	; 15
     860:	89 83       	std	Y+1, r24	; 0x01
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	ce 01       	movw	r24, r28
     866:	01 96       	adiw	r24, 0x01	; 1
     868:	45 df       	rcall	.-374    	; 0x6f4 <ssd1306_cmd>
     86a:	8a 81       	ldd	r24, Y+2	; 0x02
     86c:	82 95       	swap	r24
     86e:	8f 70       	andi	r24, 0x0F	; 15
     870:	80 61       	ori	r24, 0x10	; 16
     872:	89 83       	std	Y+1, r24	; 0x01
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	ce 01       	movw	r24, r28
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	3c df       	rcall	.-392    	; 0x6f4 <ssd1306_cmd>
     87c:	00 00       	nop
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	08 95       	ret

00000888 <ssd1306_reverse>:
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	00 d0       	rcall	.+0      	; 0x88e <ssd1306_reverse+0x6>
     88e:	1f 92       	push	r1
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	9b 83       	std	Y+3, r25	; 0x03
     896:	8a 83       	std	Y+2, r24	; 0x02
     898:	8a 81       	ldd	r24, Y+2	; 0x02
     89a:	80 6a       	ori	r24, 0xA0	; 160
     89c:	89 83       	std	Y+1, r24	; 0x01
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	ce 01       	movw	r24, r28
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	27 df       	rcall	.-434    	; 0x6f4 <ssd1306_cmd>
     8a6:	00 00       	nop
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <ssd1306_normal_display>:
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	00 d0       	rcall	.+0      	; 0x8ba <ssd1306_normal_display+0x6>
     8ba:	1f 92       	push	r1
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	9b 83       	std	Y+3, r25	; 0x03
     8c2:	8a 83       	std	Y+2, r24	; 0x02
     8c4:	8a 81       	ldd	r24, Y+2	; 0x02
     8c6:	86 6a       	ori	r24, 0xA6	; 166
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	11 df       	rcall	.-478    	; 0x6f4 <ssd1306_cmd>
     8d2:	00 00       	nop
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <ssd1306_output_scan_direction>:
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <ssd1306_output_scan_direction+0x6>
     8e6:	1f 92       	push	r1
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	9b 83       	std	Y+3, r25	; 0x03
     8ee:	8a 83       	std	Y+2, r24	; 0x02
     8f0:	8a 81       	ldd	r24, Y+2	; 0x02
     8f2:	88 6c       	ori	r24, 0xC8	; 200
     8f4:	89 83       	std	Y+1, r24	; 0x01
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	ce 01       	movw	r24, r28
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	fb de       	rcall	.-522    	; 0x6f4 <ssd1306_cmd>
     8fe:	00 00       	nop
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <ssd1306_init>:


void ssd1306_init(void)
{
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	2e 97       	sbiw	r28, 0x0e	; 14
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e8       	ldi	r26, 0x80	; 128
     926:	bf e3       	ldi	r27, 0x3F	; 63
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	9a 83       	std	Y+2, r25	; 0x02
     92c:	ab 83       	std	Y+3, r26	; 0x03
     92e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	4a e7       	ldi	r20, 0x7A	; 122
     936:	55 e4       	ldi	r21, 0x45	; 69
     938:	69 81       	ldd	r22, Y+1	; 0x01
     93a:	7a 81       	ldd	r23, Y+2	; 0x02
     93c:	8b 81       	ldd	r24, Y+3	; 0x03
     93e:	9c 81       	ldd	r25, Y+4	; 0x04
     940:	0e 94 8a 22 	call	0x4514	; 0x4514 <__mulsf3>
     944:	dc 01       	movw	r26, r24
     946:	cb 01       	movw	r24, r22
     948:	8d 83       	std	Y+5, r24	; 0x05
     94a:	9e 83       	std	Y+6, r25	; 0x06
     94c:	af 83       	std	Y+7, r26	; 0x07
     94e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e8       	ldi	r20, 0x80	; 128
     956:	5f e3       	ldi	r21, 0x3F	; 63
     958:	6d 81       	ldd	r22, Y+5	; 0x05
     95a:	7e 81       	ldd	r23, Y+6	; 0x06
     95c:	8f 81       	ldd	r24, Y+7	; 0x07
     95e:	98 85       	ldd	r25, Y+8	; 0x08
     960:	0e 94 09 22 	call	0x4412	; 0x4412 <__cmpsf2>
     964:	88 23       	and	r24, r24
     966:	2c f4       	brge	.+10     	; 0x972 <ssd1306_init+0x66>
		__ticks = 1;
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	9a 87       	std	Y+10, r25	; 0x0a
     96e:	89 87       	std	Y+9, r24	; 0x09
     970:	3f c0       	rjmp	.+126    	; 0x9f0 <ssd1306_init+0xe4>
	else if (__tmp > 65535)
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	3f ef       	ldi	r19, 0xFF	; 255
     976:	4f e7       	ldi	r20, 0x7F	; 127
     978:	57 e4       	ldi	r21, 0x47	; 71
     97a:	6d 81       	ldd	r22, Y+5	; 0x05
     97c:	7e 81       	ldd	r23, Y+6	; 0x06
     97e:	8f 81       	ldd	r24, Y+7	; 0x07
     980:	98 85       	ldd	r25, Y+8	; 0x08
     982:	0e 94 86 22 	call	0x450c	; 0x450c <__gesf2>
     986:	18 16       	cp	r1, r24
     988:	4c f5       	brge	.+82     	; 0x9dc <ssd1306_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e2       	ldi	r20, 0x20	; 32
     990:	51 e4       	ldi	r21, 0x41	; 65
     992:	69 81       	ldd	r22, Y+1	; 0x01
     994:	7a 81       	ldd	r23, Y+2	; 0x02
     996:	8b 81       	ldd	r24, Y+3	; 0x03
     998:	9c 81       	ldd	r25, Y+4	; 0x04
     99a:	0e 94 8a 22 	call	0x4514	; 0x4514 <__mulsf3>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	bc 01       	movw	r22, r24
     9a4:	cd 01       	movw	r24, r26
     9a6:	0e 94 0d 22 	call	0x441a	; 0x441a <__fixunssfsi>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	9a 87       	std	Y+10, r25	; 0x0a
     9b0:	89 87       	std	Y+9, r24	; 0x09
     9b2:	0f c0       	rjmp	.+30     	; 0x9d2 <ssd1306_init+0xc6>
     9b4:	80 e9       	ldi	r24, 0x90	; 144
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	9c 87       	std	Y+12, r25	; 0x0c
     9ba:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9bc:	8b 85       	ldd	r24, Y+11	; 0x0b
     9be:	9c 85       	ldd	r25, Y+12	; 0x0c
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <ssd1306_init+0xb4>
     9c4:	9c 87       	std	Y+12, r25	; 0x0c
     9c6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c8:	89 85       	ldd	r24, Y+9	; 0x09
     9ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	9a 87       	std	Y+10, r25	; 0x0a
     9d0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9d2:	89 85       	ldd	r24, Y+9	; 0x09
     9d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     9d6:	89 2b       	or	r24, r25
     9d8:	69 f7       	brne	.-38     	; 0x9b4 <ssd1306_init+0xa8>
     9da:	14 c0       	rjmp	.+40     	; 0xa04 <ssd1306_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9dc:	6d 81       	ldd	r22, Y+5	; 0x05
     9de:	7e 81       	ldd	r23, Y+6	; 0x06
     9e0:	8f 81       	ldd	r24, Y+7	; 0x07
     9e2:	98 85       	ldd	r25, Y+8	; 0x08
     9e4:	0e 94 0d 22 	call	0x441a	; 0x441a <__fixunssfsi>
     9e8:	dc 01       	movw	r26, r24
     9ea:	cb 01       	movw	r24, r22
     9ec:	9a 87       	std	Y+10, r25	; 0x0a
     9ee:	89 87       	std	Y+9, r24	; 0x09
     9f0:	89 85       	ldd	r24, Y+9	; 0x09
     9f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     9f4:	9e 87       	std	Y+14, r25	; 0x0e
     9f6:	8d 87       	std	Y+13, r24	; 0x0d
     9f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     9fa:	9e 85       	ldd	r25, Y+14	; 0x0e
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	f1 f7       	brne	.-4      	; 0x9fc <ssd1306_init+0xf0>
     a00:	9e 87       	std	Y+14, r25	; 0x0e
     a02:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);

	ssd1306_reset();
     a04:	aa de       	rcall	.-684    	; 0x75a <ssd1306_reset>

	ssd1306_chargepump_enable(true);
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	af de       	rcall	.-674    	; 0x76a <ssd1306_chargepump_enable>
	ssd1306_entire_on(false);
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	ca de       	rcall	.-620    	; 0x7a6 <ssd1306_entire_on>
	ssd1306_display_on(true);
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	dd de       	rcall	.-582    	; 0x7d2 <ssd1306_display_on>
     a18:	00 00       	nop
}
     a1a:	2e 96       	adiw	r28, 0x0e	; 14
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <clear_screen>:
     a2c:	cf 93       	push	r28
static uint8_t gddram[COL_NUM];



void clear_screen(void)
{
     a2e:	df 93       	push	r29
     a30:	00 d0       	rcall	.+0      	; 0xa32 <clear_screen+0x6>
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
     a36:	1a 82       	std	Y+2, r1	; 0x02
     a38:	0a c0       	rjmp	.+20     	; 0xa4e <clear_screen+0x22>
	gddram[col] = 0;
     a3a:	8a 81       	ldd	r24, Y+2	; 0x02
     a3c:	88 2f       	mov	r24, r24
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	86 5e       	subi	r24, 0xE6	; 230
     a42:	98 4f       	sbci	r25, 0xF8	; 248
     a44:	fc 01       	movw	r30, r24
     a46:	10 82       	st	Z, r1
void clear_screen(void)
{
	uint8_t page;
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
     a48:	8a 81       	ldd	r24, Y+2	; 0x02
     a4a:	8f 5f       	subi	r24, 0xFF	; 255
     a4c:	8a 83       	std	Y+2, r24	; 0x02
     a4e:	8a 81       	ldd	r24, Y+2	; 0x02
     a50:	88 23       	and	r24, r24
     a52:	9c f7       	brge	.-26     	; 0xa3a <clear_screen+0xe>
	gddram[col] = 0;

	for (page=0; page<PAGE_NUM; page++)
     a54:	19 82       	std	Y+1, r1	; 0x01
     a56:	0a c0       	rjmp	.+20     	; 0xa6c <clear_screen+0x40>
	{
		ssd1306_set_page_start(page);
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	e7 de       	rcall	.-562    	; 0x82a <ssd1306_set_page_start>
		ssd1306_data(gddram, COL_NUM);
     a5c:	60 e8       	ldi	r22, 0x80	; 128
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	8a e1       	ldi	r24, 0x1A	; 26
     a62:	97 e0       	ldi	r25, 0x07	; 7
     a64:	60 de       	rcall	.-832    	; 0x726 <ssd1306_data>
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
	gddram[col] = 0;

	for (page=0; page<PAGE_NUM; page++)
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	8f 5f       	subi	r24, 0xFF	; 255
     a6a:	89 83       	std	Y+1, r24	; 0x01
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	88 30       	cpi	r24, 0x08	; 8
	{
		ssd1306_set_page_start(page);
		ssd1306_data(gddram, COL_NUM);
	}

	ssd1306_set_column_addr(0);
     a70:	98 f3       	brcs	.-26     	; 0xa58 <clear_screen+0x2c>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	ed de       	rcall	.-550    	; 0x850 <ssd1306_set_column_addr>
}
     a76:	00 00       	nop
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <oled_msg>:



extern void get_ch_data(char ch, uint8_t *buffer);
int oled_msg(int row, int col, const char *fmt, ...)
{
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	6c 97       	sbiw	r28, 0x1c	; 28
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
	va_list     ap;
	char        buf[MAX_CH_PER_LINE + 1];
	int         rc, i;

	va_start(ap, fmt);
     a96:	ce 01       	movw	r24, r28
     a98:	87 96       	adiw	r24, 0x27	; 39
     a9a:	9e 83       	std	Y+6, r25	; 0x06
     a9c:	8d 83       	std	Y+5, r24	; 0x05
	rc = vsprintf(buf, fmt, ap);
     a9e:	4d 81       	ldd	r20, Y+5	; 0x05
     aa0:	5e 81       	ldd	r21, Y+6	; 0x06
     aa2:	2d a1       	ldd	r18, Y+37	; 0x25
     aa4:	3e a1       	ldd	r19, Y+38	; 0x26
     aa6:	ce 01       	movw	r24, r28
     aa8:	07 96       	adiw	r24, 0x07	; 7
     aaa:	b9 01       	movw	r22, r18
     aac:	0e 94 91 23 	call	0x4722	; 0x4722 <vsprintf>
     ab0:	9c 83       	std	Y+4, r25	; 0x04
     ab2:	8b 83       	std	Y+3, r24	; 0x03
	va_end(ap);

	if (rc > 0)
     ab4:	8b 81       	ldd	r24, Y+3	; 0x03
     ab6:	9c 81       	ldd	r25, Y+4	; 0x04
     ab8:	18 16       	cp	r1, r24
     aba:	19 06       	cpc	r1, r25
     abc:	0c f0       	brlt	.+2      	; 0xac0 <oled_msg+0x3e>
     abe:	3b c0       	rjmp	.+118    	; 0xb36 <oled_msg+0xb4>
	{
		for (i=0; i<rc; i++)
     ac0:	1a 82       	std	Y+2, r1	; 0x02
     ac2:	19 82       	std	Y+1, r1	; 0x01
     ac4:	1c c0       	rjmp	.+56     	; 0xafe <oled_msg+0x7c>
		get_ch_data(buf[i], &gddram[i * CHAR_WIDTH]);
     ac6:	29 81       	ldd	r18, Y+1	; 0x01
     ac8:	3a 81       	ldd	r19, Y+2	; 0x02
     aca:	c9 01       	movw	r24, r18
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	82 0f       	add	r24, r18
     ad2:	93 1f       	adc	r25, r19
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	ac 01       	movw	r20, r24
     ada:	46 5e       	subi	r20, 0xE6	; 230
     adc:	58 4f       	sbci	r21, 0xF8	; 248
     ade:	9e 01       	movw	r18, r28
     ae0:	29 5f       	subi	r18, 0xF9	; 249
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	9a 81       	ldd	r25, Y+2	; 0x02
     ae8:	82 0f       	add	r24, r18
     aea:	93 1f       	adc	r25, r19
     aec:	fc 01       	movw	r30, r24
     aee:	80 81       	ld	r24, Z
     af0:	ba 01       	movw	r22, r20
     af2:	f8 db       	rcall	.-2064   	; 0x2e4 <get_ch_data>
	rc = vsprintf(buf, fmt, ap);
	va_end(ap);

	if (rc > 0)
	{
		for (i=0; i<rc; i++)
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	9a 81       	ldd	r25, Y+2	; 0x02
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	9a 83       	std	Y+2, r25	; 0x02
     afc:	89 83       	std	Y+1, r24	; 0x01
     afe:	29 81       	ldd	r18, Y+1	; 0x01
     b00:	3a 81       	ldd	r19, Y+2	; 0x02
     b02:	8b 81       	ldd	r24, Y+3	; 0x03
     b04:	9c 81       	ldd	r25, Y+4	; 0x04
     b06:	28 17       	cp	r18, r24
     b08:	39 07       	cpc	r19, r25
     b0a:	ec f2       	brlt	.-70     	; 0xac6 <oled_msg+0x44>
		get_ch_data(buf[i], &gddram[i * CHAR_WIDTH]);

		ssd1306_set_page_start(row);
     b0c:	89 a1       	ldd	r24, Y+33	; 0x21
     b0e:	8d de       	rcall	.-742    	; 0x82a <ssd1306_set_page_start>
		ssd1306_set_column_addr(col * CHAR_WIDTH);
     b10:	9b a1       	ldd	r25, Y+35	; 0x23
     b12:	89 2f       	mov	r24, r25
     b14:	88 0f       	add	r24, r24
     b16:	89 0f       	add	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	9a de       	rcall	.-716    	; 0x850 <ssd1306_set_column_addr>
		ssd1306_data(gddram, rc * CHAR_WIDTH);
     b1c:	2b 81       	ldd	r18, Y+3	; 0x03
     b1e:	3c 81       	ldd	r19, Y+4	; 0x04
     b20:	c9 01       	movw	r24, r18
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	82 0f       	add	r24, r18
     b28:	93 1f       	adc	r25, r19
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	bc 01       	movw	r22, r24
     b30:	8a e1       	ldi	r24, 0x1A	; 26
     b32:	97 e0       	ldi	r25, 0x07	; 7
     b34:	f8 dd       	rcall	.-1040   	; 0x726 <ssd1306_data>
	}

	return rc;
     b36:	8b 81       	ldd	r24, Y+3	; 0x03
     b38:	9c 81       	ldd	r25, Y+4	; 0x04
}
     b3a:	6c 96       	adiw	r28, 0x1c	; 28
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <draw_picture>:




void draw_picture(char array[])
{
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	00 d0       	rcall	.+0      	; 0xb52 <draw_picture+0x6>
     b52:	1f 92       	push	r1
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	9b 83       	std	Y+3, r25	; 0x03
     b5a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char x,y;
	for(y=0;y<8;y++)
     b5c:	19 82       	std	Y+1, r1	; 0x01
     b5e:	15 c0       	rjmp	.+42     	; 0xb8a <draw_picture+0x3e>
	{
		ssd1306_set_page_start(y);
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	63 de       	rcall	.-826    	; 0x82a <ssd1306_set_page_start>
		ssd1306_data(array+(y*COL_NUM), COL_NUM);
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	88 2f       	mov	r24, r24
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	96 95       	lsr	r25
     b6c:	98 2f       	mov	r25, r24
     b6e:	88 27       	eor	r24, r24
     b70:	97 95       	ror	r25
     b72:	87 95       	ror	r24
     b74:	9c 01       	movw	r18, r24
     b76:	8a 81       	ldd	r24, Y+2	; 0x02
     b78:	9b 81       	ldd	r25, Y+3	; 0x03
     b7a:	82 0f       	add	r24, r18
     b7c:	93 1f       	adc	r25, r19
     b7e:	60 e8       	ldi	r22, 0x80	; 128
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	d1 dd       	rcall	.-1118   	; 0x726 <ssd1306_data>


void draw_picture(char array[])
{
	unsigned char x,y;
	for(y=0;y<8;y++)
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	8f 5f       	subi	r24, 0xFF	; 255
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 30       	cpi	r24, 0x08	; 8
     b8e:	40 f3       	brcs	.-48     	; 0xb60 <draw_picture+0x14>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(array+(y*COL_NUM), COL_NUM);
	}
}
     b90:	00 00       	nop
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <setup>:

void setup(void)
{
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	twi_init();
     ba6:	d4 dc       	rcall	.-1624   	; 0x550 <twi_init>

	ssd1306_init();
     ba8:	b1 de       	rcall	.-670    	; 0x90c <ssd1306_init>
	ssd1306_set_addr_mode(PAGE);
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	28 de       	rcall	.-944    	; 0x7fe <ssd1306_set_addr_mode>
	

	clear_screen();
     bae:	3e df       	rcall	.-388    	; 0xa2c <clear_screen>
	
	ssd1306_output_scan_direction(0);		//위아래 역전
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	95 de       	rcall	.-726    	; 0x8e0 <ssd1306_output_scan_direction>
	ssd1306_reverse(1);		//왼쪽 오른쪽 역전
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	66 de       	rcall	.-820    	; 0x888 <ssd1306_reverse>
	ssd1306_normal_display(0);
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	79 de       	rcall	.-782    	; 0x8b4 <ssd1306_normal_display>
     bc2:	00 00       	nop

}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <Collision>:
     bca:	cf 93       	push	r28
unsigned char next_block = 0;
unsigned char next_board[8] = {0};


unsigned char Collision()	//충돌 여부 확인
{
     bcc:	df 93       	push	r29
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
	if( ((main_board[cur_line] & temp_line[0]) != 0) | ((main_board[cur_line + 1] & temp_line[1]) != 0) |
     bd2:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	84 56       	subi	r24, 0x64	; 100
     be4:	98 4f       	sbci	r25, 0xF8	; 248
     be6:	fc 01       	movw	r30, r24
     be8:	20 81       	ld	r18, Z
     bea:	31 81       	ldd	r19, Z+1	; 0x01
     bec:	42 81       	ldd	r20, Z+2	; 0x02
     bee:	53 81       	ldd	r21, Z+3	; 0x03
     bf0:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
     bf4:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
     bf8:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
     bfc:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
     c00:	82 23       	and	r24, r18
     c02:	93 23       	and	r25, r19
     c04:	a4 23       	and	r26, r20
     c06:	b5 23       	and	r27, r21
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	89 2b       	or	r24, r25
     c0c:	8a 2b       	or	r24, r26
     c0e:	8b 2b       	or	r24, r27
     c10:	09 f4       	brne	.+2      	; 0xc14 <Collision+0x4a>
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
     c18:	88 2f       	mov	r24, r24
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	84 56       	subi	r24, 0x64	; 100
     c28:	98 4f       	sbci	r25, 0xF8	; 248
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 81       	ld	r18, Z
     c2e:	31 81       	ldd	r19, Z+1	; 0x01
     c30:	42 81       	ldd	r20, Z+2	; 0x02
     c32:	53 81       	ldd	r21, Z+3	; 0x03
     c34:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
     c38:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
     c3c:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
     c40:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
     c44:	82 23       	and	r24, r18
     c46:	93 23       	and	r25, r19
     c48:	a4 23       	and	r26, r20
     c4a:	b5 23       	and	r27, r21
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	89 2b       	or	r24, r25
     c50:	8a 2b       	or	r24, r26
     c52:	8b 2b       	or	r24, r27
     c54:	09 f4       	brne	.+2      	; 0xc58 <Collision+0x8e>
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	86 2f       	mov	r24, r22
     c5a:	82 2b       	or	r24, r18
     c5c:	68 2f       	mov	r22, r24
     c5e:	70 e0       	ldi	r23, 0x00	; 0
	((main_board[cur_line + 2] & temp_line[2]) != 0) | ((main_board[cur_line + 3] & temp_line[3]) != 0) )
     c60:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	02 96       	adiw	r24, 0x02	; 2
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	84 56       	subi	r24, 0x64	; 100
     c74:	98 4f       	sbci	r25, 0xF8	; 248
     c76:	fc 01       	movw	r30, r24
     c78:	20 81       	ld	r18, Z
     c7a:	31 81       	ldd	r19, Z+1	; 0x01
     c7c:	42 81       	ldd	r20, Z+2	; 0x02
     c7e:	53 81       	ldd	r21, Z+3	; 0x03
     c80:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
     c84:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
     c88:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
     c8c:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
     c90:	82 23       	and	r24, r18
     c92:	93 23       	and	r25, r19
     c94:	a4 23       	and	r26, r20
     c96:	b5 23       	and	r27, r21
     c98:	21 e0       	ldi	r18, 0x01	; 1
     c9a:	89 2b       	or	r24, r25
     c9c:	8a 2b       	or	r24, r26
     c9e:	8b 2b       	or	r24, r27
     ca0:	09 f4       	brne	.+2      	; 0xca4 <Collision+0xda>
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	82 2f       	mov	r24, r18
     ca6:	90 e0       	ldi	r25, 0x00	; 0
unsigned char next_board[8] = {0};


unsigned char Collision()	//충돌 여부 확인
{
	if( ((main_board[cur_line] & temp_line[0]) != 0) | ((main_board[cur_line + 1] & temp_line[1]) != 0) |
     ca8:	68 2b       	or	r22, r24
     caa:	79 2b       	or	r23, r25
	((main_board[cur_line + 2] & temp_line[2]) != 0) | ((main_board[cur_line + 3] & temp_line[3]) != 0) )
     cac:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	03 96       	adiw	r24, 0x03	; 3
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	84 56       	subi	r24, 0x64	; 100
     cc0:	98 4f       	sbci	r25, 0xF8	; 248
     cc2:	fc 01       	movw	r30, r24
     cc4:	20 81       	ld	r18, Z
     cc6:	31 81       	ldd	r19, Z+1	; 0x01
     cc8:	42 81       	ldd	r20, Z+2	; 0x02
     cca:	53 81       	ldd	r21, Z+3	; 0x03
     ccc:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
     cd0:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
     cd4:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
     cd8:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
     cdc:	82 23       	and	r24, r18
     cde:	93 23       	and	r25, r19
     ce0:	a4 23       	and	r26, r20
     ce2:	b5 23       	and	r27, r21
     ce4:	21 e0       	ldi	r18, 0x01	; 1
     ce6:	89 2b       	or	r24, r25
     ce8:	8a 2b       	or	r24, r26
     cea:	8b 2b       	or	r24, r27
     cec:	09 f4       	brne	.+2      	; 0xcf0 <Collision+0x126>
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	82 2f       	mov	r24, r18
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	86 2b       	or	r24, r22
     cf6:	97 2b       	or	r25, r23
unsigned char next_board[8] = {0};


unsigned char Collision()	//충돌 여부 확인
{
	if( ((main_board[cur_line] & temp_line[0]) != 0) | ((main_board[cur_line + 1] & temp_line[1]) != 0) |
     cf8:	89 2b       	or	r24, r25
     cfa:	11 f0       	breq	.+4      	; 0xd00 <Collision+0x136>
	((main_board[cur_line + 2] & temp_line[2]) != 0) | ((main_board[cur_line + 3] & temp_line[3]) != 0) )
	return 1;         // 충돌 1 리턴
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <Collision+0x138>
	else
	return 0;  // 충돌 없음 0 리턴
     d00:	80 e0       	ldi	r24, 0x00	; 0
}
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <tetriminos_to_temp_line>:


void tetriminos_to_temp_line()
{
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <tetriminos_to_temp_line+0x6>
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i < 4; i++)	//테트리미노스 라인 임시 저장소 초기화
     d12:	1a 82       	std	Y+2, r1	; 0x02
     d14:	19 82       	std	Y+1, r1	; 0x01
     d16:	12 c0       	rjmp	.+36     	; 0xd3c <tetriminos_to_temp_line+0x34>
	{
		temp_line[i] = 0;
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	9a 81       	ldd	r25, Y+2	; 0x02
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	84 5d       	subi	r24, 0xD4	; 212
     d26:	97 4f       	sbci	r25, 0xF7	; 247
     d28:	fc 01       	movw	r30, r24
     d2a:	10 82       	st	Z, r1
     d2c:	11 82       	std	Z+1, r1	; 0x01
     d2e:	12 82       	std	Z+2, r1	; 0x02
     d30:	13 82       	std	Z+3, r1	; 0x03
}


void tetriminos_to_temp_line()
{
	for(int i = 0; i < 4; i++)	//테트리미노스 라인 임시 저장소 초기화
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	04 97       	sbiw	r24, 0x04	; 4
     d42:	54 f3       	brlt	.-44     	; 0xd18 <tetriminos_to_temp_line+0x10>
	{
		temp_line[i] = 0;
	}

	if(cur_col == 2)
     d44:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <cur_col>
     d48:	82 30       	cpi	r24, 0x02	; 2
     d4a:	09 f0       	breq	.+2      	; 0xd4e <tetriminos_to_temp_line+0x46>
     d4c:	e1 c0       	rjmp	.+450    	; 0xf10 <tetriminos_to_temp_line+0x208>
	{
		temp_line[0] = ((unsigned long int)(tetriminos[shape][pattern] & 0xF000) >> (15 - cur_col));
     d4e:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
     d52:	48 2f       	mov	r20, r24
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	2c e6       	ldi	r18, 0x6C	; 108
     d60:	32 e0       	ldi	r19, 0x02	; 2
     d62:	44 0f       	add	r20, r20
     d64:	55 1f       	adc	r21, r21
     d66:	44 0f       	add	r20, r20
     d68:	55 1f       	adc	r21, r21
     d6a:	84 0f       	add	r24, r20
     d6c:	95 1f       	adc	r25, r21
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	82 0f       	add	r24, r18
     d74:	93 1f       	adc	r25, r19
     d76:	fc 01       	movw	r30, r24
     d78:	85 91       	lpm	r24, Z+
     d7a:	95 91       	lpm	r25, Z+
     d7c:	32 97       	sbiw	r30, 0x02	; 2
     d7e:	cc 01       	movw	r24, r24
     d80:	a0 e0       	ldi	r26, 0x00	; 0
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	88 27       	eor	r24, r24
     d86:	90 7f       	andi	r25, 0xF0	; 240
     d88:	aa 27       	eor	r26, r26
     d8a:	bb 27       	eor	r27, r27
     d8c:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
     d90:	22 2f       	mov	r18, r18
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	4f e0       	ldi	r20, 0x0F	; 15
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	ba 01       	movw	r22, r20
     d9a:	62 1b       	sub	r22, r18
     d9c:	73 0b       	sbc	r23, r19
     d9e:	9b 01       	movw	r18, r22
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <tetriminos_to_temp_line+0xa2>
     da2:	b6 95       	lsr	r27
     da4:	a7 95       	ror	r26
     da6:	97 95       	ror	r25
     da8:	87 95       	ror	r24
     daa:	2a 95       	dec	r18
     dac:	d2 f7       	brpl	.-12     	; 0xda2 <tetriminos_to_temp_line+0x9a>
     dae:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <temp_line>
     db2:	90 93 2d 08 	sts	0x082D, r25	; 0x80082d <temp_line+0x1>
     db6:	a0 93 2e 08 	sts	0x082E, r26	; 0x80082e <temp_line+0x2>
     dba:	b0 93 2f 08 	sts	0x082F, r27	; 0x80082f <temp_line+0x3>
		temp_line[1] = ((unsigned long int)(tetriminos[shape][pattern] & 0x0F00) >> (11 - cur_col));
     dbe:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
     dc2:	48 2f       	mov	r20, r24
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
     dca:	88 2f       	mov	r24, r24
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	2c e6       	ldi	r18, 0x6C	; 108
     dd0:	32 e0       	ldi	r19, 0x02	; 2
     dd2:	44 0f       	add	r20, r20
     dd4:	55 1f       	adc	r21, r21
     dd6:	44 0f       	add	r20, r20
     dd8:	55 1f       	adc	r21, r21
     dda:	84 0f       	add	r24, r20
     ddc:	95 1f       	adc	r25, r21
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	82 0f       	add	r24, r18
     de4:	93 1f       	adc	r25, r19
     de6:	fc 01       	movw	r30, r24
     de8:	85 91       	lpm	r24, Z+
     dea:	95 91       	lpm	r25, Z+
     dec:	32 97       	sbiw	r30, 0x02	; 2
     dee:	cc 01       	movw	r24, r24
     df0:	a0 e0       	ldi	r26, 0x00	; 0
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	88 27       	eor	r24, r24
     df6:	9f 70       	andi	r25, 0x0F	; 15
     df8:	aa 27       	eor	r26, r26
     dfa:	bb 27       	eor	r27, r27
     dfc:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
     e00:	22 2f       	mov	r18, r18
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	4b e0       	ldi	r20, 0x0B	; 11
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	ba 01       	movw	r22, r20
     e0a:	62 1b       	sub	r22, r18
     e0c:	73 0b       	sbc	r23, r19
     e0e:	9b 01       	movw	r18, r22
     e10:	04 c0       	rjmp	.+8      	; 0xe1a <tetriminos_to_temp_line+0x112>
     e12:	b6 95       	lsr	r27
     e14:	a7 95       	ror	r26
     e16:	97 95       	ror	r25
     e18:	87 95       	ror	r24
     e1a:	2a 95       	dec	r18
     e1c:	d2 f7       	brpl	.-12     	; 0xe12 <tetriminos_to_temp_line+0x10a>
     e1e:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <temp_line+0x4>
     e22:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <temp_line+0x5>
     e26:	a0 93 32 08 	sts	0x0832, r26	; 0x800832 <temp_line+0x6>
     e2a:	b0 93 33 08 	sts	0x0833, r27	; 0x800833 <temp_line+0x7>
		temp_line[2] = ((unsigned long int)(tetriminos[shape][pattern] & 0x00F0) >> (7 - cur_col));
     e2e:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
     e32:	48 2f       	mov	r20, r24
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
     e3a:	88 2f       	mov	r24, r24
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	2c e6       	ldi	r18, 0x6C	; 108
     e40:	32 e0       	ldi	r19, 0x02	; 2
     e42:	44 0f       	add	r20, r20
     e44:	55 1f       	adc	r21, r21
     e46:	44 0f       	add	r20, r20
     e48:	55 1f       	adc	r21, r21
     e4a:	84 0f       	add	r24, r20
     e4c:	95 1f       	adc	r25, r21
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	82 0f       	add	r24, r18
     e54:	93 1f       	adc	r25, r19
     e56:	fc 01       	movw	r30, r24
     e58:	85 91       	lpm	r24, Z+
     e5a:	95 91       	lpm	r25, Z+
     e5c:	32 97       	sbiw	r30, 0x02	; 2
     e5e:	cc 01       	movw	r24, r24
     e60:	a0 e0       	ldi	r26, 0x00	; 0
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	80 7f       	andi	r24, 0xF0	; 240
     e66:	99 27       	eor	r25, r25
     e68:	aa 27       	eor	r26, r26
     e6a:	bb 27       	eor	r27, r27
     e6c:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
     e70:	22 2f       	mov	r18, r18
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	47 e0       	ldi	r20, 0x07	; 7
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	ba 01       	movw	r22, r20
     e7a:	62 1b       	sub	r22, r18
     e7c:	73 0b       	sbc	r23, r19
     e7e:	9b 01       	movw	r18, r22
     e80:	04 c0       	rjmp	.+8      	; 0xe8a <tetriminos_to_temp_line+0x182>
     e82:	b6 95       	lsr	r27
     e84:	a7 95       	ror	r26
     e86:	97 95       	ror	r25
     e88:	87 95       	ror	r24
     e8a:	2a 95       	dec	r18
     e8c:	d2 f7       	brpl	.-12     	; 0xe82 <tetriminos_to_temp_line+0x17a>
     e8e:	80 93 34 08 	sts	0x0834, r24	; 0x800834 <temp_line+0x8>
     e92:	90 93 35 08 	sts	0x0835, r25	; 0x800835 <temp_line+0x9>
     e96:	a0 93 36 08 	sts	0x0836, r26	; 0x800836 <temp_line+0xa>
     e9a:	b0 93 37 08 	sts	0x0837, r27	; 0x800837 <temp_line+0xb>
		temp_line[3] = ((unsigned long int)(tetriminos[shape][pattern] & 0x000F) >> (3 - cur_col));
     e9e:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
     ea2:	48 2f       	mov	r20, r24
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	2c e6       	ldi	r18, 0x6C	; 108
     eb0:	32 e0       	ldi	r19, 0x02	; 2
     eb2:	44 0f       	add	r20, r20
     eb4:	55 1f       	adc	r21, r21
     eb6:	44 0f       	add	r20, r20
     eb8:	55 1f       	adc	r21, r21
     eba:	84 0f       	add	r24, r20
     ebc:	95 1f       	adc	r25, r21
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	82 0f       	add	r24, r18
     ec4:	93 1f       	adc	r25, r19
     ec6:	fc 01       	movw	r30, r24
     ec8:	85 91       	lpm	r24, Z+
     eca:	95 91       	lpm	r25, Z+
     ecc:	32 97       	sbiw	r30, 0x02	; 2
     ece:	cc 01       	movw	r24, r24
     ed0:	a0 e0       	ldi	r26, 0x00	; 0
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	8f 70       	andi	r24, 0x0F	; 15
     ed6:	99 27       	eor	r25, r25
     ed8:	aa 27       	eor	r26, r26
     eda:	bb 27       	eor	r27, r27
     edc:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
     ee0:	22 2f       	mov	r18, r18
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	43 e0       	ldi	r20, 0x03	; 3
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	ba 01       	movw	r22, r20
     eea:	62 1b       	sub	r22, r18
     eec:	73 0b       	sbc	r23, r19
     eee:	9b 01       	movw	r18, r22
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <tetriminos_to_temp_line+0x1f2>
     ef2:	b6 95       	lsr	r27
     ef4:	a7 95       	ror	r26
     ef6:	97 95       	ror	r25
     ef8:	87 95       	ror	r24
     efa:	2a 95       	dec	r18
     efc:	d2 f7       	brpl	.-12     	; 0xef2 <tetriminos_to_temp_line+0x1ea>
     efe:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <temp_line+0xc>
     f02:	90 93 39 08 	sts	0x0839, r25	; 0x800839 <temp_line+0xd>
     f06:	a0 93 3a 08 	sts	0x083A, r26	; 0x80083a <temp_line+0xe>
     f0a:	b0 93 3b 08 	sts	0x083B, r27	; 0x80083b <temp_line+0xf>
		temp_line[0] = ((unsigned long int)(tetriminos[shape][pattern] & 0xF000) >> 12) << (cur_col - 3);	//이 과정이 필요 없고 뒤에서 한번에 충돌감지 이후 넣어줘도 상관없어 보이지만 충돌 여부 판별하는 함수가 temp_line와 메인보드가 겹치는지 파악하기때문에 temp_line에 변화된 사항을 반영해야 한다.
		temp_line[1] = ((unsigned long int)(tetriminos[shape][pattern] & 0x0F00) >> 8) << (cur_col - 3);
		temp_line[2] = ((unsigned long int)(tetriminos[shape][pattern] & 0x00F0) >> 4) << (cur_col - 3);
		temp_line[3] = ((unsigned long int)(tetriminos[shape][pattern] & 0x000F)) << (cur_col - 3);
	}
}
     f0e:	e1 c0       	rjmp	.+450    	; 0x10d2 <tetriminos_to_temp_line+0x3ca>
		temp_line[0] = ((unsigned long int)(tetriminos[shape][pattern] & 0xF000) >> (15 - cur_col));
		temp_line[1] = ((unsigned long int)(tetriminos[shape][pattern] & 0x0F00) >> (11 - cur_col));
		temp_line[2] = ((unsigned long int)(tetriminos[shape][pattern] & 0x00F0) >> (7 - cur_col));
		temp_line[3] = ((unsigned long int)(tetriminos[shape][pattern] & 0x000F) >> (3 - cur_col));
	}
	else if(cur_col >= 3)
     f10:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <cur_col>
     f14:	83 30       	cpi	r24, 0x03	; 3
     f16:	08 f4       	brcc	.+2      	; 0xf1a <tetriminos_to_temp_line+0x212>
     f18:	dc c0       	rjmp	.+440    	; 0x10d2 <tetriminos_to_temp_line+0x3ca>
	{
		temp_line[0] = ((unsigned long int)(tetriminos[shape][pattern] & 0xF000) >> 12) << (cur_col - 3);	//이 과정이 필요 없고 뒤에서 한번에 충돌감지 이후 넣어줘도 상관없어 보이지만 충돌 여부 판별하는 함수가 temp_line와 메인보드가 겹치는지 파악하기때문에 temp_line에 변화된 사항을 반영해야 한다.
     f1a:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
     f1e:	48 2f       	mov	r20, r24
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	2c e6       	ldi	r18, 0x6C	; 108
     f2c:	32 e0       	ldi	r19, 0x02	; 2
     f2e:	44 0f       	add	r20, r20
     f30:	55 1f       	adc	r21, r21
     f32:	44 0f       	add	r20, r20
     f34:	55 1f       	adc	r21, r21
     f36:	84 0f       	add	r24, r20
     f38:	95 1f       	adc	r25, r21
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	82 0f       	add	r24, r18
     f40:	93 1f       	adc	r25, r19
     f42:	fc 01       	movw	r30, r24
     f44:	85 91       	lpm	r24, Z+
     f46:	95 91       	lpm	r25, Z+
     f48:	32 97       	sbiw	r30, 0x02	; 2
     f4a:	89 2f       	mov	r24, r25
     f4c:	99 27       	eor	r25, r25
     f4e:	82 95       	swap	r24
     f50:	8f 70       	andi	r24, 0x0F	; 15
     f52:	cc 01       	movw	r24, r24
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
     f5c:	22 2f       	mov	r18, r18
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	23 50       	subi	r18, 0x03	; 3
     f62:	31 09       	sbc	r19, r1
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <tetriminos_to_temp_line+0x266>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	aa 1f       	adc	r26, r26
     f6c:	bb 1f       	adc	r27, r27
     f6e:	2a 95       	dec	r18
     f70:	d2 f7       	brpl	.-12     	; 0xf66 <tetriminos_to_temp_line+0x25e>
     f72:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <temp_line>
     f76:	90 93 2d 08 	sts	0x082D, r25	; 0x80082d <temp_line+0x1>
     f7a:	a0 93 2e 08 	sts	0x082E, r26	; 0x80082e <temp_line+0x2>
     f7e:	b0 93 2f 08 	sts	0x082F, r27	; 0x80082f <temp_line+0x3>
		temp_line[1] = ((unsigned long int)(tetriminos[shape][pattern] & 0x0F00) >> 8) << (cur_col - 3);
     f82:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
     f86:	48 2f       	mov	r20, r24
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	2c e6       	ldi	r18, 0x6C	; 108
     f94:	32 e0       	ldi	r19, 0x02	; 2
     f96:	44 0f       	add	r20, r20
     f98:	55 1f       	adc	r21, r21
     f9a:	44 0f       	add	r20, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	84 0f       	add	r24, r20
     fa0:	95 1f       	adc	r25, r21
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	82 0f       	add	r24, r18
     fa8:	93 1f       	adc	r25, r19
     faa:	fc 01       	movw	r30, r24
     fac:	85 91       	lpm	r24, Z+
     fae:	95 91       	lpm	r25, Z+
     fb0:	32 97       	sbiw	r30, 0x02	; 2
     fb2:	cc 01       	movw	r24, r24
     fb4:	a0 e0       	ldi	r26, 0x00	; 0
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	88 27       	eor	r24, r24
     fba:	9f 70       	andi	r25, 0x0F	; 15
     fbc:	aa 27       	eor	r26, r26
     fbe:	bb 27       	eor	r27, r27
     fc0:	89 2f       	mov	r24, r25
     fc2:	9a 2f       	mov	r25, r26
     fc4:	ab 2f       	mov	r26, r27
     fc6:	bb 27       	eor	r27, r27
     fc8:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
     fcc:	22 2f       	mov	r18, r18
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	23 50       	subi	r18, 0x03	; 3
     fd2:	31 09       	sbc	r19, r1
     fd4:	04 c0       	rjmp	.+8      	; 0xfde <tetriminos_to_temp_line+0x2d6>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	aa 1f       	adc	r26, r26
     fdc:	bb 1f       	adc	r27, r27
     fde:	2a 95       	dec	r18
     fe0:	d2 f7       	brpl	.-12     	; 0xfd6 <tetriminos_to_temp_line+0x2ce>
     fe2:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <temp_line+0x4>
     fe6:	90 93 31 08 	sts	0x0831, r25	; 0x800831 <temp_line+0x5>
     fea:	a0 93 32 08 	sts	0x0832, r26	; 0x800832 <temp_line+0x6>
     fee:	b0 93 33 08 	sts	0x0833, r27	; 0x800833 <temp_line+0x7>
		temp_line[2] = ((unsigned long int)(tetriminos[shape][pattern] & 0x00F0) >> 4) << (cur_col - 3);
     ff2:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
     ff6:	48 2f       	mov	r20, r24
     ff8:	50 e0       	ldi	r21, 0x00	; 0
     ffa:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	2c e6       	ldi	r18, 0x6C	; 108
    1004:	32 e0       	ldi	r19, 0x02	; 2
    1006:	44 0f       	add	r20, r20
    1008:	55 1f       	adc	r21, r21
    100a:	44 0f       	add	r20, r20
    100c:	55 1f       	adc	r21, r21
    100e:	84 0f       	add	r24, r20
    1010:	95 1f       	adc	r25, r21
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	82 0f       	add	r24, r18
    1018:	93 1f       	adc	r25, r19
    101a:	fc 01       	movw	r30, r24
    101c:	85 91       	lpm	r24, Z+
    101e:	95 91       	lpm	r25, Z+
    1020:	32 97       	sbiw	r30, 0x02	; 2
    1022:	cc 01       	movw	r24, r24
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	80 7f       	andi	r24, 0xF0	; 240
    102a:	99 27       	eor	r25, r25
    102c:	aa 27       	eor	r26, r26
    102e:	bb 27       	eor	r27, r27
    1030:	68 94       	set
    1032:	13 f8       	bld	r1, 3
    1034:	b6 95       	lsr	r27
    1036:	a7 95       	ror	r26
    1038:	97 95       	ror	r25
    103a:	87 95       	ror	r24
    103c:	16 94       	lsr	r1
    103e:	d1 f7       	brne	.-12     	; 0x1034 <tetriminos_to_temp_line+0x32c>
    1040:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
    1044:	22 2f       	mov	r18, r18
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	23 50       	subi	r18, 0x03	; 3
    104a:	31 09       	sbc	r19, r1
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <tetriminos_to_temp_line+0x34e>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	aa 1f       	adc	r26, r26
    1054:	bb 1f       	adc	r27, r27
    1056:	2a 95       	dec	r18
    1058:	d2 f7       	brpl	.-12     	; 0x104e <tetriminos_to_temp_line+0x346>
    105a:	80 93 34 08 	sts	0x0834, r24	; 0x800834 <temp_line+0x8>
    105e:	90 93 35 08 	sts	0x0835, r25	; 0x800835 <temp_line+0x9>
    1062:	a0 93 36 08 	sts	0x0836, r26	; 0x800836 <temp_line+0xa>
    1066:	b0 93 37 08 	sts	0x0837, r27	; 0x800837 <temp_line+0xb>
		temp_line[3] = ((unsigned long int)(tetriminos[shape][pattern] & 0x000F)) << (cur_col - 3);
    106a:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <shape>
    106e:	48 2f       	mov	r20, r24
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	2c e6       	ldi	r18, 0x6C	; 108
    107c:	32 e0       	ldi	r19, 0x02	; 2
    107e:	44 0f       	add	r20, r20
    1080:	55 1f       	adc	r21, r21
    1082:	44 0f       	add	r20, r20
    1084:	55 1f       	adc	r21, r21
    1086:	84 0f       	add	r24, r20
    1088:	95 1f       	adc	r25, r21
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	82 0f       	add	r24, r18
    1090:	93 1f       	adc	r25, r19
    1092:	fc 01       	movw	r30, r24
    1094:	85 91       	lpm	r24, Z+
    1096:	95 91       	lpm	r25, Z+
    1098:	32 97       	sbiw	r30, 0x02	; 2
    109a:	cc 01       	movw	r24, r24
    109c:	a0 e0       	ldi	r26, 0x00	; 0
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	8f 70       	andi	r24, 0x0F	; 15
    10a2:	99 27       	eor	r25, r25
    10a4:	aa 27       	eor	r26, r26
    10a6:	bb 27       	eor	r27, r27
    10a8:	20 91 2a 08 	lds	r18, 0x082A	; 0x80082a <cur_col>
    10ac:	22 2f       	mov	r18, r18
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	23 50       	subi	r18, 0x03	; 3
    10b2:	31 09       	sbc	r19, r1
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <tetriminos_to_temp_line+0x3b6>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	aa 1f       	adc	r26, r26
    10bc:	bb 1f       	adc	r27, r27
    10be:	2a 95       	dec	r18
    10c0:	d2 f7       	brpl	.-12     	; 0x10b6 <tetriminos_to_temp_line+0x3ae>
    10c2:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <temp_line+0xc>
    10c6:	90 93 39 08 	sts	0x0839, r25	; 0x800839 <temp_line+0xd>
    10ca:	a0 93 3a 08 	sts	0x083A, r26	; 0x80083a <temp_line+0xe>
    10ce:	b0 93 3b 08 	sts	0x083B, r27	; 0x80083b <temp_line+0xf>
	}
}
    10d2:	00 00       	nop
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	08 95       	ret

000010de <__vector_5>:




ISR(INT4_vect)
{
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    10e6:	0f 92       	push	r0
    10e8:	11 24       	eor	r1, r1
    10ea:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    10ee:	0f 92       	push	r0
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	00 d0       	rcall	.+0      	; 0x110e <__stack+0xf>
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
	SendCommand01(0x0F, 0x01, 0x03);
    1112:	43 e0       	ldi	r20, 0x03	; 3
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	8f e0       	ldi	r24, 0x0F	; 15
    1118:	a8 da       	rcall	.-2736   	; 0x66a <SendCommand01>
	if(screen == Menu_snake)
    111a:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    111e:	88 23       	and	r24, r24
    1120:	21 f4       	brne	.+8      	; 0x112a <__stack+0x2b>
	{
		screen = Play_snake;
    1122:	82 e0       	ldi	r24, 0x02	; 2
    1124:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
	}
	else
	{
		screen = Menu_snake;
	}
}
    1128:	18 c1       	rjmp	.+560    	; 0x135a <__stack+0x25b>
	SendCommand01(0x0F, 0x01, 0x03);
	if(screen == Menu_snake)
	{
		screen = Play_snake;
	}
	else if(screen == Menu_tetris)
    112a:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	21 f4       	brne	.+8      	; 0x113a <__stack+0x3b>
	{
		screen = Play_tetris;
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
	}
	else
	{
		screen = Menu_snake;
	}
}
    1138:	10 c1       	rjmp	.+544    	; 0x135a <__stack+0x25b>
	}
	else if(screen == Menu_tetris)
	{
		screen = Play_tetris;
	}
	else if(screen == Play_snake)
    113a:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	79 f4       	brne	.+30     	; 0x1160 <__stack+0x61>
	{
		if(dir != LEFT)
    1142:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    1146:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    114a:	8b 34       	cpi	r24, 0x4B	; 75
    114c:	91 05       	cpc	r25, r1
    114e:	09 f4       	brne	.+2      	; 0x1152 <__stack+0x53>
    1150:	04 c1       	rjmp	.+520    	; 0x135a <__stack+0x25b>
		{
			//SendCommand01(0x0F, 0x01, 0x03);
			
			dir = RIGHT;
    1152:	8d e4       	ldi	r24, 0x4D	; 77
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    115a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
	else
	{
		screen = Menu_snake;
	}
}
    115e:	fd c0       	rjmp	.+506    	; 0x135a <__stack+0x25b>
			//SendCommand01(0x0F, 0x01, 0x03);
			
			dir = RIGHT;
		}
	}
	else if(screen == Play_tetris)
    1160:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1164:	83 30       	cpi	r24, 0x03	; 3
    1166:	09 f0       	breq	.+2      	; 0x116a <__stack+0x6b>
    1168:	f6 c0       	rjmp	.+492    	; 0x1356 <__stack+0x257>
	{
		for(int i = 0; i < 32; i++)
    116a:	1a 82       	std	Y+2, r1	; 0x02
    116c:	19 82       	std	Y+1, r1	; 0x01
    116e:	1f c0       	rjmp	.+62     	; 0x11ae <__stack+0xaf>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	84 56       	subi	r24, 0x64	; 100
    117e:	98 4f       	sbci	r25, 0xF8	; 248
    1180:	fc 01       	movw	r30, r24
    1182:	80 81       	ld	r24, Z
    1184:	91 81       	ldd	r25, Z+1	; 0x01
    1186:	a2 81       	ldd	r26, Z+2	; 0x02
    1188:	b3 81       	ldd	r27, Z+3	; 0x03
    118a:	29 81       	ldd	r18, Y+1	; 0x01
    118c:	3a 81       	ldd	r19, Y+2	; 0x02
    118e:	22 0f       	add	r18, r18
    1190:	33 1f       	adc	r19, r19
    1192:	22 0f       	add	r18, r18
    1194:	33 1f       	adc	r19, r19
    1196:	21 5c       	subi	r18, 0xC1	; 193
    1198:	37 4f       	sbci	r19, 0xF7	; 247
    119a:	f9 01       	movw	r30, r18
    119c:	80 83       	st	Z, r24
    119e:	91 83       	std	Z+1, r25	; 0x01
    11a0:	a2 83       	std	Z+2, r26	; 0x02
    11a2:	b3 83       	std	Z+3, r27	; 0x03
			dir = RIGHT;
		}
	}
	else if(screen == Play_tetris)
	{
		for(int i = 0; i < 32; i++)
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	9a 83       	std	Y+2, r25	; 0x02
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	80 97       	sbiw	r24, 0x20	; 32
    11b4:	ec f2       	brlt	.-70     	; 0x1170 <__stack+0x71>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
		}

		if(cur_col >= 3) cur_col--;
    11b6:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <cur_col>
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	30 f0       	brcs	.+12     	; 0x11ca <__stack+0xcb>
    11be:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <cur_col>
    11c2:	81 50       	subi	r24, 0x01	; 1
    11c4:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <cur_col>
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <__stack+0xd1>
		else cur_col = 2;
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <cur_col>

		tetriminos_to_temp_line();
		
		if(Collision() == 1) cur_col++;
    11d0:	9b dd       	rcall	.-1226   	; 0xd08 <tetriminos_to_temp_line>
    11d2:	fb dc       	rcall	.-1546   	; 0xbca <Collision>
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	29 f4       	brne	.+10     	; 0x11e2 <__stack+0xe3>
    11d8:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <cur_col>
    11dc:	8f 5f       	subi	r24, 0xFF	; 255
    11de:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <cur_col>

		tetriminos_to_temp_line();
    11e2:	92 dd       	rcall	.-1244   	; 0xd08 <tetriminos_to_temp_line>

		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
    11e4:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    11e8:	68 2f       	mov	r22, r24
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	81 5c       	subi	r24, 0xC1	; 193
    11fe:	97 4f       	sbci	r25, 0xF7	; 247
    1200:	fc 01       	movw	r30, r24
    1202:	20 81       	ld	r18, Z
    1204:	31 81       	ldd	r19, Z+1	; 0x01
    1206:	42 81       	ldd	r20, Z+2	; 0x02
    1208:	53 81       	ldd	r21, Z+3	; 0x03
    120a:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    120e:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    1212:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    1216:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    121a:	82 2b       	or	r24, r18
    121c:	93 2b       	or	r25, r19
    121e:	a4 2b       	or	r26, r20
    1220:	b5 2b       	or	r27, r21
    1222:	9b 01       	movw	r18, r22
    1224:	22 0f       	add	r18, r18
    1226:	33 1f       	adc	r19, r19
    1228:	22 0f       	add	r18, r18
    122a:	33 1f       	adc	r19, r19
    122c:	21 5c       	subi	r18, 0xC1	; 193
    122e:	37 4f       	sbci	r19, 0xF7	; 247
    1230:	f9 01       	movw	r30, r18
    1232:	80 83       	st	Z, r24
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	a2 83       	std	Z+2, r26	; 0x02
    1238:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 1] |= temp_line[1];
    123a:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	bc 01       	movw	r22, r24
    1244:	6f 5f       	subi	r22, 0xFF	; 255
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	81 5c       	subi	r24, 0xC1	; 193
    125c:	97 4f       	sbci	r25, 0xF7	; 247
    125e:	fc 01       	movw	r30, r24
    1260:	20 81       	ld	r18, Z
    1262:	31 81       	ldd	r19, Z+1	; 0x01
    1264:	42 81       	ldd	r20, Z+2	; 0x02
    1266:	53 81       	ldd	r21, Z+3	; 0x03
    1268:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    126c:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    1270:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    1274:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    1278:	82 2b       	or	r24, r18
    127a:	93 2b       	or	r25, r19
    127c:	a4 2b       	or	r26, r20
    127e:	b5 2b       	or	r27, r21
    1280:	9b 01       	movw	r18, r22
    1282:	22 0f       	add	r18, r18
    1284:	33 1f       	adc	r19, r19
    1286:	22 0f       	add	r18, r18
    1288:	33 1f       	adc	r19, r19
    128a:	21 5c       	subi	r18, 0xC1	; 193
    128c:	37 4f       	sbci	r19, 0xF7	; 247
    128e:	f9 01       	movw	r30, r18
    1290:	80 83       	st	Z, r24
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	a2 83       	std	Z+2, r26	; 0x02
    1296:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 2] |= temp_line[2];
    1298:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	bc 01       	movw	r22, r24
    12a2:	6e 5f       	subi	r22, 0xFE	; 254
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 96       	adiw	r24, 0x02	; 2
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	81 5c       	subi	r24, 0xC1	; 193
    12ba:	97 4f       	sbci	r25, 0xF7	; 247
    12bc:	fc 01       	movw	r30, r24
    12be:	20 81       	ld	r18, Z
    12c0:	31 81       	ldd	r19, Z+1	; 0x01
    12c2:	42 81       	ldd	r20, Z+2	; 0x02
    12c4:	53 81       	ldd	r21, Z+3	; 0x03
    12c6:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    12ca:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    12ce:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    12d2:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    12d6:	82 2b       	or	r24, r18
    12d8:	93 2b       	or	r25, r19
    12da:	a4 2b       	or	r26, r20
    12dc:	b5 2b       	or	r27, r21
    12de:	9b 01       	movw	r18, r22
    12e0:	22 0f       	add	r18, r18
    12e2:	33 1f       	adc	r19, r19
    12e4:	22 0f       	add	r18, r18
    12e6:	33 1f       	adc	r19, r19
    12e8:	21 5c       	subi	r18, 0xC1	; 193
    12ea:	37 4f       	sbci	r19, 0xF7	; 247
    12ec:	f9 01       	movw	r30, r18
    12ee:	80 83       	st	Z, r24
    12f0:	91 83       	std	Z+1, r25	; 0x01
    12f2:	a2 83       	std	Z+2, r26	; 0x02
    12f4:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 3] |= temp_line[3];
    12f6:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	bc 01       	movw	r22, r24
    1300:	6d 5f       	subi	r22, 0xFD	; 253
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	03 96       	adiw	r24, 0x03	; 3
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	81 5c       	subi	r24, 0xC1	; 193
    1318:	97 4f       	sbci	r25, 0xF7	; 247
    131a:	fc 01       	movw	r30, r24
    131c:	20 81       	ld	r18, Z
    131e:	31 81       	ldd	r19, Z+1	; 0x01
    1320:	42 81       	ldd	r20, Z+2	; 0x02
    1322:	53 81       	ldd	r21, Z+3	; 0x03
    1324:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    1328:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    132c:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    1330:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    1334:	82 2b       	or	r24, r18
    1336:	93 2b       	or	r25, r19
    1338:	a4 2b       	or	r26, r20
    133a:	b5 2b       	or	r27, r21
    133c:	9b 01       	movw	r18, r22
    133e:	22 0f       	add	r18, r18
    1340:	33 1f       	adc	r19, r19
    1342:	22 0f       	add	r18, r18
    1344:	33 1f       	adc	r19, r19
    1346:	21 5c       	subi	r18, 0xC1	; 193
    1348:	37 4f       	sbci	r19, 0xF7	; 247
    134a:	f9 01       	movw	r30, r18
    134c:	80 83       	st	Z, r24
    134e:	91 83       	std	Z+1, r25	; 0x01
    1350:	a2 83       	std	Z+2, r26	; 0x02
    1352:	b3 83       	std	Z+3, r27	; 0x03
	}
	else
	{
		screen = Menu_snake;
	}
}
    1354:	02 c0       	rjmp	.+4      	; 0x135a <__stack+0x25b>
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
	else
	{
		screen = Menu_snake;
    1356:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <screen>
	}
}
    135a:	00 00       	nop
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	bf 91       	pop	r27
    136a:	af 91       	pop	r26
    136c:	9f 91       	pop	r25
    136e:	8f 91       	pop	r24
    1370:	7f 91       	pop	r23
    1372:	6f 91       	pop	r22
    1374:	5f 91       	pop	r21
    1376:	4f 91       	pop	r20
    1378:	3f 91       	pop	r19
    137a:	2f 91       	pop	r18
    137c:	0f 90       	pop	r0
    137e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1382:	0f 90       	pop	r0
    1384:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1388:	0f 90       	pop	r0
    138a:	1f 90       	pop	r1
    138c:	18 95       	reti

0000138e <__vector_6>:




ISR(INT5_vect)
{
    138e:	1f 92       	push	r1
    1390:	0f 92       	push	r0
    1392:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1396:	0f 92       	push	r0
    1398:	11 24       	eor	r1, r1
    139a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    139e:	0f 92       	push	r0
    13a0:	2f 93       	push	r18
    13a2:	3f 93       	push	r19
    13a4:	4f 93       	push	r20
    13a6:	5f 93       	push	r21
    13a8:	6f 93       	push	r22
    13aa:	7f 93       	push	r23
    13ac:	8f 93       	push	r24
    13ae:	9f 93       	push	r25
    13b0:	af 93       	push	r26
    13b2:	bf 93       	push	r27
    13b4:	ef 93       	push	r30
    13b6:	ff 93       	push	r31
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	00 d0       	rcall	.+0      	; 0x13be <__vector_6+0x30>
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	SendCommand01(0x0F, 0x01, 0x03);
    13c2:	43 e0       	ldi	r20, 0x03	; 3
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	8f e0       	ldi	r24, 0x0F	; 15
    13c8:	50 d9       	rcall	.-3424   	; 0x66a <SendCommand01>
	if(screen == Menu_snake)
    13ca:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    13ce:	88 23       	and	r24, r24
    13d0:	21 f4       	brne	.+8      	; 0x13da <__vector_6+0x4c>
	{
		screen = Menu_tetris;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
		game_board[cur_line + 1] |= temp_line[1];
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
	
}
    13d8:	12 c1       	rjmp	.+548    	; 0x15fe <__vector_6+0x270>
	SendCommand01(0x0F, 0x01, 0x03);
	if(screen == Menu_snake)
	{
		screen = Menu_tetris;
	}
	else if(screen == Menu_tetris)
    13da:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	19 f4       	brne	.+6      	; 0x13e8 <__vector_6+0x5a>
	{
		screen = Menu_snake;
    13e2:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <screen>
		game_board[cur_line + 1] |= temp_line[1];
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
	
}
    13e6:	0b c1       	rjmp	.+534    	; 0x15fe <__vector_6+0x270>
	}
	else if(screen == Menu_tetris)
	{
		screen = Menu_snake;
	}
	else if(screen == Play_snake)
    13e8:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	79 f4       	brne	.+30     	; 0x140e <__vector_6+0x80>
	{
		if(dir != DOWN)
    13f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    13f4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    13f8:	80 35       	cpi	r24, 0x50	; 80
    13fa:	91 05       	cpc	r25, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <__vector_6+0x72>
    13fe:	ff c0       	rjmp	.+510    	; 0x15fe <__vector_6+0x270>
		{
			//SendCommand01(0x0F, 0x01, 0x03);
			
			dir = UP;
    1400:	88 e4       	ldi	r24, 0x48	; 72
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    1408:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
		game_board[cur_line + 1] |= temp_line[1];
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
	
}
    140c:	f8 c0       	rjmp	.+496    	; 0x15fe <__vector_6+0x270>
			//SendCommand01(0x0F, 0x01, 0x03);
			
			dir = UP;
		}
	}
	else if(screen == Play_tetris)
    140e:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	09 f0       	breq	.+2      	; 0x1418 <__vector_6+0x8a>
    1416:	f3 c0       	rjmp	.+486    	; 0x15fe <__vector_6+0x270>
	{
		for(int i = 0; i < 32; i++)
    1418:	1a 82       	std	Y+2, r1	; 0x02
    141a:	19 82       	std	Y+1, r1	; 0x01
    141c:	1f c0       	rjmp	.+62     	; 0x145c <__vector_6+0xce>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	84 56       	subi	r24, 0x64	; 100
    142c:	98 4f       	sbci	r25, 0xF8	; 248
    142e:	fc 01       	movw	r30, r24
    1430:	80 81       	ld	r24, Z
    1432:	91 81       	ldd	r25, Z+1	; 0x01
    1434:	a2 81       	ldd	r26, Z+2	; 0x02
    1436:	b3 81       	ldd	r27, Z+3	; 0x03
    1438:	29 81       	ldd	r18, Y+1	; 0x01
    143a:	3a 81       	ldd	r19, Y+2	; 0x02
    143c:	22 0f       	add	r18, r18
    143e:	33 1f       	adc	r19, r19
    1440:	22 0f       	add	r18, r18
    1442:	33 1f       	adc	r19, r19
    1444:	21 5c       	subi	r18, 0xC1	; 193
    1446:	37 4f       	sbci	r19, 0xF7	; 247
    1448:	f9 01       	movw	r30, r18
    144a:	80 83       	st	Z, r24
    144c:	91 83       	std	Z+1, r25	; 0x01
    144e:	a2 83       	std	Z+2, r26	; 0x02
    1450:	b3 83       	std	Z+3, r27	; 0x03
			dir = UP;
		}
	}
	else if(screen == Play_tetris)
	{
		for(int i = 0; i < 32; i++)
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	9a 81       	ldd	r25, Y+2	; 0x02
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	9a 83       	std	Y+2, r25	; 0x02
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	9a 81       	ldd	r25, Y+2	; 0x02
    1460:	80 97       	sbiw	r24, 0x20	; 32
    1462:	ec f2       	brlt	.-70     	; 0x141e <__vector_6+0x90>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
		}

		pattern++;	//회전으로 상태 변화
    1464:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
    1468:	8f 5f       	subi	r24, 0xFF	; 255
    146a:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <pattern>
		if(pattern == 4) pattern = 0; //마지막에서 처음으로
    146e:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
    1472:	84 30       	cpi	r24, 0x04	; 4
    1474:	11 f4       	brne	.+4      	; 0x147a <__vector_6+0xec>
    1476:	10 92 2b 08 	sts	0x082B, r1	; 0x80082b <pattern>

		tetriminos_to_temp_line();

		if(Collision() == 1) pattern--;
    147a:	46 dc       	rcall	.-1908   	; 0xd08 <tetriminos_to_temp_line>
    147c:	a6 db       	rcall	.-2228   	; 0xbca <Collision>
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	29 f4       	brne	.+10     	; 0x148c <__vector_6+0xfe>
    1482:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <pattern>
    1486:	81 50       	subi	r24, 0x01	; 1
    1488:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <pattern>


		tetriminos_to_temp_line();
    148c:	3d dc       	rcall	.-1926   	; 0xd08 <tetriminos_to_temp_line>

		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
    148e:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1492:	68 2f       	mov	r22, r24
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    149a:	88 2f       	mov	r24, r24
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	81 5c       	subi	r24, 0xC1	; 193
    14a8:	97 4f       	sbci	r25, 0xF7	; 247
    14aa:	fc 01       	movw	r30, r24
    14ac:	20 81       	ld	r18, Z
    14ae:	31 81       	ldd	r19, Z+1	; 0x01
    14b0:	42 81       	ldd	r20, Z+2	; 0x02
    14b2:	53 81       	ldd	r21, Z+3	; 0x03
    14b4:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    14b8:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    14bc:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    14c0:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    14c4:	82 2b       	or	r24, r18
    14c6:	93 2b       	or	r25, r19
    14c8:	a4 2b       	or	r26, r20
    14ca:	b5 2b       	or	r27, r21
    14cc:	9b 01       	movw	r18, r22
    14ce:	22 0f       	add	r18, r18
    14d0:	33 1f       	adc	r19, r19
    14d2:	22 0f       	add	r18, r18
    14d4:	33 1f       	adc	r19, r19
    14d6:	21 5c       	subi	r18, 0xC1	; 193
    14d8:	37 4f       	sbci	r19, 0xF7	; 247
    14da:	f9 01       	movw	r30, r18
    14dc:	80 83       	st	Z, r24
    14de:	91 83       	std	Z+1, r25	; 0x01
    14e0:	a2 83       	std	Z+2, r26	; 0x02
    14e2:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 1] |= temp_line[1];
    14e4:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	bc 01       	movw	r22, r24
    14ee:	6f 5f       	subi	r22, 0xFF	; 255
    14f0:	7f 4f       	sbci	r23, 0xFF	; 255
    14f2:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	81 5c       	subi	r24, 0xC1	; 193
    1506:	97 4f       	sbci	r25, 0xF7	; 247
    1508:	fc 01       	movw	r30, r24
    150a:	20 81       	ld	r18, Z
    150c:	31 81       	ldd	r19, Z+1	; 0x01
    150e:	42 81       	ldd	r20, Z+2	; 0x02
    1510:	53 81       	ldd	r21, Z+3	; 0x03
    1512:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    1516:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    151a:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    151e:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    1522:	82 2b       	or	r24, r18
    1524:	93 2b       	or	r25, r19
    1526:	a4 2b       	or	r26, r20
    1528:	b5 2b       	or	r27, r21
    152a:	9b 01       	movw	r18, r22
    152c:	22 0f       	add	r18, r18
    152e:	33 1f       	adc	r19, r19
    1530:	22 0f       	add	r18, r18
    1532:	33 1f       	adc	r19, r19
    1534:	21 5c       	subi	r18, 0xC1	; 193
    1536:	37 4f       	sbci	r19, 0xF7	; 247
    1538:	f9 01       	movw	r30, r18
    153a:	80 83       	st	Z, r24
    153c:	91 83       	std	Z+1, r25	; 0x01
    153e:	a2 83       	std	Z+2, r26	; 0x02
    1540:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 2] |= temp_line[2];
    1542:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	bc 01       	movw	r22, r24
    154c:	6e 5f       	subi	r22, 0xFE	; 254
    154e:	7f 4f       	sbci	r23, 0xFF	; 255
    1550:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1554:	88 2f       	mov	r24, r24
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 96       	adiw	r24, 0x02	; 2
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	81 5c       	subi	r24, 0xC1	; 193
    1564:	97 4f       	sbci	r25, 0xF7	; 247
    1566:	fc 01       	movw	r30, r24
    1568:	20 81       	ld	r18, Z
    156a:	31 81       	ldd	r19, Z+1	; 0x01
    156c:	42 81       	ldd	r20, Z+2	; 0x02
    156e:	53 81       	ldd	r21, Z+3	; 0x03
    1570:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    1574:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    1578:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    157c:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    1580:	82 2b       	or	r24, r18
    1582:	93 2b       	or	r25, r19
    1584:	a4 2b       	or	r26, r20
    1586:	b5 2b       	or	r27, r21
    1588:	9b 01       	movw	r18, r22
    158a:	22 0f       	add	r18, r18
    158c:	33 1f       	adc	r19, r19
    158e:	22 0f       	add	r18, r18
    1590:	33 1f       	adc	r19, r19
    1592:	21 5c       	subi	r18, 0xC1	; 193
    1594:	37 4f       	sbci	r19, 0xF7	; 247
    1596:	f9 01       	movw	r30, r18
    1598:	80 83       	st	Z, r24
    159a:	91 83       	std	Z+1, r25	; 0x01
    159c:	a2 83       	std	Z+2, r26	; 0x02
    159e:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 3] |= temp_line[3];
    15a0:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	bc 01       	movw	r22, r24
    15aa:	6d 5f       	subi	r22, 0xFD	; 253
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	03 96       	adiw	r24, 0x03	; 3
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	81 5c       	subi	r24, 0xC1	; 193
    15c2:	97 4f       	sbci	r25, 0xF7	; 247
    15c4:	fc 01       	movw	r30, r24
    15c6:	20 81       	ld	r18, Z
    15c8:	31 81       	ldd	r19, Z+1	; 0x01
    15ca:	42 81       	ldd	r20, Z+2	; 0x02
    15cc:	53 81       	ldd	r21, Z+3	; 0x03
    15ce:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    15d2:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    15d6:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    15da:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    15de:	82 2b       	or	r24, r18
    15e0:	93 2b       	or	r25, r19
    15e2:	a4 2b       	or	r26, r20
    15e4:	b5 2b       	or	r27, r21
    15e6:	9b 01       	movw	r18, r22
    15e8:	22 0f       	add	r18, r18
    15ea:	33 1f       	adc	r19, r19
    15ec:	22 0f       	add	r18, r18
    15ee:	33 1f       	adc	r19, r19
    15f0:	21 5c       	subi	r18, 0xC1	; 193
    15f2:	37 4f       	sbci	r19, 0xF7	; 247
    15f4:	f9 01       	movw	r30, r18
    15f6:	80 83       	st	Z, r24
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	a2 83       	std	Z+2, r26	; 0x02
    15fc:	b3 83       	std	Z+3, r27	; 0x03
	}
	
}
    15fe:	00 00       	nop
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	ff 91       	pop	r31
    160a:	ef 91       	pop	r30
    160c:	bf 91       	pop	r27
    160e:	af 91       	pop	r26
    1610:	9f 91       	pop	r25
    1612:	8f 91       	pop	r24
    1614:	7f 91       	pop	r23
    1616:	6f 91       	pop	r22
    1618:	5f 91       	pop	r21
    161a:	4f 91       	pop	r20
    161c:	3f 91       	pop	r19
    161e:	2f 91       	pop	r18
    1620:	0f 90       	pop	r0
    1622:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1626:	0f 90       	pop	r0
    1628:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    162c:	0f 90       	pop	r0
    162e:	1f 90       	pop	r1
    1630:	18 95       	reti

00001632 <__vector_7>:

ISR(INT6_vect)
{
    1632:	1f 92       	push	r1
    1634:	0f 92       	push	r0
    1636:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    163a:	0f 92       	push	r0
    163c:	11 24       	eor	r1, r1
    163e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1642:	0f 92       	push	r0
    1644:	2f 93       	push	r18
    1646:	3f 93       	push	r19
    1648:	4f 93       	push	r20
    164a:	5f 93       	push	r21
    164c:	6f 93       	push	r22
    164e:	7f 93       	push	r23
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	af 93       	push	r26
    1656:	bf 93       	push	r27
    1658:	ef 93       	push	r30
    165a:	ff 93       	push	r31
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	00 d0       	rcall	.+0      	; 0x1662 <__vector_7+0x30>
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
	SendCommand01(0x0F, 0x01, 0x03);
    1666:	43 e0       	ldi	r20, 0x03	; 3
    1668:	61 e0       	ldi	r22, 0x01	; 1
    166a:	8f e0       	ldi	r24, 0x0F	; 15
    166c:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
	if(screen == Menu_snake)
    1670:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1674:	88 23       	and	r24, r24
    1676:	21 f4       	brne	.+8      	; 0x1680 <__vector_7+0x4e>
	{
		screen = Menu_tetris;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
		game_board[cur_line + 1] |= temp_line[1];
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
}
    167e:	0d c1       	rjmp	.+538    	; 0x189a <__vector_7+0x268>
	SendCommand01(0x0F, 0x01, 0x03);
	if(screen == Menu_snake)
	{
		screen = Menu_tetris;
	}
	else if(screen == Menu_tetris)
    1680:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	19 f4       	brne	.+6      	; 0x168e <__vector_7+0x5c>
	{
		screen = Menu_snake;
    1688:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <screen>
		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
		game_board[cur_line + 1] |= temp_line[1];
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
}
    168c:	06 c1       	rjmp	.+524    	; 0x189a <__vector_7+0x268>
	}
	else if(screen == Menu_tetris)
	{
		screen = Menu_snake;
	}
	else if(screen == Play_snake)
    168e:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1692:	82 30       	cpi	r24, 0x02	; 2
    1694:	79 f4       	brne	.+30     	; 0x16b4 <__vector_7+0x82>
	{
		if(dir != UP)
    1696:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    169a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    169e:	88 34       	cpi	r24, 0x48	; 72
    16a0:	91 05       	cpc	r25, r1
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <__vector_7+0x74>
    16a4:	fa c0       	rjmp	.+500    	; 0x189a <__vector_7+0x268>
		{
			//SendCommand01(0x0F, 0x01, 0x03);
			
			dir = DOWN;
    16a6:	80 e5       	ldi	r24, 0x50	; 80
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    16ae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
		game_board[cur_line + 1] |= temp_line[1];
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
}
    16b2:	f3 c0       	rjmp	.+486    	; 0x189a <__vector_7+0x268>
			//SendCommand01(0x0F, 0x01, 0x03);
			
			dir = DOWN;
		}
	}
	else if(screen == Play_tetris)
    16b4:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    16b8:	83 30       	cpi	r24, 0x03	; 3
    16ba:	09 f0       	breq	.+2      	; 0x16be <__vector_7+0x8c>
    16bc:	ee c0       	rjmp	.+476    	; 0x189a <__vector_7+0x268>
	{
		for(int i = 0; i < 32; i++)
    16be:	1a 82       	std	Y+2, r1	; 0x02
    16c0:	19 82       	std	Y+1, r1	; 0x01
    16c2:	1f c0       	rjmp	.+62     	; 0x1702 <__vector_7+0xd0>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	84 56       	subi	r24, 0x64	; 100
    16d2:	98 4f       	sbci	r25, 0xF8	; 248
    16d4:	fc 01       	movw	r30, r24
    16d6:	80 81       	ld	r24, Z
    16d8:	91 81       	ldd	r25, Z+1	; 0x01
    16da:	a2 81       	ldd	r26, Z+2	; 0x02
    16dc:	b3 81       	ldd	r27, Z+3	; 0x03
    16de:	29 81       	ldd	r18, Y+1	; 0x01
    16e0:	3a 81       	ldd	r19, Y+2	; 0x02
    16e2:	22 0f       	add	r18, r18
    16e4:	33 1f       	adc	r19, r19
    16e6:	22 0f       	add	r18, r18
    16e8:	33 1f       	adc	r19, r19
    16ea:	21 5c       	subi	r18, 0xC1	; 193
    16ec:	37 4f       	sbci	r19, 0xF7	; 247
    16ee:	f9 01       	movw	r30, r18
    16f0:	80 83       	st	Z, r24
    16f2:	91 83       	std	Z+1, r25	; 0x01
    16f4:	a2 83       	std	Z+2, r26	; 0x02
    16f6:	b3 83       	std	Z+3, r27	; 0x03
			dir = DOWN;
		}
	}
	else if(screen == Play_tetris)
	{
		for(int i = 0; i < 32; i++)
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	9a 81       	ldd	r25, Y+2	; 0x02
    16fc:	01 96       	adiw	r24, 0x01	; 1
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	9a 81       	ldd	r25, Y+2	; 0x02
    1706:	80 97       	sbiw	r24, 0x20	; 32
    1708:	ec f2       	brlt	.-70     	; 0x16c4 <__vector_7+0x92>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
		}
		
		tetriminos_to_temp_line();
    170a:	fe da       	rcall	.-2564   	; 0xd08 <tetriminos_to_temp_line>

		while(Collision() == 0) cur_line++;
    170c:	05 c0       	rjmp	.+10     	; 0x1718 <__vector_7+0xe6>
    170e:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1712:	8f 5f       	subi	r24, 0xFF	; 255
    1714:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <cur_line>
    1718:	58 da       	rcall	.-2896   	; 0xbca <Collision>
    171a:	88 23       	and	r24, r24
    171c:	c1 f3       	breq	.-16     	; 0x170e <__vector_7+0xdc>

		cur_line--;
    171e:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1722:	81 50       	subi	r24, 0x01	; 1
    1724:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <cur_line>

		tetriminos_to_temp_line();
    1728:	ef da       	rcall	.-2594   	; 0xd08 <tetriminos_to_temp_line>

		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
    172a:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    172e:	68 2f       	mov	r22, r24
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1736:	88 2f       	mov	r24, r24
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	81 5c       	subi	r24, 0xC1	; 193
    1744:	97 4f       	sbci	r25, 0xF7	; 247
    1746:	fc 01       	movw	r30, r24
    1748:	20 81       	ld	r18, Z
    174a:	31 81       	ldd	r19, Z+1	; 0x01
    174c:	42 81       	ldd	r20, Z+2	; 0x02
    174e:	53 81       	ldd	r21, Z+3	; 0x03
    1750:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    1754:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    1758:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    175c:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    1760:	82 2b       	or	r24, r18
    1762:	93 2b       	or	r25, r19
    1764:	a4 2b       	or	r26, r20
    1766:	b5 2b       	or	r27, r21
    1768:	9b 01       	movw	r18, r22
    176a:	22 0f       	add	r18, r18
    176c:	33 1f       	adc	r19, r19
    176e:	22 0f       	add	r18, r18
    1770:	33 1f       	adc	r19, r19
    1772:	21 5c       	subi	r18, 0xC1	; 193
    1774:	37 4f       	sbci	r19, 0xF7	; 247
    1776:	f9 01       	movw	r30, r18
    1778:	80 83       	st	Z, r24
    177a:	91 83       	std	Z+1, r25	; 0x01
    177c:	a2 83       	std	Z+2, r26	; 0x02
    177e:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 1] |= temp_line[1];
    1780:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1784:	88 2f       	mov	r24, r24
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	bc 01       	movw	r22, r24
    178a:	6f 5f       	subi	r22, 0xFF	; 255
    178c:	7f 4f       	sbci	r23, 0xFF	; 255
    178e:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	01 96       	adiw	r24, 0x01	; 1
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	81 5c       	subi	r24, 0xC1	; 193
    17a2:	97 4f       	sbci	r25, 0xF7	; 247
    17a4:	fc 01       	movw	r30, r24
    17a6:	20 81       	ld	r18, Z
    17a8:	31 81       	ldd	r19, Z+1	; 0x01
    17aa:	42 81       	ldd	r20, Z+2	; 0x02
    17ac:	53 81       	ldd	r21, Z+3	; 0x03
    17ae:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    17b2:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    17b6:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    17ba:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    17be:	82 2b       	or	r24, r18
    17c0:	93 2b       	or	r25, r19
    17c2:	a4 2b       	or	r26, r20
    17c4:	b5 2b       	or	r27, r21
    17c6:	9b 01       	movw	r18, r22
    17c8:	22 0f       	add	r18, r18
    17ca:	33 1f       	adc	r19, r19
    17cc:	22 0f       	add	r18, r18
    17ce:	33 1f       	adc	r19, r19
    17d0:	21 5c       	subi	r18, 0xC1	; 193
    17d2:	37 4f       	sbci	r19, 0xF7	; 247
    17d4:	f9 01       	movw	r30, r18
    17d6:	80 83       	st	Z, r24
    17d8:	91 83       	std	Z+1, r25	; 0x01
    17da:	a2 83       	std	Z+2, r26	; 0x02
    17dc:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 2] |= temp_line[2];
    17de:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	bc 01       	movw	r22, r24
    17e8:	6e 5f       	subi	r22, 0xFE	; 254
    17ea:	7f 4f       	sbci	r23, 0xFF	; 255
    17ec:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    17f0:	88 2f       	mov	r24, r24
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 96       	adiw	r24, 0x02	; 2
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	81 5c       	subi	r24, 0xC1	; 193
    1800:	97 4f       	sbci	r25, 0xF7	; 247
    1802:	fc 01       	movw	r30, r24
    1804:	20 81       	ld	r18, Z
    1806:	31 81       	ldd	r19, Z+1	; 0x01
    1808:	42 81       	ldd	r20, Z+2	; 0x02
    180a:	53 81       	ldd	r21, Z+3	; 0x03
    180c:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    1810:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    1814:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    1818:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    181c:	82 2b       	or	r24, r18
    181e:	93 2b       	or	r25, r19
    1820:	a4 2b       	or	r26, r20
    1822:	b5 2b       	or	r27, r21
    1824:	9b 01       	movw	r18, r22
    1826:	22 0f       	add	r18, r18
    1828:	33 1f       	adc	r19, r19
    182a:	22 0f       	add	r18, r18
    182c:	33 1f       	adc	r19, r19
    182e:	21 5c       	subi	r18, 0xC1	; 193
    1830:	37 4f       	sbci	r19, 0xF7	; 247
    1832:	f9 01       	movw	r30, r18
    1834:	80 83       	st	Z, r24
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	a2 83       	std	Z+2, r26	; 0x02
    183a:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 3] |= temp_line[3];
    183c:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1840:	88 2f       	mov	r24, r24
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	bc 01       	movw	r22, r24
    1846:	6d 5f       	subi	r22, 0xFD	; 253
    1848:	7f 4f       	sbci	r23, 0xFF	; 255
    184a:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    184e:	88 2f       	mov	r24, r24
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	03 96       	adiw	r24, 0x03	; 3
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	81 5c       	subi	r24, 0xC1	; 193
    185e:	97 4f       	sbci	r25, 0xF7	; 247
    1860:	fc 01       	movw	r30, r24
    1862:	20 81       	ld	r18, Z
    1864:	31 81       	ldd	r19, Z+1	; 0x01
    1866:	42 81       	ldd	r20, Z+2	; 0x02
    1868:	53 81       	ldd	r21, Z+3	; 0x03
    186a:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    186e:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    1872:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    1876:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    187a:	82 2b       	or	r24, r18
    187c:	93 2b       	or	r25, r19
    187e:	a4 2b       	or	r26, r20
    1880:	b5 2b       	or	r27, r21
    1882:	9b 01       	movw	r18, r22
    1884:	22 0f       	add	r18, r18
    1886:	33 1f       	adc	r19, r19
    1888:	22 0f       	add	r18, r18
    188a:	33 1f       	adc	r19, r19
    188c:	21 5c       	subi	r18, 0xC1	; 193
    188e:	37 4f       	sbci	r19, 0xF7	; 247
    1890:	f9 01       	movw	r30, r18
    1892:	80 83       	st	Z, r24
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	a2 83       	std	Z+2, r26	; 0x02
    1898:	b3 83       	std	Z+3, r27	; 0x03
	}
}
    189a:	00 00       	nop
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	ff 91       	pop	r31
    18a6:	ef 91       	pop	r30
    18a8:	bf 91       	pop	r27
    18aa:	af 91       	pop	r26
    18ac:	9f 91       	pop	r25
    18ae:	8f 91       	pop	r24
    18b0:	7f 91       	pop	r23
    18b2:	6f 91       	pop	r22
    18b4:	5f 91       	pop	r21
    18b6:	4f 91       	pop	r20
    18b8:	3f 91       	pop	r19
    18ba:	2f 91       	pop	r18
    18bc:	0f 90       	pop	r0
    18be:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    18c2:	0f 90       	pop	r0
    18c4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18c8:	0f 90       	pop	r0
    18ca:	1f 90       	pop	r1
    18cc:	18 95       	reti

000018ce <__vector_8>:

ISR(INT7_vect)
{
    18ce:	1f 92       	push	r1
    18d0:	0f 92       	push	r0
    18d2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18d6:	0f 92       	push	r0
    18d8:	11 24       	eor	r1, r1
    18da:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    18de:	0f 92       	push	r0
    18e0:	2f 93       	push	r18
    18e2:	3f 93       	push	r19
    18e4:	4f 93       	push	r20
    18e6:	5f 93       	push	r21
    18e8:	6f 93       	push	r22
    18ea:	7f 93       	push	r23
    18ec:	8f 93       	push	r24
    18ee:	9f 93       	push	r25
    18f0:	af 93       	push	r26
    18f2:	bf 93       	push	r27
    18f4:	ef 93       	push	r30
    18f6:	ff 93       	push	r31
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <__vector_8+0x30>
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
	SendCommand01(0x0F, 0x01, 0x03);
    1902:	43 e0       	ldi	r20, 0x03	; 3
    1904:	61 e0       	ldi	r22, 0x01	; 1
    1906:	8f e0       	ldi	r24, 0x0F	; 15
    1908:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
	if(screen == Menu_snake)
    190c:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1910:	88 23       	and	r24, r24
    1912:	21 f4       	brne	.+8      	; 0x191c <__vector_8+0x4e>
	{
		screen = Play_snake;
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
	}
	else
	{
		screen = Menu_snake;
	}
}
    191a:	15 c1       	rjmp	.+554    	; 0x1b46 <__vector_8+0x278>
	SendCommand01(0x0F, 0x01, 0x03);
	if(screen == Menu_snake)
	{
		screen = Play_snake;
	}
	else if(screen == Menu_tetris)
    191c:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	21 f4       	brne	.+8      	; 0x192c <__vector_8+0x5e>
	{
		screen = Play_tetris;
    1924:	83 e0       	ldi	r24, 0x03	; 3
    1926:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
	}
	else
	{
		screen = Menu_snake;
	}
}
    192a:	0d c1       	rjmp	.+538    	; 0x1b46 <__vector_8+0x278>
	}
	else if(screen == Menu_tetris)
	{
		screen = Play_tetris;
	}
	else if(screen == Play_snake)
    192c:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1930:	82 30       	cpi	r24, 0x02	; 2
    1932:	a1 f4       	brne	.+40     	; 0x195c <__vector_8+0x8e>
	{
		if(dir != RIGHT)
    1934:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    1938:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    193c:	8d 34       	cpi	r24, 0x4D	; 77
    193e:	91 05       	cpc	r25, r1
    1940:	09 f4       	brne	.+2      	; 0x1944 <__vector_8+0x76>
    1942:	01 c1       	rjmp	.+514    	; 0x1b46 <__vector_8+0x278>
		{
			SendCommand01(0x0F, 0x01, 0x03);
    1944:	43 e0       	ldi	r20, 0x03	; 3
    1946:	61 e0       	ldi	r22, 0x01	; 1
    1948:	8f e0       	ldi	r24, 0x0F	; 15
    194a:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
			
			dir = LEFT;
    194e:	8b e4       	ldi	r24, 0x4B	; 75
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    1956:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
	else
	{
		screen = Menu_snake;
	}
}
    195a:	f5 c0       	rjmp	.+490    	; 0x1b46 <__vector_8+0x278>
			SendCommand01(0x0F, 0x01, 0x03);
			
			dir = LEFT;
		}
	}
	else if(screen == Play_tetris)
    195c:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1960:	83 30       	cpi	r24, 0x03	; 3
    1962:	09 f0       	breq	.+2      	; 0x1966 <__vector_8+0x98>
    1964:	ee c0       	rjmp	.+476    	; 0x1b42 <__vector_8+0x274>
	{
		for(int i = 0; i < 32; i++)
    1966:	1a 82       	std	Y+2, r1	; 0x02
    1968:	19 82       	std	Y+1, r1	; 0x01
    196a:	1f c0       	rjmp	.+62     	; 0x19aa <__vector_8+0xdc>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	84 56       	subi	r24, 0x64	; 100
    197a:	98 4f       	sbci	r25, 0xF8	; 248
    197c:	fc 01       	movw	r30, r24
    197e:	80 81       	ld	r24, Z
    1980:	91 81       	ldd	r25, Z+1	; 0x01
    1982:	a2 81       	ldd	r26, Z+2	; 0x02
    1984:	b3 81       	ldd	r27, Z+3	; 0x03
    1986:	29 81       	ldd	r18, Y+1	; 0x01
    1988:	3a 81       	ldd	r19, Y+2	; 0x02
    198a:	22 0f       	add	r18, r18
    198c:	33 1f       	adc	r19, r19
    198e:	22 0f       	add	r18, r18
    1990:	33 1f       	adc	r19, r19
    1992:	21 5c       	subi	r18, 0xC1	; 193
    1994:	37 4f       	sbci	r19, 0xF7	; 247
    1996:	f9 01       	movw	r30, r18
    1998:	80 83       	st	Z, r24
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	a2 83       	std	Z+2, r26	; 0x02
    199e:	b3 83       	std	Z+3, r27	; 0x03
			dir = LEFT;
		}
	}
	else if(screen == Play_tetris)
	{
		for(int i = 0; i < 32; i++)
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	9a 81       	ldd	r25, Y+2	; 0x02
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	9a 81       	ldd	r25, Y+2	; 0x02
    19ae:	80 97       	sbiw	r24, 0x20	; 32
    19b0:	ec f2       	brlt	.-70     	; 0x196c <__vector_8+0x9e>
		{
			game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
		}

		cur_col++;
    19b2:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <cur_col>
    19b6:	8f 5f       	subi	r24, 0xFF	; 255
    19b8:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <cur_col>

		tetriminos_to_temp_line();
    19bc:	a5 d9       	rcall	.-3254   	; 0xd08 <tetriminos_to_temp_line>

		if(Collision() == 1) cur_col--;
    19be:	05 d9       	rcall	.-3574   	; 0xbca <Collision>
    19c0:	81 30       	cpi	r24, 0x01	; 1
    19c2:	29 f4       	brne	.+10     	; 0x19ce <__vector_8+0x100>
    19c4:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <cur_col>
    19c8:	81 50       	subi	r24, 0x01	; 1
    19ca:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <cur_col>
		
		tetriminos_to_temp_line();
    19ce:	9c d9       	rcall	.-3272   	; 0xd08 <tetriminos_to_temp_line>
    19d0:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>

		
		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
    19d4:	68 2f       	mov	r22, r24
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	81 5c       	subi	r24, 0xC1	; 193
    19ea:	97 4f       	sbci	r25, 0xF7	; 247
    19ec:	fc 01       	movw	r30, r24
    19ee:	20 81       	ld	r18, Z
    19f0:	31 81       	ldd	r19, Z+1	; 0x01
    19f2:	42 81       	ldd	r20, Z+2	; 0x02
    19f4:	53 81       	ldd	r21, Z+3	; 0x03
    19f6:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    19fa:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    19fe:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    1a02:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    1a06:	82 2b       	or	r24, r18
    1a08:	93 2b       	or	r25, r19
    1a0a:	a4 2b       	or	r26, r20
    1a0c:	b5 2b       	or	r27, r21
    1a0e:	9b 01       	movw	r18, r22
    1a10:	22 0f       	add	r18, r18
    1a12:	33 1f       	adc	r19, r19
    1a14:	22 0f       	add	r18, r18
    1a16:	33 1f       	adc	r19, r19
    1a18:	21 5c       	subi	r18, 0xC1	; 193
    1a1a:	37 4f       	sbci	r19, 0xF7	; 247
    1a1c:	f9 01       	movw	r30, r18
    1a1e:	80 83       	st	Z, r24
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	a2 83       	std	Z+2, r26	; 0x02
    1a24:	b3 83       	std	Z+3, r27	; 0x03
    1a26:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
		game_board[cur_line + 1] |= temp_line[1];
    1a2a:	88 2f       	mov	r24, r24
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	bc 01       	movw	r22, r24
    1a30:	6f 5f       	subi	r22, 0xFF	; 255
    1a32:	7f 4f       	sbci	r23, 0xFF	; 255
    1a34:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1a38:	88 2f       	mov	r24, r24
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	81 5c       	subi	r24, 0xC1	; 193
    1a48:	97 4f       	sbci	r25, 0xF7	; 247
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	20 81       	ld	r18, Z
    1a4e:	31 81       	ldd	r19, Z+1	; 0x01
    1a50:	42 81       	ldd	r20, Z+2	; 0x02
    1a52:	53 81       	ldd	r21, Z+3	; 0x03
    1a54:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    1a58:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    1a5c:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    1a60:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    1a64:	82 2b       	or	r24, r18
    1a66:	93 2b       	or	r25, r19
    1a68:	a4 2b       	or	r26, r20
    1a6a:	b5 2b       	or	r27, r21
    1a6c:	9b 01       	movw	r18, r22
    1a6e:	22 0f       	add	r18, r18
    1a70:	33 1f       	adc	r19, r19
    1a72:	22 0f       	add	r18, r18
    1a74:	33 1f       	adc	r19, r19
    1a76:	21 5c       	subi	r18, 0xC1	; 193
    1a78:	37 4f       	sbci	r19, 0xF7	; 247
    1a7a:	f9 01       	movw	r30, r18
    1a7c:	80 83       	st	Z, r24
    1a7e:	91 83       	std	Z+1, r25	; 0x01
    1a80:	a2 83       	std	Z+2, r26	; 0x02
    1a82:	b3 83       	std	Z+3, r27	; 0x03
    1a84:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
		game_board[cur_line + 2] |= temp_line[2];
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	bc 01       	movw	r22, r24
    1a8e:	6e 5f       	subi	r22, 0xFE	; 254
    1a90:	7f 4f       	sbci	r23, 0xFF	; 255
    1a92:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	02 96       	adiw	r24, 0x02	; 2
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	81 5c       	subi	r24, 0xC1	; 193
    1aa6:	97 4f       	sbci	r25, 0xF7	; 247
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	20 81       	ld	r18, Z
    1aac:	31 81       	ldd	r19, Z+1	; 0x01
    1aae:	42 81       	ldd	r20, Z+2	; 0x02
    1ab0:	53 81       	ldd	r21, Z+3	; 0x03
    1ab2:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    1ab6:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    1aba:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    1abe:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    1ac2:	82 2b       	or	r24, r18
    1ac4:	93 2b       	or	r25, r19
    1ac6:	a4 2b       	or	r26, r20
    1ac8:	b5 2b       	or	r27, r21
    1aca:	9b 01       	movw	r18, r22
    1acc:	22 0f       	add	r18, r18
    1ace:	33 1f       	adc	r19, r19
    1ad0:	22 0f       	add	r18, r18
    1ad2:	33 1f       	adc	r19, r19
    1ad4:	21 5c       	subi	r18, 0xC1	; 193
    1ad6:	37 4f       	sbci	r19, 0xF7	; 247
    1ad8:	f9 01       	movw	r30, r18
    1ada:	80 83       	st	Z, r24
    1adc:	91 83       	std	Z+1, r25	; 0x01
    1ade:	a2 83       	std	Z+2, r26	; 0x02
    1ae0:	b3 83       	std	Z+3, r27	; 0x03
    1ae2:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
		game_board[cur_line + 3] |= temp_line[3];
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	bc 01       	movw	r22, r24
    1aec:	6d 5f       	subi	r22, 0xFD	; 253
    1aee:	7f 4f       	sbci	r23, 0xFF	; 255
    1af0:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	03 96       	adiw	r24, 0x03	; 3
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	81 5c       	subi	r24, 0xC1	; 193
    1b04:	97 4f       	sbci	r25, 0xF7	; 247
    1b06:	fc 01       	movw	r30, r24
    1b08:	20 81       	ld	r18, Z
    1b0a:	31 81       	ldd	r19, Z+1	; 0x01
    1b0c:	42 81       	ldd	r20, Z+2	; 0x02
    1b0e:	53 81       	ldd	r21, Z+3	; 0x03
    1b10:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    1b14:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    1b18:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    1b1c:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    1b20:	82 2b       	or	r24, r18
    1b22:	93 2b       	or	r25, r19
    1b24:	a4 2b       	or	r26, r20
    1b26:	b5 2b       	or	r27, r21
    1b28:	9b 01       	movw	r18, r22
    1b2a:	22 0f       	add	r18, r18
    1b2c:	33 1f       	adc	r19, r19
    1b2e:	22 0f       	add	r18, r18
    1b30:	33 1f       	adc	r19, r19
    1b32:	21 5c       	subi	r18, 0xC1	; 193
    1b34:	37 4f       	sbci	r19, 0xF7	; 247
    1b36:	f9 01       	movw	r30, r18
    1b38:	80 83       	st	Z, r24
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	a2 83       	std	Z+2, r26	; 0x02
    1b3e:	b3 83       	std	Z+3, r27	; 0x03
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <__vector_8+0x278>
	}
	else
	{
		screen = Menu_snake;
	}
}
    1b42:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <screen>
		game_board[cur_line + 2] |= temp_line[2];
		game_board[cur_line + 3] |= temp_line[3];
	}
	else
	{
		screen = Menu_snake;
    1b46:	00 00       	nop
	}
}
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	ff 91       	pop	r31
    1b52:	ef 91       	pop	r30
    1b54:	bf 91       	pop	r27
    1b56:	af 91       	pop	r26
    1b58:	9f 91       	pop	r25
    1b5a:	8f 91       	pop	r24
    1b5c:	7f 91       	pop	r23
    1b5e:	6f 91       	pop	r22
    1b60:	5f 91       	pop	r21
    1b62:	4f 91       	pop	r20
    1b64:	3f 91       	pop	r19
    1b66:	2f 91       	pop	r18
    1b68:	0f 90       	pop	r0
    1b6a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1b6e:	0f 90       	pop	r0
    1b70:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b74:	0f 90       	pop	r0
    1b76:	1f 90       	pop	r1
    1b78:	18 95       	reti

00001b7a <__vector_12>:
    1b7a:	1f 92       	push	r1

ISR(TIMER1_COMPA_vect)	//OCR1A값에 따라 블록 이동속도가 결정된다.
{
    1b7c:	0f 92       	push	r0
    1b7e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b82:	0f 92       	push	r0
    1b84:	11 24       	eor	r1, r1
    1b86:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1b8a:	0f 92       	push	r0
    1b8c:	2f 93       	push	r18
    1b8e:	3f 93       	push	r19
    1b90:	4f 93       	push	r20
    1b92:	5f 93       	push	r21
    1b94:	6f 93       	push	r22
    1b96:	7f 93       	push	r23
    1b98:	8f 93       	push	r24
    1b9a:	9f 93       	push	r25
    1b9c:	af 93       	push	r26
    1b9e:	bf 93       	push	r27
    1ba0:	ef 93       	push	r30
    1ba2:	ff 93       	push	r31
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <__vector_12+0x30>
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <__vector_12+0x32>
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
	if(screen == Play_tetris)
    1bb0:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    1bb4:	83 30       	cpi	r24, 0x03	; 3
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <__vector_12+0x40>
    1bb8:	d3 c1       	rjmp	.+934    	; 0x1f60 <__vector_12+0x3e6>
	{
		if(new_block == 0)
    1bba:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <new_block>
    1bbe:	88 23       	and	r24, r24
    1bc0:	09 f0       	breq	.+2      	; 0x1bc4 <__vector_12+0x4a>
    1bc2:	ce c1       	rjmp	.+924    	; 0x1f60 <__vector_12+0x3e6>
		{
			for(int i = 0; i < 32; i++)
    1bc4:	1a 82       	std	Y+2, r1	; 0x02
    1bc6:	19 82       	std	Y+1, r1	; 0x01
    1bc8:	1f c0       	rjmp	.+62     	; 0x1c08 <__vector_12+0x8e>
			{
				game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	84 56       	subi	r24, 0x64	; 100
    1bd8:	98 4f       	sbci	r25, 0xF8	; 248
    1bda:	fc 01       	movw	r30, r24
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	a2 81       	ldd	r26, Z+2	; 0x02
    1be2:	b3 81       	ldd	r27, Z+3	; 0x03
    1be4:	29 81       	ldd	r18, Y+1	; 0x01
    1be6:	3a 81       	ldd	r19, Y+2	; 0x02
    1be8:	22 0f       	add	r18, r18
    1bea:	33 1f       	adc	r19, r19
    1bec:	22 0f       	add	r18, r18
    1bee:	33 1f       	adc	r19, r19
    1bf0:	21 5c       	subi	r18, 0xC1	; 193
    1bf2:	37 4f       	sbci	r19, 0xF7	; 247
    1bf4:	f9 01       	movw	r30, r18
    1bf6:	80 83       	st	Z, r24
    1bf8:	91 83       	std	Z+1, r25	; 0x01
    1bfa:	a2 83       	std	Z+2, r26	; 0x02
    1bfc:	b3 83       	std	Z+3, r27	; 0x03
{
	if(screen == Play_tetris)
	{
		if(new_block == 0)
		{
			for(int i = 0; i < 32; i++)
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	9a 81       	ldd	r25, Y+2	; 0x02
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	80 97       	sbiw	r24, 0x20	; 32
    1c0e:	ec f2       	brlt	.-70     	; 0x1bca <__vector_12+0x50>
			{
				game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
			}

			cur_line++;	//현재라인 아래로 이동
    1c10:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1c14:	8f 5f       	subi	r24, 0xFF	; 255
    1c16:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <cur_line>
			
			if(Collision() == 1)	//이동후 충돌 발생시
    1c1a:	0e 94 e5 05 	call	0xbca	; 0xbca <Collision>
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <__vector_12+0xaa>
    1c22:	c0 c0       	rjmp	.+384    	; 0x1da4 <__vector_12+0x22a>
			{
				cur_line--;	//원래 라인으로 복귀
    1c24:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1c28:	81 50       	subi	r24, 0x01	; 1
    1c2a:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <cur_line>
				main_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
    1c2e:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1c32:	68 2f       	mov	r22, r24
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1c3a:	88 2f       	mov	r24, r24
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	84 56       	subi	r24, 0x64	; 100
    1c48:	98 4f       	sbci	r25, 0xF8	; 248
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	20 81       	ld	r18, Z
    1c4e:	31 81       	ldd	r19, Z+1	; 0x01
    1c50:	42 81       	ldd	r20, Z+2	; 0x02
    1c52:	53 81       	ldd	r21, Z+3	; 0x03
    1c54:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    1c58:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    1c5c:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    1c60:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    1c64:	82 2b       	or	r24, r18
    1c66:	93 2b       	or	r25, r19
    1c68:	a4 2b       	or	r26, r20
    1c6a:	b5 2b       	or	r27, r21
    1c6c:	9b 01       	movw	r18, r22
    1c6e:	22 0f       	add	r18, r18
    1c70:	33 1f       	adc	r19, r19
    1c72:	22 0f       	add	r18, r18
    1c74:	33 1f       	adc	r19, r19
    1c76:	24 56       	subi	r18, 0x64	; 100
    1c78:	38 4f       	sbci	r19, 0xF8	; 248
    1c7a:	f9 01       	movw	r30, r18
    1c7c:	80 83       	st	Z, r24
    1c7e:	91 83       	std	Z+1, r25	; 0x01
    1c80:	a2 83       	std	Z+2, r26	; 0x02
    1c82:	b3 83       	std	Z+3, r27	; 0x03
				main_board[cur_line + 1] |= temp_line[1];
    1c84:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	6f 5f       	subi	r22, 0xFF	; 255
    1c90:	7f 4f       	sbci	r23, 0xFF	; 255
    1c92:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1c96:	88 2f       	mov	r24, r24
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	84 56       	subi	r24, 0x64	; 100
    1ca6:	98 4f       	sbci	r25, 0xF8	; 248
    1ca8:	fc 01       	movw	r30, r24
    1caa:	20 81       	ld	r18, Z
    1cac:	31 81       	ldd	r19, Z+1	; 0x01
    1cae:	42 81       	ldd	r20, Z+2	; 0x02
    1cb0:	53 81       	ldd	r21, Z+3	; 0x03
    1cb2:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    1cb6:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    1cba:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    1cbe:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    1cc2:	82 2b       	or	r24, r18
    1cc4:	93 2b       	or	r25, r19
    1cc6:	a4 2b       	or	r26, r20
    1cc8:	b5 2b       	or	r27, r21
    1cca:	9b 01       	movw	r18, r22
    1ccc:	22 0f       	add	r18, r18
    1cce:	33 1f       	adc	r19, r19
    1cd0:	22 0f       	add	r18, r18
    1cd2:	33 1f       	adc	r19, r19
    1cd4:	24 56       	subi	r18, 0x64	; 100
    1cd6:	38 4f       	sbci	r19, 0xF8	; 248
    1cd8:	f9 01       	movw	r30, r18
    1cda:	80 83       	st	Z, r24
    1cdc:	91 83       	std	Z+1, r25	; 0x01
    1cde:	a2 83       	std	Z+2, r26	; 0x02
    1ce0:	b3 83       	std	Z+3, r27	; 0x03
				main_board[cur_line + 2] |= temp_line[2];
    1ce2:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1ce6:	88 2f       	mov	r24, r24
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	bc 01       	movw	r22, r24
    1cec:	6e 5f       	subi	r22, 0xFE	; 254
    1cee:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf0:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	02 96       	adiw	r24, 0x02	; 2
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	84 56       	subi	r24, 0x64	; 100
    1d04:	98 4f       	sbci	r25, 0xF8	; 248
    1d06:	fc 01       	movw	r30, r24
    1d08:	20 81       	ld	r18, Z
    1d0a:	31 81       	ldd	r19, Z+1	; 0x01
    1d0c:	42 81       	ldd	r20, Z+2	; 0x02
    1d0e:	53 81       	ldd	r21, Z+3	; 0x03
    1d10:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    1d14:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    1d18:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    1d1c:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    1d20:	82 2b       	or	r24, r18
    1d22:	93 2b       	or	r25, r19
    1d24:	a4 2b       	or	r26, r20
    1d26:	b5 2b       	or	r27, r21
    1d28:	9b 01       	movw	r18, r22
    1d2a:	22 0f       	add	r18, r18
    1d2c:	33 1f       	adc	r19, r19
    1d2e:	22 0f       	add	r18, r18
    1d30:	33 1f       	adc	r19, r19
    1d32:	24 56       	subi	r18, 0x64	; 100
    1d34:	38 4f       	sbci	r19, 0xF8	; 248
    1d36:	f9 01       	movw	r30, r18
    1d38:	80 83       	st	Z, r24
    1d3a:	91 83       	std	Z+1, r25	; 0x01
    1d3c:	a2 83       	std	Z+2, r26	; 0x02
    1d3e:	b3 83       	std	Z+3, r27	; 0x03
				main_board[cur_line + 3] |= temp_line[3];
    1d40:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1d44:	88 2f       	mov	r24, r24
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	bc 01       	movw	r22, r24
    1d4a:	6d 5f       	subi	r22, 0xFD	; 253
    1d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4e:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1d52:	88 2f       	mov	r24, r24
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	03 96       	adiw	r24, 0x03	; 3
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	84 56       	subi	r24, 0x64	; 100
    1d62:	98 4f       	sbci	r25, 0xF8	; 248
    1d64:	fc 01       	movw	r30, r24
    1d66:	20 81       	ld	r18, Z
    1d68:	31 81       	ldd	r19, Z+1	; 0x01
    1d6a:	42 81       	ldd	r20, Z+2	; 0x02
    1d6c:	53 81       	ldd	r21, Z+3	; 0x03
    1d6e:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    1d72:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    1d76:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    1d7a:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    1d7e:	82 2b       	or	r24, r18
    1d80:	93 2b       	or	r25, r19
    1d82:	a4 2b       	or	r26, r20
    1d84:	b5 2b       	or	r27, r21
    1d86:	9b 01       	movw	r18, r22
    1d88:	22 0f       	add	r18, r18
    1d8a:	33 1f       	adc	r19, r19
    1d8c:	22 0f       	add	r18, r18
    1d8e:	33 1f       	adc	r19, r19
    1d90:	24 56       	subi	r18, 0x64	; 100
    1d92:	38 4f       	sbci	r19, 0xF8	; 248
    1d94:	f9 01       	movw	r30, r18
    1d96:	80 83       	st	Z, r24
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	a2 83       	std	Z+2, r26	; 0x02
    1d9c:	b3 83       	std	Z+3, r27	; 0x03

				new_block = 1;	//새로운 블록 플레그 켜짐
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <new_block>
			}

			for(int i = 0; i < 32; i++)
    1da4:	1c 82       	std	Y+4, r1	; 0x04
    1da6:	1b 82       	std	Y+3, r1	; 0x03
    1da8:	1f c0       	rjmp	.+62     	; 0x1de8 <__vector_12+0x26e>
			{
				game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	84 56       	subi	r24, 0x64	; 100
    1db8:	98 4f       	sbci	r25, 0xF8	; 248
    1dba:	fc 01       	movw	r30, r24
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	a2 81       	ldd	r26, Z+2	; 0x02
    1dc2:	b3 81       	ldd	r27, Z+3	; 0x03
    1dc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc8:	22 0f       	add	r18, r18
    1dca:	33 1f       	adc	r19, r19
    1dcc:	22 0f       	add	r18, r18
    1dce:	33 1f       	adc	r19, r19
    1dd0:	21 5c       	subi	r18, 0xC1	; 193
    1dd2:	37 4f       	sbci	r19, 0xF7	; 247
    1dd4:	f9 01       	movw	r30, r18
    1dd6:	80 83       	st	Z, r24
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	a2 83       	std	Z+2, r26	; 0x02
    1ddc:	b3 83       	std	Z+3, r27	; 0x03
				main_board[cur_line + 3] |= temp_line[3];

				new_block = 1;	//새로운 블록 플레그 켜짐
			}

			for(int i = 0; i < 32; i++)
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	01 96       	adiw	r24, 0x01	; 1
    1de4:	9c 83       	std	Y+4, r25	; 0x04
    1de6:	8b 83       	std	Y+3, r24	; 0x03
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	9c 81       	ldd	r25, Y+4	; 0x04
    1dec:	80 97       	sbiw	r24, 0x20	; 32
    1dee:	ec f2       	brlt	.-70     	; 0x1daa <__vector_12+0x230>
			{
				game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
			}

			game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
    1df0:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1df4:	68 2f       	mov	r22, r24
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	81 5c       	subi	r24, 0xC1	; 193
    1e0a:	97 4f       	sbci	r25, 0xF7	; 247
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	20 81       	ld	r18, Z
    1e10:	31 81       	ldd	r19, Z+1	; 0x01
    1e12:	42 81       	ldd	r20, Z+2	; 0x02
    1e14:	53 81       	ldd	r21, Z+3	; 0x03
    1e16:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    1e1a:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    1e1e:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    1e22:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    1e26:	82 2b       	or	r24, r18
    1e28:	93 2b       	or	r25, r19
    1e2a:	a4 2b       	or	r26, r20
    1e2c:	b5 2b       	or	r27, r21
    1e2e:	9b 01       	movw	r18, r22
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	22 0f       	add	r18, r18
    1e36:	33 1f       	adc	r19, r19
    1e38:	21 5c       	subi	r18, 0xC1	; 193
    1e3a:	37 4f       	sbci	r19, 0xF7	; 247
    1e3c:	f9 01       	movw	r30, r18
    1e3e:	80 83       	st	Z, r24
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	a2 83       	std	Z+2, r26	; 0x02
    1e44:	b3 83       	std	Z+3, r27	; 0x03
			game_board[cur_line + 1] |= temp_line[1];
    1e46:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1e4a:	88 2f       	mov	r24, r24
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	bc 01       	movw	r22, r24
    1e50:	6f 5f       	subi	r22, 0xFF	; 255
    1e52:	7f 4f       	sbci	r23, 0xFF	; 255
    1e54:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1e58:	88 2f       	mov	r24, r24
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	81 5c       	subi	r24, 0xC1	; 193
    1e68:	97 4f       	sbci	r25, 0xF7	; 247
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	20 81       	ld	r18, Z
    1e6e:	31 81       	ldd	r19, Z+1	; 0x01
    1e70:	42 81       	ldd	r20, Z+2	; 0x02
    1e72:	53 81       	ldd	r21, Z+3	; 0x03
    1e74:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    1e78:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    1e7c:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    1e80:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    1e84:	82 2b       	or	r24, r18
    1e86:	93 2b       	or	r25, r19
    1e88:	a4 2b       	or	r26, r20
    1e8a:	b5 2b       	or	r27, r21
    1e8c:	9b 01       	movw	r18, r22
    1e8e:	22 0f       	add	r18, r18
    1e90:	33 1f       	adc	r19, r19
    1e92:	22 0f       	add	r18, r18
    1e94:	33 1f       	adc	r19, r19
    1e96:	21 5c       	subi	r18, 0xC1	; 193
    1e98:	37 4f       	sbci	r19, 0xF7	; 247
    1e9a:	f9 01       	movw	r30, r18
    1e9c:	80 83       	st	Z, r24
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	a2 83       	std	Z+2, r26	; 0x02
    1ea2:	b3 83       	std	Z+3, r27	; 0x03
			game_board[cur_line + 2] |= temp_line[2];
    1ea4:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1ea8:	88 2f       	mov	r24, r24
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	bc 01       	movw	r22, r24
    1eae:	6e 5f       	subi	r22, 0xFE	; 254
    1eb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb2:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	02 96       	adiw	r24, 0x02	; 2
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	81 5c       	subi	r24, 0xC1	; 193
    1ec6:	97 4f       	sbci	r25, 0xF7	; 247
    1ec8:	fc 01       	movw	r30, r24
    1eca:	20 81       	ld	r18, Z
    1ecc:	31 81       	ldd	r19, Z+1	; 0x01
    1ece:	42 81       	ldd	r20, Z+2	; 0x02
    1ed0:	53 81       	ldd	r21, Z+3	; 0x03
    1ed2:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    1ed6:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    1eda:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    1ede:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    1ee2:	82 2b       	or	r24, r18
    1ee4:	93 2b       	or	r25, r19
    1ee6:	a4 2b       	or	r26, r20
    1ee8:	b5 2b       	or	r27, r21
    1eea:	9b 01       	movw	r18, r22
    1eec:	22 0f       	add	r18, r18
    1eee:	33 1f       	adc	r19, r19
    1ef0:	22 0f       	add	r18, r18
    1ef2:	33 1f       	adc	r19, r19
    1ef4:	21 5c       	subi	r18, 0xC1	; 193
    1ef6:	37 4f       	sbci	r19, 0xF7	; 247
    1ef8:	f9 01       	movw	r30, r18
    1efa:	80 83       	st	Z, r24
    1efc:	91 83       	std	Z+1, r25	; 0x01
    1efe:	a2 83       	std	Z+2, r26	; 0x02
    1f00:	b3 83       	std	Z+3, r27	; 0x03
			game_board[cur_line + 3] |= temp_line[3];
    1f02:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1f06:	88 2f       	mov	r24, r24
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	bc 01       	movw	r22, r24
    1f0c:	6d 5f       	subi	r22, 0xFD	; 253
    1f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f10:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    1f14:	88 2f       	mov	r24, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	03 96       	adiw	r24, 0x03	; 3
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	81 5c       	subi	r24, 0xC1	; 193
    1f24:	97 4f       	sbci	r25, 0xF7	; 247
    1f26:	fc 01       	movw	r30, r24
    1f28:	20 81       	ld	r18, Z
    1f2a:	31 81       	ldd	r19, Z+1	; 0x01
    1f2c:	42 81       	ldd	r20, Z+2	; 0x02
    1f2e:	53 81       	ldd	r21, Z+3	; 0x03
    1f30:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    1f34:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    1f38:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    1f3c:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    1f40:	82 2b       	or	r24, r18
    1f42:	93 2b       	or	r25, r19
    1f44:	a4 2b       	or	r26, r20
    1f46:	b5 2b       	or	r27, r21
    1f48:	9b 01       	movw	r18, r22
    1f4a:	22 0f       	add	r18, r18
    1f4c:	33 1f       	adc	r19, r19
    1f4e:	22 0f       	add	r18, r18
    1f50:	33 1f       	adc	r19, r19
    1f52:	21 5c       	subi	r18, 0xC1	; 193
    1f54:	37 4f       	sbci	r19, 0xF7	; 247
    1f56:	f9 01       	movw	r30, r18
    1f58:	80 83       	st	Z, r24
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	a2 83       	std	Z+2, r26	; 0x02
    1f5e:	b3 83       	std	Z+3, r27	; 0x03

		}
	}
}
    1f60:	00 00       	nop
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	ff 91       	pop	r31
    1f70:	ef 91       	pop	r30
    1f72:	bf 91       	pop	r27
    1f74:	af 91       	pop	r26
    1f76:	9f 91       	pop	r25
    1f78:	8f 91       	pop	r24
    1f7a:	7f 91       	pop	r23
    1f7c:	6f 91       	pop	r22
    1f7e:	5f 91       	pop	r21
    1f80:	4f 91       	pop	r20
    1f82:	3f 91       	pop	r19
    1f84:	2f 91       	pop	r18
    1f86:	0f 90       	pop	r0
    1f88:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    1f8c:	0f 90       	pop	r0
    1f8e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1f92:	0f 90       	pop	r0
    1f94:	1f 90       	pop	r1
    1f96:	18 95       	reti

00001f98 <snake_title>:




void snake_title()
{
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <snake_title+0x6>
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <snake_title+0x8>
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
	oled_msg(0, 3, "KMM's SNAKE GAME");
    1fa4:	8b e9       	ldi	r24, 0x9B	; 155
    1fa6:	92 e0       	ldi	r25, 0x02	; 2
    1fa8:	89 2f       	mov	r24, r25
    1faa:	8f 93       	push	r24
    1fac:	8b e9       	ldi	r24, 0x9B	; 155
    1fae:	92 e0       	ldi	r25, 0x02	; 2
    1fb0:	8f 93       	push	r24
    1fb2:	1f 92       	push	r1
    1fb4:	83 e0       	ldi	r24, 0x03	; 3
    1fb6:	8f 93       	push	r24
    1fb8:	1f 92       	push	r1
    1fba:	1f 92       	push	r1
    1fbc:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
	for(int i = 0; i < 128; i++)
    1fcc:	1a 82       	std	Y+2, r1	; 0x02
    1fce:	19 82       	std	Y+1, r1	; 0x01
    1fd0:	1d c0       	rjmp	.+58     	; 0x200c <snake_title+0x74>
	{
		ssd1306_set_page_start(2);
    1fd2:	82 e0       	ldi	r24, 0x02	; 2
    1fd4:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
		ssd1306_data(horizon1, 1);
    1fde:	61 e0       	ldi	r22, 0x01	; 1
    1fe0:	70 e0       	ldi	r23, 0x00	; 0
    1fe2:	88 e0       	ldi	r24, 0x08	; 8
    1fe4:	91 e0       	ldi	r25, 0x01	; 1
    1fe6:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
		ssd1306_set_page_start(7);
    1fea:	87 e0       	ldi	r24, 0x07	; 7
    1fec:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
		ssd1306_data(horizon2, 1);
    1ff6:	61 e0       	ldi	r22, 0x01	; 1
    1ff8:	70 e0       	ldi	r23, 0x00	; 0
    1ffa:	89 e0       	ldi	r24, 0x09	; 9
    1ffc:	91 e0       	ldi	r25, 0x01	; 1
    1ffe:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>


void snake_title()
{
	oled_msg(0, 3, "KMM's SNAKE GAME");
	for(int i = 0; i < 128; i++)
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	9a 81       	ldd	r25, Y+2	; 0x02
    2006:	01 96       	adiw	r24, 0x01	; 1
    2008:	9a 83       	std	Y+2, r25	; 0x02
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	80 38       	cpi	r24, 0x80	; 128
    2012:	91 05       	cpc	r25, r1
    2014:	f4 f2       	brlt	.-68     	; 0x1fd2 <snake_title+0x3a>
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
    2016:	1c 82       	std	Y+4, r1	; 0x04
    2018:	1b 82       	std	Y+3, r1	; 0x03
    201a:	1a c0       	rjmp	.+52     	; 0x2050 <snake_title+0xb8>
	{
		ssd1306_set_page_start(i);
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_set_column_addr(0);
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
		ssd1306_data(vertical, 1);
    2028:	61 e0       	ldi	r22, 0x01	; 1
    202a:	70 e0       	ldi	r23, 0x00	; 0
    202c:	8a e0       	ldi	r24, 0x0A	; 10
    202e:	91 e0       	ldi	r25, 0x01	; 1
    2030:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
		ssd1306_set_column_addr(127);
    2034:	8f e7       	ldi	r24, 0x7F	; 127
    2036:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
		ssd1306_data(vertical, 1);
    203a:	61 e0       	ldi	r22, 0x01	; 1
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	8a e0       	ldi	r24, 0x0A	; 10
    2040:	91 e0       	ldi	r25, 0x01	; 1
    2042:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	01 96       	adiw	r24, 0x01	; 1
    204c:	9c 83       	std	Y+4, r25	; 0x04
    204e:	8b 83       	std	Y+3, r24	; 0x03
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	08 97       	sbiw	r24, 0x08	; 8
    2056:	14 f3       	brlt	.-60     	; 0x201c <snake_title+0x84>
		ssd1306_data(vertical, 1);
		ssd1306_set_column_addr(127);
		ssd1306_data(vertical, 1);
	}

	snake_draw_map();
    2058:	09 d0       	rcall	.+18     	; 0x206c <snake_draw_map>
	
	food(); // food 생성
    205a:	2f d3       	rcall	.+1630   	; 0x26ba <food>
    205c:	00 00       	nop

}
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	08 95       	ret

0000206c <snake_draw_map>:
    206c:	cf 93       	push	r28

void snake_draw_map()
{
    206e:	df 93       	push	r29
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	c7 50       	subi	r28, 0x07	; 7
    2076:	d3 40       	sbci	r29, 0x03	; 3
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
	unsigned char MAP [6][128] = {0};
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	33 e0       	ldi	r19, 0x03	; 3
    2086:	ce 01       	movw	r24, r28
    2088:	08 96       	adiw	r24, 0x08	; 8
    208a:	dc 01       	movw	r26, r24
    208c:	f9 01       	movw	r30, r18
    208e:	1d 92       	st	X+, r1
    2090:	31 97       	sbiw	r30, 0x01	; 1
    2092:	e9 f7       	brne	.-6      	; 0x208e <snake_draw_map+0x22>

	for(int i = 0; i < 6; i++)
    2094:	1a 82       	std	Y+2, r1	; 0x02
    2096:	19 82       	std	Y+1, r1	; 0x01
    2098:	7b c0       	rjmp	.+246    	; 0x2190 <snake_draw_map+0x124>
	{
		for(int j = 0; j < 128; j++)
    209a:	1c 82       	std	Y+4, r1	; 0x04
    209c:	1b 82       	std	Y+3, r1	; 0x03
    209e:	6d c0       	rjmp	.+218    	; 0x217a <snake_draw_map+0x10e>
		{
			if(j == 0) MAP[i][j] = vertical[0];
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	89 2b       	or	r24, r25
    20a6:	b1 f4       	brne	.+44     	; 0x20d4 <snake_draw_map+0x68>
    20a8:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <vertical>
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	9a 81       	ldd	r25, Y+2	; 0x02
    20b0:	96 95       	lsr	r25
    20b2:	98 2f       	mov	r25, r24
    20b4:	88 27       	eor	r24, r24
    20b6:	97 95       	ror	r25
    20b8:	87 95       	ror	r24
    20ba:	9e 01       	movw	r18, r28
    20bc:	2f 5f       	subi	r18, 0xFF	; 255
    20be:	3f 4f       	sbci	r19, 0xFF	; 255
    20c0:	28 0f       	add	r18, r24
    20c2:	39 1f       	adc	r19, r25
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	9c 81       	ldd	r25, Y+4	; 0x04
    20c8:	82 0f       	add	r24, r18
    20ca:	93 1f       	adc	r25, r19
    20cc:	07 96       	adiw	r24, 0x07	; 7
    20ce:	dc 01       	movw	r26, r24
    20d0:	4c 93       	st	X, r20
    20d2:	4e c0       	rjmp	.+156    	; 0x2170 <snake_draw_map+0x104>
			else if(j == 127) MAP[i][j] = vertical[0];
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	9c 81       	ldd	r25, Y+4	; 0x04
    20d8:	8f 37       	cpi	r24, 0x7F	; 127
    20da:	91 05       	cpc	r25, r1
    20dc:	b1 f4       	brne	.+44     	; 0x210a <snake_draw_map+0x9e>
    20de:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <vertical>
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	96 95       	lsr	r25
    20e8:	98 2f       	mov	r25, r24
    20ea:	88 27       	eor	r24, r24
    20ec:	97 95       	ror	r25
    20ee:	87 95       	ror	r24
    20f0:	9e 01       	movw	r18, r28
    20f2:	2f 5f       	subi	r18, 0xFF	; 255
    20f4:	3f 4f       	sbci	r19, 0xFF	; 255
    20f6:	28 0f       	add	r18, r24
    20f8:	39 1f       	adc	r19, r25
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	82 0f       	add	r24, r18
    2100:	93 1f       	adc	r25, r19
    2102:	07 96       	adiw	r24, 0x07	; 7
    2104:	fc 01       	movw	r30, r24
    2106:	40 83       	st	Z, r20
    2108:	33 c0       	rjmp	.+102    	; 0x2170 <snake_draw_map+0x104>
			else if(i == 0) MAP[i][j] = horizon1[0];
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	9a 81       	ldd	r25, Y+2	; 0x02
    210e:	89 2b       	or	r24, r25
    2110:	b1 f4       	brne	.+44     	; 0x213e <snake_draw_map+0xd2>
    2112:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <horizon1>
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	96 95       	lsr	r25
    211c:	98 2f       	mov	r25, r24
    211e:	88 27       	eor	r24, r24
    2120:	97 95       	ror	r25
    2122:	87 95       	ror	r24
    2124:	9e 01       	movw	r18, r28
    2126:	2f 5f       	subi	r18, 0xFF	; 255
    2128:	3f 4f       	sbci	r19, 0xFF	; 255
    212a:	28 0f       	add	r18, r24
    212c:	39 1f       	adc	r19, r25
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	9c 81       	ldd	r25, Y+4	; 0x04
    2132:	82 0f       	add	r24, r18
    2134:	93 1f       	adc	r25, r19
    2136:	07 96       	adiw	r24, 0x07	; 7
    2138:	dc 01       	movw	r26, r24
    213a:	4c 93       	st	X, r20
    213c:	19 c0       	rjmp	.+50     	; 0x2170 <snake_draw_map+0x104>
			else if(i == 5) MAP[i][j] = horizon2[0];
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	05 97       	sbiw	r24, 0x05	; 5
    2144:	a9 f4       	brne	.+42     	; 0x2170 <snake_draw_map+0x104>
    2146:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <horizon2>
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	9a 81       	ldd	r25, Y+2	; 0x02
    214e:	96 95       	lsr	r25
    2150:	98 2f       	mov	r25, r24
    2152:	88 27       	eor	r24, r24
    2154:	97 95       	ror	r25
    2156:	87 95       	ror	r24
    2158:	9e 01       	movw	r18, r28
    215a:	2f 5f       	subi	r18, 0xFF	; 255
    215c:	3f 4f       	sbci	r19, 0xFF	; 255
    215e:	28 0f       	add	r18, r24
    2160:	39 1f       	adc	r19, r25
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	82 0f       	add	r24, r18
    2168:	93 1f       	adc	r25, r19
    216a:	07 96       	adiw	r24, 0x07	; 7
    216c:	fc 01       	movw	r30, r24
    216e:	40 83       	st	Z, r20
{
	unsigned char MAP [6][128] = {0};

	for(int i = 0; i < 6; i++)
	{
		for(int j = 0; j < 128; j++)
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	01 96       	adiw	r24, 0x01	; 1
    2176:	9c 83       	std	Y+4, r25	; 0x04
    2178:	8b 83       	std	Y+3, r24	; 0x03
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	9c 81       	ldd	r25, Y+4	; 0x04
    217e:	80 38       	cpi	r24, 0x80	; 128
    2180:	91 05       	cpc	r25, r1
    2182:	0c f4       	brge	.+2      	; 0x2186 <snake_draw_map+0x11a>
    2184:	8d cf       	rjmp	.-230    	; 0x20a0 <snake_draw_map+0x34>

void snake_draw_map()
{
	unsigned char MAP [6][128] = {0};

	for(int i = 0; i < 6; i++)
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	9a 81       	ldd	r25, Y+2	; 0x02
    218a:	01 96       	adiw	r24, 0x01	; 1
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	9a 81       	ldd	r25, Y+2	; 0x02
    2194:	06 97       	sbiw	r24, 0x06	; 6
    2196:	0c f4       	brge	.+2      	; 0x219a <snake_draw_map+0x12e>
    2198:	80 cf       	rjmp	.-256    	; 0x209a <snake_draw_map+0x2e>
			else if(i == 0) MAP[i][j] = horizon1[0];
			else if(i == 5) MAP[i][j] = horizon2[0];
		}
	}

	MAP[2*(food_y)/8][2*(food_x)] |= ((0x03 << (2*(food_y) % 8)));
    219a:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <food_y>
    219e:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <food_y+0x1>
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	99 23       	and	r25, r25
    21a8:	0c f4       	brge	.+2      	; 0x21ac <snake_draw_map+0x140>
    21aa:	07 96       	adiw	r24, 0x07	; 7
    21ac:	95 95       	asr	r25
    21ae:	87 95       	ror	r24
    21b0:	95 95       	asr	r25
    21b2:	87 95       	ror	r24
    21b4:	95 95       	asr	r25
    21b6:	87 95       	ror	r24
    21b8:	9c 01       	movw	r18, r24
    21ba:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <food_x>
    21be:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <food_x+0x1>
    21c2:	ac 01       	movw	r20, r24
    21c4:	44 0f       	add	r20, r20
    21c6:	55 1f       	adc	r21, r21
    21c8:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <food_x>
    21cc:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <food_x+0x1>
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	b9 01       	movw	r22, r18
    21d6:	76 95       	lsr	r23
    21d8:	76 2f       	mov	r23, r22
    21da:	66 27       	eor	r22, r22
    21dc:	77 95       	ror	r23
    21de:	67 95       	ror	r22
    21e0:	fe 01       	movw	r30, r28
    21e2:	31 96       	adiw	r30, 0x01	; 1
    21e4:	6e 0f       	add	r22, r30
    21e6:	7f 1f       	adc	r23, r31
    21e8:	86 0f       	add	r24, r22
    21ea:	97 1f       	adc	r25, r23
    21ec:	07 96       	adiw	r24, 0x07	; 7
    21ee:	dc 01       	movw	r26, r24
    21f0:	8c 91       	ld	r24, X
    21f2:	e8 2f       	mov	r30, r24
    21f4:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <food_y>
    21f8:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <food_y+0x1>
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	87 70       	andi	r24, 0x07	; 7
    2202:	90 78       	andi	r25, 0x80	; 128
    2204:	99 23       	and	r25, r25
    2206:	24 f4       	brge	.+8      	; 0x2210 <snake_draw_map+0x1a4>
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	88 6f       	ori	r24, 0xF8	; 248
    220c:	9f 6f       	ori	r25, 0xFF	; 255
    220e:	01 96       	adiw	r24, 0x01	; 1
    2210:	bc 01       	movw	r22, r24
    2212:	83 e0       	ldi	r24, 0x03	; 3
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	02 c0       	rjmp	.+4      	; 0x221c <snake_draw_map+0x1b0>
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	6a 95       	dec	r22
    221e:	e2 f7       	brpl	.-8      	; 0x2218 <snake_draw_map+0x1ac>
    2220:	8e 2b       	or	r24, r30
    2222:	68 2f       	mov	r22, r24
    2224:	c9 01       	movw	r24, r18
    2226:	96 95       	lsr	r25
    2228:	98 2f       	mov	r25, r24
    222a:	88 27       	eor	r24, r24
    222c:	97 95       	ror	r25
    222e:	87 95       	ror	r24
    2230:	9e 01       	movw	r18, r28
    2232:	2f 5f       	subi	r18, 0xFF	; 255
    2234:	3f 4f       	sbci	r19, 0xFF	; 255
    2236:	82 0f       	add	r24, r18
    2238:	93 1f       	adc	r25, r19
    223a:	84 0f       	add	r24, r20
    223c:	95 1f       	adc	r25, r21
    223e:	07 96       	adiw	r24, 0x07	; 7
    2240:	fc 01       	movw	r30, r24
    2242:	60 83       	st	Z, r22
	MAP[2*(food_y)/8][2*(food_x) + 1] |= ((0x03 << (2*(food_y) % 8)));
    2244:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <food_y>
    2248:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <food_y+0x1>
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	99 23       	and	r25, r25
    2252:	0c f4       	brge	.+2      	; 0x2256 <snake_draw_map+0x1ea>
    2254:	07 96       	adiw	r24, 0x07	; 7
    2256:	95 95       	asr	r25
    2258:	87 95       	ror	r24
    225a:	95 95       	asr	r25
    225c:	87 95       	ror	r24
    225e:	95 95       	asr	r25
    2260:	87 95       	ror	r24
    2262:	9c 01       	movw	r18, r24
    2264:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <food_x>
    2268:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <food_x+0x1>
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	ac 01       	movw	r20, r24
    2272:	4f 5f       	subi	r20, 0xFF	; 255
    2274:	5f 4f       	sbci	r21, 0xFF	; 255
    2276:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <food_x>
    227a:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <food_x+0x1>
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	01 96       	adiw	r24, 0x01	; 1
    2284:	b9 01       	movw	r22, r18
    2286:	76 95       	lsr	r23
    2288:	76 2f       	mov	r23, r22
    228a:	66 27       	eor	r22, r22
    228c:	77 95       	ror	r23
    228e:	67 95       	ror	r22
    2290:	fe 01       	movw	r30, r28
    2292:	31 96       	adiw	r30, 0x01	; 1
    2294:	6e 0f       	add	r22, r30
    2296:	7f 1f       	adc	r23, r31
    2298:	86 0f       	add	r24, r22
    229a:	97 1f       	adc	r25, r23
    229c:	07 96       	adiw	r24, 0x07	; 7
    229e:	dc 01       	movw	r26, r24
    22a0:	8c 91       	ld	r24, X
    22a2:	e8 2f       	mov	r30, r24
    22a4:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <food_y>
    22a8:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <food_y+0x1>
    22ac:	88 0f       	add	r24, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	87 70       	andi	r24, 0x07	; 7
    22b2:	90 78       	andi	r25, 0x80	; 128
    22b4:	99 23       	and	r25, r25
    22b6:	24 f4       	brge	.+8      	; 0x22c0 <snake_draw_map+0x254>
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	88 6f       	ori	r24, 0xF8	; 248
    22bc:	9f 6f       	ori	r25, 0xFF	; 255
    22be:	01 96       	adiw	r24, 0x01	; 1
    22c0:	bc 01       	movw	r22, r24
    22c2:	83 e0       	ldi	r24, 0x03	; 3
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <snake_draw_map+0x260>
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	6a 95       	dec	r22
    22ce:	e2 f7       	brpl	.-8      	; 0x22c8 <snake_draw_map+0x25c>
    22d0:	8e 2b       	or	r24, r30
    22d2:	68 2f       	mov	r22, r24
    22d4:	c9 01       	movw	r24, r18
    22d6:	96 95       	lsr	r25
    22d8:	98 2f       	mov	r25, r24
    22da:	88 27       	eor	r24, r24
    22dc:	97 95       	ror	r25
    22de:	87 95       	ror	r24
    22e0:	9e 01       	movw	r18, r28
    22e2:	2f 5f       	subi	r18, 0xFF	; 255
    22e4:	3f 4f       	sbci	r19, 0xFF	; 255
    22e6:	82 0f       	add	r24, r18
    22e8:	93 1f       	adc	r25, r19
    22ea:	84 0f       	add	r24, r20
    22ec:	95 1f       	adc	r25, r21
    22ee:	07 96       	adiw	r24, 0x07	; 7
    22f0:	fc 01       	movw	r30, r24
    22f2:	60 83       	st	Z, r22


	for(int i=0;i<length;i++)	//뱀 몸통값 입력
    22f4:	1e 82       	std	Y+6, r1	; 0x06
    22f6:	1d 82       	std	Y+5, r1	; 0x05
    22f8:	c3 c0       	rjmp	.+390    	; 0x2480 <snake_draw_map+0x414>
	{
		MAP[2*(y[i])/8][2*(x[i])] |= ((0x03 << (2*(y[i]) % 8)));
    22fa:	8d 81       	ldd	r24, Y+5	; 0x05
    22fc:	9e 81       	ldd	r25, Y+6	; 0x06
    22fe:	8d 52       	subi	r24, 0x2D	; 45
    2300:	9e 4f       	sbci	r25, 0xFE	; 254
    2302:	dc 01       	movw	r26, r24
    2304:	8c 91       	ld	r24, X
    2306:	88 2f       	mov	r24, r24
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	99 23       	and	r25, r25
    2310:	0c f4       	brge	.+2      	; 0x2314 <snake_draw_map+0x2a8>
    2312:	07 96       	adiw	r24, 0x07	; 7
    2314:	95 95       	asr	r25
    2316:	87 95       	ror	r24
    2318:	95 95       	asr	r25
    231a:	87 95       	ror	r24
    231c:	95 95       	asr	r25
    231e:	87 95       	ror	r24
    2320:	2d 81       	ldd	r18, Y+5	; 0x05
    2322:	3e 81       	ldd	r19, Y+6	; 0x06
    2324:	25 5f       	subi	r18, 0xF5	; 245
    2326:	3e 4f       	sbci	r19, 0xFE	; 254
    2328:	f9 01       	movw	r30, r18
    232a:	20 81       	ld	r18, Z
    232c:	22 2f       	mov	r18, r18
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	22 0f       	add	r18, r18
    2332:	33 1f       	adc	r19, r19
    2334:	4d 81       	ldd	r20, Y+5	; 0x05
    2336:	5e 81       	ldd	r21, Y+6	; 0x06
    2338:	45 5f       	subi	r20, 0xF5	; 245
    233a:	5e 4f       	sbci	r21, 0xFE	; 254
    233c:	da 01       	movw	r26, r20
    233e:	4c 91       	ld	r20, X
    2340:	44 2f       	mov	r20, r20
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	44 0f       	add	r20, r20
    2346:	55 1f       	adc	r21, r21
    2348:	bc 01       	movw	r22, r24
    234a:	76 95       	lsr	r23
    234c:	76 2f       	mov	r23, r22
    234e:	66 27       	eor	r22, r22
    2350:	77 95       	ror	r23
    2352:	67 95       	ror	r22
    2354:	fe 01       	movw	r30, r28
    2356:	31 96       	adiw	r30, 0x01	; 1
    2358:	6e 0f       	add	r22, r30
    235a:	7f 1f       	adc	r23, r31
    235c:	46 0f       	add	r20, r22
    235e:	57 1f       	adc	r21, r23
    2360:	49 5f       	subi	r20, 0xF9	; 249
    2362:	5f 4f       	sbci	r21, 0xFF	; 255
    2364:	fa 01       	movw	r30, r20
    2366:	40 81       	ld	r20, Z
    2368:	e4 2f       	mov	r30, r20
    236a:	4d 81       	ldd	r20, Y+5	; 0x05
    236c:	5e 81       	ldd	r21, Y+6	; 0x06
    236e:	4d 52       	subi	r20, 0x2D	; 45
    2370:	5e 4f       	sbci	r21, 0xFE	; 254
    2372:	da 01       	movw	r26, r20
    2374:	4c 91       	ld	r20, X
    2376:	44 2f       	mov	r20, r20
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	44 0f       	add	r20, r20
    237c:	55 1f       	adc	r21, r21
    237e:	ba 01       	movw	r22, r20
    2380:	66 70       	andi	r22, 0x06	; 6
    2382:	77 27       	eor	r23, r23
    2384:	43 e0       	ldi	r20, 0x03	; 3
    2386:	50 e0       	ldi	r21, 0x00	; 0
    2388:	02 c0       	rjmp	.+4      	; 0x238e <snake_draw_map+0x322>
    238a:	44 0f       	add	r20, r20
    238c:	55 1f       	adc	r21, r21
    238e:	6a 95       	dec	r22
    2390:	e2 f7       	brpl	.-8      	; 0x238a <snake_draw_map+0x31e>
    2392:	4e 2b       	or	r20, r30
    2394:	64 2f       	mov	r22, r20
    2396:	96 95       	lsr	r25
    2398:	98 2f       	mov	r25, r24
    239a:	88 27       	eor	r24, r24
    239c:	97 95       	ror	r25
    239e:	87 95       	ror	r24
    23a0:	ae 01       	movw	r20, r28
    23a2:	4f 5f       	subi	r20, 0xFF	; 255
    23a4:	5f 4f       	sbci	r21, 0xFF	; 255
    23a6:	84 0f       	add	r24, r20
    23a8:	95 1f       	adc	r25, r21
    23aa:	82 0f       	add	r24, r18
    23ac:	93 1f       	adc	r25, r19
    23ae:	07 96       	adiw	r24, 0x07	; 7
    23b0:	fc 01       	movw	r30, r24
    23b2:	60 83       	st	Z, r22
		MAP[2*(y[i])/8][2*(x[i]) + 1] |= ((0x03 << (2*(y[i]) % 8)));
    23b4:	8d 81       	ldd	r24, Y+5	; 0x05
    23b6:	9e 81       	ldd	r25, Y+6	; 0x06
    23b8:	8d 52       	subi	r24, 0x2D	; 45
    23ba:	9e 4f       	sbci	r25, 0xFE	; 254
    23bc:	dc 01       	movw	r26, r24
    23be:	8c 91       	ld	r24, X
    23c0:	88 2f       	mov	r24, r24
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	99 23       	and	r25, r25
    23ca:	0c f4       	brge	.+2      	; 0x23ce <snake_draw_map+0x362>
    23cc:	07 96       	adiw	r24, 0x07	; 7
    23ce:	95 95       	asr	r25
    23d0:	87 95       	ror	r24
    23d2:	95 95       	asr	r25
    23d4:	87 95       	ror	r24
    23d6:	95 95       	asr	r25
    23d8:	87 95       	ror	r24
    23da:	2d 81       	ldd	r18, Y+5	; 0x05
    23dc:	3e 81       	ldd	r19, Y+6	; 0x06
    23de:	25 5f       	subi	r18, 0xF5	; 245
    23e0:	3e 4f       	sbci	r19, 0xFE	; 254
    23e2:	f9 01       	movw	r30, r18
    23e4:	20 81       	ld	r18, Z
    23e6:	22 2f       	mov	r18, r18
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	22 0f       	add	r18, r18
    23ec:	33 1f       	adc	r19, r19
    23ee:	2f 5f       	subi	r18, 0xFF	; 255
    23f0:	3f 4f       	sbci	r19, 0xFF	; 255
    23f2:	4d 81       	ldd	r20, Y+5	; 0x05
    23f4:	5e 81       	ldd	r21, Y+6	; 0x06
    23f6:	45 5f       	subi	r20, 0xF5	; 245
    23f8:	5e 4f       	sbci	r21, 0xFE	; 254
    23fa:	da 01       	movw	r26, r20
    23fc:	4c 91       	ld	r20, X
    23fe:	44 2f       	mov	r20, r20
    2400:	50 e0       	ldi	r21, 0x00	; 0
    2402:	44 0f       	add	r20, r20
    2404:	55 1f       	adc	r21, r21
    2406:	4f 5f       	subi	r20, 0xFF	; 255
    2408:	5f 4f       	sbci	r21, 0xFF	; 255
    240a:	bc 01       	movw	r22, r24
    240c:	76 95       	lsr	r23
    240e:	76 2f       	mov	r23, r22
    2410:	66 27       	eor	r22, r22
    2412:	77 95       	ror	r23
    2414:	67 95       	ror	r22
    2416:	fe 01       	movw	r30, r28
    2418:	31 96       	adiw	r30, 0x01	; 1
    241a:	6e 0f       	add	r22, r30
    241c:	7f 1f       	adc	r23, r31
    241e:	46 0f       	add	r20, r22
    2420:	57 1f       	adc	r21, r23
    2422:	49 5f       	subi	r20, 0xF9	; 249
    2424:	5f 4f       	sbci	r21, 0xFF	; 255
    2426:	fa 01       	movw	r30, r20
    2428:	40 81       	ld	r20, Z
    242a:	e4 2f       	mov	r30, r20
    242c:	4d 81       	ldd	r20, Y+5	; 0x05
    242e:	5e 81       	ldd	r21, Y+6	; 0x06
    2430:	4d 52       	subi	r20, 0x2D	; 45
    2432:	5e 4f       	sbci	r21, 0xFE	; 254
    2434:	da 01       	movw	r26, r20
    2436:	4c 91       	ld	r20, X
    2438:	44 2f       	mov	r20, r20
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	44 0f       	add	r20, r20
    243e:	55 1f       	adc	r21, r21
    2440:	ba 01       	movw	r22, r20
    2442:	66 70       	andi	r22, 0x06	; 6
    2444:	77 27       	eor	r23, r23
    2446:	43 e0       	ldi	r20, 0x03	; 3
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <snake_draw_map+0x3e4>
    244c:	44 0f       	add	r20, r20
    244e:	55 1f       	adc	r21, r21
    2450:	6a 95       	dec	r22
    2452:	e2 f7       	brpl	.-8      	; 0x244c <snake_draw_map+0x3e0>
    2454:	4e 2b       	or	r20, r30
    2456:	64 2f       	mov	r22, r20
    2458:	96 95       	lsr	r25
    245a:	98 2f       	mov	r25, r24
    245c:	88 27       	eor	r24, r24
    245e:	97 95       	ror	r25
    2460:	87 95       	ror	r24
    2462:	ae 01       	movw	r20, r28
    2464:	4f 5f       	subi	r20, 0xFF	; 255
    2466:	5f 4f       	sbci	r21, 0xFF	; 255
    2468:	84 0f       	add	r24, r20
    246a:	95 1f       	adc	r25, r21
    246c:	82 0f       	add	r24, r18
    246e:	93 1f       	adc	r25, r19
    2470:	07 96       	adiw	r24, 0x07	; 7
    2472:	fc 01       	movw	r30, r24
    2474:	60 83       	st	Z, r22

	MAP[2*(food_y)/8][2*(food_x)] |= ((0x03 << (2*(food_y) % 8)));
	MAP[2*(food_y)/8][2*(food_x) + 1] |= ((0x03 << (2*(food_y) % 8)));


	for(int i=0;i<length;i++)	//뱀 몸통값 입력
    2476:	8d 81       	ldd	r24, Y+5	; 0x05
    2478:	9e 81       	ldd	r25, Y+6	; 0x06
    247a:	01 96       	adiw	r24, 0x01	; 1
    247c:	9e 83       	std	Y+6, r25	; 0x06
    247e:	8d 83       	std	Y+5, r24	; 0x05
    2480:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    2484:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    2488:	2d 81       	ldd	r18, Y+5	; 0x05
    248a:	3e 81       	ldd	r19, Y+6	; 0x06
    248c:	28 17       	cp	r18, r24
    248e:	39 07       	cpc	r19, r25
    2490:	0c f4       	brge	.+2      	; 0x2494 <snake_draw_map+0x428>
    2492:	33 cf       	rjmp	.-410    	; 0x22fa <snake_draw_map+0x28e>
		MAP[2*(y[i])/8][2*(x[i])] |= ((0x03 << (2*(y[i]) % 8)));
		MAP[2*(y[i])/8][2*(x[i]) + 1] |= ((0x03 << (2*(y[i]) % 8)));
	}

	unsigned char x,y;
	for(y=2;y<8;y++)
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	8f 83       	std	Y+7, r24	; 0x07
    2498:	18 c0       	rjmp	.+48     	; 0x24ca <snake_draw_map+0x45e>
	{
		ssd1306_set_page_start(y);
    249a:	8f 81       	ldd	r24, Y+7	; 0x07
    249c:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_data(MAP[y - 2], COL_NUM);
    24a0:	8f 81       	ldd	r24, Y+7	; 0x07
    24a2:	88 2f       	mov	r24, r24
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	02 97       	sbiw	r24, 0x02	; 2
    24a8:	9e 01       	movw	r18, r28
    24aa:	28 5f       	subi	r18, 0xF8	; 248
    24ac:	3f 4f       	sbci	r19, 0xFF	; 255
    24ae:	96 95       	lsr	r25
    24b0:	98 2f       	mov	r25, r24
    24b2:	88 27       	eor	r24, r24
    24b4:	97 95       	ror	r25
    24b6:	87 95       	ror	r24
    24b8:	82 0f       	add	r24, r18
    24ba:	93 1f       	adc	r25, r19
    24bc:	60 e8       	ldi	r22, 0x80	; 128
    24be:	70 e0       	ldi	r23, 0x00	; 0
    24c0:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
		MAP[2*(y[i])/8][2*(x[i])] |= ((0x03 << (2*(y[i]) % 8)));
		MAP[2*(y[i])/8][2*(x[i]) + 1] |= ((0x03 << (2*(y[i]) % 8)));
	}

	unsigned char x,y;
	for(y=2;y<8;y++)
    24c4:	8f 81       	ldd	r24, Y+7	; 0x07
    24c6:	8f 5f       	subi	r24, 0xFF	; 255
    24c8:	8f 83       	std	Y+7, r24	; 0x07
    24ca:	8f 81       	ldd	r24, Y+7	; 0x07
    24cc:	88 30       	cpi	r24, 0x08	; 8
    24ce:	28 f3       	brcs	.-54     	; 0x249a <snake_draw_map+0x42e>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(MAP[y - 2], COL_NUM);
	}
}
    24d0:	00 00       	nop
    24d2:	c9 5f       	subi	r28, 0xF9	; 249
    24d4:	dc 4f       	sbci	r29, 0xFC	; 252
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	08 95       	ret

000024e6 <snake_move>:


void snake_move(int dir)
{
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	00 d0       	rcall	.+0      	; 0x24ec <snake_move+0x6>
    24ec:	00 d0       	rcall	.+0      	; 0x24ee <snake_move+0x8>
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <snake_move+0xa>
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	9e 83       	std	Y+6, r25	; 0x06
    24f6:	8d 83       	std	Y+5, r24	; 0x05
	
	

	if(x[0]==food_x&&y[0]==food_y)
    24f8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <x>
    24fc:	28 2f       	mov	r18, r24
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <food_x>
    2504:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <food_x+0x1>
    2508:	28 17       	cp	r18, r24
    250a:	39 07       	cpc	r19, r25
    250c:	d9 f5       	brne	.+118    	; 0x2584 <snake_move+0x9e>
    250e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <y>
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <food_y>
    251a:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <food_y+0x1>
    251e:	28 17       	cp	r18, r24
    2520:	39 07       	cpc	r19, r25
    2522:	81 f5       	brne	.+96     	; 0x2584 <snake_move+0x9e>
	{ //food와 충돌했을 경우
		food(); //새로운 food 추가
    2524:	ca d0       	rcall	.+404    	; 0x26ba <food>
		length++; //길이증가
    2526:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    252a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <length+0x1>
    2534:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <length>
		x[length-1]=x[length-2]; //새로만든 몸통에 값 입력
    2538:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    253c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <length>
    2546:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <length+0x1>
    254a:	22 50       	subi	r18, 0x02	; 2
    254c:	31 09       	sbc	r19, r1
    254e:	25 5f       	subi	r18, 0xF5	; 245
    2550:	3e 4f       	sbci	r19, 0xFE	; 254
    2552:	f9 01       	movw	r30, r18
    2554:	20 81       	ld	r18, Z
    2556:	85 5f       	subi	r24, 0xF5	; 245
    2558:	9e 4f       	sbci	r25, 0xFE	; 254
    255a:	fc 01       	movw	r30, r24
    255c:	20 83       	st	Z, r18
		y[length-1]=y[length-2];
    255e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    2562:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <length>
    256c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <length+0x1>
    2570:	22 50       	subi	r18, 0x02	; 2
    2572:	31 09       	sbc	r19, r1
    2574:	2d 52       	subi	r18, 0x2D	; 45
    2576:	3e 4f       	sbci	r19, 0xFE	; 254
    2578:	f9 01       	movw	r30, r18
    257a:	20 81       	ld	r18, Z
    257c:	8d 52       	subi	r24, 0x2D	; 45
    257e:	9e 4f       	sbci	r25, 0xFE	; 254
    2580:	fc 01       	movw	r30, r24
    2582:	20 83       	st	Z, r18
	}
	if(x[0]==0||x[0]== 63||y[0]==0||y[0]==23)
    2584:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <x>
    2588:	88 23       	and	r24, r24
    258a:	61 f0       	breq	.+24     	; 0x25a4 <snake_move+0xbe>
    258c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <x>
    2590:	8f 33       	cpi	r24, 0x3F	; 63
    2592:	41 f0       	breq	.+16     	; 0x25a4 <snake_move+0xbe>
    2594:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <y>
    2598:	88 23       	and	r24, r24
    259a:	21 f0       	breq	.+8      	; 0x25a4 <snake_move+0xbe>
    259c:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <y>
    25a0:	87 31       	cpi	r24, 0x17	; 23
	{ //벽과 충돌했을 경우
		snake_game_over();
    25a2:	11 f4       	brne	.+4      	; 0x25a8 <snake_move+0xc2>
    25a4:	fb d0       	rcall	.+502    	; 0x279c <snake_game_over>
		return; //game_over에서 게임을 다시 시작하게 되면 여기서부터 반복되므로
    25a6:	80 c0       	rjmp	.+256    	; 0x26a8 <snake_move+0x1c2>
		//return을 사용하여 snake_move의 나머지 부분이 실행되지 않도록 합니다.
	}
	for(int i=1;i<length;i++)
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	9a 83       	std	Y+2, r25	; 0x02
    25ae:	89 83       	std	Y+1, r24	; 0x01
    25b0:	1b c0       	rjmp	.+54     	; 0x25e8 <snake_move+0x102>
	{ //자기몸과 충돌했는지 검사
		if(x[0]==x[i] && y[0]==y[i])
    25b2:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <x>
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ba:	85 5f       	subi	r24, 0xF5	; 245
    25bc:	9e 4f       	sbci	r25, 0xFE	; 254
    25be:	fc 01       	movw	r30, r24
    25c0:	80 81       	ld	r24, Z
    25c2:	28 17       	cp	r18, r24
    25c4:	61 f4       	brne	.+24     	; 0x25de <snake_move+0xf8>
    25c6:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <y>
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	9a 81       	ldd	r25, Y+2	; 0x02
    25ce:	8d 52       	subi	r24, 0x2D	; 45
    25d0:	9e 4f       	sbci	r25, 0xFE	; 254
    25d2:	fc 01       	movw	r30, r24
    25d4:	80 81       	ld	r24, Z
    25d6:	28 17       	cp	r18, r24
		{
			snake_game_over();
    25d8:	11 f4       	brne	.+4      	; 0x25de <snake_move+0xf8>
    25da:	e0 d0       	rcall	.+448    	; 0x279c <snake_game_over>
			return;
    25dc:	65 c0       	rjmp	.+202    	; 0x26a8 <snake_move+0x1c2>
	{ //벽과 충돌했을 경우
		snake_game_over();
		return; //game_over에서 게임을 다시 시작하게 되면 여기서부터 반복되므로
		//return을 사용하여 snake_move의 나머지 부분이 실행되지 않도록 합니다.
	}
	for(int i=1;i<length;i++)
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	9a 81       	ldd	r25, Y+2	; 0x02
    25e2:	01 96       	adiw	r24, 0x01	; 1
    25e4:	9a 83       	std	Y+2, r25	; 0x02
    25e6:	89 83       	std	Y+1, r24	; 0x01
    25e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    25ec:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    25f0:	29 81       	ldd	r18, Y+1	; 0x01
    25f2:	3a 81       	ldd	r19, Y+2	; 0x02
    25f4:	28 17       	cp	r18, r24
    25f6:	39 07       	cpc	r19, r25
    25f8:	e4 f2       	brlt	.-72     	; 0x25b2 <snake_move+0xcc>
			return;
		}
	}
	

	for(int i=length - 1;i>0;i--){ //몸통좌표를 한칸씩 옮김
    25fa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    25fe:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	9c 83       	std	Y+4, r25	; 0x04
    2606:	8b 83       	std	Y+3, r24	; 0x03
    2608:	1f c0       	rjmp	.+62     	; 0x2648 <snake_move+0x162>
		x[i]=x[i-1];
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	9c 81       	ldd	r25, Y+4	; 0x04
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	85 5f       	subi	r24, 0xF5	; 245
    2612:	9e 4f       	sbci	r25, 0xFE	; 254
    2614:	fc 01       	movw	r30, r24
    2616:	20 81       	ld	r18, Z
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	9c 81       	ldd	r25, Y+4	; 0x04
    261c:	85 5f       	subi	r24, 0xF5	; 245
    261e:	9e 4f       	sbci	r25, 0xFE	; 254
    2620:	fc 01       	movw	r30, r24
    2622:	20 83       	st	Z, r18
		y[i]=y[i-1];
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	9c 81       	ldd	r25, Y+4	; 0x04
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	8d 52       	subi	r24, 0x2D	; 45
    262c:	9e 4f       	sbci	r25, 0xFE	; 254
    262e:	fc 01       	movw	r30, r24
    2630:	20 81       	ld	r18, Z
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	9c 81       	ldd	r25, Y+4	; 0x04
    2636:	8d 52       	subi	r24, 0x2D	; 45
    2638:	9e 4f       	sbci	r25, 0xFE	; 254
    263a:	fc 01       	movw	r30, r24
    263c:	20 83       	st	Z, r18
			return;
		}
	}
	

	for(int i=length - 1;i>0;i--){ //몸통좌표를 한칸씩 옮김
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	9c 81       	ldd	r25, Y+4	; 0x04
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	9c 83       	std	Y+4, r25	; 0x04
    2646:	8b 83       	std	Y+3, r24	; 0x03
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	18 16       	cp	r1, r24
    264e:	19 06       	cpc	r1, r25
    2650:	e4 f2       	brlt	.-72     	; 0x260a <snake_move+0x124>
		y[i]=y[i-1];
	}

	

	if(dir==LEFT) x[0]--; //방향에 따라 새로운 머리좌표(x[0],y[0])값을 변경
    2652:	8d 81       	ldd	r24, Y+5	; 0x05
    2654:	9e 81       	ldd	r25, Y+6	; 0x06
    2656:	8b 34       	cpi	r24, 0x4B	; 75
    2658:	91 05       	cpc	r25, r1
    265a:	31 f4       	brne	.+12     	; 0x2668 <snake_move+0x182>
    265c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <x>
    2660:	81 50       	subi	r24, 0x01	; 1
    2662:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <x>
    2666:	20 c0       	rjmp	.+64     	; 0x26a8 <snake_move+0x1c2>
	else if(dir==RIGHT) x[0]++;
    2668:	8d 81       	ldd	r24, Y+5	; 0x05
    266a:	9e 81       	ldd	r25, Y+6	; 0x06
    266c:	8d 34       	cpi	r24, 0x4D	; 77
    266e:	91 05       	cpc	r25, r1
    2670:	31 f4       	brne	.+12     	; 0x267e <snake_move+0x198>
    2672:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <x>
    2676:	8f 5f       	subi	r24, 0xFF	; 255
    2678:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <x>
    267c:	15 c0       	rjmp	.+42     	; 0x26a8 <snake_move+0x1c2>
	else if(dir==UP) y[0]--;
    267e:	8d 81       	ldd	r24, Y+5	; 0x05
    2680:	9e 81       	ldd	r25, Y+6	; 0x06
    2682:	88 34       	cpi	r24, 0x48	; 72
    2684:	91 05       	cpc	r25, r1
    2686:	31 f4       	brne	.+12     	; 0x2694 <snake_move+0x1ae>
    2688:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <y>
    268c:	81 50       	subi	r24, 0x01	; 1
    268e:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <y>
    2692:	0a c0       	rjmp	.+20     	; 0x26a8 <snake_move+0x1c2>
	else if(dir==DOWN) y[0]++;
    2694:	8d 81       	ldd	r24, Y+5	; 0x05
    2696:	9e 81       	ldd	r25, Y+6	; 0x06
    2698:	80 35       	cpi	r24, 0x50	; 80
    269a:	91 05       	cpc	r25, r1
    269c:	29 f4       	brne	.+10     	; 0x26a8 <snake_move+0x1c2>
    269e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <y>
    26a2:	8f 5f       	subi	r24, 0xFF	; 255
    26a4:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <y>
	

	
	
}
    26a8:	26 96       	adiw	r28, 0x06	; 6
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	08 95       	ret

000026ba <food>:

void food()
{
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <food+0x6>
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <food+0x8>
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <food+0xa>
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
	int food_crush_on=0;//food가 뱀 몸통좌표에 생길 경우 on
    26c8:	1a 82       	std	Y+2, r1	; 0x02
    26ca:	19 82       	std	Y+1, r1	; 0x01
	int r=0; //난수 생성에 사동되는 변수
    26cc:	1e 82       	std	Y+6, r1	; 0x06
    26ce:	1d 82       	std	Y+5, r1	; 0x05
	
	
	
	while(1){
		food_crush_on=0;
    26d0:	1a 82       	std	Y+2, r1	; 0x02
    26d2:	19 82       	std	Y+1, r1	; 0x01
		srand(TCNT0); //난수표생성
    26d4:	82 e5       	ldi	r24, 0x52	; 82
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	fc 01       	movw	r30, r24
    26da:	80 81       	ld	r24, Z
    26dc:	88 2f       	mov	r24, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	0e 94 86 23 	call	0x470c	; 0x470c <srand>
		food_x=(rand()%62)+2;    //난수를 좌표값에 넣음
    26e4:	0e 94 83 23 	call	0x4706	; 0x4706 <rand>
    26e8:	2e e3       	ldi	r18, 0x3E	; 62
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	b9 01       	movw	r22, r18
    26ee:	0e 94 15 23 	call	0x462a	; 0x462a <__divmodhi4>
    26f2:	02 96       	adiw	r24, 0x02	; 2
    26f4:	90 93 28 08 	sts	0x0828, r25	; 0x800828 <food_x+0x1>
    26f8:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <food_x>
		food_y=(rand()%22)+2;
    26fc:	0e 94 83 23 	call	0x4706	; 0x4706 <rand>
    2700:	26 e1       	ldi	r18, 0x16	; 22
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	b9 01       	movw	r22, r18
    2706:	0e 94 15 23 	call	0x462a	; 0x462a <__divmodhi4>
    270a:	02 96       	adiw	r24, 0x02	; 2
    270c:	90 93 3e 08 	sts	0x083E, r25	; 0x80083e <food_y+0x1>
    2710:	80 93 3d 08 	sts	0x083D, r24	; 0x80083d <food_y>
		
		for(int i=0;i<length;i++)
    2714:	1c 82       	std	Y+4, r1	; 0x04
    2716:	1b 82       	std	Y+3, r1	; 0x03
    2718:	28 c0       	rjmp	.+80     	; 0x276a <food+0xb0>
		{ //food가 뱀 몸통과 겹치는지 확인
			if(food_x==x[i]&&food_y==y[i])
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	9c 81       	ldd	r25, Y+4	; 0x04
    271e:	85 5f       	subi	r24, 0xF5	; 245
    2720:	9e 4f       	sbci	r25, 0xFE	; 254
    2722:	fc 01       	movw	r30, r24
    2724:	80 81       	ld	r24, Z
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <food_x>
    272e:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <food_x+0x1>
    2732:	28 17       	cp	r18, r24
    2734:	39 07       	cpc	r19, r25
    2736:	a1 f4       	brne	.+40     	; 0x2760 <food+0xa6>
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	9c 81       	ldd	r25, Y+4	; 0x04
    273c:	8d 52       	subi	r24, 0x2D	; 45
    273e:	9e 4f       	sbci	r25, 0xFE	; 254
    2740:	fc 01       	movw	r30, r24
    2742:	80 81       	ld	r24, Z
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <food_y>
    274c:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <food_y+0x1>
    2750:	28 17       	cp	r18, r24
    2752:	39 07       	cpc	r19, r25
    2754:	29 f4       	brne	.+10     	; 0x2760 <food+0xa6>
			{
				food_crush_on=1; //겹치면 food_crush_on 를 on
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	89 83       	std	Y+1, r24	; 0x01
				break;
    275e:	0e c0       	rjmp	.+28     	; 0x277c <food+0xc2>
		food_crush_on=0;
		srand(TCNT0); //난수표생성
		food_x=(rand()%62)+2;    //난수를 좌표값에 넣음
		food_y=(rand()%22)+2;
		
		for(int i=0;i<length;i++)
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	9c 81       	ldd	r25, Y+4	; 0x04
    2764:	01 96       	adiw	r24, 0x01	; 1
    2766:	9c 83       	std	Y+4, r25	; 0x04
    2768:	8b 83       	std	Y+3, r24	; 0x03
    276a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    276e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    2772:	2b 81       	ldd	r18, Y+3	; 0x03
    2774:	3c 81       	ldd	r19, Y+4	; 0x04
    2776:	28 17       	cp	r18, r24
    2778:	39 07       	cpc	r19, r25
    277a:	7c f2       	brlt	.-98     	; 0x271a <food+0x60>
				food_crush_on=1; //겹치면 food_crush_on 를 on
				break;
			}
		}
		
		if(food_crush_on==1) continue; //겹쳤을 경우 while문을 다시 시작
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	9a 81       	ldd	r25, Y+2	; 0x02
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	09 f4       	brne	.+2      	; 0x2786 <food+0xcc>
		
		break;
		
	}
    2784:	a5 cf       	rjmp	.-182    	; 0x26d0 <food+0x16>
			}
		}
		
		if(food_crush_on==1) continue; //겹쳤을 경우 while문을 다시 시작
		
		break;
    2786:	00 00       	nop
		
	}
}
    2788:	00 00       	nop
    278a:	26 96       	adiw	r28, 0x06	; 6
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	f8 94       	cli
    2790:	de bf       	out	0x3e, r29	; 62
    2792:	0f be       	out	0x3f, r0	; 63
    2794:	cd bf       	out	0x3d, r28	; 61
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	08 95       	ret

0000279c <snake_game_over>:


void snake_game_over()
{
    279c:	cf 93       	push	r28
    279e:	df 93       	push	r29
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	2e 97       	sbiw	r28, 0x0e	; 14
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
	SendCommand01(0x06, 0x00, 0x0F);
    27b0:	4f e0       	ldi	r20, 0x0F	; 15
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	86 e0       	ldi	r24, 0x06	; 6
    27b6:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	a8 e4       	ldi	r26, 0x48	; 72
    27c0:	b3 e4       	ldi	r27, 0x43	; 67
    27c2:	89 83       	std	Y+1, r24	; 0x01
    27c4:	9a 83       	std	Y+2, r25	; 0x02
    27c6:	ab 83       	std	Y+3, r26	; 0x03
    27c8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	4a e7       	ldi	r20, 0x7A	; 122
    27d0:	55 e4       	ldi	r21, 0x45	; 69
    27d2:	69 81       	ldd	r22, Y+1	; 0x01
    27d4:	7a 81       	ldd	r23, Y+2	; 0x02
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	9c 81       	ldd	r25, Y+4	; 0x04
    27da:	0e 94 8a 22 	call	0x4514	; 0x4514 <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	8d 83       	std	Y+5, r24	; 0x05
    27e4:	9e 83       	std	Y+6, r25	; 0x06
    27e6:	af 83       	std	Y+7, r26	; 0x07
    27e8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	40 e8       	ldi	r20, 0x80	; 128
    27f0:	5f e3       	ldi	r21, 0x3F	; 63
    27f2:	6d 81       	ldd	r22, Y+5	; 0x05
    27f4:	7e 81       	ldd	r23, Y+6	; 0x06
    27f6:	8f 81       	ldd	r24, Y+7	; 0x07
    27f8:	98 85       	ldd	r25, Y+8	; 0x08
    27fa:	0e 94 09 22 	call	0x4412	; 0x4412 <__cmpsf2>
    27fe:	88 23       	and	r24, r24
    2800:	2c f4       	brge	.+10     	; 0x280c <snake_game_over+0x70>
		__ticks = 1;
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	9a 87       	std	Y+10, r25	; 0x0a
    2808:	89 87       	std	Y+9, r24	; 0x09
    280a:	3f c0       	rjmp	.+126    	; 0x288a <snake_game_over+0xee>
	else if (__tmp > 65535)
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	3f ef       	ldi	r19, 0xFF	; 255
    2810:	4f e7       	ldi	r20, 0x7F	; 127
    2812:	57 e4       	ldi	r21, 0x47	; 71
    2814:	6d 81       	ldd	r22, Y+5	; 0x05
    2816:	7e 81       	ldd	r23, Y+6	; 0x06
    2818:	8f 81       	ldd	r24, Y+7	; 0x07
    281a:	98 85       	ldd	r25, Y+8	; 0x08
    281c:	0e 94 86 22 	call	0x450c	; 0x450c <__gesf2>
    2820:	18 16       	cp	r1, r24
    2822:	4c f5       	brge	.+82     	; 0x2876 <snake_game_over+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e2       	ldi	r20, 0x20	; 32
    282a:	51 e4       	ldi	r21, 0x41	; 65
    282c:	69 81       	ldd	r22, Y+1	; 0x01
    282e:	7a 81       	ldd	r23, Y+2	; 0x02
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	9c 81       	ldd	r25, Y+4	; 0x04
    2834:	0e 94 8a 22 	call	0x4514	; 0x4514 <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	bc 01       	movw	r22, r24
    283e:	cd 01       	movw	r24, r26
    2840:	0e 94 0d 22 	call	0x441a	; 0x441a <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	9a 87       	std	Y+10, r25	; 0x0a
    284a:	89 87       	std	Y+9, r24	; 0x09
    284c:	0f c0       	rjmp	.+30     	; 0x286c <snake_game_over+0xd0>
    284e:	80 e9       	ldi	r24, 0x90	; 144
    2850:	91 e0       	ldi	r25, 0x01	; 1
    2852:	9c 87       	std	Y+12, r25	; 0x0c
    2854:	8b 87       	std	Y+11, r24	; 0x0b
    2856:	8b 85       	ldd	r24, Y+11	; 0x0b
    2858:	9c 85       	ldd	r25, Y+12	; 0x0c
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <snake_game_over+0xbe>
    285e:	9c 87       	std	Y+12, r25	; 0x0c
    2860:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2862:	89 85       	ldd	r24, Y+9	; 0x09
    2864:	9a 85       	ldd	r25, Y+10	; 0x0a
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	9a 87       	std	Y+10, r25	; 0x0a
    286a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286c:	89 85       	ldd	r24, Y+9	; 0x09
    286e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2870:	89 2b       	or	r24, r25
    2872:	69 f7       	brne	.-38     	; 0x284e <snake_game_over+0xb2>
    2874:	14 c0       	rjmp	.+40     	; 0x289e <snake_game_over+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2876:	6d 81       	ldd	r22, Y+5	; 0x05
    2878:	7e 81       	ldd	r23, Y+6	; 0x06
    287a:	8f 81       	ldd	r24, Y+7	; 0x07
    287c:	98 85       	ldd	r25, Y+8	; 0x08
    287e:	0e 94 0d 22 	call	0x441a	; 0x441a <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	9a 87       	std	Y+10, r25	; 0x0a
    2888:	89 87       	std	Y+9, r24	; 0x09
    288a:	89 85       	ldd	r24, Y+9	; 0x09
    288c:	9a 85       	ldd	r25, Y+10	; 0x0a
    288e:	9e 87       	std	Y+14, r25	; 0x0e
    2890:	8d 87       	std	Y+13, r24	; 0x0d
    2892:	8d 85       	ldd	r24, Y+13	; 0x0d
    2894:	9e 85       	ldd	r25, Y+14	; 0x0e
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	f1 f7       	brne	.-4      	; 0x2896 <snake_game_over+0xfa>
    289a:	9e 87       	std	Y+14, r25	; 0x0e
    289c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(200);
	SendCommand01(0x0F, 0x01, 0x04);
    289e:	44 e0       	ldi	r20, 0x04	; 4
    28a0:	61 e0       	ldi	r22, 0x01	; 1
    28a2:	8f e0       	ldi	r24, 0x0F	; 15
    28a4:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
	snake_clear_map();
    28a8:	0e 94 a8 21 	call	0x4350	; 0x4350 <snake_clear_map>

	ssd1306_set_column_addr(0);
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
	
	screen = Over_snake;
    28b2:	84 e0       	ldi	r24, 0x04	; 4
    28b4:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
}
    28b8:	00 00       	nop
    28ba:	2e 96       	adiw	r28, 0x0e	; 14
    28bc:	0f b6       	in	r0, 0x3f	; 63
    28be:	f8 94       	cli
    28c0:	de bf       	out	0x3e, r29	; 62
    28c2:	0f be       	out	0x3f, r0	; 63
    28c4:	cd bf       	out	0x3d, r28	; 61
    28c6:	df 91       	pop	r29
    28c8:	cf 91       	pop	r28
    28ca:	08 95       	ret

000028cc <Tetris_draw_map>:




void Tetris_draw_map()
{
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
    28d4:	c5 50       	subi	r28, 0x05	; 5
    28d6:	d3 40       	sbci	r29, 0x03	; 3
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
	unsigned char MAP [6][128] = {0};
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	33 e0       	ldi	r19, 0x03	; 3
    28e6:	ce 01       	movw	r24, r28
    28e8:	06 96       	adiw	r24, 0x06	; 6
    28ea:	fc 01       	movw	r30, r24
    28ec:	a9 01       	movw	r20, r18
    28ee:	11 92       	st	Z+, r1
    28f0:	41 50       	subi	r20, 0x01	; 1
    28f2:	50 40       	sbci	r21, 0x00	; 0
    28f4:	e1 f7       	brne	.-8      	; 0x28ee <Tetris_draw_map+0x22>
	for(int i=0;i<12;i++)
    28f6:	1a 82       	std	Y+2, r1	; 0x02
    28f8:	19 82       	std	Y+1, r1	; 0x01
    28fa:	f0 c1       	rjmp	.+992    	; 0x2cdc <Tetris_draw_map+0x410>
	{
		for(int j = 0; j < 32; j++)
    28fc:	1c 82       	std	Y+4, r1	; 0x04
    28fe:	1b 82       	std	Y+3, r1	; 0x03
    2900:	e3 c1       	rjmp	.+966    	; 0x2cc8 <Tetris_draw_map+0x3fc>
		{
			if((game_board[j] & (unsigned long int)1 << i) != 0)
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	9c 81       	ldd	r25, Y+4	; 0x04
    2906:	88 0f       	add	r24, r24
    2908:	99 1f       	adc	r25, r25
    290a:	88 0f       	add	r24, r24
    290c:	99 1f       	adc	r25, r25
    290e:	81 5c       	subi	r24, 0xC1	; 193
    2910:	97 4f       	sbci	r25, 0xF7	; 247
    2912:	fc 01       	movw	r30, r24
    2914:	80 81       	ld	r24, Z
    2916:	91 81       	ldd	r25, Z+1	; 0x01
    2918:	a2 81       	ldd	r26, Z+2	; 0x02
    291a:	b3 81       	ldd	r27, Z+3	; 0x03
    291c:	09 80       	ldd	r0, Y+1	; 0x01
    291e:	04 c0       	rjmp	.+8      	; 0x2928 <Tetris_draw_map+0x5c>
    2920:	b6 95       	lsr	r27
    2922:	a7 95       	ror	r26
    2924:	97 95       	ror	r25
    2926:	87 95       	ror	r24
    2928:	0a 94       	dec	r0
    292a:	d2 f7       	brpl	.-12     	; 0x2920 <Tetris_draw_map+0x54>
    292c:	81 70       	andi	r24, 0x01	; 1
    292e:	99 27       	eor	r25, r25
    2930:	aa 27       	eor	r26, r26
    2932:	bb 27       	eor	r27, r27
    2934:	89 2b       	or	r24, r25
    2936:	8a 2b       	or	r24, r26
    2938:	8b 2b       	or	r24, r27
    293a:	09 f4       	brne	.+2      	; 0x293e <Tetris_draw_map+0x72>
    293c:	c0 c1       	rjmp	.+896    	; 0x2cbe <Tetris_draw_map+0x3f2>
			{
				if(i % 2 == 0)
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	9a 81       	ldd	r25, Y+2	; 0x02
    2942:	81 70       	andi	r24, 0x01	; 1
    2944:	99 27       	eor	r25, r25
    2946:	89 2b       	or	r24, r25
    2948:	09 f0       	breq	.+2      	; 0x294c <Tetris_draw_map+0x80>
    294a:	dd c0       	rjmp	.+442    	; 0x2b06 <Tetris_draw_map+0x23a>
				{
					MAP[i/2][4*j] |= 0x0F;
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	9a 81       	ldd	r25, Y+2	; 0x02
    2950:	99 23       	and	r25, r25
    2952:	0c f4       	brge	.+2      	; 0x2956 <Tetris_draw_map+0x8a>
    2954:	01 96       	adiw	r24, 0x01	; 1
    2956:	95 95       	asr	r25
    2958:	87 95       	ror	r24
    295a:	2b 81       	ldd	r18, Y+3	; 0x03
    295c:	3c 81       	ldd	r19, Y+4	; 0x04
    295e:	22 0f       	add	r18, r18
    2960:	33 1f       	adc	r19, r19
    2962:	22 0f       	add	r18, r18
    2964:	33 1f       	adc	r19, r19
    2966:	4b 81       	ldd	r20, Y+3	; 0x03
    2968:	5c 81       	ldd	r21, Y+4	; 0x04
    296a:	44 0f       	add	r20, r20
    296c:	55 1f       	adc	r21, r21
    296e:	44 0f       	add	r20, r20
    2970:	55 1f       	adc	r21, r21
    2972:	bc 01       	movw	r22, r24
    2974:	76 95       	lsr	r23
    2976:	76 2f       	mov	r23, r22
    2978:	66 27       	eor	r22, r22
    297a:	77 95       	ror	r23
    297c:	67 95       	ror	r22
    297e:	fe 01       	movw	r30, r28
    2980:	31 96       	adiw	r30, 0x01	; 1
    2982:	6e 0f       	add	r22, r30
    2984:	7f 1f       	adc	r23, r31
    2986:	46 0f       	add	r20, r22
    2988:	57 1f       	adc	r21, r23
    298a:	4b 5f       	subi	r20, 0xFB	; 251
    298c:	5f 4f       	sbci	r21, 0xFF	; 255
    298e:	fa 01       	movw	r30, r20
    2990:	40 81       	ld	r20, Z
    2992:	64 2f       	mov	r22, r20
    2994:	6f 60       	ori	r22, 0x0F	; 15
    2996:	96 95       	lsr	r25
    2998:	98 2f       	mov	r25, r24
    299a:	88 27       	eor	r24, r24
    299c:	97 95       	ror	r25
    299e:	87 95       	ror	r24
    29a0:	ae 01       	movw	r20, r28
    29a2:	4f 5f       	subi	r20, 0xFF	; 255
    29a4:	5f 4f       	sbci	r21, 0xFF	; 255
    29a6:	84 0f       	add	r24, r20
    29a8:	95 1f       	adc	r25, r21
    29aa:	82 0f       	add	r24, r18
    29ac:	93 1f       	adc	r25, r19
    29ae:	05 96       	adiw	r24, 0x05	; 5
    29b0:	fc 01       	movw	r30, r24
    29b2:	60 83       	st	Z, r22
					MAP[i/2][4*j + 1] |= 0x0F;
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	99 23       	and	r25, r25
    29ba:	0c f4       	brge	.+2      	; 0x29be <Tetris_draw_map+0xf2>
    29bc:	01 96       	adiw	r24, 0x01	; 1
    29be:	95 95       	asr	r25
    29c0:	87 95       	ror	r24
    29c2:	2b 81       	ldd	r18, Y+3	; 0x03
    29c4:	3c 81       	ldd	r19, Y+4	; 0x04
    29c6:	22 0f       	add	r18, r18
    29c8:	33 1f       	adc	r19, r19
    29ca:	22 0f       	add	r18, r18
    29cc:	33 1f       	adc	r19, r19
    29ce:	2f 5f       	subi	r18, 0xFF	; 255
    29d0:	3f 4f       	sbci	r19, 0xFF	; 255
    29d2:	4b 81       	ldd	r20, Y+3	; 0x03
    29d4:	5c 81       	ldd	r21, Y+4	; 0x04
    29d6:	44 0f       	add	r20, r20
    29d8:	55 1f       	adc	r21, r21
    29da:	44 0f       	add	r20, r20
    29dc:	55 1f       	adc	r21, r21
    29de:	4f 5f       	subi	r20, 0xFF	; 255
    29e0:	5f 4f       	sbci	r21, 0xFF	; 255
    29e2:	bc 01       	movw	r22, r24
    29e4:	76 95       	lsr	r23
    29e6:	76 2f       	mov	r23, r22
    29e8:	66 27       	eor	r22, r22
    29ea:	77 95       	ror	r23
    29ec:	67 95       	ror	r22
    29ee:	fe 01       	movw	r30, r28
    29f0:	31 96       	adiw	r30, 0x01	; 1
    29f2:	6e 0f       	add	r22, r30
    29f4:	7f 1f       	adc	r23, r31
    29f6:	46 0f       	add	r20, r22
    29f8:	57 1f       	adc	r21, r23
    29fa:	4b 5f       	subi	r20, 0xFB	; 251
    29fc:	5f 4f       	sbci	r21, 0xFF	; 255
    29fe:	fa 01       	movw	r30, r20
    2a00:	40 81       	ld	r20, Z
    2a02:	64 2f       	mov	r22, r20
    2a04:	6f 60       	ori	r22, 0x0F	; 15
    2a06:	96 95       	lsr	r25
    2a08:	98 2f       	mov	r25, r24
    2a0a:	88 27       	eor	r24, r24
    2a0c:	97 95       	ror	r25
    2a0e:	87 95       	ror	r24
    2a10:	ae 01       	movw	r20, r28
    2a12:	4f 5f       	subi	r20, 0xFF	; 255
    2a14:	5f 4f       	sbci	r21, 0xFF	; 255
    2a16:	84 0f       	add	r24, r20
    2a18:	95 1f       	adc	r25, r21
    2a1a:	82 0f       	add	r24, r18
    2a1c:	93 1f       	adc	r25, r19
    2a1e:	05 96       	adiw	r24, 0x05	; 5
    2a20:	fc 01       	movw	r30, r24
    2a22:	60 83       	st	Z, r22
					MAP[i/2][4*j + 2] |= 0x0F;
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	9a 81       	ldd	r25, Y+2	; 0x02
    2a28:	99 23       	and	r25, r25
    2a2a:	0c f4       	brge	.+2      	; 0x2a2e <Tetris_draw_map+0x162>
    2a2c:	01 96       	adiw	r24, 0x01	; 1
    2a2e:	95 95       	asr	r25
    2a30:	87 95       	ror	r24
    2a32:	2b 81       	ldd	r18, Y+3	; 0x03
    2a34:	3c 81       	ldd	r19, Y+4	; 0x04
    2a36:	22 0f       	add	r18, r18
    2a38:	33 1f       	adc	r19, r19
    2a3a:	22 0f       	add	r18, r18
    2a3c:	33 1f       	adc	r19, r19
    2a3e:	2e 5f       	subi	r18, 0xFE	; 254
    2a40:	3f 4f       	sbci	r19, 0xFF	; 255
    2a42:	4b 81       	ldd	r20, Y+3	; 0x03
    2a44:	5c 81       	ldd	r21, Y+4	; 0x04
    2a46:	44 0f       	add	r20, r20
    2a48:	55 1f       	adc	r21, r21
    2a4a:	44 0f       	add	r20, r20
    2a4c:	55 1f       	adc	r21, r21
    2a4e:	4e 5f       	subi	r20, 0xFE	; 254
    2a50:	5f 4f       	sbci	r21, 0xFF	; 255
    2a52:	bc 01       	movw	r22, r24
    2a54:	76 95       	lsr	r23
    2a56:	76 2f       	mov	r23, r22
    2a58:	66 27       	eor	r22, r22
    2a5a:	77 95       	ror	r23
    2a5c:	67 95       	ror	r22
    2a5e:	fe 01       	movw	r30, r28
    2a60:	31 96       	adiw	r30, 0x01	; 1
    2a62:	6e 0f       	add	r22, r30
    2a64:	7f 1f       	adc	r23, r31
    2a66:	46 0f       	add	r20, r22
    2a68:	57 1f       	adc	r21, r23
    2a6a:	4b 5f       	subi	r20, 0xFB	; 251
    2a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a6e:	fa 01       	movw	r30, r20
    2a70:	40 81       	ld	r20, Z
    2a72:	64 2f       	mov	r22, r20
    2a74:	6f 60       	ori	r22, 0x0F	; 15
    2a76:	96 95       	lsr	r25
    2a78:	98 2f       	mov	r25, r24
    2a7a:	88 27       	eor	r24, r24
    2a7c:	97 95       	ror	r25
    2a7e:	87 95       	ror	r24
    2a80:	ae 01       	movw	r20, r28
    2a82:	4f 5f       	subi	r20, 0xFF	; 255
    2a84:	5f 4f       	sbci	r21, 0xFF	; 255
    2a86:	84 0f       	add	r24, r20
    2a88:	95 1f       	adc	r25, r21
    2a8a:	82 0f       	add	r24, r18
    2a8c:	93 1f       	adc	r25, r19
    2a8e:	05 96       	adiw	r24, 0x05	; 5
    2a90:	fc 01       	movw	r30, r24
    2a92:	60 83       	st	Z, r22
					MAP[i/2][4*j + 3] |= 0x0F;
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	9a 81       	ldd	r25, Y+2	; 0x02
    2a98:	99 23       	and	r25, r25
    2a9a:	0c f4       	brge	.+2      	; 0x2a9e <Tetris_draw_map+0x1d2>
    2a9c:	01 96       	adiw	r24, 0x01	; 1
    2a9e:	95 95       	asr	r25
    2aa0:	87 95       	ror	r24
    2aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    2aa4:	3c 81       	ldd	r19, Y+4	; 0x04
    2aa6:	22 0f       	add	r18, r18
    2aa8:	33 1f       	adc	r19, r19
    2aaa:	22 0f       	add	r18, r18
    2aac:	33 1f       	adc	r19, r19
    2aae:	2d 5f       	subi	r18, 0xFD	; 253
    2ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab2:	4b 81       	ldd	r20, Y+3	; 0x03
    2ab4:	5c 81       	ldd	r21, Y+4	; 0x04
    2ab6:	44 0f       	add	r20, r20
    2ab8:	55 1f       	adc	r21, r21
    2aba:	44 0f       	add	r20, r20
    2abc:	55 1f       	adc	r21, r21
    2abe:	4d 5f       	subi	r20, 0xFD	; 253
    2ac0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac2:	bc 01       	movw	r22, r24
    2ac4:	76 95       	lsr	r23
    2ac6:	76 2f       	mov	r23, r22
    2ac8:	66 27       	eor	r22, r22
    2aca:	77 95       	ror	r23
    2acc:	67 95       	ror	r22
    2ace:	fe 01       	movw	r30, r28
    2ad0:	31 96       	adiw	r30, 0x01	; 1
    2ad2:	6e 0f       	add	r22, r30
    2ad4:	7f 1f       	adc	r23, r31
    2ad6:	46 0f       	add	r20, r22
    2ad8:	57 1f       	adc	r21, r23
    2ada:	4b 5f       	subi	r20, 0xFB	; 251
    2adc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ade:	fa 01       	movw	r30, r20
    2ae0:	40 81       	ld	r20, Z
    2ae2:	64 2f       	mov	r22, r20
    2ae4:	6f 60       	ori	r22, 0x0F	; 15
    2ae6:	96 95       	lsr	r25
    2ae8:	98 2f       	mov	r25, r24
    2aea:	88 27       	eor	r24, r24
    2aec:	97 95       	ror	r25
    2aee:	87 95       	ror	r24
    2af0:	ae 01       	movw	r20, r28
    2af2:	4f 5f       	subi	r20, 0xFF	; 255
    2af4:	5f 4f       	sbci	r21, 0xFF	; 255
    2af6:	84 0f       	add	r24, r20
    2af8:	95 1f       	adc	r25, r21
    2afa:	82 0f       	add	r24, r18
    2afc:	93 1f       	adc	r25, r19
    2afe:	05 96       	adiw	r24, 0x05	; 5
    2b00:	fc 01       	movw	r30, r24
    2b02:	60 83       	st	Z, r22
    2b04:	dc c0       	rjmp	.+440    	; 0x2cbe <Tetris_draw_map+0x3f2>
				}
				else
				{
					MAP[i/2][4*j] |= 0xF0;
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0a:	99 23       	and	r25, r25
    2b0c:	0c f4       	brge	.+2      	; 0x2b10 <Tetris_draw_map+0x244>
    2b0e:	01 96       	adiw	r24, 0x01	; 1
    2b10:	95 95       	asr	r25
    2b12:	87 95       	ror	r24
    2b14:	2b 81       	ldd	r18, Y+3	; 0x03
    2b16:	3c 81       	ldd	r19, Y+4	; 0x04
    2b18:	22 0f       	add	r18, r18
    2b1a:	33 1f       	adc	r19, r19
    2b1c:	22 0f       	add	r18, r18
    2b1e:	33 1f       	adc	r19, r19
    2b20:	4b 81       	ldd	r20, Y+3	; 0x03
    2b22:	5c 81       	ldd	r21, Y+4	; 0x04
    2b24:	44 0f       	add	r20, r20
    2b26:	55 1f       	adc	r21, r21
    2b28:	44 0f       	add	r20, r20
    2b2a:	55 1f       	adc	r21, r21
    2b2c:	bc 01       	movw	r22, r24
    2b2e:	76 95       	lsr	r23
    2b30:	76 2f       	mov	r23, r22
    2b32:	66 27       	eor	r22, r22
    2b34:	77 95       	ror	r23
    2b36:	67 95       	ror	r22
    2b38:	fe 01       	movw	r30, r28
    2b3a:	31 96       	adiw	r30, 0x01	; 1
    2b3c:	6e 0f       	add	r22, r30
    2b3e:	7f 1f       	adc	r23, r31
    2b40:	46 0f       	add	r20, r22
    2b42:	57 1f       	adc	r21, r23
    2b44:	4b 5f       	subi	r20, 0xFB	; 251
    2b46:	5f 4f       	sbci	r21, 0xFF	; 255
    2b48:	fa 01       	movw	r30, r20
    2b4a:	40 81       	ld	r20, Z
    2b4c:	64 2f       	mov	r22, r20
    2b4e:	60 6f       	ori	r22, 0xF0	; 240
    2b50:	96 95       	lsr	r25
    2b52:	98 2f       	mov	r25, r24
    2b54:	88 27       	eor	r24, r24
    2b56:	97 95       	ror	r25
    2b58:	87 95       	ror	r24
    2b5a:	ae 01       	movw	r20, r28
    2b5c:	4f 5f       	subi	r20, 0xFF	; 255
    2b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b60:	84 0f       	add	r24, r20
    2b62:	95 1f       	adc	r25, r21
    2b64:	82 0f       	add	r24, r18
    2b66:	93 1f       	adc	r25, r19
    2b68:	05 96       	adiw	r24, 0x05	; 5
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	60 83       	st	Z, r22
					MAP[i/2][4*j + 1] |= 0xF0;
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	9a 81       	ldd	r25, Y+2	; 0x02
    2b72:	99 23       	and	r25, r25
    2b74:	0c f4       	brge	.+2      	; 0x2b78 <Tetris_draw_map+0x2ac>
    2b76:	01 96       	adiw	r24, 0x01	; 1
    2b78:	95 95       	asr	r25
    2b7a:	87 95       	ror	r24
    2b7c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b7e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b80:	22 0f       	add	r18, r18
    2b82:	33 1f       	adc	r19, r19
    2b84:	22 0f       	add	r18, r18
    2b86:	33 1f       	adc	r19, r19
    2b88:	2f 5f       	subi	r18, 0xFF	; 255
    2b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8c:	4b 81       	ldd	r20, Y+3	; 0x03
    2b8e:	5c 81       	ldd	r21, Y+4	; 0x04
    2b90:	44 0f       	add	r20, r20
    2b92:	55 1f       	adc	r21, r21
    2b94:	44 0f       	add	r20, r20
    2b96:	55 1f       	adc	r21, r21
    2b98:	4f 5f       	subi	r20, 0xFF	; 255
    2b9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b9c:	bc 01       	movw	r22, r24
    2b9e:	76 95       	lsr	r23
    2ba0:	76 2f       	mov	r23, r22
    2ba2:	66 27       	eor	r22, r22
    2ba4:	77 95       	ror	r23
    2ba6:	67 95       	ror	r22
    2ba8:	fe 01       	movw	r30, r28
    2baa:	31 96       	adiw	r30, 0x01	; 1
    2bac:	6e 0f       	add	r22, r30
    2bae:	7f 1f       	adc	r23, r31
    2bb0:	46 0f       	add	r20, r22
    2bb2:	57 1f       	adc	r21, r23
    2bb4:	4b 5f       	subi	r20, 0xFB	; 251
    2bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb8:	fa 01       	movw	r30, r20
    2bba:	40 81       	ld	r20, Z
    2bbc:	64 2f       	mov	r22, r20
    2bbe:	60 6f       	ori	r22, 0xF0	; 240
    2bc0:	96 95       	lsr	r25
    2bc2:	98 2f       	mov	r25, r24
    2bc4:	88 27       	eor	r24, r24
    2bc6:	97 95       	ror	r25
    2bc8:	87 95       	ror	r24
    2bca:	ae 01       	movw	r20, r28
    2bcc:	4f 5f       	subi	r20, 0xFF	; 255
    2bce:	5f 4f       	sbci	r21, 0xFF	; 255
    2bd0:	84 0f       	add	r24, r20
    2bd2:	95 1f       	adc	r25, r21
    2bd4:	82 0f       	add	r24, r18
    2bd6:	93 1f       	adc	r25, r19
    2bd8:	05 96       	adiw	r24, 0x05	; 5
    2bda:	fc 01       	movw	r30, r24
    2bdc:	60 83       	st	Z, r22
					MAP[i/2][4*j + 2] |= 0xF0;
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	9a 81       	ldd	r25, Y+2	; 0x02
    2be2:	99 23       	and	r25, r25
    2be4:	0c f4       	brge	.+2      	; 0x2be8 <Tetris_draw_map+0x31c>
    2be6:	01 96       	adiw	r24, 0x01	; 1
    2be8:	95 95       	asr	r25
    2bea:	87 95       	ror	r24
    2bec:	2b 81       	ldd	r18, Y+3	; 0x03
    2bee:	3c 81       	ldd	r19, Y+4	; 0x04
    2bf0:	22 0f       	add	r18, r18
    2bf2:	33 1f       	adc	r19, r19
    2bf4:	22 0f       	add	r18, r18
    2bf6:	33 1f       	adc	r19, r19
    2bf8:	2e 5f       	subi	r18, 0xFE	; 254
    2bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2bfc:	4b 81       	ldd	r20, Y+3	; 0x03
    2bfe:	5c 81       	ldd	r21, Y+4	; 0x04
    2c00:	44 0f       	add	r20, r20
    2c02:	55 1f       	adc	r21, r21
    2c04:	44 0f       	add	r20, r20
    2c06:	55 1f       	adc	r21, r21
    2c08:	4e 5f       	subi	r20, 0xFE	; 254
    2c0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c0c:	bc 01       	movw	r22, r24
    2c0e:	76 95       	lsr	r23
    2c10:	76 2f       	mov	r23, r22
    2c12:	66 27       	eor	r22, r22
    2c14:	77 95       	ror	r23
    2c16:	67 95       	ror	r22
    2c18:	fe 01       	movw	r30, r28
    2c1a:	31 96       	adiw	r30, 0x01	; 1
    2c1c:	6e 0f       	add	r22, r30
    2c1e:	7f 1f       	adc	r23, r31
    2c20:	46 0f       	add	r20, r22
    2c22:	57 1f       	adc	r21, r23
    2c24:	4b 5f       	subi	r20, 0xFB	; 251
    2c26:	5f 4f       	sbci	r21, 0xFF	; 255
    2c28:	fa 01       	movw	r30, r20
    2c2a:	40 81       	ld	r20, Z
    2c2c:	64 2f       	mov	r22, r20
    2c2e:	60 6f       	ori	r22, 0xF0	; 240
    2c30:	96 95       	lsr	r25
    2c32:	98 2f       	mov	r25, r24
    2c34:	88 27       	eor	r24, r24
    2c36:	97 95       	ror	r25
    2c38:	87 95       	ror	r24
    2c3a:	ae 01       	movw	r20, r28
    2c3c:	4f 5f       	subi	r20, 0xFF	; 255
    2c3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c40:	84 0f       	add	r24, r20
    2c42:	95 1f       	adc	r25, r21
    2c44:	82 0f       	add	r24, r18
    2c46:	93 1f       	adc	r25, r19
    2c48:	05 96       	adiw	r24, 0x05	; 5
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	60 83       	st	Z, r22
					MAP[i/2][4*j + 3] |= 0xF0;
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	9a 81       	ldd	r25, Y+2	; 0x02
    2c52:	99 23       	and	r25, r25
    2c54:	0c f4       	brge	.+2      	; 0x2c58 <Tetris_draw_map+0x38c>
    2c56:	01 96       	adiw	r24, 0x01	; 1
    2c58:	95 95       	asr	r25
    2c5a:	87 95       	ror	r24
    2c5c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c5e:	3c 81       	ldd	r19, Y+4	; 0x04
    2c60:	22 0f       	add	r18, r18
    2c62:	33 1f       	adc	r19, r19
    2c64:	22 0f       	add	r18, r18
    2c66:	33 1f       	adc	r19, r19
    2c68:	2d 5f       	subi	r18, 0xFD	; 253
    2c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6c:	4b 81       	ldd	r20, Y+3	; 0x03
    2c6e:	5c 81       	ldd	r21, Y+4	; 0x04
    2c70:	44 0f       	add	r20, r20
    2c72:	55 1f       	adc	r21, r21
    2c74:	44 0f       	add	r20, r20
    2c76:	55 1f       	adc	r21, r21
    2c78:	4d 5f       	subi	r20, 0xFD	; 253
    2c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c7c:	bc 01       	movw	r22, r24
    2c7e:	76 95       	lsr	r23
    2c80:	76 2f       	mov	r23, r22
    2c82:	66 27       	eor	r22, r22
    2c84:	77 95       	ror	r23
    2c86:	67 95       	ror	r22
    2c88:	fe 01       	movw	r30, r28
    2c8a:	31 96       	adiw	r30, 0x01	; 1
    2c8c:	6e 0f       	add	r22, r30
    2c8e:	7f 1f       	adc	r23, r31
    2c90:	46 0f       	add	r20, r22
    2c92:	57 1f       	adc	r21, r23
    2c94:	4b 5f       	subi	r20, 0xFB	; 251
    2c96:	5f 4f       	sbci	r21, 0xFF	; 255
    2c98:	fa 01       	movw	r30, r20
    2c9a:	40 81       	ld	r20, Z
    2c9c:	64 2f       	mov	r22, r20
    2c9e:	60 6f       	ori	r22, 0xF0	; 240
    2ca0:	96 95       	lsr	r25
    2ca2:	98 2f       	mov	r25, r24
    2ca4:	88 27       	eor	r24, r24
    2ca6:	97 95       	ror	r25
    2ca8:	87 95       	ror	r24
    2caa:	ae 01       	movw	r20, r28
    2cac:	4f 5f       	subi	r20, 0xFF	; 255
    2cae:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb0:	84 0f       	add	r24, r20
    2cb2:	95 1f       	adc	r25, r21
    2cb4:	82 0f       	add	r24, r18
    2cb6:	93 1f       	adc	r25, r19
    2cb8:	05 96       	adiw	r24, 0x05	; 5
    2cba:	fc 01       	movw	r30, r24
    2cbc:	60 83       	st	Z, r22
void Tetris_draw_map()
{
	unsigned char MAP [6][128] = {0};
	for(int i=0;i<12;i++)
	{
		for(int j = 0; j < 32; j++)
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc2:	01 96       	adiw	r24, 0x01	; 1
    2cc4:	9c 83       	std	Y+4, r25	; 0x04
    2cc6:	8b 83       	std	Y+3, r24	; 0x03
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ccc:	80 97       	sbiw	r24, 0x20	; 32
    2cce:	0c f4       	brge	.+2      	; 0x2cd2 <Tetris_draw_map+0x406>
    2cd0:	18 ce       	rjmp	.-976    	; 0x2902 <Tetris_draw_map+0x36>


void Tetris_draw_map()
{
	unsigned char MAP [6][128] = {0};
	for(int i=0;i<12;i++)
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd6:	01 96       	adiw	r24, 0x01	; 1
    2cd8:	9a 83       	std	Y+2, r25	; 0x02
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce0:	0c 97       	sbiw	r24, 0x0c	; 12
    2ce2:	0c f4       	brge	.+2      	; 0x2ce6 <Tetris_draw_map+0x41a>
    2ce4:	0b ce       	rjmp	.-1002   	; 0x28fc <Tetris_draw_map+0x30>
			}
		}
	}


	for(unsigned char y=2;y<8;y++)
    2ce6:	82 e0       	ldi	r24, 0x02	; 2
    2ce8:	8d 83       	std	Y+5, r24	; 0x05
    2cea:	18 c0       	rjmp	.+48     	; 0x2d1c <Tetris_draw_map+0x450>
	{
		ssd1306_set_page_start(y);
    2cec:	8d 81       	ldd	r24, Y+5	; 0x05
    2cee:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_data(MAP[y - 2], COL_NUM);
    2cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf4:	88 2f       	mov	r24, r24
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	02 97       	sbiw	r24, 0x02	; 2
    2cfa:	9e 01       	movw	r18, r28
    2cfc:	2a 5f       	subi	r18, 0xFA	; 250
    2cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2d00:	96 95       	lsr	r25
    2d02:	98 2f       	mov	r25, r24
    2d04:	88 27       	eor	r24, r24
    2d06:	97 95       	ror	r25
    2d08:	87 95       	ror	r24
    2d0a:	82 0f       	add	r24, r18
    2d0c:	93 1f       	adc	r25, r19
    2d0e:	60 e8       	ldi	r22, 0x80	; 128
    2d10:	70 e0       	ldi	r23, 0x00	; 0
    2d12:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
			}
		}
	}


	for(unsigned char y=2;y<8;y++)
    2d16:	8d 81       	ldd	r24, Y+5	; 0x05
    2d18:	8f 5f       	subi	r24, 0xFF	; 255
    2d1a:	8d 83       	std	Y+5, r24	; 0x05
    2d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1e:	88 30       	cpi	r24, 0x08	; 8
    2d20:	28 f3       	brcs	.-54     	; 0x2cec <Tetris_draw_map+0x420>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(MAP[y - 2], COL_NUM);
	}
}
    2d22:	00 00       	nop
    2d24:	cb 5f       	subi	r28, 0xFB	; 251
    2d26:	dc 4f       	sbci	r29, 0xFC	; 252
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	f8 94       	cli
    2d2c:	de bf       	out	0x3e, r29	; 62
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	cd bf       	out	0x3d, r28	; 61
    2d32:	df 91       	pop	r29
    2d34:	cf 91       	pop	r28
    2d36:	08 95       	ret

00002d38 <NewTetriminos>:

void NewTetriminos()
{
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	00 d0       	rcall	.+0      	; 0x2d3e <NewTetriminos+0x6>
    2d3e:	00 d0       	rcall	.+0      	; 0x2d40 <NewTetriminos+0x8>
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
	new_block = 0;	//새로운 블록 플레그 끄기
    2d44:	10 92 1c 08 	sts	0x081C, r1	; 0x80081c <new_block>
	shape = next_block;
    2d48:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <next_block>
    2d4c:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <shape>
	next_block = TCNT0 % 7;					//다음에 올 테트리미노스 랜덤 출력
    2d50:	82 e5       	ldi	r24, 0x52	; 82
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	fc 01       	movw	r30, r24
    2d56:	20 81       	ld	r18, Z
    2d58:	85 e2       	ldi	r24, 0x25	; 37
    2d5a:	28 9f       	mul	r18, r24
    2d5c:	81 2d       	mov	r24, r1
    2d5e:	11 24       	eor	r1, r1
    2d60:	92 2f       	mov	r25, r18
    2d62:	98 1b       	sub	r25, r24
    2d64:	96 95       	lsr	r25
    2d66:	89 0f       	add	r24, r25
    2d68:	98 2f       	mov	r25, r24
    2d6a:	96 95       	lsr	r25
    2d6c:	96 95       	lsr	r25
    2d6e:	89 2f       	mov	r24, r25
    2d70:	88 0f       	add	r24, r24
    2d72:	88 0f       	add	r24, r24
    2d74:	88 0f       	add	r24, r24
    2d76:	89 1b       	sub	r24, r25
    2d78:	92 2f       	mov	r25, r18
    2d7a:	98 1b       	sub	r25, r24
    2d7c:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <next_block>
	pattern = 0;	//기본 회전모향 설정
    2d80:	10 92 2b 08 	sts	0x082B, r1	; 0x80082b <pattern>
	cur_line = 0;                 // 테트리미노스 현재 라인 (최상위 라인)
    2d84:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <cur_line>
	cur_col = 6;                // 테트리미노스의 현재 칸
    2d88:	86 e0       	ldi	r24, 0x06	; 6
    2d8a:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <cur_col>

	tetriminos_to_temp_line();
    2d8e:	0e 94 84 06 	call	0xd08	; 0xd08 <tetriminos_to_temp_line>

	
	game_over |= game_board[cur_line] & temp_line[0];	//게임보드에 있는 테트리미노스와 임시저장소에 생긴 테트리미노스가 겹치는지 확인하고 겹치면 게임오버 플레그 켜짐
    2d92:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    2d96:	88 2f       	mov	r24, r24
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	88 0f       	add	r24, r24
    2d9c:	99 1f       	adc	r25, r25
    2d9e:	88 0f       	add	r24, r24
    2da0:	99 1f       	adc	r25, r25
    2da2:	81 5c       	subi	r24, 0xC1	; 193
    2da4:	97 4f       	sbci	r25, 0xF7	; 247
    2da6:	fc 01       	movw	r30, r24
    2da8:	80 81       	ld	r24, Z
    2daa:	91 81       	ldd	r25, Z+1	; 0x01
    2dac:	a2 81       	ldd	r26, Z+2	; 0x02
    2dae:	b3 81       	ldd	r27, Z+3	; 0x03
    2db0:	28 2f       	mov	r18, r24
    2db2:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    2db6:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    2dba:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    2dbe:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    2dc2:	92 2f       	mov	r25, r18
    2dc4:	98 23       	and	r25, r24
    2dc6:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <game_over>
    2dca:	89 2b       	or	r24, r25
    2dcc:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <game_over>
	game_over |= game_board[cur_line + 1] & temp_line[1];	//or 연산으로 어디든 겹치면 플레그 켜진다
    2dd0:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    2dd4:	88 2f       	mov	r24, r24
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	01 96       	adiw	r24, 0x01	; 1
    2dda:	88 0f       	add	r24, r24
    2ddc:	99 1f       	adc	r25, r25
    2dde:	88 0f       	add	r24, r24
    2de0:	99 1f       	adc	r25, r25
    2de2:	81 5c       	subi	r24, 0xC1	; 193
    2de4:	97 4f       	sbci	r25, 0xF7	; 247
    2de6:	fc 01       	movw	r30, r24
    2de8:	80 81       	ld	r24, Z
    2dea:	91 81       	ldd	r25, Z+1	; 0x01
    2dec:	a2 81       	ldd	r26, Z+2	; 0x02
    2dee:	b3 81       	ldd	r27, Z+3	; 0x03
    2df0:	28 2f       	mov	r18, r24
    2df2:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    2df6:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    2dfa:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    2dfe:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    2e02:	92 2f       	mov	r25, r18
    2e04:	98 23       	and	r25, r24
    2e06:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <game_over>
    2e0a:	89 2b       	or	r24, r25
    2e0c:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <game_over>
	game_over |= game_board[cur_line + 2] & temp_line[2];
    2e10:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    2e14:	88 2f       	mov	r24, r24
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	02 96       	adiw	r24, 0x02	; 2
    2e1a:	88 0f       	add	r24, r24
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	88 0f       	add	r24, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	81 5c       	subi	r24, 0xC1	; 193
    2e24:	97 4f       	sbci	r25, 0xF7	; 247
    2e26:	fc 01       	movw	r30, r24
    2e28:	80 81       	ld	r24, Z
    2e2a:	91 81       	ldd	r25, Z+1	; 0x01
    2e2c:	a2 81       	ldd	r26, Z+2	; 0x02
    2e2e:	b3 81       	ldd	r27, Z+3	; 0x03
    2e30:	28 2f       	mov	r18, r24
    2e32:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    2e36:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    2e3a:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    2e3e:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    2e42:	92 2f       	mov	r25, r18
    2e44:	98 23       	and	r25, r24
    2e46:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <game_over>
    2e4a:	89 2b       	or	r24, r25
    2e4c:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <game_over>
	game_over |= game_board[cur_line + 3] & temp_line[3];
    2e50:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    2e54:	88 2f       	mov	r24, r24
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	03 96       	adiw	r24, 0x03	; 3
    2e5a:	88 0f       	add	r24, r24
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	81 5c       	subi	r24, 0xC1	; 193
    2e64:	97 4f       	sbci	r25, 0xF7	; 247
    2e66:	fc 01       	movw	r30, r24
    2e68:	80 81       	ld	r24, Z
    2e6a:	91 81       	ldd	r25, Z+1	; 0x01
    2e6c:	a2 81       	ldd	r26, Z+2	; 0x02
    2e6e:	b3 81       	ldd	r27, Z+3	; 0x03
    2e70:	28 2f       	mov	r18, r24
    2e72:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    2e76:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    2e7a:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    2e7e:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    2e82:	92 2f       	mov	r25, r18
    2e84:	98 23       	and	r25, r24
    2e86:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <game_over>
    2e8a:	89 2b       	or	r24, r25
    2e8c:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <game_over>

	if(game_over != 0)
    2e90:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <game_over>
    2e94:	88 23       	and	r24, r24
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <NewTetriminos+0x162>
    2e98:	58 c0       	rjmp	.+176    	; 0x2f4a <NewTetriminos+0x212>
	{
		for (int i = 0; i < 31; i++ ) main_board[i] = 0x801;	//메인보드 초기화
    2e9a:	1a 82       	std	Y+2, r1	; 0x02
    2e9c:	19 82       	std	Y+1, r1	; 0x01
    2e9e:	17 c0       	rjmp	.+46     	; 0x2ece <NewTetriminos+0x196>
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea4:	88 0f       	add	r24, r24
    2ea6:	99 1f       	adc	r25, r25
    2ea8:	88 0f       	add	r24, r24
    2eaa:	99 1f       	adc	r25, r25
    2eac:	9c 01       	movw	r18, r24
    2eae:	24 56       	subi	r18, 0x64	; 100
    2eb0:	38 4f       	sbci	r19, 0xF8	; 248
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	98 e0       	ldi	r25, 0x08	; 8
    2eb6:	a0 e0       	ldi	r26, 0x00	; 0
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	f9 01       	movw	r30, r18
    2ebc:	80 83       	st	Z, r24
    2ebe:	91 83       	std	Z+1, r25	; 0x01
    2ec0:	a2 83       	std	Z+2, r26	; 0x02
    2ec2:	b3 83       	std	Z+3, r27	; 0x03
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec8:	01 96       	adiw	r24, 0x01	; 1
    2eca:	9a 83       	std	Y+2, r25	; 0x02
    2ecc:	89 83       	std	Y+1, r24	; 0x01
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed2:	4f 97       	sbiw	r24, 0x1f	; 31
    2ed4:	2c f3       	brlt	.-54     	; 0x2ea0 <NewTetriminos+0x168>
		main_board[31] = 0xFFF;
    2ed6:	8f ef       	ldi	r24, 0xFF	; 255
    2ed8:	9f e0       	ldi	r25, 0x0F	; 15
    2eda:	a0 e0       	ldi	r26, 0x00	; 0
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <main_board+0x7c>
    2ee2:	90 93 19 08 	sts	0x0819, r25	; 0x800819 <main_board+0x7d>
    2ee6:	a0 93 1a 08 	sts	0x081A, r26	; 0x80081a <main_board+0x7e>
    2eea:	b0 93 1b 08 	sts	0x081B, r27	; 0x80081b <main_board+0x7f>
		for (int i = 0; i < 31; i++ ) game_board[i] = 0x801;	//게임보드 초기화
    2eee:	1c 82       	std	Y+4, r1	; 0x04
    2ef0:	1b 82       	std	Y+3, r1	; 0x03
    2ef2:	17 c0       	rjmp	.+46     	; 0x2f22 <NewTetriminos+0x1ea>
    2ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef8:	88 0f       	add	r24, r24
    2efa:	99 1f       	adc	r25, r25
    2efc:	88 0f       	add	r24, r24
    2efe:	99 1f       	adc	r25, r25
    2f00:	9c 01       	movw	r18, r24
    2f02:	21 5c       	subi	r18, 0xC1	; 193
    2f04:	37 4f       	sbci	r19, 0xF7	; 247
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	98 e0       	ldi	r25, 0x08	; 8
    2f0a:	a0 e0       	ldi	r26, 0x00	; 0
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	f9 01       	movw	r30, r18
    2f10:	80 83       	st	Z, r24
    2f12:	91 83       	std	Z+1, r25	; 0x01
    2f14:	a2 83       	std	Z+2, r26	; 0x02
    2f16:	b3 83       	std	Z+3, r27	; 0x03
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1c:	01 96       	adiw	r24, 0x01	; 1
    2f1e:	9c 83       	std	Y+4, r25	; 0x04
    2f20:	8b 83       	std	Y+3, r24	; 0x03
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	9c 81       	ldd	r25, Y+4	; 0x04
    2f26:	4f 97       	sbiw	r24, 0x1f	; 31
    2f28:	2c f3       	brlt	.-54     	; 0x2ef4 <NewTetriminos+0x1bc>
		game_board[31] = 0xFFF;
    2f2a:	8f ef       	ldi	r24, 0xFF	; 255
    2f2c:	9f e0       	ldi	r25, 0x0F	; 15
    2f2e:	a0 e0       	ldi	r26, 0x00	; 0
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <game_board+0x7c>
    2f36:	90 93 bc 08 	sts	0x08BC, r25	; 0x8008bc <game_board+0x7d>
    2f3a:	a0 93 bd 08 	sts	0x08BD, r26	; 0x8008bd <game_board+0x7e>
    2f3e:	b0 93 be 08 	sts	0x08BE, r27	; 0x8008be <game_board+0x7f>
		Tetris_draw_map();
    2f42:	c4 dc       	rcall	.-1656   	; 0x28cc <Tetris_draw_map>

		screen = Over_tetris;
    2f44:	85 e0       	ldi	r24, 0x05	; 5
    2f46:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <screen>
	}
	
	
	if(screen == Play_tetris)
    2f4a:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
    2f4e:	83 30       	cpi	r24, 0x03	; 3
    2f50:	09 f0       	breq	.+2      	; 0x2f54 <NewTetriminos+0x21c>
    2f52:	b8 c0       	rjmp	.+368    	; 0x30c4 <NewTetriminos+0x38c>
	{
		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
    2f54:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    2f58:	68 2f       	mov	r22, r24
    2f5a:	70 e0       	ldi	r23, 0x00	; 0
    2f5c:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    2f60:	88 2f       	mov	r24, r24
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	88 0f       	add	r24, r24
    2f66:	99 1f       	adc	r25, r25
    2f68:	88 0f       	add	r24, r24
    2f6a:	99 1f       	adc	r25, r25
    2f6c:	81 5c       	subi	r24, 0xC1	; 193
    2f6e:	97 4f       	sbci	r25, 0xF7	; 247
    2f70:	fc 01       	movw	r30, r24
    2f72:	20 81       	ld	r18, Z
    2f74:	31 81       	ldd	r19, Z+1	; 0x01
    2f76:	42 81       	ldd	r20, Z+2	; 0x02
    2f78:	53 81       	ldd	r21, Z+3	; 0x03
    2f7a:	80 91 2c 08 	lds	r24, 0x082C	; 0x80082c <temp_line>
    2f7e:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <temp_line+0x1>
    2f82:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <temp_line+0x2>
    2f86:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <temp_line+0x3>
    2f8a:	82 2b       	or	r24, r18
    2f8c:	93 2b       	or	r25, r19
    2f8e:	a4 2b       	or	r26, r20
    2f90:	b5 2b       	or	r27, r21
    2f92:	9b 01       	movw	r18, r22
    2f94:	22 0f       	add	r18, r18
    2f96:	33 1f       	adc	r19, r19
    2f98:	22 0f       	add	r18, r18
    2f9a:	33 1f       	adc	r19, r19
    2f9c:	21 5c       	subi	r18, 0xC1	; 193
    2f9e:	37 4f       	sbci	r19, 0xF7	; 247
    2fa0:	f9 01       	movw	r30, r18
    2fa2:	80 83       	st	Z, r24
    2fa4:	91 83       	std	Z+1, r25	; 0x01
    2fa6:	a2 83       	std	Z+2, r26	; 0x02
    2fa8:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 1] |= temp_line[1];
    2faa:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    2fae:	88 2f       	mov	r24, r24
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	6f 5f       	subi	r22, 0xFF	; 255
    2fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb8:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    2fbc:	88 2f       	mov	r24, r24
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	01 96       	adiw	r24, 0x01	; 1
    2fc2:	88 0f       	add	r24, r24
    2fc4:	99 1f       	adc	r25, r25
    2fc6:	88 0f       	add	r24, r24
    2fc8:	99 1f       	adc	r25, r25
    2fca:	81 5c       	subi	r24, 0xC1	; 193
    2fcc:	97 4f       	sbci	r25, 0xF7	; 247
    2fce:	fc 01       	movw	r30, r24
    2fd0:	20 81       	ld	r18, Z
    2fd2:	31 81       	ldd	r19, Z+1	; 0x01
    2fd4:	42 81       	ldd	r20, Z+2	; 0x02
    2fd6:	53 81       	ldd	r21, Z+3	; 0x03
    2fd8:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <temp_line+0x4>
    2fdc:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <temp_line+0x5>
    2fe0:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <temp_line+0x6>
    2fe4:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <temp_line+0x7>
    2fe8:	82 2b       	or	r24, r18
    2fea:	93 2b       	or	r25, r19
    2fec:	a4 2b       	or	r26, r20
    2fee:	b5 2b       	or	r27, r21
    2ff0:	9b 01       	movw	r18, r22
    2ff2:	22 0f       	add	r18, r18
    2ff4:	33 1f       	adc	r19, r19
    2ff6:	22 0f       	add	r18, r18
    2ff8:	33 1f       	adc	r19, r19
    2ffa:	21 5c       	subi	r18, 0xC1	; 193
    2ffc:	37 4f       	sbci	r19, 0xF7	; 247
    2ffe:	f9 01       	movw	r30, r18
    3000:	80 83       	st	Z, r24
    3002:	91 83       	std	Z+1, r25	; 0x01
    3004:	a2 83       	std	Z+2, r26	; 0x02
    3006:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 2] |= temp_line[2];
    3008:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    300c:	88 2f       	mov	r24, r24
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	bc 01       	movw	r22, r24
    3012:	6e 5f       	subi	r22, 0xFE	; 254
    3014:	7f 4f       	sbci	r23, 0xFF	; 255
    3016:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    301a:	88 2f       	mov	r24, r24
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	02 96       	adiw	r24, 0x02	; 2
    3020:	88 0f       	add	r24, r24
    3022:	99 1f       	adc	r25, r25
    3024:	88 0f       	add	r24, r24
    3026:	99 1f       	adc	r25, r25
    3028:	81 5c       	subi	r24, 0xC1	; 193
    302a:	97 4f       	sbci	r25, 0xF7	; 247
    302c:	fc 01       	movw	r30, r24
    302e:	20 81       	ld	r18, Z
    3030:	31 81       	ldd	r19, Z+1	; 0x01
    3032:	42 81       	ldd	r20, Z+2	; 0x02
    3034:	53 81       	ldd	r21, Z+3	; 0x03
    3036:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <temp_line+0x8>
    303a:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <temp_line+0x9>
    303e:	a0 91 36 08 	lds	r26, 0x0836	; 0x800836 <temp_line+0xa>
    3042:	b0 91 37 08 	lds	r27, 0x0837	; 0x800837 <temp_line+0xb>
    3046:	82 2b       	or	r24, r18
    3048:	93 2b       	or	r25, r19
    304a:	a4 2b       	or	r26, r20
    304c:	b5 2b       	or	r27, r21
    304e:	9b 01       	movw	r18, r22
    3050:	22 0f       	add	r18, r18
    3052:	33 1f       	adc	r19, r19
    3054:	22 0f       	add	r18, r18
    3056:	33 1f       	adc	r19, r19
    3058:	21 5c       	subi	r18, 0xC1	; 193
    305a:	37 4f       	sbci	r19, 0xF7	; 247
    305c:	f9 01       	movw	r30, r18
    305e:	80 83       	st	Z, r24
    3060:	91 83       	std	Z+1, r25	; 0x01
    3062:	a2 83       	std	Z+2, r26	; 0x02
    3064:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 3] |= temp_line[3];
    3066:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    306a:	88 2f       	mov	r24, r24
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	bc 01       	movw	r22, r24
    3070:	6d 5f       	subi	r22, 0xFD	; 253
    3072:	7f 4f       	sbci	r23, 0xFF	; 255
    3074:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <cur_line>
    3078:	88 2f       	mov	r24, r24
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	03 96       	adiw	r24, 0x03	; 3
    307e:	88 0f       	add	r24, r24
    3080:	99 1f       	adc	r25, r25
    3082:	88 0f       	add	r24, r24
    3084:	99 1f       	adc	r25, r25
    3086:	81 5c       	subi	r24, 0xC1	; 193
    3088:	97 4f       	sbci	r25, 0xF7	; 247
    308a:	fc 01       	movw	r30, r24
    308c:	20 81       	ld	r18, Z
    308e:	31 81       	ldd	r19, Z+1	; 0x01
    3090:	42 81       	ldd	r20, Z+2	; 0x02
    3092:	53 81       	ldd	r21, Z+3	; 0x03
    3094:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <temp_line+0xc>
    3098:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <temp_line+0xd>
    309c:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <temp_line+0xe>
    30a0:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <temp_line+0xf>
    30a4:	82 2b       	or	r24, r18
    30a6:	93 2b       	or	r25, r19
    30a8:	a4 2b       	or	r26, r20
    30aa:	b5 2b       	or	r27, r21
    30ac:	9b 01       	movw	r18, r22
    30ae:	22 0f       	add	r18, r18
    30b0:	33 1f       	adc	r19, r19
    30b2:	22 0f       	add	r18, r18
    30b4:	33 1f       	adc	r19, r19
    30b6:	21 5c       	subi	r18, 0xC1	; 193
    30b8:	37 4f       	sbci	r19, 0xF7	; 247
    30ba:	f9 01       	movw	r30, r18
    30bc:	80 83       	st	Z, r24
    30be:	91 83       	std	Z+1, r25	; 0x01
    30c0:	a2 83       	std	Z+2, r26	; 0x02
    30c2:	b3 83       	std	Z+3, r27	; 0x03
	}
}
    30c4:	00 00       	nop
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	0f 90       	pop	r0
    30cc:	0f 90       	pop	r0
    30ce:	df 91       	pop	r29
    30d0:	cf 91       	pop	r28
    30d2:	08 95       	ret

000030d4 <NextTetriminos>:

void NextTetriminos()
{
    30d4:	cf 93       	push	r28
    30d6:	df 93       	push	r29
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
    30dc:	c9 50       	subi	r28, 0x09	; 9
    30de:	d1 40       	sbci	r29, 0x01	; 1
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	f8 94       	cli
    30e4:	de bf       	out	0x3e, r29	; 62
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	cd bf       	out	0x3d, r28	; 61
	for(int i = 0; i < 8; i++)	//넥스트 보드 초기화
    30ea:	1a 82       	std	Y+2, r1	; 0x02
    30ec:	19 82       	std	Y+1, r1	; 0x01
    30ee:	0b c0       	rjmp	.+22     	; 0x3106 <NextTetriminos+0x32>
	{
		next_board[i] = 0;
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	9a 81       	ldd	r25, Y+2	; 0x02
    30f4:	81 5e       	subi	r24, 0xE1	; 225
    30f6:	97 4f       	sbci	r25, 0xF7	; 247
    30f8:	fc 01       	movw	r30, r24
    30fa:	10 82       	st	Z, r1
	}
}

void NextTetriminos()
{
	for(int i = 0; i < 8; i++)	//넥스트 보드 초기화
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3100:	01 96       	adiw	r24, 0x01	; 1
    3102:	9a 83       	std	Y+2, r25	; 0x02
    3104:	89 83       	std	Y+1, r24	; 0x01
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	9a 81       	ldd	r25, Y+2	; 0x02
    310a:	08 97       	sbiw	r24, 0x08	; 8
    310c:	8c f3       	brlt	.-30     	; 0x30f0 <NextTetriminos+0x1c>
	{
		next_board[i] = 0;
	}

	
	next_board[2] |= (unsigned char)((tetriminos[next_block][0] & 0xF000) >> 10);
    310e:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <next_board+0x2>
    3112:	48 2f       	mov	r20, r24
    3114:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <next_block>
    3118:	88 2f       	mov	r24, r24
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	2c e6       	ldi	r18, 0x6C	; 108
    311e:	32 e0       	ldi	r19, 0x02	; 2
    3120:	88 0f       	add	r24, r24
    3122:	99 1f       	adc	r25, r25
    3124:	88 0f       	add	r24, r24
    3126:	99 1f       	adc	r25, r25
    3128:	88 0f       	add	r24, r24
    312a:	99 1f       	adc	r25, r25
    312c:	82 0f       	add	r24, r18
    312e:	93 1f       	adc	r25, r19
    3130:	fc 01       	movw	r30, r24
    3132:	85 91       	lpm	r24, Z+
    3134:	95 91       	lpm	r25, Z+
    3136:	32 97       	sbiw	r30, 0x02	; 2
    3138:	88 27       	eor	r24, r24
    313a:	90 7f       	andi	r25, 0xF0	; 240
    313c:	89 2f       	mov	r24, r25
    313e:	99 27       	eor	r25, r25
    3140:	86 95       	lsr	r24
    3142:	86 95       	lsr	r24
    3144:	84 2b       	or	r24, r20
    3146:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <next_board+0x2>
	next_board[3] |= (unsigned char)((tetriminos[next_block][0] & 0x0F00) >> 6);
    314a:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <next_board+0x3>
    314e:	48 2f       	mov	r20, r24
    3150:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <next_block>
    3154:	88 2f       	mov	r24, r24
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	2c e6       	ldi	r18, 0x6C	; 108
    315a:	32 e0       	ldi	r19, 0x02	; 2
    315c:	88 0f       	add	r24, r24
    315e:	99 1f       	adc	r25, r25
    3160:	88 0f       	add	r24, r24
    3162:	99 1f       	adc	r25, r25
    3164:	88 0f       	add	r24, r24
    3166:	99 1f       	adc	r25, r25
    3168:	82 0f       	add	r24, r18
    316a:	93 1f       	adc	r25, r19
    316c:	fc 01       	movw	r30, r24
    316e:	85 91       	lpm	r24, Z+
    3170:	95 91       	lpm	r25, Z+
    3172:	32 97       	sbiw	r30, 0x02	; 2
    3174:	88 27       	eor	r24, r24
    3176:	9f 70       	andi	r25, 0x0F	; 15
    3178:	00 24       	eor	r0, r0
    317a:	88 0f       	add	r24, r24
    317c:	99 1f       	adc	r25, r25
    317e:	00 1c       	adc	r0, r0
    3180:	88 0f       	add	r24, r24
    3182:	99 1f       	adc	r25, r25
    3184:	00 1c       	adc	r0, r0
    3186:	89 2f       	mov	r24, r25
    3188:	90 2d       	mov	r25, r0
    318a:	84 2b       	or	r24, r20
    318c:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <next_board+0x3>
	next_board[4] |= (unsigned char)((tetriminos[next_block][0] & 0x00F0) >> 2);
    3190:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <next_board+0x4>
    3194:	48 2f       	mov	r20, r24
    3196:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <next_block>
    319a:	88 2f       	mov	r24, r24
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	2c e6       	ldi	r18, 0x6C	; 108
    31a0:	32 e0       	ldi	r19, 0x02	; 2
    31a2:	88 0f       	add	r24, r24
    31a4:	99 1f       	adc	r25, r25
    31a6:	88 0f       	add	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	88 0f       	add	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	82 0f       	add	r24, r18
    31b0:	93 1f       	adc	r25, r19
    31b2:	fc 01       	movw	r30, r24
    31b4:	85 91       	lpm	r24, Z+
    31b6:	95 91       	lpm	r25, Z+
    31b8:	32 97       	sbiw	r30, 0x02	; 2
    31ba:	80 7f       	andi	r24, 0xF0	; 240
    31bc:	99 27       	eor	r25, r25
    31be:	96 95       	lsr	r25
    31c0:	87 95       	ror	r24
    31c2:	96 95       	lsr	r25
    31c4:	87 95       	ror	r24
    31c6:	84 2b       	or	r24, r20
    31c8:	80 93 23 08 	sts	0x0823, r24	; 0x800823 <next_board+0x4>
	next_board[5] |= (unsigned char)((tetriminos[next_block][0] & 0x000F) << 2);
    31cc:	40 91 24 08 	lds	r20, 0x0824	; 0x800824 <next_board+0x5>
    31d0:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <next_block>
    31d4:	88 2f       	mov	r24, r24
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	2c e6       	ldi	r18, 0x6C	; 108
    31da:	32 e0       	ldi	r19, 0x02	; 2
    31dc:	88 0f       	add	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	88 0f       	add	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	88 0f       	add	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	82 0f       	add	r24, r18
    31ea:	93 1f       	adc	r25, r19
    31ec:	fc 01       	movw	r30, r24
    31ee:	85 91       	lpm	r24, Z+
    31f0:	95 91       	lpm	r25, Z+
    31f2:	32 97       	sbiw	r30, 0x02	; 2
    31f4:	8f 70       	andi	r24, 0x0F	; 15
    31f6:	88 0f       	add	r24, r24
    31f8:	88 0f       	add	r24, r24
    31fa:	84 2b       	or	r24, r20
    31fc:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <next_board+0x5>


	unsigned char MAP [2][128] = {0};
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	31 e0       	ldi	r19, 0x01	; 1
    3204:	ce 01       	movw	r24, r28
    3206:	0a 96       	adiw	r24, 0x0a	; 10
    3208:	fc 01       	movw	r30, r24
    320a:	a9 01       	movw	r20, r18
    320c:	11 92       	st	Z+, r1
    320e:	41 50       	subi	r20, 0x01	; 1
    3210:	50 40       	sbci	r21, 0x00	; 0
    3212:	e1 f7       	brne	.-8      	; 0x320c <NextTetriminos+0x138>
	

	MAP[0][2] |= 0xFF;	//위에 보드 2칸 줄은 너무 두꺼워서 한줄로 만들었다
    3214:	8f ef       	ldi	r24, 0xFF	; 255
    3216:	8c 87       	std	Y+12, r24	; 0x0c
	MAP[1][2] |= 0xFF;
    3218:	ce 01       	movw	r24, r28
    321a:	84 57       	subi	r24, 0x74	; 116
    321c:	9f 4f       	sbci	r25, 0xFF	; 255
    321e:	2f ef       	ldi	r18, 0xFF	; 255
    3220:	fc 01       	movw	r30, r24
    3222:	20 83       	st	Z, r18
	MAP[0][17] |= 0xFF;
    3224:	8f ef       	ldi	r24, 0xFF	; 255
    3226:	8b 8f       	std	Y+27, r24	; 0x1b
	MAP[1][17] |= 0xFF;
    3228:	ce 01       	movw	r24, r28
    322a:	85 56       	subi	r24, 0x65	; 101
    322c:	9f 4f       	sbci	r25, 0xFF	; 255
    322e:	2f ef       	ldi	r18, 0xFF	; 255
    3230:	fc 01       	movw	r30, r24
    3232:	20 83       	st	Z, r18

	for(int i = 2; i < 18; i++)
    3234:	82 e0       	ldi	r24, 0x02	; 2
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	9c 83       	std	Y+4, r25	; 0x04
    323a:	8b 83       	std	Y+3, r24	; 0x03
    323c:	2d c0       	rjmp	.+90     	; 0x3298 <NextTetriminos+0x1c4>
	{
		MAP[0][i] |= 0x01;
    323e:	9e 01       	movw	r18, r28
    3240:	26 5f       	subi	r18, 0xF6	; 246
    3242:	3f 4f       	sbci	r19, 0xFF	; 255
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	9c 81       	ldd	r25, Y+4	; 0x04
    3248:	82 0f       	add	r24, r18
    324a:	93 1f       	adc	r25, r19
    324c:	fc 01       	movw	r30, r24
    324e:	80 81       	ld	r24, Z
    3250:	48 2f       	mov	r20, r24
    3252:	41 60       	ori	r20, 0x01	; 1
    3254:	9e 01       	movw	r18, r28
    3256:	26 5f       	subi	r18, 0xF6	; 246
    3258:	3f 4f       	sbci	r19, 0xFF	; 255
    325a:	8b 81       	ldd	r24, Y+3	; 0x03
    325c:	9c 81       	ldd	r25, Y+4	; 0x04
    325e:	82 0f       	add	r24, r18
    3260:	93 1f       	adc	r25, r19
    3262:	fc 01       	movw	r30, r24
    3264:	40 83       	st	Z, r20
		MAP[1][i] |= 0x80;
    3266:	9e 01       	movw	r18, r28
    3268:	26 57       	subi	r18, 0x76	; 118
    326a:	3f 4f       	sbci	r19, 0xFF	; 255
    326c:	8b 81       	ldd	r24, Y+3	; 0x03
    326e:	9c 81       	ldd	r25, Y+4	; 0x04
    3270:	82 0f       	add	r24, r18
    3272:	93 1f       	adc	r25, r19
    3274:	fc 01       	movw	r30, r24
    3276:	80 81       	ld	r24, Z
    3278:	48 2f       	mov	r20, r24
    327a:	40 68       	ori	r20, 0x80	; 128
    327c:	9e 01       	movw	r18, r28
    327e:	26 57       	subi	r18, 0x76	; 118
    3280:	3f 4f       	sbci	r19, 0xFF	; 255
    3282:	8b 81       	ldd	r24, Y+3	; 0x03
    3284:	9c 81       	ldd	r25, Y+4	; 0x04
    3286:	82 0f       	add	r24, r18
    3288:	93 1f       	adc	r25, r19
    328a:	fc 01       	movw	r30, r24
    328c:	40 83       	st	Z, r20
	MAP[0][2] |= 0xFF;	//위에 보드 2칸 줄은 너무 두꺼워서 한줄로 만들었다
	MAP[1][2] |= 0xFF;
	MAP[0][17] |= 0xFF;
	MAP[1][17] |= 0xFF;

	for(int i = 2; i < 18; i++)
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	9c 81       	ldd	r25, Y+4	; 0x04
    3292:	01 96       	adiw	r24, 0x01	; 1
    3294:	9c 83       	std	Y+4, r25	; 0x04
    3296:	8b 83       	std	Y+3, r24	; 0x03
    3298:	8b 81       	ldd	r24, Y+3	; 0x03
    329a:	9c 81       	ldd	r25, Y+4	; 0x04
    329c:	42 97       	sbiw	r24, 0x12	; 18
    329e:	7c f2       	brlt	.-98     	; 0x323e <NextTetriminos+0x16a>
		MAP[0][i] |= 0x01;
		MAP[1][i] |= 0x80;
	}


	for(int i = 0;i < 8; i++)
    32a0:	1e 82       	std	Y+6, r1	; 0x06
    32a2:	1d 82       	std	Y+5, r1	; 0x05
    32a4:	e3 c0       	rjmp	.+454    	; 0x346c <NextTetriminos+0x398>
	{
		for(int j = 0; j < 8; j++)
    32a6:	18 86       	std	Y+8, r1	; 0x08
    32a8:	1f 82       	std	Y+7, r1	; 0x07
    32aa:	d6 c0       	rjmp	.+428    	; 0x3458 <NextTetriminos+0x384>
		{
			if((next_board[i] & (1 << j)) != 0)
    32ac:	8d 81       	ldd	r24, Y+5	; 0x05
    32ae:	9e 81       	ldd	r25, Y+6	; 0x06
    32b0:	81 5e       	subi	r24, 0xE1	; 225
    32b2:	97 4f       	sbci	r25, 0xF7	; 247
    32b4:	fc 01       	movw	r30, r24
    32b6:	80 81       	ld	r24, Z
    32b8:	88 2f       	mov	r24, r24
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	0f 80       	ldd	r0, Y+7	; 0x07
    32be:	02 c0       	rjmp	.+4      	; 0x32c4 <NextTetriminos+0x1f0>
    32c0:	95 95       	asr	r25
    32c2:	87 95       	ror	r24
    32c4:	0a 94       	dec	r0
    32c6:	e2 f7       	brpl	.-8      	; 0x32c0 <NextTetriminos+0x1ec>
    32c8:	81 70       	andi	r24, 0x01	; 1
    32ca:	99 27       	eor	r25, r25
    32cc:	89 2b       	or	r24, r25
    32ce:	09 f4       	brne	.+2      	; 0x32d2 <NextTetriminos+0x1fe>
    32d0:	be c0       	rjmp	.+380    	; 0x344e <NextTetriminos+0x37a>
			{
				if(j < 4)
    32d2:	8f 81       	ldd	r24, Y+7	; 0x07
    32d4:	98 85       	ldd	r25, Y+8	; 0x08
    32d6:	04 97       	sbiw	r24, 0x04	; 4
    32d8:	0c f0       	brlt	.+2      	; 0x32dc <NextTetriminos+0x208>
    32da:	5d c0       	rjmp	.+186    	; 0x3396 <NextTetriminos+0x2c2>
				{
					MAP[1][2 + (2 * i)] |= (0x03 << 2 * (3 - j));
    32dc:	8d 81       	ldd	r24, Y+5	; 0x05
    32de:	9e 81       	ldd	r25, Y+6	; 0x06
    32e0:	01 96       	adiw	r24, 0x01	; 1
    32e2:	88 0f       	add	r24, r24
    32e4:	99 1f       	adc	r25, r25
    32e6:	2d 81       	ldd	r18, Y+5	; 0x05
    32e8:	3e 81       	ldd	r19, Y+6	; 0x06
    32ea:	2f 5f       	subi	r18, 0xFF	; 255
    32ec:	3f 4f       	sbci	r19, 0xFF	; 255
    32ee:	22 0f       	add	r18, r18
    32f0:	33 1f       	adc	r19, r19
    32f2:	ae 01       	movw	r20, r28
    32f4:	46 57       	subi	r20, 0x76	; 118
    32f6:	5f 4f       	sbci	r21, 0xFF	; 255
    32f8:	24 0f       	add	r18, r20
    32fa:	35 1f       	adc	r19, r21
    32fc:	f9 01       	movw	r30, r18
    32fe:	20 81       	ld	r18, Z
    3300:	62 2f       	mov	r22, r18
    3302:	43 e0       	ldi	r20, 0x03	; 3
    3304:	50 e0       	ldi	r21, 0x00	; 0
    3306:	2f 81       	ldd	r18, Y+7	; 0x07
    3308:	38 85       	ldd	r19, Y+8	; 0x08
    330a:	fa 01       	movw	r30, r20
    330c:	e2 1b       	sub	r30, r18
    330e:	f3 0b       	sbc	r31, r19
    3310:	9f 01       	movw	r18, r30
    3312:	a9 01       	movw	r20, r18
    3314:	44 0f       	add	r20, r20
    3316:	55 1f       	adc	r21, r21
    3318:	23 e0       	ldi	r18, 0x03	; 3
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	02 c0       	rjmp	.+4      	; 0x3322 <NextTetriminos+0x24e>
    331e:	22 0f       	add	r18, r18
    3320:	33 1f       	adc	r19, r19
    3322:	4a 95       	dec	r20
    3324:	e2 f7       	brpl	.-8      	; 0x331e <NextTetriminos+0x24a>
    3326:	26 2b       	or	r18, r22
    3328:	42 2f       	mov	r20, r18
    332a:	9e 01       	movw	r18, r28
    332c:	26 57       	subi	r18, 0x76	; 118
    332e:	3f 4f       	sbci	r19, 0xFF	; 255
    3330:	82 0f       	add	r24, r18
    3332:	93 1f       	adc	r25, r19
    3334:	fc 01       	movw	r30, r24
    3336:	40 83       	st	Z, r20
					MAP[1][2 + (2 * i + 1)] |= (0x03 << 2 * (3 - j));
    3338:	8d 81       	ldd	r24, Y+5	; 0x05
    333a:	9e 81       	ldd	r25, Y+6	; 0x06
    333c:	88 0f       	add	r24, r24
    333e:	99 1f       	adc	r25, r25
    3340:	03 96       	adiw	r24, 0x03	; 3
    3342:	2d 81       	ldd	r18, Y+5	; 0x05
    3344:	3e 81       	ldd	r19, Y+6	; 0x06
    3346:	22 0f       	add	r18, r18
    3348:	33 1f       	adc	r19, r19
    334a:	2d 5f       	subi	r18, 0xFD	; 253
    334c:	3f 4f       	sbci	r19, 0xFF	; 255
    334e:	ae 01       	movw	r20, r28
    3350:	46 57       	subi	r20, 0x76	; 118
    3352:	5f 4f       	sbci	r21, 0xFF	; 255
    3354:	24 0f       	add	r18, r20
    3356:	35 1f       	adc	r19, r21
    3358:	f9 01       	movw	r30, r18
    335a:	20 81       	ld	r18, Z
    335c:	62 2f       	mov	r22, r18
    335e:	43 e0       	ldi	r20, 0x03	; 3
    3360:	50 e0       	ldi	r21, 0x00	; 0
    3362:	2f 81       	ldd	r18, Y+7	; 0x07
    3364:	38 85       	ldd	r19, Y+8	; 0x08
    3366:	fa 01       	movw	r30, r20
    3368:	e2 1b       	sub	r30, r18
    336a:	f3 0b       	sbc	r31, r19
    336c:	9f 01       	movw	r18, r30
    336e:	a9 01       	movw	r20, r18
    3370:	44 0f       	add	r20, r20
    3372:	55 1f       	adc	r21, r21
    3374:	23 e0       	ldi	r18, 0x03	; 3
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	02 c0       	rjmp	.+4      	; 0x337e <NextTetriminos+0x2aa>
    337a:	22 0f       	add	r18, r18
    337c:	33 1f       	adc	r19, r19
    337e:	4a 95       	dec	r20
    3380:	e2 f7       	brpl	.-8      	; 0x337a <NextTetriminos+0x2a6>
    3382:	26 2b       	or	r18, r22
    3384:	42 2f       	mov	r20, r18
    3386:	9e 01       	movw	r18, r28
    3388:	26 57       	subi	r18, 0x76	; 118
    338a:	3f 4f       	sbci	r19, 0xFF	; 255
    338c:	82 0f       	add	r24, r18
    338e:	93 1f       	adc	r25, r19
    3390:	fc 01       	movw	r30, r24
    3392:	40 83       	st	Z, r20
    3394:	5c c0       	rjmp	.+184    	; 0x344e <NextTetriminos+0x37a>
				}
				else
				{
					MAP[0][2 + (2 * i)] |= (0x03 << 2 * (7 - j));
    3396:	8d 81       	ldd	r24, Y+5	; 0x05
    3398:	9e 81       	ldd	r25, Y+6	; 0x06
    339a:	01 96       	adiw	r24, 0x01	; 1
    339c:	88 0f       	add	r24, r24
    339e:	99 1f       	adc	r25, r25
    33a0:	2d 81       	ldd	r18, Y+5	; 0x05
    33a2:	3e 81       	ldd	r19, Y+6	; 0x06
    33a4:	2f 5f       	subi	r18, 0xFF	; 255
    33a6:	3f 4f       	sbci	r19, 0xFF	; 255
    33a8:	22 0f       	add	r18, r18
    33aa:	33 1f       	adc	r19, r19
    33ac:	ae 01       	movw	r20, r28
    33ae:	46 5f       	subi	r20, 0xF6	; 246
    33b0:	5f 4f       	sbci	r21, 0xFF	; 255
    33b2:	24 0f       	add	r18, r20
    33b4:	35 1f       	adc	r19, r21
    33b6:	f9 01       	movw	r30, r18
    33b8:	20 81       	ld	r18, Z
    33ba:	62 2f       	mov	r22, r18
    33bc:	47 e0       	ldi	r20, 0x07	; 7
    33be:	50 e0       	ldi	r21, 0x00	; 0
    33c0:	2f 81       	ldd	r18, Y+7	; 0x07
    33c2:	38 85       	ldd	r19, Y+8	; 0x08
    33c4:	fa 01       	movw	r30, r20
    33c6:	e2 1b       	sub	r30, r18
    33c8:	f3 0b       	sbc	r31, r19
    33ca:	9f 01       	movw	r18, r30
    33cc:	a9 01       	movw	r20, r18
    33ce:	44 0f       	add	r20, r20
    33d0:	55 1f       	adc	r21, r21
    33d2:	23 e0       	ldi	r18, 0x03	; 3
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	02 c0       	rjmp	.+4      	; 0x33dc <NextTetriminos+0x308>
    33d8:	22 0f       	add	r18, r18
    33da:	33 1f       	adc	r19, r19
    33dc:	4a 95       	dec	r20
    33de:	e2 f7       	brpl	.-8      	; 0x33d8 <NextTetriminos+0x304>
    33e0:	26 2b       	or	r18, r22
    33e2:	42 2f       	mov	r20, r18
    33e4:	9e 01       	movw	r18, r28
    33e6:	26 5f       	subi	r18, 0xF6	; 246
    33e8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ea:	82 0f       	add	r24, r18
    33ec:	93 1f       	adc	r25, r19
    33ee:	fc 01       	movw	r30, r24
    33f0:	40 83       	st	Z, r20
					MAP[0][2 + (2 * i + 1)] |= (0x03 << 2 * (7 - j));
    33f2:	8d 81       	ldd	r24, Y+5	; 0x05
    33f4:	9e 81       	ldd	r25, Y+6	; 0x06
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	03 96       	adiw	r24, 0x03	; 3
    33fc:	2d 81       	ldd	r18, Y+5	; 0x05
    33fe:	3e 81       	ldd	r19, Y+6	; 0x06
    3400:	22 0f       	add	r18, r18
    3402:	33 1f       	adc	r19, r19
    3404:	2d 5f       	subi	r18, 0xFD	; 253
    3406:	3f 4f       	sbci	r19, 0xFF	; 255
    3408:	ae 01       	movw	r20, r28
    340a:	46 5f       	subi	r20, 0xF6	; 246
    340c:	5f 4f       	sbci	r21, 0xFF	; 255
    340e:	24 0f       	add	r18, r20
    3410:	35 1f       	adc	r19, r21
    3412:	f9 01       	movw	r30, r18
    3414:	20 81       	ld	r18, Z
    3416:	62 2f       	mov	r22, r18
    3418:	47 e0       	ldi	r20, 0x07	; 7
    341a:	50 e0       	ldi	r21, 0x00	; 0
    341c:	2f 81       	ldd	r18, Y+7	; 0x07
    341e:	38 85       	ldd	r19, Y+8	; 0x08
    3420:	fa 01       	movw	r30, r20
    3422:	e2 1b       	sub	r30, r18
    3424:	f3 0b       	sbc	r31, r19
    3426:	9f 01       	movw	r18, r30
    3428:	a9 01       	movw	r20, r18
    342a:	44 0f       	add	r20, r20
    342c:	55 1f       	adc	r21, r21
    342e:	23 e0       	ldi	r18, 0x03	; 3
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	02 c0       	rjmp	.+4      	; 0x3438 <NextTetriminos+0x364>
    3434:	22 0f       	add	r18, r18
    3436:	33 1f       	adc	r19, r19
    3438:	4a 95       	dec	r20
    343a:	e2 f7       	brpl	.-8      	; 0x3434 <NextTetriminos+0x360>
    343c:	26 2b       	or	r18, r22
    343e:	42 2f       	mov	r20, r18
    3440:	9e 01       	movw	r18, r28
    3442:	26 5f       	subi	r18, 0xF6	; 246
    3444:	3f 4f       	sbci	r19, 0xFF	; 255
    3446:	82 0f       	add	r24, r18
    3448:	93 1f       	adc	r25, r19
    344a:	fc 01       	movw	r30, r24
    344c:	40 83       	st	Z, r20
	}


	for(int i = 0;i < 8; i++)
	{
		for(int j = 0; j < 8; j++)
    344e:	8f 81       	ldd	r24, Y+7	; 0x07
    3450:	98 85       	ldd	r25, Y+8	; 0x08
    3452:	01 96       	adiw	r24, 0x01	; 1
    3454:	98 87       	std	Y+8, r25	; 0x08
    3456:	8f 83       	std	Y+7, r24	; 0x07
    3458:	8f 81       	ldd	r24, Y+7	; 0x07
    345a:	98 85       	ldd	r25, Y+8	; 0x08
    345c:	08 97       	sbiw	r24, 0x08	; 8
    345e:	0c f4       	brge	.+2      	; 0x3462 <NextTetriminos+0x38e>
    3460:	25 cf       	rjmp	.-438    	; 0x32ac <NextTetriminos+0x1d8>
		MAP[0][i] |= 0x01;
		MAP[1][i] |= 0x80;
	}


	for(int i = 0;i < 8; i++)
    3462:	8d 81       	ldd	r24, Y+5	; 0x05
    3464:	9e 81       	ldd	r25, Y+6	; 0x06
    3466:	01 96       	adiw	r24, 0x01	; 1
    3468:	9e 83       	std	Y+6, r25	; 0x06
    346a:	8d 83       	std	Y+5, r24	; 0x05
    346c:	8d 81       	ldd	r24, Y+5	; 0x05
    346e:	9e 81       	ldd	r25, Y+6	; 0x06
    3470:	08 97       	sbiw	r24, 0x08	; 8
    3472:	0c f4       	brge	.+2      	; 0x3476 <NextTetriminos+0x3a2>
    3474:	18 cf       	rjmp	.-464    	; 0x32a6 <NextTetriminos+0x1d2>
				}
			}
		}
	}

	for(unsigned char y=0;y<2;y++)
    3476:	19 86       	std	Y+9, r1	; 0x09
    3478:	17 c0       	rjmp	.+46     	; 0x34a8 <NextTetriminos+0x3d4>
	{
		ssd1306_set_page_start(y);
    347a:	89 85       	ldd	r24, Y+9	; 0x09
    347c:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_data(MAP[y], 128);
    3480:	89 85       	ldd	r24, Y+9	; 0x09
    3482:	88 2f       	mov	r24, r24
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	9e 01       	movw	r18, r28
    3488:	26 5f       	subi	r18, 0xF6	; 246
    348a:	3f 4f       	sbci	r19, 0xFF	; 255
    348c:	96 95       	lsr	r25
    348e:	98 2f       	mov	r25, r24
    3490:	88 27       	eor	r24, r24
    3492:	97 95       	ror	r25
    3494:	87 95       	ror	r24
    3496:	82 0f       	add	r24, r18
    3498:	93 1f       	adc	r25, r19
    349a:	60 e8       	ldi	r22, 0x80	; 128
    349c:	70 e0       	ldi	r23, 0x00	; 0
    349e:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
				}
			}
		}
	}

	for(unsigned char y=0;y<2;y++)
    34a2:	89 85       	ldd	r24, Y+9	; 0x09
    34a4:	8f 5f       	subi	r24, 0xFF	; 255
    34a6:	89 87       	std	Y+9, r24	; 0x09
    34a8:	89 85       	ldd	r24, Y+9	; 0x09
    34aa:	82 30       	cpi	r24, 0x02	; 2
    34ac:	30 f3       	brcs	.-52     	; 0x347a <NextTetriminos+0x3a6>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(MAP[y], 128);
	}
}
    34ae:	00 00       	nop
    34b0:	c7 5f       	subi	r28, 0xF7	; 247
    34b2:	de 4f       	sbci	r29, 0xFE	; 254
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	de bf       	out	0x3e, r29	; 62
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	cd bf       	out	0x3d, r28	; 61
    34be:	df 91       	pop	r29
    34c0:	cf 91       	pop	r28
    34c2:	08 95       	ret

000034c4 <main>:

int main(void)
{
    34c4:	0f 93       	push	r16
    34c6:	1f 93       	push	r17
    34c8:	cf 93       	push	r28
    34ca:	df 93       	push	r29
    34cc:	cd b7       	in	r28, 0x3d	; 61
    34ce:	de b7       	in	r29, 0x3e	; 62
    34d0:	c2 56       	subi	r28, 0x62	; 98
    34d2:	d1 09       	sbc	r29, r1
    34d4:	0f b6       	in	r0, 0x3f	; 63
    34d6:	f8 94       	cli
    34d8:	de bf       	out	0x3e, r29	; 62
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	cd bf       	out	0x3d, r28	; 61
	char cmd;

	UART_Init();
    34de:	0e 94 b9 02 	call	0x572	; 0x572 <UART_Init>

	long int val_x;
	long int val_y;
	long int val_ADC_button;
	
	SendCommand(CMD_TF);
    34e2:	89 e0       	ldi	r24, 0x09	; 9
    34e4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SendCommand>
    34e8:	80 e0       	ldi	r24, 0x00	; 0
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	a0 ea       	ldi	r26, 0xA0	; 160
    34ee:	b1 e4       	ldi	r27, 0x41	; 65
    34f0:	89 8f       	std	Y+25, r24	; 0x19
    34f2:	9a 8f       	std	Y+26, r25	; 0x1a
    34f4:	ab 8f       	std	Y+27, r26	; 0x1b
    34f6:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    34f8:	8e 01       	movw	r16, r28
    34fa:	01 5b       	subi	r16, 0xB1	; 177
    34fc:	1f 4f       	sbci	r17, 0xFF	; 255
    34fe:	20 e0       	ldi	r18, 0x00	; 0
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	4a e7       	ldi	r20, 0x7A	; 122
    3504:	55 e4       	ldi	r21, 0x45	; 69
    3506:	69 8d       	ldd	r22, Y+25	; 0x19
    3508:	7a 8d       	ldd	r23, Y+26	; 0x1a
    350a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    350c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    350e:	0e 94 8a 22 	call	0x4514	; 0x4514 <__mulsf3>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	f8 01       	movw	r30, r16
    3518:	80 83       	st	Z, r24
    351a:	91 83       	std	Z+1, r25	; 0x01
    351c:	a2 83       	std	Z+2, r26	; 0x02
    351e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3520:	ce 01       	movw	r24, r28
    3522:	81 5b       	subi	r24, 0xB1	; 177
    3524:	9f 4f       	sbci	r25, 0xFF	; 255
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	40 e8       	ldi	r20, 0x80	; 128
    352c:	5f e3       	ldi	r21, 0x3F	; 63
    352e:	fc 01       	movw	r30, r24
    3530:	60 81       	ld	r22, Z
    3532:	71 81       	ldd	r23, Z+1	; 0x01
    3534:	82 81       	ldd	r24, Z+2	; 0x02
    3536:	93 81       	ldd	r25, Z+3	; 0x03
    3538:	6c d7       	rcall	.+3800   	; 0x4412 <__cmpsf2>
    353a:	88 23       	and	r24, r24
    353c:	4c f4       	brge	.+18     	; 0x3550 <main+0x8c>
		__ticks = 1;
    353e:	ce 01       	movw	r24, r28
    3540:	8d 5a       	subi	r24, 0xAD	; 173
    3542:	9f 4f       	sbci	r25, 0xFF	; 255
    3544:	21 e0       	ldi	r18, 0x01	; 1
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	fc 01       	movw	r30, r24
    354a:	31 83       	std	Z+1, r19	; 0x01
    354c:	20 83       	st	Z, r18
    354e:	65 c0       	rjmp	.+202    	; 0x361a <main+0x156>
	else if (__tmp > 65535)
    3550:	ce 01       	movw	r24, r28
    3552:	81 5b       	subi	r24, 0xB1	; 177
    3554:	9f 4f       	sbci	r25, 0xFF	; 255
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	3f ef       	ldi	r19, 0xFF	; 255
    355a:	4f e7       	ldi	r20, 0x7F	; 127
    355c:	57 e4       	ldi	r21, 0x47	; 71
    355e:	fc 01       	movw	r30, r24
    3560:	60 81       	ld	r22, Z
    3562:	71 81       	ldd	r23, Z+1	; 0x01
    3564:	82 81       	ldd	r24, Z+2	; 0x02
    3566:	93 81       	ldd	r25, Z+3	; 0x03
    3568:	d1 d7       	rcall	.+4002   	; 0x450c <__gesf2>
    356a:	18 16       	cp	r1, r24
    356c:	0c f0       	brlt	.+2      	; 0x3570 <main+0xac>
    356e:	44 c0       	rjmp	.+136    	; 0x35f8 <main+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e2       	ldi	r20, 0x20	; 32
    3576:	51 e4       	ldi	r21, 0x41	; 65
    3578:	69 8d       	ldd	r22, Y+25	; 0x19
    357a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    357c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    357e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3580:	c9 d7       	rcall	.+3986   	; 0x4514 <__mulsf3>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	8e 01       	movw	r16, r28
    3588:	0d 5a       	subi	r16, 0xAD	; 173
    358a:	1f 4f       	sbci	r17, 0xFF	; 255
    358c:	bc 01       	movw	r22, r24
    358e:	cd 01       	movw	r24, r26
    3590:	44 d7       	rcall	.+3720   	; 0x441a <__fixunssfsi>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	f8 01       	movw	r30, r16
    3598:	91 83       	std	Z+1, r25	; 0x01
    359a:	80 83       	st	Z, r24
    359c:	24 c0       	rjmp	.+72     	; 0x35e6 <main+0x122>
    359e:	ce 01       	movw	r24, r28
    35a0:	8b 5a       	subi	r24, 0xAB	; 171
    35a2:	9f 4f       	sbci	r25, 0xFF	; 255
    35a4:	20 e9       	ldi	r18, 0x90	; 144
    35a6:	31 e0       	ldi	r19, 0x01	; 1
    35a8:	fc 01       	movw	r30, r24
    35aa:	31 83       	std	Z+1, r19	; 0x01
    35ac:	20 83       	st	Z, r18
    35ae:	ce 01       	movw	r24, r28
    35b0:	8b 5a       	subi	r24, 0xAB	; 171
    35b2:	9f 4f       	sbci	r25, 0xFF	; 255
    35b4:	fc 01       	movw	r30, r24
    35b6:	80 81       	ld	r24, Z
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	f1 f7       	brne	.-4      	; 0x35ba <main+0xf6>
    35be:	9e 01       	movw	r18, r28
    35c0:	2b 5a       	subi	r18, 0xAB	; 171
    35c2:	3f 4f       	sbci	r19, 0xFF	; 255
    35c4:	f9 01       	movw	r30, r18
    35c6:	91 83       	std	Z+1, r25	; 0x01
    35c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ca:	ce 01       	movw	r24, r28
    35cc:	8d 5a       	subi	r24, 0xAD	; 173
    35ce:	9f 4f       	sbci	r25, 0xFF	; 255
    35d0:	9e 01       	movw	r18, r28
    35d2:	2d 5a       	subi	r18, 0xAD	; 173
    35d4:	3f 4f       	sbci	r19, 0xFF	; 255
    35d6:	f9 01       	movw	r30, r18
    35d8:	20 81       	ld	r18, Z
    35da:	31 81       	ldd	r19, Z+1	; 0x01
    35dc:	21 50       	subi	r18, 0x01	; 1
    35de:	31 09       	sbc	r19, r1
    35e0:	fc 01       	movw	r30, r24
    35e2:	31 83       	std	Z+1, r19	; 0x01
    35e4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e6:	ce 01       	movw	r24, r28
    35e8:	8d 5a       	subi	r24, 0xAD	; 173
    35ea:	9f 4f       	sbci	r25, 0xFF	; 255
    35ec:	fc 01       	movw	r30, r24
    35ee:	80 81       	ld	r24, Z
    35f0:	91 81       	ldd	r25, Z+1	; 0x01
    35f2:	89 2b       	or	r24, r25
    35f4:	a1 f6       	brne	.-88     	; 0x359e <main+0xda>
    35f6:	2b c0       	rjmp	.+86     	; 0x364e <main+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f8:	8e 01       	movw	r16, r28
    35fa:	0d 5a       	subi	r16, 0xAD	; 173
    35fc:	1f 4f       	sbci	r17, 0xFF	; 255
    35fe:	ce 01       	movw	r24, r28
    3600:	81 5b       	subi	r24, 0xB1	; 177
    3602:	9f 4f       	sbci	r25, 0xFF	; 255
    3604:	fc 01       	movw	r30, r24
    3606:	60 81       	ld	r22, Z
    3608:	71 81       	ldd	r23, Z+1	; 0x01
    360a:	82 81       	ldd	r24, Z+2	; 0x02
    360c:	93 81       	ldd	r25, Z+3	; 0x03
    360e:	05 d7       	rcall	.+3594   	; 0x441a <__fixunssfsi>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	f8 01       	movw	r30, r16
    3616:	91 83       	std	Z+1, r25	; 0x01
    3618:	80 83       	st	Z, r24
    361a:	ce 01       	movw	r24, r28
    361c:	89 5a       	subi	r24, 0xA9	; 169
    361e:	9f 4f       	sbci	r25, 0xFF	; 255
    3620:	9e 01       	movw	r18, r28
    3622:	2d 5a       	subi	r18, 0xAD	; 173
    3624:	3f 4f       	sbci	r19, 0xFF	; 255
    3626:	f9 01       	movw	r30, r18
    3628:	20 81       	ld	r18, Z
    362a:	31 81       	ldd	r19, Z+1	; 0x01
    362c:	fc 01       	movw	r30, r24
    362e:	31 83       	std	Z+1, r19	; 0x01
    3630:	20 83       	st	Z, r18
    3632:	ce 01       	movw	r24, r28
    3634:	89 5a       	subi	r24, 0xA9	; 169
    3636:	9f 4f       	sbci	r25, 0xFF	; 255
    3638:	fc 01       	movw	r30, r24
    363a:	80 81       	ld	r24, Z
    363c:	91 81       	ldd	r25, Z+1	; 0x01
    363e:	01 97       	sbiw	r24, 0x01	; 1
    3640:	f1 f7       	brne	.-4      	; 0x363e <main+0x17a>
    3642:	9e 01       	movw	r18, r28
    3644:	29 5a       	subi	r18, 0xA9	; 169
    3646:	3f 4f       	sbci	r19, 0xFF	; 255
    3648:	f9 01       	movw	r30, r18
    364a:	91 83       	std	Z+1, r25	; 0x01
    364c:	80 83       	st	Z, r24
	_delay_ms(20);
	SendCommand01(0x06, 0x00, 0x0F);
    364e:	4f e0       	ldi	r20, 0x0F	; 15
    3650:	60 e0       	ldi	r22, 0x00	; 0
    3652:	86 e0       	ldi	r24, 0x06	; 6
    3654:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	a8 e4       	ldi	r26, 0x48	; 72
    365e:	b3 e4       	ldi	r27, 0x43	; 67
    3660:	8d 8f       	std	Y+29, r24	; 0x1d
    3662:	9e 8f       	std	Y+30, r25	; 0x1e
    3664:	af 8f       	std	Y+31, r26	; 0x1f
    3666:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3668:	8e 01       	movw	r16, r28
    366a:	0b 5b       	subi	r16, 0xBB	; 187
    366c:	1f 4f       	sbci	r17, 0xFF	; 255
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	4a e7       	ldi	r20, 0x7A	; 122
    3674:	55 e4       	ldi	r21, 0x45	; 69
    3676:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3678:	7e 8d       	ldd	r23, Y+30	; 0x1e
    367a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    367c:	98 a1       	ldd	r25, Y+32	; 0x20
    367e:	4a d7       	rcall	.+3732   	; 0x4514 <__mulsf3>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	f8 01       	movw	r30, r16
    3686:	80 83       	st	Z, r24
    3688:	91 83       	std	Z+1, r25	; 0x01
    368a:	a2 83       	std	Z+2, r26	; 0x02
    368c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    368e:	ce 01       	movw	r24, r28
    3690:	8b 5b       	subi	r24, 0xBB	; 187
    3692:	9f 4f       	sbci	r25, 0xFF	; 255
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	40 e8       	ldi	r20, 0x80	; 128
    369a:	5f e3       	ldi	r21, 0x3F	; 63
    369c:	fc 01       	movw	r30, r24
    369e:	60 81       	ld	r22, Z
    36a0:	71 81       	ldd	r23, Z+1	; 0x01
    36a2:	82 81       	ldd	r24, Z+2	; 0x02
    36a4:	93 81       	ldd	r25, Z+3	; 0x03
    36a6:	b5 d6       	rcall	.+3434   	; 0x4412 <__cmpsf2>
    36a8:	88 23       	and	r24, r24
    36aa:	4c f4       	brge	.+18     	; 0x36be <main+0x1fa>
		__ticks = 1;
    36ac:	ce 01       	movw	r24, r28
    36ae:	87 5b       	subi	r24, 0xB7	; 183
    36b0:	9f 4f       	sbci	r25, 0xFF	; 255
    36b2:	21 e0       	ldi	r18, 0x01	; 1
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	fc 01       	movw	r30, r24
    36b8:	31 83       	std	Z+1, r19	; 0x01
    36ba:	20 83       	st	Z, r18
    36bc:	65 c0       	rjmp	.+202    	; 0x3788 <main+0x2c4>
	else if (__tmp > 65535)
    36be:	ce 01       	movw	r24, r28
    36c0:	8b 5b       	subi	r24, 0xBB	; 187
    36c2:	9f 4f       	sbci	r25, 0xFF	; 255
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	3f ef       	ldi	r19, 0xFF	; 255
    36c8:	4f e7       	ldi	r20, 0x7F	; 127
    36ca:	57 e4       	ldi	r21, 0x47	; 71
    36cc:	fc 01       	movw	r30, r24
    36ce:	60 81       	ld	r22, Z
    36d0:	71 81       	ldd	r23, Z+1	; 0x01
    36d2:	82 81       	ldd	r24, Z+2	; 0x02
    36d4:	93 81       	ldd	r25, Z+3	; 0x03
    36d6:	1a d7       	rcall	.+3636   	; 0x450c <__gesf2>
    36d8:	18 16       	cp	r1, r24
    36da:	0c f0       	brlt	.+2      	; 0x36de <main+0x21a>
    36dc:	44 c0       	rjmp	.+136    	; 0x3766 <main+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	40 e2       	ldi	r20, 0x20	; 32
    36e4:	51 e4       	ldi	r21, 0x41	; 65
    36e6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    36e8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    36ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36ec:	98 a1       	ldd	r25, Y+32	; 0x20
    36ee:	12 d7       	rcall	.+3620   	; 0x4514 <__mulsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	8e 01       	movw	r16, r28
    36f6:	07 5b       	subi	r16, 0xB7	; 183
    36f8:	1f 4f       	sbci	r17, 0xFF	; 255
    36fa:	bc 01       	movw	r22, r24
    36fc:	cd 01       	movw	r24, r26
    36fe:	8d d6       	rcall	.+3354   	; 0x441a <__fixunssfsi>
    3700:	dc 01       	movw	r26, r24
    3702:	cb 01       	movw	r24, r22
    3704:	f8 01       	movw	r30, r16
    3706:	91 83       	std	Z+1, r25	; 0x01
    3708:	80 83       	st	Z, r24
    370a:	24 c0       	rjmp	.+72     	; 0x3754 <main+0x290>
    370c:	ce 01       	movw	r24, r28
    370e:	85 5b       	subi	r24, 0xB5	; 181
    3710:	9f 4f       	sbci	r25, 0xFF	; 255
    3712:	20 e9       	ldi	r18, 0x90	; 144
    3714:	31 e0       	ldi	r19, 0x01	; 1
    3716:	fc 01       	movw	r30, r24
    3718:	31 83       	std	Z+1, r19	; 0x01
    371a:	20 83       	st	Z, r18
    371c:	ce 01       	movw	r24, r28
    371e:	85 5b       	subi	r24, 0xB5	; 181
    3720:	9f 4f       	sbci	r25, 0xFF	; 255
    3722:	fc 01       	movw	r30, r24
    3724:	80 81       	ld	r24, Z
    3726:	91 81       	ldd	r25, Z+1	; 0x01
    3728:	01 97       	sbiw	r24, 0x01	; 1
    372a:	f1 f7       	brne	.-4      	; 0x3728 <main+0x264>
    372c:	9e 01       	movw	r18, r28
    372e:	25 5b       	subi	r18, 0xB5	; 181
    3730:	3f 4f       	sbci	r19, 0xFF	; 255
    3732:	f9 01       	movw	r30, r18
    3734:	91 83       	std	Z+1, r25	; 0x01
    3736:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3738:	ce 01       	movw	r24, r28
    373a:	87 5b       	subi	r24, 0xB7	; 183
    373c:	9f 4f       	sbci	r25, 0xFF	; 255
    373e:	9e 01       	movw	r18, r28
    3740:	27 5b       	subi	r18, 0xB7	; 183
    3742:	3f 4f       	sbci	r19, 0xFF	; 255
    3744:	f9 01       	movw	r30, r18
    3746:	20 81       	ld	r18, Z
    3748:	31 81       	ldd	r19, Z+1	; 0x01
    374a:	21 50       	subi	r18, 0x01	; 1
    374c:	31 09       	sbc	r19, r1
    374e:	fc 01       	movw	r30, r24
    3750:	31 83       	std	Z+1, r19	; 0x01
    3752:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3754:	ce 01       	movw	r24, r28
    3756:	87 5b       	subi	r24, 0xB7	; 183
    3758:	9f 4f       	sbci	r25, 0xFF	; 255
    375a:	fc 01       	movw	r30, r24
    375c:	80 81       	ld	r24, Z
    375e:	91 81       	ldd	r25, Z+1	; 0x01
    3760:	89 2b       	or	r24, r25
    3762:	a1 f6       	brne	.-88     	; 0x370c <main+0x248>
    3764:	2b c0       	rjmp	.+86     	; 0x37bc <main+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3766:	8e 01       	movw	r16, r28
    3768:	07 5b       	subi	r16, 0xB7	; 183
    376a:	1f 4f       	sbci	r17, 0xFF	; 255
    376c:	ce 01       	movw	r24, r28
    376e:	8b 5b       	subi	r24, 0xBB	; 187
    3770:	9f 4f       	sbci	r25, 0xFF	; 255
    3772:	fc 01       	movw	r30, r24
    3774:	60 81       	ld	r22, Z
    3776:	71 81       	ldd	r23, Z+1	; 0x01
    3778:	82 81       	ldd	r24, Z+2	; 0x02
    377a:	93 81       	ldd	r25, Z+3	; 0x03
    377c:	4e d6       	rcall	.+3228   	; 0x441a <__fixunssfsi>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	f8 01       	movw	r30, r16
    3784:	91 83       	std	Z+1, r25	; 0x01
    3786:	80 83       	st	Z, r24
    3788:	ce 01       	movw	r24, r28
    378a:	83 5b       	subi	r24, 0xB3	; 179
    378c:	9f 4f       	sbci	r25, 0xFF	; 255
    378e:	9e 01       	movw	r18, r28
    3790:	27 5b       	subi	r18, 0xB7	; 183
    3792:	3f 4f       	sbci	r19, 0xFF	; 255
    3794:	f9 01       	movw	r30, r18
    3796:	20 81       	ld	r18, Z
    3798:	31 81       	ldd	r19, Z+1	; 0x01
    379a:	fc 01       	movw	r30, r24
    379c:	31 83       	std	Z+1, r19	; 0x01
    379e:	20 83       	st	Z, r18
    37a0:	ce 01       	movw	r24, r28
    37a2:	83 5b       	subi	r24, 0xB3	; 179
    37a4:	9f 4f       	sbci	r25, 0xFF	; 255
    37a6:	fc 01       	movw	r30, r24
    37a8:	80 81       	ld	r24, Z
    37aa:	91 81       	ldd	r25, Z+1	; 0x01
    37ac:	01 97       	sbiw	r24, 0x01	; 1
    37ae:	f1 f7       	brne	.-4      	; 0x37ac <main+0x2e8>
    37b0:	9e 01       	movw	r18, r28
    37b2:	23 5b       	subi	r18, 0xB3	; 179
    37b4:	3f 4f       	sbci	r19, 0xFF	; 255
    37b6:	f9 01       	movw	r30, r18
    37b8:	91 83       	std	Z+1, r25	; 0x01
    37ba:	80 83       	st	Z, r24
	_delay_ms(200);
	SendCommand01(0x0F, 0x01, 0x01);
    37bc:	41 e0       	ldi	r20, 0x01	; 1
    37be:	61 e0       	ldi	r22, 0x01	; 1
    37c0:	8f e0       	ldi	r24, 0x0F	; 15
    37c2:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	a8 e4       	ldi	r26, 0x48	; 72
    37cc:	b3 e4       	ldi	r27, 0x43	; 67
    37ce:	89 a3       	std	Y+33, r24	; 0x21
    37d0:	9a a3       	std	Y+34, r25	; 0x22
    37d2:	ab a3       	std	Y+35, r26	; 0x23

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    37d4:	bc a3       	std	Y+36, r27	; 0x24
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	4a e7       	ldi	r20, 0x7A	; 122
    37dc:	55 e4       	ldi	r21, 0x45	; 69
    37de:	69 a1       	ldd	r22, Y+33	; 0x21
    37e0:	7a a1       	ldd	r23, Y+34	; 0x22
    37e2:	8b a1       	ldd	r24, Y+35	; 0x23
    37e4:	9c a1       	ldd	r25, Y+36	; 0x24
    37e6:	96 d6       	rcall	.+3372   	; 0x4514 <__mulsf3>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	8b af       	std	Y+59, r24	; 0x3b
    37ee:	9c af       	std	Y+60, r25	; 0x3c
    37f0:	ad af       	std	Y+61, r26	; 0x3d
	if (__tmp < 1.0)
    37f2:	be af       	std	Y+62, r27	; 0x3e
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	40 e8       	ldi	r20, 0x80	; 128
    37fa:	5f e3       	ldi	r21, 0x3F	; 63
    37fc:	6b ad       	ldd	r22, Y+59	; 0x3b
    37fe:	7c ad       	ldd	r23, Y+60	; 0x3c
    3800:	8d ad       	ldd	r24, Y+61	; 0x3d
    3802:	9e ad       	ldd	r25, Y+62	; 0x3e
    3804:	06 d6       	rcall	.+3084   	; 0x4412 <__cmpsf2>
    3806:	88 23       	and	r24, r24
    3808:	44 f4       	brge	.+16     	; 0x381a <main+0x356>
		__ticks = 1;
    380a:	21 e0       	ldi	r18, 0x01	; 1
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	ce 01       	movw	r24, r28
    3810:	cf 96       	adiw	r24, 0x3f	; 63
    3812:	fc 01       	movw	r30, r24
    3814:	31 83       	std	Z+1, r19	; 0x01
    3816:	20 83       	st	Z, r18
	else if (__tmp > 65535)
    3818:	5b c0       	rjmp	.+182    	; 0x38d0 <main+0x40c>
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	3f ef       	ldi	r19, 0xFF	; 255
    381e:	4f e7       	ldi	r20, 0x7F	; 127
    3820:	57 e4       	ldi	r21, 0x47	; 71
    3822:	6b ad       	ldd	r22, Y+59	; 0x3b
    3824:	7c ad       	ldd	r23, Y+60	; 0x3c
    3826:	8d ad       	ldd	r24, Y+61	; 0x3d
    3828:	9e ad       	ldd	r25, Y+62	; 0x3e
    382a:	70 d6       	rcall	.+3296   	; 0x450c <__gesf2>
    382c:	18 16       	cp	r1, r24
    382e:	0c f0       	brlt	.+2      	; 0x3832 <main+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3830:	42 c0       	rjmp	.+132    	; 0x38b6 <main+0x3f2>
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	40 e2       	ldi	r20, 0x20	; 32
    3838:	51 e4       	ldi	r21, 0x41	; 65
    383a:	69 a1       	ldd	r22, Y+33	; 0x21
    383c:	7a a1       	ldd	r23, Y+34	; 0x22
    383e:	8b a1       	ldd	r24, Y+35	; 0x23
    3840:	9c a1       	ldd	r25, Y+36	; 0x24
    3842:	68 d6       	rcall	.+3280   	; 0x4514 <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	e6 d5       	rcall	.+3020   	; 0x441a <__fixunssfsi>
    384e:	dc 01       	movw	r26, r24
    3850:	cb 01       	movw	r24, r22
    3852:	9e 01       	movw	r18, r28
    3854:	21 5c       	subi	r18, 0xC1	; 193
    3856:	3f 4f       	sbci	r19, 0xFF	; 255
    3858:	f9 01       	movw	r30, r18
    385a:	91 83       	std	Z+1, r25	; 0x01
    385c:	80 83       	st	Z, r24
    385e:	23 c0       	rjmp	.+70     	; 0x38a6 <main+0x3e2>
    3860:	ce 01       	movw	r24, r28
    3862:	8f 5b       	subi	r24, 0xBF	; 191
    3864:	9f 4f       	sbci	r25, 0xFF	; 255
    3866:	20 e9       	ldi	r18, 0x90	; 144
    3868:	31 e0       	ldi	r19, 0x01	; 1
    386a:	fc 01       	movw	r30, r24
    386c:	31 83       	std	Z+1, r19	; 0x01
    386e:	20 83       	st	Z, r18
    3870:	ce 01       	movw	r24, r28
    3872:	8f 5b       	subi	r24, 0xBF	; 191
    3874:	9f 4f       	sbci	r25, 0xFF	; 255
    3876:	fc 01       	movw	r30, r24
    3878:	80 81       	ld	r24, Z
    387a:	91 81       	ldd	r25, Z+1	; 0x01
    387c:	01 97       	sbiw	r24, 0x01	; 1
    387e:	f1 f7       	brne	.-4      	; 0x387c <main+0x3b8>
    3880:	9e 01       	movw	r18, r28
    3882:	2f 5b       	subi	r18, 0xBF	; 191
    3884:	3f 4f       	sbci	r19, 0xFF	; 255
    3886:	f9 01       	movw	r30, r18
    3888:	91 83       	std	Z+1, r25	; 0x01
    388a:	80 83       	st	Z, r24
    388c:	ce 01       	movw	r24, r28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    388e:	cf 96       	adiw	r24, 0x3f	; 63
    3890:	fc 01       	movw	r30, r24
    3892:	80 81       	ld	r24, Z
    3894:	91 81       	ldd	r25, Z+1	; 0x01
    3896:	9c 01       	movw	r18, r24
    3898:	21 50       	subi	r18, 0x01	; 1
    389a:	31 09       	sbc	r19, r1
    389c:	ce 01       	movw	r24, r28
    389e:	cf 96       	adiw	r24, 0x3f	; 63
    38a0:	fc 01       	movw	r30, r24
    38a2:	31 83       	std	Z+1, r19	; 0x01
    38a4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38a6:	ce 01       	movw	r24, r28
    38a8:	cf 96       	adiw	r24, 0x3f	; 63
    38aa:	fc 01       	movw	r30, r24
    38ac:	80 81       	ld	r24, Z
    38ae:	91 81       	ldd	r25, Z+1	; 0x01
    38b0:	89 2b       	or	r24, r25
    38b2:	b1 f6       	brne	.-84     	; 0x3860 <main+0x39c>
    38b4:	27 c0       	rjmp	.+78     	; 0x3904 <main+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b6:	6b ad       	ldd	r22, Y+59	; 0x3b
    38b8:	7c ad       	ldd	r23, Y+60	; 0x3c
    38ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    38bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    38be:	ad d5       	rcall	.+2906   	; 0x441a <__fixunssfsi>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	9e 01       	movw	r18, r28
    38c6:	21 5c       	subi	r18, 0xC1	; 193
    38c8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ca:	f9 01       	movw	r30, r18
    38cc:	91 83       	std	Z+1, r25	; 0x01
    38ce:	80 83       	st	Z, r24
    38d0:	ce 01       	movw	r24, r28
    38d2:	8d 5b       	subi	r24, 0xBD	; 189
    38d4:	9f 4f       	sbci	r25, 0xFF	; 255
    38d6:	9e 01       	movw	r18, r28
    38d8:	21 5c       	subi	r18, 0xC1	; 193
    38da:	3f 4f       	sbci	r19, 0xFF	; 255
    38dc:	f9 01       	movw	r30, r18
    38de:	20 81       	ld	r18, Z
    38e0:	31 81       	ldd	r19, Z+1	; 0x01
    38e2:	fc 01       	movw	r30, r24
    38e4:	31 83       	std	Z+1, r19	; 0x01
    38e6:	20 83       	st	Z, r18
    38e8:	ce 01       	movw	r24, r28
    38ea:	8d 5b       	subi	r24, 0xBD	; 189
    38ec:	9f 4f       	sbci	r25, 0xFF	; 255
    38ee:	fc 01       	movw	r30, r24
    38f0:	80 81       	ld	r24, Z
    38f2:	91 81       	ldd	r25, Z+1	; 0x01
    38f4:	01 97       	sbiw	r24, 0x01	; 1
    38f6:	f1 f7       	brne	.-4      	; 0x38f4 <main+0x430>
    38f8:	9e 01       	movw	r18, r28
    38fa:	2d 5b       	subi	r18, 0xBD	; 189
    38fc:	3f 4f       	sbci	r19, 0xFF	; 255
    38fe:	f9 01       	movw	r30, r18
    3900:	91 83       	std	Z+1, r25	; 0x01
    3902:	80 83       	st	Z, r24
    3904:	83 e5       	ldi	r24, 0x53	; 83
	_delay_ms(200);
	
	TCCR0 = 0x07;	//타이머 카운터 0 1024분주로 켜기
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	27 e0       	ldi	r18, 0x07	; 7
    390a:	fc 01       	movw	r30, r24
    390c:	20 83       	st	Z, r18
    390e:	8f e4       	ldi	r24, 0x4F	; 79

	TCCR1A |= (0 << COM1A0) | (0 << WGM10);	//CTC, OC1A핀 차단
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	2f e4       	ldi	r18, 0x4F	; 79
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	f9 01       	movw	r30, r18
    3918:	20 81       	ld	r18, Z
    391a:	fc 01       	movw	r30, r24
    391c:	20 83       	st	Z, r18
    391e:	8e e4       	ldi	r24, 0x4E	; 78
	TCCR1B |= (1 << WGM12) | (5 << CS10); //CTC, 1024분주
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	2e e4       	ldi	r18, 0x4E	; 78
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	f9 01       	movw	r30, r18
    3928:	20 81       	ld	r18, Z
    392a:	2d 60       	ori	r18, 0x0D	; 13
    392c:	fc 01       	movw	r30, r24
    392e:	20 83       	st	Z, r18
    3930:	8a e4       	ldi	r24, 0x4A	; 74
	OCR1A = 0xFFF;
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	2f ef       	ldi	r18, 0xFF	; 255
    3936:	3f e0       	ldi	r19, 0x0F	; 15
    3938:	fc 01       	movw	r30, r24
    393a:	31 83       	std	Z+1, r19	; 0x01
    393c:	20 83       	st	Z, r18
    393e:	81 e3       	ldi	r24, 0x31	; 49
	

	DDRD = 0x00;	//인터럽트 4,5,6,7 켜기위해 포트 입력으로
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	fc 01       	movw	r30, r24
    3944:	10 82       	st	Z, r1
    3946:	8a e5       	ldi	r24, 0x5A	; 90

	EICRB = (2 << ISC40) | (2 << ISC50) | (2 << ISC60) | (2 << ISC70);
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	2a ea       	ldi	r18, 0xAA	; 170
    394c:	fc 01       	movw	r30, r24
    394e:	20 83       	st	Z, r18
    3950:	8a e6       	ldi	r24, 0x6A	; 106
	
	EICRA = (2 << ISC30);
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	20 e8       	ldi	r18, 0x80	; 128
    3956:	fc 01       	movw	r30, r24
    3958:	20 83       	st	Z, r18
    395a:	89 e5       	ldi	r24, 0x59	; 89

	EIMSK = (1 << INT4) | (1 << INT5) | (1 << INT6) | (1 << INT7);
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	20 ef       	ldi	r18, 0xF0	; 240
    3960:	fc 01       	movw	r30, r24
    3962:	20 83       	st	Z, r18
    3964:	78 94       	sei

	sei();
    3966:	0e 94 cf 05 	call	0xb9e	; 0xb9e <setup>

	setup();
    396a:	8a e1       	ldi	r24, 0x1A	; 26
	draw_picture(KO);
    396c:	93 e0       	ldi	r25, 0x03	; 3
    396e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <draw_picture>
    3972:	80 e0       	ldi	r24, 0x00	; 0
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	aa e7       	ldi	r26, 0x7A	; 122
    3978:	b4 e4       	ldi	r27, 0x44	; 68
    397a:	8d a7       	std	Y+45, r24	; 0x2d
    397c:	9e a7       	std	Y+46, r25	; 0x2e
    397e:	af a7       	std	Y+47, r26	; 0x2f
    3980:	b8 ab       	std	Y+48, r27	; 0x30

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	4a e7       	ldi	r20, 0x7A	; 122
    3988:	55 e4       	ldi	r21, 0x45	; 69
    398a:	6d a5       	ldd	r22, Y+45	; 0x2d
    398c:	7e a5       	ldd	r23, Y+46	; 0x2e
    398e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3990:	98 a9       	ldd	r25, Y+48	; 0x30
    3992:	c0 d5       	rcall	.+2944   	; 0x4514 <__mulsf3>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	89 ab       	std	Y+49, r24	; 0x31
    399a:	9a ab       	std	Y+50, r25	; 0x32
    399c:	ab ab       	std	Y+51, r26	; 0x33
    399e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	40 e8       	ldi	r20, 0x80	; 128
    39a6:	5f e3       	ldi	r21, 0x3F	; 63
    39a8:	69 a9       	ldd	r22, Y+49	; 0x31
    39aa:	7a a9       	ldd	r23, Y+50	; 0x32
    39ac:	8b a9       	ldd	r24, Y+51	; 0x33
    39ae:	9c a9       	ldd	r25, Y+52	; 0x34
    39b0:	30 d5       	rcall	.+2656   	; 0x4412 <__cmpsf2>
    39b2:	88 23       	and	r24, r24
    39b4:	2c f4       	brge	.+10     	; 0x39c0 <main+0x4fc>
		__ticks = 1;
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	9e ab       	std	Y+54, r25	; 0x36
    39bc:	8d ab       	std	Y+53, r24	; 0x35
    39be:	3b c0       	rjmp	.+118    	; 0x3a36 <main+0x572>
	else if (__tmp > 65535)
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	3f ef       	ldi	r19, 0xFF	; 255
    39c4:	4f e7       	ldi	r20, 0x7F	; 127
    39c6:	57 e4       	ldi	r21, 0x47	; 71
    39c8:	69 a9       	ldd	r22, Y+49	; 0x31
    39ca:	7a a9       	ldd	r23, Y+50	; 0x32
    39cc:	8b a9       	ldd	r24, Y+51	; 0x33
    39ce:	9c a9       	ldd	r25, Y+52	; 0x34
    39d0:	9d d5       	rcall	.+2874   	; 0x450c <__gesf2>
    39d2:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39d4:	3c f5       	brge	.+78     	; 0x3a24 <main+0x560>
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	40 e2       	ldi	r20, 0x20	; 32
    39dc:	51 e4       	ldi	r21, 0x41	; 65
    39de:	6d a5       	ldd	r22, Y+45	; 0x2d
    39e0:	7e a5       	ldd	r23, Y+46	; 0x2e
    39e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    39e4:	98 a9       	ldd	r25, Y+48	; 0x30
    39e6:	96 d5       	rcall	.+2860   	; 0x4514 <__mulsf3>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	bc 01       	movw	r22, r24
    39ee:	cd 01       	movw	r24, r26
    39f0:	14 d5       	rcall	.+2600   	; 0x441a <__fixunssfsi>
    39f2:	dc 01       	movw	r26, r24
    39f4:	cb 01       	movw	r24, r22
    39f6:	9e ab       	std	Y+54, r25	; 0x36
    39f8:	8d ab       	std	Y+53, r24	; 0x35
    39fa:	0f c0       	rjmp	.+30     	; 0x3a1a <main+0x556>
    39fc:	80 e9       	ldi	r24, 0x90	; 144
    39fe:	91 e0       	ldi	r25, 0x01	; 1
    3a00:	98 af       	std	Y+56, r25	; 0x38
    3a02:	8f ab       	std	Y+55, r24	; 0x37
    3a04:	8f a9       	ldd	r24, Y+55	; 0x37
    3a06:	98 ad       	ldd	r25, Y+56	; 0x38
    3a08:	01 97       	sbiw	r24, 0x01	; 1
    3a0a:	f1 f7       	brne	.-4      	; 0x3a08 <main+0x544>
    3a0c:	98 af       	std	Y+56, r25	; 0x38
    3a0e:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a10:	8d a9       	ldd	r24, Y+53	; 0x35
    3a12:	9e a9       	ldd	r25, Y+54	; 0x36
    3a14:	01 97       	sbiw	r24, 0x01	; 1
    3a16:	9e ab       	std	Y+54, r25	; 0x36
    3a18:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a1a:	8d a9       	ldd	r24, Y+53	; 0x35
    3a1c:	9e a9       	ldd	r25, Y+54	; 0x36
    3a1e:	89 2b       	or	r24, r25
    3a20:	69 f7       	brne	.-38     	; 0x39fc <main+0x538>
    3a22:	13 c0       	rjmp	.+38     	; 0x3a4a <main+0x586>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a24:	69 a9       	ldd	r22, Y+49	; 0x31
    3a26:	7a a9       	ldd	r23, Y+50	; 0x32
    3a28:	8b a9       	ldd	r24, Y+51	; 0x33
    3a2a:	9c a9       	ldd	r25, Y+52	; 0x34
    3a2c:	f6 d4       	rcall	.+2540   	; 0x441a <__fixunssfsi>
    3a2e:	dc 01       	movw	r26, r24
    3a30:	cb 01       	movw	r24, r22
    3a32:	9e ab       	std	Y+54, r25	; 0x36
    3a34:	8d ab       	std	Y+53, r24	; 0x35
    3a36:	8d a9       	ldd	r24, Y+53	; 0x35
    3a38:	9e a9       	ldd	r25, Y+54	; 0x36
    3a3a:	9a af       	std	Y+58, r25	; 0x3a
    3a3c:	89 af       	std	Y+57, r24	; 0x39
    3a3e:	89 ad       	ldd	r24, Y+57	; 0x39
    3a40:	9a ad       	ldd	r25, Y+58	; 0x3a
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	f1 f7       	brne	.-4      	; 0x3a42 <main+0x57e>
    3a46:	9a af       	std	Y+58, r25	; 0x3a
    3a48:	89 af       	std	Y+57, r24	; 0x39
    3a4a:	0e 94 16 05 	call	0xa2c	; 0xa2c <clear_screen>
	_delay_ms(1000);
	clear_screen();
    3a4e:	1a 82       	std	Y+2, r1	; 0x02
	for(int i = 0; i < 128; i++)
    3a50:	19 82       	std	Y+1, r1	; 0x01
    3a52:	1d c0       	rjmp	.+58     	; 0x3a8e <main+0x5ca>
    3a54:	82 e0       	ldi	r24, 0x02	; 2
	{
		ssd1306_set_page_start(2);
    3a56:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
		ssd1306_set_column_addr(i);
    3a5c:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3a60:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(horizon1, 1);
    3a62:	70 e0       	ldi	r23, 0x00	; 0
    3a64:	88 e0       	ldi	r24, 0x08	; 8
    3a66:	91 e0       	ldi	r25, 0x01	; 1
    3a68:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    3a6c:	87 e0       	ldi	r24, 0x07	; 7
		ssd1306_set_page_start(7);
    3a6e:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
		ssd1306_set_column_addr(i);
    3a74:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3a78:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(horizon2, 1);
    3a7a:	70 e0       	ldi	r23, 0x00	; 0
    3a7c:	89 e0       	ldi	r24, 0x09	; 9
    3a7e:	91 e0       	ldi	r25, 0x01	; 1
    3a80:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    3a84:	89 81       	ldd	r24, Y+1	; 0x01

	setup();
	draw_picture(KO);
	_delay_ms(1000);
	clear_screen();
	for(int i = 0; i < 128; i++)
    3a86:	9a 81       	ldd	r25, Y+2	; 0x02
    3a88:	01 96       	adiw	r24, 0x01	; 1
    3a8a:	9a 83       	std	Y+2, r25	; 0x02
    3a8c:	89 83       	std	Y+1, r24	; 0x01
    3a8e:	89 81       	ldd	r24, Y+1	; 0x01
    3a90:	9a 81       	ldd	r25, Y+2	; 0x02
    3a92:	80 38       	cpi	r24, 0x80	; 128
    3a94:	91 05       	cpc	r25, r1
    3a96:	f4 f2       	brlt	.-68     	; 0x3a54 <main+0x590>
    3a98:	1c 82       	std	Y+4, r1	; 0x04
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
    3a9a:	1b 82       	std	Y+3, r1	; 0x03
    3a9c:	1a c0       	rjmp	.+52     	; 0x3ad2 <main+0x60e>
    3a9e:	8b 81       	ldd	r24, Y+3	; 0x03
	{
		ssd1306_set_page_start(i);
    3aa0:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    3aa4:	80 e0       	ldi	r24, 0x00	; 0
		ssd1306_set_column_addr(0);
    3aa6:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3aaa:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(vertical, 1);
    3aac:	70 e0       	ldi	r23, 0x00	; 0
    3aae:	8a e0       	ldi	r24, 0x0A	; 10
    3ab0:	91 e0       	ldi	r25, 0x01	; 1
    3ab2:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    3ab6:	8f e7       	ldi	r24, 0x7F	; 127
		ssd1306_set_column_addr(127);
    3ab8:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3abc:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(vertical, 1);
    3abe:	70 e0       	ldi	r23, 0x00	; 0
    3ac0:	8a e0       	ldi	r24, 0x0A	; 10
    3ac2:	91 e0       	ldi	r25, 0x01	; 1
    3ac4:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    3ac8:	8b 81       	ldd	r24, Y+3	; 0x03
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
    3aca:	9c 81       	ldd	r25, Y+4	; 0x04
    3acc:	01 96       	adiw	r24, 0x01	; 1
    3ace:	9c 83       	std	Y+4, r25	; 0x04
    3ad0:	8b 83       	std	Y+3, r24	; 0x03
    3ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad6:	08 97       	sbiw	r24, 0x08	; 8
    3ad8:	14 f3       	brlt	.-60     	; 0x3a9e <main+0x5da>
    3ada:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
		ssd1306_set_column_addr(127);
		ssd1306_data(vertical, 1);
	}
	while(1)
	{
		if(screen == Ready)
    3ade:	86 30       	cpi	r24, 0x06	; 6
    3ae0:	09 f0       	breq	.+2      	; 0x3ae4 <main+0x620>
    3ae2:	4a c0       	rjmp	.+148    	; 0x3b78 <main+0x6b4>
    3ae4:	0e 94 16 05 	call	0xa2c	; 0xa2c <clear_screen>
		{
			clear_screen();
    3ae8:	1e 82       	std	Y+6, r1	; 0x06
			for(int i = 0; i < 128; i++)
    3aea:	1d 82       	std	Y+5, r1	; 0x05
    3aec:	1d c0       	rjmp	.+58     	; 0x3b28 <main+0x664>
    3aee:	82 e0       	ldi	r24, 0x02	; 2
			{
				ssd1306_set_page_start(2);
    3af0:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    3af4:	8d 81       	ldd	r24, Y+5	; 0x05
				ssd1306_set_column_addr(i);
    3af6:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3afa:	61 e0       	ldi	r22, 0x01	; 1
				ssd1306_data(horizon1, 1);
    3afc:	70 e0       	ldi	r23, 0x00	; 0
    3afe:	88 e0       	ldi	r24, 0x08	; 8
    3b00:	91 e0       	ldi	r25, 0x01	; 1
    3b02:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    3b06:	87 e0       	ldi	r24, 0x07	; 7
				ssd1306_set_page_start(7);
    3b08:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    3b0c:	8d 81       	ldd	r24, Y+5	; 0x05
				ssd1306_set_column_addr(i);
    3b0e:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3b12:	61 e0       	ldi	r22, 0x01	; 1
				ssd1306_data(horizon2, 1);
    3b14:	70 e0       	ldi	r23, 0x00	; 0
    3b16:	89 e0       	ldi	r24, 0x09	; 9
    3b18:	91 e0       	ldi	r25, 0x01	; 1
    3b1a:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    3b1e:	8d 81       	ldd	r24, Y+5	; 0x05
	while(1)
	{
		if(screen == Ready)
		{
			clear_screen();
			for(int i = 0; i < 128; i++)
    3b20:	9e 81       	ldd	r25, Y+6	; 0x06
    3b22:	01 96       	adiw	r24, 0x01	; 1
    3b24:	9e 83       	std	Y+6, r25	; 0x06
    3b26:	8d 83       	std	Y+5, r24	; 0x05
    3b28:	8d 81       	ldd	r24, Y+5	; 0x05
    3b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b2c:	80 38       	cpi	r24, 0x80	; 128
    3b2e:	91 05       	cpc	r25, r1
    3b30:	f4 f2       	brlt	.-68     	; 0x3aee <main+0x62a>
    3b32:	18 86       	std	Y+8, r1	; 0x08
				ssd1306_data(horizon1, 1);
				ssd1306_set_page_start(7);
				ssd1306_set_column_addr(i);
				ssd1306_data(horizon2, 1);
			}
			for(int i = 0; i < 8; i++)
    3b34:	1f 82       	std	Y+7, r1	; 0x07
    3b36:	1a c0       	rjmp	.+52     	; 0x3b6c <main+0x6a8>
    3b38:	8f 81       	ldd	r24, Y+7	; 0x07
			{
				ssd1306_set_page_start(i);
    3b3a:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
				ssd1306_set_column_addr(0);
    3b40:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3b44:	61 e0       	ldi	r22, 0x01	; 1
				ssd1306_data(vertical, 1);
    3b46:	70 e0       	ldi	r23, 0x00	; 0
    3b48:	8a e0       	ldi	r24, 0x0A	; 10
    3b4a:	91 e0       	ldi	r25, 0x01	; 1
    3b4c:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    3b50:	8f e7       	ldi	r24, 0x7F	; 127
				ssd1306_set_column_addr(127);
    3b52:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3b56:	61 e0       	ldi	r22, 0x01	; 1
				ssd1306_data(vertical, 1);
    3b58:	70 e0       	ldi	r23, 0x00	; 0
    3b5a:	8a e0       	ldi	r24, 0x0A	; 10
    3b5c:	91 e0       	ldi	r25, 0x01	; 1
    3b5e:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
    3b62:	8f 81       	ldd	r24, Y+7	; 0x07
				ssd1306_data(horizon1, 1);
				ssd1306_set_page_start(7);
				ssd1306_set_column_addr(i);
				ssd1306_data(horizon2, 1);
			}
			for(int i = 0; i < 8; i++)
    3b64:	98 85       	ldd	r25, Y+8	; 0x08
    3b66:	01 96       	adiw	r24, 0x01	; 1
    3b68:	98 87       	std	Y+8, r25	; 0x08
    3b6a:	8f 83       	std	Y+7, r24	; 0x07
    3b6c:	8f 81       	ldd	r24, Y+7	; 0x07
    3b6e:	98 85       	ldd	r25, Y+8	; 0x08
    3b70:	08 97       	sbiw	r24, 0x08	; 8
    3b72:	14 f3       	brlt	.-60     	; 0x3b38 <main+0x674>
    3b74:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <screen>
				ssd1306_set_column_addr(0);
				ssd1306_data(vertical, 1);
				ssd1306_set_column_addr(127);
				ssd1306_data(vertical, 1);
			}
			screen = Menu_snake;
    3b78:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
		}
		if(screen == Menu_snake)
    3b7c:	88 23       	and	r24, r24
    3b7e:	09 f0       	breq	.+2      	; 0x3b82 <main+0x6be>
    3b80:	45 c0       	rjmp	.+138    	; 0x3c0c <main+0x748>
    3b82:	8c ea       	ldi	r24, 0xAC	; 172
		{	
			oled_msg(0, 3, "Myoungmin's GAME");
    3b84:	92 e0       	ldi	r25, 0x02	; 2
    3b86:	89 2f       	mov	r24, r25
    3b88:	8f 93       	push	r24
    3b8a:	8c ea       	ldi	r24, 0xAC	; 172
    3b8c:	92 e0       	ldi	r25, 0x02	; 2
    3b8e:	8f 93       	push	r24
    3b90:	1f 92       	push	r1
    3b92:	83 e0       	ldi	r24, 0x03	; 3
    3b94:	8f 93       	push	r24
    3b96:	1f 92       	push	r1
    3b98:	1f 92       	push	r1
    3b9a:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    3b9e:	0f 90       	pop	r0
    3ba0:	0f 90       	pop	r0
    3ba2:	0f 90       	pop	r0
    3ba4:	0f 90       	pop	r0
    3ba6:	0f 90       	pop	r0
    3ba8:	0f 90       	pop	r0
    3baa:	8d eb       	ldi	r24, 0xBD	; 189
			oled_msg(3, 3, ">> SNAKE GAME");
    3bac:	92 e0       	ldi	r25, 0x02	; 2
    3bae:	89 2f       	mov	r24, r25
    3bb0:	8f 93       	push	r24
    3bb2:	8d eb       	ldi	r24, 0xBD	; 189
    3bb4:	92 e0       	ldi	r25, 0x02	; 2
    3bb6:	8f 93       	push	r24
    3bb8:	1f 92       	push	r1
    3bba:	83 e0       	ldi	r24, 0x03	; 3
    3bbc:	8f 93       	push	r24
    3bbe:	1f 92       	push	r1
    3bc0:	83 e0       	ldi	r24, 0x03	; 3
    3bc2:	8f 93       	push	r24
    3bc4:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    3bc8:	0f 90       	pop	r0
    3bca:	0f 90       	pop	r0
    3bcc:	0f 90       	pop	r0
    3bce:	0f 90       	pop	r0
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0
    3bd4:	8b ec       	ldi	r24, 0xCB	; 203
			oled_msg(6, 3, "   TETRIS");
    3bd6:	92 e0       	ldi	r25, 0x02	; 2
    3bd8:	89 2f       	mov	r24, r25
    3bda:	8f 93       	push	r24
    3bdc:	8b ec       	ldi	r24, 0xCB	; 203
    3bde:	92 e0       	ldi	r25, 0x02	; 2
    3be0:	8f 93       	push	r24
    3be2:	1f 92       	push	r1
    3be4:	83 e0       	ldi	r24, 0x03	; 3
    3be6:	8f 93       	push	r24
    3be8:	1f 92       	push	r1
    3bea:	86 e0       	ldi	r24, 0x06	; 6
    3bec:	8f 93       	push	r24
    3bee:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    3bf2:	0f 90       	pop	r0
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	80 e0       	ldi	r24, 0x00	; 0
			ssd1306_set_page_start(0);
    3c00:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    3c04:	80 e0       	ldi	r24, 0x00	; 0
			ssd1306_set_column_addr(0);
    3c06:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3c0a:	67 cf       	rjmp	.-306    	; 0x3ada <main+0x616>
    3c0c:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
		}
		else if (screen == Menu_tetris)
    3c10:	81 30       	cpi	r24, 0x01	; 1
    3c12:	09 f0       	breq	.+2      	; 0x3c16 <main+0x752>
    3c14:	45 c0       	rjmp	.+138    	; 0x3ca0 <main+0x7dc>
    3c16:	8c ea       	ldi	r24, 0xAC	; 172
		{		
			oled_msg(0, 3, "Myoungmin's GAME");
    3c18:	92 e0       	ldi	r25, 0x02	; 2
    3c1a:	89 2f       	mov	r24, r25
    3c1c:	8f 93       	push	r24
    3c1e:	8c ea       	ldi	r24, 0xAC	; 172
    3c20:	92 e0       	ldi	r25, 0x02	; 2
    3c22:	8f 93       	push	r24
    3c24:	1f 92       	push	r1
    3c26:	83 e0       	ldi	r24, 0x03	; 3
    3c28:	8f 93       	push	r24
    3c2a:	1f 92       	push	r1
    3c2c:	1f 92       	push	r1
    3c2e:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    3c32:	0f 90       	pop	r0
    3c34:	0f 90       	pop	r0
    3c36:	0f 90       	pop	r0
    3c38:	0f 90       	pop	r0
    3c3a:	0f 90       	pop	r0
    3c3c:	0f 90       	pop	r0
    3c3e:	85 ed       	ldi	r24, 0xD5	; 213
			oled_msg(3, 3, "   SNAKE GAME");
    3c40:	92 e0       	ldi	r25, 0x02	; 2
    3c42:	89 2f       	mov	r24, r25
    3c44:	8f 93       	push	r24
    3c46:	85 ed       	ldi	r24, 0xD5	; 213
    3c48:	92 e0       	ldi	r25, 0x02	; 2
    3c4a:	8f 93       	push	r24
    3c4c:	1f 92       	push	r1
    3c4e:	83 e0       	ldi	r24, 0x03	; 3
    3c50:	8f 93       	push	r24
    3c52:	1f 92       	push	r1
    3c54:	83 e0       	ldi	r24, 0x03	; 3
    3c56:	8f 93       	push	r24
    3c58:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	0f 90       	pop	r0
    3c62:	0f 90       	pop	r0
    3c64:	0f 90       	pop	r0
    3c66:	0f 90       	pop	r0
    3c68:	83 ee       	ldi	r24, 0xE3	; 227
			oled_msg(6, 3, ">> TETRIS");
    3c6a:	92 e0       	ldi	r25, 0x02	; 2
    3c6c:	89 2f       	mov	r24, r25
    3c6e:	8f 93       	push	r24
    3c70:	83 ee       	ldi	r24, 0xE3	; 227
    3c72:	92 e0       	ldi	r25, 0x02	; 2
    3c74:	8f 93       	push	r24
    3c76:	1f 92       	push	r1
    3c78:	83 e0       	ldi	r24, 0x03	; 3
    3c7a:	8f 93       	push	r24
    3c7c:	1f 92       	push	r1
    3c7e:	86 e0       	ldi	r24, 0x06	; 6
    3c80:	8f 93       	push	r24
    3c82:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    3c86:	0f 90       	pop	r0
    3c88:	0f 90       	pop	r0
    3c8a:	0f 90       	pop	r0
    3c8c:	0f 90       	pop	r0
    3c8e:	0f 90       	pop	r0
    3c90:	0f 90       	pop	r0
    3c92:	80 e0       	ldi	r24, 0x00	; 0
			ssd1306_set_page_start(0);
    3c94:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    3c98:	80 e0       	ldi	r24, 0x00	; 0
			ssd1306_set_column_addr(0);
    3c9a:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    3c9e:	1d cf       	rjmp	.-454    	; 0x3ada <main+0x616>
    3ca0:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
		}
		else if(screen == Play_snake)
    3ca4:	82 30       	cpi	r24, 0x02	; 2
    3ca6:	09 f0       	breq	.+2      	; 0x3caa <main+0x7e6>
    3ca8:	d7 c1       	rjmp	.+942    	; 0x4058 <main+0xb94>
    3caa:	87 e5       	ldi	r24, 0x57	; 87
		{
			TIMSK |= (0 << OCIE1A);	//타이머 카운터 1 출력비교 A 매치 인터럽트 인에이블
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	27 e5       	ldi	r18, 0x57	; 87
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	f9 01       	movw	r30, r18
    3cb4:	20 81       	ld	r18, Z
    3cb6:	fc 01       	movw	r30, r24
    3cb8:	20 83       	st	Z, r18
    3cba:	80 e2       	ldi	r24, 0x20	; 32
			x[0] = 32;
    3cbc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <x>
    3cc0:	8f e1       	ldi	r24, 0x1F	; 31
			x[1] = 31;
    3cc2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <x+0x1>
    3cc6:	8e e1       	ldi	r24, 0x1E	; 30
			x[2] = 30;
    3cc8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <x+0x2>
    3ccc:	8c e0       	ldi	r24, 0x0C	; 12
			y[0] = 12;
    3cce:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <y>
    3cd2:	8c e0       	ldi	r24, 0x0C	; 12
			y[1] = 12;
    3cd4:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <y+0x1>
    3cd8:	8c e0       	ldi	r24, 0x0C	; 12
			y[2] = 12;
    3cda:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <y+0x2>
    3cde:	83 e0       	ldi	r24, 0x03	; 3

			for(int i = 3; i < 200; i++)
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	9a 87       	std	Y+10, r25	; 0x0a
    3ce4:	89 87       	std	Y+9, r24	; 0x09
    3ce6:	0b c0       	rjmp	.+22     	; 0x3cfe <main+0x83a>
    3ce8:	89 85       	ldd	r24, Y+9	; 0x09
			{
				x[i] = 0;
    3cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cec:	85 5f       	subi	r24, 0xF5	; 245
    3cee:	9e 4f       	sbci	r25, 0xFE	; 254
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	10 82       	st	Z, r1
    3cf4:	89 85       	ldd	r24, Y+9	; 0x09
			x[2] = 30;
			y[0] = 12;
			y[1] = 12;
			y[2] = 12;

			for(int i = 3; i < 200; i++)
    3cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf8:	01 96       	adiw	r24, 0x01	; 1
    3cfa:	9a 87       	std	Y+10, r25	; 0x0a
    3cfc:	89 87       	std	Y+9, r24	; 0x09
    3cfe:	89 85       	ldd	r24, Y+9	; 0x09
    3d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d02:	88 3c       	cpi	r24, 0xC8	; 200
    3d04:	91 05       	cpc	r25, r1
    3d06:	84 f3       	brlt	.-32     	; 0x3ce8 <main+0x824>
    3d08:	83 e0       	ldi	r24, 0x03	; 3
			{
				x[i] = 0;
			}
			for(int i = 3; i < 200; i++)
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	9c 87       	std	Y+12, r25	; 0x0c
    3d0e:	8b 87       	std	Y+11, r24	; 0x0b
    3d10:	0b c0       	rjmp	.+22     	; 0x3d28 <main+0x864>
    3d12:	8b 85       	ldd	r24, Y+11	; 0x0b
			{
				y[i] = 0;
    3d14:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d16:	8d 52       	subi	r24, 0x2D	; 45
    3d18:	9e 4f       	sbci	r25, 0xFE	; 254
    3d1a:	fc 01       	movw	r30, r24
    3d1c:	10 82       	st	Z, r1
    3d1e:	8b 85       	ldd	r24, Y+11	; 0x0b

			for(int i = 3; i < 200; i++)
			{
				x[i] = 0;
			}
			for(int i = 3; i < 200; i++)
    3d20:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d22:	01 96       	adiw	r24, 0x01	; 1
    3d24:	9c 87       	std	Y+12, r25	; 0x0c
    3d26:	8b 87       	std	Y+11, r24	; 0x0b
    3d28:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d2c:	88 3c       	cpi	r24, 0xC8	; 200
    3d2e:	91 05       	cpc	r25, r1
    3d30:	84 f3       	brlt	.-32     	; 0x3d12 <main+0x84e>
    3d32:	83 e0       	ldi	r24, 0x03	; 3
			{
				y[i] = 0;
			}

			length = 3;
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <length+0x1>
    3d3a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <length>
    3d3e:	8d e4       	ldi	r24, 0x4D	; 77
			dir = RIGHT;
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    3d46:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    3d4a:	0e 94 16 05 	call	0xa2c	; 0xa2c <clear_screen>

			clear_screen();
    3d4e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <snake_title>

			snake_title();
    3d52:	7c c1       	rjmp	.+760    	; 0x404c <main+0xb88>
			

			while(screen == Play_snake)
    3d54:	87 e2       	ldi	r24, 0x27	; 39
			{
				ADMUX = (1<<REFS0) | (0 << MUX0);//기준전압 AVCC 사용, ADC0 단극성 입력
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	20 e4       	ldi	r18, 0x40	; 64
    3d5a:	fc 01       	movw	r30, r24
    3d5c:	20 83       	st	Z, r18
    3d5e:	86 e2       	ldi	r24, 0x26	; 38
				ADCSRA = (1<<ADEN) | (1<<ADSC) | (7 << ADPS0);	//ADCSRA = 0x87;// ADEN=1, 16MHz의 128분주 -> 125kHz
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	27 ec       	ldi	r18, 0xC7	; 199
    3d64:	fc 01       	movw	r30, r24
    3d66:	20 83       	st	Z, r18
    3d68:	00 00       	nop
				
				while((ADCSRA & (1<<ADIF)) == 0);	//변환 종료를 기다림
    3d6a:	86 e2       	ldi	r24, 0x26	; 38
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	fc 01       	movw	r30, r24
    3d70:	80 81       	ld	r24, Z
    3d72:	88 2f       	mov	r24, r24
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	80 71       	andi	r24, 0x10	; 16
    3d78:	99 27       	eor	r25, r25
    3d7a:	89 2b       	or	r24, r25
    3d7c:	b1 f3       	breq	.-20     	; 0x3d6a <main+0x8a6>
    3d7e:	86 e2       	ldi	r24, 0x26	; 38
				ADCSRA |= (1<<ADIF);	//ADIF 플래그를 지움
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	26 e2       	ldi	r18, 0x26	; 38
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	f9 01       	movw	r30, r18
    3d88:	20 81       	ld	r18, Z
    3d8a:	20 61       	ori	r18, 0x10	; 16
    3d8c:	fc 01       	movw	r30, r24
    3d8e:	20 83       	st	Z, r18
    3d90:	84 e2       	ldi	r24, 0x24	; 36
				
				val_x = ADC;
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	fc 01       	movw	r30, r24
    3d96:	80 81       	ld	r24, Z
    3d98:	91 81       	ldd	r25, Z+1	; 0x01
    3d9a:	cc 01       	movw	r24, r24
    3d9c:	a0 e0       	ldi	r26, 0x00	; 0
    3d9e:	b0 e0       	ldi	r27, 0x00	; 0
    3da0:	8d a3       	std	Y+37, r24	; 0x25
    3da2:	9e a3       	std	Y+38, r25	; 0x26
    3da4:	af a3       	std	Y+39, r26	; 0x27
    3da6:	b8 a7       	std	Y+40, r27	; 0x28
    3da8:	8d a1       	ldd	r24, Y+37	; 0x25
				if(val_x <=100 && dir != LEFT)
    3daa:	9e a1       	ldd	r25, Y+38	; 0x26
    3dac:	af a1       	ldd	r26, Y+39	; 0x27
    3dae:	b8 a5       	ldd	r27, Y+40	; 0x28
    3db0:	85 36       	cpi	r24, 0x65	; 101
    3db2:	91 05       	cpc	r25, r1
    3db4:	a1 05       	cpc	r26, r1
    3db6:	b1 05       	cpc	r27, r1
    3db8:	9c f4       	brge	.+38     	; 0x3de0 <main+0x91c>
    3dba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    3dbe:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    3dc2:	8b 34       	cpi	r24, 0x4B	; 75
    3dc4:	91 05       	cpc	r25, r1
    3dc6:	61 f0       	breq	.+24     	; 0x3de0 <main+0x91c>
    3dc8:	43 e0       	ldi	r20, 0x03	; 3
				{
					SendCommand01(0x0F, 0x01, 0x03);
    3dca:	61 e0       	ldi	r22, 0x01	; 1
    3dcc:	8f e0       	ldi	r24, 0x0F	; 15
    3dce:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
    3dd2:	8d e4       	ldi	r24, 0x4D	; 77
					dir = RIGHT;
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    3dda:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    3dde:	1b c0       	rjmp	.+54     	; 0x3e16 <main+0x952>
    3de0:	8d a1       	ldd	r24, Y+37	; 0x25
				}
				
				else if(val_x >=800 && dir != RIGHT)
    3de2:	9e a1       	ldd	r25, Y+38	; 0x26
    3de4:	af a1       	ldd	r26, Y+39	; 0x27
    3de6:	b8 a5       	ldd	r27, Y+40	; 0x28
    3de8:	80 32       	cpi	r24, 0x20	; 32
    3dea:	93 40       	sbci	r25, 0x03	; 3
    3dec:	a1 05       	cpc	r26, r1
    3dee:	b1 05       	cpc	r27, r1
    3df0:	94 f0       	brlt	.+36     	; 0x3e16 <main+0x952>
    3df2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    3df6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    3dfa:	8d 34       	cpi	r24, 0x4D	; 77
    3dfc:	91 05       	cpc	r25, r1
    3dfe:	59 f0       	breq	.+22     	; 0x3e16 <main+0x952>
    3e00:	43 e0       	ldi	r20, 0x03	; 3
				{
					SendCommand01(0x0F, 0x01, 0x03);
    3e02:	61 e0       	ldi	r22, 0x01	; 1
    3e04:	8f e0       	ldi	r24, 0x0F	; 15
    3e06:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
    3e0a:	8b e4       	ldi	r24, 0x4B	; 75
					dir = LEFT;
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    3e12:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    3e16:	87 e2       	ldi	r24, 0x27	; 39
				}
				

				ADMUX = (1<<REFS0) | (1 << MUX0);//기준전압 AVCC 사용, ADC1 단극성 입력
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	21 e4       	ldi	r18, 0x41	; 65
    3e1c:	fc 01       	movw	r30, r24
    3e1e:	20 83       	st	Z, r18
    3e20:	86 e2       	ldi	r24, 0x26	; 38
				ADCSRA = (1<<ADEN) | (1<<ADSC) | (7 << ADPS0);	//ADCSRA = 0x87;// ADEN=1, 16MHz의 128분주 -> 125kHz
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	27 ec       	ldi	r18, 0xC7	; 199
    3e26:	fc 01       	movw	r30, r24
    3e28:	20 83       	st	Z, r18
    3e2a:	00 00       	nop
				
				while((ADCSRA & (1<<ADIF)) == 0);	//변환 종료를 기다림
    3e2c:	86 e2       	ldi	r24, 0x26	; 38
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	fc 01       	movw	r30, r24
    3e32:	80 81       	ld	r24, Z
    3e34:	88 2f       	mov	r24, r24
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	80 71       	andi	r24, 0x10	; 16
    3e3a:	99 27       	eor	r25, r25
    3e3c:	89 2b       	or	r24, r25
    3e3e:	b1 f3       	breq	.-20     	; 0x3e2c <main+0x968>
    3e40:	86 e2       	ldi	r24, 0x26	; 38
				ADCSRA |= (1<<ADIF);	//ADIF 플래그를 지움
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	26 e2       	ldi	r18, 0x26	; 38
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	f9 01       	movw	r30, r18
    3e4a:	20 81       	ld	r18, Z
    3e4c:	20 61       	ori	r18, 0x10	; 16
    3e4e:	fc 01       	movw	r30, r24
    3e50:	20 83       	st	Z, r18
    3e52:	84 e2       	ldi	r24, 0x24	; 36

				val_y = ADC;
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	fc 01       	movw	r30, r24
    3e58:	80 81       	ld	r24, Z
    3e5a:	91 81       	ldd	r25, Z+1	; 0x01
    3e5c:	cc 01       	movw	r24, r24
    3e5e:	a0 e0       	ldi	r26, 0x00	; 0
    3e60:	b0 e0       	ldi	r27, 0x00	; 0
    3e62:	89 a7       	std	Y+41, r24	; 0x29
    3e64:	9a a7       	std	Y+42, r25	; 0x2a
    3e66:	ab a7       	std	Y+43, r26	; 0x2b
    3e68:	bc a7       	std	Y+44, r27	; 0x2c
    3e6a:	89 a5       	ldd	r24, Y+41	; 0x29
				if(val_y >=800 && dir != DOWN)
    3e6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e6e:	ab a5       	ldd	r26, Y+43	; 0x2b
    3e70:	bc a5       	ldd	r27, Y+44	; 0x2c
    3e72:	80 32       	cpi	r24, 0x20	; 32
    3e74:	93 40       	sbci	r25, 0x03	; 3
    3e76:	a1 05       	cpc	r26, r1
    3e78:	b1 05       	cpc	r27, r1
    3e7a:	9c f0       	brlt	.+38     	; 0x3ea2 <main+0x9de>
    3e7c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    3e80:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    3e84:	80 35       	cpi	r24, 0x50	; 80
    3e86:	91 05       	cpc	r25, r1
    3e88:	61 f0       	breq	.+24     	; 0x3ea2 <main+0x9de>
    3e8a:	43 e0       	ldi	r20, 0x03	; 3
				{
					SendCommand01(0x0F, 0x01, 0x03);
    3e8c:	61 e0       	ldi	r22, 0x01	; 1
    3e8e:	8f e0       	ldi	r24, 0x0F	; 15
    3e90:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
    3e94:	88 e4       	ldi	r24, 0x48	; 72
					dir = UP;
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    3e9c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    3ea0:	1b c0       	rjmp	.+54     	; 0x3ed8 <main+0xa14>
    3ea2:	89 a5       	ldd	r24, Y+41	; 0x29
				}
				else if(val_y <=100 && dir != UP)
    3ea4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ea6:	ab a5       	ldd	r26, Y+43	; 0x2b
    3ea8:	bc a5       	ldd	r27, Y+44	; 0x2c
    3eaa:	85 36       	cpi	r24, 0x65	; 101
    3eac:	91 05       	cpc	r25, r1
    3eae:	a1 05       	cpc	r26, r1
    3eb0:	b1 05       	cpc	r27, r1
    3eb2:	94 f4       	brge	.+36     	; 0x3ed8 <main+0xa14>
    3eb4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    3eb8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    3ebc:	88 34       	cpi	r24, 0x48	; 72
    3ebe:	91 05       	cpc	r25, r1
    3ec0:	59 f0       	breq	.+22     	; 0x3ed8 <main+0xa14>
    3ec2:	43 e0       	ldi	r20, 0x03	; 3
				{
					SendCommand01(0x0F, 0x01, 0x03);
    3ec4:	61 e0       	ldi	r22, 0x01	; 1
    3ec6:	8f e0       	ldi	r24, 0x0F	; 15
    3ec8:	0e 94 35 03 	call	0x66a	; 0x66a <SendCommand01>
    3ecc:	80 e5       	ldi	r24, 0x50	; 80
					dir = DOWN;
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    3ed4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    3ed8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
				}


				snake_move(dir);
    3edc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    3ee0:	0e 94 73 12 	call	0x24e6	; 0x24e6 <snake_move>
				//SendCommand01(0x0F, 0x01, 0x02);
				snake_draw_map();
    3ee4:	0e 94 36 10 	call	0x206c	; 0x206c <snake_draw_map>
    3ee8:	80 e0       	ldi	r24, 0x00	; 0
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	a0 ea       	ldi	r26, 0xA0	; 160
    3eee:	b2 e4       	ldi	r27, 0x42	; 66
    3ef0:	8d 8b       	std	Y+21, r24	; 0x15
    3ef2:	9e 8b       	std	Y+22, r25	; 0x16
    3ef4:	af 8b       	std	Y+23, r26	; 0x17
    3ef6:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3ef8:	8e 01       	movw	r16, r28
    3efa:	07 5a       	subi	r16, 0xA7	; 167
    3efc:	1f 4f       	sbci	r17, 0xFF	; 255
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	4a e7       	ldi	r20, 0x7A	; 122
    3f04:	55 e4       	ldi	r21, 0x45	; 69
    3f06:	6d 89       	ldd	r22, Y+21	; 0x15
    3f08:	7e 89       	ldd	r23, Y+22	; 0x16
    3f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    3f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    3f0e:	02 d3       	rcall	.+1540   	; 0x4514 <__mulsf3>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	f8 01       	movw	r30, r16
    3f16:	80 83       	st	Z, r24
    3f18:	91 83       	std	Z+1, r25	; 0x01
    3f1a:	a2 83       	std	Z+2, r26	; 0x02
    3f1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f1e:	ce 01       	movw	r24, r28
    3f20:	87 5a       	subi	r24, 0xA7	; 167
    3f22:	9f 4f       	sbci	r25, 0xFF	; 255
    3f24:	20 e0       	ldi	r18, 0x00	; 0
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	40 e8       	ldi	r20, 0x80	; 128
    3f2a:	5f e3       	ldi	r21, 0x3F	; 63
    3f2c:	fc 01       	movw	r30, r24
    3f2e:	60 81       	ld	r22, Z
    3f30:	71 81       	ldd	r23, Z+1	; 0x01
    3f32:	82 81       	ldd	r24, Z+2	; 0x02
    3f34:	93 81       	ldd	r25, Z+3	; 0x03
    3f36:	6d d2       	rcall	.+1242   	; 0x4412 <__cmpsf2>
    3f38:	88 23       	and	r24, r24
    3f3a:	4c f4       	brge	.+18     	; 0x3f4e <main+0xa8a>
		__ticks = 1;
    3f3c:	ce 01       	movw	r24, r28
    3f3e:	83 5a       	subi	r24, 0xA3	; 163
    3f40:	9f 4f       	sbci	r25, 0xFF	; 255
    3f42:	21 e0       	ldi	r18, 0x01	; 1
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	fc 01       	movw	r30, r24
    3f48:	31 83       	std	Z+1, r19	; 0x01
    3f4a:	20 83       	st	Z, r18
	else if (__tmp > 65535)
    3f4c:	65 c0       	rjmp	.+202    	; 0x4018 <main+0xb54>
    3f4e:	ce 01       	movw	r24, r28
    3f50:	87 5a       	subi	r24, 0xA7	; 167
    3f52:	9f 4f       	sbci	r25, 0xFF	; 255
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	3f ef       	ldi	r19, 0xFF	; 255
    3f58:	4f e7       	ldi	r20, 0x7F	; 127
    3f5a:	57 e4       	ldi	r21, 0x47	; 71
    3f5c:	fc 01       	movw	r30, r24
    3f5e:	60 81       	ld	r22, Z
    3f60:	71 81       	ldd	r23, Z+1	; 0x01
    3f62:	82 81       	ldd	r24, Z+2	; 0x02
    3f64:	93 81       	ldd	r25, Z+3	; 0x03
    3f66:	d2 d2       	rcall	.+1444   	; 0x450c <__gesf2>
    3f68:	18 16       	cp	r1, r24
    3f6a:	0c f0       	brlt	.+2      	; 0x3f6e <main+0xaaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f6c:	44 c0       	rjmp	.+136    	; 0x3ff6 <main+0xb32>
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	40 e2       	ldi	r20, 0x20	; 32
    3f74:	51 e4       	ldi	r21, 0x41	; 65
    3f76:	6d 89       	ldd	r22, Y+21	; 0x15
    3f78:	7e 89       	ldd	r23, Y+22	; 0x16
    3f7a:	8f 89       	ldd	r24, Y+23	; 0x17
    3f7c:	98 8d       	ldd	r25, Y+24	; 0x18
    3f7e:	ca d2       	rcall	.+1428   	; 0x4514 <__mulsf3>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	8e 01       	movw	r16, r28
    3f86:	03 5a       	subi	r16, 0xA3	; 163
    3f88:	1f 4f       	sbci	r17, 0xFF	; 255
    3f8a:	bc 01       	movw	r22, r24
    3f8c:	cd 01       	movw	r24, r26
    3f8e:	45 d2       	rcall	.+1162   	; 0x441a <__fixunssfsi>
    3f90:	dc 01       	movw	r26, r24
    3f92:	cb 01       	movw	r24, r22
    3f94:	f8 01       	movw	r30, r16
    3f96:	91 83       	std	Z+1, r25	; 0x01
    3f98:	80 83       	st	Z, r24
    3f9a:	24 c0       	rjmp	.+72     	; 0x3fe4 <main+0xb20>
    3f9c:	ce 01       	movw	r24, r28
    3f9e:	81 5a       	subi	r24, 0xA1	; 161
    3fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fa2:	20 e9       	ldi	r18, 0x90	; 144
    3fa4:	31 e0       	ldi	r19, 0x01	; 1
    3fa6:	fc 01       	movw	r30, r24
    3fa8:	31 83       	std	Z+1, r19	; 0x01
    3faa:	20 83       	st	Z, r18
    3fac:	ce 01       	movw	r24, r28
    3fae:	81 5a       	subi	r24, 0xA1	; 161
    3fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb2:	fc 01       	movw	r30, r24
    3fb4:	80 81       	ld	r24, Z
    3fb6:	91 81       	ldd	r25, Z+1	; 0x01
    3fb8:	01 97       	sbiw	r24, 0x01	; 1
    3fba:	f1 f7       	brne	.-4      	; 0x3fb8 <main+0xaf4>
    3fbc:	9e 01       	movw	r18, r28
    3fbe:	21 5a       	subi	r18, 0xA1	; 161
    3fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc2:	f9 01       	movw	r30, r18
    3fc4:	91 83       	std	Z+1, r25	; 0x01
    3fc6:	80 83       	st	Z, r24
    3fc8:	ce 01       	movw	r24, r28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fca:	83 5a       	subi	r24, 0xA3	; 163
    3fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fce:	9e 01       	movw	r18, r28
    3fd0:	23 5a       	subi	r18, 0xA3	; 163
    3fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    3fd4:	f9 01       	movw	r30, r18
    3fd6:	20 81       	ld	r18, Z
    3fd8:	31 81       	ldd	r19, Z+1	; 0x01
    3fda:	21 50       	subi	r18, 0x01	; 1
    3fdc:	31 09       	sbc	r19, r1
    3fde:	fc 01       	movw	r30, r24
    3fe0:	31 83       	std	Z+1, r19	; 0x01
    3fe2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fe4:	ce 01       	movw	r24, r28
    3fe6:	83 5a       	subi	r24, 0xA3	; 163
    3fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    3fea:	fc 01       	movw	r30, r24
    3fec:	80 81       	ld	r24, Z
    3fee:	91 81       	ldd	r25, Z+1	; 0x01
    3ff0:	89 2b       	or	r24, r25
    3ff2:	a1 f6       	brne	.-88     	; 0x3f9c <main+0xad8>
    3ff4:	2b c0       	rjmp	.+86     	; 0x404c <main+0xb88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff6:	8e 01       	movw	r16, r28
    3ff8:	03 5a       	subi	r16, 0xA3	; 163
    3ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    3ffc:	ce 01       	movw	r24, r28
    3ffe:	87 5a       	subi	r24, 0xA7	; 167
    4000:	9f 4f       	sbci	r25, 0xFF	; 255
    4002:	fc 01       	movw	r30, r24
    4004:	60 81       	ld	r22, Z
    4006:	71 81       	ldd	r23, Z+1	; 0x01
    4008:	82 81       	ldd	r24, Z+2	; 0x02
    400a:	93 81       	ldd	r25, Z+3	; 0x03
    400c:	06 d2       	rcall	.+1036   	; 0x441a <__fixunssfsi>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	f8 01       	movw	r30, r16
    4014:	91 83       	std	Z+1, r25	; 0x01
    4016:	80 83       	st	Z, r24
    4018:	ce 01       	movw	r24, r28
    401a:	8f 59       	subi	r24, 0x9F	; 159
    401c:	9f 4f       	sbci	r25, 0xFF	; 255
    401e:	9e 01       	movw	r18, r28
    4020:	23 5a       	subi	r18, 0xA3	; 163
    4022:	3f 4f       	sbci	r19, 0xFF	; 255
    4024:	f9 01       	movw	r30, r18
    4026:	20 81       	ld	r18, Z
    4028:	31 81       	ldd	r19, Z+1	; 0x01
    402a:	fc 01       	movw	r30, r24
    402c:	31 83       	std	Z+1, r19	; 0x01
    402e:	20 83       	st	Z, r18
    4030:	ce 01       	movw	r24, r28
    4032:	8f 59       	subi	r24, 0x9F	; 159
    4034:	9f 4f       	sbci	r25, 0xFF	; 255
    4036:	fc 01       	movw	r30, r24
    4038:	80 81       	ld	r24, Z
    403a:	91 81       	ldd	r25, Z+1	; 0x01
    403c:	01 97       	sbiw	r24, 0x01	; 1
    403e:	f1 f7       	brne	.-4      	; 0x403c <main+0xb78>
    4040:	9e 01       	movw	r18, r28
    4042:	2f 59       	subi	r18, 0x9F	; 159
    4044:	3f 4f       	sbci	r19, 0xFF	; 255
    4046:	f9 01       	movw	r30, r18
    4048:	91 83       	std	Z+1, r25	; 0x01
    404a:	80 83       	st	Z, r24
    404c:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
			clear_screen();

			snake_title();
			

			while(screen == Play_snake)
    4050:	82 30       	cpi	r24, 0x02	; 2
    4052:	09 f4       	brne	.+2      	; 0x4056 <main+0xb92>
    4054:	7f ce       	rjmp	.-770    	; 0x3d54 <main+0x890>
    4056:	41 cd       	rjmp	.-1406   	; 0x3ada <main+0x616>
    4058:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
				//SendCommand01(0x0F, 0x01, 0x02);
				snake_draw_map();
				_delay_ms(80);
			}
		}
		else if(screen == Play_tetris)
    405c:	83 30       	cpi	r24, 0x03	; 3
    405e:	09 f0       	breq	.+2      	; 0x4062 <main+0xb9e>
    4060:	cb c0       	rjmp	.+406    	; 0x41f8 <main+0xd34>
    4062:	87 e5       	ldi	r24, 0x57	; 87
		{
			TIMSK |= (1 << OCIE1A);	//타이머 카운터 1 출력비교 A 매치 인터럽트 인에이블
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	27 e5       	ldi	r18, 0x57	; 87
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	f9 01       	movw	r30, r18
    406c:	20 81       	ld	r18, Z
    406e:	20 61       	ori	r18, 0x10	; 16
    4070:	fc 01       	movw	r30, r24
    4072:	20 83       	st	Z, r18
    4074:	1e 86       	std	Y+14, r1	; 0x0e


			for (int i = 0; i < 31; i++ ) main_board[i] = 0x801;	//메인보드 초기화
    4076:	1d 86       	std	Y+13, r1	; 0x0d
    4078:	17 c0       	rjmp	.+46     	; 0x40a8 <main+0xbe4>
    407a:	8d 85       	ldd	r24, Y+13	; 0x0d
    407c:	9e 85       	ldd	r25, Y+14	; 0x0e
    407e:	88 0f       	add	r24, r24
    4080:	99 1f       	adc	r25, r25
    4082:	88 0f       	add	r24, r24
    4084:	99 1f       	adc	r25, r25
    4086:	9c 01       	movw	r18, r24
    4088:	24 56       	subi	r18, 0x64	; 100
    408a:	38 4f       	sbci	r19, 0xF8	; 248
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	98 e0       	ldi	r25, 0x08	; 8
    4090:	a0 e0       	ldi	r26, 0x00	; 0
    4092:	b0 e0       	ldi	r27, 0x00	; 0
    4094:	f9 01       	movw	r30, r18
    4096:	80 83       	st	Z, r24
    4098:	91 83       	std	Z+1, r25	; 0x01
    409a:	a2 83       	std	Z+2, r26	; 0x02
    409c:	b3 83       	std	Z+3, r27	; 0x03
    409e:	8d 85       	ldd	r24, Y+13	; 0x0d
    40a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    40a2:	01 96       	adiw	r24, 0x01	; 1
    40a4:	9e 87       	std	Y+14, r25	; 0x0e
    40a6:	8d 87       	std	Y+13, r24	; 0x0d
    40a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    40aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    40ac:	4f 97       	sbiw	r24, 0x1f	; 31
    40ae:	2c f3       	brlt	.-54     	; 0x407a <main+0xbb6>
    40b0:	8f ef       	ldi	r24, 0xFF	; 255
			main_board[31] = 0xFFF;
    40b2:	9f e0       	ldi	r25, 0x0F	; 15
    40b4:	a0 e0       	ldi	r26, 0x00	; 0
    40b6:	b0 e0       	ldi	r27, 0x00	; 0
    40b8:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <main_board+0x7c>
    40bc:	90 93 19 08 	sts	0x0819, r25	; 0x800819 <main_board+0x7d>
    40c0:	a0 93 1a 08 	sts	0x081A, r26	; 0x80081a <main_board+0x7e>
    40c4:	b0 93 1b 08 	sts	0x081B, r27	; 0x80081b <main_board+0x7f>
    40c8:	91 c0       	rjmp	.+290    	; 0x41ec <main+0xd28>




			while(screen == Play_tetris)	//게임종료 플레그가 꺼저있을동안 반복
    40ca:	18 8a       	std	Y+16, r1	; 0x10
			{
				for(int i = 0; i < 31; i++)
    40cc:	1f 86       	std	Y+15, r1	; 0x0f
    40ce:	53 c0       	rjmp	.+166    	; 0x4176 <main+0xcb2>
    40d0:	8f 85       	ldd	r24, Y+15	; 0x0f
				{
					if(main_board[i] == 0xFFF)
    40d2:	98 89       	ldd	r25, Y+16	; 0x10
    40d4:	88 0f       	add	r24, r24
    40d6:	99 1f       	adc	r25, r25
    40d8:	88 0f       	add	r24, r24
    40da:	99 1f       	adc	r25, r25
    40dc:	84 56       	subi	r24, 0x64	; 100
    40de:	98 4f       	sbci	r25, 0xF8	; 248
    40e0:	fc 01       	movw	r30, r24
    40e2:	80 81       	ld	r24, Z
    40e4:	91 81       	ldd	r25, Z+1	; 0x01
    40e6:	a2 81       	ldd	r26, Z+2	; 0x02
    40e8:	b3 81       	ldd	r27, Z+3	; 0x03
    40ea:	8f 3f       	cpi	r24, 0xFF	; 255
    40ec:	9f 40       	sbci	r25, 0x0F	; 15
    40ee:	a1 05       	cpc	r26, r1
    40f0:	b1 05       	cpc	r27, r1
    40f2:	e1 f5       	brne	.+120    	; 0x416c <main+0xca8>
    40f4:	8f 85       	ldd	r24, Y+15	; 0x0f
					//1줄이 모두 완성되어서 깨질 줄이 있는지 확인
					{
						main_board[i] = 0x801;
    40f6:	98 89       	ldd	r25, Y+16	; 0x10
    40f8:	88 0f       	add	r24, r24
    40fa:	99 1f       	adc	r25, r25
    40fc:	88 0f       	add	r24, r24
    40fe:	99 1f       	adc	r25, r25
    4100:	9c 01       	movw	r18, r24
    4102:	24 56       	subi	r18, 0x64	; 100
    4104:	38 4f       	sbci	r19, 0xF8	; 248
    4106:	81 e0       	ldi	r24, 0x01	; 1
    4108:	98 e0       	ldi	r25, 0x08	; 8
    410a:	a0 e0       	ldi	r26, 0x00	; 0
    410c:	b0 e0       	ldi	r27, 0x00	; 0
    410e:	f9 01       	movw	r30, r18
    4110:	80 83       	st	Z, r24
    4112:	91 83       	std	Z+1, r25	; 0x01
    4114:	a2 83       	std	Z+2, r26	; 0x02
    4116:	b3 83       	std	Z+3, r27	; 0x03
    4118:	8f 85       	ldd	r24, Y+15	; 0x0f
						for(int k = i; k > 0; k--)
    411a:	98 89       	ldd	r25, Y+16	; 0x10
    411c:	9a 8b       	std	Y+18, r25	; 0x12
    411e:	89 8b       	std	Y+17, r24	; 0x11
    4120:	20 c0       	rjmp	.+64     	; 0x4162 <main+0xc9e>
    4122:	89 89       	ldd	r24, Y+17	; 0x11
						{
							main_board[k] = main_board[k - 1];	//깨진 줄의 위에 줄들 아래로 이동(행렬상 열 증가)
    4124:	9a 89       	ldd	r25, Y+18	; 0x12
    4126:	01 97       	sbiw	r24, 0x01	; 1
    4128:	88 0f       	add	r24, r24
    412a:	99 1f       	adc	r25, r25
    412c:	88 0f       	add	r24, r24
    412e:	99 1f       	adc	r25, r25
    4130:	84 56       	subi	r24, 0x64	; 100
    4132:	98 4f       	sbci	r25, 0xF8	; 248
    4134:	fc 01       	movw	r30, r24
    4136:	80 81       	ld	r24, Z
    4138:	91 81       	ldd	r25, Z+1	; 0x01
    413a:	a2 81       	ldd	r26, Z+2	; 0x02
    413c:	b3 81       	ldd	r27, Z+3	; 0x03
    413e:	29 89       	ldd	r18, Y+17	; 0x11
    4140:	3a 89       	ldd	r19, Y+18	; 0x12
    4142:	22 0f       	add	r18, r18
    4144:	33 1f       	adc	r19, r19
    4146:	22 0f       	add	r18, r18
    4148:	33 1f       	adc	r19, r19
    414a:	24 56       	subi	r18, 0x64	; 100
    414c:	38 4f       	sbci	r19, 0xF8	; 248
    414e:	f9 01       	movw	r30, r18
    4150:	80 83       	st	Z, r24
    4152:	91 83       	std	Z+1, r25	; 0x01
    4154:	a2 83       	std	Z+2, r26	; 0x02
    4156:	b3 83       	std	Z+3, r27	; 0x03
    4158:	89 89       	ldd	r24, Y+17	; 0x11
				{
					if(main_board[i] == 0xFFF)
					//1줄이 모두 완성되어서 깨질 줄이 있는지 확인
					{
						main_board[i] = 0x801;
						for(int k = i; k > 0; k--)
    415a:	9a 89       	ldd	r25, Y+18	; 0x12
    415c:	01 97       	sbiw	r24, 0x01	; 1
    415e:	9a 8b       	std	Y+18, r25	; 0x12
    4160:	89 8b       	std	Y+17, r24	; 0x11
    4162:	89 89       	ldd	r24, Y+17	; 0x11
    4164:	9a 89       	ldd	r25, Y+18	; 0x12
    4166:	18 16       	cp	r1, r24
    4168:	19 06       	cpc	r1, r25
    416a:	dc f2       	brlt	.-74     	; 0x4122 <main+0xc5e>
    416c:	8f 85       	ldd	r24, Y+15	; 0x0f



			while(screen == Play_tetris)	//게임종료 플레그가 꺼저있을동안 반복
			{
				for(int i = 0; i < 31; i++)
    416e:	98 89       	ldd	r25, Y+16	; 0x10
    4170:	01 96       	adiw	r24, 0x01	; 1
    4172:	98 8b       	std	Y+16, r25	; 0x10
    4174:	8f 87       	std	Y+15, r24	; 0x0f
    4176:	8f 85       	ldd	r24, Y+15	; 0x0f
    4178:	98 89       	ldd	r25, Y+16	; 0x10
    417a:	4f 97       	sbiw	r24, 0x1f	; 31
    417c:	0c f4       	brge	.+2      	; 0x4180 <main+0xcbc>
    417e:	a8 cf       	rjmp	.-176    	; 0x40d0 <main+0xc0c>
    4180:	1c 8a       	std	Y+20, r1	; 0x14
							main_board[k] = main_board[k - 1];	//깨진 줄의 위에 줄들 아래로 이동(행렬상 열 증가)
						}
					}
				}

				for(int i = 0; i < 32; i++)
    4182:	1b 8a       	std	Y+19, r1	; 0x13
    4184:	1f c0       	rjmp	.+62     	; 0x41c4 <main+0xd00>
    4186:	8b 89       	ldd	r24, Y+19	; 0x13
				{
					game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
    4188:	9c 89       	ldd	r25, Y+20	; 0x14
    418a:	88 0f       	add	r24, r24
    418c:	99 1f       	adc	r25, r25
    418e:	88 0f       	add	r24, r24
    4190:	99 1f       	adc	r25, r25
    4192:	84 56       	subi	r24, 0x64	; 100
    4194:	98 4f       	sbci	r25, 0xF8	; 248
    4196:	fc 01       	movw	r30, r24
    4198:	80 81       	ld	r24, Z
    419a:	91 81       	ldd	r25, Z+1	; 0x01
    419c:	a2 81       	ldd	r26, Z+2	; 0x02
    419e:	b3 81       	ldd	r27, Z+3	; 0x03
    41a0:	2b 89       	ldd	r18, Y+19	; 0x13
    41a2:	3c 89       	ldd	r19, Y+20	; 0x14
    41a4:	22 0f       	add	r18, r18
    41a6:	33 1f       	adc	r19, r19
    41a8:	22 0f       	add	r18, r18
    41aa:	33 1f       	adc	r19, r19
    41ac:	21 5c       	subi	r18, 0xC1	; 193
    41ae:	37 4f       	sbci	r19, 0xF7	; 247
    41b0:	f9 01       	movw	r30, r18
    41b2:	80 83       	st	Z, r24
    41b4:	91 83       	std	Z+1, r25	; 0x01
    41b6:	a2 83       	std	Z+2, r26	; 0x02
    41b8:	b3 83       	std	Z+3, r27	; 0x03
    41ba:	8b 89       	ldd	r24, Y+19	; 0x13
							main_board[k] = main_board[k - 1];	//깨진 줄의 위에 줄들 아래로 이동(행렬상 열 증가)
						}
					}
				}

				for(int i = 0; i < 32; i++)
    41bc:	9c 89       	ldd	r25, Y+20	; 0x14
    41be:	01 96       	adiw	r24, 0x01	; 1
    41c0:	9c 8b       	std	Y+20, r25	; 0x14
    41c2:	8b 8b       	std	Y+19, r24	; 0x13
    41c4:	8b 89       	ldd	r24, Y+19	; 0x13
    41c6:	9c 89       	ldd	r25, Y+20	; 0x14
    41c8:	80 97       	sbiw	r24, 0x20	; 32
    41ca:	ec f2       	brlt	.-70     	; 0x4186 <main+0xcc2>
    41cc:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <NewTetriminos>
				{
					game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
				}
				
				NewTetriminos();	//새로운 테트리미노스 생성
    41d0:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
				if(screen != Play_tetris) break;
    41d4:	83 30       	cpi	r24, 0x03	; 3
    41d6:	09 f0       	breq	.+2      	; 0x41da <main+0xd16>
    41d8:	b9 c0       	rjmp	.+370    	; 0x434c <main+0xe88>
    41da:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <NextTetriminos>
				NextTetriminos();
    41de:	02 c0       	rjmp	.+4      	; 0x41e4 <main+0xd20>
				while(new_block == 0)	//새로운 블록 프레그 꺼져있는 동안 반복
    41e0:	0e 94 66 14 	call	0x28cc	; 0x28cc <Tetris_draw_map>
				{
					Tetris_draw_map();	//반영된 변화하는 보드 화면으로 출력
    41e4:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <new_block>
				}
				
				NewTetriminos();	//새로운 테트리미노스 생성
				if(screen != Play_tetris) break;
				NextTetriminos();
				while(new_block == 0)	//새로운 블록 프레그 꺼져있는 동안 반복
    41e8:	88 23       	and	r24, r24
    41ea:	d1 f3       	breq	.-12     	; 0x41e0 <main+0xd1c>
    41ec:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
			main_board[31] = 0xFFF;




			while(screen == Play_tetris)	//게임종료 플레그가 꺼저있을동안 반복
    41f0:	83 30       	cpi	r24, 0x03	; 3
    41f2:	09 f4       	brne	.+2      	; 0x41f6 <main+0xd32>
    41f4:	6a cf       	rjmp	.-300    	; 0x40ca <main+0xc06>
    41f6:	71 cc       	rjmp	.-1822   	; 0x3ada <main+0x616>
    41f8:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
				{
					Tetris_draw_map();	//반영된 변화하는 보드 화면으로 출력
				}
			}
		}
		else if(screen == Over_snake)
    41fc:	84 30       	cpi	r24, 0x04	; 4
    41fe:	09 f0       	breq	.+2      	; 0x4202 <main+0xd3e>
    4200:	4f c0       	rjmp	.+158    	; 0x42a0 <main+0xddc>
    4202:	0e 94 16 05 	call	0xa2c	; 0xa2c <clear_screen>
		{
			clear_screen();
    4206:	44 c0       	rjmp	.+136    	; 0x4290 <main+0xdcc>
			while(screen == Over_snake)
    4208:	8d ee       	ldi	r24, 0xED	; 237
			{
				oled_msg(0, 5, " SNAKE GAME");
    420a:	92 e0       	ldi	r25, 0x02	; 2
    420c:	89 2f       	mov	r24, r25
    420e:	8f 93       	push	r24
    4210:	8d ee       	ldi	r24, 0xED	; 237
    4212:	92 e0       	ldi	r25, 0x02	; 2
    4214:	8f 93       	push	r24
    4216:	1f 92       	push	r1
    4218:	85 e0       	ldi	r24, 0x05	; 5
    421a:	8f 93       	push	r24
    421c:	1f 92       	push	r1
    421e:	1f 92       	push	r1
    4220:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    4224:	0f 90       	pop	r0
    4226:	0f 90       	pop	r0
    4228:	0f 90       	pop	r0
    422a:	0f 90       	pop	r0
    422c:	0f 90       	pop	r0
    422e:	0f 90       	pop	r0
    4230:	89 ef       	ldi	r24, 0xF9	; 249
				oled_msg(3, 5, "  G A M E ");
    4232:	92 e0       	ldi	r25, 0x02	; 2
    4234:	89 2f       	mov	r24, r25
    4236:	8f 93       	push	r24
    4238:	89 ef       	ldi	r24, 0xF9	; 249
    423a:	92 e0       	ldi	r25, 0x02	; 2
    423c:	8f 93       	push	r24
    423e:	1f 92       	push	r1
    4240:	85 e0       	ldi	r24, 0x05	; 5
    4242:	8f 93       	push	r24
    4244:	1f 92       	push	r1
    4246:	83 e0       	ldi	r24, 0x03	; 3
    4248:	8f 93       	push	r24
    424a:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    424e:	0f 90       	pop	r0
    4250:	0f 90       	pop	r0
    4252:	0f 90       	pop	r0
    4254:	0f 90       	pop	r0
    4256:	0f 90       	pop	r0
    4258:	0f 90       	pop	r0
    425a:	84 e0       	ldi	r24, 0x04	; 4
				oled_msg(6, 5, "  O V E R ");
    425c:	93 e0       	ldi	r25, 0x03	; 3
    425e:	89 2f       	mov	r24, r25
    4260:	8f 93       	push	r24
    4262:	84 e0       	ldi	r24, 0x04	; 4
    4264:	93 e0       	ldi	r25, 0x03	; 3
    4266:	8f 93       	push	r24
    4268:	1f 92       	push	r1
    426a:	85 e0       	ldi	r24, 0x05	; 5
    426c:	8f 93       	push	r24
    426e:	1f 92       	push	r1
    4270:	86 e0       	ldi	r24, 0x06	; 6
    4272:	8f 93       	push	r24
    4274:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    4278:	0f 90       	pop	r0
    427a:	0f 90       	pop	r0
    427c:	0f 90       	pop	r0
    427e:	0f 90       	pop	r0
    4280:	0f 90       	pop	r0
    4282:	0f 90       	pop	r0
    4284:	80 e0       	ldi	r24, 0x00	; 0
				ssd1306_set_page_start(0);
    4286:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    428a:	80 e0       	ldi	r24, 0x00	; 0
				ssd1306_set_column_addr(0);
    428c:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    4290:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
			}
		}
		else if(screen == Over_snake)
		{
			clear_screen();
			while(screen == Over_snake)
    4294:	84 30       	cpi	r24, 0x04	; 4
    4296:	09 f4       	brne	.+2      	; 0x429a <main+0xdd6>
    4298:	b7 cf       	rjmp	.-146    	; 0x4208 <main+0xd44>
    429a:	0e 94 16 05 	call	0xa2c	; 0xa2c <clear_screen>
				oled_msg(3, 5, "  G A M E ");
				oled_msg(6, 5, "  O V E R ");
				ssd1306_set_page_start(0);
				ssd1306_set_column_addr(0);
			}
			clear_screen();
    429e:	1d cc       	rjmp	.-1990   	; 0x3ada <main+0x616>
    42a0:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
		}
		else if(screen == Over_tetris)
    42a4:	85 30       	cpi	r24, 0x05	; 5
    42a6:	09 f0       	breq	.+2      	; 0x42aa <main+0xde6>
    42a8:	18 cc       	rjmp	.-2000   	; 0x3ada <main+0x616>
    42aa:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <game_over>
		{
			game_over = 0;
    42ae:	0e 94 16 05 	call	0xa2c	; 0xa2c <clear_screen>
			clear_screen();
    42b2:	44 c0       	rjmp	.+136    	; 0x433c <main+0xe78>
			while(screen == Over_tetris)
    42b4:	8f e0       	ldi	r24, 0x0F	; 15
			{
				oled_msg(0, 5, "   TETRIS ");
    42b6:	93 e0       	ldi	r25, 0x03	; 3
    42b8:	89 2f       	mov	r24, r25
    42ba:	8f 93       	push	r24
    42bc:	8f e0       	ldi	r24, 0x0F	; 15
    42be:	93 e0       	ldi	r25, 0x03	; 3
    42c0:	8f 93       	push	r24
    42c2:	1f 92       	push	r1
    42c4:	85 e0       	ldi	r24, 0x05	; 5
    42c6:	8f 93       	push	r24
    42c8:	1f 92       	push	r1
    42ca:	1f 92       	push	r1
    42cc:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    42d0:	0f 90       	pop	r0
    42d2:	0f 90       	pop	r0
    42d4:	0f 90       	pop	r0
    42d6:	0f 90       	pop	r0
    42d8:	0f 90       	pop	r0
    42da:	0f 90       	pop	r0
    42dc:	89 ef       	ldi	r24, 0xF9	; 249
				oled_msg(3, 5, "  G A M E ");
    42de:	92 e0       	ldi	r25, 0x02	; 2
    42e0:	89 2f       	mov	r24, r25
    42e2:	8f 93       	push	r24
    42e4:	89 ef       	ldi	r24, 0xF9	; 249
    42e6:	92 e0       	ldi	r25, 0x02	; 2
    42e8:	8f 93       	push	r24
    42ea:	1f 92       	push	r1
    42ec:	85 e0       	ldi	r24, 0x05	; 5
    42ee:	8f 93       	push	r24
    42f0:	1f 92       	push	r1
    42f2:	83 e0       	ldi	r24, 0x03	; 3
    42f4:	8f 93       	push	r24
    42f6:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    42fa:	0f 90       	pop	r0
    42fc:	0f 90       	pop	r0
    42fe:	0f 90       	pop	r0
    4300:	0f 90       	pop	r0
    4302:	0f 90       	pop	r0
    4304:	0f 90       	pop	r0
    4306:	84 e0       	ldi	r24, 0x04	; 4
				oled_msg(6, 5, "  O V E R ");
    4308:	93 e0       	ldi	r25, 0x03	; 3
    430a:	89 2f       	mov	r24, r25
    430c:	8f 93       	push	r24
    430e:	84 e0       	ldi	r24, 0x04	; 4
    4310:	93 e0       	ldi	r25, 0x03	; 3
    4312:	8f 93       	push	r24
    4314:	1f 92       	push	r1
    4316:	85 e0       	ldi	r24, 0x05	; 5
    4318:	8f 93       	push	r24
    431a:	1f 92       	push	r1
    431c:	86 e0       	ldi	r24, 0x06	; 6
    431e:	8f 93       	push	r24
    4320:	0e 94 41 05 	call	0xa82	; 0xa82 <oled_msg>
    4324:	0f 90       	pop	r0
    4326:	0f 90       	pop	r0
    4328:	0f 90       	pop	r0
    432a:	0f 90       	pop	r0
    432c:	0f 90       	pop	r0
    432e:	0f 90       	pop	r0
    4330:	80 e0       	ldi	r24, 0x00	; 0
				ssd1306_set_page_start(0);
    4332:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
    4336:	80 e0       	ldi	r24, 0x00	; 0
				ssd1306_set_column_addr(0);
    4338:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
    433c:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <screen>
		}
		else if(screen == Over_tetris)
		{
			game_over = 0;
			clear_screen();
			while(screen == Over_tetris)
    4340:	85 30       	cpi	r24, 0x05	; 5
    4342:	09 f4       	brne	.+2      	; 0x4346 <main+0xe82>
    4344:	b7 cf       	rjmp	.-146    	; 0x42b4 <main+0xdf0>
    4346:	0e 94 16 05 	call	0xa2c	; 0xa2c <clear_screen>
				oled_msg(3, 5, "  G A M E ");
				oled_msg(6, 5, "  O V E R ");
				ssd1306_set_page_start(0);
				ssd1306_set_column_addr(0);
			}
			clear_screen();
    434a:	c7 cb       	rjmp	.-2162   	; 0x3ada <main+0x616>
    434c:	00 00       	nop
				{
					game_board[i] = main_board[i];	//굳어진후 저장된 보드를 변화하는 보드로 복사
				}
				
				NewTetriminos();	//새로운 테트리미노스 생성
				if(screen != Play_tetris) break;
    434e:	c5 cb       	rjmp	.-2166   	; 0x3ada <main+0x616>

00004350 <snake_clear_map>:
				ssd1306_set_page_start(0);
				ssd1306_set_column_addr(0);
			}
			clear_screen();
		}
	}
    4350:	cf 93       	push	r28
}

void snake_clear_map()
{
    4352:	df 93       	push	r29
    4354:	00 d0       	rcall	.+0      	; 0x4356 <snake_clear_map+0x6>
    4356:	00 d0       	rcall	.+0      	; 0x4358 <snake_clear_map+0x8>
    4358:	00 d0       	rcall	.+0      	; 0x435a <snake_clear_map+0xa>
    435a:	cd b7       	in	r28, 0x3d	; 61
    435c:	de b7       	in	r29, 0x3e	; 62
	for(int i = 1; i < 127; i++)
    435e:	81 e0       	ldi	r24, 0x01	; 1
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	9a 83       	std	Y+2, r25	; 0x02
    4364:	89 83       	std	Y+1, r24	; 0x01
    4366:	1f c0       	rjmp	.+62     	; 0x43a6 <snake_clear_map+0x56>
	{
		
		for(int j = 3; j < 7; j++)
    4368:	83 e0       	ldi	r24, 0x03	; 3
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	9c 83       	std	Y+4, r25	; 0x04
    436e:	8b 83       	std	Y+3, r24	; 0x03
    4370:	11 c0       	rjmp	.+34     	; 0x4394 <snake_clear_map+0x44>
		{
			ssd1306_set_page_start(j);
    4372:	8b 81       	ldd	r24, Y+3	; 0x03
    4374:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
			ssd1306_set_column_addr(i);
    4378:	89 81       	ldd	r24, Y+1	; 0x01
    437a:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
			ssd1306_data(blank, 1);
    437e:	61 e0       	ldi	r22, 0x01	; 1
    4380:	70 e0       	ldi	r23, 0x00	; 0
    4382:	8b e9       	ldi	r24, 0x9B	; 155
    4384:	97 e0       	ldi	r25, 0x07	; 7
    4386:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
void snake_clear_map()
{
	for(int i = 1; i < 127; i++)
	{
		
		for(int j = 3; j < 7; j++)
    438a:	8b 81       	ldd	r24, Y+3	; 0x03
    438c:	9c 81       	ldd	r25, Y+4	; 0x04
    438e:	01 96       	adiw	r24, 0x01	; 1
    4390:	9c 83       	std	Y+4, r25	; 0x04
    4392:	8b 83       	std	Y+3, r24	; 0x03
    4394:	8b 81       	ldd	r24, Y+3	; 0x03
    4396:	9c 81       	ldd	r25, Y+4	; 0x04
    4398:	07 97       	sbiw	r24, 0x07	; 7
    439a:	5c f3       	brlt	.-42     	; 0x4372 <snake_clear_map+0x22>
	}
}

void snake_clear_map()
{
	for(int i = 1; i < 127; i++)
    439c:	89 81       	ldd	r24, Y+1	; 0x01
    439e:	9a 81       	ldd	r25, Y+2	; 0x02
    43a0:	01 96       	adiw	r24, 0x01	; 1
    43a2:	9a 83       	std	Y+2, r25	; 0x02
    43a4:	89 83       	std	Y+1, r24	; 0x01
    43a6:	89 81       	ldd	r24, Y+1	; 0x01
    43a8:	9a 81       	ldd	r25, Y+2	; 0x02
    43aa:	8f 37       	cpi	r24, 0x7F	; 127
    43ac:	91 05       	cpc	r25, r1
    43ae:	e4 f2       	brlt	.-72     	; 0x4368 <snake_clear_map+0x18>
			ssd1306_set_column_addr(i);
			ssd1306_data(blank, 1);
		}
	}

	for(int i = 1; i < 127; i++)
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	9e 83       	std	Y+6, r25	; 0x06
    43b6:	8d 83       	std	Y+5, r24	; 0x05
    43b8:	1d c0       	rjmp	.+58     	; 0x43f4 <snake_clear_map+0xa4>
	{
		ssd1306_set_page_start(2);
    43ba:	82 e0       	ldi	r24, 0x02	; 2
    43bc:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    43c0:	8d 81       	ldd	r24, Y+5	; 0x05
    43c2:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
		ssd1306_data(horizon1, 1);
    43c6:	61 e0       	ldi	r22, 0x01	; 1
    43c8:	70 e0       	ldi	r23, 0x00	; 0
    43ca:	88 e0       	ldi	r24, 0x08	; 8
    43cc:	91 e0       	ldi	r25, 0x01	; 1
    43ce:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
		ssd1306_set_page_start(7);
    43d2:	87 e0       	ldi	r24, 0x07	; 7
    43d4:	0e 94 15 04 	call	0x82a	; 0x82a <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    43d8:	8d 81       	ldd	r24, Y+5	; 0x05
    43da:	0e 94 28 04 	call	0x850	; 0x850 <ssd1306_set_column_addr>
		ssd1306_data(horizon2, 1);
    43de:	61 e0       	ldi	r22, 0x01	; 1
    43e0:	70 e0       	ldi	r23, 0x00	; 0
    43e2:	89 e0       	ldi	r24, 0x09	; 9
    43e4:	91 e0       	ldi	r25, 0x01	; 1
    43e6:	0e 94 93 03 	call	0x726	; 0x726 <ssd1306_data>
			ssd1306_set_column_addr(i);
			ssd1306_data(blank, 1);
		}
	}

	for(int i = 1; i < 127; i++)
    43ea:	8d 81       	ldd	r24, Y+5	; 0x05
    43ec:	9e 81       	ldd	r25, Y+6	; 0x06
    43ee:	01 96       	adiw	r24, 0x01	; 1
    43f0:	9e 83       	std	Y+6, r25	; 0x06
    43f2:	8d 83       	std	Y+5, r24	; 0x05
    43f4:	8d 81       	ldd	r24, Y+5	; 0x05
    43f6:	9e 81       	ldd	r25, Y+6	; 0x06
    43f8:	8f 37       	cpi	r24, 0x7F	; 127
    43fa:	91 05       	cpc	r25, r1
    43fc:	f4 f2       	brlt	.-68     	; 0x43ba <snake_clear_map+0x6a>
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
    43fe:	00 00       	nop
    4400:	26 96       	adiw	r28, 0x06	; 6
    4402:	0f b6       	in	r0, 0x3f	; 63
    4404:	f8 94       	cli
    4406:	de bf       	out	0x3e, r29	; 62
    4408:	0f be       	out	0x3f, r0	; 63
    440a:	cd bf       	out	0x3d, r28	; 61
    440c:	df 91       	pop	r29
    440e:	cf 91       	pop	r28
    4410:	08 95       	ret

00004412 <__cmpsf2>:
    4412:	2f d0       	rcall	.+94     	; 0x4472 <__fp_cmp>
    4414:	08 f4       	brcc	.+2      	; 0x4418 <__cmpsf2+0x6>
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	08 95       	ret

0000441a <__fixunssfsi>:
    441a:	57 d0       	rcall	.+174    	; 0x44ca <__fp_splitA>
    441c:	88 f0       	brcs	.+34     	; 0x4440 <__fixunssfsi+0x26>
    441e:	9f 57       	subi	r25, 0x7F	; 127
    4420:	90 f0       	brcs	.+36     	; 0x4446 <__fixunssfsi+0x2c>
    4422:	b9 2f       	mov	r27, r25
    4424:	99 27       	eor	r25, r25
    4426:	b7 51       	subi	r27, 0x17	; 23
    4428:	a0 f0       	brcs	.+40     	; 0x4452 <__fixunssfsi+0x38>
    442a:	d1 f0       	breq	.+52     	; 0x4460 <__fixunssfsi+0x46>
    442c:	66 0f       	add	r22, r22
    442e:	77 1f       	adc	r23, r23
    4430:	88 1f       	adc	r24, r24
    4432:	99 1f       	adc	r25, r25
    4434:	1a f0       	brmi	.+6      	; 0x443c <__fixunssfsi+0x22>
    4436:	ba 95       	dec	r27
    4438:	c9 f7       	brne	.-14     	; 0x442c <__fixunssfsi+0x12>
    443a:	12 c0       	rjmp	.+36     	; 0x4460 <__fixunssfsi+0x46>
    443c:	b1 30       	cpi	r27, 0x01	; 1
    443e:	81 f0       	breq	.+32     	; 0x4460 <__fixunssfsi+0x46>
    4440:	5e d0       	rcall	.+188    	; 0x44fe <__fp_zero>
    4442:	b1 e0       	ldi	r27, 0x01	; 1
    4444:	08 95       	ret
    4446:	5b c0       	rjmp	.+182    	; 0x44fe <__fp_zero>
    4448:	67 2f       	mov	r22, r23
    444a:	78 2f       	mov	r23, r24
    444c:	88 27       	eor	r24, r24
    444e:	b8 5f       	subi	r27, 0xF8	; 248
    4450:	39 f0       	breq	.+14     	; 0x4460 <__fixunssfsi+0x46>
    4452:	b9 3f       	cpi	r27, 0xF9	; 249
    4454:	cc f3       	brlt	.-14     	; 0x4448 <__fixunssfsi+0x2e>
    4456:	86 95       	lsr	r24
    4458:	77 95       	ror	r23
    445a:	67 95       	ror	r22
    445c:	b3 95       	inc	r27
    445e:	d9 f7       	brne	.-10     	; 0x4456 <__fixunssfsi+0x3c>
    4460:	3e f4       	brtc	.+14     	; 0x4470 <__fixunssfsi+0x56>
    4462:	90 95       	com	r25
    4464:	80 95       	com	r24
    4466:	70 95       	com	r23
    4468:	61 95       	neg	r22
    446a:	7f 4f       	sbci	r23, 0xFF	; 255
    446c:	8f 4f       	sbci	r24, 0xFF	; 255
    446e:	9f 4f       	sbci	r25, 0xFF	; 255
    4470:	08 95       	ret

00004472 <__fp_cmp>:
    4472:	99 0f       	add	r25, r25
    4474:	00 08       	sbc	r0, r0
    4476:	55 0f       	add	r21, r21
    4478:	aa 0b       	sbc	r26, r26
    447a:	e0 e8       	ldi	r30, 0x80	; 128
    447c:	fe ef       	ldi	r31, 0xFE	; 254
    447e:	16 16       	cp	r1, r22
    4480:	17 06       	cpc	r1, r23
    4482:	e8 07       	cpc	r30, r24
    4484:	f9 07       	cpc	r31, r25
    4486:	c0 f0       	brcs	.+48     	; 0x44b8 <__fp_cmp+0x46>
    4488:	12 16       	cp	r1, r18
    448a:	13 06       	cpc	r1, r19
    448c:	e4 07       	cpc	r30, r20
    448e:	f5 07       	cpc	r31, r21
    4490:	98 f0       	brcs	.+38     	; 0x44b8 <__fp_cmp+0x46>
    4492:	62 1b       	sub	r22, r18
    4494:	73 0b       	sbc	r23, r19
    4496:	84 0b       	sbc	r24, r20
    4498:	95 0b       	sbc	r25, r21
    449a:	39 f4       	brne	.+14     	; 0x44aa <__fp_cmp+0x38>
    449c:	0a 26       	eor	r0, r26
    449e:	61 f0       	breq	.+24     	; 0x44b8 <__fp_cmp+0x46>
    44a0:	23 2b       	or	r18, r19
    44a2:	24 2b       	or	r18, r20
    44a4:	25 2b       	or	r18, r21
    44a6:	21 f4       	brne	.+8      	; 0x44b0 <__fp_cmp+0x3e>
    44a8:	08 95       	ret
    44aa:	0a 26       	eor	r0, r26
    44ac:	09 f4       	brne	.+2      	; 0x44b0 <__fp_cmp+0x3e>
    44ae:	a1 40       	sbci	r26, 0x01	; 1
    44b0:	a6 95       	lsr	r26
    44b2:	8f ef       	ldi	r24, 0xFF	; 255
    44b4:	81 1d       	adc	r24, r1
    44b6:	81 1d       	adc	r24, r1
    44b8:	08 95       	ret

000044ba <__fp_split3>:
    44ba:	57 fd       	sbrc	r21, 7
    44bc:	90 58       	subi	r25, 0x80	; 128
    44be:	44 0f       	add	r20, r20
    44c0:	55 1f       	adc	r21, r21
    44c2:	59 f0       	breq	.+22     	; 0x44da <__fp_splitA+0x10>
    44c4:	5f 3f       	cpi	r21, 0xFF	; 255
    44c6:	71 f0       	breq	.+28     	; 0x44e4 <__fp_splitA+0x1a>
    44c8:	47 95       	ror	r20

000044ca <__fp_splitA>:
    44ca:	88 0f       	add	r24, r24
    44cc:	97 fb       	bst	r25, 7
    44ce:	99 1f       	adc	r25, r25
    44d0:	61 f0       	breq	.+24     	; 0x44ea <__fp_splitA+0x20>
    44d2:	9f 3f       	cpi	r25, 0xFF	; 255
    44d4:	79 f0       	breq	.+30     	; 0x44f4 <__fp_splitA+0x2a>
    44d6:	87 95       	ror	r24
    44d8:	08 95       	ret
    44da:	12 16       	cp	r1, r18
    44dc:	13 06       	cpc	r1, r19
    44de:	14 06       	cpc	r1, r20
    44e0:	55 1f       	adc	r21, r21
    44e2:	f2 cf       	rjmp	.-28     	; 0x44c8 <__fp_split3+0xe>
    44e4:	46 95       	lsr	r20
    44e6:	f1 df       	rcall	.-30     	; 0x44ca <__fp_splitA>
    44e8:	08 c0       	rjmp	.+16     	; 0x44fa <__fp_splitA+0x30>
    44ea:	16 16       	cp	r1, r22
    44ec:	17 06       	cpc	r1, r23
    44ee:	18 06       	cpc	r1, r24
    44f0:	99 1f       	adc	r25, r25
    44f2:	f1 cf       	rjmp	.-30     	; 0x44d6 <__fp_splitA+0xc>
    44f4:	86 95       	lsr	r24
    44f6:	71 05       	cpc	r23, r1
    44f8:	61 05       	cpc	r22, r1
    44fa:	08 94       	sec
    44fc:	08 95       	ret

000044fe <__fp_zero>:
    44fe:	e8 94       	clt

00004500 <__fp_szero>:
    4500:	bb 27       	eor	r27, r27
    4502:	66 27       	eor	r22, r22
    4504:	77 27       	eor	r23, r23
    4506:	cb 01       	movw	r24, r22
    4508:	97 f9       	bld	r25, 7
    450a:	08 95       	ret

0000450c <__gesf2>:
    450c:	b2 df       	rcall	.-156    	; 0x4472 <__fp_cmp>
    450e:	08 f4       	brcc	.+2      	; 0x4512 <__gesf2+0x6>
    4510:	8f ef       	ldi	r24, 0xFF	; 255
    4512:	08 95       	ret

00004514 <__mulsf3>:
    4514:	0b d0       	rcall	.+22     	; 0x452c <__mulsf3x>
    4516:	78 c0       	rjmp	.+240    	; 0x4608 <__fp_round>
    4518:	69 d0       	rcall	.+210    	; 0x45ec <__fp_pscA>
    451a:	28 f0       	brcs	.+10     	; 0x4526 <__mulsf3+0x12>
    451c:	6e d0       	rcall	.+220    	; 0x45fa <__fp_pscB>
    451e:	18 f0       	brcs	.+6      	; 0x4526 <__mulsf3+0x12>
    4520:	95 23       	and	r25, r21
    4522:	09 f0       	breq	.+2      	; 0x4526 <__mulsf3+0x12>
    4524:	5a c0       	rjmp	.+180    	; 0x45da <__fp_inf>
    4526:	5f c0       	rjmp	.+190    	; 0x45e6 <__fp_nan>
    4528:	11 24       	eor	r1, r1
    452a:	ea cf       	rjmp	.-44     	; 0x4500 <__fp_szero>

0000452c <__mulsf3x>:
    452c:	c6 df       	rcall	.-116    	; 0x44ba <__fp_split3>
    452e:	a0 f3       	brcs	.-24     	; 0x4518 <__mulsf3+0x4>

00004530 <__mulsf3_pse>:
    4530:	95 9f       	mul	r25, r21
    4532:	d1 f3       	breq	.-12     	; 0x4528 <__mulsf3+0x14>
    4534:	95 0f       	add	r25, r21
    4536:	50 e0       	ldi	r21, 0x00	; 0
    4538:	55 1f       	adc	r21, r21
    453a:	62 9f       	mul	r22, r18
    453c:	f0 01       	movw	r30, r0
    453e:	72 9f       	mul	r23, r18
    4540:	bb 27       	eor	r27, r27
    4542:	f0 0d       	add	r31, r0
    4544:	b1 1d       	adc	r27, r1
    4546:	63 9f       	mul	r22, r19
    4548:	aa 27       	eor	r26, r26
    454a:	f0 0d       	add	r31, r0
    454c:	b1 1d       	adc	r27, r1
    454e:	aa 1f       	adc	r26, r26
    4550:	64 9f       	mul	r22, r20
    4552:	66 27       	eor	r22, r22
    4554:	b0 0d       	add	r27, r0
    4556:	a1 1d       	adc	r26, r1
    4558:	66 1f       	adc	r22, r22
    455a:	82 9f       	mul	r24, r18
    455c:	22 27       	eor	r18, r18
    455e:	b0 0d       	add	r27, r0
    4560:	a1 1d       	adc	r26, r1
    4562:	62 1f       	adc	r22, r18
    4564:	73 9f       	mul	r23, r19
    4566:	b0 0d       	add	r27, r0
    4568:	a1 1d       	adc	r26, r1
    456a:	62 1f       	adc	r22, r18
    456c:	83 9f       	mul	r24, r19
    456e:	a0 0d       	add	r26, r0
    4570:	61 1d       	adc	r22, r1
    4572:	22 1f       	adc	r18, r18
    4574:	74 9f       	mul	r23, r20
    4576:	33 27       	eor	r19, r19
    4578:	a0 0d       	add	r26, r0
    457a:	61 1d       	adc	r22, r1
    457c:	23 1f       	adc	r18, r19
    457e:	84 9f       	mul	r24, r20
    4580:	60 0d       	add	r22, r0
    4582:	21 1d       	adc	r18, r1
    4584:	82 2f       	mov	r24, r18
    4586:	76 2f       	mov	r23, r22
    4588:	6a 2f       	mov	r22, r26
    458a:	11 24       	eor	r1, r1
    458c:	9f 57       	subi	r25, 0x7F	; 127
    458e:	50 40       	sbci	r21, 0x00	; 0
    4590:	8a f0       	brmi	.+34     	; 0x45b4 <__mulsf3_pse+0x84>
    4592:	e1 f0       	breq	.+56     	; 0x45cc <__mulsf3_pse+0x9c>
    4594:	88 23       	and	r24, r24
    4596:	4a f0       	brmi	.+18     	; 0x45aa <__mulsf3_pse+0x7a>
    4598:	ee 0f       	add	r30, r30
    459a:	ff 1f       	adc	r31, r31
    459c:	bb 1f       	adc	r27, r27
    459e:	66 1f       	adc	r22, r22
    45a0:	77 1f       	adc	r23, r23
    45a2:	88 1f       	adc	r24, r24
    45a4:	91 50       	subi	r25, 0x01	; 1
    45a6:	50 40       	sbci	r21, 0x00	; 0
    45a8:	a9 f7       	brne	.-22     	; 0x4594 <__mulsf3_pse+0x64>
    45aa:	9e 3f       	cpi	r25, 0xFE	; 254
    45ac:	51 05       	cpc	r21, r1
    45ae:	70 f0       	brcs	.+28     	; 0x45cc <__mulsf3_pse+0x9c>
    45b0:	14 c0       	rjmp	.+40     	; 0x45da <__fp_inf>
    45b2:	a6 cf       	rjmp	.-180    	; 0x4500 <__fp_szero>
    45b4:	5f 3f       	cpi	r21, 0xFF	; 255
    45b6:	ec f3       	brlt	.-6      	; 0x45b2 <__mulsf3_pse+0x82>
    45b8:	98 3e       	cpi	r25, 0xE8	; 232
    45ba:	dc f3       	brlt	.-10     	; 0x45b2 <__mulsf3_pse+0x82>
    45bc:	86 95       	lsr	r24
    45be:	77 95       	ror	r23
    45c0:	67 95       	ror	r22
    45c2:	b7 95       	ror	r27
    45c4:	f7 95       	ror	r31
    45c6:	e7 95       	ror	r30
    45c8:	9f 5f       	subi	r25, 0xFF	; 255
    45ca:	c1 f7       	brne	.-16     	; 0x45bc <__mulsf3_pse+0x8c>
    45cc:	fe 2b       	or	r31, r30
    45ce:	88 0f       	add	r24, r24
    45d0:	91 1d       	adc	r25, r1
    45d2:	96 95       	lsr	r25
    45d4:	87 95       	ror	r24
    45d6:	97 f9       	bld	r25, 7
    45d8:	08 95       	ret

000045da <__fp_inf>:
    45da:	97 f9       	bld	r25, 7
    45dc:	9f 67       	ori	r25, 0x7F	; 127
    45de:	80 e8       	ldi	r24, 0x80	; 128
    45e0:	70 e0       	ldi	r23, 0x00	; 0
    45e2:	60 e0       	ldi	r22, 0x00	; 0
    45e4:	08 95       	ret

000045e6 <__fp_nan>:
    45e6:	9f ef       	ldi	r25, 0xFF	; 255
    45e8:	80 ec       	ldi	r24, 0xC0	; 192
    45ea:	08 95       	ret

000045ec <__fp_pscA>:
    45ec:	00 24       	eor	r0, r0
    45ee:	0a 94       	dec	r0
    45f0:	16 16       	cp	r1, r22
    45f2:	17 06       	cpc	r1, r23
    45f4:	18 06       	cpc	r1, r24
    45f6:	09 06       	cpc	r0, r25
    45f8:	08 95       	ret

000045fa <__fp_pscB>:
    45fa:	00 24       	eor	r0, r0
    45fc:	0a 94       	dec	r0
    45fe:	12 16       	cp	r1, r18
    4600:	13 06       	cpc	r1, r19
    4602:	14 06       	cpc	r1, r20
    4604:	05 06       	cpc	r0, r21
    4606:	08 95       	ret

00004608 <__fp_round>:
    4608:	09 2e       	mov	r0, r25
    460a:	03 94       	inc	r0
    460c:	00 0c       	add	r0, r0
    460e:	11 f4       	brne	.+4      	; 0x4614 <__fp_round+0xc>
    4610:	88 23       	and	r24, r24
    4612:	52 f0       	brmi	.+20     	; 0x4628 <__fp_round+0x20>
    4614:	bb 0f       	add	r27, r27
    4616:	40 f4       	brcc	.+16     	; 0x4628 <__fp_round+0x20>
    4618:	bf 2b       	or	r27, r31
    461a:	11 f4       	brne	.+4      	; 0x4620 <__fp_round+0x18>
    461c:	60 ff       	sbrs	r22, 0
    461e:	04 c0       	rjmp	.+8      	; 0x4628 <__fp_round+0x20>
    4620:	6f 5f       	subi	r22, 0xFF	; 255
    4622:	7f 4f       	sbci	r23, 0xFF	; 255
    4624:	8f 4f       	sbci	r24, 0xFF	; 255
    4626:	9f 4f       	sbci	r25, 0xFF	; 255
    4628:	08 95       	ret

0000462a <__divmodhi4>:
    462a:	97 fb       	bst	r25, 7
    462c:	07 2e       	mov	r0, r23
    462e:	16 f4       	brtc	.+4      	; 0x4634 <__divmodhi4+0xa>
    4630:	00 94       	com	r0
    4632:	06 d0       	rcall	.+12     	; 0x4640 <__divmodhi4_neg1>
    4634:	77 fd       	sbrc	r23, 7
    4636:	08 d0       	rcall	.+16     	; 0x4648 <__divmodhi4_neg2>
    4638:	0b d0       	rcall	.+22     	; 0x4650 <__udivmodhi4>
    463a:	07 fc       	sbrc	r0, 7
    463c:	05 d0       	rcall	.+10     	; 0x4648 <__divmodhi4_neg2>
    463e:	3e f4       	brtc	.+14     	; 0x464e <__divmodhi4_exit>

00004640 <__divmodhi4_neg1>:
    4640:	90 95       	com	r25
    4642:	81 95       	neg	r24
    4644:	9f 4f       	sbci	r25, 0xFF	; 255
    4646:	08 95       	ret

00004648 <__divmodhi4_neg2>:
    4648:	70 95       	com	r23
    464a:	61 95       	neg	r22
    464c:	7f 4f       	sbci	r23, 0xFF	; 255

0000464e <__divmodhi4_exit>:
    464e:	08 95       	ret

00004650 <__udivmodhi4>:
    4650:	aa 1b       	sub	r26, r26
    4652:	bb 1b       	sub	r27, r27
    4654:	51 e1       	ldi	r21, 0x11	; 17
    4656:	07 c0       	rjmp	.+14     	; 0x4666 <__udivmodhi4_ep>

00004658 <__udivmodhi4_loop>:
    4658:	aa 1f       	adc	r26, r26
    465a:	bb 1f       	adc	r27, r27
    465c:	a6 17       	cp	r26, r22
    465e:	b7 07       	cpc	r27, r23
    4660:	10 f0       	brcs	.+4      	; 0x4666 <__udivmodhi4_ep>
    4662:	a6 1b       	sub	r26, r22
    4664:	b7 0b       	sbc	r27, r23

00004666 <__udivmodhi4_ep>:
    4666:	88 1f       	adc	r24, r24
    4668:	99 1f       	adc	r25, r25
    466a:	5a 95       	dec	r21
    466c:	a9 f7       	brne	.-22     	; 0x4658 <__udivmodhi4_loop>
    466e:	80 95       	com	r24
    4670:	90 95       	com	r25
    4672:	bc 01       	movw	r22, r24
    4674:	cd 01       	movw	r24, r26
    4676:	08 95       	ret

00004678 <do_rand>:
    4678:	8f 92       	push	r8
    467a:	9f 92       	push	r9
    467c:	af 92       	push	r10
    467e:	bf 92       	push	r11
    4680:	cf 92       	push	r12
    4682:	df 92       	push	r13
    4684:	ef 92       	push	r14
    4686:	ff 92       	push	r15
    4688:	cf 93       	push	r28
    468a:	df 93       	push	r29
    468c:	ec 01       	movw	r28, r24
    468e:	68 81       	ld	r22, Y
    4690:	79 81       	ldd	r23, Y+1	; 0x01
    4692:	8a 81       	ldd	r24, Y+2	; 0x02
    4694:	9b 81       	ldd	r25, Y+3	; 0x03
    4696:	61 15       	cp	r22, r1
    4698:	71 05       	cpc	r23, r1
    469a:	81 05       	cpc	r24, r1
    469c:	91 05       	cpc	r25, r1
    469e:	21 f4       	brne	.+8      	; 0x46a8 <do_rand+0x30>
    46a0:	64 e2       	ldi	r22, 0x24	; 36
    46a2:	79 ed       	ldi	r23, 0xD9	; 217
    46a4:	8b e5       	ldi	r24, 0x5B	; 91
    46a6:	97 e0       	ldi	r25, 0x07	; 7
    46a8:	2d e1       	ldi	r18, 0x1D	; 29
    46aa:	33 ef       	ldi	r19, 0xF3	; 243
    46ac:	41 e0       	ldi	r20, 0x01	; 1
    46ae:	50 e0       	ldi	r21, 0x00	; 0
    46b0:	0d d3       	rcall	.+1562   	; 0x4ccc <__divmodsi4>
    46b2:	49 01       	movw	r8, r18
    46b4:	5a 01       	movw	r10, r20
    46b6:	9b 01       	movw	r18, r22
    46b8:	ac 01       	movw	r20, r24
    46ba:	a7 ea       	ldi	r26, 0xA7	; 167
    46bc:	b1 e4       	ldi	r27, 0x41	; 65
    46be:	22 d3       	rcall	.+1604   	; 0x4d04 <__muluhisi3>
    46c0:	6b 01       	movw	r12, r22
    46c2:	7c 01       	movw	r14, r24
    46c4:	ac ee       	ldi	r26, 0xEC	; 236
    46c6:	b4 ef       	ldi	r27, 0xF4	; 244
    46c8:	a5 01       	movw	r20, r10
    46ca:	94 01       	movw	r18, r8
    46cc:	27 d3       	rcall	.+1614   	; 0x4d1c <__mulohisi3>
    46ce:	dc 01       	movw	r26, r24
    46d0:	cb 01       	movw	r24, r22
    46d2:	8c 0d       	add	r24, r12
    46d4:	9d 1d       	adc	r25, r13
    46d6:	ae 1d       	adc	r26, r14
    46d8:	bf 1d       	adc	r27, r15
    46da:	b7 ff       	sbrs	r27, 7
    46dc:	03 c0       	rjmp	.+6      	; 0x46e4 <do_rand+0x6c>
    46de:	01 97       	sbiw	r24, 0x01	; 1
    46e0:	a1 09       	sbc	r26, r1
    46e2:	b0 48       	sbci	r27, 0x80	; 128
    46e4:	88 83       	st	Y, r24
    46e6:	99 83       	std	Y+1, r25	; 0x01
    46e8:	aa 83       	std	Y+2, r26	; 0x02
    46ea:	bb 83       	std	Y+3, r27	; 0x03
    46ec:	9f 77       	andi	r25, 0x7F	; 127
    46ee:	df 91       	pop	r29
    46f0:	cf 91       	pop	r28
    46f2:	ff 90       	pop	r15
    46f4:	ef 90       	pop	r14
    46f6:	df 90       	pop	r13
    46f8:	cf 90       	pop	r12
    46fa:	bf 90       	pop	r11
    46fc:	af 90       	pop	r10
    46fe:	9f 90       	pop	r9
    4700:	8f 90       	pop	r8
    4702:	08 95       	ret

00004704 <rand_r>:
    4704:	b9 cf       	rjmp	.-142    	; 0x4678 <do_rand>

00004706 <rand>:
    4706:	80 e0       	ldi	r24, 0x00	; 0
    4708:	91 e0       	ldi	r25, 0x01	; 1
    470a:	b6 cf       	rjmp	.-148    	; 0x4678 <do_rand>

0000470c <srand>:
    470c:	a0 e0       	ldi	r26, 0x00	; 0
    470e:	b0 e0       	ldi	r27, 0x00	; 0
    4710:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    4714:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    4718:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    471c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    4720:	08 95       	ret

00004722 <vsprintf>:
    4722:	0f 93       	push	r16
    4724:	1f 93       	push	r17
    4726:	cf 93       	push	r28
    4728:	df 93       	push	r29
    472a:	cd b7       	in	r28, 0x3d	; 61
    472c:	de b7       	in	r29, 0x3e	; 62
    472e:	2e 97       	sbiw	r28, 0x0e	; 14
    4730:	0f b6       	in	r0, 0x3f	; 63
    4732:	f8 94       	cli
    4734:	de bf       	out	0x3e, r29	; 62
    4736:	0f be       	out	0x3f, r0	; 63
    4738:	cd bf       	out	0x3d, r28	; 61
    473a:	8c 01       	movw	r16, r24
    473c:	86 e0       	ldi	r24, 0x06	; 6
    473e:	8c 83       	std	Y+4, r24	; 0x04
    4740:	1a 83       	std	Y+2, r17	; 0x02
    4742:	09 83       	std	Y+1, r16	; 0x01
    4744:	8f ef       	ldi	r24, 0xFF	; 255
    4746:	9f e7       	ldi	r25, 0x7F	; 127
    4748:	9e 83       	std	Y+6, r25	; 0x06
    474a:	8d 83       	std	Y+5, r24	; 0x05
    474c:	ce 01       	movw	r24, r28
    474e:	01 96       	adiw	r24, 0x01	; 1
    4750:	10 d0       	rcall	.+32     	; 0x4772 <vfprintf>
    4752:	ef 81       	ldd	r30, Y+7	; 0x07
    4754:	f8 85       	ldd	r31, Y+8	; 0x08
    4756:	e0 0f       	add	r30, r16
    4758:	f1 1f       	adc	r31, r17
    475a:	10 82       	st	Z, r1
    475c:	2e 96       	adiw	r28, 0x0e	; 14
    475e:	0f b6       	in	r0, 0x3f	; 63
    4760:	f8 94       	cli
    4762:	de bf       	out	0x3e, r29	; 62
    4764:	0f be       	out	0x3f, r0	; 63
    4766:	cd bf       	out	0x3d, r28	; 61
    4768:	df 91       	pop	r29
    476a:	cf 91       	pop	r28
    476c:	1f 91       	pop	r17
    476e:	0f 91       	pop	r16
    4770:	08 95       	ret

00004772 <vfprintf>:
    4772:	2f 92       	push	r2
    4774:	3f 92       	push	r3
    4776:	4f 92       	push	r4
    4778:	5f 92       	push	r5
    477a:	6f 92       	push	r6
    477c:	7f 92       	push	r7
    477e:	8f 92       	push	r8
    4780:	9f 92       	push	r9
    4782:	af 92       	push	r10
    4784:	bf 92       	push	r11
    4786:	cf 92       	push	r12
    4788:	df 92       	push	r13
    478a:	ef 92       	push	r14
    478c:	ff 92       	push	r15
    478e:	0f 93       	push	r16
    4790:	1f 93       	push	r17
    4792:	cf 93       	push	r28
    4794:	df 93       	push	r29
    4796:	cd b7       	in	r28, 0x3d	; 61
    4798:	de b7       	in	r29, 0x3e	; 62
    479a:	2b 97       	sbiw	r28, 0x0b	; 11
    479c:	0f b6       	in	r0, 0x3f	; 63
    479e:	f8 94       	cli
    47a0:	de bf       	out	0x3e, r29	; 62
    47a2:	0f be       	out	0x3f, r0	; 63
    47a4:	cd bf       	out	0x3d, r28	; 61
    47a6:	6c 01       	movw	r12, r24
    47a8:	7b 01       	movw	r14, r22
    47aa:	8a 01       	movw	r16, r20
    47ac:	fc 01       	movw	r30, r24
    47ae:	17 82       	std	Z+7, r1	; 0x07
    47b0:	16 82       	std	Z+6, r1	; 0x06
    47b2:	83 81       	ldd	r24, Z+3	; 0x03
    47b4:	81 ff       	sbrs	r24, 1
    47b6:	bf c1       	rjmp	.+894    	; 0x4b36 <vfprintf+0x3c4>
    47b8:	ce 01       	movw	r24, r28
    47ba:	01 96       	adiw	r24, 0x01	; 1
    47bc:	3c 01       	movw	r6, r24
    47be:	f6 01       	movw	r30, r12
    47c0:	93 81       	ldd	r25, Z+3	; 0x03
    47c2:	f7 01       	movw	r30, r14
    47c4:	93 fd       	sbrc	r25, 3
    47c6:	85 91       	lpm	r24, Z+
    47c8:	93 ff       	sbrs	r25, 3
    47ca:	81 91       	ld	r24, Z+
    47cc:	7f 01       	movw	r14, r30
    47ce:	88 23       	and	r24, r24
    47d0:	09 f4       	brne	.+2      	; 0x47d4 <vfprintf+0x62>
    47d2:	ad c1       	rjmp	.+858    	; 0x4b2e <vfprintf+0x3bc>
    47d4:	85 32       	cpi	r24, 0x25	; 37
    47d6:	39 f4       	brne	.+14     	; 0x47e6 <vfprintf+0x74>
    47d8:	93 fd       	sbrc	r25, 3
    47da:	85 91       	lpm	r24, Z+
    47dc:	93 ff       	sbrs	r25, 3
    47de:	81 91       	ld	r24, Z+
    47e0:	7f 01       	movw	r14, r30
    47e2:	85 32       	cpi	r24, 0x25	; 37
    47e4:	21 f4       	brne	.+8      	; 0x47ee <vfprintf+0x7c>
    47e6:	b6 01       	movw	r22, r12
    47e8:	90 e0       	ldi	r25, 0x00	; 0
    47ea:	d6 d1       	rcall	.+940    	; 0x4b98 <fputc>
    47ec:	e8 cf       	rjmp	.-48     	; 0x47be <vfprintf+0x4c>
    47ee:	91 2c       	mov	r9, r1
    47f0:	21 2c       	mov	r2, r1
    47f2:	31 2c       	mov	r3, r1
    47f4:	ff e1       	ldi	r31, 0x1F	; 31
    47f6:	f3 15       	cp	r31, r3
    47f8:	d8 f0       	brcs	.+54     	; 0x4830 <vfprintf+0xbe>
    47fa:	8b 32       	cpi	r24, 0x2B	; 43
    47fc:	79 f0       	breq	.+30     	; 0x481c <vfprintf+0xaa>
    47fe:	38 f4       	brcc	.+14     	; 0x480e <vfprintf+0x9c>
    4800:	80 32       	cpi	r24, 0x20	; 32
    4802:	79 f0       	breq	.+30     	; 0x4822 <vfprintf+0xb0>
    4804:	83 32       	cpi	r24, 0x23	; 35
    4806:	a1 f4       	brne	.+40     	; 0x4830 <vfprintf+0xbe>
    4808:	23 2d       	mov	r18, r3
    480a:	20 61       	ori	r18, 0x10	; 16
    480c:	1d c0       	rjmp	.+58     	; 0x4848 <vfprintf+0xd6>
    480e:	8d 32       	cpi	r24, 0x2D	; 45
    4810:	61 f0       	breq	.+24     	; 0x482a <vfprintf+0xb8>
    4812:	80 33       	cpi	r24, 0x30	; 48
    4814:	69 f4       	brne	.+26     	; 0x4830 <vfprintf+0xbe>
    4816:	23 2d       	mov	r18, r3
    4818:	21 60       	ori	r18, 0x01	; 1
    481a:	16 c0       	rjmp	.+44     	; 0x4848 <vfprintf+0xd6>
    481c:	83 2d       	mov	r24, r3
    481e:	82 60       	ori	r24, 0x02	; 2
    4820:	38 2e       	mov	r3, r24
    4822:	e3 2d       	mov	r30, r3
    4824:	e4 60       	ori	r30, 0x04	; 4
    4826:	3e 2e       	mov	r3, r30
    4828:	2a c0       	rjmp	.+84     	; 0x487e <vfprintf+0x10c>
    482a:	f3 2d       	mov	r31, r3
    482c:	f8 60       	ori	r31, 0x08	; 8
    482e:	1d c0       	rjmp	.+58     	; 0x486a <vfprintf+0xf8>
    4830:	37 fc       	sbrc	r3, 7
    4832:	2d c0       	rjmp	.+90     	; 0x488e <vfprintf+0x11c>
    4834:	20 ed       	ldi	r18, 0xD0	; 208
    4836:	28 0f       	add	r18, r24
    4838:	2a 30       	cpi	r18, 0x0A	; 10
    483a:	40 f0       	brcs	.+16     	; 0x484c <vfprintf+0xda>
    483c:	8e 32       	cpi	r24, 0x2E	; 46
    483e:	b9 f4       	brne	.+46     	; 0x486e <vfprintf+0xfc>
    4840:	36 fc       	sbrc	r3, 6
    4842:	75 c1       	rjmp	.+746    	; 0x4b2e <vfprintf+0x3bc>
    4844:	23 2d       	mov	r18, r3
    4846:	20 64       	ori	r18, 0x40	; 64
    4848:	32 2e       	mov	r3, r18
    484a:	19 c0       	rjmp	.+50     	; 0x487e <vfprintf+0x10c>
    484c:	36 fe       	sbrs	r3, 6
    484e:	06 c0       	rjmp	.+12     	; 0x485c <vfprintf+0xea>
    4850:	8a e0       	ldi	r24, 0x0A	; 10
    4852:	98 9e       	mul	r9, r24
    4854:	20 0d       	add	r18, r0
    4856:	11 24       	eor	r1, r1
    4858:	92 2e       	mov	r9, r18
    485a:	11 c0       	rjmp	.+34     	; 0x487e <vfprintf+0x10c>
    485c:	ea e0       	ldi	r30, 0x0A	; 10
    485e:	2e 9e       	mul	r2, r30
    4860:	20 0d       	add	r18, r0
    4862:	11 24       	eor	r1, r1
    4864:	22 2e       	mov	r2, r18
    4866:	f3 2d       	mov	r31, r3
    4868:	f0 62       	ori	r31, 0x20	; 32
    486a:	3f 2e       	mov	r3, r31
    486c:	08 c0       	rjmp	.+16     	; 0x487e <vfprintf+0x10c>
    486e:	8c 36       	cpi	r24, 0x6C	; 108
    4870:	21 f4       	brne	.+8      	; 0x487a <vfprintf+0x108>
    4872:	83 2d       	mov	r24, r3
    4874:	80 68       	ori	r24, 0x80	; 128
    4876:	38 2e       	mov	r3, r24
    4878:	02 c0       	rjmp	.+4      	; 0x487e <vfprintf+0x10c>
    487a:	88 36       	cpi	r24, 0x68	; 104
    487c:	41 f4       	brne	.+16     	; 0x488e <vfprintf+0x11c>
    487e:	f7 01       	movw	r30, r14
    4880:	93 fd       	sbrc	r25, 3
    4882:	85 91       	lpm	r24, Z+
    4884:	93 ff       	sbrs	r25, 3
    4886:	81 91       	ld	r24, Z+
    4888:	7f 01       	movw	r14, r30
    488a:	81 11       	cpse	r24, r1
    488c:	b3 cf       	rjmp	.-154    	; 0x47f4 <vfprintf+0x82>
    488e:	98 2f       	mov	r25, r24
    4890:	9f 7d       	andi	r25, 0xDF	; 223
    4892:	95 54       	subi	r25, 0x45	; 69
    4894:	93 30       	cpi	r25, 0x03	; 3
    4896:	28 f4       	brcc	.+10     	; 0x48a2 <vfprintf+0x130>
    4898:	0c 5f       	subi	r16, 0xFC	; 252
    489a:	1f 4f       	sbci	r17, 0xFF	; 255
    489c:	9f e3       	ldi	r25, 0x3F	; 63
    489e:	99 83       	std	Y+1, r25	; 0x01
    48a0:	0d c0       	rjmp	.+26     	; 0x48bc <vfprintf+0x14a>
    48a2:	83 36       	cpi	r24, 0x63	; 99
    48a4:	31 f0       	breq	.+12     	; 0x48b2 <vfprintf+0x140>
    48a6:	83 37       	cpi	r24, 0x73	; 115
    48a8:	71 f0       	breq	.+28     	; 0x48c6 <vfprintf+0x154>
    48aa:	83 35       	cpi	r24, 0x53	; 83
    48ac:	09 f0       	breq	.+2      	; 0x48b0 <vfprintf+0x13e>
    48ae:	55 c0       	rjmp	.+170    	; 0x495a <vfprintf+0x1e8>
    48b0:	20 c0       	rjmp	.+64     	; 0x48f2 <vfprintf+0x180>
    48b2:	f8 01       	movw	r30, r16
    48b4:	80 81       	ld	r24, Z
    48b6:	89 83       	std	Y+1, r24	; 0x01
    48b8:	0e 5f       	subi	r16, 0xFE	; 254
    48ba:	1f 4f       	sbci	r17, 0xFF	; 255
    48bc:	88 24       	eor	r8, r8
    48be:	83 94       	inc	r8
    48c0:	91 2c       	mov	r9, r1
    48c2:	53 01       	movw	r10, r6
    48c4:	12 c0       	rjmp	.+36     	; 0x48ea <vfprintf+0x178>
    48c6:	28 01       	movw	r4, r16
    48c8:	f2 e0       	ldi	r31, 0x02	; 2
    48ca:	4f 0e       	add	r4, r31
    48cc:	51 1c       	adc	r5, r1
    48ce:	f8 01       	movw	r30, r16
    48d0:	a0 80       	ld	r10, Z
    48d2:	b1 80       	ldd	r11, Z+1	; 0x01
    48d4:	36 fe       	sbrs	r3, 6
    48d6:	03 c0       	rjmp	.+6      	; 0x48de <vfprintf+0x16c>
    48d8:	69 2d       	mov	r22, r9
    48da:	70 e0       	ldi	r23, 0x00	; 0
    48dc:	02 c0       	rjmp	.+4      	; 0x48e2 <vfprintf+0x170>
    48de:	6f ef       	ldi	r22, 0xFF	; 255
    48e0:	7f ef       	ldi	r23, 0xFF	; 255
    48e2:	c5 01       	movw	r24, r10
    48e4:	4e d1       	rcall	.+668    	; 0x4b82 <strnlen>
    48e6:	4c 01       	movw	r8, r24
    48e8:	82 01       	movw	r16, r4
    48ea:	f3 2d       	mov	r31, r3
    48ec:	ff 77       	andi	r31, 0x7F	; 127
    48ee:	3f 2e       	mov	r3, r31
    48f0:	15 c0       	rjmp	.+42     	; 0x491c <vfprintf+0x1aa>
    48f2:	28 01       	movw	r4, r16
    48f4:	22 e0       	ldi	r18, 0x02	; 2
    48f6:	42 0e       	add	r4, r18
    48f8:	51 1c       	adc	r5, r1
    48fa:	f8 01       	movw	r30, r16
    48fc:	a0 80       	ld	r10, Z
    48fe:	b1 80       	ldd	r11, Z+1	; 0x01
    4900:	36 fe       	sbrs	r3, 6
    4902:	03 c0       	rjmp	.+6      	; 0x490a <vfprintf+0x198>
    4904:	69 2d       	mov	r22, r9
    4906:	70 e0       	ldi	r23, 0x00	; 0
    4908:	02 c0       	rjmp	.+4      	; 0x490e <vfprintf+0x19c>
    490a:	6f ef       	ldi	r22, 0xFF	; 255
    490c:	7f ef       	ldi	r23, 0xFF	; 255
    490e:	c5 01       	movw	r24, r10
    4910:	2d d1       	rcall	.+602    	; 0x4b6c <strnlen_P>
    4912:	4c 01       	movw	r8, r24
    4914:	f3 2d       	mov	r31, r3
    4916:	f0 68       	ori	r31, 0x80	; 128
    4918:	3f 2e       	mov	r3, r31
    491a:	82 01       	movw	r16, r4
    491c:	33 fc       	sbrc	r3, 3
    491e:	19 c0       	rjmp	.+50     	; 0x4952 <vfprintf+0x1e0>
    4920:	82 2d       	mov	r24, r2
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	88 16       	cp	r8, r24
    4926:	99 06       	cpc	r9, r25
    4928:	a0 f4       	brcc	.+40     	; 0x4952 <vfprintf+0x1e0>
    492a:	b6 01       	movw	r22, r12
    492c:	80 e2       	ldi	r24, 0x20	; 32
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	33 d1       	rcall	.+614    	; 0x4b98 <fputc>
    4932:	2a 94       	dec	r2
    4934:	f5 cf       	rjmp	.-22     	; 0x4920 <vfprintf+0x1ae>
    4936:	f5 01       	movw	r30, r10
    4938:	37 fc       	sbrc	r3, 7
    493a:	85 91       	lpm	r24, Z+
    493c:	37 fe       	sbrs	r3, 7
    493e:	81 91       	ld	r24, Z+
    4940:	5f 01       	movw	r10, r30
    4942:	b6 01       	movw	r22, r12
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	28 d1       	rcall	.+592    	; 0x4b98 <fputc>
    4948:	21 10       	cpse	r2, r1
    494a:	2a 94       	dec	r2
    494c:	21 e0       	ldi	r18, 0x01	; 1
    494e:	82 1a       	sub	r8, r18
    4950:	91 08       	sbc	r9, r1
    4952:	81 14       	cp	r8, r1
    4954:	91 04       	cpc	r9, r1
    4956:	79 f7       	brne	.-34     	; 0x4936 <vfprintf+0x1c4>
    4958:	e1 c0       	rjmp	.+450    	; 0x4b1c <vfprintf+0x3aa>
    495a:	84 36       	cpi	r24, 0x64	; 100
    495c:	11 f0       	breq	.+4      	; 0x4962 <vfprintf+0x1f0>
    495e:	89 36       	cpi	r24, 0x69	; 105
    4960:	39 f5       	brne	.+78     	; 0x49b0 <vfprintf+0x23e>
    4962:	f8 01       	movw	r30, r16
    4964:	37 fe       	sbrs	r3, 7
    4966:	07 c0       	rjmp	.+14     	; 0x4976 <vfprintf+0x204>
    4968:	60 81       	ld	r22, Z
    496a:	71 81       	ldd	r23, Z+1	; 0x01
    496c:	82 81       	ldd	r24, Z+2	; 0x02
    496e:	93 81       	ldd	r25, Z+3	; 0x03
    4970:	0c 5f       	subi	r16, 0xFC	; 252
    4972:	1f 4f       	sbci	r17, 0xFF	; 255
    4974:	08 c0       	rjmp	.+16     	; 0x4986 <vfprintf+0x214>
    4976:	60 81       	ld	r22, Z
    4978:	71 81       	ldd	r23, Z+1	; 0x01
    497a:	07 2e       	mov	r0, r23
    497c:	00 0c       	add	r0, r0
    497e:	88 0b       	sbc	r24, r24
    4980:	99 0b       	sbc	r25, r25
    4982:	0e 5f       	subi	r16, 0xFE	; 254
    4984:	1f 4f       	sbci	r17, 0xFF	; 255
    4986:	f3 2d       	mov	r31, r3
    4988:	ff 76       	andi	r31, 0x6F	; 111
    498a:	3f 2e       	mov	r3, r31
    498c:	97 ff       	sbrs	r25, 7
    498e:	09 c0       	rjmp	.+18     	; 0x49a2 <vfprintf+0x230>
    4990:	90 95       	com	r25
    4992:	80 95       	com	r24
    4994:	70 95       	com	r23
    4996:	61 95       	neg	r22
    4998:	7f 4f       	sbci	r23, 0xFF	; 255
    499a:	8f 4f       	sbci	r24, 0xFF	; 255
    499c:	9f 4f       	sbci	r25, 0xFF	; 255
    499e:	f0 68       	ori	r31, 0x80	; 128
    49a0:	3f 2e       	mov	r3, r31
    49a2:	2a e0       	ldi	r18, 0x0A	; 10
    49a4:	30 e0       	ldi	r19, 0x00	; 0
    49a6:	a3 01       	movw	r20, r6
    49a8:	33 d1       	rcall	.+614    	; 0x4c10 <__ultoa_invert>
    49aa:	88 2e       	mov	r8, r24
    49ac:	86 18       	sub	r8, r6
    49ae:	44 c0       	rjmp	.+136    	; 0x4a38 <vfprintf+0x2c6>
    49b0:	85 37       	cpi	r24, 0x75	; 117
    49b2:	31 f4       	brne	.+12     	; 0x49c0 <vfprintf+0x24e>
    49b4:	23 2d       	mov	r18, r3
    49b6:	2f 7e       	andi	r18, 0xEF	; 239
    49b8:	b2 2e       	mov	r11, r18
    49ba:	2a e0       	ldi	r18, 0x0A	; 10
    49bc:	30 e0       	ldi	r19, 0x00	; 0
    49be:	25 c0       	rjmp	.+74     	; 0x4a0a <vfprintf+0x298>
    49c0:	93 2d       	mov	r25, r3
    49c2:	99 7f       	andi	r25, 0xF9	; 249
    49c4:	b9 2e       	mov	r11, r25
    49c6:	8f 36       	cpi	r24, 0x6F	; 111
    49c8:	c1 f0       	breq	.+48     	; 0x49fa <vfprintf+0x288>
    49ca:	18 f4       	brcc	.+6      	; 0x49d2 <vfprintf+0x260>
    49cc:	88 35       	cpi	r24, 0x58	; 88
    49ce:	79 f0       	breq	.+30     	; 0x49ee <vfprintf+0x27c>
    49d0:	ae c0       	rjmp	.+348    	; 0x4b2e <vfprintf+0x3bc>
    49d2:	80 37       	cpi	r24, 0x70	; 112
    49d4:	19 f0       	breq	.+6      	; 0x49dc <vfprintf+0x26a>
    49d6:	88 37       	cpi	r24, 0x78	; 120
    49d8:	21 f0       	breq	.+8      	; 0x49e2 <vfprintf+0x270>
    49da:	a9 c0       	rjmp	.+338    	; 0x4b2e <vfprintf+0x3bc>
    49dc:	e9 2f       	mov	r30, r25
    49de:	e0 61       	ori	r30, 0x10	; 16
    49e0:	be 2e       	mov	r11, r30
    49e2:	b4 fe       	sbrs	r11, 4
    49e4:	0d c0       	rjmp	.+26     	; 0x4a00 <vfprintf+0x28e>
    49e6:	fb 2d       	mov	r31, r11
    49e8:	f4 60       	ori	r31, 0x04	; 4
    49ea:	bf 2e       	mov	r11, r31
    49ec:	09 c0       	rjmp	.+18     	; 0x4a00 <vfprintf+0x28e>
    49ee:	34 fe       	sbrs	r3, 4
    49f0:	0a c0       	rjmp	.+20     	; 0x4a06 <vfprintf+0x294>
    49f2:	29 2f       	mov	r18, r25
    49f4:	26 60       	ori	r18, 0x06	; 6
    49f6:	b2 2e       	mov	r11, r18
    49f8:	06 c0       	rjmp	.+12     	; 0x4a06 <vfprintf+0x294>
    49fa:	28 e0       	ldi	r18, 0x08	; 8
    49fc:	30 e0       	ldi	r19, 0x00	; 0
    49fe:	05 c0       	rjmp	.+10     	; 0x4a0a <vfprintf+0x298>
    4a00:	20 e1       	ldi	r18, 0x10	; 16
    4a02:	30 e0       	ldi	r19, 0x00	; 0
    4a04:	02 c0       	rjmp	.+4      	; 0x4a0a <vfprintf+0x298>
    4a06:	20 e1       	ldi	r18, 0x10	; 16
    4a08:	32 e0       	ldi	r19, 0x02	; 2
    4a0a:	f8 01       	movw	r30, r16
    4a0c:	b7 fe       	sbrs	r11, 7
    4a0e:	07 c0       	rjmp	.+14     	; 0x4a1e <vfprintf+0x2ac>
    4a10:	60 81       	ld	r22, Z
    4a12:	71 81       	ldd	r23, Z+1	; 0x01
    4a14:	82 81       	ldd	r24, Z+2	; 0x02
    4a16:	93 81       	ldd	r25, Z+3	; 0x03
    4a18:	0c 5f       	subi	r16, 0xFC	; 252
    4a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a1c:	06 c0       	rjmp	.+12     	; 0x4a2a <vfprintf+0x2b8>
    4a1e:	60 81       	ld	r22, Z
    4a20:	71 81       	ldd	r23, Z+1	; 0x01
    4a22:	80 e0       	ldi	r24, 0x00	; 0
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	0e 5f       	subi	r16, 0xFE	; 254
    4a28:	1f 4f       	sbci	r17, 0xFF	; 255
    4a2a:	a3 01       	movw	r20, r6
    4a2c:	f1 d0       	rcall	.+482    	; 0x4c10 <__ultoa_invert>
    4a2e:	88 2e       	mov	r8, r24
    4a30:	86 18       	sub	r8, r6
    4a32:	fb 2d       	mov	r31, r11
    4a34:	ff 77       	andi	r31, 0x7F	; 127
    4a36:	3f 2e       	mov	r3, r31
    4a38:	36 fe       	sbrs	r3, 6
    4a3a:	0d c0       	rjmp	.+26     	; 0x4a56 <vfprintf+0x2e4>
    4a3c:	23 2d       	mov	r18, r3
    4a3e:	2e 7f       	andi	r18, 0xFE	; 254
    4a40:	a2 2e       	mov	r10, r18
    4a42:	89 14       	cp	r8, r9
    4a44:	58 f4       	brcc	.+22     	; 0x4a5c <vfprintf+0x2ea>
    4a46:	34 fe       	sbrs	r3, 4
    4a48:	0b c0       	rjmp	.+22     	; 0x4a60 <vfprintf+0x2ee>
    4a4a:	32 fc       	sbrc	r3, 2
    4a4c:	09 c0       	rjmp	.+18     	; 0x4a60 <vfprintf+0x2ee>
    4a4e:	83 2d       	mov	r24, r3
    4a50:	8e 7e       	andi	r24, 0xEE	; 238
    4a52:	a8 2e       	mov	r10, r24
    4a54:	05 c0       	rjmp	.+10     	; 0x4a60 <vfprintf+0x2ee>
    4a56:	b8 2c       	mov	r11, r8
    4a58:	a3 2c       	mov	r10, r3
    4a5a:	03 c0       	rjmp	.+6      	; 0x4a62 <vfprintf+0x2f0>
    4a5c:	b8 2c       	mov	r11, r8
    4a5e:	01 c0       	rjmp	.+2      	; 0x4a62 <vfprintf+0x2f0>
    4a60:	b9 2c       	mov	r11, r9
    4a62:	a4 fe       	sbrs	r10, 4
    4a64:	0f c0       	rjmp	.+30     	; 0x4a84 <vfprintf+0x312>
    4a66:	fe 01       	movw	r30, r28
    4a68:	e8 0d       	add	r30, r8
    4a6a:	f1 1d       	adc	r31, r1
    4a6c:	80 81       	ld	r24, Z
    4a6e:	80 33       	cpi	r24, 0x30	; 48
    4a70:	21 f4       	brne	.+8      	; 0x4a7a <vfprintf+0x308>
    4a72:	9a 2d       	mov	r25, r10
    4a74:	99 7e       	andi	r25, 0xE9	; 233
    4a76:	a9 2e       	mov	r10, r25
    4a78:	09 c0       	rjmp	.+18     	; 0x4a8c <vfprintf+0x31a>
    4a7a:	a2 fe       	sbrs	r10, 2
    4a7c:	06 c0       	rjmp	.+12     	; 0x4a8a <vfprintf+0x318>
    4a7e:	b3 94       	inc	r11
    4a80:	b3 94       	inc	r11
    4a82:	04 c0       	rjmp	.+8      	; 0x4a8c <vfprintf+0x31a>
    4a84:	8a 2d       	mov	r24, r10
    4a86:	86 78       	andi	r24, 0x86	; 134
    4a88:	09 f0       	breq	.+2      	; 0x4a8c <vfprintf+0x31a>
    4a8a:	b3 94       	inc	r11
    4a8c:	a3 fc       	sbrc	r10, 3
    4a8e:	10 c0       	rjmp	.+32     	; 0x4ab0 <vfprintf+0x33e>
    4a90:	a0 fe       	sbrs	r10, 0
    4a92:	06 c0       	rjmp	.+12     	; 0x4aa0 <vfprintf+0x32e>
    4a94:	b2 14       	cp	r11, r2
    4a96:	80 f4       	brcc	.+32     	; 0x4ab8 <vfprintf+0x346>
    4a98:	28 0c       	add	r2, r8
    4a9a:	92 2c       	mov	r9, r2
    4a9c:	9b 18       	sub	r9, r11
    4a9e:	0d c0       	rjmp	.+26     	; 0x4aba <vfprintf+0x348>
    4aa0:	b2 14       	cp	r11, r2
    4aa2:	58 f4       	brcc	.+22     	; 0x4aba <vfprintf+0x348>
    4aa4:	b6 01       	movw	r22, r12
    4aa6:	80 e2       	ldi	r24, 0x20	; 32
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	76 d0       	rcall	.+236    	; 0x4b98 <fputc>
    4aac:	b3 94       	inc	r11
    4aae:	f8 cf       	rjmp	.-16     	; 0x4aa0 <vfprintf+0x32e>
    4ab0:	b2 14       	cp	r11, r2
    4ab2:	18 f4       	brcc	.+6      	; 0x4aba <vfprintf+0x348>
    4ab4:	2b 18       	sub	r2, r11
    4ab6:	02 c0       	rjmp	.+4      	; 0x4abc <vfprintf+0x34a>
    4ab8:	98 2c       	mov	r9, r8
    4aba:	21 2c       	mov	r2, r1
    4abc:	a4 fe       	sbrs	r10, 4
    4abe:	0f c0       	rjmp	.+30     	; 0x4ade <vfprintf+0x36c>
    4ac0:	b6 01       	movw	r22, r12
    4ac2:	80 e3       	ldi	r24, 0x30	; 48
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	68 d0       	rcall	.+208    	; 0x4b98 <fputc>
    4ac8:	a2 fe       	sbrs	r10, 2
    4aca:	16 c0       	rjmp	.+44     	; 0x4af8 <vfprintf+0x386>
    4acc:	a1 fc       	sbrc	r10, 1
    4ace:	03 c0       	rjmp	.+6      	; 0x4ad6 <vfprintf+0x364>
    4ad0:	88 e7       	ldi	r24, 0x78	; 120
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	02 c0       	rjmp	.+4      	; 0x4ada <vfprintf+0x368>
    4ad6:	88 e5       	ldi	r24, 0x58	; 88
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	b6 01       	movw	r22, r12
    4adc:	0c c0       	rjmp	.+24     	; 0x4af6 <vfprintf+0x384>
    4ade:	8a 2d       	mov	r24, r10
    4ae0:	86 78       	andi	r24, 0x86	; 134
    4ae2:	51 f0       	breq	.+20     	; 0x4af8 <vfprintf+0x386>
    4ae4:	a1 fe       	sbrs	r10, 1
    4ae6:	02 c0       	rjmp	.+4      	; 0x4aec <vfprintf+0x37a>
    4ae8:	8b e2       	ldi	r24, 0x2B	; 43
    4aea:	01 c0       	rjmp	.+2      	; 0x4aee <vfprintf+0x37c>
    4aec:	80 e2       	ldi	r24, 0x20	; 32
    4aee:	a7 fc       	sbrc	r10, 7
    4af0:	8d e2       	ldi	r24, 0x2D	; 45
    4af2:	b6 01       	movw	r22, r12
    4af4:	90 e0       	ldi	r25, 0x00	; 0
    4af6:	50 d0       	rcall	.+160    	; 0x4b98 <fputc>
    4af8:	89 14       	cp	r8, r9
    4afa:	30 f4       	brcc	.+12     	; 0x4b08 <vfprintf+0x396>
    4afc:	b6 01       	movw	r22, r12
    4afe:	80 e3       	ldi	r24, 0x30	; 48
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	4a d0       	rcall	.+148    	; 0x4b98 <fputc>
    4b04:	9a 94       	dec	r9
    4b06:	f8 cf       	rjmp	.-16     	; 0x4af8 <vfprintf+0x386>
    4b08:	8a 94       	dec	r8
    4b0a:	f3 01       	movw	r30, r6
    4b0c:	e8 0d       	add	r30, r8
    4b0e:	f1 1d       	adc	r31, r1
    4b10:	80 81       	ld	r24, Z
    4b12:	b6 01       	movw	r22, r12
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	40 d0       	rcall	.+128    	; 0x4b98 <fputc>
    4b18:	81 10       	cpse	r8, r1
    4b1a:	f6 cf       	rjmp	.-20     	; 0x4b08 <vfprintf+0x396>
    4b1c:	22 20       	and	r2, r2
    4b1e:	09 f4       	brne	.+2      	; 0x4b22 <vfprintf+0x3b0>
    4b20:	4e ce       	rjmp	.-868    	; 0x47be <vfprintf+0x4c>
    4b22:	b6 01       	movw	r22, r12
    4b24:	80 e2       	ldi	r24, 0x20	; 32
    4b26:	90 e0       	ldi	r25, 0x00	; 0
    4b28:	37 d0       	rcall	.+110    	; 0x4b98 <fputc>
    4b2a:	2a 94       	dec	r2
    4b2c:	f7 cf       	rjmp	.-18     	; 0x4b1c <vfprintf+0x3aa>
    4b2e:	f6 01       	movw	r30, r12
    4b30:	86 81       	ldd	r24, Z+6	; 0x06
    4b32:	97 81       	ldd	r25, Z+7	; 0x07
    4b34:	02 c0       	rjmp	.+4      	; 0x4b3a <vfprintf+0x3c8>
    4b36:	8f ef       	ldi	r24, 0xFF	; 255
    4b38:	9f ef       	ldi	r25, 0xFF	; 255
    4b3a:	2b 96       	adiw	r28, 0x0b	; 11
    4b3c:	0f b6       	in	r0, 0x3f	; 63
    4b3e:	f8 94       	cli
    4b40:	de bf       	out	0x3e, r29	; 62
    4b42:	0f be       	out	0x3f, r0	; 63
    4b44:	cd bf       	out	0x3d, r28	; 61
    4b46:	df 91       	pop	r29
    4b48:	cf 91       	pop	r28
    4b4a:	1f 91       	pop	r17
    4b4c:	0f 91       	pop	r16
    4b4e:	ff 90       	pop	r15
    4b50:	ef 90       	pop	r14
    4b52:	df 90       	pop	r13
    4b54:	cf 90       	pop	r12
    4b56:	bf 90       	pop	r11
    4b58:	af 90       	pop	r10
    4b5a:	9f 90       	pop	r9
    4b5c:	8f 90       	pop	r8
    4b5e:	7f 90       	pop	r7
    4b60:	6f 90       	pop	r6
    4b62:	5f 90       	pop	r5
    4b64:	4f 90       	pop	r4
    4b66:	3f 90       	pop	r3
    4b68:	2f 90       	pop	r2
    4b6a:	08 95       	ret

00004b6c <strnlen_P>:
    4b6c:	fc 01       	movw	r30, r24
    4b6e:	05 90       	lpm	r0, Z+
    4b70:	61 50       	subi	r22, 0x01	; 1
    4b72:	70 40       	sbci	r23, 0x00	; 0
    4b74:	01 10       	cpse	r0, r1
    4b76:	d8 f7       	brcc	.-10     	; 0x4b6e <strnlen_P+0x2>
    4b78:	80 95       	com	r24
    4b7a:	90 95       	com	r25
    4b7c:	8e 0f       	add	r24, r30
    4b7e:	9f 1f       	adc	r25, r31
    4b80:	08 95       	ret

00004b82 <strnlen>:
    4b82:	fc 01       	movw	r30, r24
    4b84:	61 50       	subi	r22, 0x01	; 1
    4b86:	70 40       	sbci	r23, 0x00	; 0
    4b88:	01 90       	ld	r0, Z+
    4b8a:	01 10       	cpse	r0, r1
    4b8c:	d8 f7       	brcc	.-10     	; 0x4b84 <strnlen+0x2>
    4b8e:	80 95       	com	r24
    4b90:	90 95       	com	r25
    4b92:	8e 0f       	add	r24, r30
    4b94:	9f 1f       	adc	r25, r31
    4b96:	08 95       	ret

00004b98 <fputc>:
    4b98:	0f 93       	push	r16
    4b9a:	1f 93       	push	r17
    4b9c:	cf 93       	push	r28
    4b9e:	df 93       	push	r29
    4ba0:	fb 01       	movw	r30, r22
    4ba2:	23 81       	ldd	r18, Z+3	; 0x03
    4ba4:	21 fd       	sbrc	r18, 1
    4ba6:	03 c0       	rjmp	.+6      	; 0x4bae <fputc+0x16>
    4ba8:	8f ef       	ldi	r24, 0xFF	; 255
    4baa:	9f ef       	ldi	r25, 0xFF	; 255
    4bac:	2c c0       	rjmp	.+88     	; 0x4c06 <fputc+0x6e>
    4bae:	22 ff       	sbrs	r18, 2
    4bb0:	16 c0       	rjmp	.+44     	; 0x4bde <fputc+0x46>
    4bb2:	46 81       	ldd	r20, Z+6	; 0x06
    4bb4:	57 81       	ldd	r21, Z+7	; 0x07
    4bb6:	24 81       	ldd	r18, Z+4	; 0x04
    4bb8:	35 81       	ldd	r19, Z+5	; 0x05
    4bba:	42 17       	cp	r20, r18
    4bbc:	53 07       	cpc	r21, r19
    4bbe:	44 f4       	brge	.+16     	; 0x4bd0 <fputc+0x38>
    4bc0:	a0 81       	ld	r26, Z
    4bc2:	b1 81       	ldd	r27, Z+1	; 0x01
    4bc4:	9d 01       	movw	r18, r26
    4bc6:	2f 5f       	subi	r18, 0xFF	; 255
    4bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bca:	31 83       	std	Z+1, r19	; 0x01
    4bcc:	20 83       	st	Z, r18
    4bce:	8c 93       	st	X, r24
    4bd0:	26 81       	ldd	r18, Z+6	; 0x06
    4bd2:	37 81       	ldd	r19, Z+7	; 0x07
    4bd4:	2f 5f       	subi	r18, 0xFF	; 255
    4bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd8:	37 83       	std	Z+7, r19	; 0x07
    4bda:	26 83       	std	Z+6, r18	; 0x06
    4bdc:	14 c0       	rjmp	.+40     	; 0x4c06 <fputc+0x6e>
    4bde:	8b 01       	movw	r16, r22
    4be0:	ec 01       	movw	r28, r24
    4be2:	fb 01       	movw	r30, r22
    4be4:	00 84       	ldd	r0, Z+8	; 0x08
    4be6:	f1 85       	ldd	r31, Z+9	; 0x09
    4be8:	e0 2d       	mov	r30, r0
    4bea:	09 95       	icall
    4bec:	89 2b       	or	r24, r25
    4bee:	e1 f6       	brne	.-72     	; 0x4ba8 <fputc+0x10>
    4bf0:	d8 01       	movw	r26, r16
    4bf2:	16 96       	adiw	r26, 0x06	; 6
    4bf4:	8d 91       	ld	r24, X+
    4bf6:	9c 91       	ld	r25, X
    4bf8:	17 97       	sbiw	r26, 0x07	; 7
    4bfa:	01 96       	adiw	r24, 0x01	; 1
    4bfc:	17 96       	adiw	r26, 0x07	; 7
    4bfe:	9c 93       	st	X, r25
    4c00:	8e 93       	st	-X, r24
    4c02:	16 97       	sbiw	r26, 0x06	; 6
    4c04:	ce 01       	movw	r24, r28
    4c06:	df 91       	pop	r29
    4c08:	cf 91       	pop	r28
    4c0a:	1f 91       	pop	r17
    4c0c:	0f 91       	pop	r16
    4c0e:	08 95       	ret

00004c10 <__ultoa_invert>:
    4c10:	fa 01       	movw	r30, r20
    4c12:	aa 27       	eor	r26, r26
    4c14:	28 30       	cpi	r18, 0x08	; 8
    4c16:	51 f1       	breq	.+84     	; 0x4c6c <__ultoa_invert+0x5c>
    4c18:	20 31       	cpi	r18, 0x10	; 16
    4c1a:	81 f1       	breq	.+96     	; 0x4c7c <__ultoa_invert+0x6c>
    4c1c:	e8 94       	clt
    4c1e:	6f 93       	push	r22
    4c20:	6e 7f       	andi	r22, 0xFE	; 254
    4c22:	6e 5f       	subi	r22, 0xFE	; 254
    4c24:	7f 4f       	sbci	r23, 0xFF	; 255
    4c26:	8f 4f       	sbci	r24, 0xFF	; 255
    4c28:	9f 4f       	sbci	r25, 0xFF	; 255
    4c2a:	af 4f       	sbci	r26, 0xFF	; 255
    4c2c:	b1 e0       	ldi	r27, 0x01	; 1
    4c2e:	3e d0       	rcall	.+124    	; 0x4cac <__ultoa_invert+0x9c>
    4c30:	b4 e0       	ldi	r27, 0x04	; 4
    4c32:	3c d0       	rcall	.+120    	; 0x4cac <__ultoa_invert+0x9c>
    4c34:	67 0f       	add	r22, r23
    4c36:	78 1f       	adc	r23, r24
    4c38:	89 1f       	adc	r24, r25
    4c3a:	9a 1f       	adc	r25, r26
    4c3c:	a1 1d       	adc	r26, r1
    4c3e:	68 0f       	add	r22, r24
    4c40:	79 1f       	adc	r23, r25
    4c42:	8a 1f       	adc	r24, r26
    4c44:	91 1d       	adc	r25, r1
    4c46:	a1 1d       	adc	r26, r1
    4c48:	6a 0f       	add	r22, r26
    4c4a:	71 1d       	adc	r23, r1
    4c4c:	81 1d       	adc	r24, r1
    4c4e:	91 1d       	adc	r25, r1
    4c50:	a1 1d       	adc	r26, r1
    4c52:	20 d0       	rcall	.+64     	; 0x4c94 <__ultoa_invert+0x84>
    4c54:	09 f4       	brne	.+2      	; 0x4c58 <__ultoa_invert+0x48>
    4c56:	68 94       	set
    4c58:	3f 91       	pop	r19
    4c5a:	2a e0       	ldi	r18, 0x0A	; 10
    4c5c:	26 9f       	mul	r18, r22
    4c5e:	11 24       	eor	r1, r1
    4c60:	30 19       	sub	r19, r0
    4c62:	30 5d       	subi	r19, 0xD0	; 208
    4c64:	31 93       	st	Z+, r19
    4c66:	de f6       	brtc	.-74     	; 0x4c1e <__ultoa_invert+0xe>
    4c68:	cf 01       	movw	r24, r30
    4c6a:	08 95       	ret
    4c6c:	46 2f       	mov	r20, r22
    4c6e:	47 70       	andi	r20, 0x07	; 7
    4c70:	40 5d       	subi	r20, 0xD0	; 208
    4c72:	41 93       	st	Z+, r20
    4c74:	b3 e0       	ldi	r27, 0x03	; 3
    4c76:	0f d0       	rcall	.+30     	; 0x4c96 <__ultoa_invert+0x86>
    4c78:	c9 f7       	brne	.-14     	; 0x4c6c <__ultoa_invert+0x5c>
    4c7a:	f6 cf       	rjmp	.-20     	; 0x4c68 <__ultoa_invert+0x58>
    4c7c:	46 2f       	mov	r20, r22
    4c7e:	4f 70       	andi	r20, 0x0F	; 15
    4c80:	40 5d       	subi	r20, 0xD0	; 208
    4c82:	4a 33       	cpi	r20, 0x3A	; 58
    4c84:	18 f0       	brcs	.+6      	; 0x4c8c <__ultoa_invert+0x7c>
    4c86:	49 5d       	subi	r20, 0xD9	; 217
    4c88:	31 fd       	sbrc	r19, 1
    4c8a:	40 52       	subi	r20, 0x20	; 32
    4c8c:	41 93       	st	Z+, r20
    4c8e:	02 d0       	rcall	.+4      	; 0x4c94 <__ultoa_invert+0x84>
    4c90:	a9 f7       	brne	.-22     	; 0x4c7c <__ultoa_invert+0x6c>
    4c92:	ea cf       	rjmp	.-44     	; 0x4c68 <__ultoa_invert+0x58>
    4c94:	b4 e0       	ldi	r27, 0x04	; 4
    4c96:	a6 95       	lsr	r26
    4c98:	97 95       	ror	r25
    4c9a:	87 95       	ror	r24
    4c9c:	77 95       	ror	r23
    4c9e:	67 95       	ror	r22
    4ca0:	ba 95       	dec	r27
    4ca2:	c9 f7       	brne	.-14     	; 0x4c96 <__ultoa_invert+0x86>
    4ca4:	00 97       	sbiw	r24, 0x00	; 0
    4ca6:	61 05       	cpc	r22, r1
    4ca8:	71 05       	cpc	r23, r1
    4caa:	08 95       	ret
    4cac:	9b 01       	movw	r18, r22
    4cae:	ac 01       	movw	r20, r24
    4cb0:	0a 2e       	mov	r0, r26
    4cb2:	06 94       	lsr	r0
    4cb4:	57 95       	ror	r21
    4cb6:	47 95       	ror	r20
    4cb8:	37 95       	ror	r19
    4cba:	27 95       	ror	r18
    4cbc:	ba 95       	dec	r27
    4cbe:	c9 f7       	brne	.-14     	; 0x4cb2 <__ultoa_invert+0xa2>
    4cc0:	62 0f       	add	r22, r18
    4cc2:	73 1f       	adc	r23, r19
    4cc4:	84 1f       	adc	r24, r20
    4cc6:	95 1f       	adc	r25, r21
    4cc8:	a0 1d       	adc	r26, r0
    4cca:	08 95       	ret

00004ccc <__divmodsi4>:
    4ccc:	05 2e       	mov	r0, r21
    4cce:	97 fb       	bst	r25, 7
    4cd0:	16 f4       	brtc	.+4      	; 0x4cd6 <__divmodsi4+0xa>
    4cd2:	00 94       	com	r0
    4cd4:	0f d0       	rcall	.+30     	; 0x4cf4 <__negsi2>
    4cd6:	57 fd       	sbrc	r21, 7
    4cd8:	05 d0       	rcall	.+10     	; 0x4ce4 <__divmodsi4_neg2>
    4cda:	24 d0       	rcall	.+72     	; 0x4d24 <__udivmodsi4>
    4cdc:	07 fc       	sbrc	r0, 7
    4cde:	02 d0       	rcall	.+4      	; 0x4ce4 <__divmodsi4_neg2>
    4ce0:	46 f4       	brtc	.+16     	; 0x4cf2 <__divmodsi4_exit>
    4ce2:	08 c0       	rjmp	.+16     	; 0x4cf4 <__negsi2>

00004ce4 <__divmodsi4_neg2>:
    4ce4:	50 95       	com	r21
    4ce6:	40 95       	com	r20
    4ce8:	30 95       	com	r19
    4cea:	21 95       	neg	r18
    4cec:	3f 4f       	sbci	r19, 0xFF	; 255
    4cee:	4f 4f       	sbci	r20, 0xFF	; 255
    4cf0:	5f 4f       	sbci	r21, 0xFF	; 255

00004cf2 <__divmodsi4_exit>:
    4cf2:	08 95       	ret

00004cf4 <__negsi2>:
    4cf4:	90 95       	com	r25
    4cf6:	80 95       	com	r24
    4cf8:	70 95       	com	r23
    4cfa:	61 95       	neg	r22
    4cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    4cfe:	8f 4f       	sbci	r24, 0xFF	; 255
    4d00:	9f 4f       	sbci	r25, 0xFF	; 255
    4d02:	08 95       	ret

00004d04 <__muluhisi3>:
    4d04:	31 d0       	rcall	.+98     	; 0x4d68 <__umulhisi3>
    4d06:	a5 9f       	mul	r26, r21
    4d08:	90 0d       	add	r25, r0
    4d0a:	b4 9f       	mul	r27, r20
    4d0c:	90 0d       	add	r25, r0
    4d0e:	a4 9f       	mul	r26, r20
    4d10:	80 0d       	add	r24, r0
    4d12:	91 1d       	adc	r25, r1
    4d14:	11 24       	eor	r1, r1
    4d16:	08 95       	ret

00004d18 <__mulshisi3>:
    4d18:	b7 ff       	sbrs	r27, 7
    4d1a:	f4 cf       	rjmp	.-24     	; 0x4d04 <__muluhisi3>

00004d1c <__mulohisi3>:
    4d1c:	f3 df       	rcall	.-26     	; 0x4d04 <__muluhisi3>
    4d1e:	82 1b       	sub	r24, r18
    4d20:	93 0b       	sbc	r25, r19
    4d22:	08 95       	ret

00004d24 <__udivmodsi4>:
    4d24:	a1 e2       	ldi	r26, 0x21	; 33
    4d26:	1a 2e       	mov	r1, r26
    4d28:	aa 1b       	sub	r26, r26
    4d2a:	bb 1b       	sub	r27, r27
    4d2c:	fd 01       	movw	r30, r26
    4d2e:	0d c0       	rjmp	.+26     	; 0x4d4a <__udivmodsi4_ep>

00004d30 <__udivmodsi4_loop>:
    4d30:	aa 1f       	adc	r26, r26
    4d32:	bb 1f       	adc	r27, r27
    4d34:	ee 1f       	adc	r30, r30
    4d36:	ff 1f       	adc	r31, r31
    4d38:	a2 17       	cp	r26, r18
    4d3a:	b3 07       	cpc	r27, r19
    4d3c:	e4 07       	cpc	r30, r20
    4d3e:	f5 07       	cpc	r31, r21
    4d40:	20 f0       	brcs	.+8      	; 0x4d4a <__udivmodsi4_ep>
    4d42:	a2 1b       	sub	r26, r18
    4d44:	b3 0b       	sbc	r27, r19
    4d46:	e4 0b       	sbc	r30, r20
    4d48:	f5 0b       	sbc	r31, r21

00004d4a <__udivmodsi4_ep>:
    4d4a:	66 1f       	adc	r22, r22
    4d4c:	77 1f       	adc	r23, r23
    4d4e:	88 1f       	adc	r24, r24
    4d50:	99 1f       	adc	r25, r25
    4d52:	1a 94       	dec	r1
    4d54:	69 f7       	brne	.-38     	; 0x4d30 <__udivmodsi4_loop>
    4d56:	60 95       	com	r22
    4d58:	70 95       	com	r23
    4d5a:	80 95       	com	r24
    4d5c:	90 95       	com	r25
    4d5e:	9b 01       	movw	r18, r22
    4d60:	ac 01       	movw	r20, r24
    4d62:	bd 01       	movw	r22, r26
    4d64:	cf 01       	movw	r24, r30
    4d66:	08 95       	ret

00004d68 <__umulhisi3>:
    4d68:	a2 9f       	mul	r26, r18
    4d6a:	b0 01       	movw	r22, r0
    4d6c:	b3 9f       	mul	r27, r19
    4d6e:	c0 01       	movw	r24, r0
    4d70:	a3 9f       	mul	r26, r19
    4d72:	70 0d       	add	r23, r0
    4d74:	81 1d       	adc	r24, r1
    4d76:	11 24       	eor	r1, r1
    4d78:	91 1d       	adc	r25, r1
    4d7a:	b2 9f       	mul	r27, r18
    4d7c:	70 0d       	add	r23, r0
    4d7e:	81 1d       	adc	r24, r1
    4d80:	11 24       	eor	r1, r1
    4d82:	91 1d       	adc	r25, r1
    4d84:	08 95       	ret

00004d86 <_exit>:
    4d86:	f8 94       	cli

00004d88 <__stop_program>:
    4d88:	ff cf       	rjmp	.-2      	; 0x4d88 <__stop_program>
