
Self_RX_TX_Segment_Professor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000006ce  00000762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080010c  0080010c  0000076e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000076e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af7  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000860  00000000  00000000  0000134f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000597  00000000  00000000  00001baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00002148  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000504  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000797  00000000  00000000  000029a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000313b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	9b c0       	rjmp	.+310    	; 0x13c <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__vector_5>
  16:	00 00       	nop
  18:	0e c1       	rjmp	.+540    	; 0x236 <__vector_6>
  1a:	00 00       	nop
  1c:	45 c1       	rjmp	.+650    	; 0x2a8 <__vector_7>
  1e:	00 00       	nop
  20:	7c c1       	rjmp	.+760    	; 0x31a <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	93 c2       	rjmp	.+1318   	; 0x550 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c2       	rjmp	.+1148   	; 0x4b6 <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	97 c1       	rjmp	.+814    	; 0x3a8 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 31       	cpi	r26, 0x1F	; 31
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a7 d2       	rcall	.+1358   	; 0x612 <main>
  c4:	02 c3       	rjmp	.+1540   	; 0x6ca <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <UART1_Putch>:
unsigned char up_count1;
unsigned char down_count1;


void UART1_Putch(char ch)	//송신 기본함수
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	1f 92       	push	r1
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR1A & 0x20));
  d4:	00 00       	nop
  d6:	8b e9       	ldi	r24, 0x9B	; 155
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	fc 01       	movw	r30, r24
  dc:	80 81       	ld	r24, Z
  de:	88 2f       	mov	r24, r24
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	80 72       	andi	r24, 0x20	; 32
  e4:	99 27       	eor	r25, r25
  e6:	89 2b       	or	r24, r25
  e8:	b1 f3       	breq	.-20     	; 0xd6 <UART1_Putch+0xe>

	UDR1 = ch;
  ea:	8c e9       	ldi	r24, 0x9C	; 156
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	29 81       	ldd	r18, Y+1	; 0x01
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
}
  f4:	00 00       	nop
  f6:	0f 90       	pop	r0
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <SendCMD>:


void SendCMD(char cmd, char data)	//규칙 만든 것에 해당하는 송신함수 만든것
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	00 d0       	rcall	.+0      	; 0x104 <SendCMD+0x6>
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	89 83       	std	Y+1, r24	; 0x01
 10a:	6a 83       	std	Y+2, r22	; 0x02
	UART1_Putch(0x02);
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	dc df       	rcall	.-72     	; 0xc8 <UART1_Putch>
	UART1_Putch(cmd);
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	da df       	rcall	.-76     	; 0xc8 <UART1_Putch>
	if(cmd == 'A') UART1_Putch(data + '0');
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	81 34       	cpi	r24, 0x41	; 65
 118:	21 f4       	brne	.+8      	; 0x122 <SendCMD+0x24>
 11a:	8a 81       	ldd	r24, Y+2	; 0x02
 11c:	80 5d       	subi	r24, 0xD0	; 208
 11e:	d4 df       	rcall	.-88     	; 0xc8 <UART1_Putch>
 120:	05 c0       	rjmp	.+10     	; 0x12c <SendCMD+0x2e>
	else if(cmd == 'B')	UART1_Putch(data);
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	82 34       	cpi	r24, 0x42	; 66
 126:	11 f4       	brne	.+4      	; 0x12c <SendCMD+0x2e>
 128:	8a 81       	ldd	r24, Y+2	; 0x02
	UART1_Putch(0x03);
 12a:	ce df       	rcall	.-100    	; 0xc8 <UART1_Putch>
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	cc df       	rcall	.-104    	; 0xc8 <UART1_Putch>
}
 130:	00 00       	nop
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <__vector_1>:




ISR(INT0_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 14c:	0f 92       	push	r0
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
	up_count0 = 0;
 16e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <up_count0>
	down_count0 = 0;
 172:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <down_count0>

	if(++my_number == 10) my_number = 0;
 176:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <my_number>
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <my_number>
 180:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <my_number>
 184:	8a 30       	cpi	r24, 0x0A	; 10
 186:	11 f4       	brne	.+4      	; 0x18c <__vector_1+0x50>
 188:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <my_number>
	
	SendCMD('A', my_number);
 18c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <my_number>
 190:	68 2f       	mov	r22, r24
 192:	81 e4       	ldi	r24, 0x41	; 65
 194:	b4 df       	rcall	.-152    	; 0xfe <SendCMD>

}
 196:	00 00       	nop
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	bf 91       	pop	r27
 1a2:	af 91       	pop	r26
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	7f 91       	pop	r23
 1aa:	6f 91       	pop	r22
 1ac:	5f 91       	pop	r21
 1ae:	4f 91       	pop	r20
 1b0:	3f 91       	pop	r19
 1b2:	2f 91       	pop	r18
 1b4:	0f 90       	pop	r0
 1b6:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1ba:	0f 90       	pop	r0
 1bc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_5>:


ISR(INT4_vect)
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1d6:	0f 92       	push	r0
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
	
	up_count0 = 0;
 1f8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <up_count0>
	down_count0 = 0;
 1fc:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <down_count0>

	SendCMD('C', 0);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	83 e4       	ldi	r24, 0x43	; 67
 204:	7c df       	rcall	.-264    	; 0xfe <SendCMD>
	
}
 206:	00 00       	nop
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	7f 91       	pop	r23
 21a:	6f 91       	pop	r22
 21c:	5f 91       	pop	r21
 21e:	4f 91       	pop	r20
 220:	3f 91       	pop	r19
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 22a:	0f 90       	pop	r0
 22c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__vector_6>:

ISR(INT5_vect)
{
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 246:	0f 92       	push	r0
 248:	2f 93       	push	r18
 24a:	3f 93       	push	r19
 24c:	4f 93       	push	r20
 24e:	5f 93       	push	r21
 250:	6f 93       	push	r22
 252:	7f 93       	push	r23
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
 258:	af 93       	push	r26
 25a:	bf 93       	push	r27
 25c:	ef 93       	push	r30
 25e:	ff 93       	push	r31
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
	up_count0 = 0;
 268:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <up_count0>
	down_count0 = 1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <down_count0>

	SendCMD('B', '1');
 272:	61 e3       	ldi	r22, 0x31	; 49
 274:	82 e4       	ldi	r24, 0x42	; 66
 276:	43 df       	rcall	.-378    	; 0xfe <SendCMD>
	
}
 278:	00 00       	nop
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 29c:	0f 90       	pop	r0
 29e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__vector_7>:

ISR(INT6_vect)
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2b8:	0f 92       	push	r0
 2ba:	2f 93       	push	r18
 2bc:	3f 93       	push	r19
 2be:	4f 93       	push	r20
 2c0:	5f 93       	push	r21
 2c2:	6f 93       	push	r22
 2c4:	7f 93       	push	r23
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25
 2ca:	af 93       	push	r26
 2cc:	bf 93       	push	r27
 2ce:	ef 93       	push	r30
 2d0:	ff 93       	push	r31
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
	
	up_count0 = 1;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <up_count0>
	down_count0 = 0;
 2e0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <down_count0>

	SendCMD('B', '0');
 2e4:	60 e3       	ldi	r22, 0x30	; 48
 2e6:	82 e4       	ldi	r24, 0x42	; 66
 2e8:	0a df       	rcall	.-492    	; 0xfe <SendCMD>
	
}
 2ea:	00 00       	nop
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	bf 91       	pop	r27
 2f6:	af 91       	pop	r26
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	7f 91       	pop	r23
 2fe:	6f 91       	pop	r22
 300:	5f 91       	pop	r21
 302:	4f 91       	pop	r20
 304:	3f 91       	pop	r19
 306:	2f 91       	pop	r18
 308:	0f 90       	pop	r0
 30a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 30e:	0f 90       	pop	r0
 310:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <__vector_8>:

ISR(INT7_vect)
{
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 32a:	0f 92       	push	r0
 32c:	2f 93       	push	r18
 32e:	3f 93       	push	r19
 330:	4f 93       	push	r20
 332:	5f 93       	push	r21
 334:	6f 93       	push	r22
 336:	7f 93       	push	r23
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	af 93       	push	r26
 33e:	bf 93       	push	r27
 340:	ef 93       	push	r30
 342:	ff 93       	push	r31
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
	up_count0 = 0;
 34c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <up_count0>
	down_count0 = 0;
 350:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <down_count0>

	if(my_number != 0) --my_number;
 354:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <my_number>
 358:	88 23       	and	r24, r24
 35a:	31 f0       	breq	.+12     	; 0x368 <__vector_8+0x4e>
 35c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <my_number>
 360:	81 50       	subi	r24, 0x01	; 1
 362:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <my_number>
 366:	03 c0       	rjmp	.+6      	; 0x36e <__vector_8+0x54>
	else my_number = 9;
 368:	89 e0       	ldi	r24, 0x09	; 9
 36a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <my_number>

	SendCMD('A', my_number);
 36e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <my_number>
 372:	68 2f       	mov	r22, r24
 374:	81 e4       	ldi	r24, 0x41	; 65
 376:	c3 de       	rcall	.-634    	; 0xfe <SendCMD>
}
 378:	00 00       	nop
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	ff 91       	pop	r31
 380:	ef 91       	pop	r30
 382:	bf 91       	pop	r27
 384:	af 91       	pop	r26
 386:	9f 91       	pop	r25
 388:	8f 91       	pop	r24
 38a:	7f 91       	pop	r23
 38c:	6f 91       	pop	r22
 38e:	5f 91       	pop	r21
 390:	4f 91       	pop	r20
 392:	3f 91       	pop	r19
 394:	2f 91       	pop	r18
 396:	0f 90       	pop	r0
 398:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 39c:	0f 90       	pop	r0
 39e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <__vector_30>:
char select = 0;



ISR(USART1_RX_vect)
{
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3b0:	0f 92       	push	r0
 3b2:	11 24       	eor	r1, r1
 3b4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 3b8:	0f 92       	push	r0
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
 3be:	ef 93       	push	r30
 3c0:	ff 93       	push	r31
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	1f 92       	push	r1
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
		up_count1 = 0;
		down_count1 = 0;
	}*/

	unsigned char ch;
	ch = UDR1; // 수신
 3cc:	8c e9       	ldi	r24, 0x9C	; 156
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	fc 01       	movw	r30, r24
 3d2:	80 81       	ld	r24, Z
 3d4:	89 83       	std	Y+1, r24	; 0x01

	if(RX == 0 && ch == 0x02) RX = 1;	//RX == 0 조건에서 시작해야한다, 이걸 생각 못했다.
 3d6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 3da:	88 23       	and	r24, r24
 3dc:	39 f4       	brne	.+14     	; 0x3ec <__vector_30+0x44>
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	82 30       	cpi	r24, 0x02	; 2
 3e2:	21 f4       	brne	.+8      	; 0x3ec <__vector_30+0x44>
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 3ea:	34 c0       	rjmp	.+104    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	else if(RX == 1)
 3ec:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	81 f4       	brne	.+32     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		if(ch == 0x03)
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
 3f6:	83 30       	cpi	r24, 0x03	; 3
 3f8:	31 f4       	brne	.+12     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		{
			rx_complete = 1;	//시작비트 받은 후 바로 정지비트 받을경우 이것도 신호 분석한다
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <rx_complete>
			RX = 0;	//다시 대기 단계로
 400:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 404:	27 c0       	rjmp	.+78     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		}
		else
		{
			cmd = ch;	//정지비트를 받지않았다면 다음은 커맨드로 저장
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <cmd>
			RX = 2;	//커맨드를 받았다면 단계를 하나더 진행시킨다
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 412:	20 c0       	rjmp	.+64     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		}
	}
	else if(RX == 2)	//단계 2일 경우
 414:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	81 f4       	brne	.+32     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	{
		if(ch == 0x03)	//정지비트를 받을 경우
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	83 30       	cpi	r24, 0x03	; 3
 420:	31 f4       	brne	.+12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		{
			rx_complete = 1;	//정지비트를 받았다면 신호 분석 한다
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <rx_complete>
			RX = 0;	//다시 대기 단계로
 428:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 42c:	13 c0       	rjmp	.+38     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		}
		else  //정지 비트를 받지 않았다면
		{
			data = ch;	//다음 신호는 데이터 신호
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <data>
			RX = 3;	//다음 단계로 
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 43a:	0c c0       	rjmp	.+24     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		}
	}
	else if(RX == 3)	//단계 3일 경우
 43c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 440:	83 30       	cpi	r24, 0x03	; 3
 442:	41 f4       	brne	.+16     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	{
		if(ch == 0x03) rx_complete = 1;	//정지비트를 받았다면 신호 분석 한다
 444:	89 81       	ldd	r24, Y+1	; 0x01
 446:	83 30       	cpi	r24, 0x03	; 3
 448:	19 f4       	brne	.+6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <rx_complete>
		RX = 0;	//다시 대기 단계 만들어준다
 450:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
	}

	if(rx_complete == 1)	//신호 분석하는 단계
 454:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <rx_complete>
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	e1 f4       	brne	.+56     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
	{
		if(cmd == 'A') your_number = data - '0';	//이부분 내꺼랑 차이나는듯? data로 변수 한번 더 거침
 45c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <cmd>
 460:	81 34       	cpi	r24, 0x41	; 65
 462:	31 f4       	brne	.+12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 464:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <data>
 468:	80 53       	subi	r24, 0x30	; 48
 46a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <your_number>
 46e:	10 c0       	rjmp	.+32     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		else if(cmd == 'B') select = data - '0' + 1;	//1: up, 2:down
 470:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <cmd>
 474:	82 34       	cpi	r24, 0x42	; 66
 476:	31 f4       	brne	.+12     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 478:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <data>
 47c:	8f 52       	subi	r24, 0x2F	; 47
 47e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <select>
 482:	06 c0       	rjmp	.+12     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		else if(cmd == 'C') select = 0;	//0 : stop
 484:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <cmd>
 488:	83 34       	cpi	r24, 0x43	; 67
 48a:	11 f4       	brne	.+4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 48c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <select>

		rx_complete = 0;	//신호분석 플래그 지움
 490:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rx_complete>
	}
}
 494:	00 00       	nop
 496:	0f 90       	pop	r0
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	9f 91       	pop	r25
 4a2:	8f 91       	pop	r24
 4a4:	0f 90       	pop	r0
 4a6:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 4aa:	0f 90       	pop	r0
 4ac:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4b0:	0f 90       	pop	r0
 4b2:	1f 90       	pop	r1
 4b4:	18 95       	reti

000004b6 <__vector_14>:

ISR(TIMER1_OVF_vect)
{
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4be:	0f 92       	push	r0
 4c0:	11 24       	eor	r1, r1
 4c2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 4c6:	0f 92       	push	r0
 4c8:	2f 93       	push	r18
 4ca:	3f 93       	push	r19
 4cc:	8f 93       	push	r24
 4ce:	9f 93       	push	r25
 4d0:	ef 93       	push	r30
 4d2:	ff 93       	push	r31
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 49911; //타이머카운터 1초만들기 위한 초기값 재설정
 4dc:	8c e4       	ldi	r24, 0x4C	; 76
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	27 ef       	ldi	r18, 0xF7	; 247
 4e2:	32 ec       	ldi	r19, 0xC2	; 194
 4e4:	fc 01       	movw	r30, r24
 4e6:	31 83       	std	Z+1, r19	; 0x01
 4e8:	20 83       	st	Z, r18
	{
		if(your_number != 0) --your_number;
		else your_number = 9;
	}*/

	if(select == 1)
 4ea:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <select>
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	61 f4       	brne	.+24     	; 0x50a <__vector_14+0x54>
	{
		if(++your_number == 10) your_number = 0;
 4f2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <your_number>
 4f6:	8f 5f       	subi	r24, 0xFF	; 255
 4f8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <your_number>
 4fc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <your_number>
 500:	8a 30       	cpi	r24, 0x0A	; 10
 502:	a1 f4       	brne	.+40     	; 0x52c <__vector_14+0x76>
 504:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <your_number>
		if(your_number != 0) --your_number;
		else your_number = 9;
	}
	
	
}
 508:	11 c0       	rjmp	.+34     	; 0x52c <__vector_14+0x76>
	if(select == 1)
	{
		if(++your_number == 10) your_number = 0;
	}
	
	else if(select== 2)
 50a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <select>
 50e:	82 30       	cpi	r24, 0x02	; 2
 510:	69 f4       	brne	.+26     	; 0x52c <__vector_14+0x76>
	{
		if(your_number != 0) --your_number;
 512:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <your_number>
 516:	88 23       	and	r24, r24
 518:	31 f0       	breq	.+12     	; 0x526 <__vector_14+0x70>
 51a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <your_number>
 51e:	81 50       	subi	r24, 0x01	; 1
 520:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <your_number>
		else your_number = 9;
	}
	
	
}
 524:	03 c0       	rjmp	.+6      	; 0x52c <__vector_14+0x76>
	}
	
	else if(select== 2)
	{
		if(your_number != 0) --your_number;
		else your_number = 9;
 526:	89 e0       	ldi	r24, 0x09	; 9
 528:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <your_number>
	}
	
	
}
 52c:	00 00       	nop
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	ff 91       	pop	r31
 534:	ef 91       	pop	r30
 536:	9f 91       	pop	r25
 538:	8f 91       	pop	r24
 53a:	3f 91       	pop	r19
 53c:	2f 91       	pop	r18
 53e:	0f 90       	pop	r0
 540:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 544:	0f 90       	pop	r0
 546:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 54a:	0f 90       	pop	r0
 54c:	1f 90       	pop	r1
 54e:	18 95       	reti

00000550 <__vector_10>:

ISR(TIMER2_OVF_vect)
{
 550:	1f 92       	push	r1
 552:	0f 92       	push	r0
 554:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 558:	0f 92       	push	r0
 55a:	11 24       	eor	r1, r1
 55c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 560:	0f 92       	push	r0
 562:	2f 93       	push	r18
 564:	3f 93       	push	r19
 566:	8f 93       	push	r24
 568:	9f 93       	push	r25
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 178;	//타이머카운터 4.99ms로 동적구동을 위한 초기값 재설정
 576:	84 e4       	ldi	r24, 0x44	; 68
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	22 eb       	ldi	r18, 0xB2	; 178
 57c:	fc 01       	movw	r30, r24
 57e:	20 83       	st	Z, r18

	if(display_on_number == 1)
 580:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <display_on_number>
 584:	81 30       	cpi	r24, 0x01	; 1
 586:	c1 f4       	brne	.+48     	; 0x5b8 <__vector_10+0x68>
	{
		PORTG = display_on_number;
 588:	85 e6       	ldi	r24, 0x65	; 101
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <display_on_number>
 590:	fc 01       	movw	r30, r24
 592:	20 83       	st	Z, r18
		PORTA = ~segment2[my_number];
 594:	8b e3       	ldi	r24, 0x3B	; 59
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <my_number>
 59c:	02 2e       	mov	r0, r18
 59e:	00 0c       	add	r0, r0
 5a0:	33 0b       	sbc	r19, r19
 5a2:	20 50       	subi	r18, 0x00	; 0
 5a4:	3f 4f       	sbci	r19, 0xFF	; 255
 5a6:	f9 01       	movw	r30, r18
 5a8:	20 81       	ld	r18, Z
 5aa:	20 95       	com	r18
 5ac:	fc 01       	movw	r30, r24
 5ae:	20 83       	st	Z, r18
		display_on_number = 8;
 5b0:	88 e0       	ldi	r24, 0x08	; 8
 5b2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <display_on_number>
	{
		PORTG = display_on_number;
		PORTA = ~segment2[your_number];
		display_on_number = 1;
	}
}
 5b6:	1b c0       	rjmp	.+54     	; 0x5ee <__vector_10+0x9e>
		PORTG = display_on_number;
		PORTA = ~segment2[my_number];
		display_on_number = 8;
	}
	
	else if(display_on_number == 8)
 5b8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <display_on_number>
 5bc:	88 30       	cpi	r24, 0x08	; 8
 5be:	b9 f4       	brne	.+46     	; 0x5ee <__vector_10+0x9e>
	{
		PORTG = display_on_number;
 5c0:	85 e6       	ldi	r24, 0x65	; 101
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <display_on_number>
 5c8:	fc 01       	movw	r30, r24
 5ca:	20 83       	st	Z, r18
		PORTA = ~segment2[your_number];
 5cc:	8b e3       	ldi	r24, 0x3B	; 59
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <your_number>
 5d4:	02 2e       	mov	r0, r18
 5d6:	00 0c       	add	r0, r0
 5d8:	33 0b       	sbc	r19, r19
 5da:	20 50       	subi	r18, 0x00	; 0
 5dc:	3f 4f       	sbci	r19, 0xFF	; 255
 5de:	f9 01       	movw	r30, r18
 5e0:	20 81       	ld	r18, Z
 5e2:	20 95       	com	r18
 5e4:	fc 01       	movw	r30, r24
 5e6:	20 83       	st	Z, r18
		display_on_number = 1;
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <display_on_number>
	}
}
 5ee:	00 00       	nop
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	ff 91       	pop	r31
 5f6:	ef 91       	pop	r30
 5f8:	9f 91       	pop	r25
 5fa:	8f 91       	pop	r24
 5fc:	3f 91       	pop	r19
 5fe:	2f 91       	pop	r18
 600:	0f 90       	pop	r0
 602:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 606:	0f 90       	pop	r0
 608:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <main>:



int main(void)
{
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	cd b7       	in	r28, 0x3d	; 61
 618:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = 0xFF;	//세그먼트 표현부분 출력
 61a:	8a e3       	ldi	r24, 0x3A	; 58
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	2f ef       	ldi	r18, 0xFF	; 255
 620:	fc 01       	movw	r30, r24
 622:	20 83       	st	Z, r18
	DDRG = 0xFF;	//세가먼트 전원부분 출력
 624:	84 e6       	ldi	r24, 0x64	; 100
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	2f ef       	ldi	r18, 0xFF	; 255
 62a:	fc 01       	movw	r30, r24
 62c:	20 83       	st	Z, r18
	DDRE = 0x0; //스위치 연결 부분 입력
 62e:	82 e2       	ldi	r24, 0x22	; 34
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	fc 01       	movw	r30, r24
 634:	10 82       	st	Z, r1

	EICRA = (2 << ISC00);	 //INT 3 하강에지
 636:	8a e6       	ldi	r24, 0x6A	; 106
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	22 e0       	ldi	r18, 0x02	; 2
 63c:	fc 01       	movw	r30, r24
 63e:	20 83       	st	Z, r18
	EICRB = (2 << ISC40) | (2 << ISC50) | (2 << ISC60) | (2 << ISC70); //INT 4,5,6,7 하강에지
 640:	8a e5       	ldi	r24, 0x5A	; 90
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	2a ea       	ldi	r18, 0xAA	; 170
 646:	fc 01       	movw	r30, r24
 648:	20 83       	st	Z, r18
	EIMSK = (1 << INT0) | (1 << INT4) |  (1 << INT5) |  (1 << INT6) |  (1 << INT7);	//INT 모두 켜기
 64a:	89 e5       	ldi	r24, 0x59	; 89
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	21 ef       	ldi	r18, 0xF1	; 241
 650:	fc 01       	movw	r30, r24
 652:	20 83       	st	Z, r18

	TCCR1A = 0x0;
 654:	8f e4       	ldi	r24, 0x4F	; 79
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	fc 01       	movw	r30, r24
 65a:	10 82       	st	Z, r1
	TCCR1B = 0x05; //일반모드, 1024분주
 65c:	8e e4       	ldi	r24, 0x4E	; 78
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	25 e0       	ldi	r18, 0x05	; 5
 662:	fc 01       	movw	r30, r24
 664:	20 83       	st	Z, r18
	TCNT1 = 49911; //타이머카운터 1초만들기 위한 초기값
 666:	8c e4       	ldi	r24, 0x4C	; 76
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	27 ef       	ldi	r18, 0xF7	; 247
 66c:	32 ec       	ldi	r19, 0xC2	; 194
 66e:	fc 01       	movw	r30, r24
 670:	31 83       	std	Z+1, r19	; 0x01
 672:	20 83       	st	Z, r18
	
	TCCR2 = 0x05;	//일반모드, 1024분주
 674:	85 e4       	ldi	r24, 0x45	; 69
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	25 e0       	ldi	r18, 0x05	; 5
 67a:	fc 01       	movw	r30, r24
 67c:	20 83       	st	Z, r18
	TCNT1 = 178;	//4.99ms로 동적구동을 위한 초기값
 67e:	8c e4       	ldi	r24, 0x4C	; 76
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	22 eb       	ldi	r18, 0xB2	; 178
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	fc 01       	movw	r30, r24
 688:	31 83       	std	Z+1, r19	; 0x01
 68a:	20 83       	st	Z, r18

	TIMSK = 0b01000100; //TOIE1 = 1, TOIE2 = 1, 타이머 카운터 1 2 오버플로우 인터럽트 인에이블
 68c:	87 e5       	ldi	r24, 0x57	; 87
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	24 e4       	ldi	r18, 0x44	; 68
 692:	fc 01       	movw	r30, r24
 694:	20 83       	st	Z, r18


	sei();	//모든 INT 활성화
 696:	78 94       	sei

	UART_Init();
 698:	01 d0       	rcall	.+2      	; 0x69c <UART_Init>

	while(1)
	{
		
	}
 69a:	ff cf       	rjmp	.-2      	; 0x69a <main+0x88>

0000069c <UART_Init>:
}

void UART_Init(void)
{
 69c:	cf 93       	push	r28
 69e:	df 93       	push	r29
 6a0:	cd b7       	in	r28, 0x3d	; 61
 6a2:	de b7       	in	r29, 0x3e	; 62
	

	UCSR1B = 0x98;	//RXCIEN = 1 수신완료 인터럽트 인에이블, RXEN1 = 1 수신기 인에이블, TXEN1 = 1 송신기 인에이블
 6a4:	8a e9       	ldi	r24, 0x9A	; 154
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	28 e9       	ldi	r18, 0x98	; 152
 6aa:	fc 01       	movw	r30, r24
 6ac:	20 83       	st	Z, r18
	UCSR1C = 0x06;
 6ae:	8d e9       	ldi	r24, 0x9D	; 157
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	26 e0       	ldi	r18, 0x06	; 6
 6b4:	fc 01       	movw	r30, r24
 6b6:	20 83       	st	Z, r18
	UBRR1L = 103;
 6b8:	89 e9       	ldi	r24, 0x99	; 153
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	27 e6       	ldi	r18, 0x67	; 103
 6be:	fc 01       	movw	r30, r24
 6c0:	20 83       	st	Z, r18
}
 6c2:	00 00       	nop
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	08 95       	ret

000006ca <_exit>:
 6ca:	f8 94       	cli

000006cc <__stop_program>:
 6cc:	ff cf       	rjmp	.-2      	; 0x6cc <__stop_program>
