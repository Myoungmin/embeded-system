
MP3_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c0  00800100  000027b8  0000284c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000534  008002c0  008002c0  00002a0c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001f00  00000000  00000000  00002a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00042c8c  00000000  00000000  0000497c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fe4  00000000  00000000  00047608  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000bca1  00000000  00000000  0004a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000b804  00000000  00000000  00056290  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000f15a  00000000  00000000  00061a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00048fe0  00000000  00000000  00070bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001ec0  00000000  00000000  000b9bce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	36 c4       	rjmp	.+2156   	; 0x86e <__ctors_end>
       2:	00 00       	nop
       4:	52 c4       	rjmp	.+2212   	; 0x8aa <__bad_interrupt>
       6:	00 00       	nop
       8:	50 c4       	rjmp	.+2208   	; 0x8aa <__bad_interrupt>
       a:	00 00       	nop
       c:	4e c4       	rjmp	.+2204   	; 0x8aa <__bad_interrupt>
       e:	00 00       	nop
      10:	4c c4       	rjmp	.+2200   	; 0x8aa <__bad_interrupt>
      12:	00 00       	nop
      14:	f3 c4       	rjmp	.+2534   	; 0x9fc <__vector_5>
      16:	00 00       	nop
      18:	48 c4       	rjmp	.+2192   	; 0x8aa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	46 c4       	rjmp	.+2188   	; 0x8aa <__bad_interrupt>
      1e:	00 00       	nop
      20:	04 c5       	rjmp	.+2568   	; 0xa2a <__vector_8>
      22:	00 00       	nop
      24:	42 c4       	rjmp	.+2180   	; 0x8aa <__bad_interrupt>
      26:	00 00       	nop
      28:	40 c4       	rjmp	.+2176   	; 0x8aa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3e c4       	rjmp	.+2172   	; 0x8aa <__bad_interrupt>
      2e:	00 00       	nop
      30:	3c c4       	rjmp	.+2168   	; 0x8aa <__bad_interrupt>
      32:	00 00       	nop
      34:	3a c4       	rjmp	.+2164   	; 0x8aa <__bad_interrupt>
      36:	00 00       	nop
      38:	38 c4       	rjmp	.+2160   	; 0x8aa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	36 c4       	rjmp	.+2156   	; 0x8aa <__bad_interrupt>
      3e:	00 00       	nop
      40:	34 c4       	rjmp	.+2152   	; 0x8aa <__bad_interrupt>
      42:	00 00       	nop
      44:	32 c4       	rjmp	.+2148   	; 0x8aa <__bad_interrupt>
      46:	00 00       	nop
      48:	30 c4       	rjmp	.+2144   	; 0x8aa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2e c4       	rjmp	.+2140   	; 0x8aa <__bad_interrupt>
      4e:	00 00       	nop
      50:	2c c4       	rjmp	.+2136   	; 0x8aa <__bad_interrupt>
      52:	00 00       	nop
      54:	2a c4       	rjmp	.+2132   	; 0x8aa <__bad_interrupt>
      56:	00 00       	nop
      58:	28 c4       	rjmp	.+2128   	; 0x8aa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	26 c4       	rjmp	.+2124   	; 0x8aa <__bad_interrupt>
      5e:	00 00       	nop
      60:	24 c4       	rjmp	.+2120   	; 0x8aa <__bad_interrupt>
      62:	00 00       	nop
      64:	22 c4       	rjmp	.+2116   	; 0x8aa <__bad_interrupt>
      66:	00 00       	nop
      68:	20 c4       	rjmp	.+2112   	; 0x8aa <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1e c4       	rjmp	.+2108   	; 0x8aa <__bad_interrupt>
      6e:	00 00       	nop
      70:	1c c4       	rjmp	.+2104   	; 0x8aa <__bad_interrupt>
      72:	00 00       	nop
      74:	1a c4       	rjmp	.+2100   	; 0x8aa <__bad_interrupt>
      76:	00 00       	nop
      78:	e2 c4       	rjmp	.+2500   	; 0xa3e <__vector_30>
      7a:	00 00       	nop
      7c:	10 c5       	rjmp	.+2592   	; 0xa9e <__vector_31>
      7e:	00 00       	nop
      80:	14 c4       	rjmp	.+2088   	; 0x8aa <__bad_interrupt>
      82:	00 00       	nop
      84:	12 c4       	rjmp	.+2084   	; 0x8aa <__bad_interrupt>
      86:	00 00       	nop
      88:	10 c4       	rjmp	.+2080   	; 0x8aa <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	bf 00       	.word	0x00bf	; ????
      8e:	03 02       	muls	r16, r19
      90:	03 04       	cpc	r0, r3
      92:	03 05       	cpc	r16, r3
      94:	04 06       	cpc	r0, r20
      96:	0a 00       	.word	0x000a	; ????
      98:	fe 07       	cpc	r31, r30
      9a:	fe 07       	cpc	r31, r30
      9c:	00 01       	movw	r0, r0
      9e:	42 02       	muls	r20, r18
      a0:	88 07       	cpc	r24, r24
      a2:	c4 20       	and	r12, r4
      a4:	05 00       	.word	0x0005	; ????
      a6:	62 07       	cpc	r22, r18
      a8:	21 07       	cpc	r18, r17
      aa:	39 43       	sbci	r19, 0x39	; 57
      ac:	c7 a0       	ldd	r12, Z+39	; 0x27
      ae:	04 22       	and	r0, r20
      b0:	07 9b       	sbis	0x00, 7	; 0
      b2:	52 47       	sbci	r21, 0x72	; 114
      b4:	62 09       	sbc	r22, r2
      b6:	23 0e       	add	r2, r19
      b8:	3d 42       	sbci	r19, 0x2D	; 45
      ba:	4f 29       	or	r20, r15
      bc:	49 06       	cpc	r4, r25
      be:	a5 32       	cpi	r26, 0x25	; 37
      c0:	28 a5       	ldd	r18, Y+40	; 0x28
      c2:	24 01       	movw	r4, r8
      c4:	24 0c       	add	r2, r4
      c6:	3d 42       	sbci	r19, 0x2D	; 45
      c8:	57 b6       	in	r5, 0x37	; 55
      ca:	d4 b6       	in	r13, 0x34	; 52
      cc:	24 d9       	rcall	.-3512   	; 0xfffff316 <__eeprom_end+0xff7ef316>
      ce:	22 00       	.word	0x0022	; ????
      d0:	25 0c       	add	r2, r5
      d2:	3d 42       	sbci	r19, 0x2D	; 45
      d4:	4f a4       	ldd	r4, Y+47	; 0x2f
      d6:	74 ab       	std	Z+52, r23	; 0x34
      d8:	b4 48       	sbci	r27, 0x84	; 132
      da:	09 00       	.word	0x0009	; ????
      dc:	26 0d       	add	r18, r6
      de:	3d 42       	sbci	r19, 0x2D	; 45
      e0:	4f 96       	adiw	r24, 0x1f	; 31
      e2:	44 49       	sbci	r20, 0x94	; 148
      e4:	56 49       	sbci	r21, 0x96	; 150
      e6:	a4 48       	sbci	r26, 0x84	; 132
      e8:	09 27       	eor	r16, r25
      ea:	06 19       	sub	r16, r6
      ec:	53 c7       	rjmp	.+3750   	; 0xf94 <u8g2_font_setup_decode+0xe>
      ee:	00 28       	or	r0, r0
      f0:	08 bb       	out	0x18, r16	; 24
      f2:	42 57       	subi	r20, 0x72	; 114
      f4:	52 aa       	std	Z+50, r5	; 0x32
      f6:	15 29       	or	r17, r5
      f8:	09 bb       	out	0x19, r16	; 25
      fa:	42 47       	sbci	r20, 0x72	; 114
      fc:	56 aa       	std	Z+54, r5	; 0x36
      fe:	94 00       	.word	0x0094	; ????
     100:	2a 0a       	sbc	r2, r26
     102:	2d 46       	sbci	r18, 0x6D	; 109
     104:	47 96       	adiw	r24, 0x17	; 23
     106:	54 06       	cpc	r5, r20
     108:	a5 2d       	mov	r26, r5
     10a:	2b 0a       	sbc	r2, r27
     10c:	2d 46       	sbci	r18, 0x6D	; 109
     10e:	57 18       	sub	r5, r7
     110:	0d 52       	subi	r16, 0x2D	; 45
     112:	18 01       	movw	r2, r16
     114:	2c 07       	cpc	r18, r28
     116:	9b 3e       	cpi	r25, 0xEB	; 235
     118:	8f 52       	subi	r24, 0x2F	; 47
     11a:	02 2d       	mov	r16, r2
     11c:	06 0d       	add	r16, r6
     11e:	4e c7       	rjmp	.+3740   	; 0xfbc <u8g2_font_setup_decode+0x36>
     120:	20 2e       	mov	r2, r16
     122:	08 9b       	sbis	0x01, 0	; 1
     124:	3e 4f       	sbci	r19, 0xFE	; 254
     126:	b2 24       	eor	r11, r2
     128:	00 2f       	mov	r16, r16
     12a:	08 3d       	cpi	r16, 0xD8	; 216
     12c:	42 67       	ori	r20, 0x72	; 114
     12e:	ad 63       	ori	r26, 0x3D	; 61
     130:	08 30       	cpi	r16, 0x08	; 8
     132:	0b 3d       	cpi	r16, 0xDB	; 219
     134:	42 57       	subi	r20, 0x72	; 114
     136:	96 d4       	rcall	.+2348   	; 0xa64 <__vector_30+0x26>
     138:	6c 49       	sbci	r22, 0x9C	; 156
     13a:	2d 02       	muls	r18, r29
     13c:	31 0a       	sbc	r3, r17
     13e:	3d 42       	sbci	r19, 0x2D	; 45
     140:	57 26       	eor	r5, r23
     142:	25 61       	ori	r18, 0x15	; 21
     144:	d3 20       	and	r13, r3
     146:	32 0c       	add	r3, r2
     148:	3d 42       	sbci	r19, 0x2D	; 45
     14a:	cf 92       	push	r12
     14c:	85 91       	lpm	r24, Z+
     14e:	94 85       	ldd	r25, Z+12	; 0x0c
     150:	83 00       	.word	0x0083	; ????
     152:	33 0c       	add	r3, r3
     154:	3d 42       	sbci	r19, 0x2D	; 45
     156:	c7 20       	and	r12, r7
     158:	66 99       	sbic	0x0c, 6	; 12
     15a:	aa 25       	eor	r26, r10
     15c:	0b 00       	.word	0x000b	; ????
     15e:	34 0c       	add	r3, r4
     160:	3d 42       	sbci	r19, 0x2D	; 45
     162:	5f 26       	eor	r5, r31
     164:	25 a5       	ldd	r18, Z+45	; 0x2d
     166:	64 d0       	rcall	.+200    	; 0x230 <__trampolines_end+0x1a4>
     168:	c2 04       	cpc	r12, r2
     16a:	35 0b       	sbc	r19, r21
     16c:	3d 42       	sbci	r19, 0x2D	; 45
     16e:	c7 31       	cpi	r28, 0x17	; 23
     170:	31 85       	ldd	r19, Z+9	; 0x09
     172:	5a b2       	in	r5, 0x1a	; 26
     174:	00 36       	cpi	r16, 0x60	; 96
     176:	0c 3d       	cpi	r16, 0xDC	; 220
     178:	42 97       	sbiw	r24, 0x12	; 18
     17a:	94 85       	ldd	r25, Z+12	; 0x0c
     17c:	89 49       	sbci	r24, 0x99	; 153
     17e:	4b 16       	cp	r4, r27
     180:	00 37       	cpi	r16, 0x70	; 112
     182:	0b 3d       	cpi	r16, 0xDB	; 219
     184:	42 c7       	rjmp	.+3716   	; 0x100a <u8g2_font_decode_len+0xe>
     186:	20 66       	ori	r18, 0x60	; 96
     188:	61 56       	subi	r22, 0x61	; 97
     18a:	cc 00       	.word	0x00cc	; ????
     18c:	38 0c       	add	r3, r8
     18e:	3d 42       	sbci	r19, 0x2D	; 45
     190:	cf 92       	push	r12
     192:	69 c9       	rjmp	.-3374   	; 0xfffff466 <__eeprom_end+0xff7ef466>
     194:	92 69       	ori	r25, 0x92	; 146
     196:	c9 02       	muls	r28, r25
     198:	39 0c       	add	r3, r9
     19a:	3d 42       	sbci	r19, 0x2D	; 45
     19c:	cf 92       	push	r12
     19e:	49 8a       	std	Y+17, r4	; 0x11
     1a0:	12 66       	ori	r17, 0x62	; 98
     1a2:	91 04       	cpc	r9, r1
     1a4:	3a 0a       	sbc	r3, r26
     1a6:	bb 3e       	cpi	r27, 0xEB	; 235
     1a8:	4f b2       	in	r4, 0x1f	; 31
     1aa:	a4 c9       	rjmp	.-3256   	; 0xfffff4f4 <__eeprom_end+0xff7ef4f4>
     1ac:	92 00       	.word	0x0092	; ????
     1ae:	3b 09       	sbc	r19, r11
     1b0:	bb 3e       	cpi	r27, 0xEB	; 235
     1b2:	4f b2       	in	r4, 0x1f	; 31
     1b4:	a4 4a       	sbci	r26, 0xA4	; 164
     1b6:	09 3c       	cpi	r16, 0xC9	; 201
     1b8:	08 bc       	out	0x28, r0	; 40
     1ba:	42 5f       	subi	r20, 0xF2	; 242
     1bc:	d4 d8       	rcall	.-3672   	; 0xfffff366 <__eeprom_end+0xff7ef366>
     1be:	00 3d       	cpi	r16, 0xD0	; 208
     1c0:	08 1d       	adc	r16, r8
     1c2:	4a c7       	rjmp	.+3732   	; 0x1058 <u8g2_font_decode_len+0x5c>
     1c4:	a0 0e       	add	r10, r16
     1c6:	02 3e       	cpi	r16, 0xE2	; 226
     1c8:	08 bc       	out	0x28, r0	; 40
     1ca:	42 47       	sbci	r20, 0x72	; 114
     1cc:	d8 d4       	rcall	.+2480   	; 0xb7e <main+0x64>
     1ce:	06 3f       	cpi	r16, 0xF6	; 246
     1d0:	0a 3d       	cpi	r16, 0xDA	; 218
     1d2:	42 cf       	rjmp	.-380    	; 0x58 <__SREG__+0x19>
     1d4:	92 35       	cpi	r25, 0x52	; 82
     1d6:	e6 50       	subi	r30, 0x06	; 6
     1d8:	04 40       	sbci	r16, 0x04	; 4
     1da:	0c 3d       	cpi	r16, 0xDC	; 220
     1dc:	42 cf       	rjmp	.-380    	; 0x62 <__SREG__+0x23>
     1de:	92 49       	sbci	r25, 0x92	; 146
     1e0:	4b 62       	ori	r20, 0x2B	; 43
     1e2:	49 17       	cp	r20, r25
     1e4:	00 41       	sbci	r16, 0x10	; 16
     1e6:	0c 3d       	cpi	r16, 0xDC	; 220
     1e8:	42 57       	subi	r20, 0x72	; 114
     1ea:	96 d4       	rcall	.+2348   	; 0xb18 <u8g2_prepare+0x26>
     1ec:	b4 61       	ori	r27, 0x14	; 20
     1ee:	c8 b4       	in	r12, 0x28	; 40
     1f0:	00 42       	sbci	r16, 0x20	; 32
     1f2:	0d 3d       	cpi	r16, 0xDD	; 221
     1f4:	42 c7       	rjmp	.+3716   	; 0x107a <u8g2_font_decode_len+0x7e>
     1f6:	10 55       	subi	r17, 0x50	; 80
     1f8:	a2 64       	ori	r26, 0x42	; 66
     1fa:	aa 44       	sbci	r26, 0x4A	; 74
     1fc:	83 02       	muls	r24, r19
     1fe:	43 0a       	sbc	r4, r19
     200:	3d 42       	sbci	r19, 0x2D	; 45
     202:	cf 92       	push	r12
     204:	89 6d       	ori	r24, 0xD9	; 217
     206:	c9 02       	muls	r28, r25
     208:	44 0f       	add	r20, r20
     20a:	3d 42       	sbci	r19, 0x2D	; 45
     20c:	c7 10       	cpse	r12, r7
     20e:	55 a2       	std	Z+37, r5	; 0x25
     210:	24 4a       	sbci	r18, 0xA4	; 164
     212:	a2 24       	eor	r10, r2
     214:	1a 14       	cp	r1, r10
     216:	00 45       	sbci	r16, 0x50	; 80
     218:	0b 3d       	cpi	r16, 0xDB	; 219
     21a:	42 c7       	rjmp	.+3716   	; 0x10a0 <u8g2_font_decode_len+0xa4>
     21c:	31 1c       	adc	r3, r1
     21e:	92 30       	cpi	r25, 0x02	; 2
     220:	1c 04       	cpc	r1, r12
     222:	46 0a       	sbc	r4, r22
     224:	3d 42       	sbci	r19, 0x2D	; 45
     226:	c7 31       	cpi	r28, 0x17	; 23
     228:	1c 92       	st	X, r1
     22a:	b0 08       	sbc	r11, r0
     22c:	47 0b       	sbc	r20, r23
     22e:	3d 42       	sbci	r19, 0x2D	; 45
     230:	cf 92       	push	r12
     232:	89 a5       	ldd	r24, Y+41	; 0x29
     234:	2d 59       	subi	r18, 0x9D	; 157
     236:	00 48       	sbci	r16, 0x80	; 128
     238:	0a 3d       	cpi	r16, 0xDA	; 218
     23a:	42 47       	sbci	r20, 0x72	; 114
     23c:	66 1b       	sub	r22, r22
     23e:	86 cc       	rjmp	.-1780   	; 0xfffffb4c <__eeprom_end+0xff7efb4c>
     240:	16 49       	sbci	r17, 0x96	; 150
     242:	08 bb       	out	0x18, r16	; 24
     244:	42 c7       	rjmp	.+3716   	; 0x10ca <u8g2_font_decode_len+0xce>
     246:	12 75       	andi	r17, 0x52	; 82
     248:	19 4a       	sbci	r17, 0xA9	; 169
     24a:	0a 3d       	cpi	r16, 0xDA	; 218
     24c:	42 d7       	rcall	.+3716   	; 0x10d2 <u8g2_font_decode_len+0xd6>
     24e:	16 b6       	in	r1, 0x36	; 54
     250:	44 91       	lpm	r20, Z
     252:	04 4b       	sbci	r16, 0xB4	; 180
     254:	0d 3d       	cpi	r16, 0xDD	; 221
     256:	42 47       	sbci	r20, 0x72	; 114
     258:	26 25       	eor	r18, r6
     25a:	25 2d       	mov	r18, r5
     25c:	89 2a       	or	r8, r25
     25e:	59 00       	.word	0x0059	; ????
     260:	4c 08       	sbc	r4, r12
     262:	3d 42       	sbci	r19, 0x2D	; 45
     264:	47 d8       	rcall	.-3954   	; 0xfffff2f4 <__eeprom_end+0xff7ef2f4>
     266:	e3 20       	and	r14, r3
     268:	4d 0b       	sbc	r20, r29
     26a:	3d 42       	sbci	r19, 0x2D	; 45
     26c:	47 a6       	std	Z+47, r4	; 0x2f
     26e:	2d 4b       	sbci	r18, 0xBD	; 189
     270:	a2 d9       	rcall	.-3260   	; 0xfffff5b6 <__eeprom_end+0xff7ef5b6>
     272:	02 4e       	sbci	r16, 0xE2	; 226
     274:	0c 3d       	cpi	r16, 0xDC	; 220
     276:	42 47       	sbci	r20, 0x72	; 114
     278:	a6 4d       	sbci	r26, 0xD6	; 214
     27a:	4a 22       	and	r4, r26
     27c:	6d 5a       	subi	r22, 0xAD	; 173
     27e:	00 4f       	sbci	r16, 0xF0	; 240
     280:	0a 3d       	cpi	r16, 0xDA	; 218
     282:	42 cf       	rjmp	.-380    	; 0x108 <__trampolines_end+0x7c>
     284:	92 79       	andi	r25, 0x92	; 146
     286:	4b 16       	cp	r4, r27
     288:	00 50       	subi	r16, 0x00	; 0
     28a:	0c 3d       	cpi	r16, 0xDC	; 220
     28c:	42 c7       	rjmp	.+3716   	; 0x1112 <__stack+0x13>
     28e:	90 64       	ori	r25, 0x40	; 64
     290:	da a0       	ldd	r13, Y+34	; 0x22
     292:	84 45       	sbci	r24, 0x54	; 84
     294:	00 51       	subi	r16, 0x10	; 16
     296:	0a 45       	sbci	r16, 0x5A	; 90
     298:	3e cf       	rjmp	.-388    	; 0x116 <__trampolines_end+0x8a>
     29a:	92 79       	andi	r25, 0x92	; 146
     29c:	a9 ac       	ldd	r10, Y+57	; 0x39
     29e:	01 52       	subi	r16, 0x21	; 33
     2a0:	0d 3d       	cpi	r16, 0xDD	; 221
     2a2:	42 c7       	rjmp	.+3716   	; 0x1128 <u8g2_font_decode_glyph>
     2a4:	90 64       	ori	r25, 0x40	; 64
     2a6:	da a0       	ldd	r13, Y+34	; 0x22
     2a8:	94 2a       	or	r9, r20
     2aa:	59 00       	.word	0x0059	; ????
     2ac:	53 0b       	sbc	r21, r19
     2ae:	3d 42       	sbci	r19, 0x2D	; 45
     2b0:	cf 92       	push	r12
     2b2:	a9 ab       	std	Y+49, r26	; 0x31
     2b4:	96 2c       	mov	r9, r6
     2b6:	00 54       	subi	r16, 0x40	; 64
     2b8:	09 3d       	cpi	r16, 0xD9	; 217
     2ba:	42 c7       	rjmp	.+3716   	; 0x1140 <u8g2_font_decode_glyph+0x18>
     2bc:	20 85       	ldd	r18, Z+8	; 0x08
     2be:	3d 01       	movw	r6, r26
     2c0:	55 09       	sbc	r21, r5
     2c2:	3d 42       	sbci	r19, 0x2D	; 45
     2c4:	47 e6       	ldi	r20, 0x67	; 103
     2c6:	5b b2       	in	r5, 0x1b	; 27
     2c8:	00 56       	subi	r16, 0x60	; 96
     2ca:	0d 3d       	cpi	r16, 0xDD	; 221
     2cc:	42 47       	sbci	r20, 0x72	; 114
     2ce:	66 4b       	sbci	r22, 0xB6	; 182
     2d0:	4a 49       	sbci	r20, 0x9A	; 154
     2d2:	94 64       	ori	r25, 0x44	; 68
     2d4:	11 00       	.word	0x0011	; ????
     2d6:	57 0a       	sbc	r5, r23
     2d8:	3d 42       	sbci	r19, 0x2D	; 45
     2da:	47 e6       	ldi	r20, 0x67	; 103
     2dc:	92 28       	or	r9, r2
     2de:	c9 2d       	mov	r28, r9
     2e0:	58 0b       	sbc	r21, r24
     2e2:	3d 42       	sbci	r19, 0x2D	; 45
     2e4:	47 a6       	std	Z+47, r4	; 0x2f
     2e6:	25 b5       	in	r18, 0x25	; 37
     2e8:	4a 4d       	sbci	r20, 0xDA	; 218
     2ea:	0b 59       	subi	r16, 0x9B	; 155
     2ec:	0a 3d       	cpi	r16, 0xDA	; 218
     2ee:	42 47       	sbci	r20, 0x72	; 114
     2f0:	a6 25       	eor	r26, r6
     2f2:	b5 b0       	in	r11, 0x05	; 5
     2f4:	09 5a       	subi	r16, 0xA9	; 169
     2f6:	0a 3d       	cpi	r16, 0xDA	; 218
     2f8:	42 c7       	rjmp	.+3716   	; 0x117e <u8g2_font_decode_glyph+0x56>
     2fa:	20 66       	ori	r18, 0x60	; 96
     2fc:	1d 07       	cpc	r17, r29
     2fe:	01 5b       	subi	r16, 0xB1	; 177
     300:	08 bb       	out	0x18, r16	; 24
     302:	42 c7       	rjmp	.+3716   	; 0x1188 <u8g2_font_decode_glyph+0x60>
     304:	10 75       	andi	r17, 0x50	; 80
     306:	1a 5c       	subi	r17, 0xCA	; 202
     308:	08 3d       	cpi	r16, 0xD8	; 216
     30a:	42 47       	sbci	r20, 0x72	; 114
     30c:	98 76       	andi	r25, 0x68	; 104
     30e:	0c 5d       	subi	r16, 0xDC	; 220
     310:	08 bb       	out	0x18, r16	; 24
     312:	42 c7       	rjmp	.+3716   	; 0x1198 <u8g2_font_decode_glyph+0x70>
     314:	d4 69       	ori	r29, 0x94	; 148
     316:	08 5e       	subi	r16, 0xE8	; 232
     318:	08 1d       	adc	r16, r8
     31a:	52 57       	subi	r21, 0x72	; 114
     31c:	96 d4       	rcall	.+2348   	; 0xc4a <u8g2_send_buffer>
     31e:	02 5f       	subi	r16, 0xF2	; 242
     320:	06 0d       	add	r16, r6
     322:	3e c7       	rjmp	.+3708   	; 0x11a0 <u8g2_font_decode_glyph+0x78>
     324:	20 60       	ori	r18, 0x00	; 0
     326:	06 12       	cpse	r0, r22
     328:	5b 47       	sbci	r21, 0x7B	; 123
     32a:	14 61       	ori	r17, 0x14	; 20
     32c:	0a 2d       	mov	r16, r10
     32e:	42 cf       	rjmp	.-380    	; 0x1b4 <__trampolines_end+0x128>
     330:	9a 0c       	add	r9, r10
     332:	5a 32       	cpi	r21, 0x2A	; 42
     334:	04 62       	ori	r16, 0x24	; 36
     336:	0b 3d       	cpi	r16, 0xDB	; 219
     338:	42 47       	sbci	r20, 0x72	; 114
     33a:	58 31       	cpi	r21, 0x18	; 24
     33c:	69 93       	st	Y+, r22
     33e:	a2 00       	.word	0x00a2	; ????
     340:	63 0a       	sbc	r6, r19
     342:	2d 42       	sbci	r18, 0x2D	; 45
     344:	cf 92       	push	r12
     346:	89 59       	subi	r24, 0x99	; 153
     348:	b2 00       	.word	0x00b2	; ????
     34a:	64 0a       	sbc	r6, r20
     34c:	3d 42       	sbci	r19, 0x2D	; 45
     34e:	67 c5       	rjmp	.+2766   	; 0xe1e <u8g2_font_get_word+0x10>
     350:	b4 49       	sbci	r27, 0x94	; 148
     352:	8a 12       	cpse	r8, r26
     354:	65 0a       	sbc	r6, r21
     356:	2d 42       	sbci	r18, 0x2D	; 45
     358:	cf 92       	push	r12
     35a:	0d 43       	sbci	r16, 0x3D	; 61
     35c:	ba 00       	.word	0x00ba	; ????
     35e:	66 0b       	sbc	r22, r22
     360:	3d 42       	sbci	r19, 0x2D	; 45
     362:	97 54       	subi	r25, 0x47	; 71
     364:	c9 86       	std	Y+9, r12	; 0x09
     366:	28 ac       	ldd	r2, Y+56	; 0x38
     368:	01 67       	ori	r16, 0x71	; 113
     36a:	0c 3d       	cpi	r16, 0xDC	; 220
     36c:	3a cf       	rjmp	.-396    	; 0x1e2 <__trampolines_end+0x156>
     36e:	a0 69       	ori	r26, 0x90	; 144
     370:	c9 10       	cpse	r12, r9
     372:	6a c9       	rjmp	.-3372   	; 0xfffff648 <__eeprom_end+0xff7ef648>
     374:	02 68       	ori	r16, 0x82	; 130
     376:	0a 3d       	cpi	r16, 0xDA	; 218
     378:	42 47       	sbci	r20, 0x72	; 114
     37a:	58 31       	cpi	r21, 0x18	; 24
     37c:	69 b6       	in	r6, 0x39	; 57
     37e:	00 69       	ori	r16, 0x90	; 144
     380:	08 bb       	out	0x18, r16	; 24
     382:	42 4f       	sbci	r20, 0xF2	; 242
     384:	28 b5       	in	r18, 0x28	; 40
     386:	0c 6a       	ori	r16, 0xAC	; 172
     388:	0b cc       	rjmp	.-2026   	; 0xfffffba0 <__eeprom_end+0xff7efba0>
     38a:	3a 5f       	subi	r19, 0xFA	; 250
     38c:	ac d5       	rcall	.+2904   	; 0xee6 <u8g2_read_font_info+0x78>
     38e:	24 29       	or	r18, r4
     390:	51 00       	.word	0x0051	; ????
     392:	6b 0b       	sbc	r22, r27
     394:	3d 42       	sbci	r19, 0x2D	; 45
     396:	47 58       	subi	r20, 0x87	; 135
     398:	93 92       	.word	0x9293	; ????
     39a:	a9 92       	st	Y+, r10
     39c:	05 6c       	ori	r16, 0xC5	; 197
     39e:	08 bb       	out	0x18, r16	; 24
     3a0:	42 87       	std	Z+10, r20	; 0x0a
     3a2:	d4 cb       	rjmp	.-2136   	; 0xfffffb4c <__eeprom_end+0xff7efb4c>
     3a4:	00 6d       	ori	r16, 0xD0	; 208
     3a6:	0b 2d       	mov	r16, r11
     3a8:	42 87       	std	Z+10, r20	; 0x0a
     3aa:	d2 a2       	std	Z+34, r13	; 0x22
     3ac:	24 4a       	sbci	r18, 0xA4	; 164
     3ae:	a2 05       	cpc	r26, r2
     3b0:	6e 09       	sbc	r22, r14
     3b2:	2d 42       	sbci	r18, 0x2D	; 45
     3b4:	47 62       	ori	r20, 0x27	; 39
     3b6:	d2 6c       	ori	r29, 0xC2	; 194
     3b8:	01 6f       	ori	r16, 0xF1	; 241
     3ba:	09 2d       	mov	r16, r9
     3bc:	42 cf       	rjmp	.-380    	; 0x242 <__trampolines_end+0x1b6>
     3be:	92 d9       	rcall	.-3292   	; 0xfffff6e4 <__eeprom_end+0xff7ef6e4>
     3c0:	92 05       	cpc	r25, r2
     3c2:	70 0c       	add	r7, r0
     3c4:	3d 3a       	cpi	r19, 0xAD	; 173
     3c6:	47 62       	ori	r20, 0x27	; 39
     3c8:	d2 26       	eor	r13, r18
     3ca:	45 09       	sbc	r20, r5
     3cc:	43 00       	.word	0x0043	; ????
     3ce:	71 0a       	sbc	r7, r17
     3d0:	3d 3a       	cpi	r19, 0xAD	; 173
     3d2:	8f 69       	ori	r24, 0x9F	; 159
     3d4:	93 14       	cp	r9, r3
     3d6:	25 2c       	mov	r2, r5
     3d8:	72 09       	sbc	r23, r2
     3da:	2d 42       	sbci	r18, 0x2D	; 45
     3dc:	47 62       	ori	r20, 0x27	; 39
     3de:	12 8b       	std	Z+18, r17	; 0x12
     3e0:	00 73       	andi	r16, 0x30	; 48
     3e2:	09 2d       	mov	r16, r9
     3e4:	42 cf       	rjmp	.-380    	; 0x26a <__trampolines_end+0x1de>
     3e6:	92 1e       	adc	r9, r18
     3e8:	14 00       	.word	0x0014	; ????
     3ea:	74 0c       	add	r7, r4
     3ec:	3d 42       	sbci	r19, 0x2D	; 45
     3ee:	4f 98       	cbi	0x09, 7	; 9
     3f0:	0d 51       	subi	r16, 0x1D	; 29
     3f2:	58 8a       	std	Y+16, r5	; 0x10
     3f4:	14 00       	.word	0x0014	; ????
     3f6:	75 09       	sbc	r23, r5
     3f8:	2d 42       	sbci	r18, 0x2D	; 45
     3fa:	47 e6       	ldi	r20, 0x67	; 103
     3fc:	a4 28       	or	r10, r4
     3fe:	01 76       	andi	r16, 0x61	; 97
     400:	0b 2d       	mov	r16, r11
     402:	42 47       	sbci	r20, 0x72	; 114
     404:	a6 25       	eor	r26, r6
     406:	a5 24       	eor	r10, r5
     408:	8b 00       	.word	0x008b	; ????
     40a:	77 0a       	sbc	r7, r23
     40c:	2d 42       	sbci	r18, 0x2D	; 45
     40e:	47 66       	ori	r20, 0x67	; 103
     410:	49 94       	.word	0x9449	; ????
     412:	2e 00       	.word	0x002e	; ????
     414:	78 0a       	sbc	r7, r24
     416:	2d 42       	sbci	r18, 0x2D	; 45
     418:	47 96       	adiw	r24, 0x17	; 23
     41a:	d4 2a       	or	r13, r20
     41c:	b5 00       	.word	0x00b5	; ????
     41e:	79 0c       	add	r7, r9
     420:	3d 3a       	cpi	r19, 0xAD	; 173
     422:	47 66       	ori	r20, 0x67	; 103
     424:	52 94       	swap	r5
     426:	50 4b       	sbci	r21, 0xB0	; 176
     428:	16 00       	.word	0x0016	; ????
     42a:	7a 09       	sbc	r23, r10
     42c:	2d 42       	sbci	r18, 0x2D	; 45
     42e:	c7 a0       	ldd	r12, Z+39	; 0x27
     430:	b5 0d       	add	r27, r5
     432:	02 7b       	andi	r16, 0xB2	; 178
     434:	0a bc       	out	0x2a, r0	; 42
     436:	42 97       	sbiw	r24, 0x12	; 18
     438:	12 26       	eor	r1, r18
     43a:	62 14       	cp	r6, r2
     43c:	0a 7c       	andi	r16, 0xCA	; 202
     43e:	06 39       	cpi	r16, 0x96	; 150
     440:	43 c7       	rjmp	.+3718   	; 0x12c8 <u8g2_font_get_glyph_data+0x44>
     442:	21 7d       	andi	r18, 0xD1	; 209
     444:	0b bc       	out	0x2b, r0	; 43
     446:	42 87       	std	Z+10, r20	; 0x0a
     448:	18 85       	ldd	r17, Y+8	; 0x08
     44a:	4a 98       	cbi	0x09, 2	; 9
     44c:	48 00       	.word	0x0048	; ????
     44e:	7e 09       	sbc	r23, r14
     450:	1d 52       	subi	r17, 0x2D	; 45
     452:	4f a4       	ldd	r4, Y+47	; 0x2f
     454:	24 52       	subi	r18, 0x24	; 36
     456:	02 a0       	ldd	r0, Z+34	; 0x22
     458:	05 00       	.word	0x0005	; ????
     45a:	62 07       	cpc	r22, r18
     45c:	a1 07       	cpc	r26, r17
     45e:	39 43       	sbci	r19, 0x39	; 57
     460:	47 32       	cpi	r20, 0x27	; 39
     462:	08 a2       	std	Y+32, r0	; 0x20
     464:	0e 3d       	cpi	r16, 0xDE	; 222
     466:	3e 57       	subi	r19, 0x7E	; 126
     468:	36 28       	or	r3, r6
     46a:	51 12       	cpse	r5, r17
     46c:	25 d9       	rcall	.-3510   	; 0xfffff6b8 <__eeprom_end+0xff7ef6b8>
     46e:	10 45       	sbci	r17, 0x50	; 80
     470:	00 a3       	std	Z+32, r16	; 0x20
     472:	0c 3d       	cpi	r16, 0xDC	; 220
     474:	42 97       	sbiw	r24, 0x12	; 18
     476:	54 c9       	rjmp	.-3416   	; 0xfffff720 <__eeprom_end+0xff7ef720>
     478:	b6 30       	cpi	r27, 0x06	; 6
     47a:	52 14       	cp	r5, r2
     47c:	00 a4       	ldd	r0, Z+40	; 0x28
     47e:	0b 2d       	mov	r16, r11
     480:	42 47       	sbci	r20, 0x72	; 114
     482:	96 4c       	sbci	r25, 0xC6	; 198
     484:	49 b4       	in	r4, 0x29	; 41
     486:	64 01       	movw	r12, r8
     488:	a5 0d       	add	r26, r5
     48a:	45 3e       	cpi	r20, 0xE5	; 229
     48c:	47 a6       	std	Z+47, r4	; 0x2f
     48e:	25 b5       	in	r18, 0x25	; 37
     490:	68 90       	.word	0x9068	; ????
     492:	c2 12       	cpse	r12, r18
     494:	00 a6       	std	Z+40, r0	; 0x28
     496:	06 39       	cpi	r16, 0x96	; 150
     498:	43 c7       	rjmp	.+3718   	; 0x1320 <u8g2_font_get_glyph_data+0x9c>
     49a:	32 a7       	std	Z+42, r19	; 0x2a
     49c:	0b 45       	sbci	r16, 0x5B	; 91
     49e:	3e cf       	rjmp	.-388    	; 0x31c <__trampolines_end+0x290>
     4a0:	12 4e       	sbci	r17, 0xE2	; 226
     4a2:	9d c6       	rjmp	.+3386   	; 0x11de <u8g2_font_decode_glyph+0xb6>
     4a4:	64 01       	movw	r12, r8
     4a6:	a8 06       	cpc	r10, r24
     4a8:	8b 5e       	subi	r24, 0xEB	; 235
     4aa:	47 12       	cpse	r4, r23
     4ac:	a9 0d       	add	r26, r9
     4ae:	3d 42       	sbci	r19, 0x2D	; 45
     4b0:	cf 92       	push	r12
     4b2:	29 c9       	rjmp	.-3502   	; 0xfffff706 <__eeprom_end+0xff7ef706>
     4b4:	a4 24       	eor	r10, r4
     4b6:	5a b2       	in	r5, 0x1a	; 26
     4b8:	00 aa       	std	Z+48, r0	; 0x30
     4ba:	0a b4       	in	r0, 0x2a	; 42
     4bc:	46 cf       	rjmp	.-372    	; 0x34a <__trampolines_end+0x2be>
     4be:	10 29       	or	r17, r0
     4c0:	4a 71       	andi	r20, 0x1A	; 26
     4c2:	08 ab       	std	Y+48, r16	; 0x30
     4c4:	0c 2e       	mov	r0, r28
     4c6:	42 57       	subi	r20, 0x72	; 114
     4c8:	25 4a       	sbci	r18, 0xA5	; 165
     4ca:	a2 2c       	mov	r10, r2
     4cc:	ca a2       	std	Y+34, r12	; 0x22
     4ce:	00 ac       	ldd	r0, Z+56	; 0x38
     4d0:	07 94       	ror	r0
     4d2:	4a c7       	rjmp	.+3732   	; 0x1368 <u8g2_font_get_glyph_data+0xe4>
     4d4:	90 05       	cpc	r25, r0
     4d6:	ad 06       	cpc	r10, r29
     4d8:	8c 4e       	sbci	r24, 0xEC	; 236
     4da:	c7 10       	cpse	r12, r7
     4dc:	ae 0c       	add	r10, r14
     4de:	3d 42       	sbci	r19, 0x2D	; 45
     4e0:	cf 92       	push	r12
     4e2:	0d c9       	rjmp	.-3558   	; 0xfffff6fe <__eeprom_end+0xff7ef6fe>
     4e4:	34 69       	ori	r19, 0x94	; 148
     4e6:	c9 02       	muls	r28, r25
     4e8:	af 06       	cpc	r10, r31
     4ea:	0d 5e       	subi	r16, 0xED	; 237
     4ec:	c7 20       	and	r12, r7
     4ee:	b0 07       	cpc	r27, r16
     4f0:	9b 52       	subi	r25, 0x2B	; 43
     4f2:	4f 17       	cp	r20, r31
     4f4:	00 b1       	in	r16, 0x00	; 0
     4f6:	0b 35       	cpi	r16, 0x5B	; 91
     4f8:	42 57       	subi	r20, 0x72	; 114
     4fa:	18 0d       	add	r17, r8
     4fc:	52 18       	sub	r5, r2
     4fe:	0d 02       	muls	r16, r29
     500:	b2 09       	sbc	r27, r2
     502:	ac 4e       	sbci	r26, 0xEC	; 236
     504:	8f 12       	cpse	r8, r31
     506:	35 0d       	add	r19, r5
     508:	01 b3       	in	r16, 0x11	; 17
     50a:	09 ac       	ldd	r0, Y+57	; 0x39
     50c:	4e c7       	rjmp	.+3740   	; 0x13aa <u8g2_GetGlyphWidth+0x4>
     50e:	98 88       	ldd	r9, Y+16	; 0x10
     510:	43 02       	muls	r20, r19
     512:	b4 06       	cpc	r11, r20
     514:	12 5b       	subi	r17, 0xB2	; 178
     516:	8f 02       	muls	r24, r31
     518:	b5 0a       	sbc	r11, r21
     51a:	35 3e       	cpi	r19, 0xE5	; 229
     51c:	47 66       	ori	r20, 0x67	; 103
     51e:	9b 14       	cp	r9, r11
     520:	25 04       	cpc	r2, r5
     522:	b6 0f       	add	r27, r22
     524:	3d 42       	sbci	r19, 0x2D	; 45
     526:	cf 30       	cpi	r28, 0x0F	; 15
     528:	24 43       	sbci	r18, 0x34	; 52
     52a:	92 28       	or	r9, r2
     52c:	51 12       	cpse	r5, r17
     52e:	25 51       	subi	r18, 0x15	; 21
     530:	12 b7       	in	r17, 0x32	; 50
     532:	06 09       	sbc	r16, r6
     534:	4f 47       	sbci	r20, 0x7F	; 127
     536:	00 b8       	out	0x00, r0	; 0
     538:	06 12       	cpse	r0, r22
     53a:	3b 8f       	std	Y+27, r19	; 0x1b
     53c:	02 b9       	out	0x02, r16	; 2
     53e:	08 ab       	std	Y+48, r16	; 0x30
     540:	4e 4f       	sbci	r20, 0xFE	; 254
     542:	22 55       	subi	r18, 0x52	; 82
     544:	06 ba       	out	0x16, r0	; 22
     546:	0a b4       	in	r0, 0x2a	; 42
     548:	46 8f       	std	Z+30, r20	; 0x1e
     54a:	12 49       	sbci	r17, 0x92	; 146
     54c:	89 3a       	cpi	r24, 0xA9	; 169
     54e:	04 bb       	out	0x14, r16	; 20
     550:	0d 2e       	mov	r0, r29
     552:	42 47       	sbci	r20, 0x72	; 114
     554:	94 45       	sbci	r25, 0x54	; 84
     556:	59 94       	.word	0x9459	; ????
     558:	44 49       	sbci	r20, 0x94	; 148
     55a:	14 01       	movw	r2, r8
     55c:	bc 0d       	add	r27, r12
     55e:	4e 3e       	cpi	r20, 0xEE	; 238
     560:	4f a8       	ldd	r4, Y+55	; 0x37
     562:	16 a7       	std	Z+46, r17	; 0x2e
     564:	50 4b       	sbci	r21, 0xB0	; 176
     566:	a2 21       	and	r26, r2
     568:	0d bd       	out	0x2d, r16	; 45
     56a:	0c 4e       	sbci	r16, 0xEC	; 236
     56c:	3e 4f       	sbci	r19, 0xFE	; 254
     56e:	a8 16       	cp	r10, r24
     570:	97 30       	cpi	r25, 0x07	; 7
     572:	49 c3       	rjmp	.+1682   	; 0xc06 <u8g2_DrawFrame+0x30>
     574:	70 be       	out	0x30, r7	; 48
     576:	0e 4d       	sbci	r16, 0xDE	; 222
     578:	3e 87       	std	Y+14, r19	; 0x0e
     57a:	9a a5       	ldd	r25, Y+42	; 0x2a
     57c:	91 94       	neg	r9
     57e:	49 49       	sbci	r20, 0x99	; 153
     580:	32 84       	ldd	r3, Z+10	; 0x0a
     582:	01 bf       	out	0x31, r16	; 49
     584:	0a 3d       	cpi	r16, 0xDA	; 218
     586:	42 57       	subi	r20, 0x72	; 114
     588:	0e 85       	ldd	r16, Y+14	; 0x0e
     58a:	59 cb       	rjmp	.-2382   	; 0xfffffc3e <__eeprom_end+0xff7efc3e>
     58c:	02 c0       	rjmp	.+4      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
     58e:	0c 45       	sbci	r16, 0x5C	; 92
     590:	42 4f       	sbci	r20, 0xF2	; 242
     592:	9a 2d       	mov	r25, r10
     594:	99 36       	cpi	r25, 0x69	; 105
     596:	0c 99       	sbic	0x01, 4	; 1
     598:	16 c1       	rjmp	.+556    	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
     59a:	0c 45       	sbci	r16, 0x5C	; 92
     59c:	42 5f       	subi	r20, 0xF2	; 242
     59e:	6d c9       	rjmp	.-3366   	; 0xfffff87a <__eeprom_end+0xff7ef87a>
     5a0:	b4 61       	ori	r27, 0x14	; 20
     5a2:	c8 b4       	in	r12, 0x28	; 40
     5a4:	00 c2       	rjmp	.+1024   	; 0x9a6 <UART1_Putch+0x8>
     5a6:	0d 45       	sbci	r16, 0x5D	; 93
     5a8:	42 57       	subi	r20, 0x72	; 114
     5aa:	96 44       	sbci	r25, 0x46	; 70
     5ac:	4b a6       	std	Y+43, r4	; 0x2b
     5ae:	0d 43       	sbci	r16, 0x3D	; 61
     5b0:	a6 05       	cpc	r26, r6
     5b2:	c3 0d       	add	r28, r3
     5b4:	45 42       	sbci	r20, 0x25	; 37
     5b6:	4f a4       	ldd	r4, Y+47	; 0x2f
     5b8:	48 4b       	sbci	r20, 0xB8	; 184
     5ba:	a6 0d       	add	r26, r6
     5bc:	43 a6       	std	Z+43, r4	; 0x2b
     5be:	05 c4       	rjmp	.+2058   	; 0xdca <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0xe>
     5c0:	0c 45       	sbci	r16, 0x5C	; 92
     5c2:	42 4f       	sbci	r20, 0xF2	; 242
     5c4:	1d 58       	subi	r17, 0x8D	; 141
     5c6:	32 6d       	ori	r19, 0xD2	; 210
     5c8:	18 32       	cpi	r17, 0x28	; 40
     5ca:	2d c5       	rjmp	.+2650   	; 0x1026 <u8g2_font_decode_len+0x2a>
     5cc:	0d 45       	sbci	r16, 0x5D	; 93
     5ce:	42 57       	subi	r20, 0x72	; 114
     5d0:	96 44       	sbci	r25, 0x46	; 70
     5d2:	4b a6       	std	Y+43, r4	; 0x2b
     5d4:	0d 43       	sbci	r16, 0x3D	; 61
     5d6:	a6 05       	cpc	r26, r6
     5d8:	c6 0c       	add	r12, r6
     5da:	3e 42       	sbci	r19, 0x2E	; 46
     5dc:	d7 90       	elpm	r13, Z+
     5de:	94 9a       	sbi	0x12, 4	; 18
     5e0:	86 21       	and	r24, r6
     5e2:	6a 1a       	sub	r6, r26
     5e4:	c7 0b       	sbc	r28, r23
     5e6:	4d 3a       	cpi	r20, 0xAD	; 173
     5e8:	cf 92       	push	r12
     5ea:	89 6d       	ori	r24, 0xD9	; 217
     5ec:	c9 56       	subi	r28, 0x69	; 105
     5ee:	03 c8       	rjmp	.-4090   	; 0xfffff5f6 <__eeprom_end+0xff7ef5f6>
     5f0:	0c 45       	sbci	r16, 0x5C	; 92
     5f2:	42 4f       	sbci	r20, 0xF2	; 242
     5f4:	36 8c       	ldd	r3, Z+30	; 0x1e
     5f6:	e1 90       	ld	r14, Z+
     5f8:	84 e1       	ldi	r24, 0x14	; 20
     5fa:	20 c9       	rjmp	.-3520   	; 0xfffff83c <__eeprom_end+0xff7ef83c>
     5fc:	0c 45       	sbci	r16, 0x5C	; 92
     5fe:	42 5f       	subi	r20, 0xF2	; 242
     600:	32 8c       	ldd	r3, Z+26	; 0x1a
     602:	e1 90       	ld	r14, Z+
     604:	84 e1       	ldi	r24, 0x14	; 20
     606:	20 ca       	rjmp	.-3008   	; 0xfffffa48 <__eeprom_end+0xff7efa48>
     608:	0c 45       	sbci	r16, 0x5C	; 92
     60a:	42 57       	subi	r20, 0x72	; 114
     60c:	34 8c       	ldd	r3, Z+28	; 0x1c
     60e:	e1 90       	ld	r14, Z+
     610:	84 e1       	ldi	r24, 0x14	; 20
     612:	20 cb       	rjmp	.-2496   	; 0xfffffc54 <__eeprom_end+0xff7efc54>
     614:	0c 45       	sbci	r16, 0x5C	; 92
     616:	42 4f       	sbci	r20, 0xF2	; 242
     618:	65 18       	sub	r6, r5
     61a:	c3 21       	and	r28, r3
     61c:	09 c3       	rjmp	.+1554   	; 0xc30 <u8g2_DrawFrame+0x5a>
     61e:	41 cc       	rjmp	.-1918   	; 0xfffffea2 <__eeprom_end+0xff7efea2>
     620:	0a c3       	rjmp	.+1556   	; 0xc36 <u8g2_DrawFrame+0x60>
     622:	42 47       	sbci	r20, 0x72	; 114
     624:	96 2c       	mov	r9, r6
     626:	51 cb       	rjmp	.-2398   	; 0xfffffcca <__eeprom_end+0xff7efcca>
     628:	00 cd       	rjmp	.-1536   	; 0x2a <__FUSE_REGION_LENGTH__+0x27>
     62a:	0a c3       	rjmp	.+1556   	; 0xc40 <u8g2_DrawFrame+0x6a>
     62c:	42 57       	subi	r20, 0x72	; 114
     62e:	92 2c       	mov	r9, r2
     630:	51 cb       	rjmp	.-2398   	; 0xfffffcd4 <__eeprom_end+0xff7efcd4>
     632:	00 ce       	rjmp	.-1024   	; 0x234 <__trampolines_end+0x1a8>
     634:	0a c3       	rjmp	.+1556   	; 0xc4a <u8g2_send_buffer>
     636:	42 4f       	sbci	r20, 0xF2	; 242
     638:	65 48       	sbci	r22, 0x85	; 133
     63a:	a2 96       	adiw	r28, 0x22	; 34
     63c:	01 cf       	rjmp	.-510    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     63e:	0a c3       	rjmp	.+1556   	; 0xc54 <u8g2_send_buffer+0xa>
     640:	42 47       	sbci	r20, 0x72	; 114
     642:	92 2d       	mov	r25, r2
     644:	51 cb       	rjmp	.-2398   	; 0xfffffce8 <__eeprom_end+0xff7efce8>
     646:	00 d0       	rcall	.+0      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
     648:	0e 3d       	cpi	r16, 0xDE	; 222
     64a:	42 c7       	rjmp	.+3716   	; 0x14d0 <u8g2_DrawGlyph+0x64>
     64c:	10 55       	subi	r17, 0x50	; 80
     64e:	a2 21       	and	r26, r2
     650:	29 25       	eor	r18, r9
     652:	d1 a0       	ldd	r13, Z+33	; 0x21
     654:	00 d1       	rcall	.+512    	; 0x856 <__LOCK_REGION_LENGTH__+0x456>
     656:	0c 45       	sbci	r16, 0x5C	; 92
     658:	42 57       	subi	r20, 0x72	; 114
     65a:	d2 6d       	ori	r29, 0xD2	; 210
     65c:	52 12       	cpse	r5, r18
     65e:	69 d3       	rcall	.+1746   	; 0xd32 <u8g2_SetBufferCurrTileRow+0x10>
     660:	02 d2       	rcall	.+1028   	; 0xa66 <__vector_30+0x28>
     662:	0b 45       	sbci	r16, 0x5B	; 91
     664:	42 4f       	sbci	r20, 0xF2	; 242
     666:	9a 2d       	mov	r25, r10
     668:	99 5b       	subi	r25, 0xB9	; 185
     66a:	b2 00       	.word	0x00b2	; ????
     66c:	d3 0a       	sbc	r13, r19
     66e:	45 42       	sbci	r20, 0x25	; 37
     670:	5f 6d       	ori	r21, 0xDF	; 223
     672:	c9 dc       	rcall	.-1646   	; 0x6 <__FUSE_REGION_LENGTH__+0x3>
     674:	92 05       	cpc	r25, r2
     676:	d4 0c       	add	r13, r4
     678:	45 42       	sbci	r20, 0x25	; 37
     67a:	57 96       	adiw	r26, 0x17	; 23
     67c:	44 4b       	sbci	r20, 0xB4	; 180
     67e:	e6 96       	adiw	r28, 0x36	; 54
     680:	2c 00       	.word	0x002c	; ????
     682:	d5 0b       	sbc	r29, r21
     684:	45 42       	sbci	r20, 0x25	; 37
     686:	57 d2       	rcall	.+1198   	; 0xb36 <main+0x1c>
     688:	b4 64       	ori	r27, 0x44	; 68
     68a:	6e c9       	rjmp	.-3364   	; 0xfffff968 <__eeprom_end+0xff7ef968>
     68c:	02 d6       	rcall	.+3076   	; 0x1292 <u8g2_font_get_glyph_data+0xe>
     68e:	0b 45       	sbci	r16, 0x5B	; 91
     690:	42 4f       	sbci	r20, 0xF2	; 242
     692:	1d 58       	subi	r17, 0x8D	; 141
     694:	32 b7       	in	r19, 0x32	; 50
     696:	64 01       	movw	r12, r8
     698:	d7 0a       	sbc	r13, r23
     69a:	2d 42       	sbci	r18, 0x2D	; 45
     69c:	47 96       	adiw	r24, 0x17	; 23
     69e:	d4 2a       	or	r13, r20
     6a0:	b5 00       	.word	0x00b5	; ????
     6a2:	d8 0c       	add	r13, r8
     6a4:	3d 42       	sbci	r19, 0x2D	; 45
     6a6:	cf 12       	cpse	r12, r31
     6a8:	5d 92       	st	X+, r5
     6aa:	69 4a       	sbci	r22, 0xA9	; 169
     6ac:	16 00       	.word	0x0016	; ????
     6ae:	d9 0a       	sbc	r13, r25
     6b0:	45 42       	sbci	r20, 0x25	; 37
     6b2:	4f 1a       	sub	r4, r31
     6b4:	65 de       	rcall	.-822    	; 0x380 <__trampolines_end+0x2f4>
     6b6:	92 05       	cpc	r25, r2
     6b8:	da 0a       	sbc	r13, r26
     6ba:	45 42       	sbci	r20, 0x25	; 37
     6bc:	5f 29       	or	r21, r15
     6be:	f3 96       	adiw	r30, 0x33	; 51
     6c0:	2c 00       	.word	0x002c	; ????
     6c2:	db 0b       	sbc	r29, r27
     6c4:	45 42       	sbci	r20, 0x25	; 37
     6c6:	57 96       	adiw	r26, 0x17	; 23
     6c8:	c4 99       	sbic	0x18, 4	; 24
     6ca:	5b b2       	in	r5, 0x1b	; 27
     6cc:	00 dc       	rcall	.-2048   	; 0xfffffece <__eeprom_end+0xff7efece>
     6ce:	0a 45       	sbci	r16, 0x5A	; 90
     6d0:	42 4f       	sbci	r20, 0xF2	; 242
     6d2:	39 f3       	breq	.-50     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
     6d4:	96 2c       	mov	r9, r6
     6d6:	00 dd       	rcall	.-1536   	; 0xd8 <__trampolines_end+0x4c>
     6d8:	0b 45       	sbci	r16, 0x5B	; 91
     6da:	42 5f       	subi	r20, 0xF2	; 242
     6dc:	29 d3       	rcall	.+1618   	; 0xd30 <u8g2_SetBufferCurrTileRow+0xe>
     6de:	92 5a       	subi	r25, 0xA2	; 162
     6e0:	58 02       	muls	r21, r24
     6e2:	de 0c       	add	r13, r14
     6e4:	3d 42       	sbci	r19, 0x2D	; 45
     6e6:	47 38       	cpi	r20, 0x87	; 135
     6e8:	24 d9       	rcall	.-3512   	; 0xfffff932 <__eeprom_end+0xff7ef932>
     6ea:	a0 84       	ldd	r10, Z+8	; 0x08
     6ec:	45 00       	.word	0x0045	; ????
     6ee:	df 0d       	add	r29, r15
     6f0:	3d 42       	sbci	r19, 0x2D	; 45
     6f2:	cf 92       	push	r12
     6f4:	49 49       	sbci	r20, 0x99	; 153
     6f6:	a9 92       	st	Y+, r10
     6f8:	29 0a       	sbc	r2, r25
     6fa:	00 e0       	ldi	r16, 0x00	; 0
     6fc:	0c 45       	sbci	r16, 0x5C	; 92
     6fe:	42 4f       	sbci	r20, 0xF2	; 242
     700:	9a 23       	and	r25, r26
     702:	6b 32       	cpi	r22, 0x2B	; 43
     704:	68 c9       	rjmp	.-3376   	; 0xfffff9d6 <__eeprom_end+0xff7ef9d6>
     706:	10 e1       	ldi	r17, 0x10	; 16
     708:	0c 45       	sbci	r16, 0x5C	; 92
     70a:	42 5f       	subi	r20, 0xF2	; 242
     70c:	1d 59       	subi	r17, 0x9D	; 157
     70e:	93 41       	sbci	r25, 0x13	; 19
     710:	4b 86       	std	Y+11, r4	; 0x0b
     712:	00 e2       	ldi	r16, 0x20	; 32
     714:	0d 45       	sbci	r16, 0x5D	; 93
     716:	42 57       	subi	r20, 0x72	; 114
     718:	96 e4       	ldi	r25, 0x46	; 70
     71a:	c0 9a       	sbi	0x18, 0	; 24
     71c:	0c 5a       	subi	r16, 0xAC	; 172
     71e:	32 04       	cpc	r3, r2
     720:	e3 0d       	add	r30, r3
     722:	45 42       	sbci	r20, 0x25	; 37
     724:	57 d2       	rcall	.+1198   	; 0xbd4 <u8g2_DrawBox+0x4a>
     726:	0e ac       	ldd	r0, Y+62	; 0x3e
     728:	c9 a0       	ldd	r12, Y+33	; 0x21
     72a:	25 43       	sbci	r18, 0x35	; 53
     72c:	00 e4       	ldi	r16, 0x40	; 64
     72e:	0c 3d       	cpi	r16, 0xDC	; 220
     730:	42 4f       	sbci	r20, 0xF2	; 242
     732:	1d 58       	subi	r17, 0x8D	; 141
     734:	93 41       	sbci	r25, 0x13	; 19
     736:	4b 86       	std	Y+11, r4	; 0x0b
     738:	00 e5       	ldi	r16, 0x50	; 80
     73a:	0d 45       	sbci	r16, 0x5D	; 93
     73c:	42 57       	subi	r20, 0x72	; 114
     73e:	96 64       	ori	r25, 0x46	; 70
     740:	d9 9a       	sbi	0x1b, 1	; 27
     742:	0c 5a       	subi	r16, 0xAC	; 172
     744:	32 04       	cpc	r3, r2
     746:	e6 0c       	add	r14, r6
     748:	2e 42       	sbci	r18, 0x2E	; 46
     74a:	cf 10       	cpse	r12, r15
     74c:	26 c9       	rjmp	.-3508   	; 0xfffff99a <__eeprom_end+0xff7ef99a>
     74e:	30 65       	ori	r19, 0x50	; 80
     750:	83 00       	.word	0x0083	; ????
     752:	e7 0b       	sbc	r30, r23
     754:	3d 3a       	cpi	r19, 0xAD	; 173
     756:	cf 92       	push	r12
     758:	89 59       	subi	r24, 0x99	; 153
     75a:	b2 d5       	rcall	.+2916   	; 0x12c0 <u8g2_font_get_glyph_data+0x3c>
     75c:	00 e8       	ldi	r16, 0x80	; 128
     75e:	0c 45       	sbci	r16, 0x5C	; 92
     760:	42 4f       	sbci	r20, 0xF2	; 242
     762:	9a 23       	and	r25, r26
     764:	4b 36       	cpi	r20, 0x6B	; 107
     766:	0c e9       	ldi	r16, 0x9C	; 156
     768:	02 e9       	ldi	r16, 0x92	; 146
     76a:	0c 45       	sbci	r16, 0x5C	; 92
     76c:	42 5f       	subi	r20, 0xF2	; 242
     76e:	1d 59       	subi	r17, 0x9D	; 157
     770:	b2 61       	ori	r27, 0x12	; 18
     772:	48 17       	cp	r20, r24
     774:	00 ea       	ldi	r16, 0xA0	; 160
     776:	0d 45       	sbci	r16, 0x5D	; 93
     778:	42 57       	subi	r20, 0x72	; 114
     77a:	96 e4       	ldi	r25, 0x46	; 70
     77c:	c0 92 0d 43 	sts	0x430D, r12	; 0x80430d <__bss_end+0x3b19>
     780:	ba 00       	.word	0x00ba	; ????
     782:	eb 0c       	add	r14, r11
     784:	3d 42       	sbci	r19, 0x2D	; 45
     786:	4f 1d       	adc	r20, r15
     788:	58 b2       	in	r5, 0x18	; 24
     78a:	61 48       	sbci	r22, 0x81	; 129
     78c:	17 00       	.word	0x0017	; ????
     78e:	ec 09       	sbc	r30, r12
     790:	c3 42       	sbci	r28, 0x23	; 35
     792:	47 16       	cp	r4, r23
     794:	4a 2d       	mov	r20, r10
     796:	03 ed       	ldi	r16, 0xD3	; 211
     798:	08 c3       	rjmp	.+1552   	; 0xdaa <u8g2_NextPage+0x3e>
     79a:	42 4f       	sbci	r20, 0xF2	; 242
     79c:	55 6a       	ori	r21, 0xA5	; 165
     79e:	19 ee       	ldi	r17, 0xE9	; 233
     7a0:	08 c3       	rjmp	.+1552   	; 0xdb2 <u8g2_m_16_8_f+0x2>
     7a2:	42 4f       	sbci	r20, 0xF2	; 242
     7a4:	9b d4       	rcall	.+2358   	; 0x10dc <u8g2_font_decode_len+0xe0>
     7a6:	32 ef       	ldi	r19, 0xF2	; 242
     7a8:	09 bb       	out	0x19, r16	; 25
     7aa:	42 47       	sbci	r20, 0x72	; 114
     7ac:	92 49       	sbci	r25, 0x92	; 146
     7ae:	2d 03       	fmul	r18, r21
     7b0:	f0 0b       	sbc	r31, r16
     7b2:	3d 42       	sbci	r19, 0x2D	; 45
     7b4:	87 2a       	or	r8, r23
     7b6:	2d 99       	sbic	0x05, 5	; 5
     7b8:	2d 59       	subi	r18, 0x9D	; 157
     7ba:	00 f1       	brcs	.+64     	; 0x7fc <__LOCK_REGION_LENGTH__+0x3fc>
     7bc:	0b 45       	sbci	r16, 0x5B	; 91
     7be:	42 57       	subi	r20, 0x72	; 114
     7c0:	d2 9c       	mul	r13, r2
     7c2:	98 34       	cpi	r25, 0x48	; 72
     7c4:	5b 00       	.word	0x005b	; ????
     7c6:	f2 0c       	add	r15, r2
     7c8:	45 42       	sbci	r20, 0x25	; 37
     7ca:	4f 9a       	sbi	0x09, 7	; 9
     7cc:	23 4b       	sbci	r18, 0xB3	; 179
     7ce:	66 4b       	sbci	r22, 0xB6	; 182
     7d0:	16 00       	.word	0x0016	; ????
     7d2:	f3 0b       	sbc	r31, r19
     7d4:	45 42       	sbci	r20, 0x25	; 37
     7d6:	5f 1d       	adc	r21, r15
     7d8:	59 32       	cpi	r21, 0x29	; 41
     7da:	5b b2       	in	r5, 0x1b	; 27
     7dc:	00 f4       	brcc	.+0      	; 0x7de <__LOCK_REGION_LENGTH__+0x3de>
     7de:	0c 45       	sbci	r16, 0x5C	; 92
     7e0:	42 57       	subi	r20, 0x72	; 114
     7e2:	96 e4       	ldi	r25, 0x46	; 70
     7e4:	c0 92 d9 92 	sts	0x92D9, r12	; 0x8092d9 <__bss_end+0x8ae5>
     7e8:	05 f5       	brhc	.+64     	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
     7ea:	0c 45       	sbci	r16, 0x5C	; 92
     7ec:	42 57       	subi	r20, 0x72	; 114
     7ee:	d2 0e       	add	r13, r18
     7f0:	2c 99       	sbic	0x05, 4	; 5
     7f2:	2d 59       	subi	r18, 0x9D	; 157
     7f4:	00 f6       	brcc	.-128    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
     7f6:	0b 3d       	cpi	r16, 0xDB	; 219
     7f8:	42 4f       	sbci	r20, 0xF2	; 242
     7fa:	1d 58       	subi	r17, 0x8D	; 141
     7fc:	32 5b       	subi	r19, 0xB2	; 178
     7fe:	b2 00       	.word	0x00b2	; ????
     800:	f7 0a       	sbc	r15, r23
     802:	2d 46       	sbci	r18, 0x6D	; 109
     804:	57 0e       	add	r5, r23
     806:	0c 3a       	cpi	r16, 0xAC	; 172
     808:	10 01       	movw	r2, r0
     80a:	f8 0b       	sbc	r31, r24
     80c:	2d 42       	sbci	r18, 0x2D	; 45
     80e:	cf 20       	and	r12, r15
     810:	2d c9       	rjmp	.-3494   	; 0xfffffa6c <__eeprom_end+0xff7efa6c>
     812:	34 28       	or	r3, r4
     814:	00 f9       	bld	r16, 0
     816:	0b 45       	sbci	r16, 0x5B	; 91
     818:	42 4f       	sbci	r20, 0xF2	; 242
     81a:	9a 03       	fmulsu	r17, r18
     81c:	99 93       	st	Y+, r25
     81e:	a2 04       	cpc	r10, r2
     820:	fa 0a       	sbc	r15, r26
     822:	45 42       	sbci	r20, 0x25	; 37
     824:	5f 1d       	adc	r21, r15
     826:	c8 9c       	mul	r12, r8
     828:	14 25       	eor	r17, r4
     82a:	fb 0b       	sbc	r31, r27
     82c:	45 42       	sbci	r20, 0x25	; 37
     82e:	57 96       	adiw	r26, 0x17	; 23
     830:	c4 99       	sbic	0x18, 4	; 24
     832:	93 a2       	std	Z+35, r9	; 0x23
     834:	04 fc       	sbrc	r0, 4
     836:	0a 3d       	cpi	r16, 0xDA	; 218
     838:	42 4f       	sbci	r20, 0xF2	; 242
     83a:	39 73       	andi	r19, 0x39	; 57
     83c:	52 94       	swap	r5
     83e:	00 fd       	sbrc	r16, 0
     840:	0d 4d       	sbci	r16, 0xDD	; 221
     842:	3a 5f       	subi	r19, 0xFA	; 250
     844:	29 33       	cpi	r18, 0x39	; 57
     846:	29 4a       	sbci	r18, 0xA9	; 169
     848:	a8 25       	eor	r26, r8
     84a:	0b 00       	.word	0x000b	; ????
     84c:	fe 0c       	add	r15, r14
     84e:	45 3a       	cpi	r20, 0xA5	; 165
     850:	47 38       	cpi	r20, 0x87	; 135
     852:	24 99       	sbic	0x04, 4	; 4
     854:	6d 50       	subi	r22, 0x0D	; 13
     856:	c2 10       	cpse	r12, r2
     858:	ff 0d       	add	r31, r15
     85a:	4d 3a       	cpi	r20, 0xAD	; 173
     85c:	4f 39       	cpi	r20, 0x9F	; 159
     85e:	33 29       	or	r19, r3
     860:	4a a8       	ldd	r4, Y+50	; 0x32
     862:	25 0b       	sbc	r18, r21
     864:	00 00       	nop
     866:	00 00       	nop
     868:	04 ff       	sbrs	r16, 4
     86a:	ff 00       	.word	0x00ff	; ????
	...

0000086e <__ctors_end>:
     86e:	11 24       	eor	r1, r1
     870:	1f be       	out	0x3f, r1	; 63
     872:	cf ef       	ldi	r28, 0xFF	; 255
     874:	d0 e1       	ldi	r29, 0x10	; 16
     876:	de bf       	out	0x3e, r29	; 62
     878:	cd bf       	out	0x3d, r28	; 61

0000087a <__do_copy_data>:
     87a:	12 e0       	ldi	r17, 0x02	; 2
     87c:	a0 e0       	ldi	r26, 0x00	; 0
     87e:	b1 e0       	ldi	r27, 0x01	; 1
     880:	e8 eb       	ldi	r30, 0xB8	; 184
     882:	f7 e2       	ldi	r31, 0x27	; 39
     884:	00 e0       	ldi	r16, 0x00	; 0
     886:	0b bf       	out	0x3b, r16	; 59
     888:	02 c0       	rjmp	.+4      	; 0x88e <__do_copy_data+0x14>
     88a:	07 90       	elpm	r0, Z+
     88c:	0d 92       	st	X+, r0
     88e:	a0 3c       	cpi	r26, 0xC0	; 192
     890:	b1 07       	cpc	r27, r17
     892:	d9 f7       	brne	.-10     	; 0x88a <__do_copy_data+0x10>

00000894 <__do_clear_bss>:
     894:	27 e0       	ldi	r18, 0x07	; 7
     896:	a0 ec       	ldi	r26, 0xC0	; 192
     898:	b2 e0       	ldi	r27, 0x02	; 2
     89a:	01 c0       	rjmp	.+2      	; 0x89e <.do_clear_bss_start>

0000089c <.do_clear_bss_loop>:
     89c:	1d 92       	st	X+, r1

0000089e <.do_clear_bss_start>:
     89e:	a4 3f       	cpi	r26, 0xF4	; 244
     8a0:	b2 07       	cpc	r27, r18
     8a2:	e1 f7       	brne	.-8      	; 0x89c <.do_clear_bss_loop>
     8a4:	3a d1       	rcall	.+628    	; 0xb1a <main>
     8a6:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <_exit>

000008aa <__bad_interrupt>:
     8aa:	aa cb       	rjmp	.-2220   	; 0x0 <__vectors>

000008ac <u8x8_avr_delay>:
  UART0_Puts("\r\n= 4 : Next Music          =");
  UART0_Puts("\r\n= 5 : Previous Music      =");
  UART0_Puts("\r\n= 6 : volume up      =");
  UART0_Puts("\r\n= 7 : volume down       =");
  UART0_Puts("\r\n===========================");
  UART0_Puts("\r\n\r\nCommand > ");
     8ac:	6a 32       	cpi	r22, 0x2A	; 42
     8ae:	51 f0       	breq	.+20     	; 0x8c4 <u8x8_avr_delay+0x18>
     8b0:	18 f4       	brcc	.+6      	; 0x8b8 <u8x8_avr_delay+0xc>
     8b2:	69 32       	cpi	r22, 0x29	; 41
     8b4:	69 f0       	breq	.+26     	; 0x8d0 <u8x8_avr_delay+0x24>
     8b6:	3f c0       	rjmp	.+126    	; 0x936 <u8x8_avr_delay+0x8a>
     8b8:	6b 32       	cpi	r22, 0x2B	; 43
     8ba:	81 f0       	breq	.+32     	; 0x8dc <u8x8_avr_delay+0x30>
     8bc:	6c 32       	cpi	r22, 0x2C	; 44
     8be:	d9 f5       	brne	.+118    	; 0x936 <u8x8_avr_delay+0x8a>
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	08 95       	ret
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	14 16       	cp	r1, r20
     8c8:	15 06       	cpc	r1, r21
     8ca:	dc f0       	brlt	.+54     	; 0x902 <u8x8_avr_delay+0x56>
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	08 95       	ret
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	14 16       	cp	r1, r20
     8d4:	15 06       	cpc	r1, r21
     8d6:	0c f1       	brlt	.+66     	; 0x91a <u8x8_avr_delay+0x6e>
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	08 95       	ret
     8dc:	24 2f       	mov	r18, r20
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	a4 e6       	ldi	r26, 0x64	; 100
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	0e 94 b0 13 	call	0x2760	; 0x2760 <__umulhisi3>
     8e8:	28 ef       	ldi	r18, 0xF8	; 248
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	0e 94 8e 13 	call	0x271c	; 0x271c <__udivmodsi4>
     8f4:	23 32       	cpi	r18, 0x23	; 35
     8f6:	08 f5       	brcc	.+66     	; 0x93a <u8x8_avr_delay+0x8e>
     8f8:	82 2f       	mov	r24, r18
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <u8x8_avr_delay+0x4e>
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	08 95       	ret
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	25 e3       	ldi	r18, 0x35	; 53
     908:	2a 95       	dec	r18
     90a:	f1 f7       	brne	.-4      	; 0x908 <u8x8_avr_delay+0x5c>
     90c:	00 00       	nop
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	84 17       	cp	r24, r20
     912:	95 07       	cpc	r25, r21
     914:	c1 f7       	brne	.-16     	; 0x906 <u8x8_avr_delay+0x5a>
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	08 95       	ret
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	ef e9       	ldi	r30, 0x9F	; 159
     920:	ff e0       	ldi	r31, 0x0F	; 15
     922:	31 97       	sbiw	r30, 0x01	; 1
     924:	f1 f7       	brne	.-4      	; 0x922 <u8x8_avr_delay+0x76>
     926:	00 c0       	rjmp	.+0      	; 0x928 <u8x8_avr_delay+0x7c>
     928:	00 00       	nop
     92a:	01 96       	adiw	r24, 0x01	; 1
     92c:	84 17       	cp	r24, r20
     92e:	95 07       	cpc	r25, r21
     930:	b1 f7       	brne	.-20     	; 0x91e <u8x8_avr_delay+0x72>
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	08 95       	ret
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	08 95       	ret
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	08 95       	ret

0000093e <u8x8_avr_gpio_and_delay>:
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	6c 34       	cpi	r22, 0x4C	; 76
     944:	39 f0       	breq	.+14     	; 0x954 <u8x8_avr_gpio_and_delay+0x16>
     946:	6d 34       	cpi	r22, 0x4D	; 77
     948:	59 f0       	breq	.+22     	; 0x960 <u8x8_avr_gpio_and_delay+0x22>
     94a:	68 32       	cpi	r22, 0x28	; 40
     94c:	79 f4       	brne	.+30     	; 0x96c <u8x8_avr_gpio_and_delay+0x2e>
     94e:	88 9a       	sbi	0x11, 0	; 17
     950:	89 9a       	sbi	0x11, 1	; 17
     952:	12 c0       	rjmp	.+36     	; 0x978 <u8x8_avr_gpio_and_delay+0x3a>
     954:	44 23       	and	r20, r20
     956:	11 f0       	breq	.+4      	; 0x95c <u8x8_avr_gpio_and_delay+0x1e>
     958:	90 9a       	sbi	0x12, 0	; 18
     95a:	0e c0       	rjmp	.+28     	; 0x978 <u8x8_avr_gpio_and_delay+0x3a>
     95c:	90 98       	cbi	0x12, 0	; 18
     95e:	0c c0       	rjmp	.+24     	; 0x978 <u8x8_avr_gpio_and_delay+0x3a>
     960:	44 23       	and	r20, r20
     962:	11 f0       	breq	.+4      	; 0x968 <u8x8_avr_gpio_and_delay+0x2a>
     964:	91 9a       	sbi	0x12, 1	; 18
     966:	08 c0       	rjmp	.+16     	; 0x978 <u8x8_avr_gpio_and_delay+0x3a>
     968:	91 98       	cbi	0x12, 1	; 18
     96a:	06 c0       	rjmp	.+12     	; 0x978 <u8x8_avr_gpio_and_delay+0x3a>
     96c:	ec 01       	movw	r28, r24
     96e:	9e df       	rcall	.-196    	; 0x8ac <u8x8_avr_delay>
     970:	81 11       	cpse	r24, r1
     972:	02 c0       	rjmp	.+4      	; 0x978 <u8x8_avr_gpio_and_delay+0x3a>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	8a 8f       	std	Y+26, r24	; 0x1a
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <UART_Init>:
     980:	88 e1       	ldi	r24, 0x18	; 24
     982:	8a b9       	out	0x0a, r24	; 10
     984:	96 e0       	ldi	r25, 0x06	; 6
     986:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     98a:	87 e6       	ldi	r24, 0x67	; 103
     98c:	89 b9       	out	0x09, r24	; 9
     98e:	28 e0       	ldi	r18, 0x08	; 8
     990:	20 93 9a 00 	sts	0x009A, r18	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     994:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     998:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     99c:	08 95       	ret

0000099e <UART1_Putch>:
     99e:	eb e9       	ldi	r30, 0x9B	; 155
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	90 81       	ld	r25, Z
     9a4:	95 ff       	sbrs	r25, 5
     9a6:	fd cf       	rjmp	.-6      	; 0x9a2 <UART1_Putch+0x4>
     9a8:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     9ac:	08 95       	ret

000009ae <SendCommand>:
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	18 2f       	mov	r17, r24
     9b6:	8e e7       	ldi	r24, 0x7E	; 126
     9b8:	f2 df       	rcall	.-28     	; 0x99e <UART1_Putch>
     9ba:	8f ef       	ldi	r24, 0xFF	; 255
     9bc:	f0 df       	rcall	.-32     	; 0x99e <UART1_Putch>
     9be:	86 e0       	ldi	r24, 0x06	; 6
     9c0:	ee df       	rcall	.-36     	; 0x99e <UART1_Putch>
     9c2:	81 2f       	mov	r24, r17
     9c4:	ec df       	rcall	.-40     	; 0x99e <UART1_Putch>
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	ea df       	rcall	.-44     	; 0x99e <UART1_Putch>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	e8 df       	rcall	.-48     	; 0x99e <UART1_Putch>
     9ce:	19 30       	cpi	r17, 0x09	; 9
     9d0:	39 f0       	breq	.+14     	; 0x9e0 <SendCommand+0x32>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	e4 df       	rcall	.-56     	; 0x99e <UART1_Putch>
     9d6:	cb ef       	ldi	r28, 0xFB	; 251
     9d8:	de ef       	ldi	r29, 0xFE	; 254
     9da:	c1 1b       	sub	r28, r17
     9dc:	d1 09       	sbc	r29, r1
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <SendCommand+0x3a>
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	dd df       	rcall	.-70     	; 0x99e <UART1_Putch>
     9e4:	c0 ef       	ldi	r28, 0xF0	; 240
     9e6:	de ef       	ldi	r29, 0xFE	; 254
     9e8:	8d 2f       	mov	r24, r29
     9ea:	d9 df       	rcall	.-78     	; 0x99e <UART1_Putch>
     9ec:	8c 2f       	mov	r24, r28
     9ee:	d7 df       	rcall	.-82     	; 0x99e <UART1_Putch>
     9f0:	8f ee       	ldi	r24, 0xEF	; 239
     9f2:	d5 df       	rcall	.-86     	; 0x99e <UART1_Putch>
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	08 95       	ret

000009fc <__vector_5>:
     9fc:	1f 92       	push	r1
     9fe:	0f 92       	push	r0
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	0f 92       	push	r0
     a04:	11 24       	eor	r1, r1
     a06:	8f 93       	push	r24
     a08:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a0c:	8f 5f       	subi	r24, 0xFF	; 255
     a0e:	86 30       	cpi	r24, 0x06	; 6
     a10:	19 f0       	breq	.+6      	; 0xa18 <__vector_5+0x1c>
     a12:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     a16:	03 c0       	rjmp	.+6      	; 0xa1e <__vector_5+0x22>
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     a1e:	8f 91       	pop	r24
     a20:	0f 90       	pop	r0
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	0f 90       	pop	r0
     a26:	1f 90       	pop	r1
     a28:	18 95       	reti

00000a2a <__vector_8>:
     a2a:	1f 92       	push	r1
     a2c:	0f 92       	push	r0
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	0f 92       	push	r0
     a32:	11 24       	eor	r1, r1
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	1f 90       	pop	r1
     a3c:	18 95       	reti

00000a3e <__vector_30>:
     a3e:	1f 92       	push	r1
     a40:	0f 92       	push	r0
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	0f 92       	push	r0
     a46:	11 24       	eor	r1, r1
     a48:	0b b6       	in	r0, 0x3b	; 59
     a4a:	0f 92       	push	r0
     a4c:	8f 93       	push	r24
     a4e:	9f 93       	push	r25
     a50:	ef 93       	push	r30
     a52:	ff 93       	push	r31
     a54:	9c b1       	in	r25, 0x0c	; 12
     a56:	e0 91 f0 07 	lds	r30, 0x07F0	; 0x8007f0 <rx_index>
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	8e 0f       	add	r24, r30
     a5e:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <rx_index>
     a62:	0e 2e       	mov	r0, r30
     a64:	00 0c       	add	r0, r0
     a66:	ff 0b       	sbc	r31, r31
     a68:	ea 5d       	subi	r30, 0xDA	; 218
     a6a:	f8 4f       	sbci	r31, 0xF8	; 248
     a6c:	90 83       	st	Z, r25
     a6e:	9d 30       	cpi	r25, 0x0D	; 13
     a70:	59 f4       	brne	.+22     	; 0xa88 <__vector_30+0x4a>
     a72:	e8 2f       	mov	r30, r24
     a74:	88 0f       	add	r24, r24
     a76:	ff 0b       	sbc	r31, r31
     a78:	eb 5d       	subi	r30, 0xDB	; 219
     a7a:	f8 4f       	sbci	r31, 0xF8	; 248
     a7c:	10 82       	st	Z, r1
     a7e:	10 92 f0 07 	sts	0x07F0, r1	; 0x8007f0 <rx_index>
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	80 93 c1 06 	sts	0x06C1, r24	; 0x8006c1 <rx_complete>
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	9f 91       	pop	r25
     a8e:	8f 91       	pop	r24
     a90:	0f 90       	pop	r0
     a92:	0b be       	out	0x3b, r0	; 59
     a94:	0f 90       	pop	r0
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	0f 90       	pop	r0
     a9a:	1f 90       	pop	r1
     a9c:	18 95       	reti

00000a9e <__vector_31>:
     a9e:	1f 92       	push	r1
     aa0:	0f 92       	push	r0
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	0f 92       	push	r0
     aa6:	11 24       	eor	r1, r1
     aa8:	0b b6       	in	r0, 0x3b	; 59
     aaa:	0f 92       	push	r0
     aac:	8f 93       	push	r24
     aae:	9f 93       	push	r25
     ab0:	ef 93       	push	r30
     ab2:	ff 93       	push	r31
     ab4:	e0 91 f1 07 	lds	r30, 0x07F1	; 0x8007f1 <tx_index>
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	8e 0f       	add	r24, r30
     abc:	80 93 f1 07 	sts	0x07F1, r24	; 0x8007f1 <tx_index>
     ac0:	0e 2e       	mov	r0, r30
     ac2:	00 0c       	add	r0, r0
     ac4:	ff 0b       	sbc	r31, r31
     ac6:	ee 53       	subi	r30, 0x3E	; 62
     ac8:	f9 4f       	sbci	r31, 0xF9	; 249
     aca:	80 81       	ld	r24, Z
     acc:	8c b9       	out	0x0c, r24	; 12
     ace:	90 91 f1 07 	lds	r25, 0x07F1	; 0x8007f1 <tx_index>
     ad2:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <tx_len>
     ad6:	98 13       	cpse	r25, r24
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <__vector_31+0x3e>
     ada:	55 98       	cbi	0x0a, 5	; 10
     adc:	ff 91       	pop	r31
     ade:	ef 91       	pop	r30
     ae0:	9f 91       	pop	r25
     ae2:	8f 91       	pop	r24
     ae4:	0f 90       	pop	r0
     ae6:	0b be       	out	0x3b, r0	; 59
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <u8g2_prepare>:




void u8g2_prepare(void) {
	u8g2_SetFont(&u8g2, u8g2_font_6x10_tf);
     af2:	6c e8       	ldi	r22, 0x8C	; 140
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	8a e8       	ldi	r24, 0x8A	; 138
     af8:	97 e0       	ldi	r25, 0x07	; 7
     afa:	9f d5       	rcall	.+2878   	; 0x163a <u8g2_SetFont>
	u8g2_SetFontRefHeightExtendedText(&u8g2);
     afc:	8a e8       	ldi	r24, 0x8A	; 138
     afe:	97 e0       	ldi	r25, 0x07	; 7
     b00:	89 d5       	rcall	.+2834   	; 0x1614 <u8g2_SetFontRefHeightExtendedText>
	u8g2_SetDrawColor(&u8g2, 1);
     b02:	61 e0       	ldi	r22, 0x01	; 1
     b04:	8a e8       	ldi	r24, 0x8A	; 138
     b06:	97 e0       	ldi	r25, 0x07	; 7
     b08:	38 d6       	rcall	.+3184   	; 0x177a <u8g2_SetDrawColor>
	u8g2_SetFontPosTop(&u8g2);
     b0a:	8a e8       	ldi	r24, 0x8A	; 138
     b0c:	97 e0       	ldi	r25, 0x07	; 7
     b0e:	8f d5       	rcall	.+2846   	; 0x162e <u8g2_SetFontPosTop>
	u8g2_SetFontDirection(&u8g2, 0);
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	8a e8       	ldi	r24, 0x8A	; 138
     b14:	97 e0       	ldi	r25, 0x07	; 7
     b16:	ab c5       	rjmp	.+2902   	; 0x166e <u8g2_SetFontDirection>
     b18:	08 95       	ret

00000b1a <main>:
     b1a:	32 df       	rcall	.-412    	; 0x980 <UART_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b1c:	2f ef       	ldi	r18, 0xFF	; 255
     b1e:	83 ec       	ldi	r24, 0xC3	; 195
     b20:	99 e0       	ldi	r25, 0x09	; 9
     b22:	21 50       	subi	r18, 0x01	; 1
     b24:	80 40       	sbci	r24, 0x00	; 0
     b26:	90 40       	sbci	r25, 0x00	; 0
     b28:	e1 f7       	brne	.-8      	; 0xb22 <main+0x8>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <main+0x12>
     b2c:	00 00       	nop
{
	UART_Init();

	_delay_ms(200);

	SendCommand(CMD_TF);
     b2e:	89 e0       	ldi	r24, 0x09	; 9
     b30:	3e df       	rcall	.-388    	; 0x9ae <SendCommand>
	"Previous Music\n"
	"volume up\n"
	"volume down";

	
	u8g2_Setup_ssd1306_i2c_128x64_noname_f( &u8g2, U8G2_R0, u8x8_byte_sw_i2c, u8x8_avr_gpio_and_delay );
     b32:	2f e9       	ldi	r18, 0x9F	; 159
     b34:	34 e0       	ldi	r19, 0x04	; 4
     b36:	4a ec       	ldi	r20, 0xCA	; 202
     b38:	5f e0       	ldi	r21, 0x0F	; 15
     b3a:	65 e5       	ldi	r22, 0x55	; 85
     b3c:	72 e0       	ldi	r23, 0x02	; 2
     b3e:	8a e8       	ldi	r24, 0x8A	; 138
     b40:	97 e0       	ldi	r25, 0x07	; 7
     b42:	3c d1       	rcall	.+632    	; 0xdbc <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
	u8g2_SetI2CAddress(&u8g2, 0x78);
     b44:	88 e7       	ldi	r24, 0x78	; 120
     b46:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <u8g2+0x16>
	u8g2_InitDisplay(&u8g2);
     b4a:	8a e8       	ldi	r24, 0x8A	; 138
     b4c:	97 e0       	ldi	r25, 0x07	; 7
     b4e:	0e 94 19 12 	call	0x2432	; 0x2432 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	8a e8       	ldi	r24, 0x8A	; 138
     b56:	97 e0       	ldi	r25, 0x07	; 7
     b58:	0e 94 24 12 	call	0x2448	; 0x2448 <u8x8_SetPowerSave>
	
	
	u8g2_ClearBuffer(&u8g2);
     b5c:	8a e8       	ldi	r24, 0x8A	; 138
     b5e:	97 e0       	ldi	r25, 0x07	; 7
	u8g2_prepare();
     b60:	c0 d0       	rcall	.+384    	; 0xce2 <u8g2_ClearBuffer>
     b62:	c7 df       	rcall	.-114    	; 0xaf2 <u8g2_prepare>
	u8g2_SendBuffer(&u8g2);
     b64:	8a e8       	ldi	r24, 0x8A	; 138
     b66:	97 e0       	ldi	r25, 0x07	; 7
		
	while(1)
	{
		u8g2_ClearBuffer(&u8g2);
     b68:	d2 d0       	rcall	.+420    	; 0xd0e <u8g2_SendBuffer>
     b6a:	8a e8       	ldi	r24, 0x8A	; 138
     b6c:	97 e0       	ldi	r25, 0x07	; 7
     b6e:	b9 d0       	rcall	.+370    	; 0xce2 <u8g2_ClearBuffer>
		u8g2_prepare();
     b70:	c0 df       	rcall	.-128    	; 0xaf2 <u8g2_prepare>

		u8g2_UserInterfaceSelectionList(&u8g2, "KMM's MP3", 1, string_list);
     b72:	29 ef       	ldi	r18, 0xF9	; 249
     b74:	31 e0       	ldi	r19, 0x01	; 1
     b76:	41 e0       	ldi	r20, 0x01	; 1
     b78:	6b e4       	ldi	r22, 0x4B	; 75
     b7a:	72 e0       	ldi	r23, 0x02	; 2
     b7c:	8a e8       	ldi	r24, 0x8A	; 138
     b7e:	97 e0       	ldi	r25, 0x07	; 7
     b80:	ac d7       	rcall	.+3928   	; 0x1ada <u8g2_UserInterfaceSelectionList>

		u8g2_SendBuffer(&u8g2);
     b82:	8a e8       	ldi	r24, 0x8A	; 138
     b84:	97 e0       	ldi	r25, 0x07	; 7
     b86:	c3 d0       	rcall	.+390    	; 0xd0e <u8g2_SendBuffer>
     b88:	f0 cf       	rjmp	.-32     	; 0xb6a <main+0x50>

00000b8a <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
     b8a:	df 92       	push	r13
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	7c 01       	movw	r14, r24
     b9a:	16 2f       	mov	r17, r22
     b9c:	c4 2f       	mov	r28, r20
     b9e:	d2 2e       	mov	r13, r18
     ba0:	d0 2f       	mov	r29, r16
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
     ba2:	04 2f       	mov	r16, r20
     ba4:	0d 0f       	add	r16, r29
     ba6:	26 2f       	mov	r18, r22
     ba8:	2d 0d       	add	r18, r13
     baa:	08 d6       	rcall	.+3088   	; 0x17bc <u8g2_IsIntersection>
     bac:	88 23       	and	r24, r24
     bae:	59 f0       	breq	.+22     	; 0xbc6 <u8g2_DrawBox+0x3c>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
     bb0:	dd 23       	and	r29, r29
     bb2:	49 f0       	breq	.+18     	; 0xbc6 <u8g2_DrawBox+0x3c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
     bb4:	00 e0       	ldi	r16, 0x00	; 0
     bb6:	2d 2d       	mov	r18, r13
     bb8:	4c 2f       	mov	r20, r28
     bba:	61 2f       	mov	r22, r17
     bbc:	c7 01       	movw	r24, r14
     bbe:	69 d5       	rcall	.+2770   	; 0x1692 <u8g2_DrawHVLine>
    y++;    
     bc0:	cf 5f       	subi	r28, 0xFF	; 255
    h--;
     bc2:	d1 50       	subi	r29, 0x01	; 1
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
     bc4:	b9 f7       	brne	.-18     	; 0xbb4 <u8g2_DrawBox+0x2a>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    y++;    
    h--;
  }
}
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	df 90       	pop	r13
     bd4:	08 95       	ret

00000bd6 <u8g2_DrawFrame>:
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
     bd6:	bf 92       	push	r11
     bd8:	cf 92       	push	r12
     bda:	df 92       	push	r13
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	7c 01       	movw	r14, r24
     bea:	c6 2f       	mov	r28, r22
     bec:	d4 2f       	mov	r29, r20
     bee:	c2 2e       	mov	r12, r18
     bf0:	b0 2e       	mov	r11, r16
  u8g2_uint_t xtmp = x;
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
     bf2:	14 2f       	mov	r17, r20
     bf4:	10 0f       	add	r17, r16
     bf6:	d6 2e       	mov	r13, r22
     bf8:	d2 0e       	add	r13, r18
     bfa:	01 2f       	mov	r16, r17
     bfc:	2d 2d       	mov	r18, r13
     bfe:	de d5       	rcall	.+3004   	; 0x17bc <u8g2_IsIntersection>
     c00:	88 23       	and	r24, r24
     c02:	c9 f0       	breq	.+50     	; 0xc36 <u8g2_DrawFrame+0x60>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
     c04:	00 e0       	ldi	r16, 0x00	; 0
     c06:	2c 2d       	mov	r18, r12
     c08:	4d 2f       	mov	r20, r29
     c0a:	6c 2f       	mov	r22, r28
     c0c:	c7 01       	movw	r24, r14
     c0e:	41 d5       	rcall	.+2690   	; 0x1692 <u8g2_DrawHVLine>
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
     c10:	01 e0       	ldi	r16, 0x01	; 1
     c12:	2b 2d       	mov	r18, r11
     c14:	4d 2f       	mov	r20, r29
     c16:	6c 2f       	mov	r22, r28
     c18:	c7 01       	movw	r24, r14
     c1a:	3b d5       	rcall	.+2678   	; 0x1692 <u8g2_DrawHVLine>
  x+=w;
  x--;
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
     c1c:	6f ef       	ldi	r22, 0xFF	; 255
     c1e:	6d 0d       	add	r22, r13
     c20:	2b 2d       	mov	r18, r11
     c22:	4d 2f       	mov	r20, r29
     c24:	c7 01       	movw	r24, r14
     c26:	35 d5       	rcall	.+2666   	; 0x1692 <u8g2_DrawHVLine>
  y+=h;
  y--;
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
     c28:	4f ef       	ldi	r20, 0xFF	; 255
     c2a:	41 0f       	add	r20, r17
     c2c:	00 e0       	ldi	r16, 0x00	; 0
     c2e:	2c 2d       	mov	r18, r12
     c30:	6c 2f       	mov	r22, r28
     c32:	c7 01       	movw	r24, r14
     c34:	2e d5       	rcall	.+2652   	; 0x1692 <u8g2_DrawHVLine>
}
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	bf 90       	pop	r11
     c48:	08 95       	ret

00000c4a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
     c4a:	af 92       	push	r10
     c4c:	bf 92       	push	r11
     c4e:	cf 92       	push	r12
     c50:	df 92       	push	r13
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	7c 01       	movw	r14, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
     c60:	dc 01       	movw	r26, r24
     c62:	95 96       	adiw	r26, 0x25	; 37
     c64:	bc 90       	ld	r11, X
     c66:	95 97       	sbiw	r26, 0x25	; 37
  dest_row = u8g2->tile_curr_row;
     c68:	96 96       	adiw	r26, 0x26	; 38
     c6a:	dc 91       	ld	r29, X
     c6c:	96 97       	sbiw	r26, 0x26	; 38
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     c6e:	ed 91       	ld	r30, X+
     c70:	fc 91       	ld	r31, X
     c72:	a1 88       	ldd	r10, Z+17	; 0x11
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
     c74:	cd 2f       	mov	r28, r29
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     c76:	c1 2c       	mov	r12, r1
     c78:	d1 2c       	mov	r13, r1
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     c7a:	d7 01       	movw	r26, r14
     c7c:	ed 91       	ld	r30, X+
     c7e:	fc 91       	ld	r31, X
     c80:	11 97       	sbiw	r26, 0x01	; 1
     c82:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
     c84:	93 96       	adiw	r26, 0x23	; 35
     c86:	0d 91       	ld	r16, X+
     c88:	1c 91       	ld	r17, X
     c8a:	94 97       	sbiw	r26, 0x24	; 36
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
     c8c:	42 2f       	mov	r20, r18
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	44 0f       	add	r20, r20
     c92:	55 1f       	adc	r21, r21
     c94:	44 0f       	add	r20, r20
     c96:	55 1f       	adc	r21, r21
     c98:	44 0f       	add	r20, r20
     c9a:	55 1f       	adc	r21, r21
     c9c:	4c 9d       	mul	r20, r12
     c9e:	c0 01       	movw	r24, r0
     ca0:	4d 9d       	mul	r20, r13
     ca2:	90 0d       	add	r25, r0
     ca4:	5c 9d       	mul	r21, r12
     ca6:	90 0d       	add	r25, r0
     ca8:	11 24       	eor	r1, r1
     caa:	08 0f       	add	r16, r24
     cac:	19 1f       	adc	r17, r25
     cae:	4c 2f       	mov	r20, r28
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	c7 01       	movw	r24, r14
     cb4:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <u8x8_DrawTile>
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
     cb8:	cf 5f       	subi	r28, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
     cba:	8c 2f       	mov	r24, r28
     cbc:	8d 1b       	sub	r24, r29
     cbe:	8b 15       	cp	r24, r11
     cc0:	28 f4       	brcc	.+10     	; 0xccc <u8g2_send_buffer+0x82>
     cc2:	bf ef       	ldi	r27, 0xFF	; 255
     cc4:	cb 1a       	sub	r12, r27
     cc6:	db 0a       	sbc	r13, r27
     cc8:	ca 15       	cp	r28, r10
     cca:	b8 f2       	brcs	.-82     	; 0xc7a <u8g2_send_buffer+0x30>
}
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	df 90       	pop	r13
     cda:	cf 90       	pop	r12
     cdc:	bf 90       	pop	r11
     cde:	af 90       	pop	r10
     ce0:	08 95       	ret

00000ce2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
     ce2:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     ce4:	a0 81       	ld	r26, Z
     ce6:	b1 81       	ldd	r27, Z+1	; 0x01
     ce8:	50 96       	adiw	r26, 0x10	; 16
     cea:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
     cec:	45 a1       	ldd	r20, Z+37	; 0x25
     cee:	94 9f       	mul	r25, r20
     cf0:	a0 01       	movw	r20, r0
     cf2:	11 24       	eor	r1, r1
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
     cf4:	44 0f       	add	r20, r20
     cf6:	55 1f       	adc	r21, r21
     cf8:	44 0f       	add	r20, r20
     cfa:	55 1f       	adc	r21, r21
     cfc:	44 0f       	add	r20, r20
     cfe:	55 1f       	adc	r21, r21
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	83 a1       	ldd	r24, Z+35	; 0x23
     d06:	94 a1       	ldd	r25, Z+36	; 0x24
     d08:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <memset>
     d0c:	08 95       	ret

00000d0e <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
     d14:	9a df       	rcall	.-204    	; 0xc4a <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
     d16:	ce 01       	movw	r24, r28
     d18:	0e 94 2f 12 	call	0x245e	; 0x245e <u8x8_RefreshDisplay>
}
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	08 95       	ret

00000d22 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	ec 01       	movw	r28, r24
  u8g2->tile_curr_row = row;
     d28:	6e a3       	std	Y+38, r22	; 0x26
  u8g2->cb->update_dimension(u8g2);
     d2a:	e9 a1       	ldd	r30, Y+33	; 0x21
     d2c:	fa a1       	ldd	r31, Y+34	; 0x22
     d2e:	01 90       	ld	r0, Z+
     d30:	f0 81       	ld	r31, Z
     d32:	e0 2d       	mov	r30, r0
     d34:	09 95       	icall
  u8g2->cb->update_page_win(u8g2);
     d36:	e9 a1       	ldd	r30, Y+33	; 0x21
     d38:	fa a1       	ldd	r31, Y+34	; 0x22
     d3a:	02 80       	ldd	r0, Z+2	; 0x02
     d3c:	f3 81       	ldd	r31, Z+3	; 0x03
     d3e:	e0 2d       	mov	r30, r0
     d40:	ce 01       	movw	r24, r28
     d42:	09 95       	icall
}
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	ec 01       	movw	r28, r24
  if ( u8g2->is_auto_page_clear )
     d50:	fc 01       	movw	r30, r24
     d52:	eb 59       	subi	r30, 0x9B	; 155
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	80 81       	ld	r24, Z
     d58:	88 23       	and	r24, r24
     d5a:	11 f0       	breq	.+4      	; 0xd60 <u8g2_FirstPage+0x16>
  {
    u8g2_ClearBuffer(u8g2);
     d5c:	ce 01       	movw	r24, r28
     d5e:	c1 df       	rcall	.-126    	; 0xce2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	ce 01       	movw	r24, r28
     d64:	de df       	rcall	.-68     	; 0xd22 <u8g2_SetBufferCurrTileRow>
}
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	08 95       	ret

00000d6c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	ec 01       	movw	r28, r24
  uint8_t row;
  u8g2_send_buffer(u8g2);
     d74:	6a df       	rcall	.-300    	; 0xc4a <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
     d76:	1e a1       	ldd	r17, Y+38	; 0x26
  row += u8g2->tile_buf_height;
     d78:	8d a1       	ldd	r24, Y+37	; 0x25
     d7a:	18 0f       	add	r17, r24
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
     d7c:	e8 81       	ld	r30, Y
     d7e:	f9 81       	ldd	r31, Y+1	; 0x01
     d80:	81 89       	ldd	r24, Z+17	; 0x11
     d82:	18 17       	cp	r17, r24
     d84:	28 f0       	brcs	.+10     	; 0xd90 <u8g2_NextPage+0x24>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
     d86:	ce 01       	movw	r24, r28
     d88:	0e 94 2f 12 	call	0x245e	; 0x245e <u8x8_RefreshDisplay>
    return 0;
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	0c c0       	rjmp	.+24     	; 0xda8 <u8g2_NextPage+0x3c>
  }
  if ( u8g2->is_auto_page_clear )
     d90:	fe 01       	movw	r30, r28
     d92:	eb 59       	subi	r30, 0x9B	; 155
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	80 81       	ld	r24, Z
     d98:	88 23       	and	r24, r24
     d9a:	11 f0       	breq	.+4      	; 0xda0 <u8g2_NextPage+0x34>
  {
    u8g2_ClearBuffer(u8g2);
     d9c:	ce 01       	movw	r24, r28
     d9e:	a1 df       	rcall	.-190    	; 0xce2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
     da0:	61 2f       	mov	r22, r17
     da2:	ce 01       	movw	r24, r28
     da4:	be df       	rcall	.-132    	; 0xd22 <u8g2_SetBufferCurrTileRow>
  return 1;
     da6:	81 e0       	ldi	r24, 0x01	; 1
}
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	08 95       	ret

00000db0 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
     db0:	28 e0       	ldi	r18, 0x08	; 8
     db2:	fc 01       	movw	r30, r24
     db4:	20 83       	st	Z, r18
  return buf;
  #endif
}
     db6:	80 ec       	ldi	r24, 0xC0	; 192
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	08 95       	ret

00000dbc <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
     dbc:	cf 92       	push	r12
     dbe:	df 92       	push	r13
     dc0:	ef 92       	push	r14
     dc2:	ff 92       	push	r15
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	1f 92       	push	r1
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	7c 01       	movw	r14, r24
     dd4:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
     dd6:	89 01       	movw	r16, r18
     dd8:	9a 01       	movw	r18, r20
     dda:	49 ed       	ldi	r20, 0xD9	; 217
     ddc:	50 e1       	ldi	r21, 0x10	; 16
     dde:	64 eb       	ldi	r22, 0xB4	; 180
     de0:	72 e1       	ldi	r23, 0x12	; 18
     de2:	0e 94 27 13 	call	0x264e	; 0x264e <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
     de6:	ce 01       	movw	r24, r28
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	e2 df       	rcall	.-60     	; 0xdb0 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
     dec:	86 01       	movw	r16, r12
     dee:	27 ef       	ldi	r18, 0xF7	; 247
     df0:	3b e0       	ldi	r19, 0x0B	; 11
     df2:	49 81       	ldd	r20, Y+1	; 0x01
     df4:	bc 01       	movw	r22, r24
     df6:	c7 01       	movw	r24, r14
     df8:	b8 d7       	rcall	.+3952   	; 0x1d6a <u8g2_SetupBuffer>
}
     dfa:	0f 90       	pop	r0
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	df 90       	pop	r13
     e0a:	cf 90       	pop	r12
     e0c:	08 95       	ret

00000e0e <u8g2_font_get_word>:

u8g2_uint_t u8g2_GetExactStrWidth(u8g2_t *u8g2, const char *s)
{
  u8g2->u8x8.next_cb = u8x8_ascii_next;
  return u8g2_calculate_exact_string_width(u8g2, s);
}
     e0e:	fc 01       	movw	r30, r24
     e10:	e6 0f       	add	r30, r22
     e12:	f1 1d       	adc	r31, r1
     e14:	84 91       	lpm	r24, Z
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	98 2f       	mov	r25, r24
     e1a:	88 27       	eor	r24, r24
     e1c:	31 96       	adiw	r30, 0x01	; 1
     e1e:	e4 91       	lpm	r30, Z
     e20:	8e 0f       	add	r24, r30
     e22:	91 1d       	adc	r25, r1
     e24:	08 95       	ret

00000e26 <u8g2_add_vector_y>:
     e26:	21 30       	cpi	r18, 0x01	; 1
     e28:	31 f0       	breq	.+12     	; 0xe36 <u8g2_add_vector_y+0x10>
     e2a:	18 f0       	brcs	.+6      	; 0xe32 <u8g2_add_vector_y+0xc>
     e2c:	22 30       	cpi	r18, 0x02	; 2
     e2e:	29 f0       	breq	.+10     	; 0xe3a <u8g2_add_vector_y+0x14>
     e30:	06 c0       	rjmp	.+12     	; 0xe3e <u8g2_add_vector_y+0x18>
     e32:	84 0f       	add	r24, r20
     e34:	08 95       	ret
     e36:	86 0f       	add	r24, r22
     e38:	08 95       	ret
     e3a:	84 1b       	sub	r24, r20
     e3c:	08 95       	ret
     e3e:	86 1b       	sub	r24, r22
     e40:	08 95       	ret

00000e42 <u8g2_add_vector_x>:
     e42:	21 30       	cpi	r18, 0x01	; 1
     e44:	31 f0       	breq	.+12     	; 0xe52 <u8g2_add_vector_x+0x10>
     e46:	18 f0       	brcs	.+6      	; 0xe4e <u8g2_add_vector_x+0xc>
     e48:	22 30       	cpi	r18, 0x02	; 2
     e4a:	29 f0       	breq	.+10     	; 0xe56 <u8g2_add_vector_x+0x14>
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <u8g2_add_vector_x+0x18>
     e4e:	86 0f       	add	r24, r22
     e50:	08 95       	ret
     e52:	84 1b       	sub	r24, r20
     e54:	08 95       	ret
     e56:	86 1b       	sub	r24, r22
     e58:	08 95       	ret
     e5a:	84 0f       	add	r24, r20
     e5c:	08 95       	ret

00000e5e <u8g2_font_calc_vref_font>:
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	08 95       	ret

00000e62 <u8g2_font_calc_vref_top>:
     e62:	80 5a       	subi	r24, 0xA0	; 160
     e64:	9f 4f       	sbci	r25, 0xFF	; 255
     e66:	fc 01       	movw	r30, r24
     e68:	80 81       	ld	r24, Z
     e6a:	8f 5f       	subi	r24, 0xFF	; 255
     e6c:	08 95       	ret

00000e6e <u8g2_read_font_info>:
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	ec 01       	movw	r28, r24
     e78:	8b 01       	movw	r16, r22
     e7a:	fb 01       	movw	r30, r22
     e7c:	84 91       	lpm	r24, Z
     e7e:	88 83       	st	Y, r24
     e80:	31 96       	adiw	r30, 0x01	; 1
     e82:	e4 91       	lpm	r30, Z
     e84:	e9 83       	std	Y+1, r30	; 0x01
     e86:	fb 01       	movw	r30, r22
     e88:	32 96       	adiw	r30, 0x02	; 2
     e8a:	e4 91       	lpm	r30, Z
     e8c:	ea 83       	std	Y+2, r30	; 0x02
     e8e:	fb 01       	movw	r30, r22
     e90:	33 96       	adiw	r30, 0x03	; 3
     e92:	e4 91       	lpm	r30, Z
     e94:	eb 83       	std	Y+3, r30	; 0x03
     e96:	fb 01       	movw	r30, r22
     e98:	34 96       	adiw	r30, 0x04	; 4
     e9a:	e4 91       	lpm	r30, Z
     e9c:	ec 83       	std	Y+4, r30	; 0x04
     e9e:	fb 01       	movw	r30, r22
     ea0:	35 96       	adiw	r30, 0x05	; 5
     ea2:	e4 91       	lpm	r30, Z
     ea4:	ed 83       	std	Y+5, r30	; 0x05
     ea6:	fb 01       	movw	r30, r22
     ea8:	36 96       	adiw	r30, 0x06	; 6
     eaa:	e4 91       	lpm	r30, Z
     eac:	ee 83       	std	Y+6, r30	; 0x06
     eae:	fb 01       	movw	r30, r22
     eb0:	37 96       	adiw	r30, 0x07	; 7
     eb2:	e4 91       	lpm	r30, Z
     eb4:	ef 83       	std	Y+7, r30	; 0x07
     eb6:	fb 01       	movw	r30, r22
     eb8:	38 96       	adiw	r30, 0x08	; 8
     eba:	e4 91       	lpm	r30, Z
     ebc:	e8 87       	std	Y+8, r30	; 0x08
     ebe:	fb 01       	movw	r30, r22
     ec0:	39 96       	adiw	r30, 0x09	; 9
     ec2:	e4 91       	lpm	r30, Z
     ec4:	e9 87       	std	Y+9, r30	; 0x09
     ec6:	fb 01       	movw	r30, r22
     ec8:	3a 96       	adiw	r30, 0x0a	; 10
     eca:	e4 91       	lpm	r30, Z
     ecc:	ea 87       	std	Y+10, r30	; 0x0a
     ece:	fb 01       	movw	r30, r22
     ed0:	3b 96       	adiw	r30, 0x0b	; 11
     ed2:	e4 91       	lpm	r30, Z
     ed4:	eb 87       	std	Y+11, r30	; 0x0b
     ed6:	fb 01       	movw	r30, r22
     ed8:	3c 96       	adiw	r30, 0x0c	; 12
     eda:	e4 91       	lpm	r30, Z
     edc:	ec 87       	std	Y+12, r30	; 0x0c
     ede:	fb 01       	movw	r30, r22
     ee0:	3d 96       	adiw	r30, 0x0d	; 13
     ee2:	e4 91       	lpm	r30, Z
     ee4:	ed 87       	std	Y+13, r30	; 0x0d
     ee6:	fb 01       	movw	r30, r22
     ee8:	3e 96       	adiw	r30, 0x0e	; 14
     eea:	e4 91       	lpm	r30, Z
     eec:	ee 87       	std	Y+14, r30	; 0x0e
     eee:	fb 01       	movw	r30, r22
     ef0:	3f 96       	adiw	r30, 0x0f	; 15
     ef2:	e4 91       	lpm	r30, Z
     ef4:	ef 87       	std	Y+15, r30	; 0x0f
     ef6:	fb 01       	movw	r30, r22
     ef8:	70 96       	adiw	r30, 0x10	; 16
     efa:	e4 91       	lpm	r30, Z
     efc:	e8 8b       	std	Y+16, r30	; 0x10
     efe:	61 e1       	ldi	r22, 0x11	; 17
     f00:	c8 01       	movw	r24, r16
     f02:	85 df       	rcall	.-246    	; 0xe0e <u8g2_font_get_word>
     f04:	9a 8b       	std	Y+18, r25	; 0x12
     f06:	89 8b       	std	Y+17, r24	; 0x11
     f08:	63 e1       	ldi	r22, 0x13	; 19
     f0a:	c8 01       	movw	r24, r16
     f0c:	80 df       	rcall	.-256    	; 0xe0e <u8g2_font_get_word>
     f0e:	9c 8b       	std	Y+20, r25	; 0x14
     f10:	8b 8b       	std	Y+19, r24	; 0x13
     f12:	65 e1       	ldi	r22, 0x15	; 21
     f14:	c8 01       	movw	r24, r16
     f16:	7b df       	rcall	.-266    	; 0xe0e <u8g2_font_get_word>
     f18:	9e 8b       	std	Y+22, r25	; 0x16
     f1a:	8d 8b       	std	Y+21, r24	; 0x15
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	08 95       	ret

00000f26 <u8g2_font_decode_get_unsigned_bits>:
     f26:	dc 01       	movw	r26, r24
     f28:	18 96       	adiw	r26, 0x08	; 8
     f2a:	9c 91       	ld	r25, X
     f2c:	18 97       	sbiw	r26, 0x08	; 8
     f2e:	ed 91       	ld	r30, X+
     f30:	fc 91       	ld	r31, X
     f32:	11 97       	sbiw	r26, 0x01	; 1
     f34:	24 91       	lpm	r18, Z
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	09 2e       	mov	r0, r25
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <u8g2_font_decode_get_unsigned_bits+0x1a>
     f3c:	35 95       	asr	r19
     f3e:	27 95       	ror	r18
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <u8g2_font_decode_get_unsigned_bits+0x16>
     f44:	89 2f       	mov	r24, r25
     f46:	86 0f       	add	r24, r22
     f48:	88 30       	cpi	r24, 0x08	; 8
     f4a:	10 f4       	brcc	.+4      	; 0xf50 <u8g2_font_decode_get_unsigned_bits+0x2a>
     f4c:	e2 2f       	mov	r30, r18
     f4e:	0f c0       	rjmp	.+30     	; 0xf6e <u8g2_font_decode_get_unsigned_bits+0x48>
     f50:	31 96       	adiw	r30, 0x01	; 1
     f52:	11 96       	adiw	r26, 0x01	; 1
     f54:	fc 93       	st	X, r31
     f56:	ee 93       	st	-X, r30
     f58:	e4 91       	lpm	r30, Z
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	38 e0       	ldi	r19, 0x08	; 8
     f5e:	39 1b       	sub	r19, r25
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <u8g2_font_decode_get_unsigned_bits+0x40>
     f62:	ee 0f       	add	r30, r30
     f64:	ff 1f       	adc	r31, r31
     f66:	3a 95       	dec	r19
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <u8g2_font_decode_get_unsigned_bits+0x3c>
     f6a:	e2 2b       	or	r30, r18
     f6c:	88 50       	subi	r24, 0x08	; 8
     f6e:	18 96       	adiw	r26, 0x08	; 8
     f70:	8c 93       	st	X, r24
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <u8g2_font_decode_get_unsigned_bits+0x56>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	6a 95       	dec	r22
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <u8g2_font_decode_get_unsigned_bits+0x52>
     f80:	81 50       	subi	r24, 0x01	; 1
     f82:	8e 23       	and	r24, r30
     f84:	08 95       	ret

00000f86 <u8g2_font_setup_decode>:
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	ec 01       	movw	r28, r24
     f90:	8c 01       	movw	r16, r24
     f92:	06 5c       	subi	r16, 0xC6	; 198
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
     f96:	7b af       	std	Y+59, r23	; 0x3b
     f98:	6a af       	std	Y+58, r22	; 0x3a
     f9a:	fc 01       	movw	r30, r24
     f9c:	ee 5b       	subi	r30, 0xBE	; 190
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	10 82       	st	Z, r1
     fa2:	39 96       	adiw	r30, 0x09	; 9
     fa4:	60 81       	ld	r22, Z
     fa6:	c8 01       	movw	r24, r16
     fa8:	be df       	rcall	.-132    	; 0xf26 <u8g2_font_decode_get_unsigned_bits>
     faa:	fe 01       	movw	r30, r28
     fac:	e0 5c       	subi	r30, 0xC0	; 192
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	80 83       	st	Z, r24
     fb2:	3c 96       	adiw	r30, 0x0c	; 12
     fb4:	60 81       	ld	r22, Z
     fb6:	c8 01       	movw	r24, r16
     fb8:	b6 df       	rcall	.-148    	; 0xf26 <u8g2_font_decode_get_unsigned_bits>
     fba:	fe 01       	movw	r30, r28
     fbc:	ef 5b       	subi	r30, 0xBF	; 191
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	80 83       	st	Z, r24
     fc2:	b3 96       	adiw	r30, 0x23	; 35
     fc4:	80 81       	ld	r24, Z
     fc6:	b0 97       	sbiw	r30, 0x20	; 32
     fc8:	80 83       	st	Z, r24
     fca:	cb 5b       	subi	r28, 0xBB	; 187
     fcc:	df 4f       	sbci	r29, 0xFF	; 255
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	81 11       	cpse	r24, r1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	98 83       	st	Y, r25
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	08 95       	ret

00000fe0 <u8g2_font_decode_get_signed_bits>:
     fe0:	cf 93       	push	r28
     fe2:	c6 2f       	mov	r28, r22
     fe4:	a0 df       	rcall	.-192    	; 0xf26 <u8g2_font_decode_get_unsigned_bits>
     fe6:	c1 50       	subi	r28, 0x01	; 1
     fe8:	21 e0       	ldi	r18, 0x01	; 1
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <u8g2_font_decode_get_signed_bits+0x12>
     fee:	22 0f       	add	r18, r18
     ff0:	33 1f       	adc	r19, r19
     ff2:	ca 95       	dec	r28
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <u8g2_font_decode_get_signed_bits+0xe>
     ff6:	82 1b       	sub	r24, r18
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <u8g2_font_decode_len>:
     ffc:	2f 92       	push	r2
     ffe:	3f 92       	push	r3
    1000:	4f 92       	push	r4
    1002:	5f 92       	push	r5
    1004:	6f 92       	push	r6
    1006:	7f 92       	push	r7
    1008:	8f 92       	push	r8
    100a:	9f 92       	push	r9
    100c:	af 92       	push	r10
    100e:	bf 92       	push	r11
    1010:	cf 92       	push	r12
    1012:	df 92       	push	r13
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	28 97       	sbiw	r28, 0x08	; 8
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	7c 01       	movw	r14, r24
    1032:	68 87       	std	Y+8, r22	; 0x08
    1034:	34 2e       	mov	r3, r20
    1036:	fc 01       	movw	r30, r24
    1038:	76 ac       	ldd	r7, Z+62	; 0x3e
    103a:	17 ad       	ldd	r17, Z+63	; 0x3f
    103c:	5c 01       	movw	r10, r24
    103e:	f0 e4       	ldi	r31, 0x40	; 64
    1040:	af 0e       	add	r10, r31
    1042:	b1 1c       	adc	r11, r1
    1044:	6c 01       	movw	r12, r24
    1046:	86 e4       	ldi	r24, 0x46	; 70
    1048:	c8 0e       	add	r12, r24
    104a:	d1 1c       	adc	r13, r1
    104c:	47 01       	movw	r8, r14
    104e:	93 e4       	ldi	r25, 0x43	; 67
    1050:	89 0e       	add	r8, r25
    1052:	91 1c       	adc	r9, r1
    1054:	f7 01       	movw	r30, r14
    1056:	ec 59       	subi	r30, 0x9C	; 156
    1058:	ff 4f       	sbci	r31, 0xFF	; 255
    105a:	fa 83       	std	Y+2, r31	; 0x02
    105c:	e9 83       	std	Y+1, r30	; 0x01
    105e:	c7 01       	movw	r24, r14
    1060:	8b 5b       	subi	r24, 0xBB	; 187
    1062:	9f 4f       	sbci	r25, 0xFF	; 255
    1064:	9e 83       	std	Y+6, r25	; 0x06
    1066:	8d 83       	std	Y+5, r24	; 0x05
    1068:	b0 97       	sbiw	r30, 0x20	; 32
    106a:	fc 83       	std	Y+4, r31	; 0x04
    106c:	eb 83       	std	Y+3, r30	; 0x03
    106e:	f5 01       	movw	r30, r10
    1070:	f0 81       	ld	r31, Z
    1072:	f7 19       	sub	r31, r7
    1074:	ff 83       	std	Y+7, r31	; 0x07
    1076:	58 84       	ldd	r5, Y+8	; 0x08
    1078:	f5 15       	cp	r31, r5
    107a:	08 f4       	brcc	.+2      	; 0x107e <u8g2_font_decode_len+0x82>
    107c:	5f 2e       	mov	r5, r31
    107e:	f7 01       	movw	r30, r14
    1080:	65 ac       	ldd	r6, Z+61	; 0x3d
    1082:	f6 01       	movw	r30, r12
    1084:	00 81       	ld	r16, Z
    1086:	21 2e       	mov	r2, r17
    1088:	20 2f       	mov	r18, r16
    108a:	41 2f       	mov	r20, r17
    108c:	67 2d       	mov	r22, r7
    108e:	f7 01       	movw	r30, r14
    1090:	84 ad       	ldd	r24, Z+60	; 0x3c
    1092:	d7 de       	rcall	.-594    	; 0xe42 <u8g2_add_vector_x>
    1094:	48 2e       	mov	r4, r24
    1096:	20 2f       	mov	r18, r16
    1098:	41 2f       	mov	r20, r17
    109a:	67 2d       	mov	r22, r7
    109c:	86 2d       	mov	r24, r6
    109e:	c3 de       	rcall	.-634    	; 0xe26 <u8g2_add_vector_y>
    10a0:	33 20       	and	r3, r3
    10a2:	61 f0       	breq	.+24     	; 0x10bc <u8g2_font_decode_len+0xc0>
    10a4:	eb 81       	ldd	r30, Y+3	; 0x03
    10a6:	fc 81       	ldd	r31, Y+4	; 0x04
    10a8:	90 81       	ld	r25, Z
    10aa:	e9 81       	ldd	r30, Y+1	; 0x01
    10ac:	fa 81       	ldd	r31, Y+2	; 0x02
    10ae:	90 83       	st	Z, r25
    10b0:	25 2d       	mov	r18, r5
    10b2:	48 2f       	mov	r20, r24
    10b4:	64 2d       	mov	r22, r4
    10b6:	c7 01       	movw	r24, r14
    10b8:	ec d2       	rcall	.+1496   	; 0x1692 <u8g2_DrawHVLine>
    10ba:	0f c0       	rjmp	.+30     	; 0x10da <u8g2_font_decode_len+0xde>
    10bc:	f4 01       	movw	r30, r8
    10be:	90 81       	ld	r25, Z
    10c0:	91 11       	cpse	r25, r1
    10c2:	0b c0       	rjmp	.+22     	; 0x10da <u8g2_font_decode_len+0xde>
    10c4:	ed 81       	ldd	r30, Y+5	; 0x05
    10c6:	fe 81       	ldd	r31, Y+6	; 0x06
    10c8:	90 81       	ld	r25, Z
    10ca:	e9 81       	ldd	r30, Y+1	; 0x01
    10cc:	fa 81       	ldd	r31, Y+2	; 0x02
    10ce:	90 83       	st	Z, r25
    10d0:	25 2d       	mov	r18, r5
    10d2:	48 2f       	mov	r20, r24
    10d4:	64 2d       	mov	r22, r4
    10d6:	c7 01       	movw	r24, r14
    10d8:	dc d2       	rcall	.+1464   	; 0x1692 <u8g2_DrawHVLine>
    10da:	f8 85       	ldd	r31, Y+8	; 0x08
    10dc:	8f 81       	ldd	r24, Y+7	; 0x07
    10de:	f8 17       	cp	r31, r24
    10e0:	28 f0       	brcs	.+10     	; 0x10ec <u8g2_font_decode_len+0xf0>
    10e2:	f8 1b       	sub	r31, r24
    10e4:	f8 87       	std	Y+8, r31	; 0x08
    10e6:	1f 5f       	subi	r17, 0xFF	; 255
    10e8:	71 2c       	mov	r7, r1
    10ea:	c1 cf       	rjmp	.-126    	; 0x106e <u8g2_font_decode_len+0x72>
    10ec:	88 85       	ldd	r24, Y+8	; 0x08
    10ee:	87 0d       	add	r24, r7
    10f0:	f7 01       	movw	r30, r14
    10f2:	86 af       	std	Z+62, r24	; 0x3e
    10f4:	27 ae       	std	Z+63, r2	; 0x3f
    10f6:	28 96       	adiw	r28, 0x08	; 8
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	bf 90       	pop	r11
    1114:	af 90       	pop	r10
    1116:	9f 90       	pop	r9
    1118:	8f 90       	pop	r8
    111a:	7f 90       	pop	r7
    111c:	6f 90       	pop	r6
    111e:	5f 90       	pop	r5
    1120:	4f 90       	pop	r4
    1122:	3f 90       	pop	r3
    1124:	2f 90       	pop	r2
    1126:	08 95       	ret

00001128 <u8g2_font_decode_glyph>:
    1128:	8f 92       	push	r8
    112a:	9f 92       	push	r9
    112c:	af 92       	push	r10
    112e:	bf 92       	push	r11
    1130:	cf 92       	push	r12
    1132:	df 92       	push	r13
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	ec 01       	movw	r28, r24
    1142:	7c 01       	movw	r14, r24
    1144:	8a e3       	ldi	r24, 0x3A	; 58
    1146:	e8 0e       	add	r14, r24
    1148:	f1 1c       	adc	r15, r1
    114a:	ce 01       	movw	r24, r28
    114c:	1c df       	rcall	.-456    	; 0xf86 <u8g2_font_setup_decode>
    114e:	fe 01       	movw	r30, r28
    1150:	ef 5b       	subi	r30, 0xBF	; 191
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	90 80       	ld	r9, Z
    1156:	3c 96       	adiw	r30, 0x0c	; 12
    1158:	60 81       	ld	r22, Z
    115a:	c7 01       	movw	r24, r14
    115c:	41 df       	rcall	.-382    	; 0xfe0 <u8g2_font_decode_get_signed_bits>
    115e:	b8 2e       	mov	r11, r24
    1160:	fe 01       	movw	r30, r28
    1162:	e2 5b       	subi	r30, 0xB2	; 178
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	60 81       	ld	r22, Z
    1168:	c7 01       	movw	r24, r14
    116a:	3a df       	rcall	.-396    	; 0xfe0 <u8g2_font_decode_get_signed_bits>
    116c:	18 2f       	mov	r17, r24
    116e:	fe 01       	movw	r30, r28
    1170:	e1 5b       	subi	r30, 0xB1	; 177
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	60 81       	ld	r22, Z
    1176:	c7 01       	movw	r24, r14
    1178:	33 df       	rcall	.-410    	; 0xfe0 <u8g2_font_decode_get_signed_bits>
    117a:	88 2e       	mov	r8, r24
    117c:	fe 01       	movw	r30, r28
    117e:	e0 5c       	subi	r30, 0xC0	; 192
    1180:	ff 4f       	sbci	r31, 0xFF	; 255
    1182:	d0 80       	ld	r13, Z
    1184:	1d 14       	cp	r1, r13
    1186:	0c f0       	brlt	.+2      	; 0x118a <u8g2_font_decode_glyph+0x62>
    1188:	6f c0       	rjmp	.+222    	; 0x1268 <u8g2_font_decode_glyph+0x140>
    118a:	36 96       	adiw	r30, 0x06	; 6
    118c:	00 81       	ld	r16, Z
    118e:	19 0d       	add	r17, r9
    1190:	11 95       	neg	r17
    1192:	20 2f       	mov	r18, r16
    1194:	41 2f       	mov	r20, r17
    1196:	6b 2d       	mov	r22, r11
    1198:	8c ad       	ldd	r24, Y+60	; 0x3c
    119a:	53 de       	rcall	.-858    	; 0xe42 <u8g2_add_vector_x>
    119c:	c8 2e       	mov	r12, r24
    119e:	8c af       	std	Y+60, r24	; 0x3c
    11a0:	20 2f       	mov	r18, r16
    11a2:	41 2f       	mov	r20, r17
    11a4:	6b 2d       	mov	r22, r11
    11a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    11a8:	3e de       	rcall	.-900    	; 0xe26 <u8g2_add_vector_y>
    11aa:	8d af       	std	Y+61, r24	; 0x3d
    11ac:	01 30       	cpi	r16, 0x01	; 1
    11ae:	59 f0       	breq	.+22     	; 0x11c6 <u8g2_font_decode_glyph+0x9e>
    11b0:	28 f0       	brcs	.+10     	; 0x11bc <u8g2_font_decode_glyph+0x94>
    11b2:	02 30       	cpi	r16, 0x02	; 2
    11b4:	91 f0       	breq	.+36     	; 0x11da <u8g2_font_decode_glyph+0xb2>
    11b6:	03 30       	cpi	r16, 0x03	; 3
    11b8:	d9 f0       	breq	.+54     	; 0x11f0 <u8g2_font_decode_glyph+0xc8>
    11ba:	23 c0       	rjmp	.+70     	; 0x1202 <u8g2_font_decode_glyph+0xda>
    11bc:	2d 2d       	mov	r18, r13
    11be:	2c 0d       	add	r18, r12
    11c0:	09 2d       	mov	r16, r9
    11c2:	08 0f       	add	r16, r24
    11c4:	20 c0       	rjmp	.+64     	; 0x1206 <u8g2_font_decode_glyph+0xde>
    11c6:	9c 2d       	mov	r25, r12
    11c8:	99 19       	sub	r25, r9
    11ca:	21 e0       	ldi	r18, 0x01	; 1
    11cc:	2c 0d       	add	r18, r12
    11ce:	0d 2d       	mov	r16, r13
    11d0:	08 0f       	add	r16, r24
    11d2:	cc 24       	eor	r12, r12
    11d4:	c3 94       	inc	r12
    11d6:	c9 0e       	add	r12, r25
    11d8:	16 c0       	rjmp	.+44     	; 0x1206 <u8g2_font_decode_glyph+0xde>
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	39 2f       	mov	r19, r25
    11de:	3d 19       	sub	r19, r13
    11e0:	21 e0       	ldi	r18, 0x01	; 1
    11e2:	2c 0d       	add	r18, r12
    11e4:	99 19       	sub	r25, r9
    11e6:	01 e0       	ldi	r16, 0x01	; 1
    11e8:	08 0f       	add	r16, r24
    11ea:	89 0f       	add	r24, r25
    11ec:	c3 0e       	add	r12, r19
    11ee:	0b c0       	rjmp	.+22     	; 0x1206 <u8g2_font_decode_glyph+0xde>
    11f0:	29 2d       	mov	r18, r9
    11f2:	2c 0d       	add	r18, r12
    11f4:	98 2f       	mov	r25, r24
    11f6:	9d 19       	sub	r25, r13
    11f8:	01 e0       	ldi	r16, 0x01	; 1
    11fa:	08 0f       	add	r16, r24
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	89 0f       	add	r24, r25
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <u8g2_font_decode_glyph+0xde>
    1202:	08 2f       	mov	r16, r24
    1204:	2c 2d       	mov	r18, r12
    1206:	48 2f       	mov	r20, r24
    1208:	6c 2d       	mov	r22, r12
    120a:	ce 01       	movw	r24, r28
    120c:	d7 d2       	rcall	.+1454   	; 0x17bc <u8g2_IsIntersection>
    120e:	88 23       	and	r24, r24
    1210:	59 f1       	breq	.+86     	; 0x1268 <u8g2_font_decode_glyph+0x140>
    1212:	1e ae       	std	Y+62, r1	; 0x3e
    1214:	1f ae       	std	Y+63, r1	; 0x3f
    1216:	5e 01       	movw	r10, r28
    1218:	e9 e4       	ldi	r30, 0x49	; 73
    121a:	ae 0e       	add	r10, r30
    121c:	b1 1c       	adc	r11, r1
    121e:	6e 01       	movw	r12, r28
    1220:	fa e4       	ldi	r31, 0x4A	; 74
    1222:	cf 0e       	add	r12, r31
    1224:	d1 1c       	adc	r13, r1
    1226:	f5 01       	movw	r30, r10
    1228:	60 81       	ld	r22, Z
    122a:	c7 01       	movw	r24, r14
    122c:	7c de       	rcall	.-776    	; 0xf26 <u8g2_font_decode_get_unsigned_bits>
    122e:	08 2f       	mov	r16, r24
    1230:	f6 01       	movw	r30, r12
    1232:	60 81       	ld	r22, Z
    1234:	c7 01       	movw	r24, r14
    1236:	77 de       	rcall	.-786    	; 0xf26 <u8g2_font_decode_get_unsigned_bits>
    1238:	18 2f       	mov	r17, r24
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	60 2f       	mov	r22, r16
    123e:	ce 01       	movw	r24, r28
    1240:	dd de       	rcall	.-582    	; 0xffc <u8g2_font_decode_len>
    1242:	41 e0       	ldi	r20, 0x01	; 1
    1244:	61 2f       	mov	r22, r17
    1246:	ce 01       	movw	r24, r28
    1248:	d9 de       	rcall	.-590    	; 0xffc <u8g2_font_decode_len>
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	c7 01       	movw	r24, r14
    124e:	6b de       	rcall	.-810    	; 0xf26 <u8g2_font_decode_get_unsigned_bits>
    1250:	81 11       	cpse	r24, r1
    1252:	f3 cf       	rjmp	.-26     	; 0x123a <u8g2_font_decode_glyph+0x112>
    1254:	8f ad       	ldd	r24, Y+63	; 0x3f
    1256:	89 15       	cp	r24, r9
    1258:	34 f3       	brlt	.-52     	; 0x1226 <u8g2_font_decode_glyph+0xfe>
    125a:	fe 01       	movw	r30, r28
    125c:	ec 59       	subi	r30, 0x9C	; 156
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	cc 5b       	subi	r28, 0xBC	; 188
    1262:	df 4f       	sbci	r29, 0xFF	; 255
    1264:	88 81       	ld	r24, Y
    1266:	80 83       	st	Z, r24
    1268:	88 2d       	mov	r24, r8
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	df 90       	pop	r13
    1278:	cf 90       	pop	r12
    127a:	bf 90       	pop	r11
    127c:	af 90       	pop	r10
    127e:	9f 90       	pop	r9
    1280:	8f 90       	pop	r8
    1282:	08 95       	ret

00001284 <u8g2_font_get_glyph_data>:
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	fc 01       	movw	r30, r24
    1292:	c6 a9       	ldd	r28, Z+54	; 0x36
    1294:	d7 a9       	ldd	r29, Z+55	; 0x37
    1296:	67 96       	adiw	r28, 0x17	; 23
    1298:	6f 3f       	cpi	r22, 0xFF	; 255
    129a:	71 05       	cpc	r23, r1
    129c:	11 f0       	breq	.+4      	; 0x12a2 <u8g2_font_get_glyph_data+0x1e>
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <u8g2_font_get_glyph_data+0x1e>
    12a0:	36 c0       	rjmp	.+108    	; 0x130e <u8g2_font_get_glyph_data+0x8a>
    12a2:	61 36       	cpi	r22, 0x61	; 97
    12a4:	71 05       	cpc	r23, r1
    12a6:	38 f0       	brcs	.+14     	; 0x12b6 <u8g2_font_get_glyph_data+0x32>
    12a8:	e6 5a       	subi	r30, 0xA6	; 166
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	80 81       	ld	r24, Z
    12ae:	91 81       	ldd	r25, Z+1	; 0x01
    12b0:	c8 0f       	add	r28, r24
    12b2:	d9 1f       	adc	r29, r25
    12b4:	0a c0       	rjmp	.+20     	; 0x12ca <u8g2_font_get_glyph_data+0x46>
    12b6:	61 34       	cpi	r22, 0x41	; 65
    12b8:	71 05       	cpc	r23, r1
    12ba:	38 f0       	brcs	.+14     	; 0x12ca <u8g2_font_get_glyph_data+0x46>
    12bc:	fc 01       	movw	r30, r24
    12be:	e8 5a       	subi	r30, 0xA8	; 168
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	80 81       	ld	r24, Z
    12c4:	91 81       	ldd	r25, Z+1	; 0x01
    12c6:	c8 0f       	add	r28, r24
    12c8:	d9 1f       	adc	r29, r25
    12ca:	ce 01       	movw	r24, r28
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	fc 01       	movw	r30, r24
    12d0:	24 91       	lpm	r18, Z
    12d2:	22 23       	and	r18, r18
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <u8g2_font_get_glyph_data+0x54>
    12d6:	58 c0       	rjmp	.+176    	; 0x1388 <u8g2_font_get_glyph_data+0x104>
    12d8:	fe 01       	movw	r30, r28
    12da:	24 91       	lpm	r18, Z
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	62 17       	cp	r22, r18
    12e0:	73 07       	cpc	r23, r19
    12e2:	51 f4       	brne	.+20     	; 0x12f8 <u8g2_font_get_glyph_data+0x74>
    12e4:	06 c0       	rjmp	.+12     	; 0x12f2 <u8g2_font_get_glyph_data+0x6e>
    12e6:	fe 01       	movw	r30, r28
    12e8:	24 91       	lpm	r18, Z
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	62 17       	cp	r22, r18
    12ee:	73 07       	cpc	r23, r19
    12f0:	19 f4       	brne	.+6      	; 0x12f8 <u8g2_font_get_glyph_data+0x74>
    12f2:	ce 01       	movw	r24, r28
    12f4:	02 96       	adiw	r24, 0x02	; 2
    12f6:	50 c0       	rjmp	.+160    	; 0x1398 <u8g2_font_get_glyph_data+0x114>
    12f8:	fc 01       	movw	r30, r24
    12fa:	84 91       	lpm	r24, Z
    12fc:	c8 0f       	add	r28, r24
    12fe:	d1 1d       	adc	r29, r1
    1300:	ce 01       	movw	r24, r28
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	fc 01       	movw	r30, r24
    1306:	24 91       	lpm	r18, Z
    1308:	21 11       	cpse	r18, r1
    130a:	ed cf       	rjmp	.-38     	; 0x12e6 <u8g2_font_get_glyph_data+0x62>
    130c:	40 c0       	rjmp	.+128    	; 0x138e <u8g2_font_get_glyph_data+0x10a>
    130e:	8b 01       	movw	r16, r22
    1310:	fc 01       	movw	r30, r24
    1312:	e4 5a       	subi	r30, 0xA4	; 164
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	80 81       	ld	r24, Z
    1318:	91 81       	ldd	r25, Z+1	; 0x01
    131a:	c8 0f       	add	r28, r24
    131c:	d9 1f       	adc	r29, r25
    131e:	7e 01       	movw	r14, r28
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	c7 01       	movw	r24, r14
    1324:	74 dd       	rcall	.-1304   	; 0xe0e <u8g2_font_get_word>
    1326:	c8 0f       	add	r28, r24
    1328:	d9 1f       	adc	r29, r25
    132a:	62 e0       	ldi	r22, 0x02	; 2
    132c:	c7 01       	movw	r24, r14
    132e:	6f dd       	rcall	.-1314   	; 0xe0e <u8g2_font_get_word>
    1330:	f4 e0       	ldi	r31, 0x04	; 4
    1332:	ef 0e       	add	r14, r31
    1334:	f1 1c       	adc	r15, r1
    1336:	80 17       	cp	r24, r16
    1338:	91 07       	cpc	r25, r17
    133a:	90 f3       	brcs	.-28     	; 0x1320 <u8g2_font_get_glyph_data+0x9c>
    133c:	fe 01       	movw	r30, r28
    133e:	84 91       	lpm	r24, Z
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	98 2f       	mov	r25, r24
    1344:	88 27       	eor	r24, r24
    1346:	31 96       	adiw	r30, 0x01	; 1
    1348:	e4 91       	lpm	r30, Z
    134a:	8e 2b       	or	r24, r30
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	11 f1       	breq	.+68     	; 0x1394 <u8g2_font_get_glyph_data+0x110>
    1350:	08 17       	cp	r16, r24
    1352:	19 07       	cpc	r17, r25
    1354:	39 f4       	brne	.+14     	; 0x1364 <u8g2_font_get_glyph_data+0xe0>
    1356:	03 c0       	rjmp	.+6      	; 0x135e <u8g2_font_get_glyph_data+0xda>
    1358:	08 17       	cp	r16, r24
    135a:	19 07       	cpc	r17, r25
    135c:	19 f4       	brne	.+6      	; 0x1364 <u8g2_font_get_glyph_data+0xe0>
    135e:	ce 01       	movw	r24, r28
    1360:	03 96       	adiw	r24, 0x03	; 3
    1362:	1a c0       	rjmp	.+52     	; 0x1398 <u8g2_font_get_glyph_data+0x114>
    1364:	fe 01       	movw	r30, r28
    1366:	32 96       	adiw	r30, 0x02	; 2
    1368:	e4 91       	lpm	r30, Z
    136a:	ce 0f       	add	r28, r30
    136c:	d1 1d       	adc	r29, r1
    136e:	fe 01       	movw	r30, r28
    1370:	84 91       	lpm	r24, Z
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	98 2f       	mov	r25, r24
    1376:	88 27       	eor	r24, r24
    1378:	31 96       	adiw	r30, 0x01	; 1
    137a:	e4 91       	lpm	r30, Z
    137c:	8e 2b       	or	r24, r30
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	59 f7       	brne	.-42     	; 0x1358 <u8g2_font_get_glyph_data+0xd4>
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	08 c0       	rjmp	.+16     	; 0x1398 <u8g2_font_get_glyph_data+0x114>
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	05 c0       	rjmp	.+10     	; 0x1398 <u8g2_font_get_glyph_data+0x114>
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <u8g2_font_get_glyph_data+0x114>
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	ff 90       	pop	r15
    13a2:	ef 90       	pop	r14
    13a4:	08 95       	ret

000013a6 <u8g2_GetGlyphWidth>:
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	ec 01       	movw	r28, r24
    13b0:	69 df       	rcall	.-302    	; 0x1284 <u8g2_font_get_glyph_data>
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	d1 f0       	breq	.+52     	; 0x13ea <u8g2_GetGlyphWidth+0x44>
    13b6:	bc 01       	movw	r22, r24
    13b8:	ce 01       	movw	r24, r28
    13ba:	e5 dd       	rcall	.-1078   	; 0xf86 <u8g2_font_setup_decode>
    13bc:	8e 01       	movw	r16, r28
    13be:	06 5c       	subi	r16, 0xC6	; 198
    13c0:	1f 4f       	sbci	r17, 0xFF	; 255
    13c2:	fe 01       	movw	r30, r28
    13c4:	e3 5b       	subi	r30, 0xB3	; 179
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	60 81       	ld	r22, Z
    13ca:	c8 01       	movw	r24, r16
    13cc:	09 de       	rcall	.-1006   	; 0xfe0 <u8g2_font_decode_get_signed_bits>
    13ce:	fe 01       	movw	r30, r28
    13d0:	ee 59       	subi	r30, 0x9E	; 158
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	80 83       	st	Z, r24
    13d6:	74 97       	sbiw	r30, 0x14	; 20
    13d8:	60 81       	ld	r22, Z
    13da:	c8 01       	movw	r24, r16
    13dc:	01 de       	rcall	.-1022   	; 0xfe0 <u8g2_font_decode_get_signed_bits>
    13de:	c1 5b       	subi	r28, 0xB1	; 177
    13e0:	df 4f       	sbci	r29, 0xFF	; 255
    13e2:	68 81       	ld	r22, Y
    13e4:	c8 01       	movw	r24, r16
    13e6:	fc dd       	rcall	.-1032   	; 0xfe0 <u8g2_font_decode_get_signed_bits>
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <u8g2_GetGlyphWidth+0x46>
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	08 95       	ret

000013f6 <u8g2_string_width>:
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	ec 01       	movw	r28, r24
    1404:	e6 2e       	mov	r14, r22
    1406:	f7 2e       	mov	r15, r23
    1408:	fc 01       	movw	r30, r24
    140a:	e0 5c       	subi	r30, 0xC0	; 192
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	10 82       	st	Z, r1
    1410:	2f d5       	rcall	.+2654   	; 0x1e70 <u8x8_utf8_init>
    1412:	0e 2d       	mov	r16, r14
    1414:	1f 2d       	mov	r17, r15
    1416:	e1 2c       	mov	r14, r1
    1418:	f1 2c       	mov	r15, r1
    141a:	f8 01       	movw	r30, r16
    141c:	61 91       	ld	r22, Z+
    141e:	8f 01       	movw	r16, r30
    1420:	ea 81       	ldd	r30, Y+2	; 0x02
    1422:	fb 81       	ldd	r31, Y+3	; 0x03
    1424:	ce 01       	movw	r24, r28
    1426:	09 95       	icall
    1428:	8f 3f       	cpi	r24, 0xFF	; 255
    142a:	ff ef       	ldi	r31, 0xFF	; 255
    142c:	9f 07       	cpc	r25, r31
    142e:	51 f0       	breq	.+20     	; 0x1444 <u8g2_string_width+0x4e>
    1430:	8e 3f       	cpi	r24, 0xFE	; 254
    1432:	2f ef       	ldi	r18, 0xFF	; 255
    1434:	92 07       	cpc	r25, r18
    1436:	89 f3       	breq	.-30     	; 0x141a <u8g2_string_width+0x24>
    1438:	bc 01       	movw	r22, r24
    143a:	ce 01       	movw	r24, r28
    143c:	b4 df       	rcall	.-152    	; 0x13a6 <u8g2_GetGlyphWidth>
    143e:	e8 2e       	mov	r14, r24
    1440:	f8 0e       	add	r15, r24
    1442:	eb cf       	rjmp	.-42     	; 0x141a <u8g2_string_width+0x24>
    1444:	fe 01       	movw	r30, r28
    1446:	e0 5c       	subi	r30, 0xC0	; 192
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	80 81       	ld	r24, Z
    144c:	88 23       	and	r24, r24
    144e:	31 f0       	breq	.+12     	; 0x145c <u8g2_string_width+0x66>
    1450:	ce 59       	subi	r28, 0x9E	; 158
    1452:	df 4f       	sbci	r29, 0xFF	; 255
    1454:	98 81       	ld	r25, Y
    1456:	89 0f       	add	r24, r25
    1458:	f8 0e       	add	r15, r24
    145a:	fe 18       	sub	r15, r14
    145c:	8f 2d       	mov	r24, r15
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	ff 90       	pop	r15
    1468:	ef 90       	pop	r14
    146a:	08 95       	ret

0000146c <u8g2_DrawGlyph>:
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	ec 01       	movw	r28, r24
    147a:	06 2f       	mov	r16, r22
    147c:	14 2f       	mov	r17, r20
    147e:	79 01       	movw	r14, r18
    1480:	fc 01       	movw	r30, r24
    1482:	ea 5b       	subi	r30, 0xBA	; 186
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	80 81       	ld	r24, Z
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	61 f0       	breq	.+24     	; 0x14a4 <u8g2_DrawGlyph+0x38>
    148c:	28 f0       	brcs	.+10     	; 0x1498 <u8g2_DrawGlyph+0x2c>
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	79 f0       	breq	.+30     	; 0x14b0 <u8g2_DrawGlyph+0x44>
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	99 f0       	breq	.+38     	; 0x14bc <u8g2_DrawGlyph+0x50>
    1496:	17 c0       	rjmp	.+46     	; 0x14c6 <u8g2_DrawGlyph+0x5a>
    1498:	e8 ad       	ldd	r30, Y+56	; 0x38
    149a:	f9 ad       	ldd	r31, Y+57	; 0x39
    149c:	ce 01       	movw	r24, r28
    149e:	09 95       	icall
    14a0:	18 0f       	add	r17, r24
    14a2:	11 c0       	rjmp	.+34     	; 0x14c6 <u8g2_DrawGlyph+0x5a>
    14a4:	e8 ad       	ldd	r30, Y+56	; 0x38
    14a6:	f9 ad       	ldd	r31, Y+57	; 0x39
    14a8:	ce 01       	movw	r24, r28
    14aa:	09 95       	icall
    14ac:	08 1b       	sub	r16, r24
    14ae:	0b c0       	rjmp	.+22     	; 0x14c6 <u8g2_DrawGlyph+0x5a>
    14b0:	e8 ad       	ldd	r30, Y+56	; 0x38
    14b2:	f9 ad       	ldd	r31, Y+57	; 0x39
    14b4:	ce 01       	movw	r24, r28
    14b6:	09 95       	icall
    14b8:	18 1b       	sub	r17, r24
    14ba:	05 c0       	rjmp	.+10     	; 0x14c6 <u8g2_DrawGlyph+0x5a>
    14bc:	e8 ad       	ldd	r30, Y+56	; 0x38
    14be:	f9 ad       	ldd	r31, Y+57	; 0x39
    14c0:	ce 01       	movw	r24, r28
    14c2:	09 95       	icall
    14c4:	08 0f       	add	r16, r24
    14c6:	0c af       	std	Y+60, r16	; 0x3c
    14c8:	1d af       	std	Y+61, r17	; 0x3d
    14ca:	b7 01       	movw	r22, r14
    14cc:	ce 01       	movw	r24, r28
    14ce:	da de       	rcall	.-588    	; 0x1284 <u8g2_font_get_glyph_data>
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	21 f0       	breq	.+8      	; 0x14dc <u8g2_DrawGlyph+0x70>
    14d4:	bc 01       	movw	r22, r24
    14d6:	ce 01       	movw	r24, r28
    14d8:	27 de       	rcall	.-946    	; 0x1128 <u8g2_font_decode_glyph>
    14da:	01 c0       	rjmp	.+2      	; 0x14de <u8g2_DrawGlyph+0x72>
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	08 95       	ret

000014ec <u8g2_draw_string>:
    14ec:	bf 92       	push	r11
    14ee:	cf 92       	push	r12
    14f0:	df 92       	push	r13
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
    1500:	b6 2e       	mov	r11, r22
    1502:	c4 2e       	mov	r12, r20
    1504:	e2 2e       	mov	r14, r18
    1506:	f3 2e       	mov	r15, r19
    1508:	b3 d4       	rcall	.+2406   	; 0x1e70 <u8x8_utf8_init>
    150a:	0e 2d       	mov	r16, r14
    150c:	1f 2d       	mov	r17, r15
    150e:	d1 2c       	mov	r13, r1
    1510:	7e 01       	movw	r14, r28
    1512:	26 e4       	ldi	r18, 0x46	; 70
    1514:	e2 0e       	add	r14, r18
    1516:	f1 1c       	adc	r15, r1
    1518:	f8 01       	movw	r30, r16
    151a:	61 91       	ld	r22, Z+
    151c:	8f 01       	movw	r16, r30
    151e:	ea 81       	ldd	r30, Y+2	; 0x02
    1520:	fb 81       	ldd	r31, Y+3	; 0x03
    1522:	ce 01       	movw	r24, r28
    1524:	09 95       	icall
    1526:	8f 3f       	cpi	r24, 0xFF	; 255
    1528:	ff ef       	ldi	r31, 0xFF	; 255
    152a:	9f 07       	cpc	r25, r31
    152c:	e1 f0       	breq	.+56     	; 0x1566 <u8g2_draw_string+0x7a>
    152e:	8e 3f       	cpi	r24, 0xFE	; 254
    1530:	2f ef       	ldi	r18, 0xFF	; 255
    1532:	92 07       	cpc	r25, r18
    1534:	89 f3       	breq	.-30     	; 0x1518 <u8g2_draw_string+0x2c>
    1536:	9c 01       	movw	r18, r24
    1538:	4c 2d       	mov	r20, r12
    153a:	6b 2d       	mov	r22, r11
    153c:	ce 01       	movw	r24, r28
    153e:	96 df       	rcall	.-212    	; 0x146c <u8g2_DrawGlyph>
    1540:	f7 01       	movw	r30, r14
    1542:	90 81       	ld	r25, Z
    1544:	91 30       	cpi	r25, 0x01	; 1
    1546:	41 f0       	breq	.+16     	; 0x1558 <u8g2_draw_string+0x6c>
    1548:	28 f0       	brcs	.+10     	; 0x1554 <u8g2_draw_string+0x68>
    154a:	92 30       	cpi	r25, 0x02	; 2
    154c:	39 f0       	breq	.+14     	; 0x155c <u8g2_draw_string+0x70>
    154e:	93 30       	cpi	r25, 0x03	; 3
    1550:	39 f0       	breq	.+14     	; 0x1560 <u8g2_draw_string+0x74>
    1552:	07 c0       	rjmp	.+14     	; 0x1562 <u8g2_draw_string+0x76>
    1554:	b8 0e       	add	r11, r24
    1556:	05 c0       	rjmp	.+10     	; 0x1562 <u8g2_draw_string+0x76>
    1558:	c8 0e       	add	r12, r24
    155a:	03 c0       	rjmp	.+6      	; 0x1562 <u8g2_draw_string+0x76>
    155c:	b8 1a       	sub	r11, r24
    155e:	01 c0       	rjmp	.+2      	; 0x1562 <u8g2_draw_string+0x76>
    1560:	c8 1a       	sub	r12, r24
    1562:	d8 0e       	add	r13, r24
    1564:	d9 cf       	rjmp	.-78     	; 0x1518 <u8g2_draw_string+0x2c>
    1566:	8d 2d       	mov	r24, r13
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	ff 90       	pop	r15
    1572:	ef 90       	pop	r14
    1574:	df 90       	pop	r13
    1576:	cf 90       	pop	r12
    1578:	bf 90       	pop	r11
    157a:	08 95       	ret

0000157c <u8g2_DrawUTF8>:
    157c:	e0 ee       	ldi	r30, 0xE0	; 224
    157e:	fe e0       	ldi	r31, 0x0E	; 14
    1580:	dc 01       	movw	r26, r24
    1582:	13 96       	adiw	r26, 0x03	; 3
    1584:	fc 93       	st	X, r31
    1586:	ee 93       	st	-X, r30
    1588:	12 97       	sbiw	r26, 0x02	; 2
    158a:	b0 cf       	rjmp	.-160    	; 0x14ec <u8g2_draw_string>
    158c:	08 95       	ret

0000158e <u8g2_UpdateRefHeight>:
    158e:	fc 01       	movw	r30, r24
    1590:	26 a9       	ldd	r18, Z+54	; 0x36
    1592:	37 a9       	ldd	r19, Z+55	; 0x37
    1594:	23 2b       	or	r18, r19
    1596:	e9 f1       	breq	.+122    	; 0x1612 <u8g2_UpdateRefHeight+0x84>
    1598:	ec 5a       	subi	r30, 0xAC	; 172
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	20 81       	ld	r18, Z
    159e:	3c 96       	adiw	r30, 0x0c	; 12
    15a0:	20 83       	st	Z, r18
    15a2:	3b 97       	sbiw	r30, 0x0b	; 11
    15a4:	40 81       	ld	r20, Z
    15a6:	3c 96       	adiw	r30, 0x0c	; 12
    15a8:	40 83       	st	Z, r20
    15aa:	32 97       	sbiw	r30, 0x02	; 2
    15ac:	30 81       	ld	r19, Z
    15ae:	33 23       	and	r19, r19
    15b0:	81 f1       	breq	.+96     	; 0x1612 <u8g2_UpdateRefHeight+0x84>
    15b2:	31 30       	cpi	r19, 0x01	; 1
    15b4:	79 f4       	brne	.+30     	; 0x15d4 <u8g2_UpdateRefHeight+0x46>
    15b6:	39 97       	sbiw	r30, 0x09	; 9
    15b8:	30 81       	ld	r19, Z
    15ba:	23 17       	cp	r18, r19
    15bc:	14 f4       	brge	.+4      	; 0x15c2 <u8g2_UpdateRefHeight+0x34>
    15be:	3a 96       	adiw	r30, 0x0a	; 10
    15c0:	30 83       	st	Z, r19
    15c2:	fc 01       	movw	r30, r24
    15c4:	e9 5a       	subi	r30, 0xA9	; 169
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	20 81       	ld	r18, Z
    15ca:	24 17       	cp	r18, r20
    15cc:	14 f5       	brge	.+68     	; 0x1612 <u8g2_UpdateRefHeight+0x84>
    15ce:	3a 96       	adiw	r30, 0x0a	; 10
    15d0:	20 83       	st	Z, r18
    15d2:	08 95       	ret
    15d4:	fc 01       	movw	r30, r24
    15d6:	ef 5a       	subi	r30, 0xAF	; 175
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	e0 81       	ld	r30, Z
    15dc:	dc 01       	movw	r26, r24
    15de:	ad 5a       	subi	r26, 0xAD	; 173
    15e0:	bf 4f       	sbci	r27, 0xFF	; 255
    15e2:	5c 91       	ld	r21, X
    15e4:	02 2e       	mov	r0, r18
    15e6:	00 0c       	add	r0, r0
    15e8:	33 0b       	sbc	r19, r19
    15ea:	65 2f       	mov	r22, r21
    15ec:	05 2e       	mov	r0, r21
    15ee:	00 0c       	add	r0, r0
    15f0:	77 0b       	sbc	r23, r23
    15f2:	6e 0f       	add	r22, r30
    15f4:	71 1d       	adc	r23, r1
    15f6:	e7 fd       	sbrc	r30, 7
    15f8:	7a 95       	dec	r23
    15fa:	26 17       	cp	r18, r22
    15fc:	37 07       	cpc	r19, r23
    15fe:	1c f4       	brge	.+6      	; 0x1606 <u8g2_UpdateRefHeight+0x78>
    1600:	1d 96       	adiw	r26, 0x0d	; 13
    1602:	e5 0f       	add	r30, r21
    1604:	ec 93       	st	X, r30
    1606:	54 17       	cp	r21, r20
    1608:	24 f4       	brge	.+8      	; 0x1612 <u8g2_UpdateRefHeight+0x84>
    160a:	fc 01       	movw	r30, r24
    160c:	ef 59       	subi	r30, 0x9F	; 159
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	50 83       	st	Z, r21
    1612:	08 95       	ret

00001614 <u8g2_SetFontRefHeightExtendedText>:
    1614:	fc 01       	movw	r30, r24
    1616:	e1 5a       	subi	r30, 0xA1	; 161
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	21 e0       	ldi	r18, 0x01	; 1
    161c:	20 83       	st	Z, r18
    161e:	b7 cf       	rjmp	.-146    	; 0x158e <u8g2_UpdateRefHeight>
    1620:	08 95       	ret

00001622 <u8g2_SetFontPosBaseline>:
    1622:	2f e2       	ldi	r18, 0x2F	; 47
    1624:	37 e0       	ldi	r19, 0x07	; 7
    1626:	fc 01       	movw	r30, r24
    1628:	31 af       	std	Z+57, r19	; 0x39
    162a:	20 af       	std	Z+56, r18	; 0x38
    162c:	08 95       	ret

0000162e <u8g2_SetFontPosTop>:
    162e:	21 e3       	ldi	r18, 0x31	; 49
    1630:	37 e0       	ldi	r19, 0x07	; 7
    1632:	fc 01       	movw	r30, r24
    1634:	31 af       	std	Z+57, r19	; 0x39
    1636:	20 af       	std	Z+56, r18	; 0x38
    1638:	08 95       	ret

0000163a <u8g2_SetFont>:
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	fc 01       	movw	r30, r24
    1640:	26 a9       	ldd	r18, Z+54	; 0x36
    1642:	37 a9       	ldd	r19, Z+55	; 0x37
    1644:	26 17       	cp	r18, r22
    1646:	37 07       	cpc	r19, r23
    1648:	41 f0       	breq	.+16     	; 0x165a <u8g2_SetFont+0x20>
    164a:	ec 01       	movw	r28, r24
    164c:	77 ab       	std	Z+55, r23	; 0x37
    164e:	66 ab       	std	Z+54, r22	; 0x36
    1650:	89 5b       	subi	r24, 0xB9	; 185
    1652:	9f 4f       	sbci	r25, 0xFF	; 255
    1654:	0c dc       	rcall	.-2024   	; 0xe6e <u8g2_read_font_info>
    1656:	ce 01       	movw	r24, r28
    1658:	9a df       	rcall	.-204    	; 0x158e <u8g2_UpdateRefHeight>
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	08 95       	ret

00001660 <u8g2_GetUTF8Width>:
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_utf8_next;
    1660:	20 ee       	ldi	r18, 0xE0	; 224
    1662:	3e e0       	ldi	r19, 0x0E	; 14
    1664:	fc 01       	movw	r30, r24
    1666:	33 83       	std	Z+3, r19	; 0x03
    1668:	22 83       	std	Z+2, r18	; 0x02
  return u8g2_string_width(u8g2, str);
    166a:	c5 ce       	rjmp	.-630    	; 0x13f6 <u8g2_string_width>
}
    166c:	08 95       	ret

0000166e <u8g2_SetFontDirection>:


void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
    166e:	8a 5b       	subi	r24, 0xBA	; 186
    1670:	9f 4f       	sbci	r25, 0xFF	; 255
    1672:	fc 01       	movw	r30, r24
    1674:	60 83       	st	Z, r22
    1676:	08 95       	ret

00001678 <u8g2_draw_hv_line_2dir>:
    return;
  if ( x >= u8g2->user_x1 )
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
}
    1678:	0f 93       	push	r16
    167a:	dc 01       	movw	r26, r24
    167c:	99 96       	adiw	r26, 0x29	; 41
    167e:	3c 91       	ld	r19, X
    1680:	99 97       	sbiw	r26, 0x29	; 41
    1682:	43 1b       	sub	r20, r19
    1684:	5f 96       	adiw	r26, 0x1f	; 31
    1686:	ed 91       	ld	r30, X+
    1688:	fc 91       	ld	r31, X
    168a:	90 97       	sbiw	r26, 0x20	; 32
    168c:	09 95       	icall
    168e:	0f 91       	pop	r16
    1690:	08 95       	ret

00001692 <u8g2_DrawHVLine>:
    1692:	0f 93       	push	r16
    1694:	fc 01       	movw	r30, r24
    1696:	e2 5a       	subi	r30, 0xA2	; 162
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	30 81       	ld	r19, Z
    169c:	33 23       	and	r19, r19
    169e:	09 f4       	brne	.+2      	; 0x16a2 <u8g2_DrawHVLine+0x10>
    16a0:	65 c0       	rjmp	.+202    	; 0x176c <u8g2_DrawHVLine+0xda>
    16a2:	22 23       	and	r18, r18
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <u8g2_DrawHVLine+0x16>
    16a6:	62 c0       	rjmp	.+196    	; 0x176c <u8g2_DrawHVLine+0xda>
    16a8:	22 30       	cpi	r18, 0x02	; 2
    16aa:	58 f0       	brcs	.+22     	; 0x16c2 <u8g2_DrawHVLine+0x30>
    16ac:	02 30       	cpi	r16, 0x02	; 2
    16ae:	19 f4       	brne	.+6      	; 0x16b6 <u8g2_DrawHVLine+0x24>
    16b0:	6f 5f       	subi	r22, 0xFF	; 255
    16b2:	62 1b       	sub	r22, r18
    16b4:	0a c0       	rjmp	.+20     	; 0x16ca <u8g2_DrawHVLine+0x38>
    16b6:	03 30       	cpi	r16, 0x03	; 3
    16b8:	21 f4       	brne	.+8      	; 0x16c2 <u8g2_DrawHVLine+0x30>
    16ba:	4f 5f       	subi	r20, 0xFF	; 255
    16bc:	42 1b       	sub	r20, r18
    16be:	51 e0       	ldi	r21, 0x01	; 1
    16c0:	2d c0       	rjmp	.+90     	; 0x171c <u8g2_DrawHVLine+0x8a>
    16c2:	50 2f       	mov	r21, r16
    16c4:	51 70       	andi	r21, 0x01	; 1
    16c6:	00 fd       	sbrc	r16, 0
    16c8:	29 c0       	rjmp	.+82     	; 0x171c <u8g2_DrawHVLine+0x8a>
    16ca:	dc 01       	movw	r26, r24
    16cc:	d0 96       	adiw	r26, 0x30	; 48
    16ce:	3c 91       	ld	r19, X
    16d0:	d0 97       	sbiw	r26, 0x30	; 48
    16d2:	43 17       	cp	r20, r19
    16d4:	08 f4       	brcc	.+2      	; 0x16d8 <u8g2_DrawHVLine+0x46>
    16d6:	4a c0       	rjmp	.+148    	; 0x176c <u8g2_DrawHVLine+0xda>
    16d8:	d1 96       	adiw	r26, 0x31	; 49
    16da:	3c 91       	ld	r19, X
    16dc:	d1 97       	sbiw	r26, 0x31	; 49
    16de:	43 17       	cp	r20, r19
    16e0:	08 f0       	brcs	.+2      	; 0x16e4 <u8g2_DrawHVLine+0x52>
    16e2:	44 c0       	rjmp	.+136    	; 0x176c <u8g2_DrawHVLine+0xda>
    16e4:	9f 96       	adiw	r26, 0x2f	; 47
    16e6:	3c 91       	ld	r19, X
    16e8:	9f 97       	sbiw	r26, 0x2f	; 47
    16ea:	9e 96       	adiw	r26, 0x2e	; 46
    16ec:	5c 91       	ld	r21, X
    16ee:	26 0f       	add	r18, r22
    16f0:	26 17       	cp	r18, r22
    16f2:	30 f4       	brcc	.+12     	; 0x1700 <u8g2_DrawHVLine+0x6e>
    16f4:	63 17       	cp	r22, r19
    16f6:	18 f4       	brcc	.+6      	; 0x16fe <u8g2_DrawHVLine+0x6c>
    16f8:	2f ef       	ldi	r18, 0xFF	; 255
    16fa:	23 0f       	add	r18, r19
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <u8g2_DrawHVLine+0x72>
    16fe:	65 2f       	mov	r22, r21
    1700:	63 17       	cp	r22, r19
    1702:	a0 f5       	brcc	.+104    	; 0x176c <u8g2_DrawHVLine+0xda>
    1704:	52 17       	cp	r21, r18
    1706:	90 f5       	brcc	.+100    	; 0x176c <u8g2_DrawHVLine+0xda>
    1708:	65 17       	cp	r22, r21
    170a:	08 f4       	brcc	.+2      	; 0x170e <u8g2_DrawHVLine+0x7c>
    170c:	65 2f       	mov	r22, r21
    170e:	23 17       	cp	r18, r19
    1710:	08 f4       	brcc	.+2      	; 0x1714 <u8g2_DrawHVLine+0x82>
    1712:	32 2f       	mov	r19, r18
    1714:	23 2f       	mov	r18, r19
    1716:	26 1b       	sub	r18, r22
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	1e c0       	rjmp	.+60     	; 0x1758 <u8g2_DrawHVLine+0xc6>
    171c:	fc 01       	movw	r30, r24
    171e:	36 a5       	ldd	r19, Z+46	; 0x2e
    1720:	63 17       	cp	r22, r19
    1722:	20 f1       	brcs	.+72     	; 0x176c <u8g2_DrawHVLine+0xda>
    1724:	37 a5       	ldd	r19, Z+47	; 0x2f
    1726:	63 17       	cp	r22, r19
    1728:	08 f5       	brcc	.+66     	; 0x176c <u8g2_DrawHVLine+0xda>
    172a:	31 a9       	ldd	r19, Z+49	; 0x31
    172c:	70 a9       	ldd	r23, Z+48	; 0x30
    172e:	24 0f       	add	r18, r20
    1730:	24 17       	cp	r18, r20
    1732:	30 f4       	brcc	.+12     	; 0x1740 <u8g2_DrawHVLine+0xae>
    1734:	43 17       	cp	r20, r19
    1736:	18 f4       	brcc	.+6      	; 0x173e <u8g2_DrawHVLine+0xac>
    1738:	2f ef       	ldi	r18, 0xFF	; 255
    173a:	23 0f       	add	r18, r19
    173c:	03 c0       	rjmp	.+6      	; 0x1744 <u8g2_DrawHVLine+0xb2>
    173e:	47 2f       	mov	r20, r23
    1740:	43 17       	cp	r20, r19
    1742:	a0 f4       	brcc	.+40     	; 0x176c <u8g2_DrawHVLine+0xda>
    1744:	72 17       	cp	r23, r18
    1746:	90 f4       	brcc	.+36     	; 0x176c <u8g2_DrawHVLine+0xda>
    1748:	47 17       	cp	r20, r23
    174a:	08 f4       	brcc	.+2      	; 0x174e <u8g2_DrawHVLine+0xbc>
    174c:	47 2f       	mov	r20, r23
    174e:	23 17       	cp	r18, r19
    1750:	08 f4       	brcc	.+2      	; 0x1754 <u8g2_DrawHVLine+0xc2>
    1752:	32 2f       	mov	r19, r18
    1754:	23 2f       	mov	r18, r19
    1756:	24 1b       	sub	r18, r20
    1758:	dc 01       	movw	r26, r24
    175a:	91 96       	adiw	r26, 0x21	; 33
    175c:	ed 91       	ld	r30, X+
    175e:	fc 91       	ld	r31, X
    1760:	92 97       	sbiw	r26, 0x22	; 34
    1762:	04 80       	ldd	r0, Z+4	; 0x04
    1764:	f5 81       	ldd	r31, Z+5	; 0x05
    1766:	e0 2d       	mov	r30, r0
    1768:	05 2f       	mov	r16, r21
    176a:	09 95       	icall
    176c:	0f 91       	pop	r16
    176e:	08 95       	ret

00001770 <u8g2_DrawHLine>:
    1770:	0f 93       	push	r16
    1772:	00 e0       	ldi	r16, 0x00	; 0
    1774:	8e df       	rcall	.-228    	; 0x1692 <u8g2_DrawHVLine>
    1776:	0f 91       	pop	r16
    1778:	08 95       	ret

0000177a <u8g2_SetDrawColor>:
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    177a:	63 30       	cpi	r22, 0x03	; 3
    177c:	28 f4       	brcc	.+10     	; 0x1788 <u8g2_SetDrawColor+0xe>
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
    177e:	fc 01       	movw	r30, r24
    1780:	ec 59       	subi	r30, 0x9C	; 156
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	60 83       	st	Z, r22
    1786:	08 95       	ret
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    1788:	fc 01       	movw	r30, r24
    178a:	ec 59       	subi	r30, 0x9C	; 156
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	21 e0       	ldi	r18, 0x01	; 1
    1790:	20 83       	st	Z, r18
    1792:	08 95       	ret

00001794 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    1794:	46 17       	cp	r20, r22
    1796:	38 f4       	brcc	.+14     	; 0x17a6 <u8g2_is_intersection_decision_tree+0x12>
  {
    if ( v1 > a0 )	// v1 >= a0
    1798:	82 17       	cp	r24, r18
    179a:	60 f0       	brcs	.+24     	; 0x17b4 <u8g2_is_intersection_decision_tree+0x20>
    {
      return 1;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	24 17       	cp	r18, r20
    17a0:	60 f0       	brcs	.+24     	; 0x17ba <u8g2_is_intersection_decision_tree+0x26>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    17a6:	82 17       	cp	r24, r18
    17a8:	38 f4       	brcc	.+14     	; 0x17b8 <u8g2_is_intersection_decision_tree+0x24>
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	24 17       	cp	r18, r20
    17ae:	28 f0       	brcs	.+10     	; 0x17ba <u8g2_is_intersection_decision_tree+0x26>
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	08 95       	ret
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
}
    17ba:	08 95       	ret

000017bc <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    17bc:	ff 92       	push	r15
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	ec 01       	movw	r28, r24
    17c8:	16 2f       	mov	r17, r22
    17ca:	f2 2e       	mov	r15, r18
    17cc:	20 2f       	mov	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    17ce:	69 a9       	ldd	r22, Y+49	; 0x31
    17d0:	88 a9       	ldd	r24, Y+48	; 0x30
    17d2:	e0 df       	rcall	.-64     	; 0x1794 <u8g2_is_intersection_decision_tree>
    17d4:	88 23       	and	r24, r24
    17d6:	29 f0       	breq	.+10     	; 0x17e2 <u8g2_IsIntersection+0x26>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    17d8:	2f 2d       	mov	r18, r15
    17da:	41 2f       	mov	r20, r17
    17dc:	6f a5       	ldd	r22, Y+47	; 0x2f
    17de:	8e a5       	ldd	r24, Y+46	; 0x2e
    17e0:	d9 df       	rcall	.-78     	; 0x1794 <u8g2_is_intersection_decision_tree>
}
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	ff 90       	pop	r15
    17ec:	08 95       	ret

000017ee <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	7c 01       	movw	r14, r24
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    17fa:	34 2f       	mov	r19, r20
    17fc:	37 70       	andi	r19, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	03 2e       	mov	r0, r19
    1804:	02 c0       	rjmp	.+4      	; 0x180a <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <u8g2_ll_hvline_vertical_top_lsb+0x18>
    180e:	c8 2f       	mov	r28, r24

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    1810:	f7 01       	movw	r30, r14
    1812:	ec 59       	subi	r30, 0x9C	; 156
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	50 81       	ld	r21, Z
    1818:	52 30       	cpi	r21, 0x02	; 2
    181a:	20 f4       	brcc	.+8      	; 0x1824 <u8g2_ll_hvline_vertical_top_lsb+0x36>
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    181c:	51 30       	cpi	r21, 0x01	; 1
    181e:	21 f0       	breq	.+8      	; 0x1828 <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    1820:	78 2f       	mov	r23, r24
    1822:	04 c0       	rjmp	.+8      	; 0x182c <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	02 c0       	rjmp	.+4      	; 0x182c <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    1828:	78 2f       	mov	r23, r24
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    182a:	c0 e0       	ldi	r28, 0x00	; 0
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
    182c:	50 e0       	ldi	r21, 0x00	; 0
  offset &= ~7;
    182e:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    1830:	d7 01       	movw	r26, r14
    1832:	93 96       	adiw	r26, 0x23	; 35
    1834:	8d 91       	ld	r24, X+
    1836:	9c 91       	ld	r25, X
    1838:	94 97       	sbiw	r26, 0x24	; 36
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    183a:	ed 91       	ld	r30, X+
    183c:	fc 91       	ld	r31, X
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    183e:	d0 89       	ldd	r29, Z+16	; 0x10
    1840:	d4 9f       	mul	r29, r20
    1842:	f0 01       	movw	r30, r0
    1844:	d5 9f       	mul	r29, r21
    1846:	f0 0d       	add	r31, r0
    1848:	11 24       	eor	r1, r1
    184a:	e6 0f       	add	r30, r22
    184c:	f1 1d       	adc	r31, r1
    184e:	e8 0f       	add	r30, r24
    1850:	f9 1f       	adc	r31, r25
  
  if ( dir == 0 )
    1852:	01 11       	cpse	r16, r1
    1854:	07 c0       	rjmp	.+14     	; 0x1864 <u8g2_ll_hvline_vertical_top_lsb+0x76>
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    1856:	80 81       	ld	r24, Z
    1858:	87 2b       	or	r24, r23
    185a:	8c 27       	eor	r24, r28
    185c:	81 93       	st	Z+, r24
	ptr++;
	len--;
    185e:	21 50       	subi	r18, 0x01	; 1
      } while( len != 0 );
    1860:	d1 f7       	brne	.-12     	; 0x1856 <u8g2_ll_hvline_vertical_top_lsb+0x68>
    1862:	22 c0       	rjmp	.+68     	; 0x18a8 <u8g2_ll_hvline_vertical_top_lsb+0xba>

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
    1864:	a7 01       	movw	r20, r14
    1866:	4c 59       	subi	r20, 0x9C	; 156
    1868:	5f 4f       	sbci	r21, 0xFF	; 255
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    186a:	90 81       	ld	r25, Z
    186c:	97 2b       	or	r25, r23
    186e:	9c 27       	eor	r25, r28
    1870:	90 83       	st	Z, r25
      
      bit_pos++;
    1872:	3f 5f       	subi	r19, 0xFF	; 255
      bit_pos &= 7;
    1874:	37 70       	andi	r19, 0x07	; 7

      len--;
    1876:	21 50       	subi	r18, 0x01	; 1

      if ( bit_pos == 0 )
    1878:	31 11       	cpse	r19, r1
    187a:	0e c0       	rjmp	.+28     	; 0x1898 <u8g2_ll_hvline_vertical_top_lsb+0xaa>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    187c:	d7 01       	movw	r26, r14
    187e:	97 96       	adiw	r26, 0x27	; 39
    1880:	8c 91       	ld	r24, X
    1882:	e8 0f       	add	r30, r24
    1884:	f1 1d       	adc	r31, r1
		
	if ( u8g2->draw_color <= 1 )
    1886:	da 01       	movw	r26, r20
    1888:	8c 91       	ld	r24, X
    188a:	82 30       	cpi	r24, 0x02	; 2
    188c:	40 f4       	brcc	.+16     	; 0x189e <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	41 f0       	breq	.+16     	; 0x18a2 <u8g2_ll_hvline_vertical_top_lsb+0xb4>
	  xor_mask = 1;
    1892:	c1 e0       	ldi	r28, 0x01	; 1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    1894:	71 e0       	ldi	r23, 0x01	; 1
    1896:	06 c0       	rjmp	.+12     	; 0x18a4 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    1898:	77 0f       	add	r23, r23
	xor_mask <<= 1;
    189a:	cc 0f       	add	r28, r28
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    189e:	c1 e0       	ldi	r28, 0x01	; 1
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    18a2:	71 e0       	ldi	r23, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    18a4:	21 11       	cpse	r18, r1
    18a6:	e1 cf       	rjmp	.-62     	; 0x186a <u8g2_ll_hvline_vertical_top_lsb+0x7c>
  }
}
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	08 95       	ret

000018b4 <u8g2_DrawUTF8Line>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);

*/
void u8g2_DrawUTF8Line(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, const char *s, uint8_t border_size, uint8_t is_invert)
{
    18b4:	5f 92       	push	r5
    18b6:	6f 92       	push	r6
    18b8:	7f 92       	push	r7
    18ba:	8f 92       	push	r8
    18bc:	9f 92       	push	r9
    18be:	af 92       	push	r10
    18c0:	bf 92       	push	r11
    18c2:	cf 92       	push	r12
    18c4:	df 92       	push	r13
    18c6:	ef 92       	push	r14
    18c8:	ff 92       	push	r15
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	5c 01       	movw	r10, r24
    18d4:	f6 2e       	mov	r15, r22
    18d6:	54 2e       	mov	r5, r20
    18d8:	c2 2f       	mov	r28, r18
    18da:	48 01       	movw	r8, r16
  u8g2_uint_t d, str_width;
  u8g2_uint_t fx, fy, fw, fh;

  /* only horizontal strings are supported, so force this here */
  u8g2_SetFontDirection(u8g2, 0);
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	c7 de       	rcall	.-626    	; 0x166e <u8g2_SetFontDirection>

  /* revert y position back to baseline ref */
  y += u8g2->font_calc_vref(u8g2);   
    18e0:	d5 01       	movw	r26, r10
    18e2:	d8 96       	adiw	r26, 0x38	; 56
    18e4:	ed 91       	ld	r30, X+
    18e6:	fc 91       	ld	r31, X
    18e8:	d9 97       	sbiw	r26, 0x39	; 57
    18ea:	c5 01       	movw	r24, r10
    18ec:	09 95       	icall
    18ee:	58 0e       	add	r5, r24

  /* calculate the width of the string in pixel */
  str_width = u8g2_GetUTF8Width(u8g2, s);
    18f0:	b8 01       	movw	r22, r16
    18f2:	c5 01       	movw	r24, r10
    18f4:	b5 de       	rcall	.-662    	; 0x1660 <u8g2_GetUTF8Width>
    18f6:	d8 2e       	mov	r13, r24

  /* calculate delta d within the box */
  d = 0;
  if ( str_width < w )
    18f8:	8c 17       	cp	r24, r28
    18fa:	28 f4       	brcc	.+10     	; 0x1906 <u8g2_DrawUTF8Line+0x52>
  {
    d = w;
    d -=str_width;
    18fc:	6c 2e       	mov	r6, r28
    18fe:	68 1a       	sub	r6, r24
    d /= 2;
    1900:	66 94       	lsr	r6
    1902:	dc 2e       	mov	r13, r28
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <u8g2_DrawUTF8Line+0x54>

  /* calculate the width of the string in pixel */
  str_width = u8g2_GetUTF8Width(u8g2, s);

  /* calculate delta d within the box */
  d = 0;
    1906:	61 2c       	mov	r6, r1
    w = str_width;
  }

  /* caluclate text box */
  fx = x;
  fy = y - u8g2_GetAscent(u8g2) ;
    1908:	f5 01       	movw	r30, r10
    190a:	e0 5a       	subi	r30, 0xA0	; 160
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	10 81       	ld	r17, Z
    1910:	75 2c       	mov	r7, r5
    1912:	71 1a       	sub	r7, r17
  fw = w;
  fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
    1914:	31 96       	adiw	r30, 0x01	; 1
    1916:	80 81       	ld	r24, Z
    1918:	18 1b       	sub	r17, r24

  /* draw the box, if inverted */
  u8g2_SetDrawColor(u8g2, 1);
    191a:	61 e0       	ldi	r22, 0x01	; 1
    191c:	c5 01       	movw	r24, r10
    191e:	2d df       	rcall	.-422    	; 0x177a <u8g2_SetDrawColor>
  if ( is_invert )
    1920:	cc 20       	and	r12, r12
    1922:	69 f1       	breq	.+90     	; 0x197e <u8g2_DrawUTF8Line+0xca>
  {
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
    1924:	01 2f       	mov	r16, r17
    1926:	2d 2d       	mov	r18, r13
    1928:	47 2d       	mov	r20, r7
    192a:	6f 2d       	mov	r22, r15
    192c:	c5 01       	movw	r24, r10
    192e:	2d d9       	rcall	.-3494   	; 0xb8a <u8g2_DrawBox>
  }

  /* draw the frame */
  while( border_size > 0 )
    1930:	ee 20       	and	r14, r14
    1932:	a1 f0       	breq	.+40     	; 0x195c <u8g2_DrawUTF8Line+0xa8>

  /* calculate the width of the string in pixel */
  str_width = u8g2_GetUTF8Width(u8g2, s);

  /* calculate delta d within the box */
  d = 0;
    1934:	dd 2d       	mov	r29, r13
    1936:	cf 2d       	mov	r28, r15
  }

  /* draw the frame */
  while( border_size > 0 )
  {
    fx--;
    1938:	c1 50       	subi	r28, 0x01	; 1
    fy--;
    fw +=2;
    193a:	de 5f       	subi	r29, 0xFE	; 254
    fh +=2;
    u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
    193c:	01 2f       	mov	r16, r17
    193e:	0d 0f       	add	r16, r29
    1940:	0d 19       	sub	r16, r13
    1942:	4c 2f       	mov	r20, r28
    1944:	4f 19       	sub	r20, r15
    1946:	47 0d       	add	r20, r7
    1948:	2d 2f       	mov	r18, r29
    194a:	6c 2f       	mov	r22, r28
    194c:	c5 01       	movw	r24, r10
    194e:	43 d9       	rcall	.-3450   	; 0xbd6 <u8g2_DrawFrame>
  {
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
  }

  /* draw the frame */
  while( border_size > 0 )
    1950:	8e 2d       	mov	r24, r14
    1952:	8c 0f       	add	r24, r28
    1954:	f8 12       	cpse	r15, r24
    fh +=2;
    u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
    border_size--;
  }

  if ( is_invert )
    1956:	f0 cf       	rjmp	.-32     	; 0x1938 <u8g2_DrawUTF8Line+0x84>
    1958:	cc 20       	and	r12, r12
  {
    u8g2_SetDrawColor(u8g2, 0);
    195a:	21 f0       	breq	.+8      	; 0x1964 <u8g2_DrawUTF8Line+0xb0>
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	c5 01       	movw	r24, r10
    1960:	0c df       	rcall	.-488    	; 0x177a <u8g2_SetDrawColor>
  }
  else
  {
    u8g2_SetDrawColor(u8g2, 1);
    1962:	03 c0       	rjmp	.+6      	; 0x196a <u8g2_DrawUTF8Line+0xb6>
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	c5 01       	movw	r24, r10
  }

  /* draw the text */
  u8g2_DrawUTF8(u8g2, x+d, y, s);
    1968:	08 df       	rcall	.-496    	; 0x177a <u8g2_SetDrawColor>
    196a:	66 2d       	mov	r22, r6
    196c:	6f 0d       	add	r22, r15
    196e:	94 01       	movw	r18, r8
    1970:	45 2d       	mov	r20, r5
    1972:	c5 01       	movw	r24, r10

  /* revert draw color */
  u8g2_SetDrawColor(u8g2, 1);
    1974:	03 de       	rcall	.-1018   	; 0x157c <u8g2_DrawUTF8>
    1976:	61 e0       	ldi	r22, 0x01	; 1
    1978:	c5 01       	movw	r24, r10
    197a:	ff de       	rcall	.-514    	; 0x177a <u8g2_SetDrawColor>

}
    197c:	03 c0       	rjmp	.+6      	; 0x1984 <u8g2_DrawUTF8Line+0xd0>
  {
    u8g2_DrawBox(u8g2, fx, fy, fw, fh);
  }

  /* draw the frame */
  while( border_size > 0 )
    197e:	e1 10       	cpse	r14, r1
    1980:	d9 cf       	rjmp	.-78     	; 0x1934 <u8g2_DrawUTF8Line+0x80>
    1982:	f0 cf       	rjmp	.-32     	; 0x1964 <u8g2_DrawUTF8Line+0xb0>
  u8g2_DrawUTF8(u8g2, x+d, y, s);

  /* revert draw color */
  u8g2_SetDrawColor(u8g2, 1);

}
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	ff 90       	pop	r15
    198e:	ef 90       	pop	r14
    1990:	df 90       	pop	r13
    1992:	cf 90       	pop	r12
    1994:	bf 90       	pop	r11
    1996:	af 90       	pop	r10
    1998:	9f 90       	pop	r9
    199a:	8f 90       	pop	r8
    199c:	7f 90       	pop	r7
    199e:	6f 90       	pop	r6
    19a0:	5f 90       	pop	r5
    19a2:	08 95       	ret

000019a4 <u8g2_draw_selection_list_line>:
  selection list with string line
  returns line height
*/
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s)
{
    19a4:	af 92       	push	r10
    19a6:	bf 92       	push	r11
    19a8:	cf 92       	push	r12
    19aa:	ef 92       	push	r14
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	5c 01       	movw	r10, r24
    19b6:	d4 2f       	mov	r29, r20
    19b8:	82 2f       	mov	r24, r18
  u8g2_uint_t yy;
  uint8_t border_size = 0;
  uint8_t is_invert = 0;
	
  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
    19ba:	f5 01       	movw	r30, r10
    19bc:	e0 5a       	subi	r30, 0xA0	; 160
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	c0 81       	ld	r28, Z
    19c2:	cf 5f       	subi	r28, 0xFF	; 255
    19c4:	31 96       	adiw	r30, 0x01	; 1
    19c6:	90 81       	ld	r25, Z
    19c8:	c9 1b       	sub	r28, r25
*/
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, const char *s)
{
  u8g2_uint_t yy;
  uint8_t border_size = 0;
    19ca:	ee 24       	eor	r14, r14
    19cc:	e3 94       	inc	r14
    19ce:	fb 01       	movw	r30, r22
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	92 13       	cpse	r25, r18
    19d4:	e1 2c       	mov	r14, r1
    border_size = MY_BORDER_SIZE;
    is_invert = 1;
  }

  /* get the line from the array */
  s = u8x8_GetStringLineStart(idx, s);
    19d6:	b8 01       	movw	r22, r16
    19d8:	6b d6       	rcall	.+3286   	; 0x26b0 <u8x8_GetStringLineStart>

  /* draw the line */
  if ( s == NULL )
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	11 f4       	brne	.+4      	; 0x19e2 <u8g2_draw_selection_list_line+0x3e>
    s = "";
    19de:	88 ef       	ldi	r24, 0xF8	; 248
    19e0:	91 e0       	ldi	r25, 0x01	; 1
  u8g2_DrawUTF8Line(u8g2, MY_BORDER_SIZE, y, u8g2_GetDisplayWidth(u8g2)-2*MY_BORDER_SIZE, s, border_size, is_invert);
    19e2:	f5 01       	movw	r30, r10
    19e4:	24 a5       	ldd	r18, Z+44	; 0x2c
    19e6:	22 50       	subi	r18, 0x02	; 2
    19e8:	ce 2c       	mov	r12, r14
    19ea:	8c 01       	movw	r16, r24
    19ec:	4d 2f       	mov	r20, r29
    19ee:	61 e0       	ldi	r22, 0x01	; 1
    19f0:	c5 01       	movw	r24, r10
    19f2:	60 df       	rcall	.-320    	; 0x18b4 <u8g2_DrawUTF8Line>
  return line_height;
}
    19f4:	8c 2f       	mov	r24, r28
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	ef 90       	pop	r14
    1a00:	cf 90       	pop	r12
    1a02:	bf 90       	pop	r11
    1a04:	af 90       	pop	r10
    1a06:	08 95       	ret

00001a08 <u8g2_DrawUTF8Lines>:
  lines can be centered with respect to "w"
  if s == NULL nothing is drawn and 0 is returned
  returns the number of lines in s multiplied with line_height
*/
u8g2_uint_t u8g2_DrawUTF8Lines(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t line_height, const char *s)
{
    1a08:	6f 92       	push	r6
    1a0a:	7f 92       	push	r7
    1a0c:	8f 92       	push	r8
    1a0e:	9f 92       	push	r9
    1a10:	af 92       	push	r10
    1a12:	bf 92       	push	r11
    1a14:	cf 92       	push	r12
    1a16:	df 92       	push	r13
    1a18:	ef 92       	push	r14
    1a1a:	ff 92       	push	r15
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	4c 01       	movw	r8, r24
    1a26:	76 2e       	mov	r7, r22
    1a28:	d4 2f       	mov	r29, r20
    1a2a:	62 2e       	mov	r6, r18
    1a2c:	d0 2e       	mov	r13, r16
    1a2e:	57 01       	movw	r10, r14
  uint8_t i;
  uint8_t cnt;
  u8g2_uint_t yy = 0;
  cnt = u8x8_GetStringLineCnt(s);
    1a30:	c7 01       	movw	r24, r14
    1a32:	31 d6       	rcall	.+3170   	; 0x2696 <u8x8_GetStringLineCnt>
    1a34:	f8 2e       	mov	r15, r24
  //printf("str=%s\n", s);
  //printf("cnt=%d, y=%d, line_height=%d\n", cnt, y, line_height);
  for( i = 0; i < cnt; i++ )
    1a36:	88 23       	and	r24, r24
    1a38:	a1 f0       	breq	.+40     	; 0x1a62 <u8g2_DrawUTF8Lines+0x5a>
    1a3a:	c0 e0       	ldi	r28, 0x00	; 0
  {
    //printf("  i=%d, y=%d, line_height=%d\n", i, y, line_height);
    u8g2_DrawUTF8Line(u8g2, x, y, w, u8x8_GetStringLineStart(i, s), 0, 0);
    1a3c:	b5 01       	movw	r22, r10
    1a3e:	8c 2f       	mov	r24, r28
    1a40:	37 d6       	rcall	.+3182   	; 0x26b0 <u8x8_GetStringLineStart>
    1a42:	8c 01       	movw	r16, r24
    1a44:	c1 2c       	mov	r12, r1
    1a46:	e1 2c       	mov	r14, r1
    1a48:	26 2d       	mov	r18, r6
    1a4a:	4d 2f       	mov	r20, r29
    1a4c:	67 2d       	mov	r22, r7
    1a4e:	c4 01       	movw	r24, r8
    1a50:	31 df       	rcall	.-414    	; 0x18b4 <u8g2_DrawUTF8Line>
    y+=line_height;
    1a52:	dd 0d       	add	r29, r13
  uint8_t cnt;
  u8g2_uint_t yy = 0;
  cnt = u8x8_GetStringLineCnt(s);
  //printf("str=%s\n", s);
  //printf("cnt=%d, y=%d, line_height=%d\n", cnt, y, line_height);
  for( i = 0; i < cnt; i++ )
    1a54:	cf 5f       	subi	r28, 0xFF	; 255
    1a56:	fc 12       	cpse	r15, r28
    1a58:	f1 cf       	rjmp	.-30     	; 0x1a3c <u8g2_DrawUTF8Lines+0x34>
    1a5a:	fd 9c       	mul	r15, r13
    1a5c:	80 2d       	mov	r24, r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	01 c0       	rjmp	.+2      	; 0x1a64 <u8g2_DrawUTF8Lines+0x5c>
*/
u8g2_uint_t u8g2_DrawUTF8Lines(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t line_height, const char *s)
{
  uint8_t i;
  uint8_t cnt;
  u8g2_uint_t yy = 0;
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    u8g2_DrawUTF8Line(u8g2, x, y, w, u8x8_GetStringLineStart(i, s), 0, 0);
    y+=line_height;
    yy+=line_height;
  }
  return yy;
}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	df 90       	pop	r13
    1a72:	cf 90       	pop	r12
    1a74:	bf 90       	pop	r11
    1a76:	af 90       	pop	r10
    1a78:	9f 90       	pop	r9
    1a7a:	8f 90       	pop	r8
    1a7c:	7f 90       	pop	r7
    1a7e:	6f 90       	pop	r6
    1a80:	08 95       	ret

00001a82 <u8g2_DrawSelectionList>:
  u8g2_DrawUTF8Line(u8g2, MY_BORDER_SIZE, y, u8g2_GetDisplayWidth(u8g2)-2*MY_BORDER_SIZE, s, border_size, is_invert);
  return line_height;
}

void u8g2_DrawSelectionList(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, const char *s)
{
    1a82:	af 92       	push	r10
    1a84:	bf 92       	push	r11
    1a86:	cf 92       	push	r12
    1a88:	df 92       	push	r13
    1a8a:	ef 92       	push	r14
    1a8c:	ff 92       	push	r15
    1a8e:	0f 93       	push	r16
    1a90:	1f 93       	push	r17
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	6c 01       	movw	r12, r24
    1a98:	7b 01       	movw	r14, r22
    1a9a:	d4 2f       	mov	r29, r20
    1a9c:	59 01       	movw	r10, r18
  uint8_t i;
  for( i = 0; i < u8sl->visible; i++ )
    1a9e:	fb 01       	movw	r30, r22
    1aa0:	80 81       	ld	r24, Z
    1aa2:	88 23       	and	r24, r24
    1aa4:	79 f0       	breq	.+30     	; 0x1ac4 <u8g2_DrawSelectionList+0x42>
    1aa6:	c0 e0       	ldi	r28, 0x00	; 0
  {
    y += u8g2_draw_selection_list_line(u8g2, u8sl, y, i+u8sl->first_pos, s);
    1aa8:	f7 01       	movw	r30, r14
    1aaa:	22 81       	ldd	r18, Z+2	; 0x02
    1aac:	2c 0f       	add	r18, r28
    1aae:	85 01       	movw	r16, r10
    1ab0:	4d 2f       	mov	r20, r29
    1ab2:	b7 01       	movw	r22, r14
    1ab4:	c6 01       	movw	r24, r12
    1ab6:	76 df       	rcall	.-276    	; 0x19a4 <u8g2_draw_selection_list_line>
    1ab8:	d8 0f       	add	r29, r24
}

void u8g2_DrawSelectionList(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, const char *s)
{
  uint8_t i;
  for( i = 0; i < u8sl->visible; i++ )
    1aba:	cf 5f       	subi	r28, 0xFF	; 255
    1abc:	f7 01       	movw	r30, r14
    1abe:	80 81       	ld	r24, Z
    1ac0:	c8 17       	cp	r28, r24
    1ac2:	90 f3       	brcs	.-28     	; 0x1aa8 <u8g2_DrawSelectionList+0x26>
  {
    y += u8g2_draw_selection_list_line(u8g2, u8sl, y, i+u8sl->first_pos, s);
  }
}
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	08 95       	ret

00001ada <u8g2_UserInterfaceSelectionList>:
    u8g2_SetFontDirection(u8g2, 0);
    u8g2_SetFontPosBaseline(u8g2);
	
*/
uint8_t u8g2_UserInterfaceSelectionList(u8g2_t *u8g2, const char *title, uint8_t start_pos, const char *sl)
{
    1ada:	3f 92       	push	r3
    1adc:	4f 92       	push	r4
    1ade:	5f 92       	push	r5
    1ae0:	6f 92       	push	r6
    1ae2:	7f 92       	push	r7
    1ae4:	8f 92       	push	r8
    1ae6:	9f 92       	push	r9
    1ae8:	af 92       	push	r10
    1aea:	bf 92       	push	r11
    1aec:	cf 92       	push	r12
    1aee:	df 92       	push	r13
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	28 97       	sbiw	r28, 0x08	; 8
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	6c 01       	movw	r12, r24
    1b0e:	78 87       	std	Y+8, r23	; 0x08
    1b10:	6f 83       	std	Y+7, r22	; 0x07
    1b12:	14 2f       	mov	r17, r20
    1b14:	59 01       	movw	r10, r18
  u8sl_t u8sl;
  u8g2_uint_t yy;

  uint8_t event;

  u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
    1b16:	fc 01       	movw	r30, r24
    1b18:	e0 5a       	subi	r30, 0xA0	; 160
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	40 80       	ld	r4, Z
    1b1e:	43 94       	inc	r4
    1b20:	31 96       	adiw	r30, 0x01	; 1
    1b22:	80 81       	ld	r24, Z
    1b24:	48 1a       	sub	r4, r24

  uint8_t title_lines = u8x8_GetStringLineCnt(title);
    1b26:	cb 01       	movw	r24, r22
    1b28:	b6 d5       	rcall	.+2924   	; 0x2696 <u8x8_GetStringLineCnt>
    1b2a:	58 2e       	mov	r5, r24
  uint8_t display_lines;

  
  if ( start_pos > 0 )	/* issue 112 */
    1b2c:	11 11       	cpse	r17, r1
    start_pos--;		/* issue 112 */
    1b2e:	11 50       	subi	r17, 0x01	; 1


  if ( title_lines > 0 )
    1b30:	55 20       	and	r5, r5
    1b32:	51 f0       	breq	.+20     	; 0x1b48 <u8g2_UserInterfaceSelectionList+0x6e>
  {
	display_lines = (u8g2_GetDisplayHeight(u8g2)-3) / line_height;
	u8sl.visible = display_lines;
	u8sl.visible -= title_lines;
    1b34:	f6 01       	movw	r30, r12
    1b36:	85 a5       	ldd	r24, Z+45	; 0x2d
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	03 97       	sbiw	r24, 0x03	; 3
    1b3c:	64 2d       	mov	r22, r4
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	da d5       	rcall	.+2996   	; 0x26f6 <__divmodhi4>
    1b42:	65 19       	sub	r22, r5
    1b44:	69 83       	std	Y+1, r22	; 0x01
    1b46:	05 c0       	rjmp	.+10     	; 0x1b52 <u8g2_UserInterfaceSelectionList+0x78>
  }
  else
  {
	display_lines = u8g2_GetDisplayHeight(u8g2) / line_height;
	u8sl.visible = display_lines;
    1b48:	f6 01       	movw	r30, r12
    1b4a:	85 a5       	ldd	r24, Z+45	; 0x2d
    1b4c:	64 2d       	mov	r22, r4
    1b4e:	c7 d5       	rcall	.+2958   	; 0x26de <__udivmodqi4>
  }

  u8sl.total = u8x8_GetStringLineCnt(sl);
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	c5 01       	movw	r24, r10
    1b54:	a0 d5       	rcall	.+2880   	; 0x2696 <u8x8_GetStringLineCnt>
    1b56:	8a 83       	std	Y+2, r24	; 0x02
  u8sl.first_pos = 0;
    1b58:	1b 82       	std	Y+3, r1	; 0x03
  u8sl.current_pos = start_pos;

  if ( u8sl.current_pos >= u8sl.total )
    1b5a:	18 17       	cp	r17, r24
    1b5c:	10 f4       	brcc	.+4      	; 0x1b62 <u8g2_UserInterfaceSelectionList+0x88>
	u8sl.visible = display_lines;
  }

  u8sl.total = u8x8_GetStringLineCnt(sl);
  u8sl.first_pos = 0;
  u8sl.current_pos = start_pos;
    1b5e:	1c 83       	std	Y+4, r17	; 0x04
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <u8g2_UserInterfaceSelectionList+0x8c>

  if ( u8sl.current_pos >= u8sl.total )
    u8sl.current_pos = u8sl.total-1;
    1b62:	81 50       	subi	r24, 0x01	; 1
    1b64:	8c 83       	std	Y+4, r24	; 0x04
  if ( u8sl.first_pos+u8sl.visible <= u8sl.current_pos )
    1b66:	99 81       	ldd	r25, Y+1	; 0x01
    1b68:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6a:	49 2f       	mov	r20, r25
    1b6c:	50 e0       	ldi	r21, 0x00	; 0
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	24 17       	cp	r18, r20
    1b74:	35 07       	cpc	r19, r21
    1b76:	1c f0       	brlt	.+6      	; 0x1b7e <u8g2_UserInterfaceSelectionList+0xa4>
    u8sl.first_pos = u8sl.current_pos-u8sl.visible+1;
    1b78:	8f 5f       	subi	r24, 0xFF	; 255
    1b7a:	89 1b       	sub	r24, r25

  u8g2_SetFontPosBaseline(u8g2);
    1b7c:	8b 83       	std	Y+3, r24	; 0x03
    1b7e:	c6 01       	movw	r24, r12
    1b80:	50 dd       	rcall	.-1376   	; 0x1622 <u8g2_SetFontPosBaseline>
  for(;;)
  {
      u8g2_FirstPage(u8g2);
      do
      {
        yy = u8g2_GetAscent(u8g2);
    1b82:	46 01       	movw	r8, r12
    1b84:	f0 e6       	ldi	r31, 0x60	; 96
    1b86:	8f 0e       	add	r8, r31
    1b88:	91 1c       	adc	r9, r1
        if ( title_lines > 0 )
        {
          yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
		
	  u8g2_DrawHLine(u8g2, 0, yy-line_height- u8g2_GetDescent(u8g2) + 1, u8g2_GetDisplayWidth(u8g2));
    1b8a:	36 01       	movw	r6, r12
    1b8c:	81 e6       	ldi	r24, 0x61	; 97
    1b8e:	68 0e       	add	r6, r24
    1b90:	71 1c       	adc	r7, r1
    1b92:	33 24       	eor	r3, r3

  u8g2_SetFontPosBaseline(u8g2);
  
  for(;;)
  {
      u8g2_FirstPage(u8g2);
    1b94:	33 94       	inc	r3
    1b96:	c6 01       	movw	r24, r12
    1b98:	d8 d8       	rcall	.-3664   	; 0xd4a <u8g2_FirstPage>
      do
      {
        yy = u8g2_GetAscent(u8g2);
    1b9a:	f4 01       	movw	r30, r8
    1b9c:	10 81       	ld	r17, Z
        if ( title_lines > 0 )
    1b9e:	55 20       	and	r5, r5
    1ba0:	b1 f0       	breq	.+44     	; 0x1bce <u8g2_UserInterfaceSelectionList+0xf4>
        {
          yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
    1ba2:	ef 80       	ldd	r14, Y+7	; 0x07
    1ba4:	f8 84       	ldd	r15, Y+8	; 0x08
    1ba6:	04 2d       	mov	r16, r4
    1ba8:	f6 01       	movw	r30, r12
    1baa:	24 a5       	ldd	r18, Z+44	; 0x2c
    1bac:	41 2f       	mov	r20, r17
    1bae:	60 e0       	ldi	r22, 0x00	; 0
    1bb0:	c6 01       	movw	r24, r12
    1bb2:	2a df       	rcall	.-428    	; 0x1a08 <u8g2_DrawUTF8Lines>
    1bb4:	18 0f       	add	r17, r24
		
	  u8g2_DrawHLine(u8g2, 0, yy-line_height- u8g2_GetDescent(u8g2) + 1, u8g2_GetDisplayWidth(u8g2));
    1bb6:	f3 01       	movw	r30, r6
    1bb8:	80 81       	ld	r24, Z
    1bba:	43 2d       	mov	r20, r3
    1bbc:	48 1b       	sub	r20, r24
    1bbe:	44 19       	sub	r20, r4
    1bc0:	41 0f       	add	r20, r17
    1bc2:	f6 01       	movw	r30, r12
    1bc4:	24 a5       	ldd	r18, Z+44	; 0x2c
    1bc6:	60 e0       	ldi	r22, 0x00	; 0
    1bc8:	c6 01       	movw	r24, r12
    1bca:	d2 dd       	rcall	.-1116   	; 0x1770 <u8g2_DrawHLine>
		
	  yy += 3;
    1bcc:	1d 5f       	subi	r17, 0xFD	; 253
        }
        u8g2_DrawSelectionList(u8g2, &u8sl, yy, sl);
    1bce:	95 01       	movw	r18, r10
    1bd0:	41 2f       	mov	r20, r17
    1bd2:	be 01       	movw	r22, r28
    1bd4:	6f 5f       	subi	r22, 0xFF	; 255
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd8:	c6 01       	movw	r24, r12
      } while( u8g2_NextPage(u8g2) );
    1bda:	53 df       	rcall	.-346    	; 0x1a82 <u8g2_DrawSelectionList>
    1bdc:	c6 01       	movw	r24, r12
    1bde:	c6 d8       	rcall	.-3700   	; 0xd6c <u8g2_NextPage>
    1be0:	18 2f       	mov	r17, r24
    1be2:	81 11       	cpse	r24, r1
    1be4:	da cf       	rjmp	.-76     	; 0x1b9a <u8g2_UserInterfaceSelectionList+0xc0>
#endif


      for(;;)
      {
        event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
    1be6:	c6 01       	movw	r24, r12
    1be8:	55 d3       	rcall	.+1706   	; 0x2294 <u8x8_GetMenuEvent>
    1bea:	80 35       	cpi	r24, 0x50	; 80
        if ( event == U8X8_MSG_GPIO_MENU_SELECT )
    1bec:	19 f4       	brne	.+6      	; 0x1bf4 <u8g2_UserInterfaceSelectionList+0x11a>
    1bee:	1c 81       	ldd	r17, Y+4	; 0x04
          return u8sl.current_pos+1;		/* +1, issue 112 */
    1bf0:	1f 5f       	subi	r17, 0xFF	; 255
    1bf2:	12 c0       	rjmp	.+36     	; 0x1c18 <u8g2_UserInterfaceSelectionList+0x13e>
        else if ( event == U8X8_MSG_GPIO_MENU_HOME )
    1bf4:	83 35       	cpi	r24, 0x53	; 83
    1bf6:	81 f0       	breq	.+32     	; 0x1c18 <u8g2_UserInterfaceSelectionList+0x13e>
          return 0;				/* issue 112: return 0 instead of start_pos */
        else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
    1bf8:	98 2f       	mov	r25, r24
    1bfa:	9b 7f       	andi	r25, 0xFB	; 251
    1bfc:	91 35       	cpi	r25, 0x51	; 81
        {
          u8sl_Next(&u8sl);
    1bfe:	21 f4       	brne	.+8      	; 0x1c08 <u8g2_UserInterfaceSelectionList+0x12e>
    1c00:	ce 01       	movw	r24, r28
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	d9 d4       	rcall	.+2482   	; 0x25b8 <u8sl_Next>
          break;
    1c06:	c7 cf       	rjmp	.-114    	; 0x1b96 <u8g2_UserInterfaceSelectionList+0xbc>
        }
        else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_UP )
    1c08:	82 35       	cpi	r24, 0x52	; 82
    1c0a:	11 f0       	breq	.+4      	; 0x1c10 <u8g2_UserInterfaceSelectionList+0x136>
    1c0c:	84 35       	cpi	r24, 0x54	; 84
    1c0e:	59 f7       	brne	.-42     	; 0x1be6 <u8g2_UserInterfaceSelectionList+0x10c>
        {
          u8sl_Prev(&u8sl);
    1c10:	ce 01       	movw	r24, r28
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	ec d4       	rcall	.+2520   	; 0x25ee <u8sl_Prev>
    1c16:	bf cf       	rjmp	.-130    	; 0x1b96 <u8g2_UserInterfaceSelectionList+0xbc>
          break;
    1c18:	81 2f       	mov	r24, r17
        }
      }
  }
}
    1c1a:	28 96       	adiw	r28, 0x08	; 8
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	df 90       	pop	r13
    1c34:	cf 90       	pop	r12
    1c36:	bf 90       	pop	r11
    1c38:	af 90       	pop	r10
    1c3a:	9f 90       	pop	r9
    1c3c:	8f 90       	pop	r8
    1c3e:	7f 90       	pop	r7
    1c40:	6f 90       	pop	r6
    1c42:	5f 90       	pop	r5
    1c44:	4f 90       	pop	r4
    1c46:	3f 90       	pop	r3
    1c48:	08 95       	ret

00001c4a <u8g2_update_dimension_common>:
    1c4a:	fc 01       	movw	r30, r24
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    1c4c:	a0 81       	ld	r26, Z
    1c4e:	b1 81       	ldd	r27, Z+1	; 0x01
    1c50:	85 a1       	ldd	r24, Z+37	; 0x25
    1c52:	98 2f       	mov	r25, r24
    1c54:	99 0f       	add	r25, r25
    1c56:	99 0f       	add	r25, r25
    1c58:	99 0f       	add	r25, r25
    1c5a:	90 a7       	std	Z+40, r25	; 0x28
    1c5c:	50 96       	adiw	r26, 0x10	; 16
    1c5e:	9c 91       	ld	r25, X
    1c60:	50 97       	sbiw	r26, 0x10	; 16
    1c62:	90 32       	cpi	r25, 0x20	; 32
    1c64:	08 f0       	brcs	.+2      	; 0x1c68 <u8g2_update_dimension_common+0x1e>
    1c66:	9f e1       	ldi	r25, 0x1F	; 31
    1c68:	99 0f       	add	r25, r25
    1c6a:	99 0f       	add	r25, r25
    1c6c:	99 0f       	add	r25, r25
    1c6e:	97 a3       	std	Z+39, r25	; 0x27
    1c70:	46 a1       	ldd	r20, Z+38	; 0x26
    1c72:	94 2f       	mov	r25, r20
    1c74:	99 0f       	add	r25, r25
    1c76:	99 0f       	add	r25, r25
    1c78:	99 0f       	add	r25, r25
    1c7a:	91 a7       	std	Z+41, r25	; 0x29
    1c7c:	51 96       	adiw	r26, 0x11	; 17
    1c7e:	5c 91       	ld	r21, X
    1c80:	51 97       	sbiw	r26, 0x11	; 17
    1c82:	24 2f       	mov	r18, r20
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	28 0f       	add	r18, r24
    1c88:	31 1d       	adc	r19, r1
    1c8a:	65 2f       	mov	r22, r21
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	62 17       	cp	r22, r18
    1c90:	73 07       	cpc	r23, r19
    1c92:	14 f4       	brge	.+4      	; 0x1c98 <u8g2_update_dimension_common+0x4e>
    1c94:	85 2f       	mov	r24, r21
    1c96:	84 1b       	sub	r24, r20
    1c98:	92 a7       	std	Z+42, r25	; 0x2a
    1c9a:	88 0f       	add	r24, r24
    1c9c:	88 0f       	add	r24, r24
    1c9e:	88 0f       	add	r24, r24
    1ca0:	89 0f       	add	r24, r25
    1ca2:	83 a7       	std	Z+43, r24	; 0x2b
    1ca4:	80 ef       	ldi	r24, 0xF0	; 240
    1ca6:	84 a7       	std	Z+44, r24	; 0x2c
    1ca8:	54 96       	adiw	r26, 0x14	; 20
    1caa:	8d 91       	ld	r24, X+
    1cac:	9c 91       	ld	r25, X
    1cae:	55 97       	sbiw	r26, 0x15	; 21
    1cb0:	81 3f       	cpi	r24, 0xF1	; 241
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	08 f4       	brcc	.+2      	; 0x1cb8 <u8g2_update_dimension_common+0x6e>
    1cb6:	84 a7       	std	Z+44, r24	; 0x2c
    1cb8:	56 96       	adiw	r26, 0x16	; 22
    1cba:	8c 91       	ld	r24, X
    1cbc:	85 a7       	std	Z+45, r24	; 0x2d
    1cbe:	08 95       	ret

00001cc0 <u8g2_update_dimension_r0>:
    1cc0:	c4 cf       	rjmp	.-120    	; 0x1c4a <u8g2_update_dimension_common>
    1cc2:	08 95       	ret

00001cc4 <u8g2_apply_clip_window>:
    1cc4:	0f 93       	push	r16
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	ec 01       	movw	r28, r24
    1ccc:	0d a9       	ldd	r16, Y+53	; 0x35
    1cce:	2b a9       	ldd	r18, Y+51	; 0x33
    1cd0:	4c a9       	ldd	r20, Y+52	; 0x34
    1cd2:	6a a9       	ldd	r22, Y+50	; 0x32
    1cd4:	73 dd       	rcall	.-1306   	; 0x17bc <u8g2_IsIntersection>
    1cd6:	81 11       	cpse	r24, r1
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <u8g2_apply_clip_window+0x1e>
    1cda:	c2 5a       	subi	r28, 0xA2	; 162
    1cdc:	df 4f       	sbci	r29, 0xFF	; 255
    1cde:	18 82       	st	Y, r1
    1ce0:	19 c0       	rjmp	.+50     	; 0x1d14 <u8g2_apply_clip_window+0x50>
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e2 5a       	subi	r30, 0xA2	; 162
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	80 83       	st	Z, r24
    1cec:	8a a9       	ldd	r24, Y+50	; 0x32
    1cee:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cf0:	98 17       	cp	r25, r24
    1cf2:	08 f4       	brcc	.+2      	; 0x1cf6 <u8g2_apply_clip_window+0x32>
    1cf4:	8e a7       	std	Y+46, r24	; 0x2e
    1cf6:	8b a9       	ldd	r24, Y+51	; 0x33
    1cf8:	9f a5       	ldd	r25, Y+47	; 0x2f
    1cfa:	89 17       	cp	r24, r25
    1cfc:	08 f4       	brcc	.+2      	; 0x1d00 <u8g2_apply_clip_window+0x3c>
    1cfe:	8f a7       	std	Y+47, r24	; 0x2f
    1d00:	8c a9       	ldd	r24, Y+52	; 0x34
    1d02:	98 a9       	ldd	r25, Y+48	; 0x30
    1d04:	98 17       	cp	r25, r24
    1d06:	08 f4       	brcc	.+2      	; 0x1d0a <u8g2_apply_clip_window+0x46>
    1d08:	88 ab       	std	Y+48, r24	; 0x30
    1d0a:	8d a9       	ldd	r24, Y+53	; 0x35
    1d0c:	99 a9       	ldd	r25, Y+49	; 0x31
    1d0e:	89 17       	cp	r24, r25
    1d10:	08 f4       	brcc	.+2      	; 0x1d14 <u8g2_apply_clip_window+0x50>
    1d12:	89 ab       	std	Y+49, r24	; 0x31
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	0f 91       	pop	r16
    1d1a:	08 95       	ret

00001d1c <u8g2_update_page_win_r0>:
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	16 a6       	std	Z+46, r1	; 0x2e
    1d20:	84 a5       	ldd	r24, Z+44	; 0x2c
    1d22:	87 a7       	std	Z+47, r24	; 0x2f
    1d24:	82 a5       	ldd	r24, Z+42	; 0x2a
    1d26:	80 ab       	std	Z+48, r24	; 0x30
    1d28:	83 a5       	ldd	r24, Z+43	; 0x2b
    1d2a:	81 ab       	std	Z+49, r24	; 0x31
    1d2c:	cf 01       	movw	r24, r30
    1d2e:	ca cf       	rjmp	.-108    	; 0x1cc4 <u8g2_apply_clip_window>
    1d30:	08 95       	ret

00001d32 <u8g2_draw_l90_r0>:
    1d32:	0f 93       	push	r16
    1d34:	a1 dc       	rcall	.-1726   	; 0x1678 <u8g2_draw_hv_line_2dir>
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <u8g2_SetMaxClipWindow>:
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	d2 96       	adiw	r26, 0x32	; 50
    1d3e:	1c 92       	st	X, r1
    1d40:	d2 97       	sbiw	r26, 0x32	; 50
    1d42:	d4 96       	adiw	r26, 0x34	; 52
    1d44:	1c 92       	st	X, r1
    1d46:	d4 97       	sbiw	r26, 0x34	; 52
    1d48:	8f ef       	ldi	r24, 0xFF	; 255
    1d4a:	d3 96       	adiw	r26, 0x33	; 51
    1d4c:	8c 93       	st	X, r24
    1d4e:	d3 97       	sbiw	r26, 0x33	; 51
    1d50:	d5 96       	adiw	r26, 0x35	; 53
    1d52:	8c 93       	st	X, r24
    1d54:	d5 97       	sbiw	r26, 0x35	; 53
    1d56:	91 96       	adiw	r26, 0x21	; 33
    1d58:	ed 91       	ld	r30, X+
    1d5a:	fc 91       	ld	r31, X
    1d5c:	92 97       	sbiw	r26, 0x22	; 34
    1d5e:	02 80       	ldd	r0, Z+2	; 0x02
    1d60:	f3 81       	ldd	r31, Z+3	; 0x03
    1d62:	e0 2d       	mov	r30, r0
    1d64:	cd 01       	movw	r24, r26
    1d66:	09 95       	icall
    1d68:	08 95       	ret

00001d6a <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    1d74:	1f aa       	std	Y+55, r1	; 0x37
    1d76:	1e aa       	std	Y+54, r1	; 0x36
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    1d78:	38 a3       	std	Y+32, r19	; 0x20
    1d7a:	2f 8f       	std	Y+31, r18	; 0x1f
  
  u8g2->tile_buf_ptr = buf;
    1d7c:	7c a3       	std	Y+36, r23	; 0x24
    1d7e:	6b a3       	std	Y+35, r22	; 0x23
  u8g2->tile_buf_height = tile_buf_height;
    1d80:	4d a3       	std	Y+37, r20	; 0x25
  
  u8g2->tile_curr_row = 0;
    1d82:	1e a2       	std	Y+38, r1	; 0x26
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    1d84:	fc 01       	movw	r30, r24
    1d86:	ed 5b       	subi	r30, 0xBD	; 189
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    1d8c:	b0 96       	adiw	r30, 0x20	; 32
    1d8e:	10 82       	st	Z, r1
  
  u8g2->draw_color = 1;
    1d90:	31 96       	adiw	r30, 0x01	; 1
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    1d96:	31 96       	adiw	r30, 0x01	; 1
    1d98:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    1d9a:	1a a3       	std	Y+34, r17	; 0x22
    1d9c:	09 a3       	std	Y+33, r16	; 0x21
  u8g2->cb->update_dimension(u8g2);
    1d9e:	d8 01       	movw	r26, r16
    1da0:	ed 91       	ld	r30, X+
    1da2:	fc 91       	ld	r31, X
    1da4:	ce 01       	movw	r24, r28
    1da6:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    1da8:	ce 01       	movw	r24, r28
    1daa:	c7 df       	rcall	.-114    	; 0x1d3a <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    1dac:	ce 01       	movw	r24, r28
    1dae:	39 dc       	rcall	.-1934   	; 0x1622 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    1db0:	ca 5b       	subi	r28, 0xBA	; 186
    1db2:	df 4f       	sbci	r29, 0xFF	; 255
    1db4:	18 82       	st	Y, r1
#endif
}
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16
    1dbe:	08 95       	ret

00001dc0 <u8x8_utf8_next>:
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    1dc0:	66 23       	and	r22, r22
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <u8x8_utf8_next+0x6>
    1dc4:	4b c0       	rjmp	.+150    	; 0x1e5c <u8x8_utf8_next+0x9c>
    1dc6:	6a 30       	cpi	r22, 0x0A	; 10
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <u8x8_utf8_next+0xc>
    1dca:	4b c0       	rjmp	.+150    	; 0x1e62 <u8x8_utf8_next+0xa2>
    1dcc:	fc 01       	movw	r30, r24
    1dce:	21 8d       	ldd	r18, Z+25	; 0x19
    1dd0:	21 11       	cpse	r18, r1
    1dd2:	2b c0       	rjmp	.+86     	; 0x1e2a <u8x8_utf8_next+0x6a>
    1dd4:	6c 3f       	cpi	r22, 0xFC	; 252
    1dd6:	20 f0       	brcs	.+8      	; 0x1de0 <u8x8_utf8_next+0x20>
    1dd8:	25 e0       	ldi	r18, 0x05	; 5
    1dda:	21 8f       	std	Z+25, r18	; 0x19
    1ddc:	61 70       	andi	r22, 0x01	; 1
    1dde:	1e c0       	rjmp	.+60     	; 0x1e1c <u8x8_utf8_next+0x5c>
    1de0:	68 3f       	cpi	r22, 0xF8	; 248
    1de2:	28 f0       	brcs	.+10     	; 0x1dee <u8x8_utf8_next+0x2e>
    1de4:	24 e0       	ldi	r18, 0x04	; 4
    1de6:	fc 01       	movw	r30, r24
    1de8:	21 8f       	std	Z+25, r18	; 0x19
    1dea:	63 70       	andi	r22, 0x03	; 3
    1dec:	17 c0       	rjmp	.+46     	; 0x1e1c <u8x8_utf8_next+0x5c>
    1dee:	60 3f       	cpi	r22, 0xF0	; 240
    1df0:	28 f0       	brcs	.+10     	; 0x1dfc <u8x8_utf8_next+0x3c>
    1df2:	23 e0       	ldi	r18, 0x03	; 3
    1df4:	fc 01       	movw	r30, r24
    1df6:	21 8f       	std	Z+25, r18	; 0x19
    1df8:	67 70       	andi	r22, 0x07	; 7
    1dfa:	10 c0       	rjmp	.+32     	; 0x1e1c <u8x8_utf8_next+0x5c>
    1dfc:	60 3e       	cpi	r22, 0xE0	; 224
    1dfe:	28 f0       	brcs	.+10     	; 0x1e0a <u8x8_utf8_next+0x4a>
    1e00:	22 e0       	ldi	r18, 0x02	; 2
    1e02:	fc 01       	movw	r30, r24
    1e04:	21 8f       	std	Z+25, r18	; 0x19
    1e06:	6f 70       	andi	r22, 0x0F	; 15
    1e08:	09 c0       	rjmp	.+18     	; 0x1e1c <u8x8_utf8_next+0x5c>
    1e0a:	60 3c       	cpi	r22, 0xC0	; 192
    1e0c:	28 f0       	brcs	.+10     	; 0x1e18 <u8x8_utf8_next+0x58>
    1e0e:	21 e0       	ldi	r18, 0x01	; 1
    1e10:	fc 01       	movw	r30, r24
    1e12:	21 8f       	std	Z+25, r18	; 0x19
    1e14:	6f 71       	andi	r22, 0x1F	; 31
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <u8x8_utf8_next+0x5c>
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	28 c0       	rjmp	.+80     	; 0x1e6c <u8x8_utf8_next+0xac>
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	fc 01       	movw	r30, r24
    1e20:	73 8b       	std	Z+19, r23	; 0x13
    1e22:	62 8b       	std	Z+18, r22	; 0x12
    1e24:	6e ef       	ldi	r22, 0xFE	; 254
    1e26:	7f ef       	ldi	r23, 0xFF	; 255
    1e28:	21 c0       	rjmp	.+66     	; 0x1e6c <u8x8_utf8_next+0xac>
    1e2a:	4f ef       	ldi	r20, 0xFF	; 255
    1e2c:	42 0f       	add	r20, r18
    1e2e:	fc 01       	movw	r30, r24
    1e30:	41 8f       	std	Z+25, r20	; 0x19
    1e32:	22 89       	ldd	r18, Z+18	; 0x12
    1e34:	33 89       	ldd	r19, Z+19	; 0x13
    1e36:	00 24       	eor	r0, r0
    1e38:	36 95       	lsr	r19
    1e3a:	27 95       	ror	r18
    1e3c:	07 94       	ror	r0
    1e3e:	36 95       	lsr	r19
    1e40:	27 95       	ror	r18
    1e42:	07 94       	ror	r0
    1e44:	32 2f       	mov	r19, r18
    1e46:	20 2d       	mov	r18, r0
    1e48:	6f 73       	andi	r22, 0x3F	; 63
    1e4a:	f9 01       	movw	r30, r18
    1e4c:	e6 2b       	or	r30, r22
    1e4e:	bf 01       	movw	r22, r30
    1e50:	fc 01       	movw	r30, r24
    1e52:	73 8b       	std	Z+19, r23	; 0x13
    1e54:	62 8b       	std	Z+18, r22	; 0x12
    1e56:	41 11       	cpse	r20, r1
    1e58:	07 c0       	rjmp	.+14     	; 0x1e68 <u8x8_utf8_next+0xa8>
    1e5a:	08 c0       	rjmp	.+16     	; 0x1e6c <u8x8_utf8_next+0xac>
    1e5c:	6f ef       	ldi	r22, 0xFF	; 255
    1e5e:	7f ef       	ldi	r23, 0xFF	; 255
    1e60:	05 c0       	rjmp	.+10     	; 0x1e6c <u8x8_utf8_next+0xac>
    1e62:	6f ef       	ldi	r22, 0xFF	; 255
    1e64:	7f ef       	ldi	r23, 0xFF	; 255
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <u8x8_utf8_next+0xac>
    1e68:	6e ef       	ldi	r22, 0xFE	; 254
    1e6a:	7f ef       	ldi	r23, 0xFF	; 255
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	08 95       	ret

00001e70 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    1e70:	fc 01       	movw	r30, r24
    1e72:	11 8e       	std	Z+25, r1	; 0x19
    1e74:	08 95       	ret

00001e76 <i2c_delay>:
      break;
    default:
      return 0;
  }
  return 1;
}
    1e76:	dc 01       	movw	r26, r24
    1e78:	ed 91       	ld	r30, X+
    1e7a:	fc 91       	ld	r31, X
    1e7c:	45 85       	ldd	r20, Z+13	; 0x0d
    1e7e:	6d e2       	ldi	r22, 0x2D	; 45
    1e80:	92 c3       	rjmp	.+1828   	; 0x25a6 <u8x8_gpio_call>
    1e82:	08 95       	ret

00001e84 <i2c_read_scl_and_delay>:
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	ec 01       	movw	r28, r24
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	6c e4       	ldi	r22, 0x4C	; 76
    1e8e:	8b d3       	rcall	.+1814   	; 0x25a6 <u8x8_gpio_call>
    1e90:	ce 01       	movw	r24, r28
    1e92:	f1 df       	rcall	.-30     	; 0x1e76 <i2c_delay>
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	08 95       	ret

00001e9a <i2c_read_sda>:
    1e9a:	41 e0       	ldi	r20, 0x01	; 1
    1e9c:	6d e4       	ldi	r22, 0x4D	; 77
    1e9e:	83 c3       	rjmp	.+1798   	; 0x25a6 <u8x8_gpio_call>
    1ea0:	08 95       	ret

00001ea2 <i2c_write_bit>:
    1ea2:	cf 93       	push	r28
    1ea4:	df 93       	push	r29
    1ea6:	ec 01       	movw	r28, r24
    1ea8:	66 23       	and	r22, r22
    1eaa:	11 f0       	breq	.+4      	; 0x1eb0 <i2c_write_bit+0xe>
    1eac:	f6 df       	rcall	.-20     	; 0x1e9a <i2c_read_sda>
    1eae:	03 c0       	rjmp	.+6      	; 0x1eb6 <i2c_write_bit+0x14>
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	6d e4       	ldi	r22, 0x4D	; 77
    1eb4:	78 d3       	rcall	.+1776   	; 0x25a6 <u8x8_gpio_call>
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	de df       	rcall	.-68     	; 0x1e76 <i2c_delay>
    1eba:	ce 01       	movw	r24, r28
    1ebc:	e3 df       	rcall	.-58     	; 0x1e84 <i2c_read_scl_and_delay>
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	6c e4       	ldi	r22, 0x4C	; 76
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	70 d3       	rcall	.+1760   	; 0x25a6 <u8x8_gpio_call>
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	08 95       	ret

00001ecc <i2c_write_byte>:
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	ec 01       	movw	r28, r24
    1ed4:	16 2f       	mov	r17, r22
    1ed6:	60 78       	andi	r22, 0x80	; 128
    1ed8:	e4 df       	rcall	.-56     	; 0x1ea2 <i2c_write_bit>
    1eda:	61 2f       	mov	r22, r17
    1edc:	60 74       	andi	r22, 0x40	; 64
    1ede:	ce 01       	movw	r24, r28
    1ee0:	e0 df       	rcall	.-64     	; 0x1ea2 <i2c_write_bit>
    1ee2:	61 2f       	mov	r22, r17
    1ee4:	60 72       	andi	r22, 0x20	; 32
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	dc df       	rcall	.-72     	; 0x1ea2 <i2c_write_bit>
    1eea:	61 2f       	mov	r22, r17
    1eec:	60 71       	andi	r22, 0x10	; 16
    1eee:	ce 01       	movw	r24, r28
    1ef0:	d8 df       	rcall	.-80     	; 0x1ea2 <i2c_write_bit>
    1ef2:	61 2f       	mov	r22, r17
    1ef4:	68 70       	andi	r22, 0x08	; 8
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	d4 df       	rcall	.-88     	; 0x1ea2 <i2c_write_bit>
    1efa:	61 2f       	mov	r22, r17
    1efc:	64 70       	andi	r22, 0x04	; 4
    1efe:	ce 01       	movw	r24, r28
    1f00:	d0 df       	rcall	.-96     	; 0x1ea2 <i2c_write_bit>
    1f02:	61 2f       	mov	r22, r17
    1f04:	62 70       	andi	r22, 0x02	; 2
    1f06:	ce 01       	movw	r24, r28
    1f08:	cc df       	rcall	.-104    	; 0x1ea2 <i2c_write_bit>
    1f0a:	61 2f       	mov	r22, r17
    1f0c:	61 70       	andi	r22, 0x01	; 1
    1f0e:	ce 01       	movw	r24, r28
    1f10:	c8 df       	rcall	.-112    	; 0x1ea2 <i2c_write_bit>
    1f12:	ce 01       	movw	r24, r28
    1f14:	c2 df       	rcall	.-124    	; 0x1e9a <i2c_read_sda>
    1f16:	ce 01       	movw	r24, r28
    1f18:	ae df       	rcall	.-164    	; 0x1e76 <i2c_delay>
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	b3 df       	rcall	.-154    	; 0x1e84 <i2c_read_scl_and_delay>
    1f1e:	ce 01       	movw	r24, r28
    1f20:	bc df       	rcall	.-136    	; 0x1e9a <i2c_read_sda>
    1f22:	ce 01       	movw	r24, r28
    1f24:	a8 df       	rcall	.-176    	; 0x1e76 <i2c_delay>
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	6c e4       	ldi	r22, 0x4C	; 76
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	3c d3       	rcall	.+1656   	; 0x25a6 <u8x8_gpio_call>
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	08 95       	ret

00001f36 <u8x8_byte_SendBytes>:
    1f36:	9a 01       	movw	r18, r20
    1f38:	dc 01       	movw	r26, r24
    1f3a:	18 96       	adiw	r26, 0x08	; 8
    1f3c:	ed 91       	ld	r30, X+
    1f3e:	fc 91       	ld	r31, X
    1f40:	19 97       	sbiw	r26, 0x09	; 9
    1f42:	46 2f       	mov	r20, r22
    1f44:	67 e1       	ldi	r22, 0x17	; 23
    1f46:	09 95       	icall
    1f48:	08 95       	ret

00001f4a <u8x8_byte_SendByte>:
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	1f 92       	push	r1
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	69 83       	std	Y+1, r22	; 0x01
    1f56:	ae 01       	movw	r20, r28
    1f58:	4f 5f       	subi	r20, 0xFF	; 255
    1f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f5c:	61 e0       	ldi	r22, 0x01	; 1
    1f5e:	eb df       	rcall	.-42     	; 0x1f36 <u8x8_byte_SendBytes>
    1f60:	0f 90       	pop	r0
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	08 95       	ret

00001f68 <u8x8_byte_StartTransfer>:
    1f68:	dc 01       	movw	r26, r24
    1f6a:	18 96       	adiw	r26, 0x08	; 8
    1f6c:	ed 91       	ld	r30, X+
    1f6e:	fc 91       	ld	r31, X
    1f70:	19 97       	sbiw	r26, 0x09	; 9
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	68 e1       	ldi	r22, 0x18	; 24
    1f7a:	09 95       	icall
    1f7c:	08 95       	ret

00001f7e <u8x8_byte_EndTransfer>:
    1f7e:	dc 01       	movw	r26, r24
    1f80:	18 96       	adiw	r26, 0x08	; 8
    1f82:	ed 91       	ld	r30, X+
    1f84:	fc 91       	ld	r31, X
    1f86:	19 97       	sbiw	r26, 0x09	; 9
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	69 e1       	ldi	r22, 0x19	; 25
    1f90:	09 95       	icall
    1f92:	08 95       	ret

00001f94 <u8x8_byte_sw_i2c>:
  /* 1: nothing happend during ack cycle */  
  i2c_read_bit(u8x8);
}

uint8_t u8x8_byte_sw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1f94:	ef 92       	push	r14
    1f96:	ff 92       	push	r15
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
    1fa0:	8c 01       	movw	r16, r24
    1fa2:	e9 01       	movw	r28, r18
  uint8_t *data;

  switch(msg)
    1fa4:	68 31       	cpi	r22, 0x18	; 24
    1fa6:	61 f1       	breq	.+88     	; 0x2000 <u8x8_byte_sw_i2c+0x6c>
    1fa8:	28 f4       	brcc	.+10     	; 0x1fb4 <u8x8_byte_sw_i2c+0x20>
    1faa:	64 31       	cpi	r22, 0x14	; 20
    1fac:	f1 f0       	breq	.+60     	; 0x1fea <u8x8_byte_sw_i2c+0x56>
    1fae:	67 31       	cpi	r22, 0x17	; 23
    1fb0:	49 f0       	breq	.+18     	; 0x1fc4 <u8x8_byte_sw_i2c+0x30>
    1fb2:	53 c0       	rjmp	.+166    	; 0x205a <u8x8_byte_sw_i2c+0xc6>
    1fb4:	69 31       	cpi	r22, 0x19	; 25
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <u8x8_byte_sw_i2c+0x26>
    1fb8:	41 c0       	rjmp	.+130    	; 0x203c <u8x8_byte_sw_i2c+0xa8>
    1fba:	60 32       	cpi	r22, 0x20	; 32
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <u8x8_byte_sw_i2c+0x2c>
    1fbe:	4d c0       	rjmp	.+154    	; 0x205a <u8x8_byte_sw_i2c+0xc6>
      i2c_stop(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	4e c0       	rjmp	.+156    	; 0x2060 <u8x8_byte_sw_i2c+0xcc>
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
    
      while( arg_int > 0 )
    1fc4:	44 23       	and	r20, r20
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <u8x8_byte_sw_i2c+0x36>
    1fc8:	4a c0       	rjmp	.+148    	; 0x205e <u8x8_byte_sw_i2c+0xca>
    1fca:	41 50       	subi	r20, 0x01	; 1
    1fcc:	e4 2e       	mov	r14, r20
    1fce:	f1 2c       	mov	r15, r1
    1fd0:	8f ef       	ldi	r24, 0xFF	; 255
    1fd2:	e8 1a       	sub	r14, r24
    1fd4:	f8 0a       	sbc	r15, r24
    1fd6:	e2 0e       	add	r14, r18
    1fd8:	f3 1e       	adc	r15, r19
      {
	i2c_write_byte(u8x8, *data);
    1fda:	69 91       	ld	r22, Y+
    1fdc:	c8 01       	movw	r24, r16
    1fde:	76 df       	rcall	.-276    	; 0x1ecc <i2c_write_byte>
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
    
      while( arg_int > 0 )
    1fe0:	ec 16       	cp	r14, r28
    1fe2:	fd 06       	cpc	r15, r29
    1fe4:	d1 f7       	brne	.-12     	; 0x1fda <u8x8_byte_sw_i2c+0x46>
      i2c_stop(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	3b c0       	rjmp	.+118    	; 0x2060 <u8x8_byte_sw_i2c+0xcc>
  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_I2C, u8x8->display_info->i2c_bus_clock_100kHz);
}

static void i2c_init(u8x8_t *u8x8)
{
  u8x8_gpio_SetI2CClock(u8x8, 1);
    1fea:	41 e0       	ldi	r20, 0x01	; 1
    1fec:	6c e4       	ldi	r22, 0x4C	; 76
    1fee:	db d2       	rcall	.+1462   	; 0x25a6 <u8x8_gpio_call>
  u8x8_gpio_SetI2CData(u8x8, 1);
    1ff0:	41 e0       	ldi	r20, 0x01	; 1
    1ff2:	6d e4       	ldi	r22, 0x4D	; 77
    1ff4:	c8 01       	movw	r24, r16
  
  i2c_delay(u8x8);
    1ff6:	d7 d2       	rcall	.+1454   	; 0x25a6 <u8x8_gpio_call>
    1ff8:	c8 01       	movw	r24, r16
    1ffa:	3d df       	rcall	.-390    	; 0x1e76 <i2c_delay>
      i2c_stop(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	30 c0       	rjmp	.+96     	; 0x2060 <u8x8_byte_sw_i2c+0xcc>
  u8x8_gpio_SetI2CData(u8x8, 0);
}

static void i2c_start(u8x8_t *u8x8)
{
  if ( u8x8->i2c_started != 0 )
    2000:	fc 01       	movw	r30, r24
    2002:	87 89       	ldd	r24, Z+23	; 0x17
    2004:	88 23       	and	r24, r24
  {
    /* if already started: do restart */
    i2c_read_sda(u8x8);     /* SDA = 1 */
    2006:	31 f0       	breq	.+12     	; 0x2014 <u8x8_byte_sw_i2c+0x80>
    2008:	c8 01       	movw	r24, r16
    i2c_delay(u8x8);
    200a:	47 df       	rcall	.-370    	; 0x1e9a <i2c_read_sda>
    200c:	c8 01       	movw	r24, r16
    i2c_read_scl_and_delay(u8x8);
    200e:	33 df       	rcall	.-410    	; 0x1e76 <i2c_delay>
    2010:	c8 01       	movw	r24, r16
  }
  i2c_read_sda(u8x8);
    2012:	38 df       	rcall	.-400    	; 0x1e84 <i2c_read_scl_and_delay>
    2014:	c8 01       	movw	r24, r16
}

static void i2c_clear_sda(u8x8_t *u8x8)
{
  /* set open collector and drive low */
  u8x8_gpio_SetI2CData(u8x8, 0);
    2016:	41 df       	rcall	.-382    	; 0x1e9a <i2c_read_sda>
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	6d e4       	ldi	r22, 0x4D	; 77
    201c:	c8 01       	movw	r24, r16
    i2c_read_scl_and_delay(u8x8);
  }
  i2c_read_sda(u8x8);
  /* send the start condition, both lines go from 1 to 0 */
  i2c_clear_sda(u8x8);
  i2c_delay(u8x8);
    201e:	c3 d2       	rcall	.+1414   	; 0x25a6 <u8x8_gpio_call>
    2020:	c8 01       	movw	r24, r16
  i2c_delay(u8x8);
}

static void i2c_clear_scl(u8x8_t *u8x8)
{
  u8x8_gpio_SetI2CClock(u8x8, 0);
    2022:	29 df       	rcall	.-430    	; 0x1e76 <i2c_delay>
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	6c e4       	ldi	r22, 0x4C	; 76
    2028:	c8 01       	movw	r24, r16
  i2c_read_sda(u8x8);
  /* send the start condition, both lines go from 1 to 0 */
  i2c_clear_sda(u8x8);
  i2c_delay(u8x8);
  i2c_clear_scl(u8x8);
  u8x8->i2c_started = 1;
    202a:	bd d2       	rcall	.+1402   	; 0x25a6 <u8x8_gpio_call>
    202c:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8X8_MSG_BYTE_SET_DC:
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      i2c_start(u8x8);
      i2c_write_byte(u8x8, u8x8_GetI2CAddress(u8x8));
    202e:	f8 01       	movw	r30, r16
    2030:	87 8b       	std	Z+23, r24	; 0x17
      //i2c_write_byte(u8x8, 0x078);
      break;
    2032:	66 89       	ldd	r22, Z+22	; 0x16
}

static void i2c_clear_sda(u8x8_t *u8x8)
{
  /* set open collector and drive low */
  u8x8_gpio_SetI2CData(u8x8, 0);
    2034:	c8 01       	movw	r24, r16
    2036:	4a df       	rcall	.-364    	; 0x1ecc <i2c_write_byte>
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	12 c0       	rjmp	.+36     	; 0x2060 <u8x8_byte_sw_i2c+0xcc>

static void i2c_stop(u8x8_t *u8x8)
{
  /* set SDA to 0 */
  i2c_clear_sda(u8x8);  
  i2c_delay(u8x8);
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	6d e4       	ldi	r22, 0x4D	; 77
    2040:	b2 d2       	rcall	.+1380   	; 0x25a6 <u8x8_gpio_call>
 
  /* now release all lines */
  i2c_read_scl_and_delay(u8x8);
    2042:	c8 01       	movw	r24, r16
    2044:	18 df       	rcall	.-464    	; 0x1e76 <i2c_delay>
    2046:	c8 01       	movw	r24, r16
 
  /* set SDA to 1 */
  i2c_read_sda(u8x8);
    2048:	1d df       	rcall	.-454    	; 0x1e84 <i2c_read_scl_and_delay>
    204a:	c8 01       	movw	r24, r16
    204c:	26 df       	rcall	.-436    	; 0x1e9a <i2c_read_sda>
  i2c_delay(u8x8);
    204e:	c8 01       	movw	r24, r16
    2050:	12 df       	rcall	.-476    	; 0x1e76 <i2c_delay>
    2052:	f8 01       	movw	r30, r16
  u8x8->i2c_started = 0;
    2054:	17 8a       	std	Z+23, r1	; 0x17
    2056:	81 e0       	ldi	r24, 0x01	; 1
      i2c_stop(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    2058:	03 c0       	rjmp	.+6      	; 0x2060 <u8x8_byte_sw_i2c+0xcc>
    205a:	80 e0       	ldi	r24, 0x00	; 0
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      i2c_stop(u8x8);
      break;
    default:
      return 0;
    205c:	01 c0       	rjmp	.+2      	; 0x2060 <u8x8_byte_sw_i2c+0xcc>
    205e:	81 e0       	ldi	r24, 0x01	; 1
  }
  return 1;
    2060:	df 91       	pop	r29
}
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	08 95       	ret

0000206e <u8x8_i2c_data_transfer>:
    206e:	ef 92       	push	r14
      break;
    default:
      return 0;
  }
  return 1;
}
    2070:	ff 92       	push	r15
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	ec 01       	movw	r28, r24
    207a:	16 2f       	mov	r17, r22
    207c:	7a 01       	movw	r14, r20
    207e:	74 df       	rcall	.-280    	; 0x1f68 <u8x8_byte_StartTransfer>
    2080:	60 e4       	ldi	r22, 0x40	; 64
    2082:	ce 01       	movw	r24, r28
    2084:	62 df       	rcall	.-316    	; 0x1f4a <u8x8_byte_SendByte>
    2086:	e8 85       	ldd	r30, Y+8	; 0x08
    2088:	f9 85       	ldd	r31, Y+9	; 0x09
    208a:	97 01       	movw	r18, r14
    208c:	41 2f       	mov	r20, r17
    208e:	67 e1       	ldi	r22, 0x17	; 23
    2090:	ce 01       	movw	r24, r28
    2092:	09 95       	icall
    2094:	ce 01       	movw	r24, r28
    2096:	73 df       	rcall	.-282    	; 0x1f7e <u8x8_byte_EndTransfer>
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	1f 91       	pop	r17
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	08 95       	ret

000020a4 <u8x8_cad_SendCmd>:
    20a4:	46 2f       	mov	r20, r22
    20a6:	dc 01       	movw	r26, r24
    20a8:	16 96       	adiw	r26, 0x06	; 6
    20aa:	ed 91       	ld	r30, X+
    20ac:	fc 91       	ld	r31, X
    20ae:	17 97       	sbiw	r26, 0x07	; 7
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	65 e1       	ldi	r22, 0x15	; 21
    20b6:	09 95       	icall
    20b8:	08 95       	ret

000020ba <u8x8_cad_SendArg>:
    20ba:	46 2f       	mov	r20, r22
    20bc:	dc 01       	movw	r26, r24
    20be:	16 96       	adiw	r26, 0x06	; 6
    20c0:	ed 91       	ld	r30, X+
    20c2:	fc 91       	ld	r31, X
    20c4:	17 97       	sbiw	r26, 0x07	; 7
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	66 e1       	ldi	r22, 0x16	; 22
    20cc:	09 95       	icall
    20ce:	08 95       	ret

000020d0 <u8x8_cad_SendData>:
    20d0:	9a 01       	movw	r18, r20
    20d2:	dc 01       	movw	r26, r24
    20d4:	16 96       	adiw	r26, 0x06	; 6
    20d6:	ed 91       	ld	r30, X+
    20d8:	fc 91       	ld	r31, X
    20da:	17 97       	sbiw	r26, 0x07	; 7
    20dc:	46 2f       	mov	r20, r22
    20de:	67 e1       	ldi	r22, 0x17	; 23
    20e0:	09 95       	icall
    20e2:	08 95       	ret

000020e4 <u8x8_cad_StartTransfer>:
    20e4:	dc 01       	movw	r26, r24
    20e6:	16 96       	adiw	r26, 0x06	; 6
    20e8:	ed 91       	ld	r30, X+
    20ea:	fc 91       	ld	r31, X
    20ec:	17 97       	sbiw	r26, 0x07	; 7
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e0       	ldi	r20, 0x00	; 0
    20f4:	68 e1       	ldi	r22, 0x18	; 24
    20f6:	09 95       	icall
    20f8:	08 95       	ret

000020fa <u8x8_cad_EndTransfer>:
    20fa:	dc 01       	movw	r26, r24
    20fc:	16 96       	adiw	r26, 0x06	; 6
    20fe:	ed 91       	ld	r30, X+
    2100:	fc 91       	ld	r31, X
    2102:	17 97       	sbiw	r26, 0x07	; 7
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	69 e1       	ldi	r22, 0x19	; 25
    210c:	09 95       	icall
    210e:	08 95       	ret

00002110 <u8x8_cad_SendSequence>:
    2110:	ef 92       	push	r14
    2112:	ff 92       	push	r15
    2114:	0f 93       	push	r16
    2116:	1f 93       	push	r17
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29
    211c:	1f 92       	push	r1
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	7c 01       	movw	r14, r24
    2124:	8b 01       	movw	r16, r22
    2126:	d8 01       	movw	r26, r16
    2128:	6c 91       	ld	r22, X
    212a:	67 31       	cpi	r22, 0x17	; 23
    212c:	c1 f0       	breq	.+48     	; 0x215e <u8x8_cad_SendSequence+0x4e>
    212e:	18 f4       	brcc	.+6      	; 0x2136 <u8x8_cad_SendSequence+0x26>
    2130:	65 31       	cpi	r22, 0x15	; 21
    2132:	30 f4       	brcc	.+12     	; 0x2140 <u8x8_cad_SendSequence+0x30>
    2134:	36 c0       	rjmp	.+108    	; 0x21a2 <u8x8_cad_SendSequence+0x92>
    2136:	6a 31       	cpi	r22, 0x1A	; 26
    2138:	f0 f0       	brcs	.+60     	; 0x2176 <u8x8_cad_SendSequence+0x66>
    213a:	6e 3f       	cpi	r22, 0xFE	; 254
    213c:	49 f1       	breq	.+82     	; 0x2190 <u8x8_cad_SendSequence+0x80>
    213e:	31 c0       	rjmp	.+98     	; 0x21a2 <u8x8_cad_SendSequence+0x92>
    2140:	f8 01       	movw	r30, r16
    2142:	41 81       	ldd	r20, Z+1	; 0x01
    2144:	49 83       	std	Y+1, r20	; 0x01
    2146:	d7 01       	movw	r26, r14
    2148:	16 96       	adiw	r26, 0x06	; 6
    214a:	ed 91       	ld	r30, X+
    214c:	fc 91       	ld	r31, X
    214e:	17 97       	sbiw	r26, 0x07	; 7
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	c7 01       	movw	r24, r14
    2156:	09 95       	icall
    2158:	0e 5f       	subi	r16, 0xFE	; 254
    215a:	1f 4f       	sbci	r17, 0xFF	; 255
    215c:	e4 cf       	rjmp	.-56     	; 0x2126 <u8x8_cad_SendSequence+0x16>
    215e:	f8 01       	movw	r30, r16
    2160:	81 81       	ldd	r24, Z+1	; 0x01
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	ae 01       	movw	r20, r28
    2166:	4f 5f       	subi	r20, 0xFF	; 255
    2168:	5f 4f       	sbci	r21, 0xFF	; 255
    216a:	61 e0       	ldi	r22, 0x01	; 1
    216c:	c7 01       	movw	r24, r14
    216e:	b0 df       	rcall	.-160    	; 0x20d0 <u8x8_cad_SendData>
    2170:	0e 5f       	subi	r16, 0xFE	; 254
    2172:	1f 4f       	sbci	r17, 0xFF	; 255
    2174:	d8 cf       	rjmp	.-80     	; 0x2126 <u8x8_cad_SendSequence+0x16>
    2176:	0f 5f       	subi	r16, 0xFF	; 255
    2178:	1f 4f       	sbci	r17, 0xFF	; 255
    217a:	d7 01       	movw	r26, r14
    217c:	16 96       	adiw	r26, 0x06	; 6
    217e:	ed 91       	ld	r30, X+
    2180:	fc 91       	ld	r31, X
    2182:	17 97       	sbiw	r26, 0x07	; 7
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	c7 01       	movw	r24, r14
    218c:	09 95       	icall
    218e:	cb cf       	rjmp	.-106    	; 0x2126 <u8x8_cad_SendSequence+0x16>
    2190:	f8 01       	movw	r30, r16
    2192:	41 81       	ldd	r20, Z+1	; 0x01
    2194:	49 83       	std	Y+1, r20	; 0x01
    2196:	69 e2       	ldi	r22, 0x29	; 41
    2198:	c7 01       	movw	r24, r14
    219a:	05 d2       	rcall	.+1034   	; 0x25a6 <u8x8_gpio_call>
    219c:	0e 5f       	subi	r16, 0xFE	; 254
    219e:	1f 4f       	sbci	r17, 0xFF	; 255
    21a0:	c2 cf       	rjmp	.-124    	; 0x2126 <u8x8_cad_SendSequence+0x16>
    21a2:	0f 90       	pop	r0
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	08 95       	ret

000021b2 <u8x8_cad_ssd13xx_fast_i2c>:


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    21b2:	ef 92       	push	r14
    21b4:	ff 92       	push	r15
    21b6:	0f 93       	push	r16
    21b8:	1f 93       	push	r17
    21ba:	cf 93       	push	r28
    21bc:	7c 01       	movw	r14, r24
    21be:	c4 2f       	mov	r28, r20
    21c0:	89 01       	movw	r16, r18
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    21c2:	66 31       	cpi	r22, 0x16	; 22
    21c4:	09 f1       	breq	.+66     	; 0x2208 <u8x8_cad_ssd13xx_fast_i2c+0x56>
    21c6:	30 f4       	brcc	.+12     	; 0x21d4 <u8x8_cad_ssd13xx_fast_i2c+0x22>
    21c8:	64 31       	cpi	r22, 0x14	; 20
    21ca:	09 f4       	brne	.+2      	; 0x21ce <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    21cc:	3a c0       	rjmp	.+116    	; 0x2242 <u8x8_cad_ssd13xx_fast_i2c+0x90>
    21ce:	65 31       	cpi	r22, 0x15	; 21
    21d0:	49 f0       	breq	.+18     	; 0x21e4 <u8x8_cad_ssd13xx_fast_i2c+0x32>
    21d2:	59 c0       	rjmp	.+178    	; 0x2286 <u8x8_cad_ssd13xx_fast_i2c+0xd4>
    21d4:	68 31       	cpi	r22, 0x18	; 24
    21d6:	09 f4       	brne	.+2      	; 0x21da <u8x8_cad_ssd13xx_fast_i2c+0x28>
    21d8:	48 c0       	rjmp	.+144    	; 0x226a <u8x8_cad_ssd13xx_fast_i2c+0xb8>
    21da:	d0 f0       	brcs	.+52     	; 0x2210 <u8x8_cad_ssd13xx_fast_i2c+0x5e>
    21dc:	69 31       	cpi	r22, 0x19	; 25
    21de:	09 f4       	brne	.+2      	; 0x21e2 <u8x8_cad_ssd13xx_fast_i2c+0x30>
    21e0:	48 c0       	rjmp	.+144    	; 0x2272 <u8x8_cad_ssd13xx_fast_i2c+0xc0>
    21e2:	51 c0       	rjmp	.+162    	; 0x2286 <u8x8_cad_ssd13xx_fast_i2c+0xd4>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    21e4:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <in_transfer.3254>
    21e8:	88 23       	and	r24, r24
    21ea:	11 f0       	breq	.+4      	; 0x21f0 <u8x8_cad_ssd13xx_fast_i2c+0x3e>
	 u8x8_byte_EndTransfer(u8x8); 
    21ec:	c7 01       	movw	r24, r14
    21ee:	c7 de       	rcall	.-626    	; 0x1f7e <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
    21f0:	c7 01       	movw	r24, r14
    21f2:	ba de       	rcall	.-652    	; 0x1f68 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	c7 01       	movw	r24, r14
    21f8:	a8 de       	rcall	.-688    	; 0x1f4a <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    21fa:	6c 2f       	mov	r22, r28
    21fc:	c7 01       	movw	r24, r14
    21fe:	a5 de       	rcall	.-694    	; 0x1f4a <u8x8_byte_SendByte>
    2200:	81 e0       	ldi	r24, 0x01	; 1
      in_transfer = 1;
    2202:	80 93 c0 06 	sts	0x06C0, r24	; 0x8006c0 <in_transfer.3254>
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    2206:	40 c0       	rjmp	.+128    	; 0x2288 <u8x8_cad_ssd13xx_fast_i2c+0xd6>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    2208:	64 2f       	mov	r22, r20
    220a:	9f de       	rcall	.-706    	; 0x1f4a <u8x8_byte_SendByte>
    220c:	81 e0       	ldi	r24, 0x01	; 1
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    220e:	3c c0       	rjmp	.+120    	; 0x2288 <u8x8_cad_ssd13xx_fast_i2c+0xd6>
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    2210:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <in_transfer.3254>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    2214:	88 23       	and	r24, r24
    2216:	11 f0       	breq	.+4      	; 0x221c <u8x8_cad_ssd13xx_fast_i2c+0x6a>
	u8x8_byte_EndTransfer(u8x8); 
    2218:	c7 01       	movw	r24, r14
    221a:	b1 de       	rcall	.-670    	; 0x1f7e <u8x8_byte_EndTransfer>
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    221c:	c9 31       	cpi	r28, 0x19	; 25
    221e:	48 f0       	brcs	.+18     	; 0x2232 <u8x8_cad_ssd13xx_fast_i2c+0x80>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    2220:	a8 01       	movw	r20, r16
    2222:	68 e1       	ldi	r22, 0x18	; 24
    2224:	c7 01       	movw	r24, r14
    2226:	23 df       	rcall	.-442    	; 0x206e <u8x8_i2c_data_transfer>
    2228:	c8 51       	subi	r28, 0x18	; 24
	arg_int-=24;
    222a:	08 5e       	subi	r16, 0xE8	; 232
	p+=24;
    222c:	1f 4f       	sbci	r17, 0xFF	; 255
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    222e:	c9 31       	cpi	r28, 0x19	; 25
    2230:	b8 f7       	brcc	.-18     	; 0x2220 <u8x8_cad_ssd13xx_fast_i2c+0x6e>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    2232:	a8 01       	movw	r20, r16
    2234:	6c 2f       	mov	r22, r28
    2236:	c7 01       	movw	r24, r14
    2238:	1a df       	rcall	.-460    	; 0x206e <u8x8_i2c_data_transfer>
    223a:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <in_transfer.3254>
      in_transfer = 0;
    223e:	81 e0       	ldi	r24, 0x01	; 1
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    2240:	23 c0       	rjmp	.+70     	; 0x2288 <u8x8_cad_ssd13xx_fast_i2c+0xd6>
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    2242:	dc 01       	movw	r26, r24
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    2244:	56 96       	adiw	r26, 0x16	; 22
    2246:	8c 91       	ld	r24, X
    2248:	56 97       	sbiw	r26, 0x16	; 22
    224a:	8f 3f       	cpi	r24, 0xFF	; 255
    224c:	19 f4       	brne	.+6      	; 0x2254 <u8x8_cad_ssd13xx_fast_i2c+0xa2>
    224e:	88 e7       	ldi	r24, 0x78	; 120
	u8x8->i2c_address = 0x078;
    2250:	56 96       	adiw	r26, 0x16	; 22
    2252:	8c 93       	st	X, r24
    2254:	d7 01       	movw	r26, r14
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    2256:	18 96       	adiw	r26, 0x08	; 8
    2258:	ed 91       	ld	r30, X+
    225a:	fc 91       	ld	r31, X
    225c:	19 97       	sbiw	r26, 0x09	; 9
    225e:	98 01       	movw	r18, r16
    2260:	4c 2f       	mov	r20, r28
    2262:	64 e1       	ldi	r22, 0x14	; 20
    2264:	c7 01       	movw	r24, r14
    2266:	09 95       	icall
    2268:	0f c0       	rjmp	.+30     	; 0x2288 <u8x8_cad_ssd13xx_fast_i2c+0xd6>
    226a:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <in_transfer.3254>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    226e:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    2270:	0b c0       	rjmp	.+22     	; 0x2288 <u8x8_cad_ssd13xx_fast_i2c+0xd6>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    2272:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <in_transfer.3254>
    2276:	88 23       	and	r24, r24
    2278:	11 f0       	breq	.+4      	; 0x227e <u8x8_cad_ssd13xx_fast_i2c+0xcc>
	u8x8_byte_EndTransfer(u8x8); 
    227a:	c7 01       	movw	r24, r14
    227c:	80 de       	rcall	.-768    	; 0x1f7e <u8x8_byte_EndTransfer>
    227e:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <in_transfer.3254>
      in_transfer = 0;
    2282:	81 e0       	ldi	r24, 0x01	; 1
      break;
    default:
      return 0;
  }
  return 1;
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <u8x8_cad_ssd13xx_fast_i2c+0xd6>
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    2286:	80 e0       	ldi	r24, 0x00	; 0
    default:
      return 0;
    2288:	cf 91       	pop	r28
  }
  return 1;
}
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	ff 90       	pop	r15
    2290:	ef 90       	pop	r14
    2292:	08 95       	ret

00002294 <u8x8_GetMenuEvent>:
/* returns 0, if there is no event */
#if defined(__GNUC__) && !defined(__CYGWIN__)
# pragma weak  u8x8_GetMenuEvent
#endif
uint8_t u8x8_GetMenuEvent(u8x8_t *u8x8)
{
    2294:	ff 92       	push	r15
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	8c 01       	movw	r16, r24
    22a0:	d0 e5       	ldi	r29, 0x50	; 80
static uint8_t u8x8_read_pin_state(u8x8_t *u8x8)
{
  uint8_t i;
  uint8_t pin_state;
  
  pin_state = 255;	/* be compatible with the setup of the default pin setup, which is 255 */
    22a2:	cf ef       	ldi	r28, 0xFF	; 255
  for( i = 0; i < U8X8_PIN_INPUT_CNT; i++ )
  {
    pin_state <<= 1;
    
    /* the callback function should put the return value into this variable */
    u8x8->gpio_result = 1;
    22a4:	ff 24       	eor	r15, r15
    22a6:	f3 94       	inc	r15
    22a8:	f8 01       	movw	r30, r16
    22aa:	f2 8e       	std	Z+26, r15	; 0x1a
    u8x8_gpio_call(u8x8, U8X8_MSG_GPIO(i+U8X8_PIN_OUTPUT_CNT), 0);
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	6d 2f       	mov	r22, r29
    22b0:	c8 01       	movw	r24, r16
    22b2:	79 d1       	rcall	.+754    	; 0x25a6 <u8x8_gpio_call>
    pin_state |= u8x8->gpio_result & 1;
    22b4:	f8 01       	movw	r30, r16
    22b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    22b8:	81 70       	andi	r24, 0x01	; 1
    22ba:	cc 0f       	add	r28, r28
    22bc:	c8 2b       	or	r28, r24
    22be:	df 5f       	subi	r29, 0xFF	; 255
{
  uint8_t i;
  uint8_t pin_state;
  
  pin_state = 255;	/* be compatible with the setup of the default pin setup, which is 255 */
  for( i = 0; i < U8X8_PIN_INPUT_CNT; i++ )
    22c0:	d6 35       	cpi	r29, 0x56	; 86
    22c2:	91 f7       	brne	.-28     	; 0x22a8 <u8x8_GetMenuEvent+0x14>
  uint8_t result_msg = 0;	/* invalid message, no event */
  
  pin_state = u8x8_read_pin_state(u8x8);
  
  /* States A, B, C & D are encoded in the upper 4 bit*/
  switch(u8x8->debounce_state)
    22c4:	85 8d       	ldd	r24, Z+29	; 0x1d
    22c6:	80 31       	cpi	r24, 0x10	; 16
    22c8:	89 f0       	breq	.+34     	; 0x22ec <u8x8_GetMenuEvent+0x58>
    22ca:	18 f4       	brcc	.+6      	; 0x22d2 <u8x8_GetMenuEvent+0x3e>
    22cc:	88 23       	and	r24, r24
    22ce:	31 f0       	breq	.+12     	; 0x22dc <u8x8_GetMenuEvent+0x48>
    22d0:	39 c0       	rjmp	.+114    	; 0x2344 <u8x8_GetMenuEvent+0xb0>
    22d2:	80 32       	cpi	r24, 0x20	; 32
    22d4:	c1 f0       	breq	.+48     	; 0x2306 <u8x8_GetMenuEvent+0x72>
    22d6:	80 33       	cpi	r24, 0x30	; 48
    22d8:	11 f1       	breq	.+68     	; 0x231e <u8x8_GetMenuEvent+0x8a>
    22da:	34 c0       	rjmp	.+104    	; 0x2344 <u8x8_GetMenuEvent+0xb0>
  {
    case 0x00:	/* State A, default state */
      if ( u8x8->debounce_default_pin_state != pin_state )
    22dc:	f8 01       	movw	r30, r16
    22de:	83 8d       	ldd	r24, Z+27	; 0x1b
    22e0:	8c 17       	cp	r24, r28
    22e2:	a9 f1       	breq	.+106    	; 0x234e <u8x8_GetMenuEvent+0xba>
      {
	//u8x8->debounce_last_pin_state = pin_state;
	u8x8->debounce_state = 0x010 + U8X8_DEBOUNCE_WAIT;
    22e4:	82 e1       	ldi	r24, 0x12	; 18
    22e6:	85 8f       	std	Z+29, r24	; 0x1d
# pragma weak  u8x8_GetMenuEvent
#endif
uint8_t u8x8_GetMenuEvent(u8x8_t *u8x8)
{
  uint8_t pin_state;
  uint8_t result_msg = 0;	/* invalid message, no event */
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	34 c0       	rjmp	.+104    	; 0x2354 <u8x8_GetMenuEvent+0xc0>
	u8x8->debounce_state = 0x010 + U8X8_DEBOUNCE_WAIT;
      }
      break;
    case 0x10:	/* State B */
      //if ( u8x8->debounce_last_pin_state != pin_state )
      if ( u8x8->debounce_default_pin_state == pin_state )
    22ec:	f8 01       	movw	r30, r16
    22ee:	83 8d       	ldd	r24, Z+27	; 0x1b
    22f0:	8c 13       	cpse	r24, r28
    22f2:	03 c0       	rjmp	.+6      	; 0x22fa <u8x8_GetMenuEvent+0x66>
      {
	u8x8->debounce_state = 0x00;	/* back to state A */
    22f4:	15 8e       	std	Z+29, r1	; 0x1d
# pragma weak  u8x8_GetMenuEvent
#endif
uint8_t u8x8_GetMenuEvent(u8x8_t *u8x8)
{
  uint8_t pin_state;
  uint8_t result_msg = 0;	/* invalid message, no event */
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	2d c0       	rjmp	.+90     	; 0x2354 <u8x8_GetMenuEvent+0xc0>
	u8x8->debounce_state = 0x00;	/* back to state A */
      }
      else
      {
	/* keypress detected */
	u8x8->debounce_last_pin_state = pin_state;
    22fa:	f8 01       	movw	r30, r16
    22fc:	c4 8f       	std	Z+28, r28	; 0x1c
	//result_msg = U8X8_MSG_GPIO_MENU_NEXT;
	u8x8->debounce_state = 0x020 + U8X8_DEBOUNCE_WAIT;	/* got to state C */	
    22fe:	82 e2       	ldi	r24, 0x22	; 34
    2300:	85 8f       	std	Z+29, r24	; 0x1d
# pragma weak  u8x8_GetMenuEvent
#endif
uint8_t u8x8_GetMenuEvent(u8x8_t *u8x8)
{
  uint8_t pin_state;
  uint8_t result_msg = 0;	/* invalid message, no event */
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	27 c0       	rjmp	.+78     	; 0x2354 <u8x8_GetMenuEvent+0xc0>
	u8x8->debounce_state = 0x020 + U8X8_DEBOUNCE_WAIT;	/* got to state C */	
      }
      break;
      
    case 0x20:	/* State C */
      if ( u8x8->debounce_last_pin_state != pin_state )
    2306:	f8 01       	movw	r30, r16
    2308:	84 8d       	ldd	r24, Z+28	; 0x1c
    230a:	8c 17       	cp	r24, r28
    230c:	19 f0       	breq	.+6      	; 0x2314 <u8x8_GetMenuEvent+0x80>
      {
	u8x8->debounce_state = 0x00;	/* back to state A */
    230e:	15 8e       	std	Z+29, r1	; 0x1d
# pragma weak  u8x8_GetMenuEvent
#endif
uint8_t u8x8_GetMenuEvent(u8x8_t *u8x8)
{
  uint8_t pin_state;
  uint8_t result_msg = 0;	/* invalid message, no event */
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	20 c0       	rjmp	.+64     	; 0x2354 <u8x8_GetMenuEvent+0xc0>
      {
	u8x8->debounce_state = 0x00;	/* back to state A */
      }
      else
      {
	u8x8->debounce_state = 0x030;	/* got to state D */	
    2314:	80 e3       	ldi	r24, 0x30	; 48
    2316:	f8 01       	movw	r30, r16
    2318:	85 8f       	std	Z+29, r24	; 0x1d
# pragma weak  u8x8_GetMenuEvent
#endif
uint8_t u8x8_GetMenuEvent(u8x8_t *u8x8)
{
  uint8_t pin_state;
  uint8_t result_msg = 0;	/* invalid message, no event */
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	1b c0       	rjmp	.+54     	; 0x2354 <u8x8_GetMenuEvent+0xc0>
      }
      break;
      
    case 0x30:	/* State D */
      /* wait until key release */
      if ( u8x8->debounce_default_pin_state == pin_state )
    231e:	f8 01       	movw	r30, r16
    2320:	23 8d       	ldd	r18, Z+27	; 0x1b
    2322:	2c 13       	cpse	r18, r28
    2324:	16 c0       	rjmp	.+44     	; 0x2352 <u8x8_GetMenuEvent+0xbe>
      {
	u8x8->debounce_state = 0x00;	/* back to state A */
    2326:	15 8e       	std	Z+29, r1	; 0x1d
	result_msg = U8X8_MSG_GPIO(u8x8_find_first_diff(u8x8->debounce_default_pin_state, u8x8->debounce_last_pin_state)+U8X8_PIN_OUTPUT_CNT);
    2328:	34 8d       	ldd	r19, Z+28	; 0x1c
static uint8_t u8x8_find_first_diff(uint8_t a, uint8_t b)
{
  uint8_t mask;
  uint8_t i;
  mask = 1;
  i = U8X8_PIN_INPUT_CNT;
    232a:	86 e0       	ldi	r24, 0x06	; 6
*/
static uint8_t u8x8_find_first_diff(uint8_t a, uint8_t b)
{
  uint8_t mask;
  uint8_t i;
  mask = 1;
    232c:	91 e0       	ldi	r25, 0x01	; 1
  i = U8X8_PIN_INPUT_CNT;
  do
  {
    i--;
    if ( (a & mask) != (b & mask) )
    232e:	32 27       	eor	r19, r18
  uint8_t i;
  mask = 1;
  i = U8X8_PIN_INPUT_CNT;
  do
  {
    i--;
    2330:	81 50       	subi	r24, 0x01	; 1
    if ( (a & mask) != (b & mask) )
    2332:	23 2f       	mov	r18, r19
    2334:	29 23       	and	r18, r25
    2336:	21 f4       	brne	.+8      	; 0x2340 <u8x8_GetMenuEvent+0xac>
      return i;
    mask <<= 1;
    2338:	99 0f       	add	r25, r25
  } while( i > 0 );
    233a:	81 11       	cpse	r24, r1
    233c:	f9 cf       	rjmp	.-14     	; 0x2330 <u8x8_GetMenuEvent+0x9c>
  return U8X8_PIN_INPUT_CNT;
    233e:	86 e0       	ldi	r24, 0x06	; 6
    case 0x30:	/* State D */
      /* wait until key release */
      if ( u8x8->debounce_default_pin_state == pin_state )
      {
	u8x8->debounce_state = 0x00;	/* back to state A */
	result_msg = U8X8_MSG_GPIO(u8x8_find_first_diff(u8x8->debounce_default_pin_state, u8x8->debounce_last_pin_state)+U8X8_PIN_OUTPUT_CNT);
    2340:	80 5b       	subi	r24, 0xB0	; 176
    2342:	08 c0       	rjmp	.+16     	; 0x2354 <u8x8_GetMenuEvent+0xc0>
	//result_msg = U8X8_MSG_GPIO_MENU_NEXT;
	// maybe implement autorepeat here 
      }
      break;
    default:
      u8x8->debounce_state--;	/* count down, until there is a valid state */
    2344:	81 50       	subi	r24, 0x01	; 1
    2346:	f8 01       	movw	r30, r16
    2348:	85 8f       	std	Z+29, r24	; 0x1d
# pragma weak  u8x8_GetMenuEvent
#endif
uint8_t u8x8_GetMenuEvent(u8x8_t *u8x8)
{
  uint8_t pin_state;
  uint8_t result_msg = 0;	/* invalid message, no event */
    234a:	80 e0       	ldi	r24, 0x00	; 0
	// maybe implement autorepeat here 
      }
      break;
    default:
      u8x8->debounce_state--;	/* count down, until there is a valid state */
      break;
    234c:	03 c0       	rjmp	.+6      	; 0x2354 <u8x8_GetMenuEvent+0xc0>
# pragma weak  u8x8_GetMenuEvent
#endif
uint8_t u8x8_GetMenuEvent(u8x8_t *u8x8)
{
  uint8_t pin_state;
  uint8_t result_msg = 0;	/* invalid message, no event */
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	01 c0       	rjmp	.+2      	; 0x2354 <u8x8_GetMenuEvent+0xc0>
    2352:	80 e0       	ldi	r24, 0x00	; 0
    default:
      u8x8->debounce_state--;	/* count down, until there is a valid state */
      break;
  }
  return result_msg;
}
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	ff 90       	pop	r15
    235e:	08 95       	ret

00002360 <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    2360:	fc 01       	movw	r30, r24
    2362:	71 83       	std	Z+1, r23	; 0x01
    2364:	60 83       	st	Z, r22
    2366:	fb 01       	movw	r30, r22
    2368:	22 89       	ldd	r18, Z+18	; 0x12
    236a:	fc 01       	movw	r30, r24
    236c:	24 8b       	std	Z+20, r18	; 0x14
    236e:	08 95       	ret

00002370 <u8x8_d_helper_display_init>:
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	ec 01       	movw	r28, r24
    2376:	ea 85       	ldd	r30, Y+10	; 0x0a
    2378:	fb 85       	ldd	r31, Y+11	; 0x0b
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	68 e2       	ldi	r22, 0x28	; 40
    2382:	09 95       	icall
    2384:	ee 81       	ldd	r30, Y+6	; 0x06
    2386:	ff 81       	ldd	r31, Y+7	; 0x07
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e0       	ldi	r20, 0x00	; 0
    238e:	64 e1       	ldi	r22, 0x14	; 20
    2390:	ce 01       	movw	r24, r28
    2392:	09 95       	icall
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	6b e4       	ldi	r22, 0x4B	; 75
    2398:	ce 01       	movw	r24, r28
    239a:	05 d1       	rcall	.+522    	; 0x25a6 <u8x8_gpio_call>
    239c:	e8 81       	ld	r30, Y
    239e:	f9 81       	ldd	r31, Y+1	; 0x01
    23a0:	44 81       	ldd	r20, Z+4	; 0x04
    23a2:	69 e2       	ldi	r22, 0x29	; 41
    23a4:	ce 01       	movw	r24, r28
    23a6:	ff d0       	rcall	.+510    	; 0x25a6 <u8x8_gpio_call>
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	6b e4       	ldi	r22, 0x4B	; 75
    23ac:	ce 01       	movw	r24, r28
    23ae:	fb d0       	rcall	.+502    	; 0x25a6 <u8x8_gpio_call>
    23b0:	e8 81       	ld	r30, Y
    23b2:	f9 81       	ldd	r31, Y+1	; 0x01
    23b4:	44 81       	ldd	r20, Z+4	; 0x04
    23b6:	69 e2       	ldi	r22, 0x29	; 41
    23b8:	ce 01       	movw	r24, r28
    23ba:	f5 d0       	rcall	.+490    	; 0x25a6 <u8x8_gpio_call>
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	6b e4       	ldi	r22, 0x4B	; 75
    23c0:	ce 01       	movw	r24, r28
    23c2:	f1 d0       	rcall	.+482    	; 0x25a6 <u8x8_gpio_call>
    23c4:	e8 81       	ld	r30, Y
    23c6:	f9 81       	ldd	r31, Y+1	; 0x01
    23c8:	45 81       	ldd	r20, Z+5	; 0x05
    23ca:	69 e2       	ldi	r22, 0x29	; 41
    23cc:	ce 01       	movw	r24, r28
    23ce:	eb d0       	rcall	.+470    	; 0x25a6 <u8x8_gpio_call>
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	08 95       	ret

000023d6 <u8x8_DrawTile>:
    23d6:	0f 93       	push	r16
    23d8:	1f 93       	push	r17
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <u8x8_DrawTile+0xa>
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <u8x8_DrawTile+0xc>
    23e2:	1f 92       	push	r1
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	6c 83       	std	Y+4, r22	; 0x04
    23ea:	4d 83       	std	Y+5, r20	; 0x05
    23ec:	2b 83       	std	Y+3, r18	; 0x03
    23ee:	1a 83       	std	Y+2, r17	; 0x02
    23f0:	09 83       	std	Y+1, r16	; 0x01
    23f2:	dc 01       	movw	r26, r24
    23f4:	14 96       	adiw	r26, 0x04	; 4
    23f6:	ed 91       	ld	r30, X+
    23f8:	fc 91       	ld	r31, X
    23fa:	15 97       	sbiw	r26, 0x05	; 5
    23fc:	9e 01       	movw	r18, r28
    23fe:	2f 5f       	subi	r18, 0xFF	; 255
    2400:	3f 4f       	sbci	r19, 0xFF	; 255
    2402:	41 e0       	ldi	r20, 0x01	; 1
    2404:	6f e0       	ldi	r22, 0x0F	; 15
    2406:	09 95       	icall
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	df 91       	pop	r29
    2414:	cf 91       	pop	r28
    2416:	1f 91       	pop	r17
    2418:	0f 91       	pop	r16
    241a:	08 95       	ret

0000241c <u8x8_SetupMemory>:
    241c:	dc 01       	movw	r26, r24
    241e:	14 96       	adiw	r26, 0x04	; 4
    2420:	ed 91       	ld	r30, X+
    2422:	fc 91       	ld	r31, X
    2424:	15 97       	sbiw	r26, 0x05	; 5
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	69 e0       	ldi	r22, 0x09	; 9
    242e:	09 95       	icall
    2430:	08 95       	ret

00002432 <u8x8_InitDisplay>:
    2432:	dc 01       	movw	r26, r24
    2434:	14 96       	adiw	r26, 0x04	; 4
    2436:	ed 91       	ld	r30, X+
    2438:	fc 91       	ld	r31, X
    243a:	15 97       	sbiw	r26, 0x05	; 5
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	6a e0       	ldi	r22, 0x0A	; 10
    2444:	09 95       	icall
    2446:	08 95       	ret

00002448 <u8x8_SetPowerSave>:
    2448:	46 2f       	mov	r20, r22
    244a:	dc 01       	movw	r26, r24
    244c:	14 96       	adiw	r26, 0x04	; 4
    244e:	ed 91       	ld	r30, X+
    2450:	fc 91       	ld	r31, X
    2452:	15 97       	sbiw	r26, 0x05	; 5
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	6b e0       	ldi	r22, 0x0B	; 11
    245a:	09 95       	icall
    245c:	08 95       	ret

0000245e <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    245e:	dc 01       	movw	r26, r24
    2460:	14 96       	adiw	r26, 0x04	; 4
    2462:	ed 91       	ld	r30, X+
    2464:	fc 91       	ld	r31, X
    2466:	15 97       	sbiw	r26, 0x05	; 5
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	60 e1       	ldi	r22, 0x10	; 16
    2470:	09 95       	icall
    2472:	08 95       	ret

00002474 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2474:	ef 92       	push	r14
    2476:	ff 92       	push	r15
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	8c 01       	movw	r16, r24
    2482:	c4 2f       	mov	r28, r20
    2484:	79 01       	movw	r14, r18
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    2486:	6d 30       	cpi	r22, 0x0D	; 13
    2488:	a9 f0       	breq	.+42     	; 0x24b4 <u8x8_d_ssd1306_sh1106_generic+0x40>
    248a:	18 f4       	brcc	.+6      	; 0x2492 <u8x8_d_ssd1306_sh1106_generic+0x1e>
    248c:	6b 30       	cpi	r22, 0x0B	; 11
    248e:	31 f0       	breq	.+12     	; 0x249c <u8x8_d_ssd1306_sh1106_generic+0x28>
    2490:	63 c0       	rjmp	.+198    	; 0x2558 <u8x8_d_ssd1306_sh1106_generic+0xe4>
    2492:	6e 30       	cpi	r22, 0x0E	; 14
    2494:	49 f1       	breq	.+82     	; 0x24e8 <u8x8_d_ssd1306_sh1106_generic+0x74>
    2496:	6f 30       	cpi	r22, 0x0F	; 15
    2498:	91 f1       	breq	.+100    	; 0x24fe <u8x8_d_ssd1306_sh1106_generic+0x8a>
    249a:	5e c0       	rjmp	.+188    	; 0x2558 <u8x8_d_ssd1306_sh1106_generic+0xe4>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    249c:	41 11       	cpse	r20, r1
    249e:	05 c0       	rjmp	.+10     	; 0x24aa <u8x8_d_ssd1306_sh1106_generic+0x36>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
    24a0:	66 e8       	ldi	r22, 0x86	; 134
    24a2:	72 e0       	ldi	r23, 0x02	; 2
    24a4:	35 de       	rcall	.-918    	; 0x2110 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	58 c0       	rjmp	.+176    	; 0x255a <u8x8_d_ssd1306_sh1106_generic+0xe6>
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
    24aa:	61 e8       	ldi	r22, 0x81	; 129
    24ac:	72 e0       	ldi	r23, 0x02	; 2
    24ae:	30 de       	rcall	.-928    	; 0x2110 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	53 c0       	rjmp	.+166    	; 0x255a <u8x8_d_ssd1306_sh1106_generic+0xe6>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    24b4:	41 11       	cpse	r20, r1
    24b6:	0c c0       	rjmp	.+24     	; 0x24d0 <u8x8_d_ssd1306_sh1106_generic+0x5c>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
    24b8:	6a e7       	ldi	r22, 0x7A	; 122
    24ba:	72 e0       	ldi	r23, 0x02	; 2
    24bc:	29 de       	rcall	.-942    	; 0x2110 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    24be:	d8 01       	movw	r26, r16
    24c0:	ed 91       	ld	r30, X+
    24c2:	fc 91       	ld	r31, X
    24c4:	11 97       	sbiw	r26, 0x01	; 1
    24c6:	82 89       	ldd	r24, Z+18	; 0x12
    24c8:	54 96       	adiw	r26, 0x14	; 20
    24ca:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    24cc:	81 e0       	ldi	r24, 0x01	; 1
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
    24ce:	45 c0       	rjmp	.+138    	; 0x255a <u8x8_d_ssd1306_sh1106_generic+0xe6>
    24d0:	63 e7       	ldi	r22, 0x73	; 115
    24d2:	72 e0       	ldi	r23, 0x02	; 2
    24d4:	1d de       	rcall	.-966    	; 0x2110 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    24d6:	d8 01       	movw	r26, r16
    24d8:	ed 91       	ld	r30, X+
    24da:	fc 91       	ld	r31, X
    24dc:	11 97       	sbiw	r26, 0x01	; 1
    24de:	83 89       	ldd	r24, Z+19	; 0x13
    24e0:	54 96       	adiw	r26, 0x14	; 20
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    24e2:	8c 93       	st	X, r24
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	39 c0       	rjmp	.+114    	; 0x255a <u8x8_d_ssd1306_sh1106_generic+0xe6>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    24e8:	fd dd       	rcall	.-1030   	; 0x20e4 <u8x8_cad_StartTransfer>
    24ea:	61 e8       	ldi	r22, 0x81	; 129
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    24ec:	c8 01       	movw	r24, r16
    24ee:	da dd       	rcall	.-1100   	; 0x20a4 <u8x8_cad_SendCmd>
    24f0:	6c 2f       	mov	r22, r28
      u8x8_cad_EndTransfer(u8x8);
    24f2:	c8 01       	movw	r24, r16
    24f4:	e2 dd       	rcall	.-1084   	; 0x20ba <u8x8_cad_SendArg>
    24f6:	c8 01       	movw	r24, r16
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    24f8:	00 de       	rcall	.-1024   	; 0x20fa <u8x8_cad_EndTransfer>
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
      u8x8_cad_SendCmd(u8x8, 0x081 );
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
    24fa:	81 e0       	ldi	r24, 0x01	; 1
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    24fc:	2e c0       	rjmp	.+92     	; 0x255a <u8x8_d_ssd1306_sh1106_generic+0xe6>
    24fe:	f2 dd       	rcall	.-1052   	; 0x20e4 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    2500:	f7 01       	movw	r30, r14
    2502:	d3 81       	ldd	r29, Z+3	; 0x03
      x *= 8;
    2504:	dd 0f       	add	r29, r29
    2506:	dd 0f       	add	r29, r29
      x += u8x8->x_offset;
    2508:	dd 0f       	add	r29, r29
    250a:	d8 01       	movw	r26, r16
    250c:	54 96       	adiw	r26, 0x14	; 20
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    250e:	8c 91       	ld	r24, X
    2510:	d8 0f       	add	r29, r24
    2512:	60 e4       	ldi	r22, 0x40	; 64
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    2514:	c8 01       	movw	r24, r16
    2516:	c6 dd       	rcall	.-1140   	; 0x20a4 <u8x8_cad_SendCmd>
    2518:	6d 2f       	mov	r22, r29
    251a:	62 95       	swap	r22
    251c:	6f 70       	andi	r22, 0x0F	; 15
    251e:	60 61       	ori	r22, 0x10	; 16
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
    2520:	c8 01       	movw	r24, r16
    2522:	c0 dd       	rcall	.-1152   	; 0x20a4 <u8x8_cad_SendCmd>
    2524:	6d 2f       	mov	r22, r29
    2526:	6f 70       	andi	r22, 0x0F	; 15
    2528:	c8 01       	movw	r24, r16
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
    252a:	c7 dd       	rcall	.-1138   	; 0x20ba <u8x8_cad_SendArg>
    252c:	f7 01       	movw	r30, r14
    252e:	64 81       	ldd	r22, Z+4	; 0x04
    2530:	60 6b       	ori	r22, 0xB0	; 176
    2532:	c8 01       	movw	r24, r16
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    2534:	c2 dd       	rcall	.-1148   	; 0x20ba <u8x8_cad_SendArg>
    2536:	d7 01       	movw	r26, r14
    2538:	4d 91       	ld	r20, X+
    253a:	5c 91       	ld	r21, X
    253c:	11 97       	sbiw	r26, 0x01	; 1
    253e:	12 96       	adiw	r26, 0x02	; 2
    2540:	6c 91       	ld	r22, X
    2542:	66 0f       	add	r22, r22
    2544:	66 0f       	add	r22, r22
    2546:	66 0f       	add	r22, r22
    2548:	c8 01       	movw	r24, r16
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    254a:	c2 dd       	rcall	.-1148   	; 0x20d0 <u8x8_cad_SendData>
      } while( arg_int > 0 );
    254c:	c1 50       	subi	r28, 0x01	; 1
      
      u8x8_cad_EndTransfer(u8x8);
    254e:	99 f7       	brne	.-26     	; 0x2536 <u8x8_d_ssd1306_sh1106_generic+0xc2>
    2550:	c8 01       	movw	r24, r16
    2552:	d3 dd       	rcall	.-1114   	; 0x20fa <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
	*/
	arg_int--;
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    2556:	01 c0       	rjmp	.+2      	; 0x255a <u8x8_d_ssd1306_sh1106_generic+0xe6>
    default:
      return 0;
    2558:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	1f 91       	pop	r17
    2560:	0f 91       	pop	r16
    2562:	ff 90       	pop	r15
    2564:	ef 90       	pop	r14
    2566:	08 95       	ret

00002568 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2568:	0f 93       	push	r16
    256a:	1f 93       	push	r17
    256c:	cf 93       	push	r28
    256e:	8c 01       	movw	r16, r24
    2570:	c6 2f       	mov	r28, r22
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    2572:	80 df       	rcall	.-256    	; 0x2474 <u8x8_d_ssd1306_sh1106_generic>
    2574:	81 11       	cpse	r24, r1
    2576:	12 c0       	rjmp	.+36     	; 0x259c <u8x8_d_ssd1306_128x64_noname+0x34>
    return 1;
  
  switch(msg)
    2578:	c9 30       	cpi	r28, 0x09	; 9
    257a:	51 f0       	breq	.+20     	; 0x2590 <u8x8_d_ssd1306_128x64_noname+0x28>
    257c:	ca 30       	cpi	r28, 0x0A	; 10
    257e:	79 f4       	brne	.+30     	; 0x259e <u8x8_d_ssd1306_128x64_noname+0x36>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    2580:	c8 01       	movw	r24, r16
    2582:	f6 de       	rcall	.-532    	; 0x2370 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    2584:	6b e8       	ldi	r22, 0x8B	; 139
    2586:	72 e0       	ldi	r23, 0x02	; 2
    2588:	c8 01       	movw	r24, r16
    258a:	c2 dd       	rcall	.-1148   	; 0x2110 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
    258c:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    258e:	07 c0       	rjmp	.+14     	; 0x259e <u8x8_d_ssd1306_128x64_noname+0x36>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    2590:	6b e5       	ldi	r22, 0x5B	; 91
    2592:	72 e0       	ldi	r23, 0x02	; 2
    2594:	c8 01       	movw	r24, r16
    2596:	e4 de       	rcall	.-568    	; 0x2360 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
    2598:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    259a:	01 c0       	rjmp	.+2      	; 0x259e <u8x8_d_ssd1306_128x64_noname+0x36>

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
      break;
    default:
      return 0;
  }
  return 1;
}
    259e:	cf 91       	pop	r28
    25a0:	1f 91       	pop	r17
    25a2:	0f 91       	pop	r16
    25a4:	08 95       	ret

000025a6 <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    25a6:	dc 01       	movw	r26, r24
    25a8:	1a 96       	adiw	r26, 0x0a	; 10
    25aa:	ed 91       	ld	r30, X+
    25ac:	fc 91       	ld	r31, X
    25ae:	1b 97       	sbiw	r26, 0x0b	; 11
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	09 95       	icall
    25b6:	08 95       	ret

000025b8 <u8sl_Next>:

/*
  increase the cursor position
*/
void u8sl_Next(u8sl_t *u8sl)
{
    25b8:	fc 01       	movw	r30, r24
  u8sl->current_pos++;
    25ba:	93 81       	ldd	r25, Z+3	; 0x03
    25bc:	9f 5f       	subi	r25, 0xFF	; 255
    25be:	93 83       	std	Z+3, r25	; 0x03
  if ( u8sl->current_pos >= u8sl->total )
    25c0:	81 81       	ldd	r24, Z+1	; 0x01
    25c2:	98 17       	cp	r25, r24
    25c4:	18 f0       	brcs	.+6      	; 0x25cc <u8sl_Next+0x14>
  {
    u8sl->current_pos = 0;
    25c6:	13 82       	std	Z+3, r1	; 0x03
    u8sl->first_pos = 0;
    25c8:	12 82       	std	Z+2, r1	; 0x02
    25ca:	08 95       	ret
  }
  else
  {
    if ( u8sl->first_pos + u8sl->visible <= u8sl->current_pos + 1 )
    25cc:	80 81       	ld	r24, Z
    25ce:	22 81       	ldd	r18, Z+2	; 0x02
    25d0:	48 2f       	mov	r20, r24
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	42 0f       	add	r20, r18
    25d6:	51 1d       	adc	r21, r1
    25d8:	29 2f       	mov	r18, r25
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	2f 5f       	subi	r18, 0xFF	; 255
    25de:	3f 4f       	sbci	r19, 0xFF	; 255
    25e0:	24 17       	cp	r18, r20
    25e2:	35 07       	cpc	r19, r21
    25e4:	1c f0       	brlt	.+6      	; 0x25ec <u8sl_Next+0x34>
    {
      u8sl->first_pos = u8sl->current_pos - u8sl->visible + 1;
    25e6:	98 1b       	sub	r25, r24
    25e8:	9f 5f       	subi	r25, 0xFF	; 255
    25ea:	92 83       	std	Z+2, r25	; 0x02
    25ec:	08 95       	ret

000025ee <u8sl_Prev>:
    }
  }
}

void u8sl_Prev(u8sl_t *u8sl)
{
    25ee:	fc 01       	movw	r30, r24
  if ( u8sl->current_pos == 0 )
    25f0:	83 81       	ldd	r24, Z+3	; 0x03
    25f2:	81 11       	cpse	r24, r1
    25f4:	0b c0       	rjmp	.+22     	; 0x260c <u8sl_Prev+0x1e>
  {
    u8sl->current_pos = u8sl->total - 1;
    25f6:	81 81       	ldd	r24, Z+1	; 0x01
    25f8:	9f ef       	ldi	r25, 0xFF	; 255
    25fa:	98 0f       	add	r25, r24
    25fc:	93 83       	std	Z+3, r25	; 0x03
    u8sl->first_pos = 0;
    25fe:	12 82       	std	Z+2, r1	; 0x02
    if ( u8sl->total > u8sl->visible )
    2600:	90 81       	ld	r25, Z
    2602:	98 17       	cp	r25, r24
    2604:	48 f4       	brcc	.+18     	; 0x2618 <u8sl_Prev+0x2a>
      u8sl->first_pos = u8sl->total - u8sl->visible;
    2606:	89 1b       	sub	r24, r25
    2608:	82 83       	std	Z+2, r24	; 0x02
    260a:	08 95       	ret
  }
  else
  {
    u8sl->current_pos--;
    260c:	81 50       	subi	r24, 0x01	; 1
    260e:	83 83       	std	Z+3, r24	; 0x03
    if ( u8sl->first_pos > u8sl->current_pos )
    2610:	92 81       	ldd	r25, Z+2	; 0x02
    2612:	89 17       	cp	r24, r25
    2614:	08 f4       	brcc	.+2      	; 0x2618 <u8sl_Prev+0x2a>
      u8sl->first_pos = u8sl->current_pos;
    2616:	82 83       	std	Z+2, r24	; 0x02
    2618:	08 95       	ret

0000261a <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	08 95       	ret

0000261e <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    261e:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    2620:	11 82       	std	Z+1, r1	; 0x01
    2622:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    2624:	8d e0       	ldi	r24, 0x0D	; 13
    2626:	93 e1       	ldi	r25, 0x13	; 19
    2628:	95 83       	std	Z+5, r25	; 0x05
    262a:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    262c:	97 83       	std	Z+7, r25	; 0x07
    262e:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    2630:	91 87       	std	Z+9, r25	; 0x09
    2632:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    2634:	93 87       	std	Z+11, r25	; 0x0b
    2636:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    2638:	15 8a       	std	Z+21, r1	; 0x15
    u8x8->device_address = 0;
    263a:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    263c:	11 8e       	std	Z+25, r1	; 0x19
    u8x8->bus_clock = 0;		/* issue 769 */
    263e:	14 86       	std	Z+12, r1	; 0x0c
    2640:	15 86       	std	Z+13, r1	; 0x0d
    2642:	16 86       	std	Z+14, r1	; 0x0e
    2644:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    2646:	8f ef       	ldi	r24, 0xFF	; 255
    2648:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    264a:	83 8f       	std	Z+27, r24	; 0x1b
    264c:	08 95       	ret

0000264e <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    264e:	af 92       	push	r10
    2650:	bf 92       	push	r11
    2652:	cf 92       	push	r12
    2654:	df 92       	push	r13
    2656:	ef 92       	push	r14
    2658:	ff 92       	push	r15
    265a:	0f 93       	push	r16
    265c:	1f 93       	push	r17
    265e:	cf 93       	push	r28
    2660:	df 93       	push	r29
    2662:	ec 01       	movw	r28, r24
    2664:	5b 01       	movw	r10, r22
    2666:	6a 01       	movw	r12, r20
    2668:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    266a:	d9 df       	rcall	.-78     	; 0x261e <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    266c:	bd 82       	std	Y+5, r11	; 0x05
    266e:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    2670:	df 82       	std	Y+7, r13	; 0x07
    2672:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    2674:	f9 86       	std	Y+9, r15	; 0x09
    2676:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    2678:	1b 87       	std	Y+11, r17	; 0x0b
    267a:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    267c:	ce 01       	movw	r24, r28
    267e:	ce de       	rcall	.-612    	; 0x241c <u8x8_SetupMemory>
}
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	1f 91       	pop	r17
    2686:	0f 91       	pop	r16
    2688:	ff 90       	pop	r15
    268a:	ef 90       	pop	r14
    268c:	df 90       	pop	r13
    268e:	cf 90       	pop	r12
    2690:	bf 90       	pop	r11
    2692:	af 90       	pop	r10
    2694:	08 95       	ret

00002696 <u8x8_GetStringLineCnt>:

uint8_t u8x8_GetStringLineCnt(const char *str)
{
  char e;
  uint8_t line_cnt = 1;
  if ( str == NULL )
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	49 f0       	breq	.+18     	; 0x26ac <u8x8_GetStringLineCnt+0x16>
    269a:	fc 01       	movw	r30, r24
    269c:	81 e0       	ldi	r24, 0x01	; 1
    return 0;
  for(;;)
  {
    e = *str;
    269e:	91 91       	ld	r25, Z+
    if ( e == '\0' )
    26a0:	99 23       	and	r25, r25
    26a2:	29 f0       	breq	.+10     	; 0x26ae <u8x8_GetStringLineCnt+0x18>
      break;
    str++;
    if ( e == '\n' )
    26a4:	9a 30       	cpi	r25, 0x0A	; 10
    26a6:	d9 f7       	brne	.-10     	; 0x269e <u8x8_GetStringLineCnt+0x8>
      line_cnt++;
    26a8:	8f 5f       	subi	r24, 0xFF	; 255
    26aa:	f9 cf       	rjmp	.-14     	; 0x269e <u8x8_GetStringLineCnt+0x8>
uint8_t u8x8_GetStringLineCnt(const char *str)
{
  char e;
  uint8_t line_cnt = 1;
  if ( str == NULL )
    return 0;
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    str++;
    if ( e == '\n' )
      line_cnt++;
  }
  return line_cnt;
}
    26ae:	08 95       	ret

000026b0 <u8x8_GetStringLineStart>:
const char *u8x8_GetStringLineStart(uint8_t line_idx, const char *str )
{
  char e;
  uint8_t line_cnt = 1;
  
  if ( line_idx == 0 )
    26b0:	88 23       	and	r24, r24
    26b2:	69 f0       	breq	.+26     	; 0x26ce <u8x8_GetStringLineStart+0x1e>
    26b4:	e6 2f       	mov	r30, r22
    26b6:	f7 2f       	mov	r31, r23
    26b8:	31 e0       	ldi	r19, 0x01	; 1
    return str;

  for(;;)
  {
    e = *str;
    26ba:	21 91       	ld	r18, Z+
    if ( e == '\0' )
    26bc:	22 23       	and	r18, r18
    26be:	51 f0       	breq	.+20     	; 0x26d4 <u8x8_GetStringLineStart+0x24>
      break;
    str++;
    26c0:	9f 2f       	mov	r25, r31
    if ( e == '\n' )
    26c2:	2a 30       	cpi	r18, 0x0A	; 10
    26c4:	d1 f7       	brne	.-12     	; 0x26ba <u8x8_GetStringLineStart+0xa>
    {
      if ( line_cnt == line_idx )
    26c6:	38 17       	cp	r19, r24
    26c8:	41 f0       	breq	.+16     	; 0x26da <u8x8_GetStringLineStart+0x2a>
	return str;
      line_cnt++;
    26ca:	3f 5f       	subi	r19, 0xFF	; 255
    26cc:	f6 cf       	rjmp	.-20     	; 0x26ba <u8x8_GetStringLineStart+0xa>
{
  char e;
  uint8_t line_cnt = 1;
  
  if ( line_idx == 0 )
    return str;
    26ce:	86 2f       	mov	r24, r22
    26d0:	97 2f       	mov	r25, r23
    26d2:	08 95       	ret
      if ( line_cnt == line_idx )
	return str;
      line_cnt++;
    }
  }
  return NULL;	/* line not found */
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	08 95       	ret
  for(;;)
  {
    e = *str;
    if ( e == '\0' )
      break;
    str++;
    26da:	8e 2f       	mov	r24, r30
	return str;
      line_cnt++;
    }
  }
  return NULL;	/* line not found */
}
    26dc:	08 95       	ret

000026de <__udivmodqi4>:
    26de:	99 1b       	sub	r25, r25
    26e0:	79 e0       	ldi	r23, 0x09	; 9
    26e2:	04 c0       	rjmp	.+8      	; 0x26ec <__udivmodqi4_ep>

000026e4 <__udivmodqi4_loop>:
    26e4:	99 1f       	adc	r25, r25
    26e6:	96 17       	cp	r25, r22
    26e8:	08 f0       	brcs	.+2      	; 0x26ec <__udivmodqi4_ep>
    26ea:	96 1b       	sub	r25, r22

000026ec <__udivmodqi4_ep>:
    26ec:	88 1f       	adc	r24, r24
    26ee:	7a 95       	dec	r23
    26f0:	c9 f7       	brne	.-14     	; 0x26e4 <__udivmodqi4_loop>
    26f2:	80 95       	com	r24
    26f4:	08 95       	ret

000026f6 <__divmodhi4>:
    26f6:	97 fb       	bst	r25, 7
    26f8:	07 2e       	mov	r0, r23
    26fa:	16 f4       	brtc	.+4      	; 0x2700 <__divmodhi4+0xa>
    26fc:	00 94       	com	r0
    26fe:	06 d0       	rcall	.+12     	; 0x270c <__divmodhi4_neg1>
    2700:	77 fd       	sbrc	r23, 7
    2702:	08 d0       	rcall	.+16     	; 0x2714 <__divmodhi4_neg2>
    2704:	3c d0       	rcall	.+120    	; 0x277e <__udivmodhi4>
    2706:	07 fc       	sbrc	r0, 7
    2708:	05 d0       	rcall	.+10     	; 0x2714 <__divmodhi4_neg2>
    270a:	3e f4       	brtc	.+14     	; 0x271a <__divmodhi4_exit>

0000270c <__divmodhi4_neg1>:
    270c:	90 95       	com	r25
    270e:	81 95       	neg	r24
    2710:	9f 4f       	sbci	r25, 0xFF	; 255
    2712:	08 95       	ret

00002714 <__divmodhi4_neg2>:
    2714:	70 95       	com	r23
    2716:	61 95       	neg	r22
    2718:	7f 4f       	sbci	r23, 0xFF	; 255

0000271a <__divmodhi4_exit>:
    271a:	08 95       	ret

0000271c <__udivmodsi4>:
    271c:	a1 e2       	ldi	r26, 0x21	; 33
    271e:	1a 2e       	mov	r1, r26
    2720:	aa 1b       	sub	r26, r26
    2722:	bb 1b       	sub	r27, r27
    2724:	fd 01       	movw	r30, r26
    2726:	0d c0       	rjmp	.+26     	; 0x2742 <__udivmodsi4_ep>

00002728 <__udivmodsi4_loop>:
    2728:	aa 1f       	adc	r26, r26
    272a:	bb 1f       	adc	r27, r27
    272c:	ee 1f       	adc	r30, r30
    272e:	ff 1f       	adc	r31, r31
    2730:	a2 17       	cp	r26, r18
    2732:	b3 07       	cpc	r27, r19
    2734:	e4 07       	cpc	r30, r20
    2736:	f5 07       	cpc	r31, r21
    2738:	20 f0       	brcs	.+8      	; 0x2742 <__udivmodsi4_ep>
    273a:	a2 1b       	sub	r26, r18
    273c:	b3 0b       	sbc	r27, r19
    273e:	e4 0b       	sbc	r30, r20
    2740:	f5 0b       	sbc	r31, r21

00002742 <__udivmodsi4_ep>:
    2742:	66 1f       	adc	r22, r22
    2744:	77 1f       	adc	r23, r23
    2746:	88 1f       	adc	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	1a 94       	dec	r1
    274c:	69 f7       	brne	.-38     	; 0x2728 <__udivmodsi4_loop>
    274e:	60 95       	com	r22
    2750:	70 95       	com	r23
    2752:	80 95       	com	r24
    2754:	90 95       	com	r25
    2756:	9b 01       	movw	r18, r22
    2758:	ac 01       	movw	r20, r24
    275a:	bd 01       	movw	r22, r26
    275c:	cf 01       	movw	r24, r30
    275e:	08 95       	ret

00002760 <__umulhisi3>:
    2760:	a2 9f       	mul	r26, r18
    2762:	b0 01       	movw	r22, r0
    2764:	b3 9f       	mul	r27, r19
    2766:	c0 01       	movw	r24, r0
    2768:	a3 9f       	mul	r26, r19
    276a:	70 0d       	add	r23, r0
    276c:	81 1d       	adc	r24, r1
    276e:	11 24       	eor	r1, r1
    2770:	91 1d       	adc	r25, r1
    2772:	b2 9f       	mul	r27, r18
    2774:	70 0d       	add	r23, r0
    2776:	81 1d       	adc	r24, r1
    2778:	11 24       	eor	r1, r1
    277a:	91 1d       	adc	r25, r1
    277c:	08 95       	ret

0000277e <__udivmodhi4>:
    277e:	aa 1b       	sub	r26, r26
    2780:	bb 1b       	sub	r27, r27
    2782:	51 e1       	ldi	r21, 0x11	; 17
    2784:	07 c0       	rjmp	.+14     	; 0x2794 <__udivmodhi4_ep>

00002786 <__udivmodhi4_loop>:
    2786:	aa 1f       	adc	r26, r26
    2788:	bb 1f       	adc	r27, r27
    278a:	a6 17       	cp	r26, r22
    278c:	b7 07       	cpc	r27, r23
    278e:	10 f0       	brcs	.+4      	; 0x2794 <__udivmodhi4_ep>
    2790:	a6 1b       	sub	r26, r22
    2792:	b7 0b       	sbc	r27, r23

00002794 <__udivmodhi4_ep>:
    2794:	88 1f       	adc	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	5a 95       	dec	r21
    279a:	a9 f7       	brne	.-22     	; 0x2786 <__udivmodhi4_loop>
    279c:	80 95       	com	r24
    279e:	90 95       	com	r25
    27a0:	bc 01       	movw	r22, r24
    27a2:	cd 01       	movw	r24, r26
    27a4:	08 95       	ret

000027a6 <memset>:
    27a6:	dc 01       	movw	r26, r24
    27a8:	01 c0       	rjmp	.+2      	; 0x27ac <memset+0x6>
    27aa:	6d 93       	st	X+, r22
    27ac:	41 50       	subi	r20, 0x01	; 1
    27ae:	50 40       	sbci	r21, 0x00	; 0
    27b0:	e0 f7       	brcc	.-8      	; 0x27aa <memset+0x4>
    27b2:	08 95       	ret

000027b4 <_exit>:
    27b4:	f8 94       	cli

000027b6 <__stop_program>:
    27b6:	ff cf       	rjmp	.-2      	; 0x27b6 <__stop_program>
