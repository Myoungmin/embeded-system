
Servo_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a54  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b2  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003aa  00000000  00000000  00001542  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000018ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000449  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dc  00000000  00000000  00001d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001e69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	47 c0       	rjmp	.+142    	; 0x12a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <avr/interrupt.h>


int main(void)
{ 
	RCServoInit(10000);
  9e:	80 e1       	ldi	r24, 0x10	; 16
  a0:	97 e2       	ldi	r25, 0x27	; 39
  a2:	25 d0       	rcall	.+74     	; 0xee <RCServoInit>
	   
	while (1) 
    {
		// 스위치를 이용한 width 변경부 추가
		RCServoSetOnWidth(MIN_WIDTH);// 펄스폭 설정
  a4:	8c eb       	ldi	r24, 0xBC	; 188
  a6:	92 e0       	ldi	r25, 0x02	; 2
  a8:	3b d0       	rcall	.+118    	; 0x120 <RCServoSetOnWidth>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	83 ed       	ldi	r24, 0xD3	; 211
  ae:	90 e3       	ldi	r25, 0x30	; 48
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x12>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x1c>
  ba:	00 00       	nop
		_delay_ms(1000);
		//width[0] = MIN_WIDTH;
		RCServoSetOnWidth(NEUTRAL_WIDTH);
  bc:	8c ed       	ldi	r24, 0xDC	; 220
  be:	95 e0       	ldi	r25, 0x05	; 5
  c0:	2f d0       	rcall	.+94     	; 0x120 <RCServoSetOnWidth>
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	83 ed       	ldi	r24, 0xD3	; 211
  c6:	90 e3       	ldi	r25, 0x30	; 48
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x2a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x34>
		_delay_ms(1000);
		//width[0] = MAX_WIDTH;
		RCServoSetOnWidth(MAX_WIDTH);
  d2:	00 00       	nop
  d4:	8c ef       	ldi	r24, 0xFC	; 252
  d6:	98 e0       	ldi	r25, 0x08	; 8
  d8:	23 d0       	rcall	.+70     	; 0x120 <RCServoSetOnWidth>
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	83 ed       	ldi	r24, 0xD3	; 211
  de:	90 e3       	ldi	r25, 0x30	; 48
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x42>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x4c>
  ea:	00 00       	nop
  ec:	db cf       	rjmp	.-74     	; 0xa4 <main+0x6>

000000ee <RCServoInit>:

void RCServoInit(unsigned short period)
{
	unsigned short oncount;

	DDRB |= (1<<PORTB5) | (1<<PORTB6) | (1<<PORTB7);// OC1A, OC1B, OC1C 출력설정
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	20 6e       	ori	r18, 0xE0	; 224
  f2:	27 bb       	out	0x17, r18	; 23
	//타이머카운터 1 설정 
	TCCR1A = 0xAA;// Fast PWM 모드, OC1A/B/C 
  f4:	2a ea       	ldi	r18, 0xAA	; 170
  f6:	2f bd       	out	0x2f, r18	; 47
	
	// 비교 출력 모드 2 사용 
	TCCR1B = 0x18;// WGM13:0 = 14 (ICR1로 TOP 설정)
  f8:	28 e1       	ldi	r18, 0x18	; 24
  fa:	2e bd       	out	0x2e, r18	; 46
	
	// Fast PWM의 TOP은 ICR1으로 설정 
	// TOP은 PWM의 주기로부터 설정
	
	ICR1 = period * 2;//주기 period usec
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	97 bd       	out	0x27, r25	; 39
 102:	86 bd       	out	0x26, r24	; 38
	
	//초기 펄스폭 중립 
	oncount = NEUTRAL_WIDTH * 2;

	OCR1A = oncount;
 104:	88 eb       	ldi	r24, 0xB8	; 184
 106:	9b e0       	ldi	r25, 0x0B	; 11
 108:	9b bd       	out	0x2b, r25	; 43
 10a:	8a bd       	out	0x2a, r24	; 42
	OCR1B = oncount;
 10c:	99 bd       	out	0x29, r25	; 41
 10e:	88 bd       	out	0x28, r24	; 40
	OCR1C = oncount;
 110:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 114:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>

	TCCR1B |= (2<<CS10);// 분주비 8로 타이머 시작
 118:	8e b5       	in	r24, 0x2e	; 46
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	8e bd       	out	0x2e, r24	; 46
 11e:	08 95       	ret

00000120 <RCServoSetOnWidth>:
//////////////////////////////////////////////////////////////////////////


void RCServoSetOnWidth(unsigned short onWidth)
{
	OCR1A = onWidth * 2;// RC servo #0
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	9b bd       	out	0x2b, r25	; 43
 126:	8a bd       	out	0x2a, r24	; 42
 128:	08 95       	ret

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
