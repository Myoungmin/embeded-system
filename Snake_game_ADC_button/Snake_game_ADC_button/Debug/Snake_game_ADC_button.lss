
Snake_game_ADC_button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005b8  00800100  000029f6  00002a8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  008006b8  008006b8  00003042  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003042  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  000030e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b06  00000000  00000000  000032e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c41  00000000  00000000  00004dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016e0  00000000  00000000  00005a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000870  00000000  00000000  00007110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000862  00000000  00000000  00007980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011e7  00000000  00000000  000081e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000093c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	35 c1       	rjmp	.+618    	; 0x26c <__ctors_end>
       2:	00 00       	nop
       4:	52 c1       	rjmp	.+676    	; 0x2aa <__bad_interrupt>
       6:	00 00       	nop
       8:	50 c1       	rjmp	.+672    	; 0x2aa <__bad_interrupt>
       a:	00 00       	nop
       c:	4e c1       	rjmp	.+668    	; 0x2aa <__bad_interrupt>
       e:	00 00       	nop
      10:	18 c7       	rjmp	.+3632   	; 0xe42 <__vector_4>
      12:	00 00       	nop
      14:	c0 c6       	rjmp	.+3456   	; 0xd96 <__vector_5>
      16:	00 00       	nop
      18:	bc c5       	rjmp	.+2936   	; 0xb92 <__vector_6>
      1a:	00 00       	nop
      1c:	10 c6       	rjmp	.+3104   	; 0xc3e <__vector_7>
      1e:	00 00       	nop
      20:	64 c6       	rjmp	.+3272   	; 0xcea <__vector_8>
      22:	00 00       	nop
      24:	42 c1       	rjmp	.+644    	; 0x2aa <__bad_interrupt>
      26:	00 00       	nop
      28:	40 c1       	rjmp	.+640    	; 0x2aa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3e c1       	rjmp	.+636    	; 0x2aa <__bad_interrupt>
      2e:	00 00       	nop
      30:	3c c1       	rjmp	.+632    	; 0x2aa <__bad_interrupt>
      32:	00 00       	nop
      34:	3a c1       	rjmp	.+628    	; 0x2aa <__bad_interrupt>
      36:	00 00       	nop
      38:	38 c1       	rjmp	.+624    	; 0x2aa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	36 c1       	rjmp	.+620    	; 0x2aa <__bad_interrupt>
      3e:	00 00       	nop
      40:	34 c1       	rjmp	.+616    	; 0x2aa <__bad_interrupt>
      42:	00 00       	nop
      44:	32 c1       	rjmp	.+612    	; 0x2aa <__bad_interrupt>
      46:	00 00       	nop
      48:	30 c1       	rjmp	.+608    	; 0x2aa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2e c1       	rjmp	.+604    	; 0x2aa <__bad_interrupt>
      4e:	00 00       	nop
      50:	2c c1       	rjmp	.+600    	; 0x2aa <__bad_interrupt>
      52:	00 00       	nop
      54:	2a c1       	rjmp	.+596    	; 0x2aa <__bad_interrupt>
      56:	00 00       	nop
      58:	28 c1       	rjmp	.+592    	; 0x2aa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	26 c1       	rjmp	.+588    	; 0x2aa <__bad_interrupt>
      5e:	00 00       	nop
      60:	24 c1       	rjmp	.+584    	; 0x2aa <__bad_interrupt>
      62:	00 00       	nop
      64:	22 c1       	rjmp	.+580    	; 0x2aa <__bad_interrupt>
      66:	00 00       	nop
      68:	20 c1       	rjmp	.+576    	; 0x2aa <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1e c1       	rjmp	.+572    	; 0x2aa <__bad_interrupt>
      6e:	00 00       	nop
      70:	1c c1       	rjmp	.+568    	; 0x2aa <__bad_interrupt>
      72:	00 00       	nop
      74:	1a c1       	rjmp	.+564    	; 0x2aa <__bad_interrupt>
      76:	00 00       	nop
      78:	18 c1       	rjmp	.+560    	; 0x2aa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	16 c1       	rjmp	.+556    	; 0x2aa <__bad_interrupt>
      7e:	00 00       	nop
      80:	14 c1       	rjmp	.+552    	; 0x2aa <__bad_interrupt>
      82:	00 00       	nop
      84:	12 c1       	rjmp	.+548    	; 0x2aa <__bad_interrupt>
      86:	00 00       	nop
      88:	10 c1       	rjmp	.+544    	; 0x2aa <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	00 00       	nop
      92:	00 5f       	subi	r16, 0xF0	; 240
      94:	00 00       	nop
      96:	00 07       	cpc	r16, r16
      98:	00 07       	cpc	r16, r16
      9a:	00 14       	cp	r0, r0
      9c:	7f 14       	cp	r7, r15
      9e:	7f 14       	cp	r7, r15
      a0:	24 2a       	or	r2, r20
      a2:	7f 2a       	or	r7, r31
      a4:	12 23       	and	r17, r18
      a6:	13 08       	sbc	r1, r3
      a8:	64 62       	ori	r22, 0x24	; 36
      aa:	36 49       	sbci	r19, 0x96	; 150
      ac:	55 22       	and	r5, r21
      ae:	50 00       	.word	0x0050	; ????
      b0:	05 03       	mulsu	r16, r21
      b2:	00 00       	nop
      b4:	00 1c       	adc	r0, r0
      b6:	22 41       	sbci	r18, 0x12	; 18
      b8:	00 00       	nop
      ba:	41 22       	and	r4, r17
      bc:	1c 00       	.word	0x001c	; ????
      be:	14 08       	sbc	r1, r4
      c0:	3e 08       	sbc	r3, r14
      c2:	14 08       	sbc	r1, r4
      c4:	08 3e       	cpi	r16, 0xE8	; 232
      c6:	08 08       	sbc	r0, r8
      c8:	00 50       	subi	r16, 0x00	; 0
      ca:	30 00       	.word	0x0030	; ????
      cc:	00 08       	sbc	r0, r0
      ce:	08 08       	sbc	r0, r8
      d0:	08 08       	sbc	r0, r8
      d2:	00 60       	ori	r16, 0x00	; 0
      d4:	60 00       	.word	0x0060	; ????
      d6:	00 20       	and	r0, r0
      d8:	10 08       	sbc	r1, r0
      da:	04 02       	muls	r16, r20
      dc:	3e 51       	subi	r19, 0x1E	; 30
      de:	49 45       	sbci	r20, 0x59	; 89
      e0:	3e 00       	.word	0x003e	; ????
      e2:	42 7f       	andi	r20, 0xF2	; 242
      e4:	40 00       	.word	0x0040	; ????
      e6:	42 61       	ori	r20, 0x12	; 18
      e8:	51 49       	sbci	r21, 0x91	; 145
      ea:	46 21       	and	r20, r6
      ec:	41 45       	sbci	r20, 0x51	; 81
      ee:	4b 31       	cpi	r20, 0x1B	; 27
      f0:	18 14       	cp	r1, r8
      f2:	12 7f       	andi	r17, 0xF2	; 242
      f4:	10 27       	eor	r17, r16
      f6:	45 45       	sbci	r20, 0x55	; 85
      f8:	45 39       	cpi	r20, 0x95	; 149
      fa:	3c 4a       	sbci	r19, 0xAC	; 172
      fc:	49 49       	sbci	r20, 0x99	; 153
      fe:	30 01       	movw	r6, r0
     100:	71 09       	sbc	r23, r1
     102:	05 03       	mulsu	r16, r21
     104:	36 49       	sbci	r19, 0x96	; 150
     106:	49 49       	sbci	r20, 0x99	; 153
     108:	36 06       	cpc	r3, r22
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	29 1e       	adc	r2, r25
     10e:	00 36       	cpi	r16, 0x60	; 96
     110:	36 00       	.word	0x0036	; ????
     112:	00 00       	nop
     114:	56 36       	cpi	r21, 0x66	; 102
     116:	00 00       	nop
     118:	08 14       	cp	r0, r8
     11a:	22 41       	sbci	r18, 0x12	; 18
     11c:	00 14       	cp	r0, r0
     11e:	14 14       	cp	r1, r4
     120:	14 14       	cp	r1, r4
     122:	00 41       	sbci	r16, 0x10	; 16
     124:	22 14       	cp	r2, r2
     126:	08 02       	muls	r16, r24
     128:	01 51       	subi	r16, 0x11	; 17
     12a:	09 06       	cpc	r0, r25
     12c:	32 49       	sbci	r19, 0x92	; 146
     12e:	79 41       	sbci	r23, 0x19	; 25
     130:	3e 7e       	andi	r19, 0xEE	; 238
     132:	11 11       	cpse	r17, r1
     134:	11 7e       	andi	r17, 0xE1	; 225
     136:	7f 49       	sbci	r23, 0x9F	; 159
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	36 3e       	cpi	r19, 0xE6	; 230
     13c:	41 41       	sbci	r20, 0x11	; 17
     13e:	41 22       	and	r4, r17
     140:	7f 41       	sbci	r23, 0x1F	; 31
     142:	41 22       	and	r4, r17
     144:	1c 7f       	andi	r17, 0xFC	; 252
     146:	49 49       	sbci	r20, 0x99	; 153
     148:	49 41       	sbci	r20, 0x19	; 25
     14a:	7f 09       	sbc	r23, r15
     14c:	09 09       	sbc	r16, r9
     14e:	01 3e       	cpi	r16, 0xE1	; 225
     150:	41 49       	sbci	r20, 0x91	; 145
     152:	49 7a       	andi	r20, 0xA9	; 169
     154:	7f 08       	sbc	r7, r15
     156:	08 08       	sbc	r0, r8
     158:	7f 00       	.word	0x007f	; ????
     15a:	41 7f       	andi	r20, 0xF1	; 241
     15c:	41 00       	.word	0x0041	; ????
     15e:	20 40       	sbci	r18, 0x00	; 0
     160:	41 3f       	cpi	r20, 0xF1	; 241
     162:	01 7f       	andi	r16, 0xF1	; 241
     164:	08 14       	cp	r0, r8
     166:	22 41       	sbci	r18, 0x12	; 18
     168:	7f 40       	sbci	r23, 0x0F	; 15
     16a:	40 40       	sbci	r20, 0x00	; 0
     16c:	40 7f       	andi	r20, 0xF0	; 240
     16e:	02 0c       	add	r0, r2
     170:	02 7f       	andi	r16, 0xF2	; 242
     172:	7f 04       	cpc	r7, r15
     174:	08 10       	cpse	r0, r8
     176:	7f 3e       	cpi	r23, 0xEF	; 239
     178:	41 41       	sbci	r20, 0x11	; 17
     17a:	41 3e       	cpi	r20, 0xE1	; 225
     17c:	7f 09       	sbc	r23, r15
     17e:	09 09       	sbc	r16, r9
     180:	06 3e       	cpi	r16, 0xE6	; 230
     182:	41 51       	subi	r20, 0x11	; 17
     184:	21 5e       	subi	r18, 0xE1	; 225
     186:	7f 09       	sbc	r23, r15
     188:	19 29       	or	r17, r9
     18a:	46 46       	sbci	r20, 0x66	; 102
     18c:	49 49       	sbci	r20, 0x99	; 153
     18e:	49 31       	cpi	r20, 0x19	; 25
     190:	01 01       	movw	r0, r2
     192:	7f 01       	movw	r14, r30
     194:	01 3f       	cpi	r16, 0xF1	; 241
     196:	40 40       	sbci	r20, 0x00	; 0
     198:	40 3f       	cpi	r20, 0xF0	; 240
     19a:	1f 20       	and	r1, r15
     19c:	40 20       	and	r4, r0
     19e:	1f 3f       	cpi	r17, 0xFF	; 255
     1a0:	40 38       	cpi	r20, 0x80	; 128
     1a2:	40 3f       	cpi	r20, 0xF0	; 240
     1a4:	63 14       	cp	r6, r3
     1a6:	08 14       	cp	r0, r8
     1a8:	63 07       	cpc	r22, r19
     1aa:	08 70       	andi	r16, 0x08	; 8
     1ac:	08 07       	cpc	r16, r24
     1ae:	61 51       	subi	r22, 0x11	; 17
     1b0:	49 45       	sbci	r20, 0x59	; 89
     1b2:	43 00       	.word	0x0043	; ????
     1b4:	7f 41       	sbci	r23, 0x1F	; 31
     1b6:	41 00       	.word	0x0041	; ????
     1b8:	02 04       	cpc	r0, r2
     1ba:	08 10       	cpse	r0, r8
     1bc:	20 00       	.word	0x0020	; ????
     1be:	41 41       	sbci	r20, 0x11	; 17
     1c0:	7f 00       	.word	0x007f	; ????
     1c2:	04 02       	muls	r16, r20
     1c4:	01 02       	muls	r16, r17
     1c6:	04 40       	sbci	r16, 0x04	; 4
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	40 40       	sbci	r20, 0x00	; 0
     1cc:	00 01       	movw	r0, r0
     1ce:	02 04       	cpc	r0, r2
     1d0:	00 20       	and	r0, r0
     1d2:	54 54       	subi	r21, 0x44	; 68
     1d4:	54 78       	andi	r21, 0x84	; 132
     1d6:	7f 48       	sbci	r23, 0x8F	; 143
     1d8:	44 44       	sbci	r20, 0x44	; 68
     1da:	38 38       	cpi	r19, 0x88	; 136
     1dc:	44 44       	sbci	r20, 0x44	; 68
     1de:	44 20       	and	r4, r4
     1e0:	38 44       	sbci	r19, 0x48	; 72
     1e2:	44 48       	sbci	r20, 0x84	; 132
     1e4:	7f 38       	cpi	r23, 0x8F	; 143
     1e6:	54 54       	subi	r21, 0x44	; 68
     1e8:	54 18       	sub	r5, r4
     1ea:	08 7e       	andi	r16, 0xE8	; 232
     1ec:	09 01       	movw	r0, r18
     1ee:	02 0c       	add	r0, r2
     1f0:	52 52       	subi	r21, 0x22	; 34
     1f2:	52 3e       	cpi	r21, 0xE2	; 226
     1f4:	7f 08       	sbc	r7, r15
     1f6:	04 04       	cpc	r0, r4
     1f8:	78 00       	.word	0x0078	; ????
     1fa:	44 7d       	andi	r20, 0xD4	; 212
     1fc:	40 00       	.word	0x0040	; ????
     1fe:	20 40       	sbci	r18, 0x00	; 0
     200:	44 3d       	cpi	r20, 0xD4	; 212
     202:	00 7f       	andi	r16, 0xF0	; 240
     204:	10 28       	or	r1, r0
     206:	44 00       	.word	0x0044	; ????
     208:	00 41       	sbci	r16, 0x10	; 16
     20a:	7f 40       	sbci	r23, 0x0F	; 15
     20c:	00 7c       	andi	r16, 0xC0	; 192
     20e:	04 18       	sub	r0, r4
     210:	04 78       	andi	r16, 0x84	; 132
     212:	7c 08       	sbc	r7, r12
     214:	04 04       	cpc	r0, r4
     216:	78 38       	cpi	r23, 0x88	; 136
     218:	44 44       	sbci	r20, 0x44	; 68
     21a:	44 38       	cpi	r20, 0x84	; 132
     21c:	7c 14       	cp	r7, r12
     21e:	14 14       	cp	r1, r4
     220:	08 08       	sbc	r0, r8
     222:	14 14       	cp	r1, r4
     224:	18 7c       	andi	r17, 0xC8	; 200
     226:	7c 08       	sbc	r7, r12
     228:	04 04       	cpc	r0, r4
     22a:	08 48       	sbci	r16, 0x88	; 136
     22c:	54 54       	subi	r21, 0x44	; 68
     22e:	54 20       	and	r5, r4
     230:	04 3f       	cpi	r16, 0xF4	; 244
     232:	44 40       	sbci	r20, 0x04	; 4
     234:	20 3c       	cpi	r18, 0xC0	; 192
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	20 7c       	andi	r18, 0xC0	; 192
     23a:	1c 20       	and	r1, r12
     23c:	40 20       	and	r4, r0
     23e:	1c 3c       	cpi	r17, 0xCC	; 204
     240:	40 30       	cpi	r20, 0x00	; 0
     242:	40 3c       	cpi	r20, 0xC0	; 192
     244:	44 28       	or	r4, r4
     246:	10 28       	or	r1, r0
     248:	44 0c       	add	r4, r4
     24a:	50 50       	subi	r21, 0x00	; 0
     24c:	50 3c       	cpi	r21, 0xC0	; 192
     24e:	44 64       	ori	r20, 0x44	; 68
     250:	54 4c       	sbci	r21, 0xC4	; 196
     252:	44 00       	.word	0x0044	; ????
     254:	08 36       	cpi	r16, 0x68	; 104
     256:	41 00       	.word	0x0041	; ????
     258:	00 00       	nop
     25a:	7f 00       	.word	0x007f	; ????
     25c:	00 00       	nop
     25e:	41 36       	cpi	r20, 0x61	; 97
     260:	08 00       	.word	0x0008	; ????
     262:	10 08       	sbc	r1, r0
     264:	08 10       	cpse	r0, r8
     266:	08 78       	andi	r16, 0x88	; 136
     268:	46 41       	sbci	r20, 0x16	; 22
     26a:	46 78       	andi	r20, 0x86	; 134

0000026c <__ctors_end>:
     26c:	11 24       	eor	r1, r1
     26e:	1f be       	out	0x3f, r1	; 63
     270:	cf ef       	ldi	r28, 0xFF	; 255
     272:	d0 e1       	ldi	r29, 0x10	; 16
     274:	de bf       	out	0x3e, r29	; 62
     276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
     278:	16 e0       	ldi	r17, 0x06	; 6
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b1 e0       	ldi	r27, 0x01	; 1
     27e:	e6 ef       	ldi	r30, 0xF6	; 246
     280:	f9 e2       	ldi	r31, 0x29	; 41
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	0b bf       	out	0x3b, r16	; 59
     286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
     288:	07 90       	elpm	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	a8 3b       	cpi	r26, 0xB8	; 184
     28e:	b1 07       	cpc	r27, r17
     290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
     292:	27 e0       	ldi	r18, 0x07	; 7
     294:	a8 eb       	ldi	r26, 0xB8	; 184
     296:	b6 e0       	ldi	r27, 0x06	; 6
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	a1 34       	cpi	r26, 0x41	; 65
     29e:	b2 07       	cpc	r27, r18
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
     2a2:	0e 94 89 0c 	call	0x1912	; 0x1912 <main>
     2a6:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <_exit>

000002aa <__bad_interrupt>:
     2aa:	aa ce       	rjmp	.-684    	; 0x0 <__vectors>

000002ac <get_ch_data>:
    {0x10, 0x08, 0x08, 0x10, 0x08}, // 7e ~
    {0x78, 0x46, 0x41, 0x46, 0x78}, // 7f 
};

void get_ch_data(char ch, uint8_t *buffer)
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	28 97       	sbiw	r28, 0x08	; 8
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	8e 83       	std	Y+6, r24	; 0x06
     2c2:	78 87       	std	Y+8, r23	; 0x08
     2c4:	6f 83       	std	Y+7, r22	; 0x07
    int     i;

    for (i=0; i<5; i++)
     2c6:	1a 82       	std	Y+2, r1	; 0x02
     2c8:	19 82       	std	Y+1, r1	; 0x01
     2ca:	29 c0       	rjmp	.+82     	; 0x31e <get_ch_data+0x72>
    {
        *buffer++ = pgm_read_byte(&ASCII[ch - ' '][i]);
     2cc:	2f 81       	ldd	r18, Y+7	; 0x07
     2ce:	38 85       	ldd	r19, Y+8	; 0x08
     2d0:	c9 01       	movw	r24, r18
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	98 87       	std	Y+8, r25	; 0x08
     2d6:	8f 83       	std	Y+7, r24	; 0x07
     2d8:	8e 81       	ldd	r24, Y+6	; 0x06
     2da:	08 2e       	mov	r0, r24
     2dc:	00 0c       	add	r0, r0
     2de:	99 0b       	sbc	r25, r25
     2e0:	ac 01       	movw	r20, r24
     2e2:	40 52       	subi	r20, 0x20	; 32
     2e4:	51 09       	sbc	r21, r1
     2e6:	ca 01       	movw	r24, r20
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	84 0f       	add	r24, r20
     2f2:	95 1f       	adc	r25, r21
     2f4:	49 81       	ldd	r20, Y+1	; 0x01
     2f6:	5a 81       	ldd	r21, Y+2	; 0x02
     2f8:	84 0f       	add	r24, r20
     2fa:	95 1f       	adc	r25, r21
     2fc:	84 57       	subi	r24, 0x74	; 116
     2fe:	9f 4f       	sbci	r25, 0xFF	; 255
     300:	9c 83       	std	Y+4, r25	; 0x04
     302:	8b 83       	std	Y+3, r24	; 0x03
     304:	8b 81       	ldd	r24, Y+3	; 0x03
     306:	9c 81       	ldd	r25, Y+4	; 0x04
     308:	fc 01       	movw	r30, r24
     30a:	84 91       	lpm	r24, Z
     30c:	8d 83       	std	Y+5, r24	; 0x05
     30e:	8d 81       	ldd	r24, Y+5	; 0x05
     310:	f9 01       	movw	r30, r18
     312:	80 83       	st	Z, r24

void get_ch_data(char ch, uint8_t *buffer)
{
    int     i;

    for (i=0; i<5; i++)
     314:	89 81       	ldd	r24, Y+1	; 0x01
     316:	9a 81       	ldd	r25, Y+2	; 0x02
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	9a 83       	std	Y+2, r25	; 0x02
     31c:	89 83       	std	Y+1, r24	; 0x01
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	9a 81       	ldd	r25, Y+2	; 0x02
     322:	05 97       	sbiw	r24, 0x05	; 5
     324:	9c f2       	brlt	.-90     	; 0x2cc <get_ch_data+0x20>
    {
        *buffer++ = pgm_read_byte(&ASCII[ch - ' '][i]);
    }
    *buffer = 0;
     326:	8f 81       	ldd	r24, Y+7	; 0x07
     328:	98 85       	ldd	r25, Y+8	; 0x08
     32a:	fc 01       	movw	r30, r24
     32c:	10 82       	st	Z, r1
}
     32e:	00 00       	nop
     330:	28 96       	adiw	r28, 0x08	; 8
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	de bf       	out	0x3e, r29	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	cd bf       	out	0x3d, r28	; 61
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <twiStart>:
        return -1;

    twi_stop();

    return 0;
}
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	80 e7       	ldi	r24, 0x70	; 112
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	24 ea       	ldi	r18, 0xA4	; 164
     350:	fc 01       	movw	r30, r24
     352:	24 83       	std	Z+4, r18	; 0x04
     354:	00 00       	nop
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <twiStop>:
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	80 e7       	ldi	r24, 0x70	; 112
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	24 e9       	ldi	r18, 0x94	; 148
     36a:	fc 01       	movw	r30, r24
     36c:	24 83       	std	Z+4, r18	; 0x04
     36e:	00 00       	nop
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	08 95       	ret

00000376 <twiWaitAck>:
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	00 00       	nop
     380:	80 e7       	ldi	r24, 0x70	; 112
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	fc 01       	movw	r30, r24
     386:	84 81       	ldd	r24, Z+4	; 0x04
     388:	88 23       	and	r24, r24
     38a:	d4 f7       	brge	.-12     	; 0x380 <twiWaitAck+0xa>
     38c:	00 00       	nop
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <twiChkAck>:
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	80 e7       	ldi	r24, 0x70	; 112
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	fc 01       	movw	r30, r24
     3a2:	81 81       	ldd	r24, Z+1	; 0x01
     3a4:	88 7f       	andi	r24, 0xF8	; 248
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret

000003ac <twiSendByte>:
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	1f 92       	push	r1
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	80 e7       	ldi	r24, 0x70	; 112
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	29 81       	ldd	r18, Y+1	; 0x01
     3be:	fc 01       	movw	r30, r24
     3c0:	23 83       	std	Z+3, r18	; 0x03
     3c2:	80 e7       	ldi	r24, 0x70	; 112
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	24 e8       	ldi	r18, 0x84	; 132
     3c8:	fc 01       	movw	r30, r24
     3ca:	24 83       	std	Z+4, r18	; 0x04
     3cc:	00 00       	nop
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <twi_start>:
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	b1 df       	rcall	.-158    	; 0x342 <twiStart>
     3e0:	ca df       	rcall	.-108    	; 0x376 <twiWaitAck>
     3e2:	d8 df       	rcall	.-80     	; 0x394 <twiChkAck>
     3e4:	88 30       	cpi	r24, 0x08	; 8
     3e6:	19 f0       	breq	.+6      	; 0x3ee <twi_start+0x18>
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
     3ea:	9f ef       	ldi	r25, 0xFF	; 255
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <twi_start+0x1c>
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <twi_stop>:
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	ad df       	rcall	.-166    	; 0x35c <twiStop>
     402:	00 00       	nop
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <twi_send_dev_addr>:
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	00 d0       	rcall	.+0      	; 0x410 <twi_send_dev_addr+0x6>
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	8a 83       	std	Y+2, r24	; 0x02
     416:	8a 81       	ldd	r24, Y+2	; 0x02
     418:	88 2f       	mov	r24, r24
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	81 70       	andi	r24, 0x01	; 1
     41e:	99 27       	eor	r25, r25
     420:	89 2b       	or	r24, r25
     422:	11 f0       	breq	.+4      	; 0x428 <twi_send_dev_addr+0x1e>
     424:	80 e4       	ldi	r24, 0x40	; 64
     426:	01 c0       	rjmp	.+2      	; 0x42a <twi_send_dev_addr+0x20>
     428:	88 e1       	ldi	r24, 0x18	; 24
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	8a 81       	ldd	r24, Y+2	; 0x02
     42e:	be df       	rcall	.-132    	; 0x3ac <twiSendByte>
     430:	a2 df       	rcall	.-188    	; 0x376 <twiWaitAck>
     432:	b0 df       	rcall	.-160    	; 0x394 <twiChkAck>
     434:	98 2f       	mov	r25, r24
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	98 17       	cp	r25, r24
     43a:	19 f0       	breq	.+6      	; 0x442 <twi_send_dev_addr+0x38>
     43c:	8f ef       	ldi	r24, 0xFF	; 255
     43e:	9f ef       	ldi	r25, 0xFF	; 255
     440:	02 c0       	rjmp	.+4      	; 0x446 <twi_send_dev_addr+0x3c>
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <twi_send_data>:
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	1f 92       	push	r1
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	a6 df       	rcall	.-180    	; 0x3ac <twiSendByte>
     460:	8a df       	rcall	.-236    	; 0x376 <twiWaitAck>
     462:	98 df       	rcall	.-208    	; 0x394 <twiChkAck>
     464:	88 32       	cpi	r24, 0x28	; 40
     466:	19 f0       	breq	.+6      	; 0x46e <twi_send_data+0x1e>
     468:	8f ef       	ldi	r24, 0xFF	; 255
     46a:	9f ef       	ldi	r25, 0xFF	; 255
     46c:	02 c0       	rjmp	.+4      	; 0x472 <twi_send_data+0x22>
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0f 90       	pop	r0
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <twi_write>:
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	28 97       	sbiw	r28, 0x08	; 8
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	8b 83       	std	Y+3, r24	; 0x03
     490:	6c 83       	std	Y+4, r22	; 0x04
     492:	5e 83       	std	Y+6, r21	; 0x06
     494:	4d 83       	std	Y+5, r20	; 0x05
     496:	38 87       	std	Y+8, r19	; 0x08
     498:	2f 83       	std	Y+7, r18	; 0x07
     49a:	9d df       	rcall	.-198    	; 0x3d6 <twi_start>
     49c:	89 2b       	or	r24, r25
     49e:	19 f0       	breq	.+6      	; 0x4a6 <twi_write+0x2c>
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	9f ef       	ldi	r25, 0xFF	; 255
     4a4:	30 c0       	rjmp	.+96     	; 0x506 <twi_write+0x8c>
     4a6:	8b 81       	ldd	r24, Y+3	; 0x03
     4a8:	88 0f       	add	r24, r24
     4aa:	af df       	rcall	.-162    	; 0x40a <twi_send_dev_addr>
     4ac:	89 2b       	or	r24, r25
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <twi_write+0x3c>
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	9f ef       	ldi	r25, 0xFF	; 255
     4b4:	28 c0       	rjmp	.+80     	; 0x506 <twi_write+0x8c>
     4b6:	8c 81       	ldd	r24, Y+4	; 0x04
     4b8:	cb df       	rcall	.-106    	; 0x450 <twi_send_data>
     4ba:	89 2b       	or	r24, r25
     4bc:	19 f0       	breq	.+6      	; 0x4c4 <twi_write+0x4a>
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	9f ef       	ldi	r25, 0xFF	; 255
     4c2:	21 c0       	rjmp	.+66     	; 0x506 <twi_write+0x8c>
     4c4:	1a 82       	std	Y+2, r1	; 0x02
     4c6:	19 82       	std	Y+1, r1	; 0x01
     4c8:	14 c0       	rjmp	.+40     	; 0x4f2 <twi_write+0x78>
     4ca:	8d 81       	ldd	r24, Y+5	; 0x05
     4cc:	9e 81       	ldd	r25, Y+6	; 0x06
     4ce:	9c 01       	movw	r18, r24
     4d0:	2f 5f       	subi	r18, 0xFF	; 255
     4d2:	3f 4f       	sbci	r19, 0xFF	; 255
     4d4:	3e 83       	std	Y+6, r19	; 0x06
     4d6:	2d 83       	std	Y+5, r18	; 0x05
     4d8:	fc 01       	movw	r30, r24
     4da:	80 81       	ld	r24, Z
     4dc:	b9 df       	rcall	.-142    	; 0x450 <twi_send_data>
     4de:	89 2b       	or	r24, r25
     4e0:	19 f0       	breq	.+6      	; 0x4e8 <twi_write+0x6e>
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	9f ef       	ldi	r25, 0xFF	; 255
     4e6:	0f c0       	rjmp	.+30     	; 0x506 <twi_write+0x8c>
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	9a 81       	ldd	r25, Y+2	; 0x02
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	9a 83       	std	Y+2, r25	; 0x02
     4f0:	89 83       	std	Y+1, r24	; 0x01
     4f2:	29 81       	ldd	r18, Y+1	; 0x01
     4f4:	3a 81       	ldd	r19, Y+2	; 0x02
     4f6:	8f 81       	ldd	r24, Y+7	; 0x07
     4f8:	98 85       	ldd	r25, Y+8	; 0x08
     4fa:	28 17       	cp	r18, r24
     4fc:	39 07       	cpc	r19, r25
     4fe:	2c f3       	brlt	.-54     	; 0x4ca <twi_write+0x50>
     500:	7b df       	rcall	.-266    	; 0x3f8 <twi_stop>
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	28 96       	adiw	r28, 0x08	; 8
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	cd bf       	out	0x3d, r28	; 61
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <twi_init>:

void twi_init(void)
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
    twi->twbr = 5;
     520:	80 e7       	ldi	r24, 0x70	; 112
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	25 e0       	ldi	r18, 0x05	; 5
     526:	fc 01       	movw	r30, r24
     528:	20 83       	st	Z, r18
    twi->twsr = 0;
     52a:	80 e7       	ldi	r24, 0x70	; 112
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	fc 01       	movw	r30, r24
     530:	11 82       	std	Z+1, r1	; 0x01
}
     532:	00 00       	nop
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <UART_Init>:
static void ssd1306_output_scan_direction2(bool enable)
{
	uint8_t cmd = 0xc0 | enable;

	ssd1306_cmd(&cmd, 1);
}
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
     542:	8a e2       	ldi	r24, 0x2A	; 42
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	28 e1       	ldi	r18, 0x18	; 24
     548:	fc 01       	movw	r30, r24
     54a:	20 83       	st	Z, r18
     54c:	85 e9       	ldi	r24, 0x95	; 149
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	26 e0       	ldi	r18, 0x06	; 6
     552:	fc 01       	movw	r30, r24
     554:	20 83       	st	Z, r18
     556:	89 e2       	ldi	r24, 0x29	; 41
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	27 e6       	ldi	r18, 0x67	; 103
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
     560:	00 00       	nop
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <UART0_Putch>:
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	1f 92       	push	r1
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	89 83       	std	Y+1, r24	; 0x01
     574:	00 00       	nop
     576:	8b e2       	ldi	r24, 0x2B	; 43
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	fc 01       	movw	r30, r24
     57c:	80 81       	ld	r24, Z
     57e:	88 2f       	mov	r24, r24
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	80 72       	andi	r24, 0x20	; 32
     584:	99 27       	eor	r25, r25
     586:	89 2b       	or	r24, r25
     588:	b1 f3       	breq	.-20     	; 0x576 <UART0_Putch+0xe>
     58a:	8c e2       	ldi	r24, 0x2C	; 44
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	29 81       	ldd	r18, Y+1	; 0x01
     590:	fc 01       	movw	r30, r24
     592:	20 83       	st	Z, r18
     594:	00 00       	nop
     596:	0f 90       	pop	r0
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <SendCommand>:
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	67 97       	sbiw	r28, 0x17	; 23
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	8f 8b       	std	Y+23, r24	; 0x17
     5b4:	1a 82       	std	Y+2, r1	; 0x02
     5b6:	19 82       	std	Y+1, r1	; 0x01
     5b8:	8e e7       	ldi	r24, 0x7E	; 126
     5ba:	d6 df       	rcall	.-84     	; 0x568 <UART0_Putch>
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	d4 df       	rcall	.-88     	; 0x568 <UART0_Putch>
     5c0:	86 e0       	ldi	r24, 0x06	; 6
     5c2:	d2 df       	rcall	.-92     	; 0x568 <UART0_Putch>
     5c4:	8f 89       	ldd	r24, Y+23	; 0x17
     5c6:	d0 df       	rcall	.-96     	; 0x568 <UART0_Putch>
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	ce df       	rcall	.-100    	; 0x568 <UART0_Putch>
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	cc df       	rcall	.-104    	; 0x568 <UART0_Putch>
     5d0:	8f 89       	ldd	r24, Y+23	; 0x17
     5d2:	89 30       	cpi	r24, 0x09	; 9
     5d4:	71 f0       	breq	.+28     	; 0x5f2 <SendCommand+0x54>
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	c7 df       	rcall	.-114    	; 0x568 <UART0_Putch>
     5da:	8f 89       	ldd	r24, Y+23	; 0x17
     5dc:	88 2f       	mov	r24, r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	2b ef       	ldi	r18, 0xFB	; 251
     5e2:	3e ef       	ldi	r19, 0xFE	; 254
     5e4:	a9 01       	movw	r20, r18
     5e6:	48 1b       	sub	r20, r24
     5e8:	59 0b       	sbc	r21, r25
     5ea:	ca 01       	movw	r24, r20
     5ec:	9a 83       	std	Y+2, r25	; 0x02
     5ee:	89 83       	std	Y+1, r24	; 0x01
     5f0:	0d c0       	rjmp	.+26     	; 0x60c <SendCommand+0x6e>
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	b9 df       	rcall	.-142    	; 0x568 <UART0_Putch>
     5f6:	8f 89       	ldd	r24, Y+23	; 0x17
     5f8:	88 2f       	mov	r24, r24
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	29 ef       	ldi	r18, 0xF9	; 249
     5fe:	3e ef       	ldi	r19, 0xFE	; 254
     600:	a9 01       	movw	r20, r18
     602:	48 1b       	sub	r20, r24
     604:	59 0b       	sbc	r21, r25
     606:	ca 01       	movw	r24, r20
     608:	9a 83       	std	Y+2, r25	; 0x02
     60a:	89 83       	std	Y+1, r24	; 0x01
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	9a 81       	ldd	r25, Y+2	; 0x02
     610:	89 2f       	mov	r24, r25
     612:	99 27       	eor	r25, r25
     614:	a9 df       	rcall	.-174    	; 0x568 <UART0_Putch>
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	a7 df       	rcall	.-178    	; 0x568 <UART0_Putch>
     61a:	8f ee       	ldi	r24, 0xEF	; 239
     61c:	a5 df       	rcall	.-182    	; 0x568 <UART0_Putch>
     61e:	00 00       	nop
     620:	67 96       	adiw	r28, 0x17	; 23
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <SendCommand01>:
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	69 97       	sbiw	r28, 0x19	; 25
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	8f 8b       	std	Y+23, r24	; 0x17
     648:	68 8f       	std	Y+24, r22	; 0x18
     64a:	49 8f       	std	Y+25, r20	; 0x19
     64c:	1a 82       	std	Y+2, r1	; 0x02
     64e:	19 82       	std	Y+1, r1	; 0x01
     650:	8e e7       	ldi	r24, 0x7E	; 126
     652:	8a df       	rcall	.-236    	; 0x568 <UART0_Putch>
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	88 df       	rcall	.-240    	; 0x568 <UART0_Putch>
     658:	86 e0       	ldi	r24, 0x06	; 6
     65a:	86 df       	rcall	.-244    	; 0x568 <UART0_Putch>
     65c:	8f 89       	ldd	r24, Y+23	; 0x17
     65e:	84 df       	rcall	.-248    	; 0x568 <UART0_Putch>
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	82 df       	rcall	.-252    	; 0x568 <UART0_Putch>
     664:	88 8d       	ldd	r24, Y+24	; 0x18
     666:	80 df       	rcall	.-256    	; 0x568 <UART0_Putch>
     668:	89 8d       	ldd	r24, Y+25	; 0x19
     66a:	7e df       	rcall	.-260    	; 0x568 <UART0_Putch>
     66c:	8f 89       	ldd	r24, Y+23	; 0x17
     66e:	88 2f       	mov	r24, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	9c 01       	movw	r18, r24
     674:	2b 5f       	subi	r18, 0xFB	; 251
     676:	3e 4f       	sbci	r19, 0xFE	; 254
     678:	88 8d       	ldd	r24, Y+24	; 0x18
     67a:	88 2f       	mov	r24, r24
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	28 0f       	add	r18, r24
     680:	39 1f       	adc	r19, r25
     682:	89 8d       	ldd	r24, Y+25	; 0x19
     684:	88 2f       	mov	r24, r24
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	82 0f       	add	r24, r18
     68a:	93 1f       	adc	r25, r19
     68c:	91 95       	neg	r25
     68e:	81 95       	neg	r24
     690:	91 09       	sbc	r25, r1
     692:	9a 83       	std	Y+2, r25	; 0x02
     694:	89 83       	std	Y+1, r24	; 0x01
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	9a 81       	ldd	r25, Y+2	; 0x02
     69a:	89 2f       	mov	r24, r25
     69c:	99 27       	eor	r25, r25
     69e:	64 df       	rcall	.-312    	; 0x568 <UART0_Putch>
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	62 df       	rcall	.-316    	; 0x568 <UART0_Putch>
     6a4:	8f ee       	ldi	r24, 0xEF	; 239
     6a6:	60 df       	rcall	.-320    	; 0x568 <UART0_Putch>
     6a8:	00 00       	nop
     6aa:	69 96       	adiw	r28, 0x19	; 25
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	f8 94       	cli
     6b0:	de bf       	out	0x3e, r29	; 62
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	cd bf       	out	0x3d, r28	; 61
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <ssd1306_cmd>:
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <ssd1306_cmd+0x6>
     6c2:	1f 92       	push	r1
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	9a 83       	std	Y+2, r25	; 0x02
     6ca:	89 83       	std	Y+1, r24	; 0x01
     6cc:	6b 83       	std	Y+3, r22	; 0x03
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	28 2f       	mov	r18, r24
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	9a 81       	ldd	r25, Y+2	; 0x02
     6d8:	ac 01       	movw	r20, r24
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	8c e3       	ldi	r24, 0x3C	; 60
     6de:	cd de       	rcall	.-614    	; 0x47a <twi_write>
     6e0:	00 00       	nop
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <ssd1306_data>:
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	00 d0       	rcall	.+0      	; 0x6f4 <ssd1306_data+0x6>
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <ssd1306_data+0x8>
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	9a 83       	std	Y+2, r25	; 0x02
     6fc:	89 83       	std	Y+1, r24	; 0x01
     6fe:	7c 83       	std	Y+4, r23	; 0x04
     700:	6b 83       	std	Y+3, r22	; 0x03
     702:	2b 81       	ldd	r18, Y+3	; 0x03
     704:	3c 81       	ldd	r19, Y+4	; 0x04
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	9a 81       	ldd	r25, Y+2	; 0x02
     70a:	ac 01       	movw	r20, r24
     70c:	60 e4       	ldi	r22, 0x40	; 64
     70e:	8c e3       	ldi	r24, 0x3C	; 60
     710:	b4 de       	rcall	.-664    	; 0x47a <twi_write>
     712:	00 00       	nop
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <ssd1306_reset>:
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	00 00       	nop
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <ssd1306_chargepump_enable>:
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	00 d0       	rcall	.+0      	; 0x738 <ssd1306_chargepump_enable+0x6>
     738:	00 d0       	rcall	.+0      	; 0x73a <ssd1306_chargepump_enable+0x8>
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	8b 83       	std	Y+3, r24	; 0x03
     742:	8d e8       	ldi	r24, 0x8D	; 141
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	9c 81       	ldd	r25, Y+4	; 0x04
     74a:	89 2b       	or	r24, r25
     74c:	11 f0       	breq	.+4      	; 0x752 <ssd1306_chargepump_enable+0x20>
     74e:	84 e1       	ldi	r24, 0x14	; 20
     750:	01 c0       	rjmp	.+2      	; 0x754 <ssd1306_chargepump_enable+0x22>
     752:	80 e1       	ldi	r24, 0x10	; 16
     754:	8a 83       	std	Y+2, r24	; 0x02
     756:	62 e0       	ldi	r22, 0x02	; 2
     758:	ce 01       	movw	r24, r28
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	af df       	rcall	.-162    	; 0x6bc <ssd1306_cmd>
     75e:	00 00       	nop
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <ssd1306_entire_on>:
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	00 d0       	rcall	.+0      	; 0x774 <ssd1306_entire_on+0x6>
     774:	1f 92       	push	r1
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	9b 83       	std	Y+3, r25	; 0x03
     77c:	8a 83       	std	Y+2, r24	; 0x02
     77e:	8a 81       	ldd	r24, Y+2	; 0x02
     780:	84 6a       	ori	r24, 0xA4	; 164
     782:	89 83       	std	Y+1, r24	; 0x01
     784:	61 e0       	ldi	r22, 0x01	; 1
     786:	ce 01       	movw	r24, r28
     788:	01 96       	adiw	r24, 0x01	; 1
     78a:	98 df       	rcall	.-208    	; 0x6bc <ssd1306_cmd>
     78c:	00 00       	nop
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <ssd1306_display_on>:
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <ssd1306_display_on+0x6>
     7a0:	1f 92       	push	r1
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	9b 83       	std	Y+3, r25	; 0x03
     7a8:	8a 83       	std	Y+2, r24	; 0x02
     7aa:	8a 81       	ldd	r24, Y+2	; 0x02
     7ac:	8e 6a       	ori	r24, 0xAE	; 174
     7ae:	89 83       	std	Y+1, r24	; 0x01
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	82 df       	rcall	.-252    	; 0x6bc <ssd1306_cmd>
     7b8:	00 00       	nop
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	08 95       	ret

000007c6 <ssd1306_set_addr_mode>:
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <ssd1306_set_addr_mode+0x6>
     7cc:	1f 92       	push	r1
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	8b 83       	std	Y+3, r24	; 0x03
     7d4:	80 e2       	ldi	r24, 0x20	; 32
     7d6:	89 83       	std	Y+1, r24	; 0x01
     7d8:	8b 81       	ldd	r24, Y+3	; 0x03
     7da:	8a 83       	std	Y+2, r24	; 0x02
     7dc:	62 e0       	ldi	r22, 0x02	; 2
     7de:	ce 01       	movw	r24, r28
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	6c df       	rcall	.-296    	; 0x6bc <ssd1306_cmd>
     7e4:	00 00       	nop
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <ssd1306_set_page_start>:
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <ssd1306_set_page_start+0x6>
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	8a 83       	std	Y+2, r24	; 0x02
     7fe:	8a 81       	ldd	r24, Y+2	; 0x02
     800:	80 6b       	ori	r24, 0xB0	; 176
     802:	89 83       	std	Y+1, r24	; 0x01
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	ce 01       	movw	r24, r28
     808:	01 96       	adiw	r24, 0x01	; 1
     80a:	58 df       	rcall	.-336    	; 0x6bc <ssd1306_cmd>
     80c:	00 00       	nop
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <ssd1306_set_column_addr>:
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	00 d0       	rcall	.+0      	; 0x81e <ssd1306_set_column_addr+0x6>
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
     822:	8a 83       	std	Y+2, r24	; 0x02
     824:	8a 81       	ldd	r24, Y+2	; 0x02
     826:	8f 70       	andi	r24, 0x0F	; 15
     828:	89 83       	std	Y+1, r24	; 0x01
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	ce 01       	movw	r24, r28
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	45 df       	rcall	.-374    	; 0x6bc <ssd1306_cmd>
     832:	8a 81       	ldd	r24, Y+2	; 0x02
     834:	82 95       	swap	r24
     836:	8f 70       	andi	r24, 0x0F	; 15
     838:	80 61       	ori	r24, 0x10	; 16
     83a:	89 83       	std	Y+1, r24	; 0x01
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	3c df       	rcall	.-392    	; 0x6bc <ssd1306_cmd>
     844:	00 00       	nop
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <ssd1306_reverse>:
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <ssd1306_reverse+0x6>
     856:	1f 92       	push	r1
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	9b 83       	std	Y+3, r25	; 0x03
     85e:	8a 83       	std	Y+2, r24	; 0x02
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	80 6a       	ori	r24, 0xA0	; 160
     864:	89 83       	std	Y+1, r24	; 0x01
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	ce 01       	movw	r24, r28
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	27 df       	rcall	.-434    	; 0x6bc <ssd1306_cmd>
     86e:	00 00       	nop
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <ssd1306_normal_display>:
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	00 d0       	rcall	.+0      	; 0x882 <ssd1306_normal_display+0x6>
     882:	1f 92       	push	r1
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	9b 83       	std	Y+3, r25	; 0x03
     88a:	8a 83       	std	Y+2, r24	; 0x02
     88c:	8a 81       	ldd	r24, Y+2	; 0x02
     88e:	86 6a       	ori	r24, 0xA6	; 166
     890:	89 83       	std	Y+1, r24	; 0x01
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	ce 01       	movw	r24, r28
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	11 df       	rcall	.-478    	; 0x6bc <ssd1306_cmd>
     89a:	00 00       	nop
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <ssd1306_output_scan_direction>:
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <ssd1306_output_scan_direction+0x6>
     8ae:	1f 92       	push	r1
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	9b 83       	std	Y+3, r25	; 0x03
     8b6:	8a 83       	std	Y+2, r24	; 0x02
     8b8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ba:	88 6c       	ori	r24, 0xC8	; 200
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	61 e0       	ldi	r22, 0x01	; 1
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	fb de       	rcall	.-522    	; 0x6bc <ssd1306_cmd>
     8c6:	00 00       	nop
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <ssd1306_init>:


void ssd1306_init(void)
{
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	2e 97       	sbiw	r28, 0x0e	; 14
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	a0 e8       	ldi	r26, 0x80	; 128
     8ee:	bf e3       	ldi	r27, 0x3F	; 63
     8f0:	89 83       	std	Y+1, r24	; 0x01
     8f2:	9a 83       	std	Y+2, r25	; 0x02
     8f4:	ab 83       	std	Y+3, r26	; 0x03
     8f6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	4a e7       	ldi	r20, 0x7A	; 122
     8fe:	55 e4       	ldi	r21, 0x45	; 69
     900:	69 81       	ldd	r22, Y+1	; 0x01
     902:	7a 81       	ldd	r23, Y+2	; 0x02
     904:	8b 81       	ldd	r24, Y+3	; 0x03
     906:	9c 81       	ldd	r25, Y+4	; 0x04
     908:	0e 94 c0 10 	call	0x2180	; 0x2180 <__mulsf3>
     90c:	dc 01       	movw	r26, r24
     90e:	cb 01       	movw	r24, r22
     910:	8d 83       	std	Y+5, r24	; 0x05
     912:	9e 83       	std	Y+6, r25	; 0x06
     914:	af 83       	std	Y+7, r26	; 0x07
     916:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	40 e8       	ldi	r20, 0x80	; 128
     91e:	5f e3       	ldi	r21, 0x3F	; 63
     920:	6d 81       	ldd	r22, Y+5	; 0x05
     922:	7e 81       	ldd	r23, Y+6	; 0x06
     924:	8f 81       	ldd	r24, Y+7	; 0x07
     926:	98 85       	ldd	r25, Y+8	; 0x08
     928:	0e 94 3f 10 	call	0x207e	; 0x207e <__cmpsf2>
     92c:	88 23       	and	r24, r24
     92e:	2c f4       	brge	.+10     	; 0x93a <ssd1306_init+0x66>
		__ticks = 1;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	9a 87       	std	Y+10, r25	; 0x0a
     936:	89 87       	std	Y+9, r24	; 0x09
     938:	3f c0       	rjmp	.+126    	; 0x9b8 <ssd1306_init+0xe4>
	else if (__tmp > 65535)
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	3f ef       	ldi	r19, 0xFF	; 255
     93e:	4f e7       	ldi	r20, 0x7F	; 127
     940:	57 e4       	ldi	r21, 0x47	; 71
     942:	6d 81       	ldd	r22, Y+5	; 0x05
     944:	7e 81       	ldd	r23, Y+6	; 0x06
     946:	8f 81       	ldd	r24, Y+7	; 0x07
     948:	98 85       	ldd	r25, Y+8	; 0x08
     94a:	0e 94 bc 10 	call	0x2178	; 0x2178 <__gesf2>
     94e:	18 16       	cp	r1, r24
     950:	4c f5       	brge	.+82     	; 0x9a4 <ssd1306_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e2       	ldi	r20, 0x20	; 32
     958:	51 e4       	ldi	r21, 0x41	; 65
     95a:	69 81       	ldd	r22, Y+1	; 0x01
     95c:	7a 81       	ldd	r23, Y+2	; 0x02
     95e:	8b 81       	ldd	r24, Y+3	; 0x03
     960:	9c 81       	ldd	r25, Y+4	; 0x04
     962:	0e 94 c0 10 	call	0x2180	; 0x2180 <__mulsf3>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	bc 01       	movw	r22, r24
     96c:	cd 01       	movw	r24, r26
     96e:	0e 94 43 10 	call	0x2086	; 0x2086 <__fixunssfsi>
     972:	dc 01       	movw	r26, r24
     974:	cb 01       	movw	r24, r22
     976:	9a 87       	std	Y+10, r25	; 0x0a
     978:	89 87       	std	Y+9, r24	; 0x09
     97a:	0f c0       	rjmp	.+30     	; 0x99a <ssd1306_init+0xc6>
     97c:	80 e9       	ldi	r24, 0x90	; 144
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	9c 87       	std	Y+12, r25	; 0x0c
     982:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     984:	8b 85       	ldd	r24, Y+11	; 0x0b
     986:	9c 85       	ldd	r25, Y+12	; 0x0c
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	f1 f7       	brne	.-4      	; 0x988 <ssd1306_init+0xb4>
     98c:	9c 87       	std	Y+12, r25	; 0x0c
     98e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     990:	89 85       	ldd	r24, Y+9	; 0x09
     992:	9a 85       	ldd	r25, Y+10	; 0x0a
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	9a 87       	std	Y+10, r25	; 0x0a
     998:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     99a:	89 85       	ldd	r24, Y+9	; 0x09
     99c:	9a 85       	ldd	r25, Y+10	; 0x0a
     99e:	89 2b       	or	r24, r25
     9a0:	69 f7       	brne	.-38     	; 0x97c <ssd1306_init+0xa8>
     9a2:	14 c0       	rjmp	.+40     	; 0x9cc <ssd1306_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9a4:	6d 81       	ldd	r22, Y+5	; 0x05
     9a6:	7e 81       	ldd	r23, Y+6	; 0x06
     9a8:	8f 81       	ldd	r24, Y+7	; 0x07
     9aa:	98 85       	ldd	r25, Y+8	; 0x08
     9ac:	0e 94 43 10 	call	0x2086	; 0x2086 <__fixunssfsi>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	9a 87       	std	Y+10, r25	; 0x0a
     9b6:	89 87       	std	Y+9, r24	; 0x09
     9b8:	89 85       	ldd	r24, Y+9	; 0x09
     9ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     9bc:	9e 87       	std	Y+14, r25	; 0x0e
     9be:	8d 87       	std	Y+13, r24	; 0x0d
     9c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     9c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <ssd1306_init+0xf0>
     9c8:	9e 87       	std	Y+14, r25	; 0x0e
     9ca:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);

	ssd1306_reset();
     9cc:	aa de       	rcall	.-684    	; 0x722 <ssd1306_reset>

	ssd1306_chargepump_enable(true);
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	af de       	rcall	.-674    	; 0x732 <ssd1306_chargepump_enable>
	ssd1306_entire_on(false);
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	ca de       	rcall	.-620    	; 0x76e <ssd1306_entire_on>
	ssd1306_display_on(true);
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	dd de       	rcall	.-582    	; 0x79a <ssd1306_display_on>
     9e0:	00 00       	nop
}
     9e2:	2e 96       	adiw	r28, 0x0e	; 14
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <clear_screen>:
     9f4:	cf 93       	push	r28
static uint8_t gddram[COL_NUM];



void clear_screen(void)
{
     9f6:	df 93       	push	r29
     9f8:	00 d0       	rcall	.+0      	; 0x9fa <clear_screen+0x6>
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
     9fe:	1a 82       	std	Y+2, r1	; 0x02
     a00:	0a c0       	rjmp	.+20     	; 0xa16 <clear_screen+0x22>
	gddram[col] = 0;
     a02:	8a 81       	ldd	r24, Y+2	; 0x02
     a04:	88 2f       	mov	r24, r24
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	88 54       	subi	r24, 0x48	; 72
     a0a:	99 4f       	sbci	r25, 0xF9	; 249
     a0c:	fc 01       	movw	r30, r24
     a0e:	10 82       	st	Z, r1
void clear_screen(void)
{
	uint8_t page;
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
     a10:	8a 81       	ldd	r24, Y+2	; 0x02
     a12:	8f 5f       	subi	r24, 0xFF	; 255
     a14:	8a 83       	std	Y+2, r24	; 0x02
     a16:	8a 81       	ldd	r24, Y+2	; 0x02
     a18:	88 23       	and	r24, r24
     a1a:	9c f7       	brge	.-26     	; 0xa02 <clear_screen+0xe>
	gddram[col] = 0;

	for (page=0; page<PAGE_NUM; page++)
     a1c:	19 82       	std	Y+1, r1	; 0x01
     a1e:	0a c0       	rjmp	.+20     	; 0xa34 <clear_screen+0x40>
	{
		ssd1306_set_page_start(page);
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	e7 de       	rcall	.-562    	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_data(gddram, COL_NUM);
     a24:	60 e8       	ldi	r22, 0x80	; 128
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	88 eb       	ldi	r24, 0xB8	; 184
     a2a:	96 e0       	ldi	r25, 0x06	; 6
     a2c:	60 de       	rcall	.-832    	; 0x6ee <ssd1306_data>
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
	gddram[col] = 0;

	for (page=0; page<PAGE_NUM; page++)
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	8f 5f       	subi	r24, 0xFF	; 255
     a32:	89 83       	std	Y+1, r24	; 0x01
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	88 30       	cpi	r24, 0x08	; 8
	{
		ssd1306_set_page_start(page);
		ssd1306_data(gddram, COL_NUM);
	}

	ssd1306_set_column_addr(0);
     a38:	98 f3       	brcs	.-26     	; 0xa20 <clear_screen+0x2c>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	ed de       	rcall	.-550    	; 0x818 <ssd1306_set_column_addr>
}
     a3e:	00 00       	nop
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <oled_msg>:



extern void get_ch_data(char ch, uint8_t *buffer);
int oled_msg(int row, int col, const char *fmt, ...)
{
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	6c 97       	sbiw	r28, 0x1c	; 28
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
	va_list     ap;
	char        buf[MAX_CH_PER_LINE + 1];
	int         rc, i;

	va_start(ap, fmt);
     a5e:	ce 01       	movw	r24, r28
     a60:	87 96       	adiw	r24, 0x27	; 39
     a62:	9e 83       	std	Y+6, r25	; 0x06
     a64:	8d 83       	std	Y+5, r24	; 0x05
	rc = vsprintf(buf, fmt, ap);
     a66:	4d 81       	ldd	r20, Y+5	; 0x05
     a68:	5e 81       	ldd	r21, Y+6	; 0x06
     a6a:	2d a1       	ldd	r18, Y+37	; 0x25
     a6c:	3e a1       	ldd	r19, Y+38	; 0x26
     a6e:	ce 01       	movw	r24, r28
     a70:	07 96       	adiw	r24, 0x07	; 7
     a72:	b9 01       	movw	r22, r18
     a74:	0e 94 c7 11 	call	0x238e	; 0x238e <vsprintf>
     a78:	9c 83       	std	Y+4, r25	; 0x04
     a7a:	8b 83       	std	Y+3, r24	; 0x03
	va_end(ap);

	if (rc > 0)
     a7c:	8b 81       	ldd	r24, Y+3	; 0x03
     a7e:	9c 81       	ldd	r25, Y+4	; 0x04
     a80:	18 16       	cp	r1, r24
     a82:	19 06       	cpc	r1, r25
     a84:	0c f0       	brlt	.+2      	; 0xa88 <oled_msg+0x3e>
     a86:	3b c0       	rjmp	.+118    	; 0xafe <oled_msg+0xb4>
	{
		for (i=0; i<rc; i++)
     a88:	1a 82       	std	Y+2, r1	; 0x02
     a8a:	19 82       	std	Y+1, r1	; 0x01
     a8c:	1c c0       	rjmp	.+56     	; 0xac6 <oled_msg+0x7c>
		get_ch_data(buf[i], &gddram[i * CHAR_WIDTH]);
     a8e:	29 81       	ldd	r18, Y+1	; 0x01
     a90:	3a 81       	ldd	r19, Y+2	; 0x02
     a92:	c9 01       	movw	r24, r18
     a94:	88 0f       	add	r24, r24
     a96:	99 1f       	adc	r25, r25
     a98:	82 0f       	add	r24, r18
     a9a:	93 1f       	adc	r25, r19
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	ac 01       	movw	r20, r24
     aa2:	48 54       	subi	r20, 0x48	; 72
     aa4:	59 4f       	sbci	r21, 0xF9	; 249
     aa6:	9e 01       	movw	r18, r28
     aa8:	29 5f       	subi	r18, 0xF9	; 249
     aaa:	3f 4f       	sbci	r19, 0xFF	; 255
     aac:	89 81       	ldd	r24, Y+1	; 0x01
     aae:	9a 81       	ldd	r25, Y+2	; 0x02
     ab0:	82 0f       	add	r24, r18
     ab2:	93 1f       	adc	r25, r19
     ab4:	fc 01       	movw	r30, r24
     ab6:	80 81       	ld	r24, Z
     ab8:	ba 01       	movw	r22, r20
     aba:	f8 db       	rcall	.-2064   	; 0x2ac <get_ch_data>
	rc = vsprintf(buf, fmt, ap);
	va_end(ap);

	if (rc > 0)
	{
		for (i=0; i<rc; i++)
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	9a 81       	ldd	r25, Y+2	; 0x02
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	9a 83       	std	Y+2, r25	; 0x02
     ac4:	89 83       	std	Y+1, r24	; 0x01
     ac6:	29 81       	ldd	r18, Y+1	; 0x01
     ac8:	3a 81       	ldd	r19, Y+2	; 0x02
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	9c 81       	ldd	r25, Y+4	; 0x04
     ace:	28 17       	cp	r18, r24
     ad0:	39 07       	cpc	r19, r25
     ad2:	ec f2       	brlt	.-70     	; 0xa8e <oled_msg+0x44>
		get_ch_data(buf[i], &gddram[i * CHAR_WIDTH]);

		ssd1306_set_page_start(row);
     ad4:	89 a1       	ldd	r24, Y+33	; 0x21
     ad6:	8d de       	rcall	.-742    	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_set_column_addr(col * CHAR_WIDTH);
     ad8:	9b a1       	ldd	r25, Y+35	; 0x23
     ada:	89 2f       	mov	r24, r25
     adc:	88 0f       	add	r24, r24
     ade:	89 0f       	add	r24, r25
     ae0:	88 0f       	add	r24, r24
     ae2:	9a de       	rcall	.-716    	; 0x818 <ssd1306_set_column_addr>
		ssd1306_data(gddram, rc * CHAR_WIDTH);
     ae4:	2b 81       	ldd	r18, Y+3	; 0x03
     ae6:	3c 81       	ldd	r19, Y+4	; 0x04
     ae8:	c9 01       	movw	r24, r18
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	82 0f       	add	r24, r18
     af0:	93 1f       	adc	r25, r19
     af2:	88 0f       	add	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	bc 01       	movw	r22, r24
     af8:	88 eb       	ldi	r24, 0xB8	; 184
     afa:	96 e0       	ldi	r25, 0x06	; 6
     afc:	f8 dd       	rcall	.-1040   	; 0x6ee <ssd1306_data>
	}

	return rc;
     afe:	8b 81       	ldd	r24, Y+3	; 0x03
     b00:	9c 81       	ldd	r25, Y+4	; 0x04
}
     b02:	6c 96       	adiw	r28, 0x1c	; 28
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <draw_picture>:




void draw_picture(char array[])
{
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	00 d0       	rcall	.+0      	; 0xb1a <draw_picture+0x6>
     b1a:	1f 92       	push	r1
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	9b 83       	std	Y+3, r25	; 0x03
     b22:	8a 83       	std	Y+2, r24	; 0x02
	//clear_screen();
	unsigned char x,y;
	for(y=0;y<8;y++)
     b24:	19 82       	std	Y+1, r1	; 0x01
     b26:	15 c0       	rjmp	.+42     	; 0xb52 <draw_picture+0x3e>
	{
		ssd1306_set_page_start(y);
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	63 de       	rcall	.-826    	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_data(array+(y*COL_NUM), COL_NUM);
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	88 2f       	mov	r24, r24
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	96 95       	lsr	r25
     b34:	98 2f       	mov	r25, r24
     b36:	88 27       	eor	r24, r24
     b38:	97 95       	ror	r25
     b3a:	87 95       	ror	r24
     b3c:	9c 01       	movw	r18, r24
     b3e:	8a 81       	ldd	r24, Y+2	; 0x02
     b40:	9b 81       	ldd	r25, Y+3	; 0x03
     b42:	82 0f       	add	r24, r18
     b44:	93 1f       	adc	r25, r19
     b46:	60 e8       	ldi	r22, 0x80	; 128
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	d1 dd       	rcall	.-1118   	; 0x6ee <ssd1306_data>

void draw_picture(char array[])
{
	//clear_screen();
	unsigned char x,y;
	for(y=0;y<8;y++)
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	8f 5f       	subi	r24, 0xFF	; 255
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	88 30       	cpi	r24, 0x08	; 8
     b56:	40 f3       	brcs	.-48     	; 0xb28 <draw_picture+0x14>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(array+(y*COL_NUM), COL_NUM);
	}
}
     b58:	00 00       	nop
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <setup>:

void setup(void)
{
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
	twi_init();
     b6e:	d4 dc       	rcall	.-1624   	; 0x518 <twi_init>

	ssd1306_init();
     b70:	b1 de       	rcall	.-670    	; 0x8d4 <ssd1306_init>
	ssd1306_set_addr_mode(PAGE);
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	28 de       	rcall	.-944    	; 0x7c6 <ssd1306_set_addr_mode>
	

	clear_screen();
     b76:	3e df       	rcall	.-388    	; 0x9f4 <clear_screen>
	
	ssd1306_output_scan_direction(0);		//위아래 역전
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	95 de       	rcall	.-726    	; 0x8a8 <ssd1306_output_scan_direction>
	ssd1306_reverse(1);		//왼쪽 오른쪽 역전
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	66 de       	rcall	.-820    	; 0x850 <ssd1306_reverse>
	ssd1306_normal_display(0);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	79 de       	rcall	.-782    	; 0x87c <ssd1306_normal_display>
     b8a:	00 00       	nop

}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <__vector_6>:
     b92:	1f 92       	push	r1
void game_over();
void food();
void clear_map();

ISR(INT5_vect)
{
     b94:	0f 92       	push	r0
     b96:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b9a:	0f 92       	push	r0
     b9c:	11 24       	eor	r1, r1
     b9e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     ba2:	0f 92       	push	r0
     ba4:	2f 93       	push	r18
     ba6:	3f 93       	push	r19
     ba8:	4f 93       	push	r20
     baa:	5f 93       	push	r21
     bac:	6f 93       	push	r22
     bae:	7f 93       	push	r23
     bb0:	8f 93       	push	r24
     bb2:	9f 93       	push	r25
     bb4:	af 93       	push	r26
     bb6:	bf 93       	push	r27
     bb8:	ef 93       	push	r30
     bba:	ff 93       	push	r31
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
	game = 1;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     bcc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if((dir==LEFT) || (dir==RIGHT)|| (dir==UP))
     bd0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     bd4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     bd8:	8b 34       	cpi	r24, 0x4B	; 75
     bda:	91 05       	cpc	r25, r1
     bdc:	71 f0       	breq	.+28     	; 0xbfa <__vector_6+0x68>
     bde:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     be2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     be6:	8d 34       	cpi	r24, 0x4D	; 77
     be8:	91 05       	cpc	r25, r1
     bea:	39 f0       	breq	.+14     	; 0xbfa <__vector_6+0x68>
     bec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     bf0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     bf4:	88 34       	cpi	r24, 0x48	; 72
     bf6:	91 05       	cpc	r25, r1
     bf8:	51 f4       	brne	.+20     	; 0xc0e <__vector_6+0x7c>
	{
		SendCommand01(0x0F, 0x01, 0x03);
     bfa:	43 e0       	ldi	r20, 0x03	; 3
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	8f e0       	ldi	r24, 0x0F	; 15
     c00:	18 dd       	rcall	.-1488   	; 0x632 <SendCommand01>
		
		dir = UP;
     c02:	88 e4       	ldi	r24, 0x48	; 72
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     c0a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     c0e:	00 00       	nop
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	7f 91       	pop	r23
     c22:	6f 91       	pop	r22
     c24:	5f 91       	pop	r21
     c26:	4f 91       	pop	r20
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	0f 90       	pop	r0
     c2e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     c32:	0f 90       	pop	r0
     c34:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c38:	0f 90       	pop	r0
     c3a:	1f 90       	pop	r1
     c3c:	18 95       	reti

00000c3e <__vector_7>:

ISR(INT6_vect)
{
     c3e:	1f 92       	push	r1
     c40:	0f 92       	push	r0
     c42:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c46:	0f 92       	push	r0
     c48:	11 24       	eor	r1, r1
     c4a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     c4e:	0f 92       	push	r0
     c50:	2f 93       	push	r18
     c52:	3f 93       	push	r19
     c54:	4f 93       	push	r20
     c56:	5f 93       	push	r21
     c58:	6f 93       	push	r22
     c5a:	7f 93       	push	r23
     c5c:	8f 93       	push	r24
     c5e:	9f 93       	push	r25
     c60:	af 93       	push	r26
     c62:	bf 93       	push	r27
     c64:	ef 93       	push	r30
     c66:	ff 93       	push	r31
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
	game = 1;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     c78:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if((dir==LEFT) || (dir==RIGHT)|| (dir==DOWN))
     c7c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     c80:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     c84:	8b 34       	cpi	r24, 0x4B	; 75
     c86:	91 05       	cpc	r25, r1
     c88:	71 f0       	breq	.+28     	; 0xca6 <__vector_7+0x68>
     c8a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     c8e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     c92:	8d 34       	cpi	r24, 0x4D	; 77
     c94:	91 05       	cpc	r25, r1
     c96:	39 f0       	breq	.+14     	; 0xca6 <__vector_7+0x68>
     c98:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     c9c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     ca0:	80 35       	cpi	r24, 0x50	; 80
     ca2:	91 05       	cpc	r25, r1
     ca4:	51 f4       	brne	.+20     	; 0xcba <__vector_7+0x7c>
	{
		SendCommand01(0x0F, 0x01, 0x03);
     ca6:	43 e0       	ldi	r20, 0x03	; 3
     ca8:	61 e0       	ldi	r22, 0x01	; 1
     caa:	8f e0       	ldi	r24, 0x0F	; 15
     cac:	c2 dc       	rcall	.-1660   	; 0x632 <SendCommand01>
		
		dir = DOWN;
     cae:	80 e5       	ldi	r24, 0x50	; 80
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     cb6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     cba:	00 00       	nop
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     cde:	0f 90       	pop	r0
     ce0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ce4:	0f 90       	pop	r0
     ce6:	1f 90       	pop	r1
     ce8:	18 95       	reti

00000cea <__vector_8>:

ISR(INT7_vect)
{	
     cea:	1f 92       	push	r1
     cec:	0f 92       	push	r0
     cee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cf2:	0f 92       	push	r0
     cf4:	11 24       	eor	r1, r1
     cf6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     cfa:	0f 92       	push	r0
     cfc:	2f 93       	push	r18
     cfe:	3f 93       	push	r19
     d00:	4f 93       	push	r20
     d02:	5f 93       	push	r21
     d04:	6f 93       	push	r22
     d06:	7f 93       	push	r23
     d08:	8f 93       	push	r24
     d0a:	9f 93       	push	r25
     d0c:	af 93       	push	r26
     d0e:	bf 93       	push	r27
     d10:	ef 93       	push	r30
     d12:	ff 93       	push	r31
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
	game = 1;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     d24:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if((dir==DOWN) || (dir==LEFT)|| (dir==UP))
     d28:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     d2c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     d30:	80 35       	cpi	r24, 0x50	; 80
     d32:	91 05       	cpc	r25, r1
     d34:	71 f0       	breq	.+28     	; 0xd52 <__vector_8+0x68>
     d36:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     d3a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     d3e:	8b 34       	cpi	r24, 0x4B	; 75
     d40:	91 05       	cpc	r25, r1
     d42:	39 f0       	breq	.+14     	; 0xd52 <__vector_8+0x68>
     d44:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     d48:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     d4c:	88 34       	cpi	r24, 0x48	; 72
     d4e:	91 05       	cpc	r25, r1
     d50:	51 f4       	brne	.+20     	; 0xd66 <__vector_8+0x7c>
	{
		SendCommand01(0x0F, 0x01, 0x03);
     d52:	43 e0       	ldi	r20, 0x03	; 3
     d54:	61 e0       	ldi	r22, 0x01	; 1
     d56:	8f e0       	ldi	r24, 0x0F	; 15
     d58:	6c dc       	rcall	.-1832   	; 0x632 <SendCommand01>
		
		dir = LEFT;
     d5a:	8b e4       	ldi	r24, 0x4B	; 75
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     d62:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     d66:	00 00       	nop
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	ff 91       	pop	r31
     d6e:	ef 91       	pop	r30
     d70:	bf 91       	pop	r27
     d72:	af 91       	pop	r26
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	7f 91       	pop	r23
     d7a:	6f 91       	pop	r22
     d7c:	5f 91       	pop	r21
     d7e:	4f 91       	pop	r20
     d80:	3f 91       	pop	r19
     d82:	2f 91       	pop	r18
     d84:	0f 90       	pop	r0
     d86:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     d8a:	0f 90       	pop	r0
     d8c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d90:	0f 90       	pop	r0
     d92:	1f 90       	pop	r1
     d94:	18 95       	reti

00000d96 <__vector_5>:

ISR(INT4_vect)
{
     d96:	1f 92       	push	r1
     d98:	0f 92       	push	r0
     d9a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d9e:	0f 92       	push	r0
     da0:	11 24       	eor	r1, r1
     da2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     da6:	0f 92       	push	r0
     da8:	2f 93       	push	r18
     daa:	3f 93       	push	r19
     dac:	4f 93       	push	r20
     dae:	5f 93       	push	r21
     db0:	6f 93       	push	r22
     db2:	7f 93       	push	r23
     db4:	8f 93       	push	r24
     db6:	9f 93       	push	r25
     db8:	af 93       	push	r26
     dba:	bf 93       	push	r27
     dbc:	ef 93       	push	r30
     dbe:	ff 93       	push	r31
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
	game = 1;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     dd0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if((dir==DOWN) || (dir==RIGHT)|| (dir==UP))
     dd4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     dd8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     ddc:	80 35       	cpi	r24, 0x50	; 80
     dde:	91 05       	cpc	r25, r1
     de0:	71 f0       	breq	.+28     	; 0xdfe <__vector_5+0x68>
     de2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     de6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     dea:	8d 34       	cpi	r24, 0x4D	; 77
     dec:	91 05       	cpc	r25, r1
     dee:	39 f0       	breq	.+14     	; 0xdfe <__vector_5+0x68>
     df0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     df4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     df8:	88 34       	cpi	r24, 0x48	; 72
     dfa:	91 05       	cpc	r25, r1
     dfc:	51 f4       	brne	.+20     	; 0xe12 <__vector_5+0x7c>
	{
		SendCommand01(0x0F, 0x01, 0x03);
     dfe:	43 e0       	ldi	r20, 0x03	; 3
     e00:	61 e0       	ldi	r22, 0x01	; 1
     e02:	8f e0       	ldi	r24, 0x0F	; 15
     e04:	16 dc       	rcall	.-2004   	; 0x632 <SendCommand01>
		
		dir = RIGHT;
     e06:	8d e4       	ldi	r24, 0x4D	; 77
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     e0e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     e12:	00 00       	nop
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     e36:	0f 90       	pop	r0
     e38:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e3c:	0f 90       	pop	r0
     e3e:	1f 90       	pop	r1
     e40:	18 95       	reti

00000e42 <__vector_4>:

ISR(INT3_vect)
{
     e42:	1f 92       	push	r1
     e44:	0f 92       	push	r0
     e46:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
	game = 1;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     e62:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
}
     e66:	00 00       	nop
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	9f 91       	pop	r25
     e6e:	8f 91       	pop	r24
     e70:	0f 90       	pop	r0
     e72:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e76:	0f 90       	pop	r0
     e78:	1f 90       	pop	r1
     e7a:	18 95       	reti

00000e7c <title>:


void title()
{
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	00 d0       	rcall	.+0      	; 0xe82 <title+0x6>
     e82:	00 d0       	rcall	.+0      	; 0xe84 <title+0x8>
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
	oled_msg(0, 3, "KMM's SNAKE GAME");
     e88:	8d e9       	ldi	r24, 0x9D	; 157
     e8a:	92 e0       	ldi	r25, 0x02	; 2
     e8c:	89 2f       	mov	r24, r25
     e8e:	8f 93       	push	r24
     e90:	8d e9       	ldi	r24, 0x9D	; 157
     e92:	92 e0       	ldi	r25, 0x02	; 2
     e94:	8f 93       	push	r24
     e96:	1f 92       	push	r1
     e98:	83 e0       	ldi	r24, 0x03	; 3
     e9a:	8f 93       	push	r24
     e9c:	1f 92       	push	r1
     e9e:	1f 92       	push	r1
     ea0:	d4 dd       	rcall	.-1112   	; 0xa4a <oled_msg>
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
	for(int i = 0; i < 128; i++)
     eae:	1a 82       	std	Y+2, r1	; 0x02
     eb0:	19 82       	std	Y+1, r1	; 0x01
     eb2:	17 c0       	rjmp	.+46     	; 0xee2 <title+0x66>
	{
		ssd1306_set_page_start(2);
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	9d dc       	rcall	.-1734   	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	ae dc       	rcall	.-1700   	; 0x818 <ssd1306_set_column_addr>
     ebc:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(horizon1, 1);
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	8a e0       	ldi	r24, 0x0A	; 10
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	14 dc       	rcall	.-2008   	; 0x6ee <ssd1306_data>
		ssd1306_set_page_start(7);
     ec6:	87 e0       	ldi	r24, 0x07	; 7
     ec8:	94 dc       	rcall	.-1752   	; 0x7f2 <ssd1306_set_page_start>
     eca:	89 81       	ldd	r24, Y+1	; 0x01
		ssd1306_set_column_addr(i);
     ecc:	a5 dc       	rcall	.-1718   	; 0x818 <ssd1306_set_column_addr>
     ece:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(horizon2, 1);
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	8b e0       	ldi	r24, 0x0B	; 11
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	0b dc       	rcall	.-2026   	; 0x6ee <ssd1306_data>
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02


void title()
{
	oled_msg(0, 3, "KMM's SNAKE GAME");
	for(int i = 0; i < 128; i++)
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	9a 83       	std	Y+2, r25	; 0x02
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	80 38       	cpi	r24, 0x80	; 128
     ee8:	91 05       	cpc	r25, r1
     eea:	24 f3       	brlt	.-56     	; 0xeb4 <title+0x38>
     eec:	1c 82       	std	Y+4, r1	; 0x04
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
     eee:	1b 82       	std	Y+3, r1	; 0x03
     ef0:	15 c0       	rjmp	.+42     	; 0xf1c <title+0xa0>
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
	{
		ssd1306_set_page_start(i);
     ef4:	7e dc       	rcall	.-1796   	; 0x7f2 <ssd1306_set_page_start>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
		ssd1306_set_column_addr(0);
     ef8:	8f dc       	rcall	.-1762   	; 0x818 <ssd1306_set_column_addr>
     efa:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(vertical, 1);
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	8c e0       	ldi	r24, 0x0C	; 12
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	f5 db       	rcall	.-2070   	; 0x6ee <ssd1306_data>
     f04:	8f e7       	ldi	r24, 0x7F	; 127
		ssd1306_set_column_addr(127);
     f06:	88 dc       	rcall	.-1776   	; 0x818 <ssd1306_set_column_addr>
     f08:	61 e0       	ldi	r22, 0x01	; 1
     f0a:	70 e0       	ldi	r23, 0x00	; 0
		ssd1306_data(vertical, 1);
     f0c:	8c e0       	ldi	r24, 0x0C	; 12
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	ee db       	rcall	.-2084   	; 0x6ee <ssd1306_data>
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	9c 83       	std	Y+4, r25	; 0x04
     f1a:	8b 83       	std	Y+3, r24	; 0x03
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	9c 81       	ldd	r25, Y+4	; 0x04
     f20:	08 97       	sbiw	r24, 0x08	; 8
     f22:	3c f3       	brlt	.-50     	; 0xef2 <title+0x76>
     f24:	09 d0       	rcall	.+18     	; 0xf38 <draw_map>
		ssd1306_data(vertical, 1);
		ssd1306_set_column_addr(127);
		ssd1306_data(vertical, 1);
	}

	draw_map();
     f26:	2a d3       	rcall	.+1620   	; 0x157c <food>
     f28:	00 00       	nop
	
	food(); // food 생성
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0

}
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <draw_map>:
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	cd b7       	in	r28, 0x3d	; 61

void draw_map()
{
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	c7 50       	subi	r28, 0x07	; 7
     f42:	d3 40       	sbci	r29, 0x03	; 3
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
	unsigned char MAP [6][128] = {0};
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	33 e0       	ldi	r19, 0x03	; 3
     f52:	ce 01       	movw	r24, r28
     f54:	08 96       	adiw	r24, 0x08	; 8
     f56:	dc 01       	movw	r26, r24
     f58:	f9 01       	movw	r30, r18
     f5a:	1d 92       	st	X+, r1
     f5c:	31 97       	sbiw	r30, 0x01	; 1
     f5e:	e9 f7       	brne	.-6      	; 0xf5a <draw_map+0x22>

	for(int i = 0; i < 6; i++)
     f60:	1a 82       	std	Y+2, r1	; 0x02
     f62:	19 82       	std	Y+1, r1	; 0x01
     f64:	7b c0       	rjmp	.+246    	; 0x105c <draw_map+0x124>
	{
		for(int j = 0; j < 128; j++)
     f66:	1c 82       	std	Y+4, r1	; 0x04
     f68:	1b 82       	std	Y+3, r1	; 0x03
     f6a:	6d c0       	rjmp	.+218    	; 0x1046 <draw_map+0x10e>
		{
			if(j == 0) MAP[i][j] = vertical[0];
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	9c 81       	ldd	r25, Y+4	; 0x04
     f70:	89 2b       	or	r24, r25
     f72:	b1 f4       	brne	.+44     	; 0xfa0 <draw_map+0x68>
     f74:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <vertical>
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	96 95       	lsr	r25
     f7e:	98 2f       	mov	r25, r24
     f80:	88 27       	eor	r24, r24
     f82:	97 95       	ror	r25
     f84:	87 95       	ror	r24
     f86:	9e 01       	movw	r18, r28
     f88:	2f 5f       	subi	r18, 0xFF	; 255
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	28 0f       	add	r18, r24
     f8e:	39 1f       	adc	r19, r25
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	82 0f       	add	r24, r18
     f96:	93 1f       	adc	r25, r19
     f98:	07 96       	adiw	r24, 0x07	; 7
     f9a:	dc 01       	movw	r26, r24
     f9c:	4c 93       	st	X, r20
     f9e:	4e c0       	rjmp	.+156    	; 0x103c <draw_map+0x104>
			else if(j == 127) MAP[i][j] = vertical[0];
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	8f 37       	cpi	r24, 0x7F	; 127
     fa6:	91 05       	cpc	r25, r1
     fa8:	b1 f4       	brne	.+44     	; 0xfd6 <draw_map+0x9e>
     faa:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <vertical>
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	96 95       	lsr	r25
     fb4:	98 2f       	mov	r25, r24
     fb6:	88 27       	eor	r24, r24
     fb8:	97 95       	ror	r25
     fba:	87 95       	ror	r24
     fbc:	9e 01       	movw	r18, r28
     fbe:	2f 5f       	subi	r18, 0xFF	; 255
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
     fc2:	28 0f       	add	r18, r24
     fc4:	39 1f       	adc	r19, r25
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	9c 81       	ldd	r25, Y+4	; 0x04
     fca:	82 0f       	add	r24, r18
     fcc:	93 1f       	adc	r25, r19
     fce:	07 96       	adiw	r24, 0x07	; 7
     fd0:	fc 01       	movw	r30, r24
     fd2:	40 83       	st	Z, r20
     fd4:	33 c0       	rjmp	.+102    	; 0x103c <draw_map+0x104>
			else if(i == 0) MAP[i][j] = horizon1[0];
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	89 2b       	or	r24, r25
     fdc:	b1 f4       	brne	.+44     	; 0x100a <draw_map+0xd2>
     fde:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <horizon1>
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	96 95       	lsr	r25
     fe8:	98 2f       	mov	r25, r24
     fea:	88 27       	eor	r24, r24
     fec:	97 95       	ror	r25
     fee:	87 95       	ror	r24
     ff0:	9e 01       	movw	r18, r28
     ff2:	2f 5f       	subi	r18, 0xFF	; 255
     ff4:	3f 4f       	sbci	r19, 0xFF	; 255
     ff6:	28 0f       	add	r18, r24
     ff8:	39 1f       	adc	r19, r25
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	9c 81       	ldd	r25, Y+4	; 0x04
     ffe:	82 0f       	add	r24, r18
    1000:	93 1f       	adc	r25, r19
    1002:	07 96       	adiw	r24, 0x07	; 7
    1004:	dc 01       	movw	r26, r24
    1006:	4c 93       	st	X, r20
    1008:	19 c0       	rjmp	.+50     	; 0x103c <draw_map+0x104>
			else if(i == 5) MAP[i][j] = horizon2[0];
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
    100e:	05 97       	sbiw	r24, 0x05	; 5
    1010:	a9 f4       	brne	.+42     	; 0x103c <draw_map+0x104>
    1012:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <horizon2>
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	96 95       	lsr	r25
    101c:	98 2f       	mov	r25, r24
    101e:	88 27       	eor	r24, r24
    1020:	97 95       	ror	r25
    1022:	87 95       	ror	r24
    1024:	9e 01       	movw	r18, r28
    1026:	2f 5f       	subi	r18, 0xFF	; 255
    1028:	3f 4f       	sbci	r19, 0xFF	; 255
    102a:	28 0f       	add	r18, r24
    102c:	39 1f       	adc	r19, r25
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	82 0f       	add	r24, r18
    1034:	93 1f       	adc	r25, r19
    1036:	07 96       	adiw	r24, 0x07	; 7
    1038:	fc 01       	movw	r30, r24
    103a:	40 83       	st	Z, r20
{
	unsigned char MAP [6][128] = {0};

	for(int i = 0; i < 6; i++)
	{
		for(int j = 0; j < 128; j++)
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	01 96       	adiw	r24, 0x01	; 1
    1042:	9c 83       	std	Y+4, r25	; 0x04
    1044:	8b 83       	std	Y+3, r24	; 0x03
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	80 38       	cpi	r24, 0x80	; 128
    104c:	91 05       	cpc	r25, r1
    104e:	0c f4       	brge	.+2      	; 0x1052 <draw_map+0x11a>
    1050:	8d cf       	rjmp	.-230    	; 0xf6c <draw_map+0x34>

void draw_map()
{
	unsigned char MAP [6][128] = {0};

	for(int i = 0; i < 6; i++)
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	9a 81       	ldd	r25, Y+2	; 0x02
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	9a 83       	std	Y+2, r25	; 0x02
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	06 97       	sbiw	r24, 0x06	; 6
    1062:	0c f4       	brge	.+2      	; 0x1066 <draw_map+0x12e>
    1064:	80 cf       	rjmp	.-256    	; 0xf66 <draw_map+0x2e>
			else if(i == 0) MAP[i][j] = horizon1[0];
			else if(i == 5) MAP[i][j] = horizon2[0];
		}
	}

	MAP[2*(food_y)/8][2*(food_x)] |= ((0x03 << (2*(food_y) % 8)));
    1066:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    106a:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	99 23       	and	r25, r25
    1074:	0c f4       	brge	.+2      	; 0x1078 <draw_map+0x140>
    1076:	07 96       	adiw	r24, 0x07	; 7
    1078:	95 95       	asr	r25
    107a:	87 95       	ror	r24
    107c:	95 95       	asr	r25
    107e:	87 95       	ror	r24
    1080:	95 95       	asr	r25
    1082:	87 95       	ror	r24
    1084:	9c 01       	movw	r18, r24
    1086:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    108a:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    108e:	ac 01       	movw	r20, r24
    1090:	44 0f       	add	r20, r20
    1092:	55 1f       	adc	r21, r21
    1094:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    1098:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	b9 01       	movw	r22, r18
    10a2:	76 95       	lsr	r23
    10a4:	76 2f       	mov	r23, r22
    10a6:	66 27       	eor	r22, r22
    10a8:	77 95       	ror	r23
    10aa:	67 95       	ror	r22
    10ac:	fe 01       	movw	r30, r28
    10ae:	31 96       	adiw	r30, 0x01	; 1
    10b0:	6e 0f       	add	r22, r30
    10b2:	7f 1f       	adc	r23, r31
    10b4:	86 0f       	add	r24, r22
    10b6:	97 1f       	adc	r25, r23
    10b8:	07 96       	adiw	r24, 0x07	; 7
    10ba:	dc 01       	movw	r26, r24
    10bc:	8c 91       	ld	r24, X
    10be:	e8 2f       	mov	r30, r24
    10c0:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    10c4:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	87 70       	andi	r24, 0x07	; 7
    10ce:	90 78       	andi	r25, 0x80	; 128
    10d0:	99 23       	and	r25, r25
    10d2:	24 f4       	brge	.+8      	; 0x10dc <draw_map+0x1a4>
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	88 6f       	ori	r24, 0xF8	; 248
    10d8:	9f 6f       	ori	r25, 0xFF	; 255
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	bc 01       	movw	r22, r24
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <draw_map+0x1b0>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	6a 95       	dec	r22
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <draw_map+0x1ac>
    10ec:	8e 2b       	or	r24, r30
    10ee:	68 2f       	mov	r22, r24
    10f0:	c9 01       	movw	r24, r18
    10f2:	96 95       	lsr	r25
    10f4:	98 2f       	mov	r25, r24
    10f6:	88 27       	eor	r24, r24
    10f8:	97 95       	ror	r25
    10fa:	87 95       	ror	r24
    10fc:	9e 01       	movw	r18, r28
    10fe:	2f 5f       	subi	r18, 0xFF	; 255
    1100:	3f 4f       	sbci	r19, 0xFF	; 255
    1102:	82 0f       	add	r24, r18
    1104:	93 1f       	adc	r25, r19
    1106:	84 0f       	add	r24, r20
    1108:	95 1f       	adc	r25, r21
    110a:	07 96       	adiw	r24, 0x07	; 7
    110c:	fc 01       	movw	r30, r24
    110e:	60 83       	st	Z, r22
	MAP[2*(food_y)/8][2*(food_x) + 1] |= ((0x03 << (2*(food_y) % 8)));
    1110:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    1114:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	99 23       	and	r25, r25
    111e:	0c f4       	brge	.+2      	; 0x1122 <__stack+0x23>
    1120:	07 96       	adiw	r24, 0x07	; 7
    1122:	95 95       	asr	r25
    1124:	87 95       	ror	r24
    1126:	95 95       	asr	r25
    1128:	87 95       	ror	r24
    112a:	95 95       	asr	r25
    112c:	87 95       	ror	r24
    112e:	9c 01       	movw	r18, r24
    1130:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    1134:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	ac 01       	movw	r20, r24
    113e:	4f 5f       	subi	r20, 0xFF	; 255
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    1146:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	b9 01       	movw	r22, r18
    1152:	76 95       	lsr	r23
    1154:	76 2f       	mov	r23, r22
    1156:	66 27       	eor	r22, r22
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	fe 01       	movw	r30, r28
    115e:	31 96       	adiw	r30, 0x01	; 1
    1160:	6e 0f       	add	r22, r30
    1162:	7f 1f       	adc	r23, r31
    1164:	86 0f       	add	r24, r22
    1166:	97 1f       	adc	r25, r23
    1168:	07 96       	adiw	r24, 0x07	; 7
    116a:	dc 01       	movw	r26, r24
    116c:	8c 91       	ld	r24, X
    116e:	e8 2f       	mov	r30, r24
    1170:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    1174:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	87 70       	andi	r24, 0x07	; 7
    117e:	90 78       	andi	r25, 0x80	; 128
    1180:	99 23       	and	r25, r25
    1182:	24 f4       	brge	.+8      	; 0x118c <__stack+0x8d>
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	88 6f       	ori	r24, 0xF8	; 248
    1188:	9f 6f       	ori	r25, 0xFF	; 255
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	bc 01       	movw	r22, r24
    118e:	83 e0       	ldi	r24, 0x03	; 3
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <__stack+0x99>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	6a 95       	dec	r22
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <__stack+0x95>
    119c:	8e 2b       	or	r24, r30
    119e:	68 2f       	mov	r22, r24
    11a0:	c9 01       	movw	r24, r18
    11a2:	96 95       	lsr	r25
    11a4:	98 2f       	mov	r25, r24
    11a6:	88 27       	eor	r24, r24
    11a8:	97 95       	ror	r25
    11aa:	87 95       	ror	r24
    11ac:	9e 01       	movw	r18, r28
    11ae:	2f 5f       	subi	r18, 0xFF	; 255
    11b0:	3f 4f       	sbci	r19, 0xFF	; 255
    11b2:	82 0f       	add	r24, r18
    11b4:	93 1f       	adc	r25, r19
    11b6:	84 0f       	add	r24, r20
    11b8:	95 1f       	adc	r25, r21
    11ba:	07 96       	adiw	r24, 0x07	; 7
    11bc:	fc 01       	movw	r30, r24
    11be:	60 83       	st	Z, r22


	for(int i=0;i<length;i++)	//뱀 몸통값 입력
    11c0:	1e 82       	std	Y+6, r1	; 0x06
    11c2:	1d 82       	std	Y+5, r1	; 0x05
    11c4:	c3 c0       	rjmp	.+390    	; 0x134c <__stack+0x24d>
	{
		MAP[2*(y[i])/8][2*(x[i])] |= ((0x03 << (2*(y[i]) % 8)));
    11c6:	8d 81       	ldd	r24, Y+5	; 0x05
    11c8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ca:	8b 52       	subi	r24, 0x2B	; 43
    11cc:	9e 4f       	sbci	r25, 0xFE	; 254
    11ce:	dc 01       	movw	r26, r24
    11d0:	8c 91       	ld	r24, X
    11d2:	88 2f       	mov	r24, r24
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	99 23       	and	r25, r25
    11dc:	0c f4       	brge	.+2      	; 0x11e0 <__stack+0xe1>
    11de:	07 96       	adiw	r24, 0x07	; 7
    11e0:	95 95       	asr	r25
    11e2:	87 95       	ror	r24
    11e4:	95 95       	asr	r25
    11e6:	87 95       	ror	r24
    11e8:	95 95       	asr	r25
    11ea:	87 95       	ror	r24
    11ec:	2d 81       	ldd	r18, Y+5	; 0x05
    11ee:	3e 81       	ldd	r19, Y+6	; 0x06
    11f0:	23 5f       	subi	r18, 0xF3	; 243
    11f2:	3e 4f       	sbci	r19, 0xFE	; 254
    11f4:	f9 01       	movw	r30, r18
    11f6:	20 81       	ld	r18, Z
    11f8:	22 2f       	mov	r18, r18
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	22 0f       	add	r18, r18
    11fe:	33 1f       	adc	r19, r19
    1200:	4d 81       	ldd	r20, Y+5	; 0x05
    1202:	5e 81       	ldd	r21, Y+6	; 0x06
    1204:	43 5f       	subi	r20, 0xF3	; 243
    1206:	5e 4f       	sbci	r21, 0xFE	; 254
    1208:	da 01       	movw	r26, r20
    120a:	4c 91       	ld	r20, X
    120c:	44 2f       	mov	r20, r20
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	44 0f       	add	r20, r20
    1212:	55 1f       	adc	r21, r21
    1214:	bc 01       	movw	r22, r24
    1216:	76 95       	lsr	r23
    1218:	76 2f       	mov	r23, r22
    121a:	66 27       	eor	r22, r22
    121c:	77 95       	ror	r23
    121e:	67 95       	ror	r22
    1220:	fe 01       	movw	r30, r28
    1222:	31 96       	adiw	r30, 0x01	; 1
    1224:	6e 0f       	add	r22, r30
    1226:	7f 1f       	adc	r23, r31
    1228:	46 0f       	add	r20, r22
    122a:	57 1f       	adc	r21, r23
    122c:	49 5f       	subi	r20, 0xF9	; 249
    122e:	5f 4f       	sbci	r21, 0xFF	; 255
    1230:	fa 01       	movw	r30, r20
    1232:	40 81       	ld	r20, Z
    1234:	e4 2f       	mov	r30, r20
    1236:	4d 81       	ldd	r20, Y+5	; 0x05
    1238:	5e 81       	ldd	r21, Y+6	; 0x06
    123a:	4b 52       	subi	r20, 0x2B	; 43
    123c:	5e 4f       	sbci	r21, 0xFE	; 254
    123e:	da 01       	movw	r26, r20
    1240:	4c 91       	ld	r20, X
    1242:	44 2f       	mov	r20, r20
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	44 0f       	add	r20, r20
    1248:	55 1f       	adc	r21, r21
    124a:	ba 01       	movw	r22, r20
    124c:	66 70       	andi	r22, 0x06	; 6
    124e:	77 27       	eor	r23, r23
    1250:	43 e0       	ldi	r20, 0x03	; 3
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	02 c0       	rjmp	.+4      	; 0x125a <__stack+0x15b>
    1256:	44 0f       	add	r20, r20
    1258:	55 1f       	adc	r21, r21
    125a:	6a 95       	dec	r22
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <__stack+0x157>
    125e:	4e 2b       	or	r20, r30
    1260:	64 2f       	mov	r22, r20
    1262:	96 95       	lsr	r25
    1264:	98 2f       	mov	r25, r24
    1266:	88 27       	eor	r24, r24
    1268:	97 95       	ror	r25
    126a:	87 95       	ror	r24
    126c:	ae 01       	movw	r20, r28
    126e:	4f 5f       	subi	r20, 0xFF	; 255
    1270:	5f 4f       	sbci	r21, 0xFF	; 255
    1272:	84 0f       	add	r24, r20
    1274:	95 1f       	adc	r25, r21
    1276:	82 0f       	add	r24, r18
    1278:	93 1f       	adc	r25, r19
    127a:	07 96       	adiw	r24, 0x07	; 7
    127c:	fc 01       	movw	r30, r24
    127e:	60 83       	st	Z, r22
		MAP[2*(y[i])/8][2*(x[i]) + 1] |= ((0x03 << (2*(y[i]) % 8)));
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	9e 81       	ldd	r25, Y+6	; 0x06
    1284:	8b 52       	subi	r24, 0x2B	; 43
    1286:	9e 4f       	sbci	r25, 0xFE	; 254
    1288:	dc 01       	movw	r26, r24
    128a:	8c 91       	ld	r24, X
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	99 23       	and	r25, r25
    1296:	0c f4       	brge	.+2      	; 0x129a <__stack+0x19b>
    1298:	07 96       	adiw	r24, 0x07	; 7
    129a:	95 95       	asr	r25
    129c:	87 95       	ror	r24
    129e:	95 95       	asr	r25
    12a0:	87 95       	ror	r24
    12a2:	95 95       	asr	r25
    12a4:	87 95       	ror	r24
    12a6:	2d 81       	ldd	r18, Y+5	; 0x05
    12a8:	3e 81       	ldd	r19, Y+6	; 0x06
    12aa:	23 5f       	subi	r18, 0xF3	; 243
    12ac:	3e 4f       	sbci	r19, 0xFE	; 254
    12ae:	f9 01       	movw	r30, r18
    12b0:	20 81       	ld	r18, Z
    12b2:	22 2f       	mov	r18, r18
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	22 0f       	add	r18, r18
    12b8:	33 1f       	adc	r19, r19
    12ba:	2f 5f       	subi	r18, 0xFF	; 255
    12bc:	3f 4f       	sbci	r19, 0xFF	; 255
    12be:	4d 81       	ldd	r20, Y+5	; 0x05
    12c0:	5e 81       	ldd	r21, Y+6	; 0x06
    12c2:	43 5f       	subi	r20, 0xF3	; 243
    12c4:	5e 4f       	sbci	r21, 0xFE	; 254
    12c6:	da 01       	movw	r26, r20
    12c8:	4c 91       	ld	r20, X
    12ca:	44 2f       	mov	r20, r20
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	44 0f       	add	r20, r20
    12d0:	55 1f       	adc	r21, r21
    12d2:	4f 5f       	subi	r20, 0xFF	; 255
    12d4:	5f 4f       	sbci	r21, 0xFF	; 255
    12d6:	bc 01       	movw	r22, r24
    12d8:	76 95       	lsr	r23
    12da:	76 2f       	mov	r23, r22
    12dc:	66 27       	eor	r22, r22
    12de:	77 95       	ror	r23
    12e0:	67 95       	ror	r22
    12e2:	fe 01       	movw	r30, r28
    12e4:	31 96       	adiw	r30, 0x01	; 1
    12e6:	6e 0f       	add	r22, r30
    12e8:	7f 1f       	adc	r23, r31
    12ea:	46 0f       	add	r20, r22
    12ec:	57 1f       	adc	r21, r23
    12ee:	49 5f       	subi	r20, 0xF9	; 249
    12f0:	5f 4f       	sbci	r21, 0xFF	; 255
    12f2:	fa 01       	movw	r30, r20
    12f4:	40 81       	ld	r20, Z
    12f6:	e4 2f       	mov	r30, r20
    12f8:	4d 81       	ldd	r20, Y+5	; 0x05
    12fa:	5e 81       	ldd	r21, Y+6	; 0x06
    12fc:	4b 52       	subi	r20, 0x2B	; 43
    12fe:	5e 4f       	sbci	r21, 0xFE	; 254
    1300:	da 01       	movw	r26, r20
    1302:	4c 91       	ld	r20, X
    1304:	44 2f       	mov	r20, r20
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	44 0f       	add	r20, r20
    130a:	55 1f       	adc	r21, r21
    130c:	ba 01       	movw	r22, r20
    130e:	66 70       	andi	r22, 0x06	; 6
    1310:	77 27       	eor	r23, r23
    1312:	43 e0       	ldi	r20, 0x03	; 3
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	02 c0       	rjmp	.+4      	; 0x131c <__stack+0x21d>
    1318:	44 0f       	add	r20, r20
    131a:	55 1f       	adc	r21, r21
    131c:	6a 95       	dec	r22
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <__stack+0x219>
    1320:	4e 2b       	or	r20, r30
    1322:	64 2f       	mov	r22, r20
    1324:	96 95       	lsr	r25
    1326:	98 2f       	mov	r25, r24
    1328:	88 27       	eor	r24, r24
    132a:	97 95       	ror	r25
    132c:	87 95       	ror	r24
    132e:	ae 01       	movw	r20, r28
    1330:	4f 5f       	subi	r20, 0xFF	; 255
    1332:	5f 4f       	sbci	r21, 0xFF	; 255
    1334:	84 0f       	add	r24, r20
    1336:	95 1f       	adc	r25, r21
    1338:	82 0f       	add	r24, r18
    133a:	93 1f       	adc	r25, r19
    133c:	07 96       	adiw	r24, 0x07	; 7
    133e:	fc 01       	movw	r30, r24
    1340:	60 83       	st	Z, r22

	MAP[2*(food_y)/8][2*(food_x)] |= ((0x03 << (2*(food_y) % 8)));
	MAP[2*(food_y)/8][2*(food_x) + 1] |= ((0x03 << (2*(food_y) % 8)));


	for(int i=0;i<length;i++)	//뱀 몸통값 입력
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	9e 81       	ldd	r25, Y+6	; 0x06
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	9e 83       	std	Y+6, r25	; 0x06
    134a:	8d 83       	std	Y+5, r24	; 0x05
    134c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    1350:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    1354:	2d 81       	ldd	r18, Y+5	; 0x05
    1356:	3e 81       	ldd	r19, Y+6	; 0x06
    1358:	28 17       	cp	r18, r24
    135a:	39 07       	cpc	r19, r25
    135c:	0c f4       	brge	.+2      	; 0x1360 <__stack+0x261>
    135e:	33 cf       	rjmp	.-410    	; 0x11c6 <__stack+0xc7>
		MAP[2*(y[i])/8][2*(x[i])] |= ((0x03 << (2*(y[i]) % 8)));
		MAP[2*(y[i])/8][2*(x[i]) + 1] |= ((0x03 << (2*(y[i]) % 8)));
	}

	unsigned char x,y;
	for(y=2;y<8;y++)
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	8f 83       	std	Y+7, r24	; 0x07
    1364:	16 c0       	rjmp	.+44     	; 0x1392 <__stack+0x293>
	{
		ssd1306_set_page_start(y);
    1366:	8f 81       	ldd	r24, Y+7	; 0x07
    1368:	44 da       	rcall	.-2936   	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_data(MAP[y - 2], COL_NUM);
    136a:	8f 81       	ldd	r24, Y+7	; 0x07
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 97       	sbiw	r24, 0x02	; 2
    1372:	9e 01       	movw	r18, r28
    1374:	28 5f       	subi	r18, 0xF8	; 248
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	96 95       	lsr	r25
    137a:	98 2f       	mov	r25, r24
    137c:	88 27       	eor	r24, r24
    137e:	97 95       	ror	r25
    1380:	87 95       	ror	r24
    1382:	82 0f       	add	r24, r18
    1384:	93 1f       	adc	r25, r19
    1386:	60 e8       	ldi	r22, 0x80	; 128
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	b1 d9       	rcall	.-3230   	; 0x6ee <ssd1306_data>
		MAP[2*(y[i])/8][2*(x[i])] |= ((0x03 << (2*(y[i]) % 8)));
		MAP[2*(y[i])/8][2*(x[i]) + 1] |= ((0x03 << (2*(y[i]) % 8)));
	}

	unsigned char x,y;
	for(y=2;y<8;y++)
    138c:	8f 81       	ldd	r24, Y+7	; 0x07
    138e:	8f 5f       	subi	r24, 0xFF	; 255
    1390:	8f 83       	std	Y+7, r24	; 0x07
    1392:	8f 81       	ldd	r24, Y+7	; 0x07
    1394:	88 30       	cpi	r24, 0x08	; 8
    1396:	38 f3       	brcs	.-50     	; 0x1366 <__stack+0x267>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(MAP[y - 2], COL_NUM);
	}
}
    1398:	00 00       	nop
    139a:	c9 5f       	subi	r28, 0xF9	; 249
    139c:	dc 4f       	sbci	r29, 0xFC	; 252
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <move>:


void move(int dir)
{
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <move+0x6>
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <move+0x8>
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <move+0xa>
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	9e 83       	std	Y+6, r25	; 0x06
    13be:	8d 83       	std	Y+5, r24	; 0x05
	
	

	if(x[0]==food_x&&y[0]==food_y)
    13c0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    13cc:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    13d0:	28 17       	cp	r18, r24
    13d2:	39 07       	cpc	r19, r25
    13d4:	d9 f5       	brne	.+118    	; 0x144c <move+0x9e>
    13d6:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    13e2:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    13e6:	28 17       	cp	r18, r24
    13e8:	39 07       	cpc	r19, r25
    13ea:	81 f5       	brne	.+96     	; 0x144c <move+0x9e>
	{ //food와 충돌했을 경우
		food(); //새로운 food 추가
    13ec:	c7 d0       	rcall	.+398    	; 0x157c <food>
		length++; //길이증가
    13ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    13f2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <length+0x1>
    13fc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <length>
		x[length-1]=x[length-2]; //새로만든 몸통에 값 입력
    1400:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    1404:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <length>
    140e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <length+0x1>
    1412:	22 50       	subi	r18, 0x02	; 2
    1414:	31 09       	sbc	r19, r1
    1416:	23 5f       	subi	r18, 0xF3	; 243
    1418:	3e 4f       	sbci	r19, 0xFE	; 254
    141a:	f9 01       	movw	r30, r18
    141c:	20 81       	ld	r18, Z
    141e:	83 5f       	subi	r24, 0xF3	; 243
    1420:	9e 4f       	sbci	r25, 0xFE	; 254
    1422:	fc 01       	movw	r30, r24
    1424:	20 83       	st	Z, r18
		y[length-1]=y[length-2];
    1426:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    142a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <length>
    1434:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <length+0x1>
    1438:	22 50       	subi	r18, 0x02	; 2
    143a:	31 09       	sbc	r19, r1
    143c:	2b 52       	subi	r18, 0x2B	; 43
    143e:	3e 4f       	sbci	r19, 0xFE	; 254
    1440:	f9 01       	movw	r30, r18
    1442:	20 81       	ld	r18, Z
    1444:	8b 52       	subi	r24, 0x2B	; 43
    1446:	9e 4f       	sbci	r25, 0xFE	; 254
    1448:	fc 01       	movw	r30, r24
    144a:	20 83       	st	Z, r18
	}
	if(x[0]==0||x[0]== 63||y[0]==0||y[0]==23)
    144c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    1450:	88 23       	and	r24, r24
    1452:	61 f0       	breq	.+24     	; 0x146c <move+0xbe>
    1454:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    1458:	8f 33       	cpi	r24, 0x3F	; 63
    145a:	41 f0       	breq	.+16     	; 0x146c <move+0xbe>
    145c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    1460:	88 23       	and	r24, r24
    1462:	21 f0       	breq	.+8      	; 0x146c <move+0xbe>
    1464:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    1468:	87 31       	cpi	r24, 0x17	; 23
	{ //벽과 충돌했을 경우
		game_over();
    146a:	11 f4       	brne	.+4      	; 0x1470 <move+0xc2>
    146c:	f3 d0       	rcall	.+486    	; 0x1654 <game_over>
		return; //game_over에서 게임을 다시 시작하게 되면 여기서부터 반복되므로
    146e:	7d c0       	rjmp	.+250    	; 0x156a <move+0x1bc>
		//return을 사용하여 move의 나머지 부분이 실행되지 않도록 합니다.
	}
	for(int i=1;i<length;i++)
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9a 83       	std	Y+2, r25	; 0x02
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	1b c0       	rjmp	.+54     	; 0x14b0 <move+0x102>
	{ //자기몸과 충돌했는지 검사
		if(x[0]==x[i] && y[0]==y[i])
    147a:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <x>
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	83 5f       	subi	r24, 0xF3	; 243
    1484:	9e 4f       	sbci	r25, 0xFE	; 254
    1486:	fc 01       	movw	r30, r24
    1488:	80 81       	ld	r24, Z
    148a:	28 17       	cp	r18, r24
    148c:	61 f4       	brne	.+24     	; 0x14a6 <move+0xf8>
    148e:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <y>
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	8b 52       	subi	r24, 0x2B	; 43
    1498:	9e 4f       	sbci	r25, 0xFE	; 254
    149a:	fc 01       	movw	r30, r24
    149c:	80 81       	ld	r24, Z
    149e:	28 17       	cp	r18, r24
		{
			game_over();
    14a0:	11 f4       	brne	.+4      	; 0x14a6 <move+0xf8>
    14a2:	d8 d0       	rcall	.+432    	; 0x1654 <game_over>
			return;
    14a4:	62 c0       	rjmp	.+196    	; 0x156a <move+0x1bc>
	{ //벽과 충돌했을 경우
		game_over();
		return; //game_over에서 게임을 다시 시작하게 되면 여기서부터 반복되므로
		//return을 사용하여 move의 나머지 부분이 실행되지 않도록 합니다.
	}
	for(int i=1;i<length;i++)
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    14b4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    14b8:	29 81       	ldd	r18, Y+1	; 0x01
    14ba:	3a 81       	ldd	r19, Y+2	; 0x02
    14bc:	28 17       	cp	r18, r24
    14be:	39 07       	cpc	r19, r25
    14c0:	e4 f2       	brlt	.-72     	; 0x147a <move+0xcc>
			return;
		}
	}
	

	for(int i=length - 1;i>0;i--){ //몸통좌표를 한칸씩 옮김
    14c2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    14c6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	9c 83       	std	Y+4, r25	; 0x04
    14ce:	8b 83       	std	Y+3, r24	; 0x03
    14d0:	1f c0       	rjmp	.+62     	; 0x1510 <move+0x162>
		x[i]=x[i-1];
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	9c 81       	ldd	r25, Y+4	; 0x04
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	83 5f       	subi	r24, 0xF3	; 243
    14da:	9e 4f       	sbci	r25, 0xFE	; 254
    14dc:	fc 01       	movw	r30, r24
    14de:	20 81       	ld	r18, Z
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	83 5f       	subi	r24, 0xF3	; 243
    14e6:	9e 4f       	sbci	r25, 0xFE	; 254
    14e8:	fc 01       	movw	r30, r24
    14ea:	20 83       	st	Z, r18
		y[i]=y[i-1];
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	8b 52       	subi	r24, 0x2B	; 43
    14f4:	9e 4f       	sbci	r25, 0xFE	; 254
    14f6:	fc 01       	movw	r30, r24
    14f8:	20 81       	ld	r18, Z
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	8b 52       	subi	r24, 0x2B	; 43
    1500:	9e 4f       	sbci	r25, 0xFE	; 254
    1502:	fc 01       	movw	r30, r24
    1504:	20 83       	st	Z, r18
			return;
		}
	}
	

	for(int i=length - 1;i>0;i--){ //몸통좌표를 한칸씩 옮김
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	9c 81       	ldd	r25, Y+4	; 0x04
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	9c 83       	std	Y+4, r25	; 0x04
    150e:	8b 83       	std	Y+3, r24	; 0x03
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	18 16       	cp	r1, r24
    1516:	19 06       	cpc	r1, r25
    1518:	e4 f2       	brlt	.-72     	; 0x14d2 <move+0x124>
		y[i]=y[i-1];
	}

	

	if(dir==LEFT) x[0]--; //방향에 따라 새로운 머리좌표(x[0],y[0])값을 변경
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	8b 34       	cpi	r24, 0x4B	; 75
    1520:	91 05       	cpc	r25, r1
    1522:	29 f4       	brne	.+10     	; 0x152e <move+0x180>
    1524:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    1528:	81 50       	subi	r24, 0x01	; 1
    152a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <x>
	if(dir==RIGHT) x[0]++;
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	8d 34       	cpi	r24, 0x4D	; 77
    1534:	91 05       	cpc	r25, r1
    1536:	29 f4       	brne	.+10     	; 0x1542 <move+0x194>
    1538:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    153c:	8f 5f       	subi	r24, 0xFF	; 255
    153e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <x>
	if(dir==UP) y[0]--;
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	88 34       	cpi	r24, 0x48	; 72
    1548:	91 05       	cpc	r25, r1
    154a:	29 f4       	brne	.+10     	; 0x1556 <move+0x1a8>
    154c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    1550:	81 50       	subi	r24, 0x01	; 1
    1552:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <y>
	if(dir==DOWN) y[0]++;
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	80 35       	cpi	r24, 0x50	; 80
    155c:	91 05       	cpc	r25, r1
    155e:	29 f4       	brne	.+10     	; 0x156a <move+0x1bc>
    1560:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    1564:	8f 5f       	subi	r24, 0xFF	; 255
    1566:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <y>
	

	
	
}
    156a:	26 96       	adiw	r28, 0x06	; 6
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	08 95       	ret

0000157c <food>:

void food()
{
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	00 d0       	rcall	.+0      	; 0x1582 <food+0x6>
    1582:	00 d0       	rcall	.+0      	; 0x1584 <food+0x8>
    1584:	00 d0       	rcall	.+0      	; 0x1586 <food+0xa>
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
	int food_crush_on=0;//food가 뱀 몸통좌표에 생길 경우 on
    158a:	1a 82       	std	Y+2, r1	; 0x02
    158c:	19 82       	std	Y+1, r1	; 0x01
	int r=0; //난수 생성에 사동되는 변수
    158e:	1e 82       	std	Y+6, r1	; 0x06
    1590:	1d 82       	std	Y+5, r1	; 0x05
	
	
	
	while(1){
		food_crush_on=0;
    1592:	1a 82       	std	Y+2, r1	; 0x02
    1594:	19 82       	std	Y+1, r1	; 0x01
		srand(TCNT0); //난수표생성
    1596:	82 e5       	ldi	r24, 0x52	; 82
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	fc 01       	movw	r30, r24
    159c:	80 81       	ld	r24, Z
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	ea d6       	rcall	.+3540   	; 0x2378 <srand>
		food_x=(rand()%62)+2;    //난수를 좌표값에 넣음
    15a4:	e6 d6       	rcall	.+3532   	; 0x2372 <rand>
    15a6:	2e e3       	ldi	r18, 0x3E	; 62
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	b9 01       	movw	r22, r18
    15ac:	74 d6       	rcall	.+3304   	; 0x2296 <__divmodhi4>
    15ae:	02 96       	adiw	r24, 0x02	; 2
    15b0:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <food_x+0x1>
    15b4:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <food_x>
		food_y=(rand()%22)+2;
    15b8:	dc d6       	rcall	.+3512   	; 0x2372 <rand>
    15ba:	26 e1       	ldi	r18, 0x16	; 22
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	b9 01       	movw	r22, r18
    15c0:	6a d6       	rcall	.+3284   	; 0x2296 <__divmodhi4>
    15c2:	02 96       	adiw	r24, 0x02	; 2
    15c4:	90 93 40 07 	sts	0x0740, r25	; 0x800740 <food_y+0x1>
    15c8:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <food_y>
    15cc:	1c 82       	std	Y+4, r1	; 0x04
		
		for(int i=0;i<length;i++)
    15ce:	1b 82       	std	Y+3, r1	; 0x03
    15d0:	28 c0       	rjmp	.+80     	; 0x1622 <food+0xa6>
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
		{ //food가 뱀 몸통과 겹치는지 확인
			if(food_x==x[i]&&food_y==y[i])
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	83 5f       	subi	r24, 0xF3	; 243
    15d8:	9e 4f       	sbci	r25, 0xFE	; 254
    15da:	fc 01       	movw	r30, r24
    15dc:	80 81       	ld	r24, Z
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    15e6:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    15ea:	28 17       	cp	r18, r24
    15ec:	39 07       	cpc	r19, r25
    15ee:	a1 f4       	brne	.+40     	; 0x1618 <food+0x9c>
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	8b 52       	subi	r24, 0x2B	; 43
    15f6:	9e 4f       	sbci	r25, 0xFE	; 254
    15f8:	fc 01       	movw	r30, r24
    15fa:	80 81       	ld	r24, Z
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    1604:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    1608:	28 17       	cp	r18, r24
    160a:	39 07       	cpc	r19, r25
    160c:	29 f4       	brne	.+10     	; 0x1618 <food+0x9c>
    160e:	81 e0       	ldi	r24, 0x01	; 1
			{
				food_crush_on=1; //겹치면 food_crush_on 를 on
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9a 83       	std	Y+2, r25	; 0x02
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	0e c0       	rjmp	.+28     	; 0x1634 <food+0xb8>
				break;
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
		food_crush_on=0;
		srand(TCNT0); //난수표생성
		food_x=(rand()%62)+2;    //난수를 좌표값에 넣음
		food_y=(rand()%22)+2;
		
		for(int i=0;i<length;i++)
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	01 96       	adiw	r24, 0x01	; 1
    161e:	9c 83       	std	Y+4, r25	; 0x04
    1620:	8b 83       	std	Y+3, r24	; 0x03
    1622:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    1626:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    162a:	2b 81       	ldd	r18, Y+3	; 0x03
    162c:	3c 81       	ldd	r19, Y+4	; 0x04
    162e:	28 17       	cp	r18, r24
    1630:	39 07       	cpc	r19, r25
    1632:	7c f2       	brlt	.-98     	; 0x15d2 <food+0x56>
    1634:	89 81       	ldd	r24, Y+1	; 0x01
				food_crush_on=1; //겹치면 food_crush_on 를 on
				break;
			}
		}
		
		if(food_crush_on==1) continue; //겹쳤을 경우 while문을 다시 시작
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	09 f4       	brne	.+2      	; 0x163e <food+0xc2>
    163c:	aa cf       	rjmp	.-172    	; 0x1592 <food+0x16>
		
		break;
		
	}
    163e:	00 00       	nop
			}
		}
		
		if(food_crush_on==1) continue; //겹쳤을 경우 while문을 다시 시작
		
		break;
    1640:	00 00       	nop
		
	}
}
    1642:	26 96       	adiw	r28, 0x06	; 6
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	08 95       	ret

00001654 <game_over>:
    1654:	cf 93       	push	r28


void game_over()
{
    1656:	df 93       	push	r29
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	a0 97       	sbiw	r28, 0x20	; 32
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
	SendCommand01(0x06, 0x00, 0x0F);
    1668:	4f e0       	ldi	r20, 0x0F	; 15
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	86 e0       	ldi	r24, 0x06	; 6
    166e:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a8 e4       	ldi	r26, 0x48	; 72
    1678:	b3 e4       	ldi	r27, 0x43	; 67
    167a:	89 87       	std	Y+9, r24	; 0x09
    167c:	9a 87       	std	Y+10, r25	; 0x0a
    167e:	ab 87       	std	Y+11, r26	; 0x0b
    1680:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	4a e7       	ldi	r20, 0x7A	; 122
    1688:	55 e4       	ldi	r21, 0x45	; 69
    168a:	69 85       	ldd	r22, Y+9	; 0x09
    168c:	7a 85       	ldd	r23, Y+10	; 0x0a
    168e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1690:	9c 85       	ldd	r25, Y+12	; 0x0c
    1692:	76 d5       	rcall	.+2796   	; 0x2180 <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	8d 87       	std	Y+13, r24	; 0x0d
    169a:	9e 87       	std	Y+14, r25	; 0x0e
    169c:	af 87       	std	Y+15, r26	; 0x0f
    169e:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e8       	ldi	r20, 0x80	; 128
    16a6:	5f e3       	ldi	r21, 0x3F	; 63
    16a8:	6d 85       	ldd	r22, Y+13	; 0x0d
    16aa:	7e 85       	ldd	r23, Y+14	; 0x0e
    16ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ae:	98 89       	ldd	r25, Y+16	; 0x10
    16b0:	e6 d4       	rcall	.+2508   	; 0x207e <__cmpsf2>
    16b2:	88 23       	and	r24, r24
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <game_over+0x6c>
		__ticks = 1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9a 8b       	std	Y+18, r25	; 0x12
    16bc:	89 8b       	std	Y+17, r24	; 0x11
    16be:	3b c0       	rjmp	.+118    	; 0x1736 <game_over+0xe2>
	else if (__tmp > 65535)
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	3f ef       	ldi	r19, 0xFF	; 255
    16c4:	4f e7       	ldi	r20, 0x7F	; 127
    16c6:	57 e4       	ldi	r21, 0x47	; 71
    16c8:	6d 85       	ldd	r22, Y+13	; 0x0d
    16ca:	7e 85       	ldd	r23, Y+14	; 0x0e
    16cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ce:	98 89       	ldd	r25, Y+16	; 0x10
    16d0:	53 d5       	rcall	.+2726   	; 0x2178 <__gesf2>
    16d2:	18 16       	cp	r1, r24
    16d4:	3c f5       	brge	.+78     	; 0x1724 <game_over+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e2       	ldi	r20, 0x20	; 32
    16dc:	51 e4       	ldi	r21, 0x41	; 65
    16de:	69 85       	ldd	r22, Y+9	; 0x09
    16e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    16e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    16e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    16e6:	4c d5       	rcall	.+2712   	; 0x2180 <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	ca d4       	rcall	.+2452   	; 0x2086 <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	9a 8b       	std	Y+18, r25	; 0x12
    16f8:	89 8b       	std	Y+17, r24	; 0x11
    16fa:	0f c0       	rjmp	.+30     	; 0x171a <game_over+0xc6>
    16fc:	80 e9       	ldi	r24, 0x90	; 144
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	9c 8b       	std	Y+20, r25	; 0x14
    1702:	8b 8b       	std	Y+19, r24	; 0x13
    1704:	8b 89       	ldd	r24, Y+19	; 0x13
    1706:	9c 89       	ldd	r25, Y+20	; 0x14
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <game_over+0xb4>
    170c:	9c 8b       	std	Y+20, r25	; 0x14
    170e:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1710:	89 89       	ldd	r24, Y+17	; 0x11
    1712:	9a 89       	ldd	r25, Y+18	; 0x12
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	9a 8b       	std	Y+18, r25	; 0x12
    1718:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171a:	89 89       	ldd	r24, Y+17	; 0x11
    171c:	9a 89       	ldd	r25, Y+18	; 0x12
    171e:	89 2b       	or	r24, r25
    1720:	69 f7       	brne	.-38     	; 0x16fc <game_over+0xa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1722:	13 c0       	rjmp	.+38     	; 0x174a <game_over+0xf6>
    1724:	6d 85       	ldd	r22, Y+13	; 0x0d
    1726:	7e 85       	ldd	r23, Y+14	; 0x0e
    1728:	8f 85       	ldd	r24, Y+15	; 0x0f
    172a:	98 89       	ldd	r25, Y+16	; 0x10
    172c:	ac d4       	rcall	.+2392   	; 0x2086 <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	9a 8b       	std	Y+18, r25	; 0x12
    1734:	89 8b       	std	Y+17, r24	; 0x11
    1736:	89 89       	ldd	r24, Y+17	; 0x11
    1738:	9a 89       	ldd	r25, Y+18	; 0x12
    173a:	9e 8b       	std	Y+22, r25	; 0x16
    173c:	8d 8b       	std	Y+21, r24	; 0x15
    173e:	8d 89       	ldd	r24, Y+21	; 0x15
    1740:	9e 89       	ldd	r25, Y+22	; 0x16
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <game_over+0xee>
    1746:	9e 8b       	std	Y+22, r25	; 0x16
    1748:	8d 8b       	std	Y+21, r24	; 0x15
	_delay_ms(200);
	SendCommand01(0x0F, 0x01, 0x04);
    174a:	44 e0       	ldi	r20, 0x04	; 4
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	8f e0       	ldi	r24, 0x0F	; 15
    1750:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
	game = 0;
    1754:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <game+0x1>
    1758:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <game>
	clear_map();
    175c:	2f d4       	rcall	.+2142   	; 0x1fbc <clear_map>
	oled_msg(4, 6, "GAME OVER");
    175e:	8e ea       	ldi	r24, 0xAE	; 174
    1760:	92 e0       	ldi	r25, 0x02	; 2
    1762:	89 2f       	mov	r24, r25
    1764:	8f 93       	push	r24
    1766:	8e ea       	ldi	r24, 0xAE	; 174
    1768:	92 e0       	ldi	r25, 0x02	; 2
    176a:	8f 93       	push	r24
    176c:	1f 92       	push	r1
    176e:	86 e0       	ldi	r24, 0x06	; 6
    1770:	8f 93       	push	r24
    1772:	1f 92       	push	r1
    1774:	84 e0       	ldi	r24, 0x04	; 4
    1776:	8f 93       	push	r24
    1778:	68 d9       	rcall	.-3376   	; 0xa4a <oled_msg>
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
	ssd1306_set_column_addr(0);
    1784:	0f 90       	pop	r0
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	47 d8       	rcall	.-3954   	; 0x818 <ssd1306_set_column_addr>
	while(game != 1);
    178a:	00 00       	nop
    178c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
    1790:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	d1 f7       	brne	.-12     	; 0x178c <game_over+0x138>

	x[0] = 32;
    1798:	80 e2       	ldi	r24, 0x20	; 32
    179a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <x>
	x[1] = 31;
    179e:	8f e1       	ldi	r24, 0x1F	; 31
    17a0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <x+0x1>
	x[2] = 30;
    17a4:	8e e1       	ldi	r24, 0x1E	; 30
    17a6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <x+0x2>
	y[0] = 12;
    17aa:	8c e0       	ldi	r24, 0x0C	; 12
    17ac:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <y>
	y[1] = 12;
    17b0:	8c e0       	ldi	r24, 0x0C	; 12
    17b2:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <y+0x1>
	y[2] = 12;
    17b6:	8c e0       	ldi	r24, 0x0C	; 12
    17b8:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <y+0x2>

	for(int i = 3; i < 200; i++)
    17bc:	83 e0       	ldi	r24, 0x03	; 3
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9a 83       	std	Y+2, r25	; 0x02
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	0b c0       	rjmp	.+22     	; 0x17dc <game_over+0x188>
	{
		x[i] = 0;
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ca:	83 5f       	subi	r24, 0xF3	; 243
    17cc:	9e 4f       	sbci	r25, 0xFE	; 254
    17ce:	fc 01       	movw	r30, r24
    17d0:	10 82       	st	Z, r1
	x[2] = 30;
	y[0] = 12;
	y[1] = 12;
	y[2] = 12;

	for(int i = 3; i < 200; i++)
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	9a 83       	std	Y+2, r25	; 0x02
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	9a 81       	ldd	r25, Y+2	; 0x02
    17e0:	88 3c       	cpi	r24, 0xC8	; 200
    17e2:	91 05       	cpc	r25, r1
    17e4:	84 f3       	brlt	.-32     	; 0x17c6 <game_over+0x172>
	{
		x[i] = 0;
	}
	for(int i = 3; i < 200; i++)
    17e6:	83 e0       	ldi	r24, 0x03	; 3
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	9c 83       	std	Y+4, r25	; 0x04
    17ec:	8b 83       	std	Y+3, r24	; 0x03
    17ee:	0b c0       	rjmp	.+22     	; 0x1806 <game_over+0x1b2>
	{
		y[i] = 0;
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	8b 52       	subi	r24, 0x2B	; 43
    17f6:	9e 4f       	sbci	r25, 0xFE	; 254
    17f8:	fc 01       	movw	r30, r24
    17fa:	10 82       	st	Z, r1

	for(int i = 3; i < 200; i++)
	{
		x[i] = 0;
	}
	for(int i = 3; i < 200; i++)
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	9c 83       	std	Y+4, r25	; 0x04
    1804:	8b 83       	std	Y+3, r24	; 0x03
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	9c 81       	ldd	r25, Y+4	; 0x04
    180a:	88 3c       	cpi	r24, 0xC8	; 200
    180c:	91 05       	cpc	r25, r1
    180e:	84 f3       	brlt	.-32     	; 0x17f0 <game_over+0x19c>
	{
		y[i] = 0;
	}
	length = 3;
    1810:	83 e0       	ldi	r24, 0x03	; 3
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <length+0x1>
    1818:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <length>
	draw_picture(KO);
    181c:	88 eb       	ldi	r24, 0xB8	; 184
    181e:	92 e0       	ldi	r25, 0x02	; 2
    1820:	79 d9       	rcall	.-3342   	; 0xb14 <draw_picture>
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a8 ec       	ldi	r26, 0xC8	; 200
    1828:	b3 e4       	ldi	r27, 0x43	; 67
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	af 83       	std	Y+7, r26	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1830:	b8 87       	std	Y+8, r27	; 0x08
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	4a e7       	ldi	r20, 0x7A	; 122
    1838:	55 e4       	ldi	r21, 0x45	; 69
    183a:	6d 81       	ldd	r22, Y+5	; 0x05
    183c:	7e 81       	ldd	r23, Y+6	; 0x06
    183e:	8f 81       	ldd	r24, Y+7	; 0x07
    1840:	98 85       	ldd	r25, Y+8	; 0x08
    1842:	9e d4       	rcall	.+2364   	; 0x2180 <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	8f 8b       	std	Y+23, r24	; 0x17
    184a:	98 8f       	std	Y+24, r25	; 0x18
    184c:	a9 8f       	std	Y+25, r26	; 0x19
	if (__tmp < 1.0)
    184e:	ba 8f       	std	Y+26, r27	; 0x1a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	5f e3       	ldi	r21, 0x3F	; 63
    1858:	6f 89       	ldd	r22, Y+23	; 0x17
    185a:	78 8d       	ldd	r23, Y+24	; 0x18
    185c:	89 8d       	ldd	r24, Y+25	; 0x19
    185e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1860:	0e d4       	rcall	.+2076   	; 0x207e <__cmpsf2>
    1862:	88 23       	and	r24, r24
    1864:	2c f4       	brge	.+10     	; 0x1870 <game_over+0x21c>
		__ticks = 1;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	9c 8f       	std	Y+28, r25	; 0x1c
    186c:	8b 8f       	std	Y+27, r24	; 0x1b
	else if (__tmp > 65535)
    186e:	3b c0       	rjmp	.+118    	; 0x18e6 <game_over+0x292>
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	57 e4       	ldi	r21, 0x47	; 71
    1878:	6f 89       	ldd	r22, Y+23	; 0x17
    187a:	78 8d       	ldd	r23, Y+24	; 0x18
    187c:	89 8d       	ldd	r24, Y+25	; 0x19
    187e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1880:	7b d4       	rcall	.+2294   	; 0x2178 <__gesf2>
    1882:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1884:	3c f5       	brge	.+78     	; 0x18d4 <game_over+0x280>
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e2       	ldi	r20, 0x20	; 32
    188c:	51 e4       	ldi	r21, 0x41	; 65
    188e:	6d 81       	ldd	r22, Y+5	; 0x05
    1890:	7e 81       	ldd	r23, Y+6	; 0x06
    1892:	8f 81       	ldd	r24, Y+7	; 0x07
    1894:	98 85       	ldd	r25, Y+8	; 0x08
    1896:	74 d4       	rcall	.+2280   	; 0x2180 <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	f2 d3       	rcall	.+2020   	; 0x2086 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9c 8f       	std	Y+28, r25	; 0x1c
    18a8:	8b 8f       	std	Y+27, r24	; 0x1b
    18aa:	0f c0       	rjmp	.+30     	; 0x18ca <game_over+0x276>
    18ac:	80 e9       	ldi	r24, 0x90	; 144
    18ae:	91 e0       	ldi	r25, 0x01	; 1
    18b0:	9e 8f       	std	Y+30, r25	; 0x1e
    18b2:	8d 8f       	std	Y+29, r24	; 0x1d
    18b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <game_over+0x264>
    18bc:	9e 8f       	std	Y+30, r25	; 0x1e
    18be:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	9c 8f       	std	Y+28, r25	; 0x1c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c8:	8b 8f       	std	Y+27, r24	; 0x1b
    18ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ce:	89 2b       	or	r24, r25
    18d0:	69 f7       	brne	.-38     	; 0x18ac <game_over+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d2:	13 c0       	rjmp	.+38     	; 0x18fa <game_over+0x2a6>
    18d4:	6f 89       	ldd	r22, Y+23	; 0x17
    18d6:	78 8d       	ldd	r23, Y+24	; 0x18
    18d8:	89 8d       	ldd	r24, Y+25	; 0x19
    18da:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18dc:	d4 d3       	rcall	.+1960   	; 0x2086 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	9c 8f       	std	Y+28, r25	; 0x1c
    18e4:	8b 8f       	std	Y+27, r24	; 0x1b
    18e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ea:	98 a3       	std	Y+32, r25	; 0x20
    18ec:	8f 8f       	std	Y+31, r24	; 0x1f
    18ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18f0:	98 a1       	ldd	r25, Y+32	; 0x20
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <game_over+0x29e>
	_delay_ms(400);
	clear_screen();
    18f6:	98 a3       	std	Y+32, r25	; 0x20
    18f8:	8f 8f       	std	Y+31, r24	; 0x1f
	title();
    18fa:	7c d8       	rcall	.-3848   	; 0x9f4 <clear_screen>
    18fc:	bf da       	rcall	.-2690   	; 0xe7c <title>
}
    18fe:	00 00       	nop
    1900:	a0 96       	adiw	r28, 0x20	; 32
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	08 95       	ret

00001912 <main>:


int main(void)
{
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	ca 54       	subi	r28, 0x4A	; 74
    1920:	d1 09       	sbc	r29, r1
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
	char cmd;

	UART_Init();
    192c:	0e 94 9d 02 	call	0x53a	; 0x53a <UART_Init>
	long int val_ADC_button;
	
	
	while(1)
	{
		SendCommand(CMD_TF);
    1930:	89 e0       	ldi	r24, 0x09	; 9
    1932:	0e 94 cf 02 	call	0x59e	; 0x59e <SendCommand>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	a0 ea       	ldi	r26, 0xA0	; 160
    193c:	b1 e4       	ldi	r27, 0x41	; 65
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	9e 83       	std	Y+6, r25	; 0x06
    1942:	af 83       	std	Y+7, r26	; 0x07
    1944:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	4a e7       	ldi	r20, 0x7A	; 122
    194c:	55 e4       	ldi	r21, 0x45	; 69
    194e:	6d 81       	ldd	r22, Y+5	; 0x05
    1950:	7e 81       	ldd	r23, Y+6	; 0x06
    1952:	8f 81       	ldd	r24, Y+7	; 0x07
    1954:	98 85       	ldd	r25, Y+8	; 0x08
    1956:	14 d4       	rcall	.+2088   	; 0x2180 <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	8f ab       	std	Y+55, r24	; 0x37
    195e:	98 af       	std	Y+56, r25	; 0x38
    1960:	a9 af       	std	Y+57, r26	; 0x39
    1962:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e8       	ldi	r20, 0x80	; 128
    196a:	5f e3       	ldi	r21, 0x3F	; 63
    196c:	6f a9       	ldd	r22, Y+55	; 0x37
    196e:	78 ad       	ldd	r23, Y+56	; 0x38
    1970:	89 ad       	ldd	r24, Y+57	; 0x39
    1972:	9a ad       	ldd	r25, Y+58	; 0x3a
    1974:	84 d3       	rcall	.+1800   	; 0x207e <__cmpsf2>
    1976:	88 23       	and	r24, r24
    1978:	2c f4       	brge	.+10     	; 0x1984 <main+0x72>
		__ticks = 1;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9c af       	std	Y+60, r25	; 0x3c
    1980:	8b af       	std	Y+59, r24	; 0x3b
    1982:	3b c0       	rjmp	.+118    	; 0x19fa <main+0xe8>
	else if (__tmp > 65535)
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	3f ef       	ldi	r19, 0xFF	; 255
    1988:	4f e7       	ldi	r20, 0x7F	; 127
    198a:	57 e4       	ldi	r21, 0x47	; 71
    198c:	6f a9       	ldd	r22, Y+55	; 0x37
    198e:	78 ad       	ldd	r23, Y+56	; 0x38
    1990:	89 ad       	ldd	r24, Y+57	; 0x39
    1992:	9a ad       	ldd	r25, Y+58	; 0x3a
    1994:	f1 d3       	rcall	.+2018   	; 0x2178 <__gesf2>
    1996:	18 16       	cp	r1, r24
    1998:	3c f5       	brge	.+78     	; 0x19e8 <main+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e2       	ldi	r20, 0x20	; 32
    19a0:	51 e4       	ldi	r21, 0x41	; 65
    19a2:	6d 81       	ldd	r22, Y+5	; 0x05
    19a4:	7e 81       	ldd	r23, Y+6	; 0x06
    19a6:	8f 81       	ldd	r24, Y+7	; 0x07
    19a8:	98 85       	ldd	r25, Y+8	; 0x08
    19aa:	ea d3       	rcall	.+2004   	; 0x2180 <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	bc 01       	movw	r22, r24
    19b2:	cd 01       	movw	r24, r26
    19b4:	68 d3       	rcall	.+1744   	; 0x2086 <__fixunssfsi>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	9c af       	std	Y+60, r25	; 0x3c
    19bc:	8b af       	std	Y+59, r24	; 0x3b
    19be:	0f c0       	rjmp	.+30     	; 0x19de <main+0xcc>
    19c0:	80 e9       	ldi	r24, 0x90	; 144
    19c2:	91 e0       	ldi	r25, 0x01	; 1
    19c4:	9e af       	std	Y+62, r25	; 0x3e
    19c6:	8d af       	std	Y+61, r24	; 0x3d
    19c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    19ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <main+0xba>
    19d0:	9e af       	std	Y+62, r25	; 0x3e
    19d2:	8d af       	std	Y+61, r24	; 0x3d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d4:	8b ad       	ldd	r24, Y+59	; 0x3b
    19d6:	9c ad       	ldd	r25, Y+60	; 0x3c
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	9c af       	std	Y+60, r25	; 0x3c
    19dc:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19de:	8b ad       	ldd	r24, Y+59	; 0x3b
    19e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    19e2:	89 2b       	or	r24, r25
    19e4:	69 f7       	brne	.-38     	; 0x19c0 <main+0xae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e6:	1d c0       	rjmp	.+58     	; 0x1a22 <main+0x110>
    19e8:	6f a9       	ldd	r22, Y+55	; 0x37
    19ea:	78 ad       	ldd	r23, Y+56	; 0x38
    19ec:	89 ad       	ldd	r24, Y+57	; 0x39
    19ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    19f0:	4a d3       	rcall	.+1684   	; 0x2086 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	9c af       	std	Y+60, r25	; 0x3c
    19f8:	8b af       	std	Y+59, r24	; 0x3b
    19fa:	2b ad       	ldd	r18, Y+59	; 0x3b
    19fc:	3c ad       	ldd	r19, Y+60	; 0x3c
    19fe:	ce 01       	movw	r24, r28
    1a00:	cf 96       	adiw	r24, 0x3f	; 63
    1a02:	fc 01       	movw	r30, r24
    1a04:	31 83       	std	Z+1, r19	; 0x01
    1a06:	20 83       	st	Z, r18
    1a08:	ce 01       	movw	r24, r28
    1a0a:	cf 96       	adiw	r24, 0x3f	; 63
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	80 81       	ld	r24, Z
    1a10:	91 81       	ldd	r25, Z+1	; 0x01
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <main+0x100>
    1a16:	9e 01       	movw	r18, r28
    1a18:	21 5c       	subi	r18, 0xC1	; 193
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	f9 01       	movw	r30, r18
    1a1e:	91 83       	std	Z+1, r25	; 0x01
    1a20:	80 83       	st	Z, r24
		_delay_ms(20);
		SendCommand01(0x06, 0x00, 0x0F);
    1a22:	4f e0       	ldi	r20, 0x0F	; 15
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	86 e0       	ldi	r24, 0x06	; 6
    1a28:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a8 e4       	ldi	r26, 0x48	; 72
    1a32:	b3 e4       	ldi	r27, 0x43	; 67
    1a34:	89 87       	std	Y+9, r24	; 0x09
    1a36:	9a 87       	std	Y+10, r25	; 0x0a
    1a38:	ab 87       	std	Y+11, r26	; 0x0b
    1a3a:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	4a e7       	ldi	r20, 0x7A	; 122
    1a42:	55 e4       	ldi	r21, 0x45	; 69
    1a44:	69 85       	ldd	r22, Y+9	; 0x09
    1a46:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a48:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a4c:	99 d3       	rcall	.+1842   	; 0x2180 <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	8d a7       	std	Y+45, r24	; 0x2d
    1a54:	9e a7       	std	Y+46, r25	; 0x2e
    1a56:	af a7       	std	Y+47, r26	; 0x2f
    1a58:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e8       	ldi	r20, 0x80	; 128
    1a60:	5f e3       	ldi	r21, 0x3F	; 63
    1a62:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a64:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a68:	98 a9       	ldd	r25, Y+48	; 0x30
    1a6a:	09 d3       	rcall	.+1554   	; 0x207e <__cmpsf2>
    1a6c:	88 23       	and	r24, r24
    1a6e:	2c f4       	brge	.+10     	; 0x1a7a <main+0x168>
		__ticks = 1;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9a ab       	std	Y+50, r25	; 0x32
    1a76:	89 ab       	std	Y+49, r24	; 0x31
    1a78:	3b c0       	rjmp	.+118    	; 0x1af0 <main+0x1de>
	else if (__tmp > 65535)
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	4f e7       	ldi	r20, 0x7F	; 127
    1a80:	57 e4       	ldi	r21, 0x47	; 71
    1a82:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a84:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a88:	98 a9       	ldd	r25, Y+48	; 0x30
    1a8a:	76 d3       	rcall	.+1772   	; 0x2178 <__gesf2>
    1a8c:	18 16       	cp	r1, r24
    1a8e:	3c f5       	brge	.+78     	; 0x1ade <main+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e2       	ldi	r20, 0x20	; 32
    1a96:	51 e4       	ldi	r21, 0x41	; 65
    1a98:	69 85       	ldd	r22, Y+9	; 0x09
    1a9a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aa0:	6f d3       	rcall	.+1758   	; 0x2180 <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	ed d2       	rcall	.+1498   	; 0x2086 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9a ab       	std	Y+50, r25	; 0x32
    1ab2:	89 ab       	std	Y+49, r24	; 0x31
    1ab4:	0f c0       	rjmp	.+30     	; 0x1ad4 <main+0x1c2>
    1ab6:	80 e9       	ldi	r24, 0x90	; 144
    1ab8:	91 e0       	ldi	r25, 0x01	; 1
    1aba:	9c ab       	std	Y+52, r25	; 0x34
    1abc:	8b ab       	std	Y+51, r24	; 0x33
    1abe:	8b a9       	ldd	r24, Y+51	; 0x33
    1ac0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <main+0x1b0>
    1ac6:	9c ab       	std	Y+52, r25	; 0x34
    1ac8:	8b ab       	std	Y+51, r24	; 0x33
    1aca:	89 a9       	ldd	r24, Y+49	; 0x31
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1acc:	9a a9       	ldd	r25, Y+50	; 0x32
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	9a ab       	std	Y+50, r25	; 0x32
    1ad2:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad4:	89 a9       	ldd	r24, Y+49	; 0x31
    1ad6:	9a a9       	ldd	r25, Y+50	; 0x32
    1ad8:	89 2b       	or	r24, r25
    1ada:	69 f7       	brne	.-38     	; 0x1ab6 <main+0x1a4>
    1adc:	13 c0       	rjmp	.+38     	; 0x1b04 <main+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ade:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ae0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ae2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae6:	cf d2       	rcall	.+1438   	; 0x2086 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	9a ab       	std	Y+50, r25	; 0x32
    1aee:	89 ab       	std	Y+49, r24	; 0x31
    1af0:	89 a9       	ldd	r24, Y+49	; 0x31
    1af2:	9a a9       	ldd	r25, Y+50	; 0x32
    1af4:	9e ab       	std	Y+54, r25	; 0x36
    1af6:	8d ab       	std	Y+53, r24	; 0x35
    1af8:	8d a9       	ldd	r24, Y+53	; 0x35
    1afa:	9e a9       	ldd	r25, Y+54	; 0x36
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <main+0x1ea>
    1b00:	9e ab       	std	Y+54, r25	; 0x36
    1b02:	8d ab       	std	Y+53, r24	; 0x35
    1b04:	41 e0       	ldi	r20, 0x01	; 1
		_delay_ms(200);
		SendCommand01(0x0F, 0x01, 0x01);
    1b06:	61 e0       	ldi	r22, 0x01	; 1
    1b08:	8f e0       	ldi	r24, 0x0F	; 15
    1b0a:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a8 e4       	ldi	r26, 0x48	; 72
    1b14:	b3 e4       	ldi	r27, 0x43	; 67
    1b16:	8d 87       	std	Y+13, r24	; 0x0d
    1b18:	9e 87       	std	Y+14, r25	; 0x0e
    1b1a:	af 87       	std	Y+15, r26	; 0x0f
    1b1c:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4a e7       	ldi	r20, 0x7A	; 122
    1b24:	55 e4       	ldi	r21, 0x45	; 69
    1b26:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b28:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b2c:	98 89       	ldd	r25, Y+16	; 0x10
    1b2e:	28 d3       	rcall	.+1616   	; 0x2180 <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	8b a3       	std	Y+35, r24	; 0x23
    1b36:	9c a3       	std	Y+36, r25	; 0x24
    1b38:	ad a3       	std	Y+37, r26	; 0x25
    1b3a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e8       	ldi	r20, 0x80	; 128
    1b42:	5f e3       	ldi	r21, 0x3F	; 63
    1b44:	6b a1       	ldd	r22, Y+35	; 0x23
    1b46:	7c a1       	ldd	r23, Y+36	; 0x24
    1b48:	8d a1       	ldd	r24, Y+37	; 0x25
    1b4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b4c:	98 d2       	rcall	.+1328   	; 0x207e <__cmpsf2>
    1b4e:	88 23       	and	r24, r24
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <main+0x24a>
		__ticks = 1;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	98 a7       	std	Y+40, r25	; 0x28
    1b58:	8f a3       	std	Y+39, r24	; 0x27
    1b5a:	3b c0       	rjmp	.+118    	; 0x1bd2 <main+0x2c0>
	else if (__tmp > 65535)
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	3f ef       	ldi	r19, 0xFF	; 255
    1b60:	4f e7       	ldi	r20, 0x7F	; 127
    1b62:	57 e4       	ldi	r21, 0x47	; 71
    1b64:	6b a1       	ldd	r22, Y+35	; 0x23
    1b66:	7c a1       	ldd	r23, Y+36	; 0x24
    1b68:	8d a1       	ldd	r24, Y+37	; 0x25
    1b6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b6c:	05 d3       	rcall	.+1546   	; 0x2178 <__gesf2>
    1b6e:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b70:	3c f5       	brge	.+78     	; 0x1bc0 <main+0x2ae>
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e2       	ldi	r20, 0x20	; 32
    1b78:	51 e4       	ldi	r21, 0x41	; 65
    1b7a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b7c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b80:	98 89       	ldd	r25, Y+16	; 0x10
    1b82:	fe d2       	rcall	.+1532   	; 0x2180 <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	bc 01       	movw	r22, r24
    1b8a:	cd 01       	movw	r24, r26
    1b8c:	7c d2       	rcall	.+1272   	; 0x2086 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	98 a7       	std	Y+40, r25	; 0x28
    1b94:	8f a3       	std	Y+39, r24	; 0x27
    1b96:	0f c0       	rjmp	.+30     	; 0x1bb6 <main+0x2a4>
    1b98:	80 e9       	ldi	r24, 0x90	; 144
    1b9a:	91 e0       	ldi	r25, 0x01	; 1
    1b9c:	9a a7       	std	Y+42, r25	; 0x2a
    1b9e:	89 a7       	std	Y+41, r24	; 0x29
    1ba0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ba2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <main+0x292>
    1ba8:	9a a7       	std	Y+42, r25	; 0x2a
    1baa:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bac:	8f a1       	ldd	r24, Y+39	; 0x27
    1bae:	98 a5       	ldd	r25, Y+40	; 0x28
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	98 a7       	std	Y+40, r25	; 0x28
    1bb4:	8f a3       	std	Y+39, r24	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb6:	8f a1       	ldd	r24, Y+39	; 0x27
    1bb8:	98 a5       	ldd	r25, Y+40	; 0x28
    1bba:	89 2b       	or	r24, r25
    1bbc:	69 f7       	brne	.-38     	; 0x1b98 <main+0x286>
    1bbe:	13 c0       	rjmp	.+38     	; 0x1be6 <main+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc8:	5e d2       	rcall	.+1212   	; 0x2086 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	98 a7       	std	Y+40, r25	; 0x28
    1bd0:	8f a3       	std	Y+39, r24	; 0x27
    1bd2:	8f a1       	ldd	r24, Y+39	; 0x27
    1bd4:	98 a5       	ldd	r25, Y+40	; 0x28
    1bd6:	9c a7       	std	Y+44, r25	; 0x2c
    1bd8:	8b a7       	std	Y+43, r24	; 0x2b
    1bda:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bdc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <main+0x2cc>
    1be2:	9c a7       	std	Y+44, r25	; 0x2c
    1be4:	8b a7       	std	Y+43, r24	; 0x2b
    1be6:	81 e3       	ldi	r24, 0x31	; 49
		_delay_ms(200);

		DDRD = 0x00;
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	fc 01       	movw	r30, r24
    1bec:	10 82       	st	Z, r1
    1bee:	82 e2       	ldi	r24, 0x22	; 34
		DDRE = 0x00;
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	10 82       	st	Z, r1
    1bf6:	8a e5       	ldi	r24, 0x5A	; 90
		EICRB = (2 << ISC40) | (2 << ISC50) | (2 << ISC60) | (2 << ISC70);
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	2a ea       	ldi	r18, 0xAA	; 170
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	20 83       	st	Z, r18
    1c00:	8a e6       	ldi	r24, 0x6A	; 106
		
		EICRA = (2 << ISC30);
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	20 e8       	ldi	r18, 0x80	; 128
    1c06:	fc 01       	movw	r30, r24
    1c08:	20 83       	st	Z, r18
    1c0a:	89 e5       	ldi	r24, 0x59	; 89

		EIMSK = (1 << INT3) | (1 << INT4) | (1 << INT5) | (1 << INT6) | (1 << INT7);
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	28 ef       	ldi	r18, 0xF8	; 248
    1c10:	fc 01       	movw	r30, r24
    1c12:	20 83       	st	Z, r18
    1c14:	78 94       	sei

		sei();
    1c16:	83 e5       	ldi	r24, 0x53	; 83

		

		TCCR0 = 0x07;
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	27 e0       	ldi	r18, 0x07	; 7
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	20 83       	st	Z, r18
    1c20:	0e 94 b3 05 	call	0xb66	; 0xb66 <setup>
		//TCNT0 = 0x00;

		setup();
    1c24:	88 eb       	ldi	r24, 0xB8	; 184
		
		draw_picture(KO);
    1c26:	92 e0       	ldi	r25, 0x02	; 2
    1c28:	0e 94 8a 05 	call	0xb14	; 0xb14 <draw_picture>
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e8       	ldi	r25, 0x80	; 128
    1c30:	ab eb       	ldi	r26, 0xBB	; 187
    1c32:	b4 e4       	ldi	r27, 0x44	; 68
    1c34:	8d 8b       	std	Y+21, r24	; 0x15
    1c36:	9e 8b       	std	Y+22, r25	; 0x16
    1c38:	af 8b       	std	Y+23, r26	; 0x17
    1c3a:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	4a e7       	ldi	r20, 0x7A	; 122
    1c42:	55 e4       	ldi	r21, 0x45	; 69
    1c44:	6d 89       	ldd	r22, Y+21	; 0x15
    1c46:	7e 89       	ldd	r23, Y+22	; 0x16
    1c48:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4c:	99 d2       	rcall	.+1330   	; 0x2180 <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	89 8f       	std	Y+25, r24	; 0x19
    1c54:	9a 8f       	std	Y+26, r25	; 0x1a
    1c56:	ab 8f       	std	Y+27, r26	; 0x1b
    1c58:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	5f e3       	ldi	r21, 0x3F	; 63
    1c62:	69 8d       	ldd	r22, Y+25	; 0x19
    1c64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c6a:	09 d2       	rcall	.+1042   	; 0x207e <__cmpsf2>
    1c6c:	88 23       	and	r24, r24
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <main+0x368>
		__ticks = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9e 8f       	std	Y+30, r25	; 0x1e
    1c76:	8d 8f       	std	Y+29, r24	; 0x1d
	else if (__tmp > 65535)
    1c78:	3b c0       	rjmp	.+118    	; 0x1cf0 <main+0x3de>
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	3f ef       	ldi	r19, 0xFF	; 255
    1c7e:	4f e7       	ldi	r20, 0x7F	; 127
    1c80:	57 e4       	ldi	r21, 0x47	; 71
    1c82:	69 8d       	ldd	r22, Y+25	; 0x19
    1c84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c8a:	76 d2       	rcall	.+1260   	; 0x2178 <__gesf2>
    1c8c:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8e:	3c f5       	brge	.+78     	; 0x1cde <main+0x3cc>
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e2       	ldi	r20, 0x20	; 32
    1c96:	51 e4       	ldi	r21, 0x41	; 65
    1c98:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca0:	6f d2       	rcall	.+1246   	; 0x2180 <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	ed d1       	rcall	.+986    	; 0x2086 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	9e 8f       	std	Y+30, r25	; 0x1e
    1cb2:	8d 8f       	std	Y+29, r24	; 0x1d
    1cb4:	0f c0       	rjmp	.+30     	; 0x1cd4 <main+0x3c2>
    1cb6:	80 e9       	ldi	r24, 0x90	; 144
    1cb8:	91 e0       	ldi	r25, 0x01	; 1
    1cba:	98 a3       	std	Y+32, r25	; 0x20
    1cbc:	8f 8f       	std	Y+31, r24	; 0x1f
    1cbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cc0:	98 a1       	ldd	r25, Y+32	; 0x20
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <main+0x3b0>
    1cc6:	98 a3       	std	Y+32, r25	; 0x20
    1cc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ccc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	9e 8f       	std	Y+30, r25	; 0x1e
    1cd2:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cd8:	89 2b       	or	r24, r25
    1cda:	69 f7       	brne	.-38     	; 0x1cb6 <main+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cdc:	13 c0       	rjmp	.+38     	; 0x1d04 <main+0x3f2>
    1cde:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ce2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce6:	cf d1       	rcall	.+926    	; 0x2086 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	9e 8f       	std	Y+30, r25	; 0x1e
    1cee:	8d 8f       	std	Y+29, r24	; 0x1d
    1cf0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cf2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cf4:	9a a3       	std	Y+34, r25	; 0x22
    1cf6:	89 a3       	std	Y+33, r24	; 0x21
    1cf8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cfa:	9a a1       	ldd	r25, Y+34	; 0x22
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <main+0x3ea>
    1d00:	9a a3       	std	Y+34, r25	; 0x22
    1d02:	89 a3       	std	Y+33, r24	; 0x21
		_delay_ms(1500);
		clear_screen();
    1d04:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <clear_screen>
		title();
    1d08:	b9 d8       	rcall	.-3726   	; 0xe7c <title>
    1d0a:	50 c1       	rjmp	.+672    	; 0x1fac <main+0x69a>
		

		while(game == 1)
    1d0c:	87 e2       	ldi	r24, 0x27	; 39
			{
				SendCommand01(0x0F, 0x01, 0x03);
				dir = DOWN;
			}*/

			ADMUX = (1<<REFS0) | (2 << MUX0);//기준전압 AVCC 사용, ADC2 단극성 입력
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	22 e4       	ldi	r18, 0x42	; 66
    1d12:	fc 01       	movw	r30, r24
    1d14:	20 83       	st	Z, r18
    1d16:	86 e2       	ldi	r24, 0x26	; 38
			ADCSRA = (1<<ADEN) | (1<<ADSC) | (7 << ADPS0);	//ADCSRA = 0x87;// ADEN=1, 16MHz의 128분주 -> 125kHz
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	27 ec       	ldi	r18, 0xC7	; 199
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	20 83       	st	Z, r18
    1d20:	00 00       	nop
			
			while((ADCSRA & (1<<ADIF)) == 0);	//변환 종료를 기다림
    1d22:	86 e2       	ldi	r24, 0x26	; 38
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	fc 01       	movw	r30, r24
    1d28:	80 81       	ld	r24, Z
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	80 71       	andi	r24, 0x10	; 16
    1d30:	99 27       	eor	r25, r25
    1d32:	89 2b       	or	r24, r25
    1d34:	b1 f3       	breq	.-20     	; 0x1d22 <main+0x410>
    1d36:	86 e2       	ldi	r24, 0x26	; 38
			ADCSRA |= (1<<ADIF);	//ADIF 플래그를 지움
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	26 e2       	ldi	r18, 0x26	; 38
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	f9 01       	movw	r30, r18
    1d40:	20 81       	ld	r18, Z
    1d42:	20 61       	ori	r18, 0x10	; 16
    1d44:	fc 01       	movw	r30, r24
    1d46:	20 83       	st	Z, r18
    1d48:	84 e2       	ldi	r24, 0x24	; 36

			val_ADC_button = ADC;
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	80 81       	ld	r24, Z
    1d50:	91 81       	ldd	r25, Z+1	; 0x01
    1d52:	cc 01       	movw	r24, r24
    1d54:	a0 e0       	ldi	r26, 0x00	; 0
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	89 8b       	std	Y+17, r24	; 0x11
    1d5a:	9a 8b       	std	Y+18, r25	; 0x12
    1d5c:	ab 8b       	std	Y+19, r26	; 0x13
    1d5e:	bc 8b       	std	Y+20, r27	; 0x14
    1d60:	89 89       	ldd	r24, Y+17	; 0x11
			if(val_ADC_button >=740 && val_ADC_button <= 780)
    1d62:	9a 89       	ldd	r25, Y+18	; 0x12
    1d64:	ab 89       	ldd	r26, Y+19	; 0x13
    1d66:	bc 89       	ldd	r27, Y+20	; 0x14
    1d68:	84 3e       	cpi	r24, 0xE4	; 228
    1d6a:	92 40       	sbci	r25, 0x02	; 2
    1d6c:	a1 05       	cpc	r26, r1
    1d6e:	b1 05       	cpc	r27, r1
    1d70:	ac f0       	brlt	.+42     	; 0x1d9c <main+0x48a>
    1d72:	89 89       	ldd	r24, Y+17	; 0x11
    1d74:	9a 89       	ldd	r25, Y+18	; 0x12
    1d76:	ab 89       	ldd	r26, Y+19	; 0x13
    1d78:	bc 89       	ldd	r27, Y+20	; 0x14
    1d7a:	8d 30       	cpi	r24, 0x0D	; 13
    1d7c:	93 40       	sbci	r25, 0x03	; 3
    1d7e:	a1 05       	cpc	r26, r1
    1d80:	b1 05       	cpc	r27, r1
    1d82:	64 f4       	brge	.+24     	; 0x1d9c <main+0x48a>
    1d84:	43 e0       	ldi	r20, 0x03	; 3
			{
				SendCommand01(0x0F, 0x01, 0x03);
    1d86:	61 e0       	ldi	r22, 0x01	; 1
    1d88:	8f e0       	ldi	r24, 0x0F	; 15
    1d8a:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
    1d8e:	88 e4       	ldi	r24, 0x48	; 72
				dir = UP;
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    1d96:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    1d9a:	50 c0       	rjmp	.+160    	; 0x1e3c <main+0x52a>
    1d9c:	89 89       	ldd	r24, Y+17	; 0x11
			}
			else if(val_ADC_button >=640 && val_ADC_button <=700)
    1d9e:	9a 89       	ldd	r25, Y+18	; 0x12
    1da0:	ab 89       	ldd	r26, Y+19	; 0x13
    1da2:	bc 89       	ldd	r27, Y+20	; 0x14
    1da4:	80 38       	cpi	r24, 0x80	; 128
    1da6:	92 40       	sbci	r25, 0x02	; 2
    1da8:	a1 05       	cpc	r26, r1
    1daa:	b1 05       	cpc	r27, r1
    1dac:	ac f0       	brlt	.+42     	; 0x1dd8 <main+0x4c6>
    1dae:	89 89       	ldd	r24, Y+17	; 0x11
    1db0:	9a 89       	ldd	r25, Y+18	; 0x12
    1db2:	ab 89       	ldd	r26, Y+19	; 0x13
    1db4:	bc 89       	ldd	r27, Y+20	; 0x14
    1db6:	8d 3b       	cpi	r24, 0xBD	; 189
    1db8:	92 40       	sbci	r25, 0x02	; 2
    1dba:	a1 05       	cpc	r26, r1
    1dbc:	b1 05       	cpc	r27, r1
    1dbe:	64 f4       	brge	.+24     	; 0x1dd8 <main+0x4c6>
    1dc0:	43 e0       	ldi	r20, 0x03	; 3
			{
				SendCommand01(0x0F, 0x01, 0x03);
    1dc2:	61 e0       	ldi	r22, 0x01	; 1
    1dc4:	8f e0       	ldi	r24, 0x0F	; 15
    1dc6:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
    1dca:	8d e4       	ldi	r24, 0x4D	; 77
				dir = RIGHT;
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    1dd2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    1dd6:	32 c0       	rjmp	.+100    	; 0x1e3c <main+0x52a>
    1dd8:	89 89       	ldd	r24, Y+17	; 0x11
			}
			else if(val_ADC_button >=480 && val_ADC_button <=550)
    1dda:	9a 89       	ldd	r25, Y+18	; 0x12
    1ddc:	ab 89       	ldd	r26, Y+19	; 0x13
    1dde:	bc 89       	ldd	r27, Y+20	; 0x14
    1de0:	80 3e       	cpi	r24, 0xE0	; 224
    1de2:	91 40       	sbci	r25, 0x01	; 1
    1de4:	a1 05       	cpc	r26, r1
    1de6:	b1 05       	cpc	r27, r1
    1de8:	ac f0       	brlt	.+42     	; 0x1e14 <main+0x502>
    1dea:	89 89       	ldd	r24, Y+17	; 0x11
    1dec:	9a 89       	ldd	r25, Y+18	; 0x12
    1dee:	ab 89       	ldd	r26, Y+19	; 0x13
    1df0:	bc 89       	ldd	r27, Y+20	; 0x14
    1df2:	87 32       	cpi	r24, 0x27	; 39
    1df4:	92 40       	sbci	r25, 0x02	; 2
    1df6:	a1 05       	cpc	r26, r1
    1df8:	b1 05       	cpc	r27, r1
    1dfa:	64 f4       	brge	.+24     	; 0x1e14 <main+0x502>
    1dfc:	43 e0       	ldi	r20, 0x03	; 3
			{
				SendCommand01(0x0F, 0x01, 0x03);
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	8f e0       	ldi	r24, 0x0F	; 15
    1e02:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
    1e06:	8b e4       	ldi	r24, 0x4B	; 75
				dir = LEFT;
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    1e0e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
    1e12:	14 c0       	rjmp	.+40     	; 0x1e3c <main+0x52a>
			}
			else if(val_ADC_button <= 100)
    1e14:	89 89       	ldd	r24, Y+17	; 0x11
    1e16:	9a 89       	ldd	r25, Y+18	; 0x12
    1e18:	ab 89       	ldd	r26, Y+19	; 0x13
    1e1a:	bc 89       	ldd	r27, Y+20	; 0x14
    1e1c:	85 36       	cpi	r24, 0x65	; 101
    1e1e:	91 05       	cpc	r25, r1
    1e20:	a1 05       	cpc	r26, r1
    1e22:	b1 05       	cpc	r27, r1
			{
				SendCommand01(0x0F, 0x01, 0x03);
    1e24:	5c f4       	brge	.+22     	; 0x1e3c <main+0x52a>
    1e26:	43 e0       	ldi	r20, 0x03	; 3
    1e28:	61 e0       	ldi	r22, 0x01	; 1
    1e2a:	8f e0       	ldi	r24, 0x0F	; 15
    1e2c:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
				dir = DOWN;
    1e30:	80 e5       	ldi	r24, 0x50	; 80
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
    1e38:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
			}

			move(dir);
    1e3c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    1e40:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
			//SendCommand01(0x0F, 0x01, 0x02);
			draw_map();
    1e44:	b4 da       	rcall	.-2712   	; 0x13ae <move>
    1e46:	78 d8       	rcall	.-3856   	; 0xf38 <draw_map>
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	a0 ea       	ldi	r26, 0xA0	; 160
    1e4e:	b2 e4       	ldi	r27, 0x42	; 66
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	ab 83       	std	Y+3, r26	; 0x03
    1e56:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e58:	8e 01       	movw	r16, r28
    1e5a:	0f 5b       	subi	r16, 0xBF	; 191
    1e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	4a e7       	ldi	r20, 0x7A	; 122
    1e64:	55 e4       	ldi	r21, 0x45	; 69
    1e66:	69 81       	ldd	r22, Y+1	; 0x01
    1e68:	7a 81       	ldd	r23, Y+2	; 0x02
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	88 d1       	rcall	.+784    	; 0x2180 <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	f8 01       	movw	r30, r16
    1e76:	80 83       	st	Z, r24
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	a2 83       	std	Z+2, r26	; 0x02
    1e7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e7e:	ce 01       	movw	r24, r28
    1e80:	8f 5b       	subi	r24, 0xBF	; 191
    1e82:	9f 4f       	sbci	r25, 0xFF	; 255
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e8       	ldi	r20, 0x80	; 128
    1e8a:	5f e3       	ldi	r21, 0x3F	; 63
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	60 81       	ld	r22, Z
    1e90:	71 81       	ldd	r23, Z+1	; 0x01
    1e92:	82 81       	ldd	r24, Z+2	; 0x02
    1e94:	93 81       	ldd	r25, Z+3	; 0x03
    1e96:	f3 d0       	rcall	.+486    	; 0x207e <__cmpsf2>
    1e98:	88 23       	and	r24, r24
    1e9a:	4c f4       	brge	.+18     	; 0x1eae <main+0x59c>
		__ticks = 1;
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	8b 5b       	subi	r24, 0xBB	; 187
    1ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea2:	21 e0       	ldi	r18, 0x01	; 1
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	31 83       	std	Z+1, r19	; 0x01
    1eaa:	20 83       	st	Z, r18
	else if (__tmp > 65535)
    1eac:	65 c0       	rjmp	.+202    	; 0x1f78 <main+0x666>
    1eae:	ce 01       	movw	r24, r28
    1eb0:	8f 5b       	subi	r24, 0xBF	; 191
    1eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	3f ef       	ldi	r19, 0xFF	; 255
    1eb8:	4f e7       	ldi	r20, 0x7F	; 127
    1eba:	57 e4       	ldi	r21, 0x47	; 71
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	60 81       	ld	r22, Z
    1ec0:	71 81       	ldd	r23, Z+1	; 0x01
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	58 d1       	rcall	.+688    	; 0x2178 <__gesf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	0c f0       	brlt	.+2      	; 0x1ece <main+0x5bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	44 c0       	rjmp	.+136    	; 0x1f56 <main+0x644>
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e2       	ldi	r20, 0x20	; 32
    1ed4:	51 e4       	ldi	r21, 0x41	; 65
    1ed6:	69 81       	ldd	r22, Y+1	; 0x01
    1ed8:	7a 81       	ldd	r23, Y+2	; 0x02
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	50 d1       	rcall	.+672    	; 0x2180 <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	8e 01       	movw	r16, r28
    1ee6:	0b 5b       	subi	r16, 0xBB	; 187
    1ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	cb d0       	rcall	.+406    	; 0x2086 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	f8 01       	movw	r30, r16
    1ef6:	91 83       	std	Z+1, r25	; 0x01
    1ef8:	80 83       	st	Z, r24
    1efa:	24 c0       	rjmp	.+72     	; 0x1f44 <main+0x632>
    1efc:	ce 01       	movw	r24, r28
    1efe:	89 5b       	subi	r24, 0xB9	; 185
    1f00:	9f 4f       	sbci	r25, 0xFF	; 255
    1f02:	20 e9       	ldi	r18, 0x90	; 144
    1f04:	31 e0       	ldi	r19, 0x01	; 1
    1f06:	fc 01       	movw	r30, r24
    1f08:	31 83       	std	Z+1, r19	; 0x01
    1f0a:	20 83       	st	Z, r18
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	89 5b       	subi	r24, 0xB9	; 185
    1f10:	9f 4f       	sbci	r25, 0xFF	; 255
    1f12:	fc 01       	movw	r30, r24
    1f14:	80 81       	ld	r24, Z
    1f16:	91 81       	ldd	r25, Z+1	; 0x01
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <main+0x606>
    1f1c:	9e 01       	movw	r18, r28
    1f1e:	29 5b       	subi	r18, 0xB9	; 185
    1f20:	3f 4f       	sbci	r19, 0xFF	; 255
    1f22:	f9 01       	movw	r30, r18
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	80 83       	st	Z, r24
    1f28:	ce 01       	movw	r24, r28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2a:	8b 5b       	subi	r24, 0xBB	; 187
    1f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2e:	9e 01       	movw	r18, r28
    1f30:	2b 5b       	subi	r18, 0xBB	; 187
    1f32:	3f 4f       	sbci	r19, 0xFF	; 255
    1f34:	f9 01       	movw	r30, r18
    1f36:	20 81       	ld	r18, Z
    1f38:	31 81       	ldd	r19, Z+1	; 0x01
    1f3a:	21 50       	subi	r18, 0x01	; 1
    1f3c:	31 09       	sbc	r19, r1
    1f3e:	fc 01       	movw	r30, r24
    1f40:	31 83       	std	Z+1, r19	; 0x01
    1f42:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f44:	ce 01       	movw	r24, r28
    1f46:	8b 5b       	subi	r24, 0xBB	; 187
    1f48:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	80 81       	ld	r24, Z
    1f4e:	91 81       	ldd	r25, Z+1	; 0x01
    1f50:	89 2b       	or	r24, r25
    1f52:	a1 f6       	brne	.-88     	; 0x1efc <main+0x5ea>
    1f54:	2b c0       	rjmp	.+86     	; 0x1fac <main+0x69a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f56:	8e 01       	movw	r16, r28
    1f58:	0b 5b       	subi	r16, 0xBB	; 187
    1f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	8f 5b       	subi	r24, 0xBF	; 191
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	fc 01       	movw	r30, r24
    1f64:	60 81       	ld	r22, Z
    1f66:	71 81       	ldd	r23, Z+1	; 0x01
    1f68:	82 81       	ldd	r24, Z+2	; 0x02
    1f6a:	93 81       	ldd	r25, Z+3	; 0x03
    1f6c:	8c d0       	rcall	.+280    	; 0x2086 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	f8 01       	movw	r30, r16
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	80 83       	st	Z, r24
    1f78:	ce 01       	movw	r24, r28
    1f7a:	87 5b       	subi	r24, 0xB7	; 183
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	9e 01       	movw	r18, r28
    1f80:	2b 5b       	subi	r18, 0xBB	; 187
    1f82:	3f 4f       	sbci	r19, 0xFF	; 255
    1f84:	f9 01       	movw	r30, r18
    1f86:	20 81       	ld	r18, Z
    1f88:	31 81       	ldd	r19, Z+1	; 0x01
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	31 83       	std	Z+1, r19	; 0x01
    1f8e:	20 83       	st	Z, r18
    1f90:	ce 01       	movw	r24, r28
    1f92:	87 5b       	subi	r24, 0xB7	; 183
    1f94:	9f 4f       	sbci	r25, 0xFF	; 255
    1f96:	fc 01       	movw	r30, r24
    1f98:	80 81       	ld	r24, Z
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <main+0x68a>
    1fa0:	9e 01       	movw	r18, r28
    1fa2:	27 5b       	subi	r18, 0xB7	; 183
    1fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa6:	f9 01       	movw	r30, r18
    1fa8:	91 83       	std	Z+1, r25	; 0x01
    1faa:	80 83       	st	Z, r24
    1fac:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
		_delay_ms(1500);
		clear_screen();
		title();
		

		while(game == 1)
    1fb0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <main+0x6a8>
    1fb8:	a9 ce       	rjmp	.-686    	; 0x1d0c <main+0x3fa>
    1fba:	ba cc       	rjmp	.-1676   	; 0x1930 <main+0x1e>

00001fbc <clear_map>:
			move(dir);
			//SendCommand01(0x0F, 0x01, 0x02);
			draw_map();
			_delay_ms(80);
		}
	}
    1fbc:	cf 93       	push	r28
	
}

void clear_map()
{
    1fbe:	df 93       	push	r29
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <clear_map+0x6>
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <clear_map+0x8>
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <clear_map+0xa>
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
	for(int i = 1; i < 127; i++)
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	9a 83       	std	Y+2, r25	; 0x02
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	1f c0       	rjmp	.+62     	; 0x2012 <clear_map+0x56>
	{
		
		for(int j = 3; j < 7; j++)
    1fd4:	83 e0       	ldi	r24, 0x03	; 3
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	9c 83       	std	Y+4, r25	; 0x04
    1fda:	8b 83       	std	Y+3, r24	; 0x03
    1fdc:	11 c0       	rjmp	.+34     	; 0x2000 <clear_map+0x44>
		{
			ssd1306_set_page_start(j);
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ssd1306_set_page_start>
			ssd1306_set_column_addr(i);
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	0e 94 0c 04 	call	0x818	; 0x818 <ssd1306_set_column_addr>
			ssd1306_data(blank, 1);
    1fea:	61 e0       	ldi	r22, 0x01	; 1
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	88 e3       	ldi	r24, 0x38	; 56
    1ff0:	97 e0       	ldi	r25, 0x07	; 7
    1ff2:	0e 94 77 03 	call	0x6ee	; 0x6ee <ssd1306_data>
void clear_map()
{
	for(int i = 1; i < 127; i++)
	{
		
		for(int j = 3; j < 7; j++)
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	01 96       	adiw	r24, 0x01	; 1
    1ffc:	9c 83       	std	Y+4, r25	; 0x04
    1ffe:	8b 83       	std	Y+3, r24	; 0x03
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	9c 81       	ldd	r25, Y+4	; 0x04
    2004:	07 97       	sbiw	r24, 0x07	; 7
    2006:	5c f3       	brlt	.-42     	; 0x1fde <clear_map+0x22>
	
}

void clear_map()
{
	for(int i = 1; i < 127; i++)
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	9a 81       	ldd	r25, Y+2	; 0x02
    200c:	01 96       	adiw	r24, 0x01	; 1
    200e:	9a 83       	std	Y+2, r25	; 0x02
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	8f 37       	cpi	r24, 0x7F	; 127
    2018:	91 05       	cpc	r25, r1
    201a:	e4 f2       	brlt	.-72     	; 0x1fd4 <clear_map+0x18>
			ssd1306_set_column_addr(i);
			ssd1306_data(blank, 1);
		}
	}

	for(int i = 1; i < 127; i++)
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9e 83       	std	Y+6, r25	; 0x06
    2022:	8d 83       	std	Y+5, r24	; 0x05
    2024:	1d c0       	rjmp	.+58     	; 0x2060 <clear_map+0xa4>
	{
		ssd1306_set_page_start(2);
    2026:	82 e0       	ldi	r24, 0x02	; 2
    2028:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    202c:	8d 81       	ldd	r24, Y+5	; 0x05
    202e:	0e 94 0c 04 	call	0x818	; 0x818 <ssd1306_set_column_addr>
		ssd1306_data(horizon1, 1);
    2032:	61 e0       	ldi	r22, 0x01	; 1
    2034:	70 e0       	ldi	r23, 0x00	; 0
    2036:	8a e0       	ldi	r24, 0x0A	; 10
    2038:	91 e0       	ldi	r25, 0x01	; 1
    203a:	0e 94 77 03 	call	0x6ee	; 0x6ee <ssd1306_data>
		ssd1306_set_page_start(7);
    203e:	87 e0       	ldi	r24, 0x07	; 7
    2040:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    2044:	8d 81       	ldd	r24, Y+5	; 0x05
    2046:	0e 94 0c 04 	call	0x818	; 0x818 <ssd1306_set_column_addr>
		ssd1306_data(horizon2, 1);
    204a:	61 e0       	ldi	r22, 0x01	; 1
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	8b e0       	ldi	r24, 0x0B	; 11
    2050:	91 e0       	ldi	r25, 0x01	; 1
    2052:	0e 94 77 03 	call	0x6ee	; 0x6ee <ssd1306_data>
			ssd1306_set_column_addr(i);
			ssd1306_data(blank, 1);
		}
	}

	for(int i = 1; i < 127; i++)
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	9e 81       	ldd	r25, Y+6	; 0x06
    205a:	01 96       	adiw	r24, 0x01	; 1
    205c:	9e 83       	std	Y+6, r25	; 0x06
    205e:	8d 83       	std	Y+5, r24	; 0x05
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	9e 81       	ldd	r25, Y+6	; 0x06
    2064:	8f 37       	cpi	r24, 0x7F	; 127
    2066:	91 05       	cpc	r25, r1
    2068:	f4 f2       	brlt	.-68     	; 0x2026 <clear_map+0x6a>
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
    206a:	00 00       	nop
    206c:	26 96       	adiw	r28, 0x06	; 6
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	08 95       	ret

0000207e <__cmpsf2>:
    207e:	2f d0       	rcall	.+94     	; 0x20de <__fp_cmp>
    2080:	08 f4       	brcc	.+2      	; 0x2084 <__cmpsf2+0x6>
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	08 95       	ret

00002086 <__fixunssfsi>:
    2086:	57 d0       	rcall	.+174    	; 0x2136 <__fp_splitA>
    2088:	88 f0       	brcs	.+34     	; 0x20ac <__fixunssfsi+0x26>
    208a:	9f 57       	subi	r25, 0x7F	; 127
    208c:	90 f0       	brcs	.+36     	; 0x20b2 <__fixunssfsi+0x2c>
    208e:	b9 2f       	mov	r27, r25
    2090:	99 27       	eor	r25, r25
    2092:	b7 51       	subi	r27, 0x17	; 23
    2094:	a0 f0       	brcs	.+40     	; 0x20be <__fixunssfsi+0x38>
    2096:	d1 f0       	breq	.+52     	; 0x20cc <__fixunssfsi+0x46>
    2098:	66 0f       	add	r22, r22
    209a:	77 1f       	adc	r23, r23
    209c:	88 1f       	adc	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	1a f0       	brmi	.+6      	; 0x20a8 <__fixunssfsi+0x22>
    20a2:	ba 95       	dec	r27
    20a4:	c9 f7       	brne	.-14     	; 0x2098 <__fixunssfsi+0x12>
    20a6:	12 c0       	rjmp	.+36     	; 0x20cc <__fixunssfsi+0x46>
    20a8:	b1 30       	cpi	r27, 0x01	; 1
    20aa:	81 f0       	breq	.+32     	; 0x20cc <__fixunssfsi+0x46>
    20ac:	5e d0       	rcall	.+188    	; 0x216a <__fp_zero>
    20ae:	b1 e0       	ldi	r27, 0x01	; 1
    20b0:	08 95       	ret
    20b2:	5b c0       	rjmp	.+182    	; 0x216a <__fp_zero>
    20b4:	67 2f       	mov	r22, r23
    20b6:	78 2f       	mov	r23, r24
    20b8:	88 27       	eor	r24, r24
    20ba:	b8 5f       	subi	r27, 0xF8	; 248
    20bc:	39 f0       	breq	.+14     	; 0x20cc <__fixunssfsi+0x46>
    20be:	b9 3f       	cpi	r27, 0xF9	; 249
    20c0:	cc f3       	brlt	.-14     	; 0x20b4 <__fixunssfsi+0x2e>
    20c2:	86 95       	lsr	r24
    20c4:	77 95       	ror	r23
    20c6:	67 95       	ror	r22
    20c8:	b3 95       	inc	r27
    20ca:	d9 f7       	brne	.-10     	; 0x20c2 <__fixunssfsi+0x3c>
    20cc:	3e f4       	brtc	.+14     	; 0x20dc <__fixunssfsi+0x56>
    20ce:	90 95       	com	r25
    20d0:	80 95       	com	r24
    20d2:	70 95       	com	r23
    20d4:	61 95       	neg	r22
    20d6:	7f 4f       	sbci	r23, 0xFF	; 255
    20d8:	8f 4f       	sbci	r24, 0xFF	; 255
    20da:	9f 4f       	sbci	r25, 0xFF	; 255
    20dc:	08 95       	ret

000020de <__fp_cmp>:
    20de:	99 0f       	add	r25, r25
    20e0:	00 08       	sbc	r0, r0
    20e2:	55 0f       	add	r21, r21
    20e4:	aa 0b       	sbc	r26, r26
    20e6:	e0 e8       	ldi	r30, 0x80	; 128
    20e8:	fe ef       	ldi	r31, 0xFE	; 254
    20ea:	16 16       	cp	r1, r22
    20ec:	17 06       	cpc	r1, r23
    20ee:	e8 07       	cpc	r30, r24
    20f0:	f9 07       	cpc	r31, r25
    20f2:	c0 f0       	brcs	.+48     	; 0x2124 <__fp_cmp+0x46>
    20f4:	12 16       	cp	r1, r18
    20f6:	13 06       	cpc	r1, r19
    20f8:	e4 07       	cpc	r30, r20
    20fa:	f5 07       	cpc	r31, r21
    20fc:	98 f0       	brcs	.+38     	; 0x2124 <__fp_cmp+0x46>
    20fe:	62 1b       	sub	r22, r18
    2100:	73 0b       	sbc	r23, r19
    2102:	84 0b       	sbc	r24, r20
    2104:	95 0b       	sbc	r25, r21
    2106:	39 f4       	brne	.+14     	; 0x2116 <__fp_cmp+0x38>
    2108:	0a 26       	eor	r0, r26
    210a:	61 f0       	breq	.+24     	; 0x2124 <__fp_cmp+0x46>
    210c:	23 2b       	or	r18, r19
    210e:	24 2b       	or	r18, r20
    2110:	25 2b       	or	r18, r21
    2112:	21 f4       	brne	.+8      	; 0x211c <__fp_cmp+0x3e>
    2114:	08 95       	ret
    2116:	0a 26       	eor	r0, r26
    2118:	09 f4       	brne	.+2      	; 0x211c <__fp_cmp+0x3e>
    211a:	a1 40       	sbci	r26, 0x01	; 1
    211c:	a6 95       	lsr	r26
    211e:	8f ef       	ldi	r24, 0xFF	; 255
    2120:	81 1d       	adc	r24, r1
    2122:	81 1d       	adc	r24, r1
    2124:	08 95       	ret

00002126 <__fp_split3>:
    2126:	57 fd       	sbrc	r21, 7
    2128:	90 58       	subi	r25, 0x80	; 128
    212a:	44 0f       	add	r20, r20
    212c:	55 1f       	adc	r21, r21
    212e:	59 f0       	breq	.+22     	; 0x2146 <__fp_splitA+0x10>
    2130:	5f 3f       	cpi	r21, 0xFF	; 255
    2132:	71 f0       	breq	.+28     	; 0x2150 <__fp_splitA+0x1a>
    2134:	47 95       	ror	r20

00002136 <__fp_splitA>:
    2136:	88 0f       	add	r24, r24
    2138:	97 fb       	bst	r25, 7
    213a:	99 1f       	adc	r25, r25
    213c:	61 f0       	breq	.+24     	; 0x2156 <__fp_splitA+0x20>
    213e:	9f 3f       	cpi	r25, 0xFF	; 255
    2140:	79 f0       	breq	.+30     	; 0x2160 <__fp_splitA+0x2a>
    2142:	87 95       	ror	r24
    2144:	08 95       	ret
    2146:	12 16       	cp	r1, r18
    2148:	13 06       	cpc	r1, r19
    214a:	14 06       	cpc	r1, r20
    214c:	55 1f       	adc	r21, r21
    214e:	f2 cf       	rjmp	.-28     	; 0x2134 <__fp_split3+0xe>
    2150:	46 95       	lsr	r20
    2152:	f1 df       	rcall	.-30     	; 0x2136 <__fp_splitA>
    2154:	08 c0       	rjmp	.+16     	; 0x2166 <__fp_splitA+0x30>
    2156:	16 16       	cp	r1, r22
    2158:	17 06       	cpc	r1, r23
    215a:	18 06       	cpc	r1, r24
    215c:	99 1f       	adc	r25, r25
    215e:	f1 cf       	rjmp	.-30     	; 0x2142 <__fp_splitA+0xc>
    2160:	86 95       	lsr	r24
    2162:	71 05       	cpc	r23, r1
    2164:	61 05       	cpc	r22, r1
    2166:	08 94       	sec
    2168:	08 95       	ret

0000216a <__fp_zero>:
    216a:	e8 94       	clt

0000216c <__fp_szero>:
    216c:	bb 27       	eor	r27, r27
    216e:	66 27       	eor	r22, r22
    2170:	77 27       	eor	r23, r23
    2172:	cb 01       	movw	r24, r22
    2174:	97 f9       	bld	r25, 7
    2176:	08 95       	ret

00002178 <__gesf2>:
    2178:	b2 df       	rcall	.-156    	; 0x20de <__fp_cmp>
    217a:	08 f4       	brcc	.+2      	; 0x217e <__gesf2+0x6>
    217c:	8f ef       	ldi	r24, 0xFF	; 255
    217e:	08 95       	ret

00002180 <__mulsf3>:
    2180:	0b d0       	rcall	.+22     	; 0x2198 <__mulsf3x>
    2182:	78 c0       	rjmp	.+240    	; 0x2274 <__fp_round>
    2184:	69 d0       	rcall	.+210    	; 0x2258 <__fp_pscA>
    2186:	28 f0       	brcs	.+10     	; 0x2192 <__mulsf3+0x12>
    2188:	6e d0       	rcall	.+220    	; 0x2266 <__fp_pscB>
    218a:	18 f0       	brcs	.+6      	; 0x2192 <__mulsf3+0x12>
    218c:	95 23       	and	r25, r21
    218e:	09 f0       	breq	.+2      	; 0x2192 <__mulsf3+0x12>
    2190:	5a c0       	rjmp	.+180    	; 0x2246 <__fp_inf>
    2192:	5f c0       	rjmp	.+190    	; 0x2252 <__fp_nan>
    2194:	11 24       	eor	r1, r1
    2196:	ea cf       	rjmp	.-44     	; 0x216c <__fp_szero>

00002198 <__mulsf3x>:
    2198:	c6 df       	rcall	.-116    	; 0x2126 <__fp_split3>
    219a:	a0 f3       	brcs	.-24     	; 0x2184 <__mulsf3+0x4>

0000219c <__mulsf3_pse>:
    219c:	95 9f       	mul	r25, r21
    219e:	d1 f3       	breq	.-12     	; 0x2194 <__mulsf3+0x14>
    21a0:	95 0f       	add	r25, r21
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	55 1f       	adc	r21, r21
    21a6:	62 9f       	mul	r22, r18
    21a8:	f0 01       	movw	r30, r0
    21aa:	72 9f       	mul	r23, r18
    21ac:	bb 27       	eor	r27, r27
    21ae:	f0 0d       	add	r31, r0
    21b0:	b1 1d       	adc	r27, r1
    21b2:	63 9f       	mul	r22, r19
    21b4:	aa 27       	eor	r26, r26
    21b6:	f0 0d       	add	r31, r0
    21b8:	b1 1d       	adc	r27, r1
    21ba:	aa 1f       	adc	r26, r26
    21bc:	64 9f       	mul	r22, r20
    21be:	66 27       	eor	r22, r22
    21c0:	b0 0d       	add	r27, r0
    21c2:	a1 1d       	adc	r26, r1
    21c4:	66 1f       	adc	r22, r22
    21c6:	82 9f       	mul	r24, r18
    21c8:	22 27       	eor	r18, r18
    21ca:	b0 0d       	add	r27, r0
    21cc:	a1 1d       	adc	r26, r1
    21ce:	62 1f       	adc	r22, r18
    21d0:	73 9f       	mul	r23, r19
    21d2:	b0 0d       	add	r27, r0
    21d4:	a1 1d       	adc	r26, r1
    21d6:	62 1f       	adc	r22, r18
    21d8:	83 9f       	mul	r24, r19
    21da:	a0 0d       	add	r26, r0
    21dc:	61 1d       	adc	r22, r1
    21de:	22 1f       	adc	r18, r18
    21e0:	74 9f       	mul	r23, r20
    21e2:	33 27       	eor	r19, r19
    21e4:	a0 0d       	add	r26, r0
    21e6:	61 1d       	adc	r22, r1
    21e8:	23 1f       	adc	r18, r19
    21ea:	84 9f       	mul	r24, r20
    21ec:	60 0d       	add	r22, r0
    21ee:	21 1d       	adc	r18, r1
    21f0:	82 2f       	mov	r24, r18
    21f2:	76 2f       	mov	r23, r22
    21f4:	6a 2f       	mov	r22, r26
    21f6:	11 24       	eor	r1, r1
    21f8:	9f 57       	subi	r25, 0x7F	; 127
    21fa:	50 40       	sbci	r21, 0x00	; 0
    21fc:	8a f0       	brmi	.+34     	; 0x2220 <__mulsf3_pse+0x84>
    21fe:	e1 f0       	breq	.+56     	; 0x2238 <__mulsf3_pse+0x9c>
    2200:	88 23       	and	r24, r24
    2202:	4a f0       	brmi	.+18     	; 0x2216 <__mulsf3_pse+0x7a>
    2204:	ee 0f       	add	r30, r30
    2206:	ff 1f       	adc	r31, r31
    2208:	bb 1f       	adc	r27, r27
    220a:	66 1f       	adc	r22, r22
    220c:	77 1f       	adc	r23, r23
    220e:	88 1f       	adc	r24, r24
    2210:	91 50       	subi	r25, 0x01	; 1
    2212:	50 40       	sbci	r21, 0x00	; 0
    2214:	a9 f7       	brne	.-22     	; 0x2200 <__mulsf3_pse+0x64>
    2216:	9e 3f       	cpi	r25, 0xFE	; 254
    2218:	51 05       	cpc	r21, r1
    221a:	70 f0       	brcs	.+28     	; 0x2238 <__mulsf3_pse+0x9c>
    221c:	14 c0       	rjmp	.+40     	; 0x2246 <__fp_inf>
    221e:	a6 cf       	rjmp	.-180    	; 0x216c <__fp_szero>
    2220:	5f 3f       	cpi	r21, 0xFF	; 255
    2222:	ec f3       	brlt	.-6      	; 0x221e <__mulsf3_pse+0x82>
    2224:	98 3e       	cpi	r25, 0xE8	; 232
    2226:	dc f3       	brlt	.-10     	; 0x221e <__mulsf3_pse+0x82>
    2228:	86 95       	lsr	r24
    222a:	77 95       	ror	r23
    222c:	67 95       	ror	r22
    222e:	b7 95       	ror	r27
    2230:	f7 95       	ror	r31
    2232:	e7 95       	ror	r30
    2234:	9f 5f       	subi	r25, 0xFF	; 255
    2236:	c1 f7       	brne	.-16     	; 0x2228 <__mulsf3_pse+0x8c>
    2238:	fe 2b       	or	r31, r30
    223a:	88 0f       	add	r24, r24
    223c:	91 1d       	adc	r25, r1
    223e:	96 95       	lsr	r25
    2240:	87 95       	ror	r24
    2242:	97 f9       	bld	r25, 7
    2244:	08 95       	ret

00002246 <__fp_inf>:
    2246:	97 f9       	bld	r25, 7
    2248:	9f 67       	ori	r25, 0x7F	; 127
    224a:	80 e8       	ldi	r24, 0x80	; 128
    224c:	70 e0       	ldi	r23, 0x00	; 0
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	08 95       	ret

00002252 <__fp_nan>:
    2252:	9f ef       	ldi	r25, 0xFF	; 255
    2254:	80 ec       	ldi	r24, 0xC0	; 192
    2256:	08 95       	ret

00002258 <__fp_pscA>:
    2258:	00 24       	eor	r0, r0
    225a:	0a 94       	dec	r0
    225c:	16 16       	cp	r1, r22
    225e:	17 06       	cpc	r1, r23
    2260:	18 06       	cpc	r1, r24
    2262:	09 06       	cpc	r0, r25
    2264:	08 95       	ret

00002266 <__fp_pscB>:
    2266:	00 24       	eor	r0, r0
    2268:	0a 94       	dec	r0
    226a:	12 16       	cp	r1, r18
    226c:	13 06       	cpc	r1, r19
    226e:	14 06       	cpc	r1, r20
    2270:	05 06       	cpc	r0, r21
    2272:	08 95       	ret

00002274 <__fp_round>:
    2274:	09 2e       	mov	r0, r25
    2276:	03 94       	inc	r0
    2278:	00 0c       	add	r0, r0
    227a:	11 f4       	brne	.+4      	; 0x2280 <__fp_round+0xc>
    227c:	88 23       	and	r24, r24
    227e:	52 f0       	brmi	.+20     	; 0x2294 <__fp_round+0x20>
    2280:	bb 0f       	add	r27, r27
    2282:	40 f4       	brcc	.+16     	; 0x2294 <__fp_round+0x20>
    2284:	bf 2b       	or	r27, r31
    2286:	11 f4       	brne	.+4      	; 0x228c <__fp_round+0x18>
    2288:	60 ff       	sbrs	r22, 0
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <__fp_round+0x20>
    228c:	6f 5f       	subi	r22, 0xFF	; 255
    228e:	7f 4f       	sbci	r23, 0xFF	; 255
    2290:	8f 4f       	sbci	r24, 0xFF	; 255
    2292:	9f 4f       	sbci	r25, 0xFF	; 255
    2294:	08 95       	ret

00002296 <__divmodhi4>:
    2296:	97 fb       	bst	r25, 7
    2298:	07 2e       	mov	r0, r23
    229a:	16 f4       	brtc	.+4      	; 0x22a0 <__divmodhi4+0xa>
    229c:	00 94       	com	r0
    229e:	06 d0       	rcall	.+12     	; 0x22ac <__divmodhi4_neg1>
    22a0:	77 fd       	sbrc	r23, 7
    22a2:	08 d0       	rcall	.+16     	; 0x22b4 <__divmodhi4_neg2>
    22a4:	0b d0       	rcall	.+22     	; 0x22bc <__udivmodhi4>
    22a6:	07 fc       	sbrc	r0, 7
    22a8:	05 d0       	rcall	.+10     	; 0x22b4 <__divmodhi4_neg2>
    22aa:	3e f4       	brtc	.+14     	; 0x22ba <__divmodhi4_exit>

000022ac <__divmodhi4_neg1>:
    22ac:	90 95       	com	r25
    22ae:	81 95       	neg	r24
    22b0:	9f 4f       	sbci	r25, 0xFF	; 255
    22b2:	08 95       	ret

000022b4 <__divmodhi4_neg2>:
    22b4:	70 95       	com	r23
    22b6:	61 95       	neg	r22
    22b8:	7f 4f       	sbci	r23, 0xFF	; 255

000022ba <__divmodhi4_exit>:
    22ba:	08 95       	ret

000022bc <__udivmodhi4>:
    22bc:	aa 1b       	sub	r26, r26
    22be:	bb 1b       	sub	r27, r27
    22c0:	51 e1       	ldi	r21, 0x11	; 17
    22c2:	07 c0       	rjmp	.+14     	; 0x22d2 <__udivmodhi4_ep>

000022c4 <__udivmodhi4_loop>:
    22c4:	aa 1f       	adc	r26, r26
    22c6:	bb 1f       	adc	r27, r27
    22c8:	a6 17       	cp	r26, r22
    22ca:	b7 07       	cpc	r27, r23
    22cc:	10 f0       	brcs	.+4      	; 0x22d2 <__udivmodhi4_ep>
    22ce:	a6 1b       	sub	r26, r22
    22d0:	b7 0b       	sbc	r27, r23

000022d2 <__udivmodhi4_ep>:
    22d2:	88 1f       	adc	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	5a 95       	dec	r21
    22d8:	a9 f7       	brne	.-22     	; 0x22c4 <__udivmodhi4_loop>
    22da:	80 95       	com	r24
    22dc:	90 95       	com	r25
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	08 95       	ret

000022e4 <do_rand>:
    22e4:	8f 92       	push	r8
    22e6:	9f 92       	push	r9
    22e8:	af 92       	push	r10
    22ea:	bf 92       	push	r11
    22ec:	cf 92       	push	r12
    22ee:	df 92       	push	r13
    22f0:	ef 92       	push	r14
    22f2:	ff 92       	push	r15
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	ec 01       	movw	r28, r24
    22fa:	68 81       	ld	r22, Y
    22fc:	79 81       	ldd	r23, Y+1	; 0x01
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	9b 81       	ldd	r25, Y+3	; 0x03
    2302:	61 15       	cp	r22, r1
    2304:	71 05       	cpc	r23, r1
    2306:	81 05       	cpc	r24, r1
    2308:	91 05       	cpc	r25, r1
    230a:	21 f4       	brne	.+8      	; 0x2314 <do_rand+0x30>
    230c:	64 e2       	ldi	r22, 0x24	; 36
    230e:	79 ed       	ldi	r23, 0xD9	; 217
    2310:	8b e5       	ldi	r24, 0x5B	; 91
    2312:	97 e0       	ldi	r25, 0x07	; 7
    2314:	2d e1       	ldi	r18, 0x1D	; 29
    2316:	33 ef       	ldi	r19, 0xF3	; 243
    2318:	41 e0       	ldi	r20, 0x01	; 1
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	0d d3       	rcall	.+1562   	; 0x2938 <__divmodsi4>
    231e:	49 01       	movw	r8, r18
    2320:	5a 01       	movw	r10, r20
    2322:	9b 01       	movw	r18, r22
    2324:	ac 01       	movw	r20, r24
    2326:	a7 ea       	ldi	r26, 0xA7	; 167
    2328:	b1 e4       	ldi	r27, 0x41	; 65
    232a:	22 d3       	rcall	.+1604   	; 0x2970 <__muluhisi3>
    232c:	6b 01       	movw	r12, r22
    232e:	7c 01       	movw	r14, r24
    2330:	ac ee       	ldi	r26, 0xEC	; 236
    2332:	b4 ef       	ldi	r27, 0xF4	; 244
    2334:	a5 01       	movw	r20, r10
    2336:	94 01       	movw	r18, r8
    2338:	27 d3       	rcall	.+1614   	; 0x2988 <__mulohisi3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	8c 0d       	add	r24, r12
    2340:	9d 1d       	adc	r25, r13
    2342:	ae 1d       	adc	r26, r14
    2344:	bf 1d       	adc	r27, r15
    2346:	b7 ff       	sbrs	r27, 7
    2348:	03 c0       	rjmp	.+6      	; 0x2350 <do_rand+0x6c>
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	a1 09       	sbc	r26, r1
    234e:	b0 48       	sbci	r27, 0x80	; 128
    2350:	88 83       	st	Y, r24
    2352:	99 83       	std	Y+1, r25	; 0x01
    2354:	aa 83       	std	Y+2, r26	; 0x02
    2356:	bb 83       	std	Y+3, r27	; 0x03
    2358:	9f 77       	andi	r25, 0x7F	; 127
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	ff 90       	pop	r15
    2360:	ef 90       	pop	r14
    2362:	df 90       	pop	r13
    2364:	cf 90       	pop	r12
    2366:	bf 90       	pop	r11
    2368:	af 90       	pop	r10
    236a:	9f 90       	pop	r9
    236c:	8f 90       	pop	r8
    236e:	08 95       	ret

00002370 <rand_r>:
    2370:	b9 cf       	rjmp	.-142    	; 0x22e4 <do_rand>

00002372 <rand>:
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	91 e0       	ldi	r25, 0x01	; 1
    2376:	b6 cf       	rjmp	.-148    	; 0x22e4 <do_rand>

00002378 <srand>:
    2378:	a0 e0       	ldi	r26, 0x00	; 0
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    2380:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2384:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    2388:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    238c:	08 95       	ret

0000238e <vsprintf>:
    238e:	0f 93       	push	r16
    2390:	1f 93       	push	r17
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	2e 97       	sbiw	r28, 0x0e	; 14
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	8c 01       	movw	r16, r24
    23a8:	86 e0       	ldi	r24, 0x06	; 6
    23aa:	8c 83       	std	Y+4, r24	; 0x04
    23ac:	1a 83       	std	Y+2, r17	; 0x02
    23ae:	09 83       	std	Y+1, r16	; 0x01
    23b0:	8f ef       	ldi	r24, 0xFF	; 255
    23b2:	9f e7       	ldi	r25, 0x7F	; 127
    23b4:	9e 83       	std	Y+6, r25	; 0x06
    23b6:	8d 83       	std	Y+5, r24	; 0x05
    23b8:	ce 01       	movw	r24, r28
    23ba:	01 96       	adiw	r24, 0x01	; 1
    23bc:	10 d0       	rcall	.+32     	; 0x23de <vfprintf>
    23be:	ef 81       	ldd	r30, Y+7	; 0x07
    23c0:	f8 85       	ldd	r31, Y+8	; 0x08
    23c2:	e0 0f       	add	r30, r16
    23c4:	f1 1f       	adc	r31, r17
    23c6:	10 82       	st	Z, r1
    23c8:	2e 96       	adiw	r28, 0x0e	; 14
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	1f 91       	pop	r17
    23da:	0f 91       	pop	r16
    23dc:	08 95       	ret

000023de <vfprintf>:
    23de:	2f 92       	push	r2
    23e0:	3f 92       	push	r3
    23e2:	4f 92       	push	r4
    23e4:	5f 92       	push	r5
    23e6:	6f 92       	push	r6
    23e8:	7f 92       	push	r7
    23ea:	8f 92       	push	r8
    23ec:	9f 92       	push	r9
    23ee:	af 92       	push	r10
    23f0:	bf 92       	push	r11
    23f2:	cf 92       	push	r12
    23f4:	df 92       	push	r13
    23f6:	ef 92       	push	r14
    23f8:	ff 92       	push	r15
    23fa:	0f 93       	push	r16
    23fc:	1f 93       	push	r17
    23fe:	cf 93       	push	r28
    2400:	df 93       	push	r29
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	2b 97       	sbiw	r28, 0x0b	; 11
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	6c 01       	movw	r12, r24
    2414:	7b 01       	movw	r14, r22
    2416:	8a 01       	movw	r16, r20
    2418:	fc 01       	movw	r30, r24
    241a:	17 82       	std	Z+7, r1	; 0x07
    241c:	16 82       	std	Z+6, r1	; 0x06
    241e:	83 81       	ldd	r24, Z+3	; 0x03
    2420:	81 ff       	sbrs	r24, 1
    2422:	bf c1       	rjmp	.+894    	; 0x27a2 <vfprintf+0x3c4>
    2424:	ce 01       	movw	r24, r28
    2426:	01 96       	adiw	r24, 0x01	; 1
    2428:	3c 01       	movw	r6, r24
    242a:	f6 01       	movw	r30, r12
    242c:	93 81       	ldd	r25, Z+3	; 0x03
    242e:	f7 01       	movw	r30, r14
    2430:	93 fd       	sbrc	r25, 3
    2432:	85 91       	lpm	r24, Z+
    2434:	93 ff       	sbrs	r25, 3
    2436:	81 91       	ld	r24, Z+
    2438:	7f 01       	movw	r14, r30
    243a:	88 23       	and	r24, r24
    243c:	09 f4       	brne	.+2      	; 0x2440 <vfprintf+0x62>
    243e:	ad c1       	rjmp	.+858    	; 0x279a <vfprintf+0x3bc>
    2440:	85 32       	cpi	r24, 0x25	; 37
    2442:	39 f4       	brne	.+14     	; 0x2452 <vfprintf+0x74>
    2444:	93 fd       	sbrc	r25, 3
    2446:	85 91       	lpm	r24, Z+
    2448:	93 ff       	sbrs	r25, 3
    244a:	81 91       	ld	r24, Z+
    244c:	7f 01       	movw	r14, r30
    244e:	85 32       	cpi	r24, 0x25	; 37
    2450:	21 f4       	brne	.+8      	; 0x245a <vfprintf+0x7c>
    2452:	b6 01       	movw	r22, r12
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	d6 d1       	rcall	.+940    	; 0x2804 <fputc>
    2458:	e8 cf       	rjmp	.-48     	; 0x242a <vfprintf+0x4c>
    245a:	91 2c       	mov	r9, r1
    245c:	21 2c       	mov	r2, r1
    245e:	31 2c       	mov	r3, r1
    2460:	ff e1       	ldi	r31, 0x1F	; 31
    2462:	f3 15       	cp	r31, r3
    2464:	d8 f0       	brcs	.+54     	; 0x249c <vfprintf+0xbe>
    2466:	8b 32       	cpi	r24, 0x2B	; 43
    2468:	79 f0       	breq	.+30     	; 0x2488 <vfprintf+0xaa>
    246a:	38 f4       	brcc	.+14     	; 0x247a <vfprintf+0x9c>
    246c:	80 32       	cpi	r24, 0x20	; 32
    246e:	79 f0       	breq	.+30     	; 0x248e <vfprintf+0xb0>
    2470:	83 32       	cpi	r24, 0x23	; 35
    2472:	a1 f4       	brne	.+40     	; 0x249c <vfprintf+0xbe>
    2474:	23 2d       	mov	r18, r3
    2476:	20 61       	ori	r18, 0x10	; 16
    2478:	1d c0       	rjmp	.+58     	; 0x24b4 <vfprintf+0xd6>
    247a:	8d 32       	cpi	r24, 0x2D	; 45
    247c:	61 f0       	breq	.+24     	; 0x2496 <vfprintf+0xb8>
    247e:	80 33       	cpi	r24, 0x30	; 48
    2480:	69 f4       	brne	.+26     	; 0x249c <vfprintf+0xbe>
    2482:	23 2d       	mov	r18, r3
    2484:	21 60       	ori	r18, 0x01	; 1
    2486:	16 c0       	rjmp	.+44     	; 0x24b4 <vfprintf+0xd6>
    2488:	83 2d       	mov	r24, r3
    248a:	82 60       	ori	r24, 0x02	; 2
    248c:	38 2e       	mov	r3, r24
    248e:	e3 2d       	mov	r30, r3
    2490:	e4 60       	ori	r30, 0x04	; 4
    2492:	3e 2e       	mov	r3, r30
    2494:	2a c0       	rjmp	.+84     	; 0x24ea <vfprintf+0x10c>
    2496:	f3 2d       	mov	r31, r3
    2498:	f8 60       	ori	r31, 0x08	; 8
    249a:	1d c0       	rjmp	.+58     	; 0x24d6 <vfprintf+0xf8>
    249c:	37 fc       	sbrc	r3, 7
    249e:	2d c0       	rjmp	.+90     	; 0x24fa <vfprintf+0x11c>
    24a0:	20 ed       	ldi	r18, 0xD0	; 208
    24a2:	28 0f       	add	r18, r24
    24a4:	2a 30       	cpi	r18, 0x0A	; 10
    24a6:	40 f0       	brcs	.+16     	; 0x24b8 <vfprintf+0xda>
    24a8:	8e 32       	cpi	r24, 0x2E	; 46
    24aa:	b9 f4       	brne	.+46     	; 0x24da <vfprintf+0xfc>
    24ac:	36 fc       	sbrc	r3, 6
    24ae:	75 c1       	rjmp	.+746    	; 0x279a <vfprintf+0x3bc>
    24b0:	23 2d       	mov	r18, r3
    24b2:	20 64       	ori	r18, 0x40	; 64
    24b4:	32 2e       	mov	r3, r18
    24b6:	19 c0       	rjmp	.+50     	; 0x24ea <vfprintf+0x10c>
    24b8:	36 fe       	sbrs	r3, 6
    24ba:	06 c0       	rjmp	.+12     	; 0x24c8 <vfprintf+0xea>
    24bc:	8a e0       	ldi	r24, 0x0A	; 10
    24be:	98 9e       	mul	r9, r24
    24c0:	20 0d       	add	r18, r0
    24c2:	11 24       	eor	r1, r1
    24c4:	92 2e       	mov	r9, r18
    24c6:	11 c0       	rjmp	.+34     	; 0x24ea <vfprintf+0x10c>
    24c8:	ea e0       	ldi	r30, 0x0A	; 10
    24ca:	2e 9e       	mul	r2, r30
    24cc:	20 0d       	add	r18, r0
    24ce:	11 24       	eor	r1, r1
    24d0:	22 2e       	mov	r2, r18
    24d2:	f3 2d       	mov	r31, r3
    24d4:	f0 62       	ori	r31, 0x20	; 32
    24d6:	3f 2e       	mov	r3, r31
    24d8:	08 c0       	rjmp	.+16     	; 0x24ea <vfprintf+0x10c>
    24da:	8c 36       	cpi	r24, 0x6C	; 108
    24dc:	21 f4       	brne	.+8      	; 0x24e6 <vfprintf+0x108>
    24de:	83 2d       	mov	r24, r3
    24e0:	80 68       	ori	r24, 0x80	; 128
    24e2:	38 2e       	mov	r3, r24
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <vfprintf+0x10c>
    24e6:	88 36       	cpi	r24, 0x68	; 104
    24e8:	41 f4       	brne	.+16     	; 0x24fa <vfprintf+0x11c>
    24ea:	f7 01       	movw	r30, r14
    24ec:	93 fd       	sbrc	r25, 3
    24ee:	85 91       	lpm	r24, Z+
    24f0:	93 ff       	sbrs	r25, 3
    24f2:	81 91       	ld	r24, Z+
    24f4:	7f 01       	movw	r14, r30
    24f6:	81 11       	cpse	r24, r1
    24f8:	b3 cf       	rjmp	.-154    	; 0x2460 <vfprintf+0x82>
    24fa:	98 2f       	mov	r25, r24
    24fc:	9f 7d       	andi	r25, 0xDF	; 223
    24fe:	95 54       	subi	r25, 0x45	; 69
    2500:	93 30       	cpi	r25, 0x03	; 3
    2502:	28 f4       	brcc	.+10     	; 0x250e <vfprintf+0x130>
    2504:	0c 5f       	subi	r16, 0xFC	; 252
    2506:	1f 4f       	sbci	r17, 0xFF	; 255
    2508:	9f e3       	ldi	r25, 0x3F	; 63
    250a:	99 83       	std	Y+1, r25	; 0x01
    250c:	0d c0       	rjmp	.+26     	; 0x2528 <vfprintf+0x14a>
    250e:	83 36       	cpi	r24, 0x63	; 99
    2510:	31 f0       	breq	.+12     	; 0x251e <vfprintf+0x140>
    2512:	83 37       	cpi	r24, 0x73	; 115
    2514:	71 f0       	breq	.+28     	; 0x2532 <vfprintf+0x154>
    2516:	83 35       	cpi	r24, 0x53	; 83
    2518:	09 f0       	breq	.+2      	; 0x251c <vfprintf+0x13e>
    251a:	55 c0       	rjmp	.+170    	; 0x25c6 <vfprintf+0x1e8>
    251c:	20 c0       	rjmp	.+64     	; 0x255e <vfprintf+0x180>
    251e:	f8 01       	movw	r30, r16
    2520:	80 81       	ld	r24, Z
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	0e 5f       	subi	r16, 0xFE	; 254
    2526:	1f 4f       	sbci	r17, 0xFF	; 255
    2528:	88 24       	eor	r8, r8
    252a:	83 94       	inc	r8
    252c:	91 2c       	mov	r9, r1
    252e:	53 01       	movw	r10, r6
    2530:	12 c0       	rjmp	.+36     	; 0x2556 <vfprintf+0x178>
    2532:	28 01       	movw	r4, r16
    2534:	f2 e0       	ldi	r31, 0x02	; 2
    2536:	4f 0e       	add	r4, r31
    2538:	51 1c       	adc	r5, r1
    253a:	f8 01       	movw	r30, r16
    253c:	a0 80       	ld	r10, Z
    253e:	b1 80       	ldd	r11, Z+1	; 0x01
    2540:	36 fe       	sbrs	r3, 6
    2542:	03 c0       	rjmp	.+6      	; 0x254a <vfprintf+0x16c>
    2544:	69 2d       	mov	r22, r9
    2546:	70 e0       	ldi	r23, 0x00	; 0
    2548:	02 c0       	rjmp	.+4      	; 0x254e <vfprintf+0x170>
    254a:	6f ef       	ldi	r22, 0xFF	; 255
    254c:	7f ef       	ldi	r23, 0xFF	; 255
    254e:	c5 01       	movw	r24, r10
    2550:	4e d1       	rcall	.+668    	; 0x27ee <strnlen>
    2552:	4c 01       	movw	r8, r24
    2554:	82 01       	movw	r16, r4
    2556:	f3 2d       	mov	r31, r3
    2558:	ff 77       	andi	r31, 0x7F	; 127
    255a:	3f 2e       	mov	r3, r31
    255c:	15 c0       	rjmp	.+42     	; 0x2588 <vfprintf+0x1aa>
    255e:	28 01       	movw	r4, r16
    2560:	22 e0       	ldi	r18, 0x02	; 2
    2562:	42 0e       	add	r4, r18
    2564:	51 1c       	adc	r5, r1
    2566:	f8 01       	movw	r30, r16
    2568:	a0 80       	ld	r10, Z
    256a:	b1 80       	ldd	r11, Z+1	; 0x01
    256c:	36 fe       	sbrs	r3, 6
    256e:	03 c0       	rjmp	.+6      	; 0x2576 <vfprintf+0x198>
    2570:	69 2d       	mov	r22, r9
    2572:	70 e0       	ldi	r23, 0x00	; 0
    2574:	02 c0       	rjmp	.+4      	; 0x257a <vfprintf+0x19c>
    2576:	6f ef       	ldi	r22, 0xFF	; 255
    2578:	7f ef       	ldi	r23, 0xFF	; 255
    257a:	c5 01       	movw	r24, r10
    257c:	2d d1       	rcall	.+602    	; 0x27d8 <strnlen_P>
    257e:	4c 01       	movw	r8, r24
    2580:	f3 2d       	mov	r31, r3
    2582:	f0 68       	ori	r31, 0x80	; 128
    2584:	3f 2e       	mov	r3, r31
    2586:	82 01       	movw	r16, r4
    2588:	33 fc       	sbrc	r3, 3
    258a:	19 c0       	rjmp	.+50     	; 0x25be <vfprintf+0x1e0>
    258c:	82 2d       	mov	r24, r2
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	88 16       	cp	r8, r24
    2592:	99 06       	cpc	r9, r25
    2594:	a0 f4       	brcc	.+40     	; 0x25be <vfprintf+0x1e0>
    2596:	b6 01       	movw	r22, r12
    2598:	80 e2       	ldi	r24, 0x20	; 32
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	33 d1       	rcall	.+614    	; 0x2804 <fputc>
    259e:	2a 94       	dec	r2
    25a0:	f5 cf       	rjmp	.-22     	; 0x258c <vfprintf+0x1ae>
    25a2:	f5 01       	movw	r30, r10
    25a4:	37 fc       	sbrc	r3, 7
    25a6:	85 91       	lpm	r24, Z+
    25a8:	37 fe       	sbrs	r3, 7
    25aa:	81 91       	ld	r24, Z+
    25ac:	5f 01       	movw	r10, r30
    25ae:	b6 01       	movw	r22, r12
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	28 d1       	rcall	.+592    	; 0x2804 <fputc>
    25b4:	21 10       	cpse	r2, r1
    25b6:	2a 94       	dec	r2
    25b8:	21 e0       	ldi	r18, 0x01	; 1
    25ba:	82 1a       	sub	r8, r18
    25bc:	91 08       	sbc	r9, r1
    25be:	81 14       	cp	r8, r1
    25c0:	91 04       	cpc	r9, r1
    25c2:	79 f7       	brne	.-34     	; 0x25a2 <vfprintf+0x1c4>
    25c4:	e1 c0       	rjmp	.+450    	; 0x2788 <vfprintf+0x3aa>
    25c6:	84 36       	cpi	r24, 0x64	; 100
    25c8:	11 f0       	breq	.+4      	; 0x25ce <vfprintf+0x1f0>
    25ca:	89 36       	cpi	r24, 0x69	; 105
    25cc:	39 f5       	brne	.+78     	; 0x261c <vfprintf+0x23e>
    25ce:	f8 01       	movw	r30, r16
    25d0:	37 fe       	sbrs	r3, 7
    25d2:	07 c0       	rjmp	.+14     	; 0x25e2 <vfprintf+0x204>
    25d4:	60 81       	ld	r22, Z
    25d6:	71 81       	ldd	r23, Z+1	; 0x01
    25d8:	82 81       	ldd	r24, Z+2	; 0x02
    25da:	93 81       	ldd	r25, Z+3	; 0x03
    25dc:	0c 5f       	subi	r16, 0xFC	; 252
    25de:	1f 4f       	sbci	r17, 0xFF	; 255
    25e0:	08 c0       	rjmp	.+16     	; 0x25f2 <vfprintf+0x214>
    25e2:	60 81       	ld	r22, Z
    25e4:	71 81       	ldd	r23, Z+1	; 0x01
    25e6:	07 2e       	mov	r0, r23
    25e8:	00 0c       	add	r0, r0
    25ea:	88 0b       	sbc	r24, r24
    25ec:	99 0b       	sbc	r25, r25
    25ee:	0e 5f       	subi	r16, 0xFE	; 254
    25f0:	1f 4f       	sbci	r17, 0xFF	; 255
    25f2:	f3 2d       	mov	r31, r3
    25f4:	ff 76       	andi	r31, 0x6F	; 111
    25f6:	3f 2e       	mov	r3, r31
    25f8:	97 ff       	sbrs	r25, 7
    25fa:	09 c0       	rjmp	.+18     	; 0x260e <vfprintf+0x230>
    25fc:	90 95       	com	r25
    25fe:	80 95       	com	r24
    2600:	70 95       	com	r23
    2602:	61 95       	neg	r22
    2604:	7f 4f       	sbci	r23, 0xFF	; 255
    2606:	8f 4f       	sbci	r24, 0xFF	; 255
    2608:	9f 4f       	sbci	r25, 0xFF	; 255
    260a:	f0 68       	ori	r31, 0x80	; 128
    260c:	3f 2e       	mov	r3, r31
    260e:	2a e0       	ldi	r18, 0x0A	; 10
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	a3 01       	movw	r20, r6
    2614:	33 d1       	rcall	.+614    	; 0x287c <__ultoa_invert>
    2616:	88 2e       	mov	r8, r24
    2618:	86 18       	sub	r8, r6
    261a:	44 c0       	rjmp	.+136    	; 0x26a4 <vfprintf+0x2c6>
    261c:	85 37       	cpi	r24, 0x75	; 117
    261e:	31 f4       	brne	.+12     	; 0x262c <vfprintf+0x24e>
    2620:	23 2d       	mov	r18, r3
    2622:	2f 7e       	andi	r18, 0xEF	; 239
    2624:	b2 2e       	mov	r11, r18
    2626:	2a e0       	ldi	r18, 0x0A	; 10
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	25 c0       	rjmp	.+74     	; 0x2676 <vfprintf+0x298>
    262c:	93 2d       	mov	r25, r3
    262e:	99 7f       	andi	r25, 0xF9	; 249
    2630:	b9 2e       	mov	r11, r25
    2632:	8f 36       	cpi	r24, 0x6F	; 111
    2634:	c1 f0       	breq	.+48     	; 0x2666 <vfprintf+0x288>
    2636:	18 f4       	brcc	.+6      	; 0x263e <vfprintf+0x260>
    2638:	88 35       	cpi	r24, 0x58	; 88
    263a:	79 f0       	breq	.+30     	; 0x265a <vfprintf+0x27c>
    263c:	ae c0       	rjmp	.+348    	; 0x279a <vfprintf+0x3bc>
    263e:	80 37       	cpi	r24, 0x70	; 112
    2640:	19 f0       	breq	.+6      	; 0x2648 <vfprintf+0x26a>
    2642:	88 37       	cpi	r24, 0x78	; 120
    2644:	21 f0       	breq	.+8      	; 0x264e <vfprintf+0x270>
    2646:	a9 c0       	rjmp	.+338    	; 0x279a <vfprintf+0x3bc>
    2648:	e9 2f       	mov	r30, r25
    264a:	e0 61       	ori	r30, 0x10	; 16
    264c:	be 2e       	mov	r11, r30
    264e:	b4 fe       	sbrs	r11, 4
    2650:	0d c0       	rjmp	.+26     	; 0x266c <vfprintf+0x28e>
    2652:	fb 2d       	mov	r31, r11
    2654:	f4 60       	ori	r31, 0x04	; 4
    2656:	bf 2e       	mov	r11, r31
    2658:	09 c0       	rjmp	.+18     	; 0x266c <vfprintf+0x28e>
    265a:	34 fe       	sbrs	r3, 4
    265c:	0a c0       	rjmp	.+20     	; 0x2672 <vfprintf+0x294>
    265e:	29 2f       	mov	r18, r25
    2660:	26 60       	ori	r18, 0x06	; 6
    2662:	b2 2e       	mov	r11, r18
    2664:	06 c0       	rjmp	.+12     	; 0x2672 <vfprintf+0x294>
    2666:	28 e0       	ldi	r18, 0x08	; 8
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	05 c0       	rjmp	.+10     	; 0x2676 <vfprintf+0x298>
    266c:	20 e1       	ldi	r18, 0x10	; 16
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	02 c0       	rjmp	.+4      	; 0x2676 <vfprintf+0x298>
    2672:	20 e1       	ldi	r18, 0x10	; 16
    2674:	32 e0       	ldi	r19, 0x02	; 2
    2676:	f8 01       	movw	r30, r16
    2678:	b7 fe       	sbrs	r11, 7
    267a:	07 c0       	rjmp	.+14     	; 0x268a <vfprintf+0x2ac>
    267c:	60 81       	ld	r22, Z
    267e:	71 81       	ldd	r23, Z+1	; 0x01
    2680:	82 81       	ldd	r24, Z+2	; 0x02
    2682:	93 81       	ldd	r25, Z+3	; 0x03
    2684:	0c 5f       	subi	r16, 0xFC	; 252
    2686:	1f 4f       	sbci	r17, 0xFF	; 255
    2688:	06 c0       	rjmp	.+12     	; 0x2696 <vfprintf+0x2b8>
    268a:	60 81       	ld	r22, Z
    268c:	71 81       	ldd	r23, Z+1	; 0x01
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	0e 5f       	subi	r16, 0xFE	; 254
    2694:	1f 4f       	sbci	r17, 0xFF	; 255
    2696:	a3 01       	movw	r20, r6
    2698:	f1 d0       	rcall	.+482    	; 0x287c <__ultoa_invert>
    269a:	88 2e       	mov	r8, r24
    269c:	86 18       	sub	r8, r6
    269e:	fb 2d       	mov	r31, r11
    26a0:	ff 77       	andi	r31, 0x7F	; 127
    26a2:	3f 2e       	mov	r3, r31
    26a4:	36 fe       	sbrs	r3, 6
    26a6:	0d c0       	rjmp	.+26     	; 0x26c2 <vfprintf+0x2e4>
    26a8:	23 2d       	mov	r18, r3
    26aa:	2e 7f       	andi	r18, 0xFE	; 254
    26ac:	a2 2e       	mov	r10, r18
    26ae:	89 14       	cp	r8, r9
    26b0:	58 f4       	brcc	.+22     	; 0x26c8 <vfprintf+0x2ea>
    26b2:	34 fe       	sbrs	r3, 4
    26b4:	0b c0       	rjmp	.+22     	; 0x26cc <vfprintf+0x2ee>
    26b6:	32 fc       	sbrc	r3, 2
    26b8:	09 c0       	rjmp	.+18     	; 0x26cc <vfprintf+0x2ee>
    26ba:	83 2d       	mov	r24, r3
    26bc:	8e 7e       	andi	r24, 0xEE	; 238
    26be:	a8 2e       	mov	r10, r24
    26c0:	05 c0       	rjmp	.+10     	; 0x26cc <vfprintf+0x2ee>
    26c2:	b8 2c       	mov	r11, r8
    26c4:	a3 2c       	mov	r10, r3
    26c6:	03 c0       	rjmp	.+6      	; 0x26ce <vfprintf+0x2f0>
    26c8:	b8 2c       	mov	r11, r8
    26ca:	01 c0       	rjmp	.+2      	; 0x26ce <vfprintf+0x2f0>
    26cc:	b9 2c       	mov	r11, r9
    26ce:	a4 fe       	sbrs	r10, 4
    26d0:	0f c0       	rjmp	.+30     	; 0x26f0 <vfprintf+0x312>
    26d2:	fe 01       	movw	r30, r28
    26d4:	e8 0d       	add	r30, r8
    26d6:	f1 1d       	adc	r31, r1
    26d8:	80 81       	ld	r24, Z
    26da:	80 33       	cpi	r24, 0x30	; 48
    26dc:	21 f4       	brne	.+8      	; 0x26e6 <vfprintf+0x308>
    26de:	9a 2d       	mov	r25, r10
    26e0:	99 7e       	andi	r25, 0xE9	; 233
    26e2:	a9 2e       	mov	r10, r25
    26e4:	09 c0       	rjmp	.+18     	; 0x26f8 <vfprintf+0x31a>
    26e6:	a2 fe       	sbrs	r10, 2
    26e8:	06 c0       	rjmp	.+12     	; 0x26f6 <vfprintf+0x318>
    26ea:	b3 94       	inc	r11
    26ec:	b3 94       	inc	r11
    26ee:	04 c0       	rjmp	.+8      	; 0x26f8 <vfprintf+0x31a>
    26f0:	8a 2d       	mov	r24, r10
    26f2:	86 78       	andi	r24, 0x86	; 134
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <vfprintf+0x31a>
    26f6:	b3 94       	inc	r11
    26f8:	a3 fc       	sbrc	r10, 3
    26fa:	10 c0       	rjmp	.+32     	; 0x271c <vfprintf+0x33e>
    26fc:	a0 fe       	sbrs	r10, 0
    26fe:	06 c0       	rjmp	.+12     	; 0x270c <vfprintf+0x32e>
    2700:	b2 14       	cp	r11, r2
    2702:	80 f4       	brcc	.+32     	; 0x2724 <vfprintf+0x346>
    2704:	28 0c       	add	r2, r8
    2706:	92 2c       	mov	r9, r2
    2708:	9b 18       	sub	r9, r11
    270a:	0d c0       	rjmp	.+26     	; 0x2726 <vfprintf+0x348>
    270c:	b2 14       	cp	r11, r2
    270e:	58 f4       	brcc	.+22     	; 0x2726 <vfprintf+0x348>
    2710:	b6 01       	movw	r22, r12
    2712:	80 e2       	ldi	r24, 0x20	; 32
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	76 d0       	rcall	.+236    	; 0x2804 <fputc>
    2718:	b3 94       	inc	r11
    271a:	f8 cf       	rjmp	.-16     	; 0x270c <vfprintf+0x32e>
    271c:	b2 14       	cp	r11, r2
    271e:	18 f4       	brcc	.+6      	; 0x2726 <vfprintf+0x348>
    2720:	2b 18       	sub	r2, r11
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <vfprintf+0x34a>
    2724:	98 2c       	mov	r9, r8
    2726:	21 2c       	mov	r2, r1
    2728:	a4 fe       	sbrs	r10, 4
    272a:	0f c0       	rjmp	.+30     	; 0x274a <vfprintf+0x36c>
    272c:	b6 01       	movw	r22, r12
    272e:	80 e3       	ldi	r24, 0x30	; 48
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	68 d0       	rcall	.+208    	; 0x2804 <fputc>
    2734:	a2 fe       	sbrs	r10, 2
    2736:	16 c0       	rjmp	.+44     	; 0x2764 <vfprintf+0x386>
    2738:	a1 fc       	sbrc	r10, 1
    273a:	03 c0       	rjmp	.+6      	; 0x2742 <vfprintf+0x364>
    273c:	88 e7       	ldi	r24, 0x78	; 120
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <vfprintf+0x368>
    2742:	88 e5       	ldi	r24, 0x58	; 88
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	b6 01       	movw	r22, r12
    2748:	0c c0       	rjmp	.+24     	; 0x2762 <vfprintf+0x384>
    274a:	8a 2d       	mov	r24, r10
    274c:	86 78       	andi	r24, 0x86	; 134
    274e:	51 f0       	breq	.+20     	; 0x2764 <vfprintf+0x386>
    2750:	a1 fe       	sbrs	r10, 1
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <vfprintf+0x37a>
    2754:	8b e2       	ldi	r24, 0x2B	; 43
    2756:	01 c0       	rjmp	.+2      	; 0x275a <vfprintf+0x37c>
    2758:	80 e2       	ldi	r24, 0x20	; 32
    275a:	a7 fc       	sbrc	r10, 7
    275c:	8d e2       	ldi	r24, 0x2D	; 45
    275e:	b6 01       	movw	r22, r12
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	50 d0       	rcall	.+160    	; 0x2804 <fputc>
    2764:	89 14       	cp	r8, r9
    2766:	30 f4       	brcc	.+12     	; 0x2774 <vfprintf+0x396>
    2768:	b6 01       	movw	r22, r12
    276a:	80 e3       	ldi	r24, 0x30	; 48
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	4a d0       	rcall	.+148    	; 0x2804 <fputc>
    2770:	9a 94       	dec	r9
    2772:	f8 cf       	rjmp	.-16     	; 0x2764 <vfprintf+0x386>
    2774:	8a 94       	dec	r8
    2776:	f3 01       	movw	r30, r6
    2778:	e8 0d       	add	r30, r8
    277a:	f1 1d       	adc	r31, r1
    277c:	80 81       	ld	r24, Z
    277e:	b6 01       	movw	r22, r12
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	40 d0       	rcall	.+128    	; 0x2804 <fputc>
    2784:	81 10       	cpse	r8, r1
    2786:	f6 cf       	rjmp	.-20     	; 0x2774 <vfprintf+0x396>
    2788:	22 20       	and	r2, r2
    278a:	09 f4       	brne	.+2      	; 0x278e <vfprintf+0x3b0>
    278c:	4e ce       	rjmp	.-868    	; 0x242a <vfprintf+0x4c>
    278e:	b6 01       	movw	r22, r12
    2790:	80 e2       	ldi	r24, 0x20	; 32
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	37 d0       	rcall	.+110    	; 0x2804 <fputc>
    2796:	2a 94       	dec	r2
    2798:	f7 cf       	rjmp	.-18     	; 0x2788 <vfprintf+0x3aa>
    279a:	f6 01       	movw	r30, r12
    279c:	86 81       	ldd	r24, Z+6	; 0x06
    279e:	97 81       	ldd	r25, Z+7	; 0x07
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <vfprintf+0x3c8>
    27a2:	8f ef       	ldi	r24, 0xFF	; 255
    27a4:	9f ef       	ldi	r25, 0xFF	; 255
    27a6:	2b 96       	adiw	r28, 0x0b	; 11
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	df 91       	pop	r29
    27b4:	cf 91       	pop	r28
    27b6:	1f 91       	pop	r17
    27b8:	0f 91       	pop	r16
    27ba:	ff 90       	pop	r15
    27bc:	ef 90       	pop	r14
    27be:	df 90       	pop	r13
    27c0:	cf 90       	pop	r12
    27c2:	bf 90       	pop	r11
    27c4:	af 90       	pop	r10
    27c6:	9f 90       	pop	r9
    27c8:	8f 90       	pop	r8
    27ca:	7f 90       	pop	r7
    27cc:	6f 90       	pop	r6
    27ce:	5f 90       	pop	r5
    27d0:	4f 90       	pop	r4
    27d2:	3f 90       	pop	r3
    27d4:	2f 90       	pop	r2
    27d6:	08 95       	ret

000027d8 <strnlen_P>:
    27d8:	fc 01       	movw	r30, r24
    27da:	05 90       	lpm	r0, Z+
    27dc:	61 50       	subi	r22, 0x01	; 1
    27de:	70 40       	sbci	r23, 0x00	; 0
    27e0:	01 10       	cpse	r0, r1
    27e2:	d8 f7       	brcc	.-10     	; 0x27da <strnlen_P+0x2>
    27e4:	80 95       	com	r24
    27e6:	90 95       	com	r25
    27e8:	8e 0f       	add	r24, r30
    27ea:	9f 1f       	adc	r25, r31
    27ec:	08 95       	ret

000027ee <strnlen>:
    27ee:	fc 01       	movw	r30, r24
    27f0:	61 50       	subi	r22, 0x01	; 1
    27f2:	70 40       	sbci	r23, 0x00	; 0
    27f4:	01 90       	ld	r0, Z+
    27f6:	01 10       	cpse	r0, r1
    27f8:	d8 f7       	brcc	.-10     	; 0x27f0 <strnlen+0x2>
    27fa:	80 95       	com	r24
    27fc:	90 95       	com	r25
    27fe:	8e 0f       	add	r24, r30
    2800:	9f 1f       	adc	r25, r31
    2802:	08 95       	ret

00002804 <fputc>:
    2804:	0f 93       	push	r16
    2806:	1f 93       	push	r17
    2808:	cf 93       	push	r28
    280a:	df 93       	push	r29
    280c:	fb 01       	movw	r30, r22
    280e:	23 81       	ldd	r18, Z+3	; 0x03
    2810:	21 fd       	sbrc	r18, 1
    2812:	03 c0       	rjmp	.+6      	; 0x281a <fputc+0x16>
    2814:	8f ef       	ldi	r24, 0xFF	; 255
    2816:	9f ef       	ldi	r25, 0xFF	; 255
    2818:	2c c0       	rjmp	.+88     	; 0x2872 <fputc+0x6e>
    281a:	22 ff       	sbrs	r18, 2
    281c:	16 c0       	rjmp	.+44     	; 0x284a <fputc+0x46>
    281e:	46 81       	ldd	r20, Z+6	; 0x06
    2820:	57 81       	ldd	r21, Z+7	; 0x07
    2822:	24 81       	ldd	r18, Z+4	; 0x04
    2824:	35 81       	ldd	r19, Z+5	; 0x05
    2826:	42 17       	cp	r20, r18
    2828:	53 07       	cpc	r21, r19
    282a:	44 f4       	brge	.+16     	; 0x283c <fputc+0x38>
    282c:	a0 81       	ld	r26, Z
    282e:	b1 81       	ldd	r27, Z+1	; 0x01
    2830:	9d 01       	movw	r18, r26
    2832:	2f 5f       	subi	r18, 0xFF	; 255
    2834:	3f 4f       	sbci	r19, 0xFF	; 255
    2836:	31 83       	std	Z+1, r19	; 0x01
    2838:	20 83       	st	Z, r18
    283a:	8c 93       	st	X, r24
    283c:	26 81       	ldd	r18, Z+6	; 0x06
    283e:	37 81       	ldd	r19, Z+7	; 0x07
    2840:	2f 5f       	subi	r18, 0xFF	; 255
    2842:	3f 4f       	sbci	r19, 0xFF	; 255
    2844:	37 83       	std	Z+7, r19	; 0x07
    2846:	26 83       	std	Z+6, r18	; 0x06
    2848:	14 c0       	rjmp	.+40     	; 0x2872 <fputc+0x6e>
    284a:	8b 01       	movw	r16, r22
    284c:	ec 01       	movw	r28, r24
    284e:	fb 01       	movw	r30, r22
    2850:	00 84       	ldd	r0, Z+8	; 0x08
    2852:	f1 85       	ldd	r31, Z+9	; 0x09
    2854:	e0 2d       	mov	r30, r0
    2856:	09 95       	icall
    2858:	89 2b       	or	r24, r25
    285a:	e1 f6       	brne	.-72     	; 0x2814 <fputc+0x10>
    285c:	d8 01       	movw	r26, r16
    285e:	16 96       	adiw	r26, 0x06	; 6
    2860:	8d 91       	ld	r24, X+
    2862:	9c 91       	ld	r25, X
    2864:	17 97       	sbiw	r26, 0x07	; 7
    2866:	01 96       	adiw	r24, 0x01	; 1
    2868:	17 96       	adiw	r26, 0x07	; 7
    286a:	9c 93       	st	X, r25
    286c:	8e 93       	st	-X, r24
    286e:	16 97       	sbiw	r26, 0x06	; 6
    2870:	ce 01       	movw	r24, r28
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	1f 91       	pop	r17
    2878:	0f 91       	pop	r16
    287a:	08 95       	ret

0000287c <__ultoa_invert>:
    287c:	fa 01       	movw	r30, r20
    287e:	aa 27       	eor	r26, r26
    2880:	28 30       	cpi	r18, 0x08	; 8
    2882:	51 f1       	breq	.+84     	; 0x28d8 <__ultoa_invert+0x5c>
    2884:	20 31       	cpi	r18, 0x10	; 16
    2886:	81 f1       	breq	.+96     	; 0x28e8 <__ultoa_invert+0x6c>
    2888:	e8 94       	clt
    288a:	6f 93       	push	r22
    288c:	6e 7f       	andi	r22, 0xFE	; 254
    288e:	6e 5f       	subi	r22, 0xFE	; 254
    2890:	7f 4f       	sbci	r23, 0xFF	; 255
    2892:	8f 4f       	sbci	r24, 0xFF	; 255
    2894:	9f 4f       	sbci	r25, 0xFF	; 255
    2896:	af 4f       	sbci	r26, 0xFF	; 255
    2898:	b1 e0       	ldi	r27, 0x01	; 1
    289a:	3e d0       	rcall	.+124    	; 0x2918 <__ultoa_invert+0x9c>
    289c:	b4 e0       	ldi	r27, 0x04	; 4
    289e:	3c d0       	rcall	.+120    	; 0x2918 <__ultoa_invert+0x9c>
    28a0:	67 0f       	add	r22, r23
    28a2:	78 1f       	adc	r23, r24
    28a4:	89 1f       	adc	r24, r25
    28a6:	9a 1f       	adc	r25, r26
    28a8:	a1 1d       	adc	r26, r1
    28aa:	68 0f       	add	r22, r24
    28ac:	79 1f       	adc	r23, r25
    28ae:	8a 1f       	adc	r24, r26
    28b0:	91 1d       	adc	r25, r1
    28b2:	a1 1d       	adc	r26, r1
    28b4:	6a 0f       	add	r22, r26
    28b6:	71 1d       	adc	r23, r1
    28b8:	81 1d       	adc	r24, r1
    28ba:	91 1d       	adc	r25, r1
    28bc:	a1 1d       	adc	r26, r1
    28be:	20 d0       	rcall	.+64     	; 0x2900 <__ultoa_invert+0x84>
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <__ultoa_invert+0x48>
    28c2:	68 94       	set
    28c4:	3f 91       	pop	r19
    28c6:	2a e0       	ldi	r18, 0x0A	; 10
    28c8:	26 9f       	mul	r18, r22
    28ca:	11 24       	eor	r1, r1
    28cc:	30 19       	sub	r19, r0
    28ce:	30 5d       	subi	r19, 0xD0	; 208
    28d0:	31 93       	st	Z+, r19
    28d2:	de f6       	brtc	.-74     	; 0x288a <__ultoa_invert+0xe>
    28d4:	cf 01       	movw	r24, r30
    28d6:	08 95       	ret
    28d8:	46 2f       	mov	r20, r22
    28da:	47 70       	andi	r20, 0x07	; 7
    28dc:	40 5d       	subi	r20, 0xD0	; 208
    28de:	41 93       	st	Z+, r20
    28e0:	b3 e0       	ldi	r27, 0x03	; 3
    28e2:	0f d0       	rcall	.+30     	; 0x2902 <__ultoa_invert+0x86>
    28e4:	c9 f7       	brne	.-14     	; 0x28d8 <__ultoa_invert+0x5c>
    28e6:	f6 cf       	rjmp	.-20     	; 0x28d4 <__ultoa_invert+0x58>
    28e8:	46 2f       	mov	r20, r22
    28ea:	4f 70       	andi	r20, 0x0F	; 15
    28ec:	40 5d       	subi	r20, 0xD0	; 208
    28ee:	4a 33       	cpi	r20, 0x3A	; 58
    28f0:	18 f0       	brcs	.+6      	; 0x28f8 <__ultoa_invert+0x7c>
    28f2:	49 5d       	subi	r20, 0xD9	; 217
    28f4:	31 fd       	sbrc	r19, 1
    28f6:	40 52       	subi	r20, 0x20	; 32
    28f8:	41 93       	st	Z+, r20
    28fa:	02 d0       	rcall	.+4      	; 0x2900 <__ultoa_invert+0x84>
    28fc:	a9 f7       	brne	.-22     	; 0x28e8 <__ultoa_invert+0x6c>
    28fe:	ea cf       	rjmp	.-44     	; 0x28d4 <__ultoa_invert+0x58>
    2900:	b4 e0       	ldi	r27, 0x04	; 4
    2902:	a6 95       	lsr	r26
    2904:	97 95       	ror	r25
    2906:	87 95       	ror	r24
    2908:	77 95       	ror	r23
    290a:	67 95       	ror	r22
    290c:	ba 95       	dec	r27
    290e:	c9 f7       	brne	.-14     	; 0x2902 <__ultoa_invert+0x86>
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	61 05       	cpc	r22, r1
    2914:	71 05       	cpc	r23, r1
    2916:	08 95       	ret
    2918:	9b 01       	movw	r18, r22
    291a:	ac 01       	movw	r20, r24
    291c:	0a 2e       	mov	r0, r26
    291e:	06 94       	lsr	r0
    2920:	57 95       	ror	r21
    2922:	47 95       	ror	r20
    2924:	37 95       	ror	r19
    2926:	27 95       	ror	r18
    2928:	ba 95       	dec	r27
    292a:	c9 f7       	brne	.-14     	; 0x291e <__ultoa_invert+0xa2>
    292c:	62 0f       	add	r22, r18
    292e:	73 1f       	adc	r23, r19
    2930:	84 1f       	adc	r24, r20
    2932:	95 1f       	adc	r25, r21
    2934:	a0 1d       	adc	r26, r0
    2936:	08 95       	ret

00002938 <__divmodsi4>:
    2938:	05 2e       	mov	r0, r21
    293a:	97 fb       	bst	r25, 7
    293c:	16 f4       	brtc	.+4      	; 0x2942 <__divmodsi4+0xa>
    293e:	00 94       	com	r0
    2940:	0f d0       	rcall	.+30     	; 0x2960 <__negsi2>
    2942:	57 fd       	sbrc	r21, 7
    2944:	05 d0       	rcall	.+10     	; 0x2950 <__divmodsi4_neg2>
    2946:	24 d0       	rcall	.+72     	; 0x2990 <__udivmodsi4>
    2948:	07 fc       	sbrc	r0, 7
    294a:	02 d0       	rcall	.+4      	; 0x2950 <__divmodsi4_neg2>
    294c:	46 f4       	brtc	.+16     	; 0x295e <__divmodsi4_exit>
    294e:	08 c0       	rjmp	.+16     	; 0x2960 <__negsi2>

00002950 <__divmodsi4_neg2>:
    2950:	50 95       	com	r21
    2952:	40 95       	com	r20
    2954:	30 95       	com	r19
    2956:	21 95       	neg	r18
    2958:	3f 4f       	sbci	r19, 0xFF	; 255
    295a:	4f 4f       	sbci	r20, 0xFF	; 255
    295c:	5f 4f       	sbci	r21, 0xFF	; 255

0000295e <__divmodsi4_exit>:
    295e:	08 95       	ret

00002960 <__negsi2>:
    2960:	90 95       	com	r25
    2962:	80 95       	com	r24
    2964:	70 95       	com	r23
    2966:	61 95       	neg	r22
    2968:	7f 4f       	sbci	r23, 0xFF	; 255
    296a:	8f 4f       	sbci	r24, 0xFF	; 255
    296c:	9f 4f       	sbci	r25, 0xFF	; 255
    296e:	08 95       	ret

00002970 <__muluhisi3>:
    2970:	31 d0       	rcall	.+98     	; 0x29d4 <__umulhisi3>
    2972:	a5 9f       	mul	r26, r21
    2974:	90 0d       	add	r25, r0
    2976:	b4 9f       	mul	r27, r20
    2978:	90 0d       	add	r25, r0
    297a:	a4 9f       	mul	r26, r20
    297c:	80 0d       	add	r24, r0
    297e:	91 1d       	adc	r25, r1
    2980:	11 24       	eor	r1, r1
    2982:	08 95       	ret

00002984 <__mulshisi3>:
    2984:	b7 ff       	sbrs	r27, 7
    2986:	f4 cf       	rjmp	.-24     	; 0x2970 <__muluhisi3>

00002988 <__mulohisi3>:
    2988:	f3 df       	rcall	.-26     	; 0x2970 <__muluhisi3>
    298a:	82 1b       	sub	r24, r18
    298c:	93 0b       	sbc	r25, r19
    298e:	08 95       	ret

00002990 <__udivmodsi4>:
    2990:	a1 e2       	ldi	r26, 0x21	; 33
    2992:	1a 2e       	mov	r1, r26
    2994:	aa 1b       	sub	r26, r26
    2996:	bb 1b       	sub	r27, r27
    2998:	fd 01       	movw	r30, r26
    299a:	0d c0       	rjmp	.+26     	; 0x29b6 <__udivmodsi4_ep>

0000299c <__udivmodsi4_loop>:
    299c:	aa 1f       	adc	r26, r26
    299e:	bb 1f       	adc	r27, r27
    29a0:	ee 1f       	adc	r30, r30
    29a2:	ff 1f       	adc	r31, r31
    29a4:	a2 17       	cp	r26, r18
    29a6:	b3 07       	cpc	r27, r19
    29a8:	e4 07       	cpc	r30, r20
    29aa:	f5 07       	cpc	r31, r21
    29ac:	20 f0       	brcs	.+8      	; 0x29b6 <__udivmodsi4_ep>
    29ae:	a2 1b       	sub	r26, r18
    29b0:	b3 0b       	sbc	r27, r19
    29b2:	e4 0b       	sbc	r30, r20
    29b4:	f5 0b       	sbc	r31, r21

000029b6 <__udivmodsi4_ep>:
    29b6:	66 1f       	adc	r22, r22
    29b8:	77 1f       	adc	r23, r23
    29ba:	88 1f       	adc	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	1a 94       	dec	r1
    29c0:	69 f7       	brne	.-38     	; 0x299c <__udivmodsi4_loop>
    29c2:	60 95       	com	r22
    29c4:	70 95       	com	r23
    29c6:	80 95       	com	r24
    29c8:	90 95       	com	r25
    29ca:	9b 01       	movw	r18, r22
    29cc:	ac 01       	movw	r20, r24
    29ce:	bd 01       	movw	r22, r26
    29d0:	cf 01       	movw	r24, r30
    29d2:	08 95       	ret

000029d4 <__umulhisi3>:
    29d4:	a2 9f       	mul	r26, r18
    29d6:	b0 01       	movw	r22, r0
    29d8:	b3 9f       	mul	r27, r19
    29da:	c0 01       	movw	r24, r0
    29dc:	a3 9f       	mul	r26, r19
    29de:	70 0d       	add	r23, r0
    29e0:	81 1d       	adc	r24, r1
    29e2:	11 24       	eor	r1, r1
    29e4:	91 1d       	adc	r25, r1
    29e6:	b2 9f       	mul	r27, r18
    29e8:	70 0d       	add	r23, r0
    29ea:	81 1d       	adc	r24, r1
    29ec:	11 24       	eor	r1, r1
    29ee:	91 1d       	adc	r25, r1
    29f0:	08 95       	ret

000029f2 <_exit>:
    29f2:	f8 94       	cli

000029f4 <__stop_program>:
    29f4:	ff cf       	rjmp	.-2      	; 0x29f4 <__stop_program>
