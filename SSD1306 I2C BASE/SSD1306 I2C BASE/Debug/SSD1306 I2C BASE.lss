
SSD1306 I2C BASE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  00003b96  00003c2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000467  00800178  00800178  00003ca2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003ca2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003cd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001df0  00000000  00000000  00003d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002ad20  00000000  00000000  00005b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ffe  00000000  00000000  00030824  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b921  00000000  00000000  00032822  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00008f8c  00000000  00000000  0003e144  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000ece5  00000000  00000000  000470d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00013af2  00000000  00000000  00055db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001cf0  00000000  00000000  000698a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6e c4       	rjmp	.+2268   	; 0x8de <__ctors_end>
       2:	00 00       	nop
       4:	8a c4       	rjmp	.+2324   	; 0x91a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c4       	rjmp	.+2320   	; 0x91a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c4       	rjmp	.+2316   	; 0x91a <__bad_interrupt>
       e:	00 00       	nop
      10:	84 c4       	rjmp	.+2312   	; 0x91a <__bad_interrupt>
      12:	00 00       	nop
      14:	82 c4       	rjmp	.+2308   	; 0x91a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c4       	rjmp	.+2304   	; 0x91a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7e c4       	rjmp	.+2300   	; 0x91a <__bad_interrupt>
      1e:	00 00       	nop
      20:	7c c4       	rjmp	.+2296   	; 0x91a <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c4       	rjmp	.+2292   	; 0x91a <__bad_interrupt>
      26:	00 00       	nop
      28:	78 c4       	rjmp	.+2288   	; 0x91a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c4       	rjmp	.+2284   	; 0x91a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c4       	rjmp	.+2280   	; 0x91a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c4       	rjmp	.+2276   	; 0x91a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c4       	rjmp	.+2272   	; 0x91a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c4       	rjmp	.+2268   	; 0x91a <__bad_interrupt>
      3e:	00 00       	nop
      40:	6c c4       	rjmp	.+2264   	; 0x91a <__bad_interrupt>
      42:	00 00       	nop
      44:	6a c4       	rjmp	.+2260   	; 0x91a <__bad_interrupt>
      46:	00 00       	nop
      48:	68 c4       	rjmp	.+2256   	; 0x91a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	66 c4       	rjmp	.+2252   	; 0x91a <__bad_interrupt>
      4e:	00 00       	nop
      50:	64 c4       	rjmp	.+2248   	; 0x91a <__bad_interrupt>
      52:	00 00       	nop
      54:	62 c4       	rjmp	.+2244   	; 0x91a <__bad_interrupt>
      56:	00 00       	nop
      58:	60 c4       	rjmp	.+2240   	; 0x91a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5e c4       	rjmp	.+2236   	; 0x91a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c4       	rjmp	.+2232   	; 0x91a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c4       	rjmp	.+2228   	; 0x91a <__bad_interrupt>
      66:	00 00       	nop
      68:	58 c4       	rjmp	.+2224   	; 0x91a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	56 c4       	rjmp	.+2220   	; 0x91a <__bad_interrupt>
      6e:	00 00       	nop
      70:	54 c4       	rjmp	.+2216   	; 0x91a <__bad_interrupt>
      72:	00 00       	nop
      74:	52 c4       	rjmp	.+2212   	; 0x91a <__bad_interrupt>
      76:	00 00       	nop
      78:	50 c4       	rjmp	.+2208   	; 0x91a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4e c4       	rjmp	.+2204   	; 0x91a <__bad_interrupt>
      7e:	00 00       	nop
      80:	4c c4       	rjmp	.+2200   	; 0x91a <__bad_interrupt>
      82:	00 00       	nop
      84:	4a c4       	rjmp	.+2196   	; 0x91a <__bad_interrupt>
      86:	00 00       	nop
      88:	48 c4       	rjmp	.+2192   	; 0x91a <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	5f 00       	.word	0x005f	; ????
      8e:	04 03       	mulsu	r16, r20
      90:	05 05       	cpc	r16, r5
      92:	04 05       	cpc	r16, r4
      94:	06 16       	cp	r0, r22
      96:	14 fd       	sbrc	r17, 4
      98:	fc 0e       	add	r15, r28
      9a:	fc 0e       	add	r15, r28
      9c:	fe 02       	muls	r31, r30
      9e:	88 05       	cpc	r24, r8
      a0:	d7 08       	sbc	r13, r7
      a2:	34 20       	and	r3, r4
      a4:	06 00       	.word	0x0006	; ????
      a6:	60 2c       	mov	r6, r0
      a8:	01 21       	and	r16, r1
      aa:	11 c4       	rjmp	.+2082   	; 0x8ce <__LOCK_REGION_LENGTH__+0x4ce>
      ac:	25 34       	cpi	r18, 0x45	; 69
      ae:	43 e2       	ldi	r20, 0x23	; 35
      b0:	e0 c0       	rjmp	.+448    	; 0x272 <__trampolines_end+0x1e6>
      b2:	42 44       	sbci	r20, 0x42	; 66
      b4:	99 c4       	rjmp	.+2354   	; 0x9e8 <u8x8_avr_delay+0xcc>
      b6:	41 84       	ldd	r4, Z+9	; 0x09
      b8:	04 00       	.word	0x0004	; ????
      ba:	22 09       	sbc	r18, r2
      bc:	a5 64       	ori	r26, 0x45	; 69
      be:	46 41       	sbci	r20, 0x16	; 22
      c0:	82 17       	cp	r24, r18
      c2:	02 23       	and	r16, r18
      c4:	1f 8b       	std	Y+23, r17	; 0x17
      c6:	61 64       	ori	r22, 0x41	; 65
      c8:	49 42       	sbci	r20, 0x29	; 41
      ca:	4c 42       	sbci	r20, 0x2C	; 44
      cc:	4c 42       	sbci	r20, 0x2C	; 44
      ce:	e6 60       	ori	r30, 0x06	; 6
      d0:	e2 60       	ori	r30, 0x02	; 2
      d2:	46 42       	sbci	r20, 0x26	; 38
      d4:	4c 42       	sbci	r20, 0x2C	; 44
      d6:	e6 60       	ori	r30, 0x06	; 6
      d8:	e2 60       	ori	r30, 0x02	; 2
      da:	46 42       	sbci	r20, 0x26	; 38
      dc:	4c 42       	sbci	r20, 0x2C	; 44
      de:	4c 42       	sbci	r20, 0x2C	; 44
      e0:	08 00       	.word	0x0008	; ????
      e2:	24 23       	and	r18, r20
      e4:	49 a6       	std	Y+41, r4	; 0x29
      e6:	5b 29       	or	r21, r11
      e8:	30 ac       	ldd	r3, Z+56	; 0x38
      ea:	46 22       	and	r4, r22
      ec:	a2 24       	eor	r10, r2
      ee:	a2 24       	eor	r10, r2
      f0:	a4 22       	and	r10, r20
      f2:	c8 e6       	ldi	r28, 0x68	; 104
      f4:	20 e4       	ldi	r18, 0x40	; 64
      f6:	20 c6       	rjmp	.+3136   	; 0xd38 <u8x8_avr_gpio_and_delay+0x6c>
      f8:	28 a2       	std	Y+32, r2	; 0x20
      fa:	24 a4       	ldd	r2, Z+44	; 0x2c
      fc:	22 a4       	ldd	r2, Z+42	; 0x2a
      fe:	22 42       	sbci	r18, 0x22	; 34
     100:	a6 2c       	mov	r10, r6
     102:	30 08       	sbc	r3, r0
     104:	00 25       	eor	r16, r0
     106:	2c ee       	ldi	r18, 0xEC	; 236
     108:	e1 7b       	andi	r30, 0xB1	; 177
     10a:	65 46       	sbci	r22, 0x65	; 101
     10c:	4a 64       	ori	r20, 0x4A	; 74
     10e:	22 48       	sbci	r18, 0x82	; 130
     110:	26 44       	sbci	r18, 0x46	; 70
     112:	48 26       	eor	r4, r24
     114:	24 4a       	sbci	r18, 0xA4	; 164
     116:	26 42       	sbci	r18, 0x26	; 38
     118:	4a 24       	eor	r4, r10
     11a:	dd 88       	ldd	r13, Y+21	; 0x15
     11c:	70 cc       	rjmp	.-1824   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
     11e:	98 88       	ldd	r9, Y+16	; 0x10
     120:	48 54       	subi	r20, 0x48	; 72
     122:	88 4c       	sbci	r24, 0xC8	; 200
     124:	90 88       	ldd	r9, Z+16	; 0x10
     126:	4c 50       	subi	r20, 0x0C	; 12
     128:	8c 4c       	sbci	r24, 0xCC	; 204
     12a:	8c 92       	st	X, r8
     12c:	a0 a8       	ldd	r10, Z+48	; 0x30
     12e:	a9 50       	subi	r26, 0x09	; 9
     130:	00 26       	eor	r0, r16
     132:	23 d0       	rcall	.+70     	; 0x17a <__trampolines_end+0xee>
     134:	25 8c       	ldd	r2, Z+29	; 0x1d
     136:	8b 56       	subi	r24, 0x6B	; 107
     138:	44 52       	subi	r20, 0x24	; 36
     13a:	46 52       	subi	r20, 0x26	; 38
     13c:	46 72       	andi	r20, 0x26	; 38
     13e:	42 b4       	in	r4, 0x22	; 34
     140:	78 a6       	std	Y+40, r7	; 0x28
     142:	c6 46       	sbci	r28, 0x66	; 102
     144:	68 82       	st	Y, r6
     146:	24 68       	ori	r18, 0x84	; 132
     148:	a6 6a       	ori	r26, 0xA6	; 166
     14a:	88 6a       	ori	r24, 0xA8	; 168
     14c:	8a a6       	std	Y+42, r8	; 0x2a
     14e:	e6 20       	and	r14, r6
     150:	e4 66       	ori	r30, 0x64	; 100
     152:	04 00       	.word	0x0004	; ????
     154:	27 08       	sbc	r2, r7
     156:	a2 64       	ori	r26, 0x42	; 66
     158:	2e e1       	ldi	r18, 0x1E	; 30
     15a:	60 00       	.word	0x0060	; ????
     15c:	28 12       	cpse	r2, r24
     15e:	05 a2       	std	Z+37, r0	; 0x25
     160:	33 47       	sbci	r19, 0x73	; 115
     162:	44 64       	ori	r20, 0x44	; 68
     164:	44 64       	ori	r20, 0x44	; 68
     166:	44 46       	sbci	r20, 0x64	; 100
     168:	6f 66       	ori	r22, 0x6F	; 111
     16a:	64 66       	ori	r22, 0x64	; 100
     16c:	84 04       	cpc	r8, r4
     16e:	29 11       	cpse	r18, r9
     170:	05 a2       	std	Z+37, r0	; 0x25
     172:	33 41       	sbci	r19, 0x13	; 19
     174:	48 66       	ori	r20, 0x68	; 104
     176:	46 66       	ori	r20, 0x66	; 102
     178:	46 9f       	mul	r20, r22
     17a:	8c 88       	ldd	r8, Y+20	; 0x14
     17c:	8c a8       	ldd	r8, Y+52	; 0x34
     17e:	01 2a       	or	r0, r17
     180:	12 e7       	ldi	r17, 0x72	; 114
     182:	e0 45       	sbci	r30, 0x50	; 80
     184:	65 24       	eor	r6, r5
     186:	c9 44       	sbci	r28, 0x49	; 73
     188:	84 c8       	rjmp	.-3832   	; 0xfffff292 <__eeprom_end+0xff7ef292>
     18a:	88 44       	sbci	r24, 0x48	; 72
     18c:	c4 48       	sbci	r28, 0x84	; 132
     18e:	92 11       	cpse	r25, r2
     190:	00 2b       	or	r16, r16
     192:	0e 4a       	sbci	r16, 0xAE	; 174
     194:	21 5c       	subi	r18, 0xC1	; 193
     196:	49 50       	subi	r20, 0x09	; 9
     198:	a3 83       	std	Z+3, r26	; 0x03
     19a:	03 23       	and	r16, r19
     19c:	41 8d       	ldd	r20, Z+25	; 0x19
     19e:	00 2c       	mov	r0, r0
     1a0:	0c e4       	ldi	r16, 0x4C	; 76
     1a2:	60 2b       	or	r22, r16
     1a4:	43 e2       	ldi	r20, 0x23	; 35
     1a6:	20 62       	ori	r18, 0x20	; 32
     1a8:	24 1b       	sub	r18, r20
     1aa:	00 2d       	mov	r16, r0
     1ac:	08 65       	ori	r16, 0x58	; 88
     1ae:	e0 34       	cpi	r30, 0x40	; 64
     1b0:	e1 41       	sbci	r30, 0x11	; 17
     1b2:	00 2e       	mov	r0, r16
     1b4:	0b 84       	ldd	r0, Y+11	; 0x0b
     1b6:	20 2c       	mov	r2, r0
     1b8:	43 e2       	ldi	r20, 0x23	; 35
     1ba:	20 42       	sbci	r18, 0x20	; 32
     1bc:	02 00       	.word	0x0002	; ????
     1be:	2f 10       	cpse	r2, r15
     1c0:	c6 21       	and	r28, r6
     1c2:	3c 49       	sbci	r19, 0x9C	; 156
     1c4:	51 90       	ld	r5, Z+
     1c6:	a2 20       	and	r10, r2
     1c8:	45 41       	sbci	r20, 0x15	; 21
     1ca:	8a 82       	std	Y+2, r8	; 0x02
     1cc:	14 01       	movw	r2, r8
     1ce:	30 14       	cp	r3, r0
     1d0:	c9 25       	eor	r28, r9
     1d2:	5c 67       	ori	r21, 0x7C	; 124
     1d4:	68 62       	ori	r22, 0x28	; 40
     1d6:	44 46       	sbci	r20, 0x64	; 100
     1d8:	62 c6       	rjmp	.+3268   	; 0xe9e <u8g2_send_tile_row+0x4>
     1da:	bf 99       	sbic	0x17, 7	; 23
     1dc:	90 11       	cpse	r25, r0
     1de:	99 18       	sub	r9, r9
     1e0:	9a 01       	movw	r18, r20
     1e2:	31 0c       	add	r3, r1
     1e4:	c7 29       	or	r28, r7
     1e6:	5c 47       	sbci	r21, 0x7C	; 124
     1e8:	68 a4       	ldd	r6, Y+40	; 0x28
     1ea:	68 ff       	.word	0xff68	; ????
     1ec:	c9 01       	movw	r24, r18
     1ee:	32 17       	cp	r19, r18
     1f0:	c9 25       	eor	r28, r9
     1f2:	5c 87       	std	Y+12, r21	; 0x0c
     1f4:	46 64       	ori	r20, 0x46	; 70
     1f6:	62 c6       	rjmp	.+3268   	; 0xebc <u8g2_send_tile_row+0x22>
     1f8:	66 42       	sbci	r22, 0x26	; 38
     1fa:	66 6c       	ori	r22, 0xC6	; 198
     1fc:	6a 6c       	ori	r22, 0xCA	; 202
     1fe:	6a 4a       	sbci	r22, 0xAA	; 170
     200:	4c d5       	rcall	.+2712   	; 0xc9a <u8x8_avr_delay+0x37e>
     202:	c1 41       	sbci	r28, 0x11	; 17
     204:	01 33       	cpi	r16, 0x31	; 49
     206:	19 c9       	rjmp	.-3534   	; 0xfffff43a <__eeprom_end+0xff7ef43a>
     208:	25 5c       	subi	r18, 0xC5	; 197
     20a:	87 46       	sbci	r24, 0x67	; 103
     20c:	64 62       	ori	r22, 0x24	; 36
     20e:	c6 66       	ori	r28, 0x66	; 102
     210:	42 66       	ori	r20, 0x62	; 98
     212:	4c 68       	ori	r20, 0x8C	; 140
     214:	52 6e       	ori	r21, 0xE2	; 226
     216:	42 c6       	rjmp	.+3204   	; 0xe9c <u8g2_send_tile_row+0x2>
     218:	cd 84       	ldd	r12, Y+13	; 0x0d
     21a:	c8 4c       	sbci	r28, 0xC8	; 200
     21c:	09 00       	.word	0x0009	; ????
     21e:	34 19       	sub	r19, r4
     220:	c9 25       	eor	r28, r9
     222:	5c 2f       	mov	r21, r28
     224:	4e 6c       	ori	r20, 0xCE	; 206
     226:	8a 51       	subi	r24, 0x1A	; 26
     228:	c4 4c       	sbci	r28, 0xC4	; 196
     22a:	c8 48       	sbci	r28, 0x88	; 136
     22c:	cc 48       	sbci	r28, 0x8C	; 140
     22e:	cc 44       	sbci	r28, 0x4C	; 76
     230:	d0 c4       	rjmp	.+2464   	; 0xbd2 <u8x8_avr_delay+0x2b6>
     232:	81 d4       	rcall	.+2306   	; 0xb36 <u8x8_avr_delay+0x21a>
     234:	d8 54       	subi	r29, 0x48	; 72
     236:	01 35       	cpi	r16, 0x51	; 81
     238:	17 c9       	rjmp	.-3538   	; 0xfffff468 <__eeprom_end+0xff7ef468>
     23a:	25 5c       	subi	r18, 0xC5	; 197
     23c:	e3 20       	and	r14, r3
     23e:	e2 24       	eor	r14, r2
     240:	30 a1       	ldd	r19, Z+32	; 0x20
     242:	4d cc       	rjmp	.-1894   	; 0xfffffade <__eeprom_end+0xff7efade>
     244:	dc d8       	rcall	.-3656   	; 0xfffff3fe <__eeprom_end+0xff7ef3fe>
     246:	84 8c       	ldd	r8, Z+28	; 0x1c
     248:	9b 09       	sbc	r25, r11
     24a:	91 99       	sbic	0x12, 1	; 18
     24c:	12 00       	.word	0x0012	; ????
     24e:	36 18       	sub	r3, r6
     250:	c9 25       	eor	r28, r9
     252:	5c a7       	std	Y+44, r21	; 0x2c
     254:	64 85       	ldd	r22, Z+12	; 0x0c
     256:	8c 8d       	ldd	r24, Y+28	; 0x1c
     258:	c4 d8       	rcall	.-3704   	; 0xfffff3e2 <__eeprom_end+0xff7ef3e2>
     25a:	c4 08       	sbc	r12, r4
     25c:	c5 1a       	sub	r12, r21
     25e:	6f 26       	eor	r6, r31
     260:	64 26       	eor	r6, r20
     262:	46 84       	ldd	r4, Z+14	; 0x0e
     264:	66 00       	.word	0x0066	; ????
     266:	37 12       	cpse	r3, r23
     268:	c9 25       	eor	r28, r9
     26a:	5c e1       	ldi	r21, 0x1C	; 28
     26c:	41 d9       	rcall	.-3454   	; 0xfffff4f0 <__eeprom_end+0xff7ef4f0>
     26e:	94 98       	cbi	0x12, 4	; 18
     270:	9c 98       	cbi	0x13, 4	; 19
     272:	9c d8       	rcall	.-3784   	; 0xfffff3ac <__eeprom_end+0xff7ef3ac>
     274:	aa b1       	in	r26, 0x0a	; 10
     276:	8d 00       	.word	0x008d	; ????
     278:	38 18       	sub	r3, r8
     27a:	c9 25       	eor	r28, r9
     27c:	5c 67       	ori	r21, 0x7C	; 124
     27e:	48 46       	sbci	r20, 0x68	; 104
     280:	42 8a       	std	Z+18, r4	; 0x12
     282:	aa e8       	ldi	r26, 0x8A	; 138
     284:	42 c4       	rjmp	.+2180   	; 0xb0a <u8x8_avr_delay+0x1ee>
     286:	c8 24       	eor	r12, r8
     288:	e4 a8       	ldd	r14, Z+52	; 0x34
     28a:	8a aa       	std	Y+50, r8	; 0x32
     28c:	46 86       	std	Z+14, r4	; 0x0e
     28e:	06 00       	.word	0x0006	; ????
     290:	39 1a       	sub	r3, r25
     292:	c9 25       	eor	r28, r9
     294:	5c 67       	ori	r21, 0x7C	; 124
     296:	48 64       	ori	r20, 0x48	; 72
     298:	62 46       	sbci	r22, 0x62	; 98
     29a:	62 c6       	rjmp	.+3268   	; 0xf60 <u8g2_send_buffer+0x12>
     29c:	9b 89       	ldd	r25, Y+19	; 0x13
     29e:	09 92       	st	Y+, r0
     2a0:	89 b1       	in	r24, 0x09	; 9
     2a2:	09 19       	sub	r16, r9
     2a4:	1b 89       	ldd	r17, Y+19	; 0x13
     2a6:	91 91       	ld	r25, Z+
     2a8:	1a 00       	.word	0x001a	; ????
     2aa:	3a 0f       	add	r19, r26
     2ac:	24 25       	eor	r18, r4
     2ae:	34 43       	sbci	r19, 0x34	; 52
     2b0:	e2 20       	and	r14, r2
     2b2:	42 4c       	sbci	r20, 0xC2	; 194
     2b4:	e2 20       	and	r14, r2
     2b6:	42 02       	muls	r20, r18
     2b8:	00 3b       	cpi	r16, 0xB0	; 176
     2ba:	10 84       	ldd	r1, Z+8	; 0x08
     2bc:	65 33       	cpi	r22, 0x35	; 53
     2be:	43 e2       	ldi	r20, 0x23	; 35
     2c0:	20 42       	sbci	r18, 0x20	; 32
     2c2:	4c e2       	ldi	r20, 0x2C	; 44
     2c4:	20 62       	ori	r18, 0x20	; 32
     2c6:	24 1b       	sub	r18, r20
     2c8:	00 3c       	cpi	r16, 0xC0	; 192
     2ca:	0c 4a       	sbci	r16, 0xAC	; 172
     2cc:	21 5c       	subi	r18, 0xC1	; 193
     2ce:	51 8c       	ldd	r5, Z+25	; 0x19
     2d0:	88 33       	cpi	r24, 0x38	; 56
     2d2:	42 0e       	add	r4, r18
     2d4:	05 3d       	cpi	r16, 0xD5	; 213
     2d6:	0c c9       	rjmp	.-3560   	; 0xfffff4f0 <__eeprom_end+0xff7ef4f0>
     2d8:	a4 5c       	subi	r26, 0xC4	; 196
     2da:	e1 01       	movw	r28, r2
     2dc:	3d cc       	rjmp	.-1926   	; 0xfffffb58 <__eeprom_end+0xff7efb58>
     2de:	c1 01       	movw	r24, r2
     2e0:	01 3e       	cpi	r16, 0xE1	; 225
     2e2:	0c 4a       	sbci	r16, 0xAC	; 172
     2e4:	21 5c       	subi	r18, 0xC1	; 193
     2e6:	41 90       	ld	r4, Z+
     2e8:	67 44       	sbci	r22, 0x47	; 71
     2ea:	9c 09       	sbc	r25, r12
     2ec:	02 3f       	cpi	r16, 0xF2	; 242
     2ee:	14 c9       	rjmp	.-3544   	; 0xfffff518 <__eeprom_end+0xff7ef518>
     2f0:	21 54       	subi	r18, 0x41	; 65
     2f2:	a7 44       	sbci	r26, 0x47	; 71
     2f4:	e4 c6       	rjmp	.+3528   	; 0x10be <u8g2_font_get_byte+0x34>
     2f6:	66 42       	sbci	r22, 0x26	; 38
     2f8:	66 4c       	sbci	r22, 0xC6	; 198
     2fa:	f7 10       	cpse	r15, r7
     2fc:	62 54       	subi	r22, 0x42	; 66
     2fe:	64 42       	sbci	r22, 0x24	; 36
     300:	00 40       	sbci	r16, 0x00	; 0
     302:	2a cf       	rjmp	.-428    	; 0x158 <__trampolines_end+0xcc>
     304:	21 84       	ldd	r2, Z+9	; 0x09
     306:	eb 6c       	ori	r30, 0xCB	; 203
     308:	4c 46       	sbci	r20, 0x6C	; 108
     30a:	32 44       	sbci	r19, 0x42	; 66
     30c:	a6 44       	sbci	r26, 0x46	; 70
     30e:	42 44       	sbci	r20, 0x42	; 66
     310:	09 89       	ldd	r16, Y+17	; 0x11
     312:	8c 08       	sbc	r8, r12
     314:	89 8c       	ldd	r8, Y+25	; 0x19
     316:	08 85       	ldd	r16, Y+8	; 0x08
     318:	8c 88       	ldd	r8, Y+20	; 0x14
     31a:	84 1a       	sub	r8, r20
     31c:	11 09       	sbc	r17, r1
     31e:	25 13       	cpse	r18, r21
     320:	22 22       	and	r2, r18
     322:	13 44       	sbci	r17, 0x43	; 67
     324:	92 31       	cpi	r25, 0x12	; 18
     326:	63 62       	ori	r22, 0x23	; 35
     328:	07 41       	sbci	r16, 0x17	; 23
     32a:	00 41       	sbci	r16, 0x10	; 16
     32c:	1e ce       	rjmp	.-964    	; 0xffffff6a <__eeprom_end+0xff7eff6a>
     32e:	1d 74       	andi	r17, 0x4D	; 77
     330:	2f 5a       	subi	r18, 0xAF	; 175
     332:	76 96       	adiw	r30, 0x16	; 22
     334:	32 62       	ori	r19, 0x22	; 34
     336:	32 44       	sbci	r19, 0x42	; 66
     338:	30 66       	ori	r19, 0x60	; 96
     33a:	2e 66       	ori	r18, 0x6E	; 110
     33c:	2c 6a       	ori	r18, 0xAC	; 172
     33e:	ea 40       	sbci	r30, 0x0A	; 10
     340:	28 6c       	ori	r18, 0xC8	; 200
     342:	28 6e       	ori	r18, 0xE8	; 232
     344:	44 6e       	ori	r20, 0xE4	; 228
     346:	82 aa       	std	Z+50, r8	; 0x32
     348:	00 42       	sbci	r16, 0x20	; 32
     34a:	22 cc       	rjmp	.-1980   	; 0xfffffb90 <__eeprom_end+0xff7efb90>
     34c:	21 74       	andi	r18, 0x41	; 65
     34e:	e1 60       	ori	r30, 0x01	; 1
     350:	66 86       	std	Z+14, r6	; 0x0e
     352:	64 68       	ori	r22, 0x84	; 132
     354:	64 68       	ori	r22, 0x84	; 132
     356:	64 68       	ori	r22, 0x84	; 132
     358:	64 66       	ori	r22, 0x64	; 100
     35a:	e6 20       	and	r14, r6
     35c:	68 c9       	rjmp	.-3376   	; 0xfffff62e <__eeprom_end+0xff7ef62e>
     35e:	d4 c4       	rjmp	.+2472   	; 0xd08 <u8x8_avr_gpio_and_delay+0x3c>
     360:	d4 c4       	rjmp	.+2472   	; 0xd0a <u8x8_avr_gpio_and_delay+0x3e>
     362:	d4 c4       	rjmp	.+2472   	; 0xd0c <u8x8_avr_gpio_and_delay+0x40>
     364:	d4 c4       	rjmp	.+2472   	; 0xd0e <u8x8_avr_gpio_and_delay+0x42>
     366:	d0 c4       	rjmp	.+2464   	; 0xd08 <u8x8_avr_gpio_and_delay+0x3c>
     368:	81 0c       	add	r8, r1
     36a:	00 43       	sbci	r16, 0x30	; 48
     36c:	18 cc       	rjmp	.-2000   	; 0xfffffb9e <__eeprom_end+0xff7efb9e>
     36e:	21 74       	andi	r18, 0x41	; 65
     370:	a9 24       	eor	r10, r9
     372:	84 c5       	rjmp	.+2824   	; 0xe7c <u8g2_ClearBuffer+0x66>
     374:	98 c4       	rjmp	.+2352   	; 0xca6 <u8x8_avr_delay+0x38a>
     376:	58 21       	and	r21, r8
     378:	cb 0d       	add	r28, r11
     37a:	23 e6       	ldi	r18, 0x63	; 99
     37c:	22 c6       	rjmp	.+3140   	; 0xfc2 <u8g2_SendBuffer+0x2>
     37e:	62 68       	ori	r22, 0x82	; 130
     380:	a4 6a       	ori	r26, 0xA4	; 164
     382:	00 44       	sbci	r16, 0x40	; 64
     384:	23 ce       	rjmp	.-954    	; 0xffffffcc <__eeprom_end+0xff7effcc>
     386:	21 84       	ldd	r2, Z+9	; 0x09
     388:	e1 60       	ori	r30, 0x01	; 1
     38a:	6a 88       	ldd	r6, Y+18	; 0x12
     38c:	66 6c       	ori	r22, 0xC6	; 198
     38e:	64 6c       	ori	r22, 0xC4	; 196
     390:	64 6e       	ori	r22, 0xE4	; 228
     392:	62 6e       	ori	r22, 0xE2	; 226
     394:	62 6e       	ori	r22, 0xE2	; 226
     396:	62 6e       	ori	r22, 0xE2	; 226
     398:	62 6e       	ori	r22, 0xE2	; 226
     39a:	62 6e       	ori	r22, 0xE2	; 226
     39c:	62 6c       	ori	r22, 0xC2	; 194
     39e:	64 6c       	ori	r22, 0xC4	; 196
     3a0:	64 88       	ldd	r6, Z+20	; 0x14
     3a2:	e4 60       	ori	r30, 0x04	; 4
     3a4:	08 00       	.word	0x0008	; ????
     3a6:	45 23       	and	r20, r21
     3a8:	cb 21       	and	r28, r11
     3aa:	6c e1       	ldi	r22, 0x1C	; 28
     3ac:	80 62       	ori	r24, 0x20	; 32
     3ae:	68 62       	ori	r22, 0x28	; 40
     3b0:	4a 62       	ori	r20, 0x2A	; 42
     3b2:	26 24       	eor	r2, r6
     3b4:	62 26       	eor	r6, r18
     3b6:	24 62       	ori	r18, 0x24	; 36
     3b8:	44 e8       	ldi	r20, 0x84	; 132
     3ba:	68 44       	sbci	r22, 0x48	; 72
     3bc:	68 26       	eor	r6, r24
     3be:	68 26       	eor	r6, r24
     3c0:	24 62       	ori	r18, 0x24	; 36
     3c2:	2c 62       	ori	r18, 0x2C	; 44
     3c4:	4a 62       	ori	r20, 0x2A	; 42
     3c6:	e8 e0       	ldi	r30, 0x08	; 8
     3c8:	00 46       	sbci	r16, 0x60	; 96
     3ca:	1f cb       	rjmp	.-2498   	; 0xfffffa0a <__eeprom_end+0xff7efa0a>
     3cc:	21 6c       	ori	r18, 0xC1	; 193
     3ce:	e1 80       	ldd	r14, Z+1	; 0x01
     3d0:	62 68       	ori	r22, 0x82	; 130
     3d2:	62 4a       	sbci	r22, 0xA2	; 162
     3d4:	62 26       	eor	r6, r18
     3d6:	24 62       	ori	r18, 0x24	; 36
     3d8:	26 24       	eor	r2, r6
     3da:	62 44       	sbci	r22, 0x42	; 66
     3dc:	e8 68       	ori	r30, 0x88	; 136
     3de:	44 68       	ori	r20, 0x84	; 132
     3e0:	26 68       	ori	r18, 0x86	; 134
     3e2:	26 68       	ori	r18, 0x86	; 134
     3e4:	70 9d       	mul	r23, r0
     3e6:	15 00       	.word	0x0015	; ????
     3e8:	47 20       	and	r4, r7
     3ea:	cd 21       	and	r28, r13
     3ec:	7c a9       	ldd	r23, Y+52	; 0x34
     3ee:	24 86       	std	Z+12, r2	; 0x0c
     3f0:	84 64       	ori	r24, 0x44	; 68
     3f2:	4c 64       	ori	r20, 0x4C	; 76
     3f4:	4c 62       	ori	r20, 0x2C	; 44
     3f6:	30 62       	ori	r19, 0x20	; 32
     3f8:	30 62       	ori	r19, 0x20	; 32
     3fa:	74 d5       	rcall	.+2792   	; 0xee4 <u8g2_send_tile_row+0x4a>
     3fc:	41 d8       	rcall	.-3966   	; 0xfffff480 <__eeprom_end+0xff7ef480>
     3fe:	c8 d4       	rcall	.+2448   	; 0xd90 <u8x8_avr_gpio_and_delay+0xc4>
     400:	c8 d4       	rcall	.+2448   	; 0xd92 <u8x8_avr_gpio_and_delay+0xc6>
     402:	0c 09       	sbc	r16, r12
     404:	55 49       	sbci	r21, 0x95	; 149
     406:	04 00       	.word	0x0004	; ????
     408:	48 22       	and	r4, r24
     40a:	ce 21       	and	r28, r14
     40c:	84 a1       	ldd	r24, Z+36	; 0x24
     40e:	a8 62       	ori	r26, 0x28	; 40
     410:	6c 64       	ori	r22, 0x4C	; 76
     412:	6c 64       	ori	r22, 0x4C	; 76
     414:	6c 64       	ori	r22, 0x4C	; 76
     416:	6c 64       	ori	r22, 0x4C	; 76
     418:	6c e4       	ldi	r22, 0x4C	; 76
     41a:	a0 64       	ori	r26, 0x40	; 64
     41c:	6c 64       	ori	r22, 0x4C	; 76
     41e:	6c 64       	ori	r22, 0x4C	; 76
     420:	6c 64       	ori	r22, 0x4C	; 76
     422:	6c 64       	ori	r22, 0x4C	; 76
     424:	6c 64       	ori	r22, 0x4C	; 76
     426:	6c a2       	std	Y+36, r6	; 0x24
     428:	a8 00       	.word	0x00a8	; ????
     42a:	49 0b       	sbc	r20, r25
     42c:	c5 25       	eor	r28, r5
     42e:	4c a1       	ldd	r20, Y+36	; 0x24
     430:	62 64       	ori	r22, 0x42	; 66
     432:	ff 8b       	std	Y+23, r31	; 0x17
     434:	02 4a       	sbci	r16, 0xA2	; 162
     436:	15 ca       	rjmp	.-3030   	; 0xfffff862 <__eeprom_end+0xff7ef862>
     438:	1d 64       	ori	r17, 0x4D	; 77
     43a:	ab 6c       	ori	r26, 0xCB	; 203
     43c:	6e 9f       	mul	r22, r30
     43e:	c8 4c       	sbci	r28, 0xC8	; 200
     440:	90 4c       	sbci	r25, 0xC0	; 192
     442:	90 4c       	sbci	r25, 0xC0	; 192
     444:	08 8d       	ldd	r16, Y+24	; 0x18
     446:	88 0c       	add	r8, r8
     448:	11 01       	movw	r2, r2
     44a:	4b 20       	and	r4, r11
     44c:	ce 21       	and	r28, r14
     44e:	84 a1       	ldd	r24, Z+36	; 0x24
     450:	a6 64       	ori	r26, 0x46	; 70
     452:	4a 68       	ori	r20, 0x8A	; 138
     454:	48 6a       	ori	r20, 0xA8	; 168
     456:	46 6c       	ori	r20, 0xC6	; 198
     458:	44 6e       	ori	r20, 0xE4	; 228
     45a:	42 d0       	rcall	.+132    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     45c:	f0 6e       	ori	r31, 0xE0	; 224
     45e:	82 6c       	ori	r24, 0xC2	; 194
     460:	84 6a       	ori	r24, 0xA4	; 164
     462:	86 68       	ori	r24, 0x86	; 134
     464:	88 66       	ori	r24, 0x68	; 104
     466:	8a a2       	std	Y+34, r8	; 0x22
     468:	c6 00       	.word	0x00c6	; ????
     46a:	4c 11       	cpse	r20, r12
     46c:	ca 21       	and	r28, r10
     46e:	64 a1       	ldd	r22, Z+36	; 0x24
     470:	6c 6e       	ori	r22, 0xEC	; 236
     472:	7f 15       	cp	r23, r15
     474:	31 15       	cp	r19, r1
     476:	31 24       	eor	r3, r1
     478:	31 73       	andi	r19, 0x31	; 49
     47a:	60 4d       	sbci	r22, 0xD0	; 208
     47c:	33 d1       	rcall	.+614    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
     47e:	21 9c       	mul	r2, r1
     480:	c1 ac       	ldd	r12, Z+57	; 0x39
     482:	84 8c       	ldd	r8, Z+28	; 0x1c
     484:	a6 8a       	std	Z+22, r10	; 0x16
     486:	26 62       	ori	r18, 0x26	; 38
     488:	28 62       	ori	r18, 0x28	; 40
     48a:	26 64       	ori	r18, 0x46	; 70
     48c:	26 62       	ori	r18, 0x26	; 38
     48e:	26 64       	ori	r18, 0x46	; 70
     490:	26 62       	ori	r18, 0x26	; 38
     492:	26 64       	ori	r18, 0x46	; 70
     494:	24 64       	ori	r18, 0x44	; 68
     496:	26 66       	ori	r18, 0x66	; 102
     498:	22 64       	ori	r18, 0x42	; 66
     49a:	26 66       	ori	r18, 0x66	; 102
     49c:	22 64       	ori	r18, 0x42	; 66
     49e:	26 86       	std	Z+14, r2	; 0x0e
     4a0:	66 26       	eor	r6, r22
     4a2:	68 66       	ori	r22, 0x68	; 104
     4a4:	26 68       	ori	r18, 0x86	; 134
     4a6:	66 64       	ori	r22, 0x46	; 70
     4a8:	28 68       	ori	r18, 0x88	; 136
     4aa:	a2 26       	eor	r10, r18
     4ac:	a6 00       	.word	0x00a6	; ????
     4ae:	4e 25       	eor	r20, r14
     4b0:	ce 21       	and	r28, r14
     4b2:	84 81       	ldd	r24, Z+4	; 0x04
     4b4:	aa 82       	std	Y+2, r10	; 0x02
     4b6:	6a 86       	std	Y+10, r6	; 0x0a
     4b8:	2a 88       	ldd	r2, Y+18	; 0x12
     4ba:	2a a8       	ldd	r2, Y+50	; 0x32
     4bc:	28 05       	cpc	r18, r8
     4be:	4d 50       	subi	r20, 0x0D	; 13
     4c0:	08 49       	sbci	r16, 0x98	; 152
     4c2:	50 0c       	add	r5, r0
     4c4:	45 50       	subi	r20, 0x05	; 5
     4c6:	50 51       	subi	r21, 0x10	; 16
     4c8:	14 51       	subi	r17, 0x14	; 20
     4ca:	14 51       	subi	r17, 0x14	; 20
     4cc:	d8 cc       	rjmp	.-1616   	; 0xfffffe7e <__eeprom_end+0xff7efe7e>
     4ce:	98 48       	sbci	r25, 0x88	; 136
     4d0:	59 08       	sbc	r5, r9
     4d2:	00 4f       	sbci	r16, 0xF0	; 240
     4d4:	18 ce       	rjmp	.-976    	; 0x106 <__trampolines_end+0x7a>
     4d6:	21 84       	ldd	r2, Z+9	; 0x09
     4d8:	c9 8c       	ldd	r12, Y+25	; 0x19
     4da:	84 66       	ori	r24, 0x64	; 100
     4dc:	6c 64       	ori	r22, 0x4C	; 76
     4de:	6c 62       	ori	r22, 0x2C	; 44
     4e0:	d0 0f       	add	r29, r16
     4e2:	27 c6       	rjmp	.+3150   	; 0x1132 <__stack+0x33>
     4e4:	46 c6       	rjmp	.+3212   	; 0x1172 <u8g2_read_font_info+0x4>
     4e6:	66 48       	sbci	r22, 0x86	; 134
     4e8:	c8 8c       	ldd	r12, Y+24	; 0x18
     4ea:	00 50       	subi	r16, 0x00	; 0
     4ec:	1a cc       	rjmp	.-1996   	; 0xfffffd22 <__eeprom_end+0xff7efd22>
     4ee:	21 74       	andi	r18, 0x41	; 65
     4f0:	e1 40       	sbci	r30, 0x01	; 1
     4f2:	68 86       	std	Y+8, r6	; 0x08
     4f4:	64 88       	ldd	r6, Z+20	; 0x14
     4f6:	62 88       	ldd	r6, Z+18	; 0x12
     4f8:	62 88       	ldd	r6, Z+18	; 0x12
     4fa:	62 88       	ldd	r6, Z+18	; 0x12
     4fc:	62 86       	std	Z+10, r6	; 0x0a
     4fe:	e4 20       	and	r14, r4
     500:	68 72       	andi	r22, 0x28	; 40
     502:	87 75       	andi	r24, 0x57	; 87
     504:	00 51       	subi	r16, 0x10	; 16
     506:	20 4e       	sbci	r18, 0xE0	; 224
     508:	22 83       	std	Z+2, r18	; 0x02
     50a:	c9 8c       	ldd	r12, Y+25	; 0x19
     50c:	84 66       	ori	r24, 0x64	; 100
     50e:	6c 64       	ori	r22, 0x4C	; 76
     510:	6c 62       	ori	r22, 0x2C	; 44
     512:	d0 2f       	mov	r29, r16
     514:	68 26       	eor	r6, r24
     516:	46 46       	sbci	r20, 0x66	; 102
     518:	44 66       	ori	r20, 0x64	; 100
     51a:	24 66       	ori	r18, 0x64	; 100
     51c:	28 ca       	rjmp	.-2992   	; 0xfffff96e <__eeprom_end+0xff7ef96e>
     51e:	8c 85       	ldd	r24, Y+12	; 0x0c
     520:	27 22       	and	r2, r23
     522:	4b 47       	sbci	r20, 0x7B	; 123
     524:	00 52       	subi	r16, 0x20	; 32
     526:	23 cd       	rjmp	.-1466   	; 0xffffff6e <__eeprom_end+0xff7eff6e>
     528:	21 84       	ldd	r2, Z+9	; 0x09
     52a:	e1 80       	ldd	r14, Z+1	; 0x01
     52c:	66 88       	ldd	r6, Z+22	; 0x16
     52e:	64 6a       	ori	r22, 0xA4	; 164
     530:	64 6a       	ori	r22, 0xA4	; 164
     532:	64 6a       	ori	r22, 0xA4	; 164
     534:	64 68       	ori	r22, 0x84	; 132
     536:	e6 20       	and	r14, r6
     538:	6a 66       	ori	r22, 0x6A	; 106
     53a:	68 66       	ori	r22, 0x68	; 104
     53c:	68 86       	std	Y+8, r6	; 0x08
     53e:	66 68       	ori	r22, 0x86	; 134
     540:	66 68       	ori	r22, 0x86	; 134
     542:	66 68       	ori	r22, 0x86	; 134
     544:	c2 68       	ori	r28, 0x82	; 130
     546:	02 00       	.word	0x0002	; ????
     548:	53 19       	sub	r21, r3
     54a:	ca 21       	and	r28, r10
     54c:	64 87       	std	Z+12, r22	; 0x0c
     54e:	22 64       	ori	r18, 0x42	; 66
     550:	c5 90       	lpm	r12, Z+
     552:	c4 54       	subi	r28, 0x44	; 68
     554:	04 99       	sbic	0x00, 4	; 0
     556:	d5 95       	asr	r29
     558:	99 55       	subi	r25, 0x59	; 89
     55a:	59 d5       	rcall	.+2738   	; 0x100e <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
     55c:	c9 44       	sbci	r28, 0x49	; 73
     55e:	48 09       	sbc	r20, r8
     560:	00 54       	subi	r16, 0x40	; 64
     562:	13 cb       	rjmp	.-2522   	; 0xfffffb8a <__eeprom_end+0xff7efb8a>
     564:	21 6c       	ori	r18, 0xC1	; 193
     566:	e1 c0       	rjmp	.+450    	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     568:	64 cd       	rjmp	.-1336   	; 0x32 <__FUSE_REGION_LENGTH__+0x2f>
     56a:	8c cc       	rjmp	.-1768   	; 0xfffffe84 <__eeprom_end+0xff7efe84>
     56c:	8c cc       	rjmp	.-1768   	; 0xfffffe86 <__eeprom_end+0xff7efe86>
     56e:	4c d0       	rcall	.+152    	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
     570:	e0 7e       	andi	r30, 0xE0	; 224
     572:	57 03       	mulsu	r21, r23
     574:	55 22       	and	r5, r21
     576:	ce 21       	and	r28, r14
     578:	84 a1       	ldd	r24, Z+36	; 0x24
     57a:	a8 62       	ori	r26, 0x28	; 40
     57c:	6c 64       	ori	r22, 0x4C	; 76
     57e:	2e 66       	ori	r18, 0x6E	; 110
     580:	2e 66       	ori	r18, 0x6E	; 110
     582:	2e 66       	ori	r18, 0x6E	; 110
     584:	2e 66       	ori	r18, 0x6E	; 110
     586:	2e 66       	ori	r18, 0x6E	; 110
     588:	2e 66       	ori	r18, 0x6E	; 110
     58a:	2e 66       	ori	r18, 0x6E	; 110
     58c:	2e 66       	ori	r18, 0x6E	; 110
     58e:	2e 66       	ori	r18, 0x6E	; 110
     590:	2e 68       	ori	r18, 0x8E	; 142
     592:	48 ce       	rjmp	.-880    	; 0x224 <__trampolines_end+0x198>
     594:	08 00       	.word	0x0008	; ????
     596:	56 1f       	adc	r21, r22
     598:	cf 1d       	adc	r28, r15
     59a:	74 c1       	rjmp	.+744    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     59c:	a8 82       	st	Y, r10
     59e:	6c 66       	ori	r22, 0x6C	; 108
     5a0:	2e 88       	ldd	r2, Y+22	; 0x16
     5a2:	2a 6c       	ori	r18, 0xCA	; 202
     5a4:	2a 6c       	ori	r18, 0xCA	; 202
     5a6:	2a 6e       	ori	r18, 0xEA	; 234
     5a8:	26 70       	andi	r18, 0x06	; 6
     5aa:	26 72       	andi	r18, 0x26	; 38
     5ac:	22 74       	andi	r18, 0x42	; 66
     5ae:	22 76       	andi	r18, 0x62	; 98
     5b0:	78 3a       	cpi	r23, 0xA8	; 168
     5b2:	3c 0e       	add	r3, r28
     5b4:	00 57       	subi	r16, 0x70	; 112
     5b6:	2f d4       	rcall	.+2142   	; 0xe16 <u8g2_ClearBuffer>
     5b8:	1d 9c       	mul	r1, r13
     5ba:	c1 c2       	rjmp	.+1410   	; 0xb3e <u8x8_avr_delay+0x222>
     5bc:	a4 82       	std	Z+4, r10	; 0x04
     5be:	86 68       	ori	r24, 0x86	; 134
     5c0:	66 68       	ori	r22, 0x86	; 134
     5c2:	2a 88       	ldd	r2, Y+18	; 0x12
     5c4:	86 26       	eor	r8, r22
     5c6:	6c 86       	std	Y+12, r6	; 0x0c
     5c8:	26 6c       	ori	r18, 0xC6	; 198
     5ca:	86 26       	eor	r8, r22
     5cc:	8c 22       	and	r8, r28
     5ce:	82 22       	and	r8, r18
     5d0:	70 22       	and	r7, r16
     5d2:	64 22       	and	r6, r20
     5d4:	70 22       	and	r7, r16
     5d6:	64 22       	and	r6, r20
     5d8:	90 86       	std	Z+8, r9	; 0x08
     5da:	74 68       	ori	r23, 0x84	; 132
     5dc:	74 68       	ori	r23, 0x84	; 132
     5de:	36 2c       	mov	r3, r6
     5e0:	38 2c       	mov	r3, r8
     5e2:	0c 00       	.word	0x000c	; ????
     5e4:	58 1d       	adc	r21, r8
     5e6:	cf 21       	and	r28, r15
     5e8:	8c c3       	rjmp	.+1816   	; 0xd02 <u8x8_avr_gpio_and_delay+0x36>
     5ea:	a4 86       	std	Z+12, r10	; 0x0c
     5ec:	68 8a       	std	Y+16, r6	; 0x10
     5ee:	46 6e       	ori	r20, 0xE6	; 230
     5f0:	44 d0       	rcall	.+136    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     5f2:	94 98       	cbi	0x12, 4	; 18
     5f4:	b4 d4       	rcall	.+2408   	; 0xf5e <u8g2_send_buffer+0x10>
     5f6:	50 84       	ldd	r5, Z+8	; 0x08
     5f8:	4c 68       	ori	r20, 0x8C	; 140
     5fa:	6a 88       	ldd	r6, Y+18	; 0x12
     5fc:	66 8c       	ldd	r6, Z+30	; 0x1e
     5fe:	a2 c8       	rjmp	.-3772   	; 0xfffff744 <__eeprom_end+0xff7ef744>
     600:	00 59       	subi	r16, 0x90	; 144
     602:	17 cd       	rjmp	.-1490   	; 0x32 <__FUSE_REGION_LENGTH__+0x2f>
     604:	21 7c       	andi	r18, 0xC1	; 193
     606:	c1 86       	std	Z+9, r12	; 0x09
     608:	82 4a       	sbci	r24, 0xA2	; 162
     60a:	66 2a       	or	r6, r22
     60c:	88 46       	sbci	r24, 0x68	; 104
     60e:	6a 26       	eor	r6, r26
     610:	8c 22       	and	r8, r28
     612:	b0 72       	andi	r27, 0x20	; 32
     614:	74 0f       	add	r23, r20
     616:	6f 00       	.word	0x006f	; ????
     618:	5a 1a       	sub	r5, r26
     61a:	cc 21       	and	r28, r12
     61c:	6c e1       	ldi	r22, 0x1C	; 28
     61e:	41 58       	subi	r20, 0x81	; 129
     620:	d9 44       	sbci	r29, 0x49	; 73
     622:	18 45       	sbci	r17, 0x58	; 88
     624:	14 1d       	adc	r17, r4
     626:	e1 20       	and	r14, r1
     628:	1d ab       	std	Y+53, r17	; 0x35
     62a:	08 b2       	in	r0, 0x18	; 24
     62c:	88 b1       	in	r24, 0x08	; 8
     62e:	b2 83       	std	Z+2, r27	; 0x02
     630:	83 00       	.word	0x0083	; ????
     632:	5b 0a       	sbc	r5, r27
     634:	04 a6       	std	Z+44, r0	; 0x2c
     636:	33 c1       	rjmp	.+614    	; 0x89e <__LOCK_REGION_LENGTH__+0x49e>
     638:	44 ff       	sbrs	r20, 4
     63a:	4f 08       	sbc	r4, r15
     63c:	5c 14       	cp	r5, r12
     63e:	c8 21       	and	r28, r8
     640:	4c 41       	sbci	r20, 0x1C	; 28
     642:	4c 4e       	sbci	r20, 0xEC	; 236
     644:	4c 4e       	sbci	r20, 0xEC	; 236
     646:	4c 4e       	sbci	r20, 0xEC	; 236
     648:	4c 4e       	sbci	r20, 0xEC	; 236
     64a:	4c 4e       	sbci	r20, 0xEC	; 236
     64c:	4c 4e       	sbci	r20, 0xEC	; 236
     64e:	4c 00       	.word	0x004c	; ????
     650:	5d 0a       	sbc	r5, r29
     652:	04 a2       	std	Z+36, r0	; 0x24
     654:	33 81       	ldd	r19, Z+3	; 0x03
     656:	44 ff       	sbrs	r20, 4
     658:	4f 0c       	add	r4, r15
     65a:	5e 0f       	add	r21, r30
     65c:	08 a1       	ldd	r16, Y+32	; 0x20
     65e:	4d 47       	sbci	r20, 0x7D	; 125
     660:	4c 8a       	std	Y+20, r4	; 0x14
     662:	88 46       	sbci	r24, 0x68	; 104
     664:	44 0b       	sbc	r20, r20
     666:	21 22       	and	r2, r17
     668:	01 5f       	subi	r16, 0xF1	; 241
     66a:	08 49       	sbci	r16, 0x98	; 152
     66c:	60 4b       	sbci	r22, 0xB0	; 176
     66e:	e1 01       	movw	r28, r2
     670:	01 60       	ori	r16, 0x01	; 1
     672:	09 85       	ldd	r16, Y+9	; 0x09
     674:	a4 3e       	cpi	r26, 0xE4	; 228
     676:	41 66       	ori	r20, 0x61	; 97
     678:	91 00       	.word	0x0091	; ????
     67a:	61 14       	cp	r6, r1
     67c:	2a 21       	and	r18, r10
     67e:	5c e3       	ldi	r21, 0x3C	; 60
     680:	64 66       	ori	r22, 0x64	; 100
     682:	42 68       	ori	r20, 0x82	; 130
     684:	8c 66       	ori	r24, 0x6C	; 108
     686:	62 cd       	rjmp	.-1340   	; 0x14c <__trampolines_end+0xc0>
     688:	c4 cc       	rjmp	.-1656   	; 0x12 <__FUSE_REGION_LENGTH__+0xf>
     68a:	c4 08       	sbc	r12, r4
     68c:	93 01       	movw	r18, r6
     68e:	62 1a       	sub	r6, r18
     690:	cc 1d       	adc	r28, r12
     692:	64 81       	ldd	r22, Z+4	; 0x04
     694:	72 2f       	mov	r23, r18
     696:	88 68       	ori	r24, 0x88	; 136
     698:	46 a6       	std	Z+46, r4	; 0x2e
     69a:	26 a6       	std	Z+46, r2	; 0x2e
     69c:	26 a6       	std	Z+46, r2	; 0x2e
     69e:	26 a6       	std	Z+46, r2	; 0x2e
     6a0:	26 a6       	std	Z+46, r2	; 0x2e
     6a2:	26 68       	ori	r18, 0x86	; 134
     6a4:	46 24       	eor	r4, r6
     6a6:	6a 00       	.word	0x006a	; ????
     6a8:	63 10       	cpse	r6, r3
     6aa:	29 21       	and	r18, r9
     6ac:	54 a7       	std	Z+44, r21	; 0x2c
     6ae:	64 c4       	rjmp	.+2248   	; 0xf78 <u8g2_send_buffer+0x2a>
     6b0:	a8 6c       	ori	r26, 0xC8	; 200
     6b2:	ab 88       	ldd	r10, Y+19	; 0x13
     6b4:	19 19       	sub	r17, r9
     6b6:	12 00       	.word	0x0012	; ????
     6b8:	64 1a       	sub	r6, r20
     6ba:	cc 21       	and	r28, r12
     6bc:	6c 8f       	std	Y+28, r22	; 0x1c
     6be:	72 47       	sbci	r23, 0x72	; 114
     6c0:	14 23       	and	r17, r20
     6c2:	33 14       	cp	r3, r3
     6c4:	53 13       	cpse	r21, r19
     6c6:	53 13       	cpse	r21, r19
     6c8:	53 13       	cpse	r21, r19
     6ca:	53 13       	cpse	r21, r19
     6cc:	53 23       	and	r21, r19
     6ce:	33 44       	sbci	r19, 0x43	; 67
     6d0:	14 04       	cpc	r1, r4
     6d2:	65 14       	cp	r6, r5
     6d4:	2a 21       	and	r18, r10
     6d6:	5c 87       	std	Y+12, r21	; 0x0c
     6d8:	68 64       	ori	r22, 0x48	; 72
     6da:	62 c8       	rjmp	.-3900   	; 0xfffff7a0 <__eeprom_end+0xff7ef7a0>
     6dc:	e8 e0       	ldi	r30, 0x08	; 8
     6de:	40 6e       	ori	r20, 0xE0	; 224
     6e0:	2c 62       	ori	r18, 0x2C	; 44
     6e2:	48 a6       	std	Y+40, r4	; 0x28
     6e4:	04 00       	.word	0x0004	; ????
     6e6:	66 10       	cpse	r6, r6
     6e8:	c8 21       	and	r28, r8
     6ea:	3c 87       	std	Y+12, r19	; 0x0c
     6ec:	46 62       	ori	r20, 0x26	; 38
     6ee:	57 43       	sbci	r21, 0x37	; 55
     6f0:	36 53       	subi	r19, 0x36	; 54
     6f2:	fb a8       	ldd	r15, Y+51	; 0x33
     6f4:	06 00       	.word	0x0006	; ????
     6f6:	67 1f       	adc	r22, r23
     6f8:	eb 21       	and	r30, r11
     6fa:	5b 53       	subi	r21, 0x3B	; 59
     6fc:	70 c4       	rjmp	.+2272   	; 0xfde <u8g2_SendBuffer+0x1e>
     6fe:	68 64       	ori	r22, 0x48	; 72
     700:	46 48       	sbci	r20, 0x86	; 134
     702:	46 48       	sbci	r20, 0x86	; 134
     704:	66 64       	ori	r22, 0x46	; 70
     706:	c8 48       	sbci	r28, 0x88	; 136
     708:	f2 20       	and	r15, r2
     70a:	e8 20       	and	r14, r8
     70c:	42 6a       	ori	r20, 0xA2	; 162
     70e:	42 4c       	sbci	r20, 0xC2	; 194
     710:	62 48       	sbci	r22, 0x82	; 130
     712:	e6 06       	cpc	r14, r22
     714:	00 68       	ori	r16, 0x80	; 128
     716:	19 cc       	rjmp	.-1998   	; 0xffffff4a <__eeprom_end+0xff7eff4a>
     718:	21 6c       	ori	r18, 0xC1	; 193
     71a:	81 72       	andi	r24, 0x21	; 33
     71c:	2f 6a       	ori	r18, 0xAF	; 175
     71e:	48 48       	sbci	r20, 0x88	; 136
     720:	86 46       	sbci	r24, 0x66	; 102
     722:	86 46       	sbci	r24, 0x66	; 102
     724:	86 46       	sbci	r24, 0x66	; 102
     726:	86 46       	sbci	r24, 0x66	; 102
     728:	86 46       	sbci	r24, 0x66	; 102
     72a:	86 26       	eor	r8, r22
     72c:	4a 0a       	sbc	r4, r26
     72e:	69 0b       	sbc	r22, r25
     730:	c5 21       	and	r28, r5
     732:	34 63       	ori	r19, 0x34	; 52
     734:	64 2d       	mov	r22, r4
     736:	c9 7e       	andi	r28, 0xE9	; 233
     738:	51 6a       	ori	r21, 0xA1	; 161
     73a:	10 47       	sbci	r17, 0x70	; 112
     73c:	16 33       	cpi	r17, 0x36	; 54
     73e:	69 7b       	andi	r22, 0xB9	; 185
     740:	10 a2       	std	Z+32, r1	; 0x20
     742:	fd 91       	ld	r31, X+
     744:	85 85       	ldd	r24, Z+13	; 0x0d
     746:	08 09       	sbc	r16, r8
     748:	00 6b       	ori	r16, 0xB0	; 176
     74a:	18 cc       	rjmp	.-2000   	; 0xffffff7c <__eeprom_end+0xff7eff7c>
     74c:	21 6c       	ori	r18, 0xC1	; 193
     74e:	81 72       	andi	r24, 0x21	; 33
     750:	4f 4a       	sbci	r20, 0xAF	; 175
     752:	66 84       	ldd	r6, Z+14	; 0x0e
     754:	46 c2       	rjmp	.+1164   	; 0xbe2 <u8x8_avr_delay+0x2c6>
     756:	26 c4       	rjmp	.+2124   	; 0xfa4 <u8g2_send_buffer+0x56>
     758:	ae 26       	eor	r10, r30
     75a:	88 46       	sbci	r24, 0x68	; 104
     75c:	68 66       	ori	r22, 0x68	; 104
     75e:	28 2a       	or	r2, r24
     760:	0c 6c       	ori	r16, 0xCC	; 204
     762:	0a c5       	rjmp	.+2580   	; 0x1178 <u8g2_read_font_info+0xa>
     764:	21 34       	cpi	r18, 0x41	; 65
     766:	81 64       	ori	r24, 0x41	; 65
     768:	ff 17       	cp	r31, r31
     76a:	05 6d       	ori	r16, 0xD5	; 213
     76c:	1a 33       	cpi	r17, 0x3A	; 58
     76e:	21 a4       	ldd	r2, Z+41	; 0x29
     770:	81 a2       	std	Z+33, r8	; 0x21
     772:	c2 86       	std	Z+10, r12	; 0x0a
     774:	a4 84       	ldd	r10, Z+12	; 0x0c
     776:	64 68       	ori	r22, 0x84	; 132
     778:	c9 d0       	rcall	.+402    	; 0x90c <.do_clear_bss_loop>
     77a:	92 a1       	ldd	r25, Z+34	; 0x22
     77c:	25 43       	sbci	r18, 0x35	; 53
     77e:	4b 86       	std	Y+11, r4	; 0x0b
     780:	96 0c       	add	r9, r6
     782:	ad 28       	or	r10, r13
     784:	69 6e       	ori	r22, 0xE9	; 233
     786:	18 2c       	mov	r1, r8
     788:	21 6c       	ori	r18, 0xC1	; 193
     78a:	81 a2       	std	Z+33, r8	; 0x21
     78c:	86 84       	ldd	r8, Z+14	; 0x0e
     78e:	64 68       	ori	r22, 0x84	; 132
     790:	64 68       	ori	r22, 0x84	; 132
     792:	64 68       	ori	r22, 0x84	; 132
     794:	64 68       	ori	r22, 0x84	; 132
     796:	64 68       	ori	r22, 0x84	; 132
     798:	64 68       	ori	r22, 0x84	; 132
     79a:	a2 a4       	ldd	r10, Z+42	; 0x2a
     79c:	00 6f       	ori	r16, 0xF0	; 240
     79e:	10 2b       	or	r17, r16
     7a0:	21 64       	ori	r18, 0x41	; 65
     7a2:	a7 68       	ori	r26, 0x87	; 135
     7a4:	66 62       	ori	r22, 0x26	; 38
     7a6:	ca 57       	subi	r28, 0x7A	; 122
     7a8:	13 33       	cpi	r17, 0x33	; 51
     7aa:	43 35       	cpi	r20, 0x53	; 83
     7ac:	00 70       	andi	r16, 0x00	; 0
     7ae:	1c ac       	ldd	r1, Y+60	; 0x3c
     7b0:	1d 63       	ori	r17, 0x3D	; 61
     7b2:	61 84       	ldd	r6, Z+9	; 0x09
     7b4:	88 66       	ori	r24, 0x68	; 104
     7b6:	64 6a       	ori	r22, 0xA4	; 164
     7b8:	62 6a       	ori	r22, 0xA2	; 162
     7ba:	62 6a       	ori	r22, 0xA2	; 162
     7bc:	62 6a       	ori	r22, 0xA2	; 162
     7be:	62 6a       	ori	r22, 0xA2	; 162
     7c0:	82 66       	ori	r24, 0x62	; 98
     7c2:	64 82       	std	Z+4, r6	; 0x04
     7c4:	68 72       	andi	r22, 0x28	; 40
     7c6:	61 1d       	adc	r22, r1
     7c8:	00 71       	andi	r16, 0x10	; 16
     7ca:	1a ac       	ldd	r1, Y+58	; 0x3a
     7cc:	21 63       	ori	r18, 0x31	; 49
     7ce:	87 44       	sbci	r24, 0x47	; 71
     7d0:	64 86       	std	Z+12, r6	; 0x0c
     7d2:	62 6a       	ori	r22, 0xA2	; 162
     7d4:	62 6a       	ori	r22, 0xA2	; 162
     7d6:	62 6a       	ori	r22, 0xA2	; 162
     7d8:	62 6a       	ori	r22, 0xA2	; 162
     7da:	62 6a       	ori	r22, 0xA2	; 162
     7dc:	64 86       	std	Z+12, r6	; 0x0c
     7de:	88 62       	ori	r24, 0x28	; 40
     7e0:	72 c3       	rjmp	.+1764   	; 0xec6 <u8g2_send_tile_row+0x2c>
     7e2:	02 72       	andi	r16, 0x22	; 34
     7e4:	10 28       	or	r1, r0
     7e6:	21 4c       	sbci	r18, 0xC1	; 193
     7e8:	81 42       	sbci	r24, 0x21	; 33
     7ea:	84 42       	sbci	r24, 0x24	; 36
     7ec:	62 44       	sbci	r22, 0x42	; 66
     7ee:	62 6a       	ori	r22, 0xA2	; 162
     7f0:	47 35       	cpi	r20, 0x57	; 87
     7f2:	00 73       	andi	r16, 0x30	; 48
     7f4:	14 29       	or	r17, r4
     7f6:	21 54       	subi	r18, 0x41	; 65
     7f8:	85 22       	and	r8, r21
     7fa:	44 46       	sbci	r20, 0x64	; 100
     7fc:	62 28       	or	r6, r2
     7fe:	c2 e8       	ldi	r28, 0x82	; 130
     800:	ca aa       	std	Y+50, r12	; 0x32
     802:	48 22       	and	r4, r24
     804:	a2 04       	cpc	r10, r2
     806:	00 74       	andi	r16, 0x40	; 64
     808:	12 a7       	std	Z+42, r17	; 0x2a
     80a:	21 44       	sbci	r18, 0x41	; 65
     80c:	27 2c       	mov	r2, r7
     80e:	4a 68       	ori	r20, 0x8A	; 138
     810:	c6 64       	ori	r28, 0x46	; 70
     812:	68 4f       	sbci	r22, 0xF8	; 248
     814:	22 46       	sbci	r18, 0x62	; 98
     816:	42 28       	or	r4, r2
     818:	00 75       	andi	r16, 0x50	; 80
     81a:	17 2c       	mov	r1, r7
     81c:	21 6c       	ori	r18, 0xC1	; 193
     81e:	a1 84       	ldd	r10, Z+9	; 0x09
     820:	64 68       	ori	r22, 0x84	; 132
     822:	64 68       	ori	r22, 0x84	; 132
     824:	64 68       	ori	r22, 0x84	; 132
     826:	64 68       	ori	r22, 0x84	; 132
     828:	64 68       	ori	r22, 0x84	; 132
     82a:	64 68       	ori	r22, 0x84	; 132
     82c:	84 4d       	sbci	r24, 0xD4	; 212
     82e:	05 01       	movw	r0, r10
     830:	76 15       	cp	r23, r6
     832:	2a 1d       	adc	r18, r10
     834:	4c a1       	ldd	r20, Y+36	; 0x24
     836:	64 62       	ori	r22, 0x24	; 36
     838:	28 64       	ori	r18, 0x48	; 72
     83a:	28 66       	ori	r18, 0x68	; 104
     83c:	24 68       	ori	r18, 0x84	; 132
     83e:	24 8a       	std	Z+20, r2	; 0x14
     840:	8c 4e       	sbci	r24, 0xEC	; 236
     842:	50 08       	sbc	r5, r0
     844:	00 77       	andi	r16, 0x70	; 112
     846:	1e 30       	cpi	r17, 0x0E	; 14
     848:	1d 7c       	andi	r17, 0xCD	; 205
     84a:	a1 a2       	std	Z+33, r10	; 0x21
     84c:	64 62       	ori	r22, 0x24	; 36
     84e:	66 28       	or	r6, r6
     850:	64 66       	ori	r22, 0x64	; 100
     852:	28 66       	ori	r18, 0x68	; 104
     854:	84 24       	eor	r8, r4
     856:	68 84       	ldd	r6, Y+8	; 0x08
     858:	24 8a       	std	Z+20, r2	; 0x14
     85a:	84 8c       	ldd	r8, Z+28	; 0x1c
     85c:	84 4e       	sbci	r24, 0xE4	; 228
     85e:	48 50       	subi	r20, 0x08	; 8
     860:	48 08       	sbc	r4, r8
     862:	00 78       	andi	r16, 0x80	; 128
     864:	14 2b       	or	r17, r20
     866:	21 64       	ori	r18, 0x41	; 65
     868:	c1 82       	std	Z+1, r12	; 0x01
     86a:	8d 0c       	add	r8, r13
     86c:	85 54       	subi	r24, 0x45	; 69
     86e:	dd 5c       	subi	r29, 0xCD	; 205
     870:	95 04       	cpc	r9, r5
     872:	8d 0c       	add	r8, r13
     874:	05 85       	ldd	r16, Z+13	; 0x0d
     876:	01 79       	andi	r16, 0x91	; 145
     878:	1d ab       	std	Y+53, r17	; 0x35
     87a:	21 63       	ori	r18, 0x31	; 49
     87c:	a1 66       	ori	r26, 0x61	; 97
     87e:	62 2a       	or	r6, r18
     880:	64 2a       	or	r6, r20
     882:	66 26       	eor	r6, r22
     884:	68 26       	eor	r6, r24
     886:	6a 22       	and	r6, r26
     888:	6c 22       	and	r6, r28
     88a:	6e 70       	andi	r22, 0x0E	; 14
     88c:	32 4a       	sbci	r19, 0xA2	; 162
     88e:	26 6a       	ori	r18, 0xA6	; 166
     890:	22 6e       	ori	r18, 0xE2	; 226
     892:	0e 00       	.word	0x000e	; ????
     894:	7a 0f       	add	r23, r26
     896:	29 21       	and	r18, r9
     898:	54 e1       	ldi	r21, 0x14	; 20
     89a:	80 a6       	std	Z+40, r8	; 0x28
     89c:	86 88       	ldd	r8, Z+22	; 0x16
     89e:	9b 22       	and	r9, r27
     8a0:	a2 03       	fmuls	r18, r18
     8a2:	02 7b       	andi	r16, 0xB2	; 178
     8a4:	0f 05       	cpc	r16, r15
     8a6:	a2 33       	cpi	r26, 0x32	; 50
     8a8:	47 44       	sbci	r20, 0x47	; 71
     8aa:	64 27       	eor	r22, r20
     8ac:	8a 64       	ori	r24, 0x4A	; 74
     8ae:	46 76       	andi	r20, 0x66	; 102
     8b0:	23 24       	eor	r2, r3
     8b2:	7c 07       	cpc	r23, r28
     8b4:	c2 31       	cpi	r28, 0x12	; 18
     8b6:	5c e1       	ldi	r21, 0x1C	; 28
     8b8:	07 7d       	andi	r16, 0xD7	; 215
     8ba:	10 05       	cpc	r17, r0
     8bc:	a2 33       	cpi	r26, 0x32	; 50
     8be:	41 48       	sbci	r20, 0x81	; 129
     8c0:	66 64       	ori	r22, 0x46	; 70
     8c2:	1b 21       	and	r17, r11
     8c4:	11 91       	ld	r17, Z+
     8c6:	3d 51       	subi	r19, 0x1D	; 29
     8c8:	03 7e       	andi	r16, 0xE3	; 227
     8ca:	0c 6a       	ori	r16, 0xAC	; 172
     8cc:	24 65       	ori	r18, 0x54	; 84
     8ce:	65 c5       	rjmp	.+2762   	; 0x139a <u8g2_font_decode_get_unsigned_bits+0x9a>
     8d0:	41 c4       	rjmp	.+2178   	; 0x1154 <__stack+0x55>
     8d2:	c8 08       	sbc	r12, r8
     8d4:	00 00       	nop
     8d6:	00 00       	nop
     8d8:	04 ff       	sbrs	r16, 4
     8da:	ff 00       	.word	0x00ff	; ????
	...

000008de <__ctors_end>:
     8de:	11 24       	eor	r1, r1
     8e0:	1f be       	out	0x3f, r1	; 63
     8e2:	cf ef       	ldi	r28, 0xFF	; 255
     8e4:	d0 e1       	ldi	r29, 0x10	; 16
     8e6:	de bf       	out	0x3e, r29	; 62
     8e8:	cd bf       	out	0x3d, r28	; 61

000008ea <__do_copy_data>:
     8ea:	11 e0       	ldi	r17, 0x01	; 1
     8ec:	a0 e0       	ldi	r26, 0x00	; 0
     8ee:	b1 e0       	ldi	r27, 0x01	; 1
     8f0:	e6 e9       	ldi	r30, 0x96	; 150
     8f2:	fb e3       	ldi	r31, 0x3B	; 59
     8f4:	00 e0       	ldi	r16, 0x00	; 0
     8f6:	0b bf       	out	0x3b, r16	; 59
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <__do_copy_data+0x14>
     8fa:	07 90       	elpm	r0, Z+
     8fc:	0d 92       	st	X+, r0
     8fe:	a8 37       	cpi	r26, 0x78	; 120
     900:	b1 07       	cpc	r27, r17
     902:	d9 f7       	brne	.-10     	; 0x8fa <__do_copy_data+0x10>

00000904 <__do_clear_bss>:
     904:	25 e0       	ldi	r18, 0x05	; 5
     906:	a8 e7       	ldi	r26, 0x78	; 120
     908:	b1 e0       	ldi	r27, 0x01	; 1
     90a:	01 c0       	rjmp	.+2      	; 0x90e <.do_clear_bss_start>

0000090c <.do_clear_bss_loop>:
     90c:	1d 92       	st	X+, r1

0000090e <.do_clear_bss_start>:
     90e:	af 3d       	cpi	r26, 0xDF	; 223
     910:	b2 07       	cpc	r27, r18
     912:	e1 f7       	brne	.-8      	; 0x90c <.do_clear_bss_loop>
     914:	50 d2       	rcall	.+1184   	; 0xdb6 <main>
     916:	0c 94 c9 1d 	jmp	0x3b92	; 0x3b92 <_exit>

0000091a <__bad_interrupt>:
     91a:	72 cb       	rjmp	.-2332   	; 0x0 <__vectors>

0000091c <u8x8_avr_delay>:
#define P_CPU_NS (1000000000UL / F_CPU)

u8g2_t u8g2;

uint8_t u8x8_avr_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	e9 97       	sbiw	r28, 0x39	; 57
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	9d ab       	std	Y+53, r25	; 0x35
     932:	8c ab       	std	Y+52, r24	; 0x34
     934:	6e ab       	std	Y+54, r22	; 0x36
     936:	4f ab       	std	Y+55, r20	; 0x37
     938:	39 af       	std	Y+57, r19	; 0x39
     93a:	28 af       	std	Y+56, r18	; 0x38
	uint8_t cycles;

	switch(msg)
     93c:	8e a9       	ldd	r24, Y+54	; 0x36
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	8a 32       	cpi	r24, 0x2A	; 42
     944:	91 05       	cpc	r25, r1
     946:	71 f1       	breq	.+92     	; 0x9a4 <u8x8_avr_delay+0x88>
     948:	8b 32       	cpi	r24, 0x2B	; 43
     94a:	91 05       	cpc	r25, r1
     94c:	24 f4       	brge	.+8      	; 0x956 <u8x8_avr_delay+0x3a>
     94e:	89 97       	sbiw	r24, 0x29	; 41
     950:	09 f4       	brne	.+2      	; 0x954 <u8x8_avr_delay+0x38>
     952:	29 c1       	rjmp	.+594    	; 0xba6 <u8x8_avr_delay+0x28a>
     954:	ac c1       	rjmp	.+856    	; 0xcae <u8x8_avr_delay+0x392>
     956:	8b 32       	cpi	r24, 0x2B	; 43
     958:	91 05       	cpc	r25, r1
     95a:	21 f0       	breq	.+8      	; 0x964 <u8x8_avr_delay+0x48>
     95c:	8c 97       	sbiw	r24, 0x2c	; 44
     95e:	09 f4       	brne	.+2      	; 0x962 <u8x8_avr_delay+0x46>
     960:	a8 c1       	rjmp	.+848    	; 0xcb2 <u8x8_avr_delay+0x396>
     962:	a5 c1       	rjmp	.+842    	; 0xcae <u8x8_avr_delay+0x392>
#define CALL_CYCLES 26UL
#define CALC_CYCLES 4UL
#define RETURN_CYCLES 4UL
#define CYCLES_PER_LOOP 4UL

			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
     964:	8f a9       	ldd	r24, Y+55	; 0x37
     966:	28 2f       	mov	r18, r24
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	84 e6       	ldi	r24, 0x64	; 100
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	dc 01       	movw	r26, r24
     974:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__muluhisi3>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	28 ef       	ldi	r18, 0xF8	; 248
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	bc 01       	movw	r22, r24
     986:	cd 01       	movw	r24, r26
     988:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <__udivmodsi4>
     98c:	da 01       	movw	r26, r20
     98e:	c9 01       	movw	r24, r18
     990:	8d 83       	std	Y+5, r24	; 0x05

			if(cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES) 
     992:	8d 81       	ldd	r24, Y+5	; 0x05
     994:	83 32       	cpi	r24, 0x23	; 35
     996:	08 f0       	brcs	.+2      	; 0x99a <u8x8_avr_delay+0x7e>
     998:	8e c1       	rjmp	.+796    	; 0xcb6 <u8x8_avr_delay+0x39a>
				break;

			__asm__ __volatile__ (
     99a:	8d 81       	ldd	r24, Y+5	; 0x05
     99c:	01 97       	sbiw	r24, 0x01	; 1
     99e:	f1 f7       	brne	.-4      	; 0x99c <u8x8_avr_delay+0x80>
     9a0:	8d 83       	std	Y+5, r24	; 0x05
			"1: sbiw %0,1" "\n\t" // 2 cycles
			"brne 1b" : "=w" (cycles) : "0" (cycles) // 2 cycles
			);
			break;
     9a2:	8a c1       	rjmp	.+788    	; 0xcb8 <u8x8_avr_delay+0x39c>
		case U8X8_MSG_DELAY_10MICRO:    // delay arg_int * 10 micro seconds
			for(int i=0 ; i < arg_int ; i++)
     9a4:	1a 82       	std	Y+2, r1	; 0x02
     9a6:	19 82       	std	Y+1, r1	; 0x01
     9a8:	f4 c0       	rjmp	.+488    	; 0xb92 <u8x8_avr_delay+0x276>
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e2       	ldi	r26, 0x20	; 32
     9b0:	b1 e4       	ldi	r27, 0x41	; 65
     9b2:	8a 87       	std	Y+10, r24	; 0x0a
     9b4:	9b 87       	std	Y+11, r25	; 0x0b
     9b6:	ac 87       	std	Y+12, r26	; 0x0c
     9b8:	bd 87       	std	Y+13, r27	; 0x0d
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     9ba:	2b ea       	ldi	r18, 0xAB	; 171
     9bc:	3a ea       	ldi	r19, 0xAA	; 170
     9be:	4a ea       	ldi	r20, 0xAA	; 170
     9c0:	50 e4       	ldi	r21, 0x40	; 64
     9c2:	6a 85       	ldd	r22, Y+10	; 0x0a
     9c4:	7b 85       	ldd	r23, Y+11	; 0x0b
     9c6:	8c 85       	ldd	r24, Y+12	; 0x0c
     9c8:	9d 85       	ldd	r25, Y+13	; 0x0d
     9ca:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__mulsf3>
     9ce:	dc 01       	movw	r26, r24
     9d0:	cb 01       	movw	r24, r22
     9d2:	8e 87       	std	Y+14, r24	; 0x0e
     9d4:	9f 87       	std	Y+15, r25	; 0x0f
     9d6:	a8 8b       	std	Y+16, r26	; 0x10
     9d8:	b9 8b       	std	Y+17, r27	; 0x11
	__tmp2 = ((F_CPU) / 4e6) * __us;
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	40 e8       	ldi	r20, 0x80	; 128
     9e0:	50 e4       	ldi	r21, 0x40	; 64
     9e2:	6a 85       	ldd	r22, Y+10	; 0x0a
     9e4:	7b 85       	ldd	r23, Y+11	; 0x0b
     9e6:	8c 85       	ldd	r24, Y+12	; 0x0c
     9e8:	9d 85       	ldd	r25, Y+13	; 0x0d
     9ea:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__mulsf3>
     9ee:	dc 01       	movw	r26, r24
     9f0:	cb 01       	movw	r24, r22
     9f2:	8a 8b       	std	Y+18, r24	; 0x12
     9f4:	9b 8b       	std	Y+19, r25	; 0x13
     9f6:	ac 8b       	std	Y+20, r26	; 0x14
     9f8:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e8       	ldi	r20, 0x80	; 128
     a00:	5f e3       	ldi	r21, 0x3F	; 63
     a02:	6e 85       	ldd	r22, Y+14	; 0x0e
     a04:	7f 85       	ldd	r23, Y+15	; 0x0f
     a06:	88 89       	ldd	r24, Y+16	; 0x10
     a08:	99 89       	ldd	r25, Y+17	; 0x11
     a0a:	0e 94 13 1c 	call	0x3826	; 0x3826 <__cmpsf2>
     a0e:	88 23       	and	r24, r24
     a10:	1c f4       	brge	.+6      	; 0xa18 <u8x8_avr_delay+0xfc>
		__ticks = 1;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	8e 8b       	std	Y+22, r24	; 0x16
     a16:	b2 c0       	rjmp	.+356    	; 0xb7c <u8x8_avr_delay+0x260>
	else if (__tmp2 > 65535)
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	3f ef       	ldi	r19, 0xFF	; 255
     a1c:	4f e7       	ldi	r20, 0x7F	; 127
     a1e:	57 e4       	ldi	r21, 0x47	; 71
     a20:	6a 89       	ldd	r22, Y+18	; 0x12
     a22:	7b 89       	ldd	r23, Y+19	; 0x13
     a24:	8c 89       	ldd	r24, Y+20	; 0x14
     a26:	9d 89       	ldd	r25, Y+21	; 0x15
     a28:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__gesf2>
     a2c:	18 16       	cp	r1, r24
     a2e:	0c f0       	brlt	.+2      	; 0xa32 <u8x8_avr_delay+0x116>
     a30:	7b c0       	rjmp	.+246    	; 0xb28 <u8x8_avr_delay+0x20c>
	{
		_delay_ms(__us / 1000.0);
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	4a e7       	ldi	r20, 0x7A	; 122
     a38:	54 e4       	ldi	r21, 0x44	; 68
     a3a:	6a 85       	ldd	r22, Y+10	; 0x0a
     a3c:	7b 85       	ldd	r23, Y+11	; 0x0b
     a3e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a40:	9d 85       	ldd	r25, Y+13	; 0x0d
     a42:	0e 94 17 1c 	call	0x382e	; 0x382e <__divsf3>
     a46:	dc 01       	movw	r26, r24
     a48:	cb 01       	movw	r24, r22
     a4a:	8f 8b       	std	Y+23, r24	; 0x17
     a4c:	98 8f       	std	Y+24, r25	; 0x18
     a4e:	a9 8f       	std	Y+25, r26	; 0x19
     a50:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	4a e7       	ldi	r20, 0x7A	; 122
     a58:	55 e4       	ldi	r21, 0x45	; 69
     a5a:	6f 89       	ldd	r22, Y+23	; 0x17
     a5c:	78 8d       	ldd	r23, Y+24	; 0x18
     a5e:	89 8d       	ldd	r24, Y+25	; 0x19
     a60:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a62:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__mulsf3>
     a66:	dc 01       	movw	r26, r24
     a68:	cb 01       	movw	r24, r22
     a6a:	8b 8f       	std	Y+27, r24	; 0x1b
     a6c:	9c 8f       	std	Y+28, r25	; 0x1c
     a6e:	ad 8f       	std	Y+29, r26	; 0x1d
     a70:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e8       	ldi	r20, 0x80	; 128
     a78:	5f e3       	ldi	r21, 0x3F	; 63
     a7a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a7c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a80:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a82:	0e 94 13 1c 	call	0x3826	; 0x3826 <__cmpsf2>
     a86:	88 23       	and	r24, r24
     a88:	2c f4       	brge	.+10     	; 0xa94 <u8x8_avr_delay+0x178>
		__ticks = 1;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	98 a3       	std	Y+32, r25	; 0x20
     a90:	8f 8f       	std	Y+31, r24	; 0x1f
     a92:	3f c0       	rjmp	.+126    	; 0xb12 <u8x8_avr_delay+0x1f6>
	else if (__tmp > 65535)
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	3f ef       	ldi	r19, 0xFF	; 255
     a98:	4f e7       	ldi	r20, 0x7F	; 127
     a9a:	57 e4       	ldi	r21, 0x47	; 71
     a9c:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a9e:	7c 8d       	ldd	r23, Y+28	; 0x1c
     aa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     aa2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     aa4:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__gesf2>
     aa8:	18 16       	cp	r1, r24
     aaa:	4c f5       	brge	.+82     	; 0xafe <u8x8_avr_delay+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	40 e2       	ldi	r20, 0x20	; 32
     ab2:	51 e4       	ldi	r21, 0x41	; 65
     ab4:	6f 89       	ldd	r22, Y+23	; 0x17
     ab6:	78 8d       	ldd	r23, Y+24	; 0x18
     ab8:	89 8d       	ldd	r24, Y+25	; 0x19
     aba:	9a 8d       	ldd	r25, Y+26	; 0x1a
     abc:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__mulsf3>
     ac0:	dc 01       	movw	r26, r24
     ac2:	cb 01       	movw	r24, r22
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__fixunssfsi>
     acc:	dc 01       	movw	r26, r24
     ace:	cb 01       	movw	r24, r22
     ad0:	98 a3       	std	Y+32, r25	; 0x20
     ad2:	8f 8f       	std	Y+31, r24	; 0x1f
     ad4:	0f c0       	rjmp	.+30     	; 0xaf4 <u8x8_avr_delay+0x1d8>
     ad6:	80 e9       	ldi	r24, 0x90	; 144
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	9a a3       	std	Y+34, r25	; 0x22
     adc:	89 a3       	std	Y+33, r24	; 0x21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ade:	89 a1       	ldd	r24, Y+33	; 0x21
     ae0:	9a a1       	ldd	r25, Y+34	; 0x22
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	f1 f7       	brne	.-4      	; 0xae2 <u8x8_avr_delay+0x1c6>
     ae6:	9a a3       	std	Y+34, r25	; 0x22
     ae8:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aea:	8f 8d       	ldd	r24, Y+31	; 0x1f
     aec:	98 a1       	ldd	r25, Y+32	; 0x20
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	98 a3       	std	Y+32, r25	; 0x20
     af2:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     af4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     af6:	98 a1       	ldd	r25, Y+32	; 0x20
     af8:	89 2b       	or	r24, r25
     afa:	69 f7       	brne	.-38     	; 0xad6 <u8x8_avr_delay+0x1ba>
     afc:	3f c0       	rjmp	.+126    	; 0xb7c <u8x8_avr_delay+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     afe:	6b 8d       	ldd	r22, Y+27	; 0x1b
     b00:	7c 8d       	ldd	r23, Y+28	; 0x1c
     b02:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b04:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b06:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__fixunssfsi>
     b0a:	dc 01       	movw	r26, r24
     b0c:	cb 01       	movw	r24, r22
     b0e:	98 a3       	std	Y+32, r25	; 0x20
     b10:	8f 8f       	std	Y+31, r24	; 0x1f
     b12:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b14:	98 a1       	ldd	r25, Y+32	; 0x20
     b16:	9c a3       	std	Y+36, r25	; 0x24
     b18:	8b a3       	std	Y+35, r24	; 0x23
     b1a:	8b a1       	ldd	r24, Y+35	; 0x23
     b1c:	9c a1       	ldd	r25, Y+36	; 0x24
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <u8x8_avr_delay+0x202>
     b22:	9c a3       	std	Y+36, r25	; 0x24
     b24:	8b a3       	std	Y+35, r24	; 0x23
     b26:	2a c0       	rjmp	.+84     	; 0xb7c <u8x8_avr_delay+0x260>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	4f e7       	ldi	r20, 0x7F	; 127
     b2e:	53 e4       	ldi	r21, 0x43	; 67
     b30:	6e 85       	ldd	r22, Y+14	; 0x0e
     b32:	7f 85       	ldd	r23, Y+15	; 0x0f
     b34:	88 89       	ldd	r24, Y+16	; 0x10
     b36:	99 89       	ldd	r25, Y+17	; 0x11
     b38:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__gesf2>
     b3c:	18 16       	cp	r1, r24
     b3e:	ac f4       	brge	.+42     	; 0xb6a <u8x8_avr_delay+0x24e>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     b40:	6a 89       	ldd	r22, Y+18	; 0x12
     b42:	7b 89       	ldd	r23, Y+19	; 0x13
     b44:	8c 89       	ldd	r24, Y+20	; 0x14
     b46:	9d 89       	ldd	r25, Y+21	; 0x15
     b48:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__fixunssfsi>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	9e a3       	std	Y+38, r25	; 0x26
     b52:	8d a3       	std	Y+37, r24	; 0x25
     b54:	8d a1       	ldd	r24, Y+37	; 0x25
     b56:	9e a1       	ldd	r25, Y+38	; 0x26
     b58:	98 a7       	std	Y+40, r25	; 0x28
     b5a:	8f a3       	std	Y+39, r24	; 0x27
     b5c:	8f a1       	ldd	r24, Y+39	; 0x27
     b5e:	98 a5       	ldd	r25, Y+40	; 0x28
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	f1 f7       	brne	.-4      	; 0xb60 <u8x8_avr_delay+0x244>
     b64:	98 a7       	std	Y+40, r25	; 0x28
     b66:	8f a3       	std	Y+39, r24	; 0x27
     b68:	0f c0       	rjmp	.+30     	; 0xb88 <u8x8_avr_delay+0x26c>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b6a:	6e 85       	ldd	r22, Y+14	; 0x0e
     b6c:	7f 85       	ldd	r23, Y+15	; 0x0f
     b6e:	88 89       	ldd	r24, Y+16	; 0x10
     b70:	99 89       	ldd	r25, Y+17	; 0x11
     b72:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__fixunssfsi>
     b76:	dc 01       	movw	r26, r24
     b78:	cb 01       	movw	r24, r22
     b7a:	8e 8b       	std	Y+22, r24	; 0x16
     b7c:	8e 89       	ldd	r24, Y+22	; 0x16
     b7e:	89 a7       	std	Y+41, r24	; 0x29
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b80:	89 a5       	ldd	r24, Y+41	; 0x29
     b82:	8a 95       	dec	r24
     b84:	f1 f7       	brne	.-4      	; 0xb82 <u8x8_avr_delay+0x266>
     b86:	89 a7       	std	Y+41, r24	; 0x29
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	9a 81       	ldd	r25, Y+2	; 0x02
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	9a 83       	std	Y+2, r25	; 0x02
     b90:	89 83       	std	Y+1, r24	; 0x01
     b92:	8f a9       	ldd	r24, Y+55	; 0x37
     b94:	28 2f       	mov	r18, r24
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	9a 81       	ldd	r25, Y+2	; 0x02
     b9c:	82 17       	cp	r24, r18
     b9e:	93 07       	cpc	r25, r19
     ba0:	0c f4       	brge	.+2      	; 0xba4 <u8x8_avr_delay+0x288>
     ba2:	03 cf       	rjmp	.-506    	; 0x9aa <u8x8_avr_delay+0x8e>
				_delay_us(10);
			break;
     ba4:	89 c0       	rjmp	.+274    	; 0xcb8 <u8x8_avr_delay+0x39c>
		case U8X8_MSG_DELAY_MILLI:      // delay arg_int * 1 milli second
			for(int i=0 ; i < arg_int ; i++)
     ba6:	1c 82       	std	Y+4, r1	; 0x04
     ba8:	1b 82       	std	Y+3, r1	; 0x03
     baa:	77 c0       	rjmp	.+238    	; 0xc9a <u8x8_avr_delay+0x37e>
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	a0 e8       	ldi	r26, 0x80	; 128
     bb2:	bf e3       	ldi	r27, 0x3F	; 63
     bb4:	8e 83       	std	Y+6, r24	; 0x06
     bb6:	9f 83       	std	Y+7, r25	; 0x07
     bb8:	a8 87       	std	Y+8, r26	; 0x08
     bba:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	4a e7       	ldi	r20, 0x7A	; 122
     bc2:	55 e4       	ldi	r21, 0x45	; 69
     bc4:	6e 81       	ldd	r22, Y+6	; 0x06
     bc6:	7f 81       	ldd	r23, Y+7	; 0x07
     bc8:	88 85       	ldd	r24, Y+8	; 0x08
     bca:	99 85       	ldd	r25, Y+9	; 0x09
     bcc:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__mulsf3>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
     bd4:	8a a7       	std	Y+42, r24	; 0x2a
     bd6:	9b a7       	std	Y+43, r25	; 0x2b
     bd8:	ac a7       	std	Y+44, r26	; 0x2c
     bda:	bd a7       	std	Y+45, r27	; 0x2d
	if (__tmp < 1.0)
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e8       	ldi	r20, 0x80	; 128
     be2:	5f e3       	ldi	r21, 0x3F	; 63
     be4:	6a a5       	ldd	r22, Y+42	; 0x2a
     be6:	7b a5       	ldd	r23, Y+43	; 0x2b
     be8:	8c a5       	ldd	r24, Y+44	; 0x2c
     bea:	9d a5       	ldd	r25, Y+45	; 0x2d
     bec:	0e 94 13 1c 	call	0x3826	; 0x3826 <__cmpsf2>
     bf0:	88 23       	and	r24, r24
     bf2:	2c f4       	brge	.+10     	; 0xbfe <u8x8_avr_delay+0x2e2>
		__ticks = 1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	9f a7       	std	Y+47, r25	; 0x2f
     bfa:	8e a7       	std	Y+46, r24	; 0x2e
     bfc:	3f c0       	rjmp	.+126    	; 0xc7c <u8x8_avr_delay+0x360>
	else if (__tmp > 65535)
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	3f ef       	ldi	r19, 0xFF	; 255
     c02:	4f e7       	ldi	r20, 0x7F	; 127
     c04:	57 e4       	ldi	r21, 0x47	; 71
     c06:	6a a5       	ldd	r22, Y+42	; 0x2a
     c08:	7b a5       	ldd	r23, Y+43	; 0x2b
     c0a:	8c a5       	ldd	r24, Y+44	; 0x2c
     c0c:	9d a5       	ldd	r25, Y+45	; 0x2d
     c0e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__gesf2>
     c12:	18 16       	cp	r1, r24
     c14:	4c f5       	brge	.+82     	; 0xc68 <u8x8_avr_delay+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e2       	ldi	r20, 0x20	; 32
     c1c:	51 e4       	ldi	r21, 0x41	; 65
     c1e:	6e 81       	ldd	r22, Y+6	; 0x06
     c20:	7f 81       	ldd	r23, Y+7	; 0x07
     c22:	88 85       	ldd	r24, Y+8	; 0x08
     c24:	99 85       	ldd	r25, Y+9	; 0x09
     c26:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__mulsf3>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	bc 01       	movw	r22, r24
     c30:	cd 01       	movw	r24, r26
     c32:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__fixunssfsi>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	9f a7       	std	Y+47, r25	; 0x2f
     c3c:	8e a7       	std	Y+46, r24	; 0x2e
     c3e:	0f c0       	rjmp	.+30     	; 0xc5e <u8x8_avr_delay+0x342>
     c40:	80 e9       	ldi	r24, 0x90	; 144
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	99 ab       	std	Y+49, r25	; 0x31
     c46:	88 ab       	std	Y+48, r24	; 0x30
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c48:	88 a9       	ldd	r24, Y+48	; 0x30
     c4a:	99 a9       	ldd	r25, Y+49	; 0x31
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <u8x8_avr_delay+0x330>
     c50:	99 ab       	std	Y+49, r25	; 0x31
     c52:	88 ab       	std	Y+48, r24	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c54:	8e a5       	ldd	r24, Y+46	; 0x2e
     c56:	9f a5       	ldd	r25, Y+47	; 0x2f
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	9f a7       	std	Y+47, r25	; 0x2f
     c5c:	8e a7       	std	Y+46, r24	; 0x2e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c5e:	8e a5       	ldd	r24, Y+46	; 0x2e
     c60:	9f a5       	ldd	r25, Y+47	; 0x2f
     c62:	89 2b       	or	r24, r25
     c64:	69 f7       	brne	.-38     	; 0xc40 <u8x8_avr_delay+0x324>
     c66:	14 c0       	rjmp	.+40     	; 0xc90 <u8x8_avr_delay+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c68:	6a a5       	ldd	r22, Y+42	; 0x2a
     c6a:	7b a5       	ldd	r23, Y+43	; 0x2b
     c6c:	8c a5       	ldd	r24, Y+44	; 0x2c
     c6e:	9d a5       	ldd	r25, Y+45	; 0x2d
     c70:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__fixunssfsi>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	9f a7       	std	Y+47, r25	; 0x2f
     c7a:	8e a7       	std	Y+46, r24	; 0x2e
     c7c:	8e a5       	ldd	r24, Y+46	; 0x2e
     c7e:	9f a5       	ldd	r25, Y+47	; 0x2f
     c80:	9b ab       	std	Y+51, r25	; 0x33
     c82:	8a ab       	std	Y+50, r24	; 0x32
     c84:	8a a9       	ldd	r24, Y+50	; 0x32
     c86:	9b a9       	ldd	r25, Y+51	; 0x33
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <u8x8_avr_delay+0x36c>
     c8c:	9b ab       	std	Y+51, r25	; 0x33
     c8e:	8a ab       	std	Y+50, r24	; 0x32
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	9c 81       	ldd	r25, Y+4	; 0x04
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	9c 83       	std	Y+4, r25	; 0x04
     c98:	8b 83       	std	Y+3, r24	; 0x03
     c9a:	8f a9       	ldd	r24, Y+55	; 0x37
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	82 17       	cp	r24, r18
     ca6:	93 07       	cpc	r25, r19
     ca8:	0c f4       	brge	.+2      	; 0xcac <u8x8_avr_delay+0x390>
     caa:	80 cf       	rjmp	.-256    	; 0xbac <u8x8_avr_delay+0x290>
				_delay_ms(1);
			break;
     cac:	05 c0       	rjmp	.+10     	; 0xcb8 <u8x8_avr_delay+0x39c>
		default:
			return 0;
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	04 c0       	rjmp	.+8      	; 0xcba <u8x8_avr_delay+0x39e>

	switch(msg)
	{
		case U8X8_MSG_DELAY_NANO:     // delay arg_int * 1 nano second
			// At 20Mhz, each cycle is 50ns, the call itself is slower.
			break;
     cb2:	00 00       	nop
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <u8x8_avr_delay+0x39c>
#define CYCLES_PER_LOOP 4UL

			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);

			if(cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES) 
				break;
     cb6:	00 00       	nop
				_delay_ms(1);
			break;
		default:
			return 0;
	}
	return 1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
}
     cba:	e9 96       	adiw	r28, 0x39	; 57
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <u8x8_avr_gpio_and_delay>:


uint8_t u8x8_avr_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <u8x8_avr_gpio_and_delay+0x6>
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <u8x8_avr_gpio_and_delay+0x8>
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <u8x8_avr_gpio_and_delay+0xa>
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	9a 83       	std	Y+2, r25	; 0x02
     cdc:	89 83       	std	Y+1, r24	; 0x01
     cde:	6b 83       	std	Y+3, r22	; 0x03
     ce0:	4c 83       	std	Y+4, r20	; 0x04
     ce2:	3e 83       	std	Y+6, r19	; 0x06
     ce4:	2d 83       	std	Y+5, r18	; 0x05
	// Re-use library for delays

	switch(msg)
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	8c 34       	cpi	r24, 0x4C	; 76
     cee:	91 05       	cpc	r25, r1
     cf0:	c9 f0       	breq	.+50     	; 0xd24 <u8x8_avr_gpio_and_delay+0x58>
     cf2:	8d 34       	cpi	r24, 0x4D	; 77
     cf4:	91 05       	cpc	r25, r1
     cf6:	69 f1       	breq	.+90     	; 0xd52 <u8x8_avr_gpio_and_delay+0x86>
     cf8:	88 97       	sbiw	r24, 0x28	; 40
     cfa:	09 f0       	breq	.+2      	; 0xcfe <u8x8_avr_gpio_and_delay+0x32>
     cfc:	41 c0       	rjmp	.+130    	; 0xd80 <u8x8_avr_gpio_and_delay+0xb4>
	{
		case U8X8_MSG_GPIO_AND_DELAY_INIT:  // called once during init phase of u8g2/u8x8
			DISPLAY_CLK_DIR |= 1<<DISPLAY_CLK_PIN;
     cfe:	81 e3       	ldi	r24, 0x31	; 49
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	21 e3       	ldi	r18, 0x31	; 49
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	f9 01       	movw	r30, r18
     d08:	20 81       	ld	r18, Z
     d0a:	21 60       	ori	r18, 0x01	; 1
     d0c:	fc 01       	movw	r30, r24
     d0e:	20 83       	st	Z, r18
			DISPLAY_DATA_DIR |= 1<<DISPLAY_DATA_PIN;
     d10:	81 e3       	ldi	r24, 0x31	; 49
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	21 e3       	ldi	r18, 0x31	; 49
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	f9 01       	movw	r30, r18
     d1a:	20 81       	ld	r18, Z
     d1c:	22 60       	ori	r18, 0x02	; 2
     d1e:	fc 01       	movw	r30, r24
     d20:	20 83       	st	Z, r18
			break;              // can be used to setup pins
     d22:	3f c0       	rjmp	.+126    	; 0xda2 <u8x8_avr_gpio_and_delay+0xd6>
		case U8X8_MSG_GPIO_I2C_CLOCK:        // Clock pin: Output level in arg_int
			if(arg_int)
     d24:	8c 81       	ldd	r24, Y+4	; 0x04
     d26:	88 23       	and	r24, r24
     d28:	51 f0       	breq	.+20     	; 0xd3e <u8x8_avr_gpio_and_delay+0x72>
				DISPLAY_CLK_PORT |= (1<<DISPLAY_CLK_PIN);
     d2a:	82 e3       	ldi	r24, 0x32	; 50
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	22 e3       	ldi	r18, 0x32	; 50
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	f9 01       	movw	r30, r18
     d34:	20 81       	ld	r18, Z
     d36:	21 60       	ori	r18, 0x01	; 1
     d38:	fc 01       	movw	r30, r24
     d3a:	20 83       	st	Z, r18
			else
				DISPLAY_CLK_PORT &= ~(1<<DISPLAY_CLK_PIN);
			break;
     d3c:	32 c0       	rjmp	.+100    	; 0xda2 <u8x8_avr_gpio_and_delay+0xd6>
			break;              // can be used to setup pins
		case U8X8_MSG_GPIO_I2C_CLOCK:        // Clock pin: Output level in arg_int
			if(arg_int)
				DISPLAY_CLK_PORT |= (1<<DISPLAY_CLK_PIN);
			else
				DISPLAY_CLK_PORT &= ~(1<<DISPLAY_CLK_PIN);
     d3e:	82 e3       	ldi	r24, 0x32	; 50
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	22 e3       	ldi	r18, 0x32	; 50
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	f9 01       	movw	r30, r18
     d48:	20 81       	ld	r18, Z
     d4a:	2e 7f       	andi	r18, 0xFE	; 254
     d4c:	fc 01       	movw	r30, r24
     d4e:	20 83       	st	Z, r18
			break;
     d50:	28 c0       	rjmp	.+80     	; 0xda2 <u8x8_avr_gpio_and_delay+0xd6>
		case U8X8_MSG_GPIO_I2C_DATA:        // Data pin: Output level in arg_int
			if(arg_int)
     d52:	8c 81       	ldd	r24, Y+4	; 0x04
     d54:	88 23       	and	r24, r24
     d56:	51 f0       	breq	.+20     	; 0xd6c <u8x8_avr_gpio_and_delay+0xa0>
				DISPLAY_DATA_PORT |= (1<<DISPLAY_DATA_PIN);
     d58:	82 e3       	ldi	r24, 0x32	; 50
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	22 e3       	ldi	r18, 0x32	; 50
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	f9 01       	movw	r30, r18
     d62:	20 81       	ld	r18, Z
     d64:	22 60       	ori	r18, 0x02	; 2
     d66:	fc 01       	movw	r30, r24
     d68:	20 83       	st	Z, r18
			else
				DISPLAY_DATA_PORT &= ~(1<<DISPLAY_DATA_PIN);
			break;
     d6a:	1b c0       	rjmp	.+54     	; 0xda2 <u8x8_avr_gpio_and_delay+0xd6>
			break;
		case U8X8_MSG_GPIO_I2C_DATA:        // Data pin: Output level in arg_int
			if(arg_int)
				DISPLAY_DATA_PORT |= (1<<DISPLAY_DATA_PIN);
			else
				DISPLAY_DATA_PORT &= ~(1<<DISPLAY_DATA_PIN);
     d6c:	82 e3       	ldi	r24, 0x32	; 50
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	22 e3       	ldi	r18, 0x32	; 50
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	f9 01       	movw	r30, r18
     d76:	20 81       	ld	r18, Z
     d78:	2d 7f       	andi	r18, 0xFD	; 253
     d7a:	fc 01       	movw	r30, r24
     d7c:	20 83       	st	Z, r18
			break;
     d7e:	11 c0       	rjmp	.+34     	; 0xda2 <u8x8_avr_gpio_and_delay+0xd6>
		
		default:
			if (u8x8_avr_delay(u8x8, msg, arg_int, arg_ptr))	// check for any delay msgs
     d80:	2d 81       	ldd	r18, Y+5	; 0x05
     d82:	3e 81       	ldd	r19, Y+6	; 0x06
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	9a 81       	ldd	r25, Y+2	; 0x02
     d88:	4c 81       	ldd	r20, Y+4	; 0x04
     d8a:	6b 81       	ldd	r22, Y+3	; 0x03
     d8c:	c7 dd       	rcall	.-1138   	; 0x91c <u8x8_avr_delay>
     d8e:	88 23       	and	r24, r24
     d90:	11 f0       	breq	.+4      	; 0xd96 <u8x8_avr_gpio_and_delay+0xca>
				return 1;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	07 c0       	rjmp	.+14     	; 0xda4 <u8x8_avr_gpio_and_delay+0xd8>
			u8x8_SetGPIOResult(u8x8, 1);      // default return value
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	21 e0       	ldi	r18, 0x01	; 1
     d9c:	fc 01       	movw	r30, r24
     d9e:	22 8f       	std	Z+26, r18	; 0x1a
			break;
     da0:	00 00       	nop
	}
	return 1;
     da2:	81 e0       	ldi	r24, 0x01	; 1
}
     da4:	26 96       	adiw	r28, 0x06	; 6
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	08 95       	ret

00000db6 <main>:

int main(void)
{
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
		1. Arg: Address of an empty u8g2 structure
		2. Arg: Usually U8G2_R0, others are listed here: https://github.com/olikraus/u8g2/wiki/u8g2reference#carduino-example
		3. Arg: Protocol procedure (u8g2-byte), list is here: https://github.com/olikraus/u8g2/wiki/Porting-to-new-MCU-platform#communication-callback-eg-u8x8_byte_hw_i2c
		4. Arg: Defined in this code itself (see above)
	*/
	u8g2_Setup_ssd1306_i2c_128x64_noname_f( &u8g2, U8G2_R0, u8x8_byte_sw_i2c, u8x8_avr_gpio_and_delay );
     dbe:	26 e6       	ldi	r18, 0x66	; 102
     dc0:	36 e0       	ldi	r19, 0x06	; 6
     dc2:	46 ee       	ldi	r20, 0xE6	; 230
     dc4:	56 e1       	ldi	r21, 0x16	; 22
     dc6:	6c e0       	ldi	r22, 0x0C	; 12
     dc8:	71 e0       	ldi	r23, 0x01	; 1
     dca:	89 e7       	ldi	r24, 0x79	; 121
     dcc:	95 e0       	ldi	r25, 0x05	; 5
     dce:	1f d1       	rcall	.+574    	; 0x100e <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
	u8g2_SetI2CAddress(&u8g2, 0x78);
     dd0:	89 e7       	ldi	r24, 0x79	; 121
     dd2:	95 e0       	ldi	r25, 0x05	; 5
     dd4:	28 e7       	ldi	r18, 0x78	; 120
     dd6:	fc 01       	movw	r30, r24
     dd8:	26 8b       	std	Z+22, r18	; 0x16
	u8g2_InitDisplay(&u8g2);
     dda:	89 e7       	ldi	r24, 0x79	; 121
     ddc:	95 e0       	ldi	r25, 0x05	; 5
     dde:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	89 e7       	ldi	r24, 0x79	; 121
     de6:	95 e0       	ldi	r25, 0x05	; 5
     de8:	0e 94 14 1a 	call	0x3428	; 0x3428 <u8x8_SetPowerSave>
	
	/* full buffer example, setup procedure ends in _f */
	u8g2_ClearBuffer(&u8g2);
     dec:	89 e7       	ldi	r24, 0x79	; 121
     dee:	95 e0       	ldi	r25, 0x05	; 5
     df0:	12 d0       	rcall	.+36     	; 0xe16 <u8g2_ClearBuffer>
	u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
     df2:	6c e8       	ldi	r22, 0x8C	; 140
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	89 e7       	ldi	r24, 0x79	; 121
     df8:	95 e0       	ldi	r25, 0x05	; 5
     dfa:	0e 94 11 10 	call	0x2022	; 0x2022 <u8g2_SetFont>
	u8g2_DrawStr(&u8g2, 1, 18, "U8g2 on AVR");
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	31 e0       	ldi	r19, 0x01	; 1
     e02:	42 e1       	ldi	r20, 0x12	; 18
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	89 e7       	ldi	r24, 0x79	; 121
     e08:	95 e0       	ldi	r25, 0x05	; 5
     e0a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
     e0e:	89 e7       	ldi	r24, 0x79	; 121
     e10:	95 e0       	ldi	r25, 0x05	; 5
     e12:	d6 d0       	rcall	.+428    	; 0xfc0 <u8g2_SendBuffer>
		
	while(1){
	}
     e14:	ff cf       	rjmp	.-2      	; 0xe14 <main+0x5e>

00000e16 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <u8g2_ClearBuffer+0x6>
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <u8g2_ClearBuffer+0x8>
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	9c 83       	std	Y+4, r25	; 0x04
     e24:	8b 83       	std	Y+3, r24	; 0x03
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	9c 81       	ldd	r25, Y+4	; 0x04
     e2a:	fc 01       	movw	r30, r24
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	fc 01       	movw	r30, r24
     e32:	80 89       	ldd	r24, Z+16	; 0x10
     e34:	88 2f       	mov	r24, r24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
  cnt *= u8g2->tile_buf_height;
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	9c 81       	ldd	r25, Y+4	; 0x04
     e40:	fc 01       	movw	r30, r24
     e42:	85 a1       	ldd	r24, Z+37	; 0x25
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	49 81       	ldd	r20, Y+1	; 0x01
     e4a:	5a 81       	ldd	r21, Y+2	; 0x02
     e4c:	42 9f       	mul	r20, r18
     e4e:	c0 01       	movw	r24, r0
     e50:	43 9f       	mul	r20, r19
     e52:	90 0d       	add	r25, r0
     e54:	52 9f       	mul	r21, r18
     e56:	90 0d       	add	r25, r0
     e58:	11 24       	eor	r1, r1
     e5a:	9a 83       	std	Y+2, r25	; 0x02
     e5c:	89 83       	std	Y+1, r24	; 0x01
  cnt *= 8;
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	9a 83       	std	Y+2, r25	; 0x02
     e70:	89 83       	std	Y+1, r24	; 0x01
  memset(u8g2->tile_buf_ptr, 0, cnt);
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	9c 81       	ldd	r25, Y+4	; 0x04
     e76:	fc 01       	movw	r30, r24
     e78:	83 a1       	ldd	r24, Z+35	; 0x23
     e7a:	94 a1       	ldd	r25, Z+36	; 0x24
     e7c:	29 81       	ldd	r18, Y+1	; 0x01
     e7e:	3a 81       	ldd	r19, Y+2	; 0x02
     e80:	a9 01       	movw	r20, r18
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <memset>
}
     e8a:	00 00       	nop
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	08 95       	ret

00000e9a <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	29 97       	sbiw	r28, 0x09	; 9
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	9f 83       	std	Y+7, r25	; 0x07
     eb4:	8e 83       	std	Y+6, r24	; 0x06
     eb6:	68 87       	std	Y+8, r22	; 0x08
     eb8:	49 87       	std	Y+9, r20	; 0x09
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     eba:	8e 81       	ldd	r24, Y+6	; 0x06
     ebc:	9f 81       	ldd	r25, Y+7	; 0x07
     ebe:	fc 01       	movw	r30, r24
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	fc 01       	movw	r30, r24
     ec6:	80 89       	ldd	r24, Z+16	; 0x10
     ec8:	89 83       	std	Y+1, r24	; 0x01
  offset = src_tile_row;
     eca:	88 85       	ldd	r24, Y+8	; 0x08
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9b 83       	std	Y+3, r25	; 0x03
     ed2:	8a 83       	std	Y+2, r24	; 0x02
  ptr = u8g2->tile_buf_ptr;
     ed4:	8e 81       	ldd	r24, Y+6	; 0x06
     ed6:	9f 81       	ldd	r25, Y+7	; 0x07
     ed8:	fc 01       	movw	r30, r24
     eda:	83 a1       	ldd	r24, Z+35	; 0x23
     edc:	94 a1       	ldd	r25, Z+36	; 0x24
     ede:	9d 83       	std	Y+5, r25	; 0x05
     ee0:	8c 83       	std	Y+4, r24	; 0x04
  offset *= w;
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	4a 81       	ldd	r20, Y+2	; 0x02
     eea:	5b 81       	ldd	r21, Y+3	; 0x03
     eec:	42 9f       	mul	r20, r18
     eee:	c0 01       	movw	r24, r0
     ef0:	43 9f       	mul	r20, r19
     ef2:	90 0d       	add	r25, r0
     ef4:	52 9f       	mul	r21, r18
     ef6:	90 0d       	add	r25, r0
     ef8:	11 24       	eor	r1, r1
     efa:	9b 83       	std	Y+3, r25	; 0x03
     efc:	8a 83       	std	Y+2, r24	; 0x02
  offset *= 8;
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	9b 81       	ldd	r25, Y+3	; 0x03
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	9b 83       	std	Y+3, r25	; 0x03
     f10:	8a 83       	std	Y+2, r24	; 0x02
  ptr += offset;
     f12:	2c 81       	ldd	r18, Y+4	; 0x04
     f14:	3d 81       	ldd	r19, Y+5	; 0x05
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	9b 81       	ldd	r25, Y+3	; 0x03
     f1a:	82 0f       	add	r24, r18
     f1c:	93 1f       	adc	r25, r19
     f1e:	9d 83       	std	Y+5, r25	; 0x05
     f20:	8c 83       	std	Y+4, r24	; 0x04
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
     f22:	2c 81       	ldd	r18, Y+4	; 0x04
     f24:	3d 81       	ldd	r19, Y+5	; 0x05
     f26:	8e 81       	ldd	r24, Y+6	; 0x06
     f28:	9f 81       	ldd	r25, Y+7	; 0x07
     f2a:	89 01       	movw	r16, r18
     f2c:	29 81       	ldd	r18, Y+1	; 0x01
     f2e:	49 85       	ldd	r20, Y+9	; 0x09
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	0e 94 a7 19 	call	0x334e	; 0x334e <u8x8_DrawTile>
}
     f36:	00 00       	nop
     f38:	29 96       	adiw	r28, 0x09	; 9
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	08 95       	ret

00000f4e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	00 d0       	rcall	.+0      	; 0xf54 <u8g2_send_buffer+0x6>
     f54:	00 d0       	rcall	.+0      	; 0xf56 <u8g2_send_buffer+0x8>
     f56:	00 d0       	rcall	.+0      	; 0xf58 <u8g2_send_buffer+0xa>
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	9e 83       	std	Y+6, r25	; 0x06
     f5e:	8d 83       	std	Y+5, r24	; 0x05
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
     f60:	19 82       	std	Y+1, r1	; 0x01
  src_max = u8g2->tile_buf_height;
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	9e 81       	ldd	r25, Y+6	; 0x06
     f66:	fc 01       	movw	r30, r24
     f68:	85 a1       	ldd	r24, Z+37	; 0x25
     f6a:	8b 83       	std	Y+3, r24	; 0x03
  dest_row = u8g2->tile_curr_row;
     f6c:	8d 81       	ldd	r24, Y+5	; 0x05
     f6e:	9e 81       	ldd	r25, Y+6	; 0x06
     f70:	fc 01       	movw	r30, r24
     f72:	86 a1       	ldd	r24, Z+38	; 0x26
     f74:	8a 83       	std	Y+2, r24	; 0x02
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	9e 81       	ldd	r25, Y+6	; 0x06
     f7a:	fc 01       	movw	r30, r24
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	fc 01       	movw	r30, r24
     f82:	81 89       	ldd	r24, Z+17	; 0x11
     f84:	8c 83       	std	Y+4, r24	; 0x04
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
     f86:	8d 81       	ldd	r24, Y+5	; 0x05
     f88:	9e 81       	ldd	r25, Y+6	; 0x06
     f8a:	4a 81       	ldd	r20, Y+2	; 0x02
     f8c:	69 81       	ldd	r22, Y+1	; 0x01
     f8e:	85 df       	rcall	.-246    	; 0xe9a <u8g2_send_tile_row>
    src_row++;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	8f 5f       	subi	r24, 0xFF	; 255
     f94:	89 83       	std	Y+1, r24	; 0x01
    dest_row++;
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	8a 83       	std	Y+2, r24	; 0x02
  } while( src_row < src_max && dest_row < dest_max );
     f9c:	99 81       	ldd	r25, Y+1	; 0x01
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	98 17       	cp	r25, r24
     fa2:	20 f4       	brcc	.+8      	; 0xfac <u8g2_send_buffer+0x5e>
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	98 17       	cp	r25, r24
     faa:	68 f3       	brcs	.-38     	; 0xf86 <u8g2_send_buffer+0x38>
}
     fac:	00 00       	nop
     fae:	26 96       	adiw	r28, 0x06	; 6
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <u8g2_SendBuffer+0x6>
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	9a 83       	std	Y+2, r25	; 0x02
     fcc:	89 83       	std	Y+1, r24	; 0x01
  u8g2_send_buffer(u8g2);
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	bd df       	rcall	.-134    	; 0xf4e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	0e 94 32 1a 	call	0x3464	; 0x3464 <u8x8_RefreshDisplay>
}
     fdc:	00 00       	nop
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	00 d0       	rcall	.+0      	; 0xfee <u8g2_m_16_8_f+0x6>
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	9a 83       	std	Y+2, r25	; 0x02
     ff4:	89 83       	std	Y+1, r24	; 0x01
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	9a 81       	ldd	r25, Y+2	; 0x02
     ffa:	28 e0       	ldi	r18, 0x08	; 8
     ffc:	fc 01       	movw	r30, r24
     ffe:	20 83       	st	Z, r18
  return buf;
    1000:	88 e7       	ldi	r24, 0x78	; 120
    1002:	91 e0       	ldi	r25, 0x01	; 1
  #endif
}
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	2b 97       	sbiw	r28, 0x0b	; 11
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	9d 83       	std	Y+5, r25	; 0x05
    1028:	8c 83       	std	Y+4, r24	; 0x04
    102a:	7f 83       	std	Y+7, r23	; 0x07
    102c:	6e 83       	std	Y+6, r22	; 0x06
    102e:	59 87       	std	Y+9, r21	; 0x09
    1030:	48 87       	std	Y+8, r20	; 0x08
    1032:	3b 87       	std	Y+11, r19	; 0x0b
    1034:	2a 87       	std	Y+10, r18	; 0x0a
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
    1036:	4a 85       	ldd	r20, Y+10	; 0x0a
    1038:	5b 85       	ldd	r21, Y+11	; 0x0b
    103a:	28 85       	ldd	r18, Y+8	; 0x08
    103c:	39 85       	ldd	r19, Y+9	; 0x09
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	8a 01       	movw	r16, r20
    1044:	42 e8       	ldi	r20, 0x82	; 130
    1046:	58 e1       	ldi	r21, 0x18	; 24
    1048:	62 e1       	ldi	r22, 0x12	; 18
    104a:	7b e1       	ldi	r23, 0x1B	; 27
    104c:	0e 94 cf 1b 	call	0x379e	; 0x379e <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
    1050:	ce 01       	movw	r24, r28
    1052:	03 96       	adiw	r24, 0x03	; 3
    1054:	c9 df       	rcall	.-110    	; 0xfe8 <u8g2_m_16_8_f>
    1056:	9a 83       	std	Y+2, r25	; 0x02
    1058:	89 83       	std	Y+1, r24	; 0x01
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    105a:	4b 81       	ldd	r20, Y+3	; 0x03
    105c:	2e 81       	ldd	r18, Y+6	; 0x06
    105e:	3f 81       	ldd	r19, Y+7	; 0x07
    1060:	69 81       	ldd	r22, Y+1	; 0x01
    1062:	7a 81       	ldd	r23, Y+2	; 0x02
    1064:	8c 81       	ldd	r24, Y+4	; 0x04
    1066:	9d 81       	ldd	r25, Y+5	; 0x05
    1068:	89 01       	movw	r16, r18
    106a:	2e ed       	ldi	r18, 0xDE	; 222
    106c:	31 e1       	ldi	r19, 0x11	; 17
    106e:	0e 94 f6 12 	call	0x25ec	; 0x25ec <u8g2_SetupBuffer>
}
    1072:	00 00       	nop
    1074:	2b 96       	adiw	r28, 0x0b	; 11
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	08 95       	ret

0000108a <u8g2_font_get_byte>:
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	00 d0       	rcall	.+0      	; 0x1090 <u8g2_font_get_byte+0x6>
    1090:	00 d0       	rcall	.+0      	; 0x1092 <u8g2_font_get_byte+0x8>
    1092:	00 d0       	rcall	.+0      	; 0x1094 <u8g2_font_get_byte+0xa>
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	9d 83       	std	Y+5, r25	; 0x05
    109a:	8c 83       	std	Y+4, r24	; 0x04
    109c:	6e 83       	std	Y+6, r22	; 0x06
    109e:	8e 81       	ldd	r24, Y+6	; 0x06
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	2c 81       	ldd	r18, Y+4	; 0x04
    10a6:	3d 81       	ldd	r19, Y+5	; 0x05
    10a8:	82 0f       	add	r24, r18
    10aa:	93 1f       	adc	r25, r19
    10ac:	9d 83       	std	Y+5, r25	; 0x05
    10ae:	8c 83       	std	Y+4, r24	; 0x04
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	9d 81       	ldd	r25, Y+5	; 0x05
    10b4:	9a 83       	std	Y+2, r25	; 0x02
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	fc 01       	movw	r30, r24
    10be:	84 91       	lpm	r24, Z
    10c0:	8b 83       	std	Y+3, r24	; 0x03
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	26 96       	adiw	r28, 0x06	; 6
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <u8g2_font_get_word>:
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	2b 97       	sbiw	r28, 0x0b	; 11
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	9a 87       	std	Y+10, r25	; 0x0a
    10ec:	89 87       	std	Y+9, r24	; 0x09
    10ee:	6b 87       	std	Y+11, r22	; 0x0b
    10f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	29 85       	ldd	r18, Y+9	; 0x09
    10f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    10fa:	82 0f       	add	r24, r18
    10fc:	93 1f       	adc	r25, r19
    10fe:	9a 87       	std	Y+10, r25	; 0x0a
    1100:	89 87       	std	Y+9, r24	; 0x09
    1102:	89 85       	ldd	r24, Y+9	; 0x09
    1104:	9a 85       	ldd	r25, Y+10	; 0x0a
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	9a 81       	ldd	r25, Y+2	; 0x02
    110e:	fc 01       	movw	r30, r24
    1110:	84 91       	lpm	r24, Z
    1112:	8b 83       	std	Y+3, r24	; 0x03
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9d 83       	std	Y+5, r25	; 0x05
    111c:	8c 83       	std	Y+4, r24	; 0x04
    111e:	89 85       	ldd	r24, Y+9	; 0x09
    1120:	9a 85       	ldd	r25, Y+10	; 0x0a
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	9a 87       	std	Y+10, r25	; 0x0a
    1126:	89 87       	std	Y+9, r24	; 0x09
    1128:	8c 81       	ldd	r24, Y+4	; 0x04
    112a:	9d 81       	ldd	r25, Y+5	; 0x05
    112c:	98 2f       	mov	r25, r24
    112e:	88 27       	eor	r24, r24
    1130:	9d 83       	std	Y+5, r25	; 0x05
    1132:	8c 83       	std	Y+4, r24	; 0x04
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	9a 85       	ldd	r25, Y+10	; 0x0a
    1138:	9f 83       	std	Y+7, r25	; 0x07
    113a:	8e 83       	std	Y+6, r24	; 0x06
    113c:	8e 81       	ldd	r24, Y+6	; 0x06
    113e:	9f 81       	ldd	r25, Y+7	; 0x07
    1140:	fc 01       	movw	r30, r24
    1142:	84 91       	lpm	r24, Z
    1144:	88 87       	std	Y+8, r24	; 0x08
    1146:	88 85       	ldd	r24, Y+8	; 0x08
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	2c 81       	ldd	r18, Y+4	; 0x04
    114e:	3d 81       	ldd	r19, Y+5	; 0x05
    1150:	82 0f       	add	r24, r18
    1152:	93 1f       	adc	r25, r19
    1154:	9d 83       	std	Y+5, r25	; 0x05
    1156:	8c 83       	std	Y+4, r24	; 0x04
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	9d 81       	ldd	r25, Y+5	; 0x05
    115c:	2b 96       	adiw	r28, 0x0b	; 11
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	08 95       	ret

0000116e <u8g2_read_font_info>:
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	00 d0       	rcall	.+0      	; 0x1174 <u8g2_read_font_info+0x6>
    1174:	00 d0       	rcall	.+0      	; 0x1176 <u8g2_read_font_info+0x8>
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	9a 83       	std	Y+2, r25	; 0x02
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	7c 83       	std	Y+4, r23	; 0x04
    1180:	6b 83       	std	Y+3, r22	; 0x03
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	80 df       	rcall	.-256    	; 0x108a <u8g2_font_get_byte>
    118a:	28 2f       	mov	r18, r24
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	fc 01       	movw	r30, r24
    1192:	20 83       	st	Z, r18
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	77 df       	rcall	.-274    	; 0x108a <u8g2_font_get_byte>
    119c:	28 2f       	mov	r18, r24
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	fc 01       	movw	r30, r24
    11a4:	21 83       	std	Z+1, r18	; 0x01
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	62 e0       	ldi	r22, 0x02	; 2
    11ac:	6e df       	rcall	.-292    	; 0x108a <u8g2_font_get_byte>
    11ae:	28 2f       	mov	r18, r24
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	9a 81       	ldd	r25, Y+2	; 0x02
    11b4:	fc 01       	movw	r30, r24
    11b6:	22 83       	std	Z+2, r18	; 0x02
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	63 e0       	ldi	r22, 0x03	; 3
    11be:	65 df       	rcall	.-310    	; 0x108a <u8g2_font_get_byte>
    11c0:	28 2f       	mov	r18, r24
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	9a 81       	ldd	r25, Y+2	; 0x02
    11c6:	fc 01       	movw	r30, r24
    11c8:	23 83       	std	Z+3, r18	; 0x03
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	9c 81       	ldd	r25, Y+4	; 0x04
    11ce:	64 e0       	ldi	r22, 0x04	; 4
    11d0:	5c df       	rcall	.-328    	; 0x108a <u8g2_font_get_byte>
    11d2:	28 2f       	mov	r18, r24
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	fc 01       	movw	r30, r24
    11da:	24 83       	std	Z+4, r18	; 0x04
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	65 e0       	ldi	r22, 0x05	; 5
    11e2:	53 df       	rcall	.-346    	; 0x108a <u8g2_font_get_byte>
    11e4:	28 2f       	mov	r18, r24
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	fc 01       	movw	r30, r24
    11ec:	25 83       	std	Z+5, r18	; 0x05
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	9c 81       	ldd	r25, Y+4	; 0x04
    11f2:	66 e0       	ldi	r22, 0x06	; 6
    11f4:	4a df       	rcall	.-364    	; 0x108a <u8g2_font_get_byte>
    11f6:	28 2f       	mov	r18, r24
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	fc 01       	movw	r30, r24
    11fe:	26 83       	std	Z+6, r18	; 0x06
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	67 e0       	ldi	r22, 0x07	; 7
    1206:	41 df       	rcall	.-382    	; 0x108a <u8g2_font_get_byte>
    1208:	28 2f       	mov	r18, r24
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	fc 01       	movw	r30, r24
    1210:	27 83       	std	Z+7, r18	; 0x07
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	68 e0       	ldi	r22, 0x08	; 8
    1218:	38 df       	rcall	.-400    	; 0x108a <u8g2_font_get_byte>
    121a:	28 2f       	mov	r18, r24
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	9a 81       	ldd	r25, Y+2	; 0x02
    1220:	fc 01       	movw	r30, r24
    1222:	20 87       	std	Z+8, r18	; 0x08
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	9c 81       	ldd	r25, Y+4	; 0x04
    1228:	69 e0       	ldi	r22, 0x09	; 9
    122a:	2f df       	rcall	.-418    	; 0x108a <u8g2_font_get_byte>
    122c:	28 2f       	mov	r18, r24
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	9a 81       	ldd	r25, Y+2	; 0x02
    1232:	fc 01       	movw	r30, r24
    1234:	21 87       	std	Z+9, r18	; 0x09
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	9c 81       	ldd	r25, Y+4	; 0x04
    123a:	6a e0       	ldi	r22, 0x0A	; 10
    123c:	26 df       	rcall	.-436    	; 0x108a <u8g2_font_get_byte>
    123e:	28 2f       	mov	r18, r24
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	9a 81       	ldd	r25, Y+2	; 0x02
    1244:	fc 01       	movw	r30, r24
    1246:	22 87       	std	Z+10, r18	; 0x0a
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	6b e0       	ldi	r22, 0x0B	; 11
    124e:	1d df       	rcall	.-454    	; 0x108a <u8g2_font_get_byte>
    1250:	28 2f       	mov	r18, r24
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	fc 01       	movw	r30, r24
    1258:	23 87       	std	Z+11, r18	; 0x0b
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	9c 81       	ldd	r25, Y+4	; 0x04
    125e:	6c e0       	ldi	r22, 0x0C	; 12
    1260:	14 df       	rcall	.-472    	; 0x108a <u8g2_font_get_byte>
    1262:	28 2f       	mov	r18, r24
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	9a 81       	ldd	r25, Y+2	; 0x02
    1268:	fc 01       	movw	r30, r24
    126a:	24 87       	std	Z+12, r18	; 0x0c
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	6d e0       	ldi	r22, 0x0D	; 13
    1272:	0b df       	rcall	.-490    	; 0x108a <u8g2_font_get_byte>
    1274:	28 2f       	mov	r18, r24
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	fc 01       	movw	r30, r24
    127c:	25 87       	std	Z+13, r18	; 0x0d
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	6e e0       	ldi	r22, 0x0E	; 14
    1284:	02 df       	rcall	.-508    	; 0x108a <u8g2_font_get_byte>
    1286:	28 2f       	mov	r18, r24
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	fc 01       	movw	r30, r24
    128e:	26 87       	std	Z+14, r18	; 0x0e
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	6f e0       	ldi	r22, 0x0F	; 15
    1296:	f9 de       	rcall	.-526    	; 0x108a <u8g2_font_get_byte>
    1298:	28 2f       	mov	r18, r24
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	fc 01       	movw	r30, r24
    12a0:	27 87       	std	Z+15, r18	; 0x0f
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	60 e1       	ldi	r22, 0x10	; 16
    12a8:	f0 de       	rcall	.-544    	; 0x108a <u8g2_font_get_byte>
    12aa:	28 2f       	mov	r18, r24
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	9a 81       	ldd	r25, Y+2	; 0x02
    12b0:	fc 01       	movw	r30, r24
    12b2:	20 8b       	std	Z+16, r18	; 0x10
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	61 e1       	ldi	r22, 0x11	; 17
    12ba:	0d df       	rcall	.-486    	; 0x10d6 <u8g2_font_get_word>
    12bc:	9c 01       	movw	r18, r24
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	9a 81       	ldd	r25, Y+2	; 0x02
    12c2:	fc 01       	movw	r30, r24
    12c4:	32 8b       	std	Z+18, r19	; 0x12
    12c6:	21 8b       	std	Z+17, r18	; 0x11
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	63 e1       	ldi	r22, 0x13	; 19
    12ce:	03 df       	rcall	.-506    	; 0x10d6 <u8g2_font_get_word>
    12d0:	9c 01       	movw	r18, r24
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	fc 01       	movw	r30, r24
    12d8:	34 8b       	std	Z+20, r19	; 0x14
    12da:	23 8b       	std	Z+19, r18	; 0x13
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	65 e1       	ldi	r22, 0x15	; 21
    12e2:	f9 de       	rcall	.-526    	; 0x10d6 <u8g2_font_get_word>
    12e4:	9c 01       	movw	r18, r24
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ea:	fc 01       	movw	r30, r24
    12ec:	36 8b       	std	Z+22, r19	; 0x16
    12ee:	25 8b       	std	Z+21, r18	; 0x15
    12f0:	00 00       	nop
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	08 95       	ret

00001300 <u8g2_font_decode_get_unsigned_bits>:
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	2d 97       	sbiw	r28, 0x0d	; 13
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	9c 87       	std	Y+12, r25	; 0x0c
    1316:	8b 87       	std	Y+11, r24	; 0x0b
    1318:	6d 87       	std	Y+13, r22	; 0x0d
    131a:	8b 85       	ldd	r24, Y+11	; 0x0b
    131c:	9c 85       	ldd	r25, Y+12	; 0x0c
    131e:	fc 01       	movw	r30, r24
    1320:	80 85       	ldd	r24, Z+8	; 0x08
    1322:	8b 83       	std	Y+3, r24	; 0x03
    1324:	8b 85       	ldd	r24, Y+11	; 0x0b
    1326:	9c 85       	ldd	r25, Y+12	; 0x0c
    1328:	fc 01       	movw	r30, r24
    132a:	80 81       	ld	r24, Z
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	9d 83       	std	Y+5, r25	; 0x05
    1330:	8c 83       	std	Y+4, r24	; 0x04
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	fc 01       	movw	r30, r24
    1338:	84 91       	lpm	r24, Z
    133a:	8e 83       	std	Y+6, r24	; 0x06
    133c:	8e 81       	ldd	r24, Y+6	; 0x06
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	2b 81       	ldd	r18, Y+3	; 0x03
    1348:	22 2f       	mov	r18, r18
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <u8g2_font_decode_get_unsigned_bits+0x52>
    134e:	95 95       	asr	r25
    1350:	87 95       	ror	r24
    1352:	2a 95       	dec	r18
    1354:	e2 f7       	brpl	.-8      	; 0x134e <u8g2_font_decode_get_unsigned_bits+0x4e>
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	8a 83       	std	Y+2, r24	; 0x02
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1360:	89 0f       	add	r24, r25
    1362:	8a 83       	std	Y+2, r24	; 0x02
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	88 30       	cpi	r24, 0x08	; 8
    1368:	98 f1       	brcs	.+102    	; 0x13d0 <u8g2_font_decode_get_unsigned_bits+0xd0>
    136a:	88 e0       	ldi	r24, 0x08	; 8
    136c:	8f 83       	std	Y+7, r24	; 0x07
    136e:	9f 81       	ldd	r25, Y+7	; 0x07
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	f9 2f       	mov	r31, r25
    1374:	f8 1b       	sub	r31, r24
    1376:	8f 2f       	mov	r24, r31
    1378:	8f 83       	std	Y+7, r24	; 0x07
    137a:	8b 85       	ldd	r24, Y+11	; 0x0b
    137c:	9c 85       	ldd	r25, Y+12	; 0x0c
    137e:	fc 01       	movw	r30, r24
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	9c 01       	movw	r18, r24
    1386:	2f 5f       	subi	r18, 0xFF	; 255
    1388:	3f 4f       	sbci	r19, 0xFF	; 255
    138a:	8b 85       	ldd	r24, Y+11	; 0x0b
    138c:	9c 85       	ldd	r25, Y+12	; 0x0c
    138e:	fc 01       	movw	r30, r24
    1390:	31 83       	std	Z+1, r19	; 0x01
    1392:	20 83       	st	Z, r18
    1394:	8b 85       	ldd	r24, Y+11	; 0x0b
    1396:	9c 85       	ldd	r25, Y+12	; 0x0c
    1398:	fc 01       	movw	r30, r24
    139a:	80 81       	ld	r24, Z
    139c:	91 81       	ldd	r25, Z+1	; 0x01
    139e:	99 87       	std	Y+9, r25	; 0x09
    13a0:	88 87       	std	Y+8, r24	; 0x08
    13a2:	88 85       	ldd	r24, Y+8	; 0x08
    13a4:	99 85       	ldd	r25, Y+9	; 0x09
    13a6:	fc 01       	movw	r30, r24
    13a8:	84 91       	lpm	r24, Z
    13aa:	8a 87       	std	Y+10, r24	; 0x0a
    13ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ae:	88 2f       	mov	r24, r24
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	2f 81       	ldd	r18, Y+7	; 0x07
    13b4:	22 2f       	mov	r18, r18
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <u8g2_font_decode_get_unsigned_bits+0xbe>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	2a 95       	dec	r18
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <u8g2_font_decode_get_unsigned_bits+0xba>
    13c2:	98 2f       	mov	r25, r24
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	89 2b       	or	r24, r25
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	88 50       	subi	r24, 0x08	; 8
    13ce:	8a 83       	std	Y+2, r24	; 0x02
    13d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <u8g2_font_decode_get_unsigned_bits+0xe0>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	2a 95       	dec	r18
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <u8g2_font_decode_get_unsigned_bits+0xdc>
    13e4:	81 50       	subi	r24, 0x01	; 1
    13e6:	99 81       	ldd	r25, Y+1	; 0x01
    13e8:	89 23       	and	r24, r25
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    13f0:	2a 81       	ldd	r18, Y+2	; 0x02
    13f2:	fc 01       	movw	r30, r24
    13f4:	20 87       	std	Z+8, r18	; 0x08
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	2d 96       	adiw	r28, 0x0d	; 13
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <u8g2_font_decode_get_signed_bits>:
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	00 d0       	rcall	.+0      	; 0x1410 <u8g2_font_decode_get_signed_bits+0x6>
    1410:	00 d0       	rcall	.+0      	; 0x1412 <u8g2_font_decode_get_signed_bits+0x8>
    1412:	1f 92       	push	r1
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	9c 83       	std	Y+4, r25	; 0x04
    141a:	8b 83       	std	Y+3, r24	; 0x03
    141c:	6d 83       	std	Y+5, r22	; 0x05
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	6d 81       	ldd	r22, Y+5	; 0x05
    1424:	6d df       	rcall	.-294    	; 0x1300 <u8g2_font_decode_get_unsigned_bits>
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	8a 83       	std	Y+2, r24	; 0x02
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	81 50       	subi	r24, 0x01	; 1
    1430:	8d 83       	std	Y+5, r24	; 0x05
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	08 2e       	mov	r0, r24
    1436:	00 0c       	add	r0, r0
    1438:	99 0b       	sbc	r25, r25
    143a:	2d 81       	ldd	r18, Y+5	; 0x05
    143c:	22 2f       	mov	r18, r18
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <u8g2_font_decode_get_signed_bits+0x3c>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	2a 95       	dec	r18
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <u8g2_font_decode_get_signed_bits+0x38>
    144a:	8a 83       	std	Y+2, r24	; 0x02
    144c:	99 81       	ldd	r25, Y+1	; 0x01
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	29 2f       	mov	r18, r25
    1452:	28 1b       	sub	r18, r24
    1454:	82 2f       	mov	r24, r18
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret

0000146a <u8g2_add_vector_y>:
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	00 d0       	rcall	.+0      	; 0x1470 <u8g2_add_vector_y+0x6>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <u8g2_add_vector_y+0x8>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	6a 83       	std	Y+2, r22	; 0x02
    147a:	4b 83       	std	Y+3, r20	; 0x03
    147c:	2c 83       	std	Y+4, r18	; 0x04
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	91 05       	cpc	r25, r1
    1488:	51 f0       	breq	.+20     	; 0x149e <u8g2_add_vector_y+0x34>
    148a:	82 30       	cpi	r24, 0x02	; 2
    148c:	91 05       	cpc	r25, r1
    148e:	61 f0       	breq	.+24     	; 0x14a8 <u8g2_add_vector_y+0x3e>
    1490:	89 2b       	or	r24, r25
    1492:	89 f4       	brne	.+34     	; 0x14b6 <u8g2_add_vector_y+0x4c>
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	99 81       	ldd	r25, Y+1	; 0x01
    1498:	89 0f       	add	r24, r25
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	13 c0       	rjmp	.+38     	; 0x14c4 <u8g2_add_vector_y+0x5a>
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	99 81       	ldd	r25, Y+1	; 0x01
    14a2:	89 0f       	add	r24, r25
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	0e c0       	rjmp	.+28     	; 0x14c4 <u8g2_add_vector_y+0x5a>
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	99 81       	ldd	r25, Y+1	; 0x01
    14ac:	29 2f       	mov	r18, r25
    14ae:	28 1b       	sub	r18, r24
    14b0:	82 2f       	mov	r24, r18
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	07 c0       	rjmp	.+14     	; 0x14c4 <u8g2_add_vector_y+0x5a>
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	99 81       	ldd	r25, Y+1	; 0x01
    14ba:	29 2f       	mov	r18, r25
    14bc:	28 1b       	sub	r18, r24
    14be:	82 2f       	mov	r24, r18
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	00 00       	nop
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <u8g2_add_vector_x>:
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	00 d0       	rcall	.+0      	; 0x14da <u8g2_add_vector_x+0x6>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <u8g2_add_vector_x+0x8>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	6a 83       	std	Y+2, r22	; 0x02
    14e4:	4b 83       	std	Y+3, r20	; 0x03
    14e6:	2c 83       	std	Y+4, r18	; 0x04
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	91 05       	cpc	r25, r1
    14f2:	51 f0       	breq	.+20     	; 0x1508 <u8g2_add_vector_x+0x34>
    14f4:	82 30       	cpi	r24, 0x02	; 2
    14f6:	91 05       	cpc	r25, r1
    14f8:	71 f0       	breq	.+28     	; 0x1516 <u8g2_add_vector_x+0x42>
    14fa:	89 2b       	or	r24, r25
    14fc:	99 f4       	brne	.+38     	; 0x1524 <u8g2_add_vector_x+0x50>
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	99 81       	ldd	r25, Y+1	; 0x01
    1502:	89 0f       	add	r24, r25
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	13 c0       	rjmp	.+38     	; 0x152e <u8g2_add_vector_x+0x5a>
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	99 81       	ldd	r25, Y+1	; 0x01
    150c:	29 2f       	mov	r18, r25
    150e:	28 1b       	sub	r18, r24
    1510:	82 2f       	mov	r24, r18
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	0c c0       	rjmp	.+24     	; 0x152e <u8g2_add_vector_x+0x5a>
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	99 81       	ldd	r25, Y+1	; 0x01
    151a:	29 2f       	mov	r18, r25
    151c:	28 1b       	sub	r18, r24
    151e:	82 2f       	mov	r24, r18
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	05 c0       	rjmp	.+10     	; 0x152e <u8g2_add_vector_x+0x5a>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	99 81       	ldd	r25, Y+1	; 0x01
    1528:	89 0f       	add	r24, r25
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	00 00       	nop
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret

0000153e <u8g2_font_decode_len>:
    153e:	0f 93       	push	r16
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	2d 97       	sbiw	r28, 0x0d	; 13
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	9b 87       	std	Y+11, r25	; 0x0b
    1556:	8a 87       	std	Y+10, r24	; 0x0a
    1558:	6c 87       	std	Y+12, r22	; 0x0c
    155a:	4d 87       	std	Y+13, r20	; 0x0d
    155c:	8a 85       	ldd	r24, Y+10	; 0x0a
    155e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1560:	ca 96       	adiw	r24, 0x3a	; 58
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
    1566:	8c 85       	ldd	r24, Y+12	; 0x0c
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	fc 01       	movw	r30, r24
    1570:	84 81       	ldd	r24, Z+4	; 0x04
    1572:	8b 83       	std	Y+3, r24	; 0x03
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	fc 01       	movw	r30, r24
    157a:	85 81       	ldd	r24, Z+5	; 0x05
    157c:	8c 83       	std	Y+4, r24	; 0x04
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	fc 01       	movw	r30, r24
    1584:	86 81       	ldd	r24, Z+6	; 0x06
    1586:	8f 83       	std	Y+7, r24	; 0x07
    1588:	9f 81       	ldd	r25, Y+7	; 0x07
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	f9 2f       	mov	r31, r25
    158e:	f8 1b       	sub	r31, r24
    1590:	8f 2f       	mov	r24, r31
    1592:	8f 83       	std	Y+7, r24	; 0x07
    1594:	8f 81       	ldd	r24, Y+7	; 0x07
    1596:	8a 83       	std	Y+2, r24	; 0x02
    1598:	99 81       	ldd	r25, Y+1	; 0x01
    159a:	8f 81       	ldd	r24, Y+7	; 0x07
    159c:	98 17       	cp	r25, r24
    159e:	10 f4       	brcc	.+4      	; 0x15a4 <u8g2_font_decode_len+0x66>
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	8a 83       	std	Y+2, r24	; 0x02
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	fc 01       	movw	r30, r24
    15aa:	82 81       	ldd	r24, Z+2	; 0x02
    15ac:	88 87       	std	Y+8, r24	; 0x08
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	fc 01       	movw	r30, r24
    15b4:	83 81       	ldd	r24, Z+3	; 0x03
    15b6:	89 87       	std	Y+9, r24	; 0x09
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	fc 01       	movw	r30, r24
    15be:	24 85       	ldd	r18, Z+12	; 0x0c
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	49 2f       	mov	r20, r25
    15c6:	68 2f       	mov	r22, r24
    15c8:	88 85       	ldd	r24, Y+8	; 0x08
    15ca:	84 df       	rcall	.-248    	; 0x14d4 <u8g2_add_vector_x>
    15cc:	88 87       	std	Y+8, r24	; 0x08
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	fc 01       	movw	r30, r24
    15d4:	24 85       	ldd	r18, Z+12	; 0x0c
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	49 2f       	mov	r20, r25
    15dc:	68 2f       	mov	r22, r24
    15de:	89 85       	ldd	r24, Y+9	; 0x09
    15e0:	44 df       	rcall	.-376    	; 0x146a <u8g2_add_vector_y>
    15e2:	89 87       	std	Y+9, r24	; 0x09
    15e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e6:	88 23       	and	r24, r24
    15e8:	b1 f0       	breq	.+44     	; 0x1616 <u8g2_font_decode_len+0xd8>
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	fc 01       	movw	r30, r24
    15f0:	22 85       	ldd	r18, Z+10	; 0x0a
    15f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    15f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    15f6:	8c 59       	subi	r24, 0x9C	; 156
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	fc 01       	movw	r30, r24
    15fc:	20 83       	st	Z, r18
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	fc 01       	movw	r30, r24
    1604:	24 85       	ldd	r18, Z+12	; 0x0c
    1606:	8a 85       	ldd	r24, Y+10	; 0x0a
    1608:	9b 85       	ldd	r25, Y+11	; 0x0b
    160a:	02 2f       	mov	r16, r18
    160c:	2a 81       	ldd	r18, Y+2	; 0x02
    160e:	49 85       	ldd	r20, Y+9	; 0x09
    1610:	68 85       	ldd	r22, Y+8	; 0x08
    1612:	c6 d5       	rcall	.+2956   	; 0x21a0 <u8g2_DrawHVLine>
    1614:	1b c0       	rjmp	.+54     	; 0x164c <u8g2_font_decode_len+0x10e>
    1616:	8d 81       	ldd	r24, Y+5	; 0x05
    1618:	9e 81       	ldd	r25, Y+6	; 0x06
    161a:	fc 01       	movw	r30, r24
    161c:	81 85       	ldd	r24, Z+9	; 0x09
    161e:	88 23       	and	r24, r24
    1620:	a9 f4       	brne	.+42     	; 0x164c <u8g2_font_decode_len+0x10e>
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	fc 01       	movw	r30, r24
    1628:	23 85       	ldd	r18, Z+11	; 0x0b
    162a:	8a 85       	ldd	r24, Y+10	; 0x0a
    162c:	9b 85       	ldd	r25, Y+11	; 0x0b
    162e:	8c 59       	subi	r24, 0x9C	; 156
    1630:	9f 4f       	sbci	r25, 0xFF	; 255
    1632:	fc 01       	movw	r30, r24
    1634:	20 83       	st	Z, r18
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	9e 81       	ldd	r25, Y+6	; 0x06
    163a:	fc 01       	movw	r30, r24
    163c:	24 85       	ldd	r18, Z+12	; 0x0c
    163e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1640:	9b 85       	ldd	r25, Y+11	; 0x0b
    1642:	02 2f       	mov	r16, r18
    1644:	2a 81       	ldd	r18, Y+2	; 0x02
    1646:	49 85       	ldd	r20, Y+9	; 0x09
    1648:	68 85       	ldd	r22, Y+8	; 0x08
    164a:	aa d5       	rcall	.+2900   	; 0x21a0 <u8g2_DrawHVLine>
    164c:	99 81       	ldd	r25, Y+1	; 0x01
    164e:	8f 81       	ldd	r24, Y+7	; 0x07
    1650:	98 17       	cp	r25, r24
    1652:	58 f0       	brcs	.+22     	; 0x166a <u8g2_font_decode_len+0x12c>
    1654:	99 81       	ldd	r25, Y+1	; 0x01
    1656:	8f 81       	ldd	r24, Y+7	; 0x07
    1658:	f9 2f       	mov	r31, r25
    165a:	f8 1b       	sub	r31, r24
    165c:	8f 2f       	mov	r24, r31
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	1b 82       	std	Y+3, r1	; 0x03
    1662:	8c 81       	ldd	r24, Y+4	; 0x04
    1664:	8f 5f       	subi	r24, 0xFF	; 255
    1666:	8c 83       	std	Y+4, r24	; 0x04
    1668:	8a cf       	rjmp	.-236    	; 0x157e <u8g2_font_decode_len+0x40>
    166a:	00 00       	nop
    166c:	9b 81       	ldd	r25, Y+3	; 0x03
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	89 0f       	add	r24, r25
    1672:	8b 83       	std	Y+3, r24	; 0x03
    1674:	2b 81       	ldd	r18, Y+3	; 0x03
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	fc 01       	movw	r30, r24
    167c:	24 83       	std	Z+4, r18	; 0x04
    167e:	2c 81       	ldd	r18, Y+4	; 0x04
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	fc 01       	movw	r30, r24
    1686:	25 83       	std	Z+5, r18	; 0x05
    1688:	00 00       	nop
    168a:	2d 96       	adiw	r28, 0x0d	; 13
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	0f 91       	pop	r16
    169c:	08 95       	ret

0000169e <u8g2_font_setup_decode>:
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <u8g2_font_setup_decode+0x6>
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <u8g2_font_setup_decode+0x8>
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <u8g2_font_setup_decode+0xa>
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	9c 83       	std	Y+4, r25	; 0x04
    16ae:	8b 83       	std	Y+3, r24	; 0x03
    16b0:	7e 83       	std	Y+6, r23	; 0x06
    16b2:	6d 83       	std	Y+5, r22	; 0x05
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	ca 96       	adiw	r24, 0x3a	; 58
    16ba:	9a 83       	std	Y+2, r25	; 0x02
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	9a 81       	ldd	r25, Y+2	; 0x02
    16c2:	2d 81       	ldd	r18, Y+5	; 0x05
    16c4:	3e 81       	ldd	r19, Y+6	; 0x06
    16c6:	fc 01       	movw	r30, r24
    16c8:	31 83       	std	Z+1, r19	; 0x01
    16ca:	20 83       	st	Z, r18
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	9a 81       	ldd	r25, Y+2	; 0x02
    16d0:	fc 01       	movw	r30, r24
    16d2:	10 86       	std	Z+8, r1	; 0x08
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	9c 81       	ldd	r25, Y+4	; 0x04
    16d8:	85 5b       	subi	r24, 0xB5	; 181
    16da:	9f 4f       	sbci	r25, 0xFF	; 255
    16dc:	fc 01       	movw	r30, r24
    16de:	20 81       	ld	r18, Z
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	9a 81       	ldd	r25, Y+2	; 0x02
    16e4:	62 2f       	mov	r22, r18
    16e6:	0c de       	rcall	.-1000   	; 0x1300 <u8g2_font_decode_get_unsigned_bits>
    16e8:	28 2f       	mov	r18, r24
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	fc 01       	movw	r30, r24
    16f0:	26 83       	std	Z+6, r18	; 0x06
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	84 5b       	subi	r24, 0xB4	; 180
    16f8:	9f 4f       	sbci	r25, 0xFF	; 255
    16fa:	fc 01       	movw	r30, r24
    16fc:	20 81       	ld	r18, Z
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	9a 81       	ldd	r25, Y+2	; 0x02
    1702:	62 2f       	mov	r22, r18
    1704:	fd dd       	rcall	.-1030   	; 0x1300 <u8g2_font_decode_get_unsigned_bits>
    1706:	28 2f       	mov	r18, r24
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a 81       	ldd	r25, Y+2	; 0x02
    170c:	fc 01       	movw	r30, r24
    170e:	27 83       	std	Z+7, r18	; 0x07
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	8c 59       	subi	r24, 0x9C	; 156
    1716:	9f 4f       	sbci	r25, 0xFF	; 255
    1718:	fc 01       	movw	r30, r24
    171a:	20 81       	ld	r18, Z
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	9a 81       	ldd	r25, Y+2	; 0x02
    1720:	fc 01       	movw	r30, r24
    1722:	22 87       	std	Z+10, r18	; 0x0a
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	9a 81       	ldd	r25, Y+2	; 0x02
    1728:	fc 01       	movw	r30, r24
    172a:	92 85       	ldd	r25, Z+10	; 0x0a
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	99 23       	and	r25, r25
    1730:	09 f0       	breq	.+2      	; 0x1734 <u8g2_font_setup_decode+0x96>
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	28 2f       	mov	r18, r24
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	fc 01       	movw	r30, r24
    173c:	23 87       	std	Z+11, r18	; 0x0b
    173e:	00 00       	nop
    1740:	26 96       	adiw	r28, 0x06	; 6
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	08 95       	ret

00001752 <u8g2_font_decode_glyph>:
    1752:	0f 93       	push	r16
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	60 97       	sbiw	r28, 0x10	; 16
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	9e 87       	std	Y+14, r25	; 0x0e
    176a:	8d 87       	std	Y+13, r24	; 0x0d
    176c:	78 8b       	std	Y+16, r23	; 0x10
    176e:	6f 87       	std	Y+15, r22	; 0x0f
    1770:	8d 85       	ldd	r24, Y+13	; 0x0d
    1772:	9e 85       	ldd	r25, Y+14	; 0x0e
    1774:	ca 96       	adiw	r24, 0x3a	; 58
    1776:	9e 83       	std	Y+6, r25	; 0x06
    1778:	8d 83       	std	Y+5, r24	; 0x05
    177a:	2f 85       	ldd	r18, Y+15	; 0x0f
    177c:	38 89       	ldd	r19, Y+16	; 0x10
    177e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1780:	9e 85       	ldd	r25, Y+14	; 0x0e
    1782:	b9 01       	movw	r22, r18
    1784:	8c df       	rcall	.-232    	; 0x169e <u8g2_font_setup_decode>
    1786:	8d 85       	ldd	r24, Y+13	; 0x0d
    1788:	9e 85       	ldd	r25, Y+14	; 0x0e
    178a:	8f 5b       	subi	r24, 0xBF	; 191
    178c:	9f 4f       	sbci	r25, 0xFF	; 255
    178e:	fc 01       	movw	r30, r24
    1790:	80 81       	ld	r24, Z
    1792:	8f 83       	std	Y+7, r24	; 0x07
    1794:	8d 85       	ldd	r24, Y+13	; 0x0d
    1796:	9e 85       	ldd	r25, Y+14	; 0x0e
    1798:	83 5b       	subi	r24, 0xB3	; 179
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	fc 01       	movw	r30, r24
    179e:	20 81       	ld	r18, Z
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	9e 81       	ldd	r25, Y+6	; 0x06
    17a4:	62 2f       	mov	r22, r18
    17a6:	31 de       	rcall	.-926    	; 0x140a <u8g2_font_decode_get_signed_bits>
    17a8:	88 87       	std	Y+8, r24	; 0x08
    17aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ae:	82 5b       	subi	r24, 0xB2	; 178
    17b0:	9f 4f       	sbci	r25, 0xFF	; 255
    17b2:	fc 01       	movw	r30, r24
    17b4:	20 81       	ld	r18, Z
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ba:	62 2f       	mov	r22, r18
    17bc:	26 de       	rcall	.-948    	; 0x140a <u8g2_font_decode_get_signed_bits>
    17be:	89 87       	std	Y+9, r24	; 0x09
    17c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c4:	81 5b       	subi	r24, 0xB1	; 177
    17c6:	9f 4f       	sbci	r25, 0xFF	; 255
    17c8:	fc 01       	movw	r30, r24
    17ca:	20 81       	ld	r18, Z
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	62 2f       	mov	r22, r18
    17d2:	1b de       	rcall	.-970    	; 0x140a <u8g2_font_decode_get_signed_bits>
    17d4:	8a 87       	std	Y+10, r24	; 0x0a
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	fc 01       	movw	r30, r24
    17dc:	86 81       	ldd	r24, Z+6	; 0x06
    17de:	18 16       	cp	r1, r24
    17e0:	0c f0       	brlt	.+2      	; 0x17e4 <u8g2_font_decode_glyph+0x92>
    17e2:	ea c0       	rjmp	.+468    	; 0x19b8 <u8g2_font_decode_glyph+0x266>
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	fc 01       	movw	r30, r24
    17ea:	24 85       	ldd	r18, Z+12	; 0x0c
    17ec:	9f 81       	ldd	r25, Y+7	; 0x07
    17ee:	89 85       	ldd	r24, Y+9	; 0x09
    17f0:	89 0f       	add	r24, r25
    17f2:	81 95       	neg	r24
    17f4:	38 2f       	mov	r19, r24
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	fc 01       	movw	r30, r24
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	43 2f       	mov	r20, r19
    1800:	68 85       	ldd	r22, Y+8	; 0x08
    1802:	68 de       	rcall	.-816    	; 0x14d4 <u8g2_add_vector_x>
    1804:	28 2f       	mov	r18, r24
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	9e 81       	ldd	r25, Y+6	; 0x06
    180a:	fc 01       	movw	r30, r24
    180c:	22 83       	std	Z+2, r18	; 0x02
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	9e 81       	ldd	r25, Y+6	; 0x06
    1812:	fc 01       	movw	r30, r24
    1814:	24 85       	ldd	r18, Z+12	; 0x0c
    1816:	9f 81       	ldd	r25, Y+7	; 0x07
    1818:	89 85       	ldd	r24, Y+9	; 0x09
    181a:	89 0f       	add	r24, r25
    181c:	81 95       	neg	r24
    181e:	38 2f       	mov	r19, r24
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	9e 81       	ldd	r25, Y+6	; 0x06
    1824:	fc 01       	movw	r30, r24
    1826:	83 81       	ldd	r24, Z+3	; 0x03
    1828:	43 2f       	mov	r20, r19
    182a:	68 85       	ldd	r22, Y+8	; 0x08
    182c:	1e de       	rcall	.-964    	; 0x146a <u8g2_add_vector_y>
    182e:	28 2f       	mov	r18, r24
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
    1832:	9e 81       	ldd	r25, Y+6	; 0x06
    1834:	fc 01       	movw	r30, r24
    1836:	23 83       	std	Z+3, r18	; 0x03
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	fc 01       	movw	r30, r24
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	fc 01       	movw	r30, r24
    1848:	83 81       	ldd	r24, Z+3	; 0x03
    184a:	8b 83       	std	Y+3, r24	; 0x03
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	8a 83       	std	Y+2, r24	; 0x02
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	8c 83       	std	Y+4, r24	; 0x04
    1854:	8d 81       	ldd	r24, Y+5	; 0x05
    1856:	9e 81       	ldd	r25, Y+6	; 0x06
    1858:	fc 01       	movw	r30, r24
    185a:	84 85       	ldd	r24, Z+12	; 0x0c
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	81 30       	cpi	r24, 0x01	; 1
    1862:	91 05       	cpc	r25, r1
    1864:	d1 f0       	breq	.+52     	; 0x189a <u8g2_font_decode_glyph+0x148>
    1866:	82 30       	cpi	r24, 0x02	; 2
    1868:	91 05       	cpc	r25, r1
    186a:	1c f4       	brge	.+6      	; 0x1872 <u8g2_font_decode_glyph+0x120>
    186c:	89 2b       	or	r24, r25
    186e:	41 f0       	breq	.+16     	; 0x1880 <u8g2_font_decode_glyph+0x12e>
    1870:	57 c0       	rjmp	.+174    	; 0x1920 <u8g2_font_decode_glyph+0x1ce>
    1872:	82 30       	cpi	r24, 0x02	; 2
    1874:	91 05       	cpc	r25, r1
    1876:	31 f1       	breq	.+76     	; 0x18c4 <u8g2_font_decode_glyph+0x172>
    1878:	03 97       	sbiw	r24, 0x03	; 3
    187a:	09 f4       	brne	.+2      	; 0x187e <u8g2_font_decode_glyph+0x12c>
    187c:	3e c0       	rjmp	.+124    	; 0x18fa <u8g2_font_decode_glyph+0x1a8>
    187e:	50 c0       	rjmp	.+160    	; 0x1920 <u8g2_font_decode_glyph+0x1ce>
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	fc 01       	movw	r30, r24
    1886:	86 81       	ldd	r24, Z+6	; 0x06
    1888:	98 2f       	mov	r25, r24
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	89 0f       	add	r24, r25
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	8f 81       	ldd	r24, Y+7	; 0x07
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	89 0f       	add	r24, r25
    1896:	8c 83       	std	Y+4, r24	; 0x04
    1898:	43 c0       	rjmp	.+134    	; 0x1920 <u8g2_font_decode_glyph+0x1ce>
    189a:	8f 81       	ldd	r24, Y+7	; 0x07
    189c:	99 81       	ldd	r25, Y+1	; 0x01
    189e:	f9 2f       	mov	r31, r25
    18a0:	f8 1b       	sub	r31, r24
    18a2:	8f 2f       	mov	r24, r31
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	8f 5f       	subi	r24, 0xFF	; 255
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	8f 5f       	subi	r24, 0xFF	; 255
    18b0:	8a 83       	std	Y+2, r24	; 0x02
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	9e 81       	ldd	r25, Y+6	; 0x06
    18b6:	fc 01       	movw	r30, r24
    18b8:	86 81       	ldd	r24, Z+6	; 0x06
    18ba:	98 2f       	mov	r25, r24
    18bc:	8c 81       	ldd	r24, Y+4	; 0x04
    18be:	89 0f       	add	r24, r25
    18c0:	8c 83       	std	Y+4, r24	; 0x04
    18c2:	2e c0       	rjmp	.+92     	; 0x1920 <u8g2_font_decode_glyph+0x1ce>
    18c4:	8d 81       	ldd	r24, Y+5	; 0x05
    18c6:	9e 81       	ldd	r25, Y+6	; 0x06
    18c8:	fc 01       	movw	r30, r24
    18ca:	86 81       	ldd	r24, Z+6	; 0x06
    18cc:	98 2f       	mov	r25, r24
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	89 1b       	sub	r24, r25
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	8f 5f       	subi	r24, 0xFF	; 255
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	8f 5f       	subi	r24, 0xFF	; 255
    18de:	8a 83       	std	Y+2, r24	; 0x02
    18e0:	8f 81       	ldd	r24, Y+7	; 0x07
    18e2:	9b 81       	ldd	r25, Y+3	; 0x03
    18e4:	f9 2f       	mov	r31, r25
    18e6:	f8 1b       	sub	r31, r24
    18e8:	8f 2f       	mov	r24, r31
    18ea:	8b 83       	std	Y+3, r24	; 0x03
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	8f 5f       	subi	r24, 0xFF	; 255
    18f0:	8b 83       	std	Y+3, r24	; 0x03
    18f2:	8c 81       	ldd	r24, Y+4	; 0x04
    18f4:	8f 5f       	subi	r24, 0xFF	; 255
    18f6:	8c 83       	std	Y+4, r24	; 0x04
    18f8:	13 c0       	rjmp	.+38     	; 0x1920 <u8g2_font_decode_glyph+0x1ce>
    18fa:	8f 81       	ldd	r24, Y+7	; 0x07
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	89 0f       	add	r24, r25
    1900:	8a 83       	std	Y+2, r24	; 0x02
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	fc 01       	movw	r30, r24
    1908:	86 81       	ldd	r24, Z+6	; 0x06
    190a:	98 2f       	mov	r25, r24
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	89 1b       	sub	r24, r25
    1910:	8b 83       	std	Y+3, r24	; 0x03
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	8f 5f       	subi	r24, 0xFF	; 255
    1916:	8b 83       	std	Y+3, r24	; 0x03
    1918:	8c 81       	ldd	r24, Y+4	; 0x04
    191a:	8f 5f       	subi	r24, 0xFF	; 255
    191c:	8c 83       	std	Y+4, r24	; 0x04
    191e:	00 00       	nop
    1920:	8d 85       	ldd	r24, Y+13	; 0x0d
    1922:	9e 85       	ldd	r25, Y+14	; 0x0e
    1924:	0c 81       	ldd	r16, Y+4	; 0x04
    1926:	2a 81       	ldd	r18, Y+2	; 0x02
    1928:	4b 81       	ldd	r20, Y+3	; 0x03
    192a:	69 81       	ldd	r22, Y+1	; 0x01
    192c:	13 d5       	rcall	.+2598   	; 0x2354 <u8g2_IsIntersection>
    192e:	88 23       	and	r24, r24
    1930:	11 f4       	brne	.+4      	; 0x1936 <u8g2_font_decode_glyph+0x1e4>
    1932:	8a 85       	ldd	r24, Y+10	; 0x0a
    1934:	42 c0       	rjmp	.+132    	; 0x19ba <u8g2_font_decode_glyph+0x268>
    1936:	8d 81       	ldd	r24, Y+5	; 0x05
    1938:	9e 81       	ldd	r25, Y+6	; 0x06
    193a:	fc 01       	movw	r30, r24
    193c:	14 82       	std	Z+4, r1	; 0x04
    193e:	8d 81       	ldd	r24, Y+5	; 0x05
    1940:	9e 81       	ldd	r25, Y+6	; 0x06
    1942:	fc 01       	movw	r30, r24
    1944:	15 82       	std	Z+5, r1	; 0x05
    1946:	8d 85       	ldd	r24, Y+13	; 0x0d
    1948:	9e 85       	ldd	r25, Y+14	; 0x0e
    194a:	87 5b       	subi	r24, 0xB7	; 183
    194c:	9f 4f       	sbci	r25, 0xFF	; 255
    194e:	fc 01       	movw	r30, r24
    1950:	20 81       	ld	r18, Z
    1952:	8d 81       	ldd	r24, Y+5	; 0x05
    1954:	9e 81       	ldd	r25, Y+6	; 0x06
    1956:	62 2f       	mov	r22, r18
    1958:	d3 dc       	rcall	.-1626   	; 0x1300 <u8g2_font_decode_get_unsigned_bits>
    195a:	8b 87       	std	Y+11, r24	; 0x0b
    195c:	8d 85       	ldd	r24, Y+13	; 0x0d
    195e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1960:	86 5b       	subi	r24, 0xB6	; 182
    1962:	9f 4f       	sbci	r25, 0xFF	; 255
    1964:	fc 01       	movw	r30, r24
    1966:	20 81       	ld	r18, Z
    1968:	8d 81       	ldd	r24, Y+5	; 0x05
    196a:	9e 81       	ldd	r25, Y+6	; 0x06
    196c:	62 2f       	mov	r22, r18
    196e:	c8 dc       	rcall	.-1648   	; 0x1300 <u8g2_font_decode_get_unsigned_bits>
    1970:	8c 87       	std	Y+12, r24	; 0x0c
    1972:	8d 85       	ldd	r24, Y+13	; 0x0d
    1974:	9e 85       	ldd	r25, Y+14	; 0x0e
    1976:	40 e0       	ldi	r20, 0x00	; 0
    1978:	6b 85       	ldd	r22, Y+11	; 0x0b
    197a:	e1 dd       	rcall	.-1086   	; 0x153e <u8g2_font_decode_len>
    197c:	8d 85       	ldd	r24, Y+13	; 0x0d
    197e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	6c 85       	ldd	r22, Y+12	; 0x0c
    1984:	dc dd       	rcall	.-1096   	; 0x153e <u8g2_font_decode_len>
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	61 e0       	ldi	r22, 0x01	; 1
    198c:	b9 dc       	rcall	.-1678   	; 0x1300 <u8g2_font_decode_get_unsigned_bits>
    198e:	88 23       	and	r24, r24
    1990:	81 f7       	brne	.-32     	; 0x1972 <u8g2_font_decode_glyph+0x220>
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	9e 81       	ldd	r25, Y+6	; 0x06
    1996:	fc 01       	movw	r30, r24
    1998:	95 81       	ldd	r25, Z+5	; 0x05
    199a:	8f 81       	ldd	r24, Y+7	; 0x07
    199c:	98 17       	cp	r25, r24
    199e:	0c f4       	brge	.+2      	; 0x19a2 <u8g2_font_decode_glyph+0x250>
    19a0:	d2 cf       	rjmp	.-92     	; 0x1946 <u8g2_font_decode_glyph+0x1f4>
    19a2:	00 00       	nop
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	9e 81       	ldd	r25, Y+6	; 0x06
    19a8:	fc 01       	movw	r30, r24
    19aa:	22 85       	ldd	r18, Z+10	; 0x0a
    19ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b0:	8c 59       	subi	r24, 0x9C	; 156
    19b2:	9f 4f       	sbci	r25, 0xFF	; 255
    19b4:	fc 01       	movw	r30, r24
    19b6:	20 83       	st	Z, r18
    19b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ba:	60 96       	adiw	r28, 0x10	; 16
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	0f 91       	pop	r16
    19cc:	08 95       	ret

000019ce <u8g2_font_get_glyph_data>:
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	6c 97       	sbiw	r28, 0x1c	; 28
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	9a 8f       	std	Y+26, r25	; 0x1a
    19e4:	89 8f       	std	Y+25, r24	; 0x19
    19e6:	7c 8f       	std	Y+28, r23	; 0x1c
    19e8:	6b 8f       	std	Y+27, r22	; 0x1b
    19ea:	89 8d       	ldd	r24, Y+25	; 0x19
    19ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19ee:	fc 01       	movw	r30, r24
    19f0:	86 a9       	ldd	r24, Z+54	; 0x36
    19f2:	97 a9       	ldd	r25, Z+55	; 0x37
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	9a 81       	ldd	r25, Y+2	; 0x02
    19fc:	47 96       	adiw	r24, 0x17	; 23
    19fe:	9a 83       	std	Y+2, r25	; 0x02
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a06:	8f 3f       	cpi	r24, 0xFF	; 255
    1a08:	91 05       	cpc	r25, r1
    1a0a:	11 f0       	breq	.+4      	; 0x1a10 <u8g2_font_get_glyph_data+0x42>
    1a0c:	08 f0       	brcs	.+2      	; 0x1a10 <u8g2_font_get_glyph_data+0x42>
    1a0e:	5c c0       	rjmp	.+184    	; 0x1ac8 <u8g2_font_get_glyph_data+0xfa>
    1a10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a14:	81 36       	cpi	r24, 0x61	; 97
    1a16:	91 05       	cpc	r25, r1
    1a18:	70 f0       	brcs	.+28     	; 0x1a36 <u8g2_font_get_glyph_data+0x68>
    1a1a:	89 8d       	ldd	r24, Y+25	; 0x19
    1a1c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a1e:	86 5a       	subi	r24, 0xA6	; 166
    1a20:	9f 4f       	sbci	r25, 0xFF	; 255
    1a22:	fc 01       	movw	r30, r24
    1a24:	80 81       	ld	r24, Z
    1a26:	91 81       	ldd	r25, Z+1	; 0x01
    1a28:	29 81       	ldd	r18, Y+1	; 0x01
    1a2a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a2c:	82 0f       	add	r24, r18
    1a2e:	93 1f       	adc	r25, r19
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	12 c0       	rjmp	.+36     	; 0x1a5a <u8g2_font_get_glyph_data+0x8c>
    1a36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a3a:	81 34       	cpi	r24, 0x41	; 65
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	68 f0       	brcs	.+26     	; 0x1a5a <u8g2_font_get_glyph_data+0x8c>
    1a40:	89 8d       	ldd	r24, Y+25	; 0x19
    1a42:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a44:	88 5a       	subi	r24, 0xA8	; 168
    1a46:	9f 4f       	sbci	r25, 0xFF	; 255
    1a48:	fc 01       	movw	r30, r24
    1a4a:	80 81       	ld	r24, Z
    1a4c:	91 81       	ldd	r25, Z+1	; 0x01
    1a4e:	29 81       	ldd	r18, Y+1	; 0x01
    1a50:	3a 81       	ldd	r19, Y+2	; 0x02
    1a52:	82 0f       	add	r24, r18
    1a54:	93 1f       	adc	r25, r19
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8d 83       	std	Y+5, r24	; 0x05
    1a64:	8d 81       	ldd	r24, Y+5	; 0x05
    1a66:	9e 81       	ldd	r25, Y+6	; 0x06
    1a68:	fc 01       	movw	r30, r24
    1a6a:	84 91       	lpm	r24, Z
    1a6c:	8f 83       	std	Y+7, r24	; 0x07
    1a6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a70:	88 23       	and	r24, r24
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <u8g2_font_get_glyph_data+0xa8>
    1a74:	a1 c0       	rjmp	.+322    	; 0x1bb8 <u8g2_font_get_glyph_data+0x1ea>
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	99 87       	std	Y+9, r25	; 0x09
    1a7c:	88 87       	std	Y+8, r24	; 0x08
    1a7e:	88 85       	ldd	r24, Y+8	; 0x08
    1a80:	99 85       	ldd	r25, Y+9	; 0x09
    1a82:	fc 01       	movw	r30, r24
    1a84:	84 91       	lpm	r24, Z
    1a86:	8a 87       	std	Y+10, r24	; 0x0a
    1a88:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a92:	28 17       	cp	r18, r24
    1a94:	39 07       	cpc	r19, r25
    1a96:	21 f4       	brne	.+8      	; 0x1aa0 <u8g2_font_get_glyph_data+0xd2>
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9c:	02 96       	adiw	r24, 0x02	; 2
    1a9e:	91 c0       	rjmp	.+290    	; 0x1bc2 <u8g2_font_get_glyph_data+0x1f4>
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	01 96       	adiw	r24, 0x01	; 1
    1aa6:	9c 87       	std	Y+12, r25	; 0x0c
    1aa8:	8b 87       	std	Y+11, r24	; 0x0b
    1aaa:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aac:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aae:	fc 01       	movw	r30, r24
    1ab0:	84 91       	lpm	r24, Z
    1ab2:	8d 87       	std	Y+13, r24	; 0x0d
    1ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	29 81       	ldd	r18, Y+1	; 0x01
    1abc:	3a 81       	ldd	r19, Y+2	; 0x02
    1abe:	82 0f       	add	r24, r18
    1ac0:	93 1f       	adc	r25, r19
    1ac2:	9a 83       	std	Y+2, r25	; 0x02
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	c9 cf       	rjmp	.-110    	; 0x1a5a <u8g2_font_get_glyph_data+0x8c>
    1ac8:	89 8d       	ldd	r24, Y+25	; 0x19
    1aca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1acc:	84 5a       	subi	r24, 0xA4	; 164
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	29 81       	ldd	r18, Y+1	; 0x01
    1ad8:	3a 81       	ldd	r19, Y+2	; 0x02
    1ada:	82 0f       	add	r24, r18
    1adc:	93 1f       	adc	r25, r19
    1ade:	9a 83       	std	Y+2, r25	; 0x02
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae6:	9c 83       	std	Y+4, r25	; 0x04
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	9c 81       	ldd	r25, Y+4	; 0x04
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	f2 da       	rcall	.-2588   	; 0x10d6 <u8g2_font_get_word>
    1af2:	9c 01       	movw	r18, r24
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	9a 81       	ldd	r25, Y+2	; 0x02
    1af8:	82 0f       	add	r24, r18
    1afa:	93 1f       	adc	r25, r19
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	62 e0       	ldi	r22, 0x02	; 2
    1b06:	e7 da       	rcall	.-2610   	; 0x10d6 <u8g2_font_get_word>
    1b08:	9f 87       	std	Y+15, r25	; 0x0f
    1b0a:	8e 87       	std	Y+14, r24	; 0x0e
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	04 96       	adiw	r24, 0x04	; 4
    1b12:	9c 83       	std	Y+4, r25	; 0x04
    1b14:	8b 83       	std	Y+3, r24	; 0x03
    1b16:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b18:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b1e:	28 17       	cp	r18, r24
    1b20:	39 07       	cpc	r19, r25
    1b22:	18 f3       	brcs	.-58     	; 0x1aea <u8g2_font_get_glyph_data+0x11c>
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	99 8b       	std	Y+17, r25	; 0x11
    1b2a:	88 8b       	std	Y+16, r24	; 0x10
    1b2c:	88 89       	ldd	r24, Y+16	; 0x10
    1b2e:	99 89       	ldd	r25, Y+17	; 0x11
    1b30:	fc 01       	movw	r30, r24
    1b32:	84 91       	lpm	r24, Z
    1b34:	8a 8b       	std	Y+18, r24	; 0x12
    1b36:	8a 89       	ldd	r24, Y+18	; 0x12
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9f 87       	std	Y+15, r25	; 0x0f
    1b3e:	8e 87       	std	Y+14, r24	; 0x0e
    1b40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b42:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b44:	98 2f       	mov	r25, r24
    1b46:	88 27       	eor	r24, r24
    1b48:	9f 87       	std	Y+15, r25	; 0x0f
    1b4a:	8e 87       	std	Y+14, r24	; 0x0e
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b50:	01 96       	adiw	r24, 0x01	; 1
    1b52:	9c 8b       	std	Y+20, r25	; 0x14
    1b54:	8b 8b       	std	Y+19, r24	; 0x13
    1b56:	8b 89       	ldd	r24, Y+19	; 0x13
    1b58:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	84 91       	lpm	r24, Z
    1b5e:	8d 8b       	std	Y+21, r24	; 0x15
    1b60:	8d 89       	ldd	r24, Y+21	; 0x15
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b68:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b6a:	82 2b       	or	r24, r18
    1b6c:	93 2b       	or	r25, r19
    1b6e:	9f 87       	std	Y+15, r25	; 0x0f
    1b70:	8e 87       	std	Y+14, r24	; 0x0e
    1b72:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b74:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b76:	89 2b       	or	r24, r25
    1b78:	09 f1       	breq	.+66     	; 0x1bbc <u8g2_font_get_glyph_data+0x1ee>
    1b7a:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b7c:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b82:	28 17       	cp	r18, r24
    1b84:	39 07       	cpc	r19, r25
    1b86:	21 f4       	brne	.+8      	; 0x1b90 <u8g2_font_get_glyph_data+0x1c2>
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	03 96       	adiw	r24, 0x03	; 3
    1b8e:	19 c0       	rjmp	.+50     	; 0x1bc2 <u8g2_font_get_glyph_data+0x1f4>
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	9a 81       	ldd	r25, Y+2	; 0x02
    1b94:	02 96       	adiw	r24, 0x02	; 2
    1b96:	9f 8b       	std	Y+23, r25	; 0x17
    1b98:	8e 8b       	std	Y+22, r24	; 0x16
    1b9a:	8e 89       	ldd	r24, Y+22	; 0x16
    1b9c:	9f 89       	ldd	r25, Y+23	; 0x17
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	84 91       	lpm	r24, Z
    1ba2:	88 8f       	std	Y+24, r24	; 0x18
    1ba4:	88 8d       	ldd	r24, Y+24	; 0x18
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	29 81       	ldd	r18, Y+1	; 0x01
    1bac:	3a 81       	ldd	r19, Y+2	; 0x02
    1bae:	82 0f       	add	r24, r18
    1bb0:	93 1f       	adc	r25, r19
    1bb2:	9a 83       	std	Y+2, r25	; 0x02
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	b6 cf       	rjmp	.-148    	; 0x1b24 <u8g2_font_get_glyph_data+0x156>
    1bb8:	00 00       	nop
    1bba:	01 c0       	rjmp	.+2      	; 0x1bbe <u8g2_font_get_glyph_data+0x1f0>
    1bbc:	00 00       	nop
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	6c 96       	adiw	r28, 0x1c	; 28
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	08 95       	ret

00001bd4 <u8g2_font_draw_glyph>:
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	29 97       	sbiw	r28, 0x09	; 9
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	9d 83       	std	Y+5, r25	; 0x05
    1bea:	8c 83       	std	Y+4, r24	; 0x04
    1bec:	6e 83       	std	Y+6, r22	; 0x06
    1bee:	4f 83       	std	Y+7, r20	; 0x07
    1bf0:	39 87       	std	Y+9, r19	; 0x09
    1bf2:	28 87       	std	Y+8, r18	; 0x08
    1bf4:	19 82       	std	Y+1, r1	; 0x01
    1bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfa:	2e 81       	ldd	r18, Y+6	; 0x06
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	24 af       	std	Z+60, r18	; 0x3c
    1c00:	8c 81       	ldd	r24, Y+4	; 0x04
    1c02:	9d 81       	ldd	r25, Y+5	; 0x05
    1c04:	2f 81       	ldd	r18, Y+7	; 0x07
    1c06:	fc 01       	movw	r30, r24
    1c08:	25 af       	std	Z+61, r18	; 0x3d
    1c0a:	28 85       	ldd	r18, Y+8	; 0x08
    1c0c:	39 85       	ldd	r19, Y+9	; 0x09
    1c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c10:	9d 81       	ldd	r25, Y+5	; 0x05
    1c12:	b9 01       	movw	r22, r18
    1c14:	dc de       	rcall	.-584    	; 0x19ce <u8g2_font_get_glyph_data>
    1c16:	9b 83       	std	Y+3, r25	; 0x03
    1c18:	8a 83       	std	Y+2, r24	; 0x02
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1e:	89 2b       	or	r24, r25
    1c20:	39 f0       	breq	.+14     	; 0x1c30 <u8g2_font_draw_glyph+0x5c>
    1c22:	2a 81       	ldd	r18, Y+2	; 0x02
    1c24:	3b 81       	ldd	r19, Y+3	; 0x03
    1c26:	8c 81       	ldd	r24, Y+4	; 0x04
    1c28:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2a:	b9 01       	movw	r22, r18
    1c2c:	92 dd       	rcall	.-1244   	; 0x1752 <u8g2_font_decode_glyph>
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	29 96       	adiw	r28, 0x09	; 9
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	08 95       	ret

00001c44 <u8g2_DrawGlyph>:
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <u8g2_DrawGlyph+0x6>
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <u8g2_DrawGlyph+0x8>
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <u8g2_DrawGlyph+0xa>
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	6b 83       	std	Y+3, r22	; 0x03
    1c58:	4c 83       	std	Y+4, r20	; 0x04
    1c5a:	3e 83       	std	Y+6, r19	; 0x06
    1c5c:	2d 83       	std	Y+5, r18	; 0x05
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	8a 5b       	subi	r24, 0xBA	; 186
    1c64:	9f 4f       	sbci	r25, 0xFF	; 255
    1c66:	fc 01       	movw	r30, r24
    1c68:	80 81       	ld	r24, Z
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	91 05       	cpc	r25, r1
    1c72:	d1 f0       	breq	.+52     	; 0x1ca8 <u8g2_DrawGlyph+0x64>
    1c74:	82 30       	cpi	r24, 0x02	; 2
    1c76:	91 05       	cpc	r25, r1
    1c78:	1c f4       	brge	.+6      	; 0x1c80 <u8g2_DrawGlyph+0x3c>
    1c7a:	89 2b       	or	r24, r25
    1c7c:	39 f0       	breq	.+14     	; 0x1c8c <u8g2_DrawGlyph+0x48>
    1c7e:	3e c0       	rjmp	.+124    	; 0x1cfc <u8g2_DrawGlyph+0xb8>
    1c80:	82 30       	cpi	r24, 0x02	; 2
    1c82:	91 05       	cpc	r25, r1
    1c84:	f9 f0       	breq	.+62     	; 0x1cc4 <u8g2_DrawGlyph+0x80>
    1c86:	03 97       	sbiw	r24, 0x03	; 3
    1c88:	59 f1       	breq	.+86     	; 0x1ce0 <u8g2_DrawGlyph+0x9c>
    1c8a:	38 c0       	rjmp	.+112    	; 0x1cfc <u8g2_DrawGlyph+0xb8>
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	fc 01       	movw	r30, r24
    1c92:	20 ad       	ldd	r18, Z+56	; 0x38
    1c94:	31 ad       	ldd	r19, Z+57	; 0x39
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9a:	f9 01       	movw	r30, r18
    1c9c:	09 95       	icall
    1c9e:	98 2f       	mov	r25, r24
    1ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca2:	89 0f       	add	r24, r25
    1ca4:	8c 83       	std	Y+4, r24	; 0x04
    1ca6:	2a c0       	rjmp	.+84     	; 0x1cfc <u8g2_DrawGlyph+0xb8>
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	fc 01       	movw	r30, r24
    1cae:	20 ad       	ldd	r18, Z+56	; 0x38
    1cb0:	31 ad       	ldd	r19, Z+57	; 0x39
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	f9 01       	movw	r30, r18
    1cb8:	09 95       	icall
    1cba:	98 2f       	mov	r25, r24
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	89 1b       	sub	r24, r25
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
    1cc2:	1c c0       	rjmp	.+56     	; 0x1cfc <u8g2_DrawGlyph+0xb8>
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	fc 01       	movw	r30, r24
    1cca:	20 ad       	ldd	r18, Z+56	; 0x38
    1ccc:	31 ad       	ldd	r19, Z+57	; 0x39
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	09 95       	icall
    1cd6:	98 2f       	mov	r25, r24
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	89 1b       	sub	r24, r25
    1cdc:	8c 83       	std	Y+4, r24	; 0x04
    1cde:	0e c0       	rjmp	.+28     	; 0x1cfc <u8g2_DrawGlyph+0xb8>
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	20 ad       	ldd	r18, Z+56	; 0x38
    1ce8:	31 ad       	ldd	r19, Z+57	; 0x39
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
    1cee:	f9 01       	movw	r30, r18
    1cf0:	09 95       	icall
    1cf2:	98 2f       	mov	r25, r24
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	89 0f       	add	r24, r25
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
    1cfa:	00 00       	nop
    1cfc:	2d 81       	ldd	r18, Y+5	; 0x05
    1cfe:	3e 81       	ldd	r19, Y+6	; 0x06
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	9a 81       	ldd	r25, Y+2	; 0x02
    1d04:	4c 81       	ldd	r20, Y+4	; 0x04
    1d06:	6b 81       	ldd	r22, Y+3	; 0x03
    1d08:	65 df       	rcall	.-310    	; 0x1bd4 <u8g2_font_draw_glyph>
    1d0a:	26 96       	adiw	r28, 0x06	; 6
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	08 95       	ret

00001d1c <u8g2_draw_string>:
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	2a 97       	sbiw	r28, 0x0a	; 10
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
    1d34:	6f 83       	std	Y+7, r22	; 0x07
    1d36:	48 87       	std	Y+8, r20	; 0x08
    1d38:	3a 87       	std	Y+10, r19	; 0x0a
    1d3a:	29 87       	std	Y+9, r18	; 0x09
    1d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d40:	54 d6       	rcall	.+3240   	; 0x29ea <u8x8_utf8_init>
    1d42:	19 82       	std	Y+1, r1	; 0x01
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	fc 01       	movw	r30, r24
    1d4a:	22 81       	ldd	r18, Z+2	; 0x02
    1d4c:	33 81       	ldd	r19, Z+3	; 0x03
    1d4e:	89 85       	ldd	r24, Y+9	; 0x09
    1d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d52:	fc 01       	movw	r30, r24
    1d54:	80 81       	ld	r24, Z
    1d56:	48 2f       	mov	r20, r24
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5c:	64 2f       	mov	r22, r20
    1d5e:	f9 01       	movw	r30, r18
    1d60:	09 95       	icall
    1d62:	9b 83       	std	Y+3, r25	; 0x03
    1d64:	8a 83       	std	Y+2, r24	; 0x02
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6a:	01 96       	adiw	r24, 0x01	; 1
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <u8g2_draw_string+0x54>
    1d6e:	45 c0       	rjmp	.+138    	; 0x1dfa <u8g2_draw_string+0xde>
    1d70:	89 85       	ldd	r24, Y+9	; 0x09
    1d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	9a 87       	std	Y+10, r25	; 0x0a
    1d78:	89 87       	std	Y+9, r24	; 0x09
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7e:	02 96       	adiw	r24, 0x02	; 2
    1d80:	09 f3       	breq	.-62     	; 0x1d44 <u8g2_draw_string+0x28>
    1d82:	2a 81       	ldd	r18, Y+2	; 0x02
    1d84:	3b 81       	ldd	r19, Y+3	; 0x03
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8a:	48 85       	ldd	r20, Y+8	; 0x08
    1d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8e:	5a df       	rcall	.-332    	; 0x1c44 <u8g2_DrawGlyph>
    1d90:	8c 83       	std	Y+4, r24	; 0x04
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	8a 5b       	subi	r24, 0xBA	; 186
    1d98:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	80 81       	ld	r24, Z
    1d9e:	88 2f       	mov	r24, r24
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	91 05       	cpc	r25, r1
    1da6:	89 f0       	breq	.+34     	; 0x1dca <u8g2_draw_string+0xae>
    1da8:	82 30       	cpi	r24, 0x02	; 2
    1daa:	91 05       	cpc	r25, r1
    1dac:	1c f4       	brge	.+6      	; 0x1db4 <u8g2_draw_string+0x98>
    1dae:	89 2b       	or	r24, r25
    1db0:	39 f0       	breq	.+14     	; 0x1dc0 <u8g2_draw_string+0xa4>
    1db2:	1e c0       	rjmp	.+60     	; 0x1df0 <u8g2_draw_string+0xd4>
    1db4:	82 30       	cpi	r24, 0x02	; 2
    1db6:	91 05       	cpc	r25, r1
    1db8:	69 f0       	breq	.+26     	; 0x1dd4 <u8g2_draw_string+0xb8>
    1dba:	03 97       	sbiw	r24, 0x03	; 3
    1dbc:	91 f0       	breq	.+36     	; 0x1de2 <u8g2_draw_string+0xc6>
    1dbe:	18 c0       	rjmp	.+48     	; 0x1df0 <u8g2_draw_string+0xd4>
    1dc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc4:	89 0f       	add	r24, r25
    1dc6:	8f 83       	std	Y+7, r24	; 0x07
    1dc8:	13 c0       	rjmp	.+38     	; 0x1df0 <u8g2_draw_string+0xd4>
    1dca:	98 85       	ldd	r25, Y+8	; 0x08
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	89 0f       	add	r24, r25
    1dd0:	88 87       	std	Y+8, r24	; 0x08
    1dd2:	0e c0       	rjmp	.+28     	; 0x1df0 <u8g2_draw_string+0xd4>
    1dd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd8:	f9 2f       	mov	r31, r25
    1dda:	f8 1b       	sub	r31, r24
    1ddc:	8f 2f       	mov	r24, r31
    1dde:	8f 83       	std	Y+7, r24	; 0x07
    1de0:	07 c0       	rjmp	.+14     	; 0x1df0 <u8g2_draw_string+0xd4>
    1de2:	98 85       	ldd	r25, Y+8	; 0x08
    1de4:	8c 81       	ldd	r24, Y+4	; 0x04
    1de6:	29 2f       	mov	r18, r25
    1de8:	28 1b       	sub	r18, r24
    1dea:	82 2f       	mov	r24, r18
    1dec:	88 87       	std	Y+8, r24	; 0x08
    1dee:	00 00       	nop
    1df0:	99 81       	ldd	r25, Y+1	; 0x01
    1df2:	8c 81       	ldd	r24, Y+4	; 0x04
    1df4:	89 0f       	add	r24, r25
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	a5 cf       	rjmp	.-182    	; 0x1d44 <u8g2_draw_string+0x28>
    1dfa:	00 00       	nop
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	2a 96       	adiw	r28, 0x0a	; 10
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	de bf       	out	0x3e, r29	; 62
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	cd bf       	out	0x3d, r28	; 61
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	08 95       	ret

00001e10 <u8g2_DrawStr>:
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <u8g2_DrawStr+0x6>
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <u8g2_DrawStr+0x8>
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <u8g2_DrawStr+0xa>
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	6b 83       	std	Y+3, r22	; 0x03
    1e24:	4c 83       	std	Y+4, r20	; 0x04
    1e26:	3e 83       	std	Y+6, r19	; 0x06
    1e28:	2d 83       	std	Y+5, r18	; 0x05
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2e:	26 e0       	ldi	r18, 0x06	; 6
    1e30:	35 e1       	ldi	r19, 0x15	; 21
    1e32:	fc 01       	movw	r30, r24
    1e34:	33 83       	std	Z+3, r19	; 0x03
    1e36:	22 83       	std	Z+2, r18	; 0x02
    1e38:	2d 81       	ldd	r18, Y+5	; 0x05
    1e3a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e40:	4c 81       	ldd	r20, Y+4	; 0x04
    1e42:	6b 81       	ldd	r22, Y+3	; 0x03
    1e44:	6b df       	rcall	.-298    	; 0x1d1c <u8g2_draw_string>
    1e46:	26 96       	adiw	r28, 0x06	; 6
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	cd bf       	out	0x3d, r28	; 61
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	08 95       	ret

00001e58 <u8g2_UpdateRefHeight>:
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <u8g2_UpdateRefHeight+0x6>
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	86 a9       	ldd	r24, Z+54	; 0x36
    1e6e:	97 a9       	ldd	r25, Z+55	; 0x37
    1e70:	89 2b       	or	r24, r25
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <u8g2_UpdateRefHeight+0x1e>
    1e74:	af c0       	rjmp	.+350    	; 0x1fd4 <u8g2_UpdateRefHeight+0x17c>
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7a:	8c 5a       	subi	r24, 0xAC	; 172
    1e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7e:	fc 01       	movw	r30, r24
    1e80:	20 81       	ld	r18, Z
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	9a 81       	ldd	r25, Y+2	; 0x02
    1e86:	80 5a       	subi	r24, 0xA0	; 160
    1e88:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	20 83       	st	Z, r18
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	9a 81       	ldd	r25, Y+2	; 0x02
    1e92:	8b 5a       	subi	r24, 0xAB	; 171
    1e94:	9f 4f       	sbci	r25, 0xFF	; 255
    1e96:	fc 01       	movw	r30, r24
    1e98:	20 81       	ld	r18, Z
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	8f 59       	subi	r24, 0x9F	; 159
    1ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	20 83       	st	Z, r18
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eaa:	81 5a       	subi	r24, 0xA1	; 161
    1eac:	9f 4f       	sbci	r25, 0xFF	; 255
    1eae:	fc 01       	movw	r30, r24
    1eb0:	80 81       	ld	r24, Z
    1eb2:	88 23       	and	r24, r24
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <u8g2_UpdateRefHeight+0x60>
    1eb6:	8f c0       	rjmp	.+286    	; 0x1fd6 <u8g2_UpdateRefHeight+0x17e>
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebc:	81 5a       	subi	r24, 0xA1	; 161
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	80 81       	ld	r24, Z
    1ec4:	81 30       	cpi	r24, 0x01	; 1
    1ec6:	b1 f5       	brne	.+108    	; 0x1f34 <u8g2_UpdateRefHeight+0xdc>
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ecc:	80 5a       	subi	r24, 0xA0	; 160
    1ece:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	20 81       	ld	r18, Z
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed8:	8a 5a       	subi	r24, 0xAA	; 170
    1eda:	9f 4f       	sbci	r25, 0xFF	; 255
    1edc:	fc 01       	movw	r30, r24
    1ede:	80 81       	ld	r24, Z
    1ee0:	28 17       	cp	r18, r24
    1ee2:	64 f4       	brge	.+24     	; 0x1efc <u8g2_UpdateRefHeight+0xa4>
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee8:	8a 5a       	subi	r24, 0xAA	; 170
    1eea:	9f 4f       	sbci	r25, 0xFF	; 255
    1eec:	fc 01       	movw	r30, r24
    1eee:	20 81       	ld	r18, Z
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	80 5a       	subi	r24, 0xA0	; 160
    1ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef8:	fc 01       	movw	r30, r24
    1efa:	20 83       	st	Z, r18
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	9a 81       	ldd	r25, Y+2	; 0x02
    1f00:	8f 59       	subi	r24, 0x9F	; 159
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	fc 01       	movw	r30, r24
    1f06:	20 81       	ld	r18, Z
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0c:	89 5a       	subi	r24, 0xA9	; 169
    1f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f10:	fc 01       	movw	r30, r24
    1f12:	80 81       	ld	r24, Z
    1f14:	82 17       	cp	r24, r18
    1f16:	0c f0       	brlt	.+2      	; 0x1f1a <u8g2_UpdateRefHeight+0xc2>
    1f18:	5e c0       	rjmp	.+188    	; 0x1fd6 <u8g2_UpdateRefHeight+0x17e>
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	89 5a       	subi	r24, 0xA9	; 169
    1f20:	9f 4f       	sbci	r25, 0xFF	; 255
    1f22:	fc 01       	movw	r30, r24
    1f24:	20 81       	ld	r18, Z
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	8f 59       	subi	r24, 0x9F	; 159
    1f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2e:	fc 01       	movw	r30, r24
    1f30:	20 83       	st	Z, r18
    1f32:	51 c0       	rjmp	.+162    	; 0x1fd6 <u8g2_UpdateRefHeight+0x17e>
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	80 5a       	subi	r24, 0xA0	; 160
    1f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	80 81       	ld	r24, Z
    1f40:	28 2f       	mov	r18, r24
    1f42:	88 0f       	add	r24, r24
    1f44:	33 0b       	sbc	r19, r19
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	8f 5a       	subi	r24, 0xAF	; 175
    1f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4e:	fc 01       	movw	r30, r24
    1f50:	80 81       	ld	r24, Z
    1f52:	48 2f       	mov	r20, r24
    1f54:	88 0f       	add	r24, r24
    1f56:	55 0b       	sbc	r21, r21
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5c:	8d 5a       	subi	r24, 0xAD	; 173
    1f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f60:	fc 01       	movw	r30, r24
    1f62:	80 81       	ld	r24, Z
    1f64:	08 2e       	mov	r0, r24
    1f66:	00 0c       	add	r0, r0
    1f68:	99 0b       	sbc	r25, r25
    1f6a:	84 0f       	add	r24, r20
    1f6c:	95 1f       	adc	r25, r21
    1f6e:	28 17       	cp	r18, r24
    1f70:	39 07       	cpc	r19, r25
    1f72:	ac f4       	brge	.+42     	; 0x1f9e <u8g2_UpdateRefHeight+0x146>
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	9a 81       	ldd	r25, Y+2	; 0x02
    1f78:	8f 5a       	subi	r24, 0xAF	; 175
    1f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	80 81       	ld	r24, Z
    1f80:	28 2f       	mov	r18, r24
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	9a 81       	ldd	r25, Y+2	; 0x02
    1f86:	8d 5a       	subi	r24, 0xAD	; 173
    1f88:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	80 81       	ld	r24, Z
    1f8e:	82 0f       	add	r24, r18
    1f90:	28 2f       	mov	r18, r24
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	9a 81       	ldd	r25, Y+2	; 0x02
    1f96:	80 5a       	subi	r24, 0xA0	; 160
    1f98:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	20 83       	st	Z, r18
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa2:	8f 59       	subi	r24, 0x9F	; 159
    1fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	20 81       	ld	r18, Z
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	8d 5a       	subi	r24, 0xAD	; 173
    1fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	80 81       	ld	r24, Z
    1fb6:	82 17       	cp	r24, r18
    1fb8:	74 f4       	brge	.+28     	; 0x1fd6 <u8g2_UpdateRefHeight+0x17e>
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbe:	8d 5a       	subi	r24, 0xAD	; 173
    1fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	20 81       	ld	r18, Z
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	8f 59       	subi	r24, 0x9F	; 159
    1fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fce:	fc 01       	movw	r30, r24
    1fd0:	20 83       	st	Z, r18
    1fd2:	01 c0       	rjmp	.+2      	; 0x1fd6 <u8g2_UpdateRefHeight+0x17e>
    1fd4:	00 00       	nop
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	08 95       	ret

00001fe0 <u8g2_font_calc_vref_font>:
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <u8g2_font_calc_vref_font+0x6>
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	9a 83       	std	Y+2, r25	; 0x02
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	08 95       	ret

00001ffa <u8g2_SetFontPosBaseline>:
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <u8g2_SetFontPosBaseline+0x6>
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	9a 81       	ldd	r25, Y+2	; 0x02
    200c:	20 ef       	ldi	r18, 0xF0	; 240
    200e:	3f e0       	ldi	r19, 0x0F	; 15
    2010:	fc 01       	movw	r30, r24
    2012:	31 af       	std	Z+57, r19	; 0x39
    2014:	20 af       	std	Z+56, r18	; 0x38
    2016:	00 00       	nop
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	08 95       	ret

00002022 <u8g2_SetFont>:

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	00 d0       	rcall	.+0      	; 0x2028 <u8g2_SetFont+0x6>
    2028:	00 d0       	rcall	.+0      	; 0x202a <u8g2_SetFont+0x8>
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	9a 83       	std	Y+2, r25	; 0x02
    2030:	89 83       	std	Y+1, r24	; 0x01
    2032:	7c 83       	std	Y+4, r23	; 0x04
    2034:	6b 83       	std	Y+3, r22	; 0x03
  if ( u8g2->font != font )
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	9a 81       	ldd	r25, Y+2	; 0x02
    203a:	fc 01       	movw	r30, r24
    203c:	26 a9       	ldd	r18, Z+54	; 0x36
    203e:	37 a9       	ldd	r19, Z+55	; 0x37
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	28 17       	cp	r18, r24
    2046:	39 07       	cpc	r19, r25
    2048:	91 f0       	breq	.+36     	; 0x206e <u8g2_SetFont+0x4c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	9a 81       	ldd	r25, Y+2	; 0x02
    204e:	2b 81       	ldd	r18, Y+3	; 0x03
    2050:	3c 81       	ldd	r19, Y+4	; 0x04
    2052:	fc 01       	movw	r30, r24
    2054:	37 ab       	std	Z+55, r19	; 0x37
    2056:	26 ab       	std	Z+54, r18	; 0x36
    u8g2_read_font_info(&(u8g2->font_info), font);
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	9a 81       	ldd	r25, Y+2	; 0x02
    205c:	89 5b       	subi	r24, 0xB9	; 185
    205e:	9f 4f       	sbci	r25, 0xFF	; 255
    2060:	2b 81       	ldd	r18, Y+3	; 0x03
    2062:	3c 81       	ldd	r19, Y+4	; 0x04
    2064:	b9 01       	movw	r22, r18
    2066:	83 d8       	rcall	.-3834   	; 0x116e <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	9a 81       	ldd	r25, Y+2	; 0x02
    206c:	f5 de       	rcall	.-534    	; 0x1e58 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    206e:	00 00       	nop
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	08 95       	ret

0000207e <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	28 97       	sbiw	r28, 0x08	; 8
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	9c 83       	std	Y+4, r25	; 0x04
    2094:	8b 83       	std	Y+3, r24	; 0x03
    2096:	7e 83       	std	Y+6, r23	; 0x06
    2098:	6d 83       	std	Y+5, r22	; 0x05
    209a:	4f 83       	std	Y+7, r20	; 0x07
    209c:	28 87       	std	Y+8, r18	; 0x08
  u8g2_uint_t a = *ap;
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	9c 81       	ldd	r25, Y+4	; 0x04
    20a2:	fc 01       	movw	r30, r24
    20a4:	80 81       	ld	r24, Z
    20a6:	89 83       	std	Y+1, r24	; 0x01
  u8g2_uint_t b;
  b  = a;
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	8a 83       	std	Y+2, r24	; 0x02
  b += *len;
    20ac:	8d 81       	ldd	r24, Y+5	; 0x05
    20ae:	9e 81       	ldd	r25, Y+6	; 0x06
    20b0:	fc 01       	movw	r30, r24
    20b2:	80 81       	ld	r24, Z
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	89 0f       	add	r24, r25
    20b8:	8a 83       	std	Y+2, r24	; 0x02
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    20ba:	99 81       	ldd	r25, Y+1	; 0x01
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	89 17       	cp	r24, r25
    20c0:	60 f4       	brcc	.+24     	; 0x20da <u8g2_clip_intersection2+0x5c>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    20c2:	99 81       	ldd	r25, Y+1	; 0x01
    20c4:	88 85       	ldd	r24, Y+8	; 0x08
    20c6:	98 17       	cp	r25, r24
    20c8:	30 f4       	brcc	.+12     	; 0x20d6 <u8g2_clip_intersection2+0x58>
    {
      b = d;
    20ca:	88 85       	ldd	r24, Y+8	; 0x08
    20cc:	8a 83       	std	Y+2, r24	; 0x02
      b--;
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	81 50       	subi	r24, 0x01	; 1
    20d2:	8a 83       	std	Y+2, r24	; 0x02
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <u8g2_clip_intersection2+0x5c>
    }
    else
    {
      a = c;
    20d6:	8f 81       	ldd	r24, Y+7	; 0x07
    20d8:	89 83       	std	Y+1, r24	; 0x01
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    20da:	99 81       	ldd	r25, Y+1	; 0x01
    20dc:	88 85       	ldd	r24, Y+8	; 0x08
    20de:	98 17       	cp	r25, r24
    20e0:	10 f0       	brcs	.+4      	; 0x20e6 <u8g2_clip_intersection2+0x68>
    return 0;
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	23 c0       	rjmp	.+70     	; 0x212c <u8g2_clip_intersection2+0xae>
  if ( b <= c )
    20e6:	9a 81       	ldd	r25, Y+2	; 0x02
    20e8:	8f 81       	ldd	r24, Y+7	; 0x07
    20ea:	89 17       	cp	r24, r25
    20ec:	10 f0       	brcs	.+4      	; 0x20f2 <u8g2_clip_intersection2+0x74>
    return 0;
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	1d c0       	rjmp	.+58     	; 0x212c <u8g2_clip_intersection2+0xae>
  if ( a < c )		
    20f2:	99 81       	ldd	r25, Y+1	; 0x01
    20f4:	8f 81       	ldd	r24, Y+7	; 0x07
    20f6:	98 17       	cp	r25, r24
    20f8:	10 f4       	brcc	.+4      	; 0x20fe <u8g2_clip_intersection2+0x80>
    a = c;
    20fa:	8f 81       	ldd	r24, Y+7	; 0x07
    20fc:	89 83       	std	Y+1, r24	; 0x01
  if ( b > d )
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	88 85       	ldd	r24, Y+8	; 0x08
    2102:	89 17       	cp	r24, r25
    2104:	10 f4       	brcc	.+4      	; 0x210a <u8g2_clip_intersection2+0x8c>
    b = d;
    2106:	88 85       	ldd	r24, Y+8	; 0x08
    2108:	8a 83       	std	Y+2, r24	; 0x02
  
  *ap = a;
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	29 81       	ldd	r18, Y+1	; 0x01
    2110:	fc 01       	movw	r30, r24
    2112:	20 83       	st	Z, r18
  b -= a;
    2114:	9a 81       	ldd	r25, Y+2	; 0x02
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	f9 2f       	mov	r31, r25
    211a:	f8 1b       	sub	r31, r24
    211c:	8f 2f       	mov	r24, r31
    211e:	8a 83       	std	Y+2, r24	; 0x02
  *len = b;
    2120:	8d 81       	ldd	r24, Y+5	; 0x05
    2122:	9e 81       	ldd	r25, Y+6	; 0x06
    2124:	2a 81       	ldd	r18, Y+2	; 0x02
    2126:	fc 01       	movw	r30, r24
    2128:	20 83       	st	Z, r18
  return 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
}
    212c:	28 96       	adiw	r28, 0x08	; 8
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	de bf       	out	0x3e, r29	; 62
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	08 95       	ret

0000213e <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    213e:	0f 93       	push	r16
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	00 d0       	rcall	.+0      	; 0x2146 <u8g2_draw_hv_line_2dir+0x8>
    2146:	00 d0       	rcall	.+0      	; 0x2148 <u8g2_draw_hv_line_2dir+0xa>
    2148:	00 d0       	rcall	.+0      	; 0x214a <u8g2_draw_hv_line_2dir+0xc>
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	6b 83       	std	Y+3, r22	; 0x03
    2154:	4c 83       	std	Y+4, r20	; 0x04
    2156:	2d 83       	std	Y+5, r18	; 0x05
    2158:	0e 83       	std	Y+6, r16	; 0x06

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	dc 01       	movw	r26, r24
    2160:	99 96       	adiw	r26, 0x29	; 41
    2162:	8c 91       	ld	r24, X
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	b9 2f       	mov	r27, r25
    2168:	b8 1b       	sub	r27, r24
    216a:	8b 2f       	mov	r24, r27
    216c:	8c 83       	std	Y+4, r24	; 0x04
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	9a 81       	ldd	r25, Y+2	; 0x02
    2172:	dc 01       	movw	r26, r24
    2174:	5f 96       	adiw	r26, 0x1f	; 31
    2176:	ed 91       	ld	r30, X+
    2178:	fc 91       	ld	r31, X
    217a:	90 97       	sbiw	r26, 0x20	; 32
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	9a 81       	ldd	r25, Y+2	; 0x02
    2180:	0e 81       	ldd	r16, Y+6	; 0x06
    2182:	2d 81       	ldd	r18, Y+5	; 0x05
    2184:	4c 81       	ldd	r20, Y+4	; 0x04
    2186:	6b 81       	ldd	r22, Y+3	; 0x03
    2188:	09 95       	icall
}
    218a:	00 00       	nop
    218c:	26 96       	adiw	r28, 0x06	; 6
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	0f 91       	pop	r16
    219e:	08 95       	ret

000021a0 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    21a0:	0f 93       	push	r16
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <u8g2_DrawHVLine+0x8>
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <u8g2_DrawHVLine+0xa>
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <u8g2_DrawHVLine+0xc>
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	9a 83       	std	Y+2, r25	; 0x02
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	6b 83       	std	Y+3, r22	; 0x03
    21b6:	4c 83       	std	Y+4, r20	; 0x04
    21b8:	2d 83       	std	Y+5, r18	; 0x05
    21ba:	0e 83       	std	Y+6, r16	; 0x06
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	9a 81       	ldd	r25, Y+2	; 0x02
    21c0:	82 5a       	subi	r24, 0xA2	; 162
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	dc 01       	movw	r26, r24
    21c6:	8c 91       	ld	r24, X
    21c8:	88 23       	and	r24, r24
    21ca:	09 f4       	brne	.+2      	; 0x21ce <u8g2_DrawHVLine+0x2e>
    21cc:	89 c0       	rjmp	.+274    	; 0x22e0 <u8g2_DrawHVLine+0x140>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    21ce:	8d 81       	ldd	r24, Y+5	; 0x05
    21d0:	88 23       	and	r24, r24
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <u8g2_DrawHVLine+0x36>
    21d4:	85 c0       	rjmp	.+266    	; 0x22e0 <u8g2_DrawHVLine+0x140>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	82 30       	cpi	r24, 0x02	; 2
    21da:	c8 f0       	brcs	.+50     	; 0x220e <u8g2_DrawHVLine+0x6e>
      {
	if ( dir == 2 )
    21dc:	8e 81       	ldd	r24, Y+6	; 0x06
    21de:	82 30       	cpi	r24, 0x02	; 2
    21e0:	51 f4       	brne	.+20     	; 0x21f6 <u8g2_DrawHVLine+0x56>
	{
	  x -= len;
    21e2:	9b 81       	ldd	r25, Y+3	; 0x03
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	b9 2f       	mov	r27, r25
    21e8:	b8 1b       	sub	r27, r24
    21ea:	8b 2f       	mov	r24, r27
    21ec:	8b 83       	std	Y+3, r24	; 0x03
	  x++;
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	8f 5f       	subi	r24, 0xFF	; 255
    21f2:	8b 83       	std	Y+3, r24	; 0x03
    21f4:	0c c0       	rjmp	.+24     	; 0x220e <u8g2_DrawHVLine+0x6e>
	}
	else if ( dir == 3 )
    21f6:	8e 81       	ldd	r24, Y+6	; 0x06
    21f8:	83 30       	cpi	r24, 0x03	; 3
    21fa:	49 f4       	brne	.+18     	; 0x220e <u8g2_DrawHVLine+0x6e>
	{
	  y -= len;
    21fc:	9c 81       	ldd	r25, Y+4	; 0x04
    21fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2200:	e9 2f       	mov	r30, r25
    2202:	e8 1b       	sub	r30, r24
    2204:	8e 2f       	mov	r24, r30
    2206:	8c 83       	std	Y+4, r24	; 0x04
	  y++;
    2208:	8c 81       	ldd	r24, Y+4	; 0x04
    220a:	8f 5f       	subi	r24, 0xFF	; 255
    220c:	8c 83       	std	Y+4, r24	; 0x04
	}
      }
      dir &= 1;  
    220e:	8e 81       	ldd	r24, Y+6	; 0x06
    2210:	81 70       	andi	r24, 0x01	; 1
    2212:	8e 83       	std	Y+6, r24	; 0x06
      
      /* clip against the user window */
      if ( dir == 0 )
    2214:	8e 81       	ldd	r24, Y+6	; 0x06
    2216:	88 23       	and	r24, r24
    2218:	21 f5       	brne	.+72     	; 0x2262 <u8g2_DrawHVLine+0xc2>
      {
	if ( y < u8g2->user_y0 )
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	9a 81       	ldd	r25, Y+2	; 0x02
    221e:	dc 01       	movw	r26, r24
    2220:	d0 96       	adiw	r26, 0x30	; 48
    2222:	9c 91       	ld	r25, X
    2224:	8c 81       	ldd	r24, Y+4	; 0x04
    2226:	89 17       	cp	r24, r25
    2228:	08 f4       	brcc	.+2      	; 0x222c <u8g2_DrawHVLine+0x8c>
    222a:	51 c0       	rjmp	.+162    	; 0x22ce <u8g2_DrawHVLine+0x12e>
	  return;
	if ( y >= u8g2->user_y1 )
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	9a 81       	ldd	r25, Y+2	; 0x02
    2230:	fc 01       	movw	r30, r24
    2232:	91 a9       	ldd	r25, Z+49	; 0x31
    2234:	8c 81       	ldd	r24, Y+4	; 0x04
    2236:	89 17       	cp	r24, r25
    2238:	08 f0       	brcs	.+2      	; 0x223c <u8g2_DrawHVLine+0x9c>
    223a:	4b c0       	rjmp	.+150    	; 0x22d2 <u8g2_DrawHVLine+0x132>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	9a 81       	ldd	r25, Y+2	; 0x02
    2240:	dc 01       	movw	r26, r24
    2242:	9f 96       	adiw	r26, 0x2f	; 47
    2244:	2c 91       	ld	r18, X
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	9a 81       	ldd	r25, Y+2	; 0x02
    224a:	fc 01       	movw	r30, r24
    224c:	36 a5       	ldd	r19, Z+46	; 0x2e
    224e:	be 01       	movw	r22, r28
    2250:	6b 5f       	subi	r22, 0xFB	; 251
    2252:	7f 4f       	sbci	r23, 0xFF	; 255
    2254:	ce 01       	movw	r24, r28
    2256:	03 96       	adiw	r24, 0x03	; 3
    2258:	43 2f       	mov	r20, r19
    225a:	11 df       	rcall	.-478    	; 0x207e <u8g2_clip_intersection2>
    225c:	88 23       	and	r24, r24
    225e:	11 f5       	brne	.+68     	; 0x22a4 <u8g2_DrawHVLine+0x104>
	  return;
    2260:	3f c0       	rjmp	.+126    	; 0x22e0 <u8g2_DrawHVLine+0x140>
      }
      else
      {
	if ( x < u8g2->user_x0 )
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	9a 81       	ldd	r25, Y+2	; 0x02
    2266:	dc 01       	movw	r26, r24
    2268:	9e 96       	adiw	r26, 0x2e	; 46
    226a:	9c 91       	ld	r25, X
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	89 17       	cp	r24, r25
    2270:	90 f1       	brcs	.+100    	; 0x22d6 <u8g2_DrawHVLine+0x136>
	  return;
	if ( x >= u8g2->user_x1 )
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	9a 81       	ldd	r25, Y+2	; 0x02
    2276:	fc 01       	movw	r30, r24
    2278:	97 a5       	ldd	r25, Z+47	; 0x2f
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	89 17       	cp	r24, r25
    227e:	68 f5       	brcc	.+90     	; 0x22da <u8g2_DrawHVLine+0x13a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	dc 01       	movw	r26, r24
    2286:	d1 96       	adiw	r26, 0x31	; 49
    2288:	2c 91       	ld	r18, X
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	9a 81       	ldd	r25, Y+2	; 0x02
    228e:	fc 01       	movw	r30, r24
    2290:	30 a9       	ldd	r19, Z+48	; 0x30
    2292:	be 01       	movw	r22, r28
    2294:	6b 5f       	subi	r22, 0xFB	; 251
    2296:	7f 4f       	sbci	r23, 0xFF	; 255
    2298:	ce 01       	movw	r24, r28
    229a:	04 96       	adiw	r24, 0x04	; 4
    229c:	43 2f       	mov	r20, r19
    229e:	ef de       	rcall	.-546    	; 0x207e <u8g2_clip_intersection2>
    22a0:	88 23       	and	r24, r24
    22a2:	e9 f0       	breq	.+58     	; 0x22de <u8g2_DrawHVLine+0x13e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	9a 81       	ldd	r25, Y+2	; 0x02
    22a8:	dc 01       	movw	r26, r24
    22aa:	91 96       	adiw	r26, 0x21	; 33
    22ac:	8d 91       	ld	r24, X+
    22ae:	9c 91       	ld	r25, X
    22b0:	92 97       	sbiw	r26, 0x22	; 34
    22b2:	dc 01       	movw	r26, r24
    22b4:	14 96       	adiw	r26, 0x04	; 4
    22b6:	ed 91       	ld	r30, X+
    22b8:	fc 91       	ld	r31, X
    22ba:	15 97       	sbiw	r26, 0x05	; 5
    22bc:	2d 81       	ldd	r18, Y+5	; 0x05
    22be:	4c 81       	ldd	r20, Y+4	; 0x04
    22c0:	3b 81       	ldd	r19, Y+3	; 0x03
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	9a 81       	ldd	r25, Y+2	; 0x02
    22c6:	0e 81       	ldd	r16, Y+6	; 0x06
    22c8:	63 2f       	mov	r22, r19
    22ca:	09 95       	icall
    22cc:	09 c0       	rjmp	.+18     	; 0x22e0 <u8g2_DrawHVLine+0x140>
      
      /* clip against the user window */
      if ( dir == 0 )
      {
	if ( y < u8g2->user_y0 )
	  return;
    22ce:	00 00       	nop
    22d0:	07 c0       	rjmp	.+14     	; 0x22e0 <u8g2_DrawHVLine+0x140>
	if ( y >= u8g2->user_y1 )
	  return;
    22d2:	00 00       	nop
    22d4:	05 c0       	rjmp	.+10     	; 0x22e0 <u8g2_DrawHVLine+0x140>
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
	  return;
    22d6:	00 00       	nop
    22d8:	03 c0       	rjmp	.+6      	; 0x22e0 <u8g2_DrawHVLine+0x140>
	if ( x >= u8g2->user_x1 )
	  return;
    22da:	00 00       	nop
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <u8g2_DrawHVLine+0x140>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
    22de:	00 00       	nop
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    }
}
    22e0:	26 96       	adiw	r28, 0x06	; 6
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	0f 91       	pop	r16
    22f2:	08 95       	ret

000022f4 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <u8g2_is_intersection_decision_tree+0x6>
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <u8g2_is_intersection_decision_tree+0x8>
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	6a 83       	std	Y+2, r22	; 0x02
    2304:	4b 83       	std	Y+3, r20	; 0x03
    2306:	2c 83       	std	Y+4, r18	; 0x04
  if ( v0 < a1 )		// v0 <= a1
    2308:	9b 81       	ldd	r25, Y+3	; 0x03
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	98 17       	cp	r25, r24
    230e:	70 f4       	brcc	.+28     	; 0x232c <u8g2_is_intersection_decision_tree+0x38>
  {
    if ( v1 > a0 )	// v1 >= a0
    2310:	9c 81       	ldd	r25, Y+4	; 0x04
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	89 17       	cp	r24, r25
    2316:	10 f4       	brcc	.+4      	; 0x231c <u8g2_is_intersection_decision_tree+0x28>
    {
      return 1;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	15 c0       	rjmp	.+42     	; 0x2346 <u8g2_is_intersection_decision_tree+0x52>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    231c:	9b 81       	ldd	r25, Y+3	; 0x03
    231e:	8c 81       	ldd	r24, Y+4	; 0x04
    2320:	89 17       	cp	r24, r25
    2322:	10 f4       	brcc	.+4      	; 0x2328 <u8g2_is_intersection_decision_tree+0x34>
      {
	return 1;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	0f c0       	rjmp	.+30     	; 0x2346 <u8g2_is_intersection_decision_tree+0x52>
      }
      else
      {
	return 0;
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	0d c0       	rjmp	.+26     	; 0x2346 <u8g2_is_intersection_decision_tree+0x52>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	89 17       	cp	r24, r25
    2332:	40 f4       	brcc	.+16     	; 0x2344 <u8g2_is_intersection_decision_tree+0x50>
    {
      if ( v0 > v1 )	// v0 > v1
    2334:	9b 81       	ldd	r25, Y+3	; 0x03
    2336:	8c 81       	ldd	r24, Y+4	; 0x04
    2338:	89 17       	cp	r24, r25
    233a:	10 f4       	brcc	.+4      	; 0x2340 <u8g2_is_intersection_decision_tree+0x4c>
      {
	return 1;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <u8g2_is_intersection_decision_tree+0x52>
      }
      else
      {
	return 0;
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <u8g2_is_intersection_decision_tree+0x52>
      }
    }
    else
    {
      return 0;
    2344:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
}
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	08 95       	ret

00002354 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    2354:	0f 93       	push	r16
    2356:	cf 93       	push	r28
    2358:	df 93       	push	r29
    235a:	00 d0       	rcall	.+0      	; 0x235c <u8g2_IsIntersection+0x8>
    235c:	00 d0       	rcall	.+0      	; 0x235e <u8g2_IsIntersection+0xa>
    235e:	00 d0       	rcall	.+0      	; 0x2360 <u8g2_IsIntersection+0xc>
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	9a 83       	std	Y+2, r25	; 0x02
    2366:	89 83       	std	Y+1, r24	; 0x01
    2368:	6b 83       	std	Y+3, r22	; 0x03
    236a:	4c 83       	std	Y+4, r20	; 0x04
    236c:	2d 83       	std	Y+5, r18	; 0x05
    236e:	0e 83       	std	Y+6, r16	; 0x06
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	9a 81       	ldd	r25, Y+2	; 0x02
    2374:	fc 01       	movw	r30, r24
    2376:	31 a9       	ldd	r19, Z+49	; 0x31
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	9a 81       	ldd	r25, Y+2	; 0x02
    237c:	fc 01       	movw	r30, r24
    237e:	80 a9       	ldd	r24, Z+48	; 0x30
    2380:	2e 81       	ldd	r18, Y+6	; 0x06
    2382:	4c 81       	ldd	r20, Y+4	; 0x04
    2384:	63 2f       	mov	r22, r19
    2386:	b6 df       	rcall	.-148    	; 0x22f4 <u8g2_is_intersection_decision_tree>
    2388:	88 23       	and	r24, r24
    238a:	11 f4       	brne	.+4      	; 0x2390 <u8g2_IsIntersection+0x3c>
    return 0; 
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	0c c0       	rjmp	.+24     	; 0x23a8 <u8g2_IsIntersection+0x54>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	9a 81       	ldd	r25, Y+2	; 0x02
    2394:	fc 01       	movw	r30, r24
    2396:	37 a5       	ldd	r19, Z+47	; 0x2f
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	9a 81       	ldd	r25, Y+2	; 0x02
    239c:	fc 01       	movw	r30, r24
    239e:	86 a5       	ldd	r24, Z+46	; 0x2e
    23a0:	2d 81       	ldd	r18, Y+5	; 0x05
    23a2:	4b 81       	ldd	r20, Y+3	; 0x03
    23a4:	63 2f       	mov	r22, r19
    23a6:	a6 df       	rcall	.-180    	; 0x22f4 <u8g2_is_intersection_decision_tree>
}
    23a8:	26 96       	adiw	r28, 0x06	; 6
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	0f 91       	pop	r16
    23ba:	08 95       	ret

000023bc <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    23bc:	0f 93       	push	r16
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	2e 97       	sbiw	r28, 0x0e	; 14
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	f8 94       	cli
    23cc:	de bf       	out	0x3e, r29	; 62
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	cd bf       	out	0x3d, r28	; 61
    23d2:	9a 87       	std	Y+10, r25	; 0x0a
    23d4:	89 87       	std	Y+9, r24	; 0x09
    23d6:	6b 87       	std	Y+11, r22	; 0x0b
    23d8:	4c 87       	std	Y+12, r20	; 0x0c
    23da:	2d 87       	std	Y+13, r18	; 0x0d
    23dc:	0e 87       	std	Y+14, r16	; 0x0e
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
    23de:	8c 85       	ldd	r24, Y+12	; 0x0c
    23e0:	8b 83       	std	Y+3, r24	; 0x03
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	87 70       	andi	r24, 0x07	; 7
    23e6:	8b 83       	std	Y+3, r24	; 0x03
  mask = 1;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	8e 83       	std	Y+6, r24	; 0x06
  mask <<= bit_pos;
    23ec:	8e 81       	ldd	r24, Y+6	; 0x06
    23ee:	88 2f       	mov	r24, r24
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	2b 81       	ldd	r18, Y+3	; 0x03
    23f4:	22 2f       	mov	r18, r18
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <u8g2_ll_hvline_vertical_top_lsb+0x42>
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	2a 95       	dec	r18
    2400:	e2 f7       	brpl	.-8      	; 0x23fa <u8g2_ll_hvline_vertical_top_lsb+0x3e>
    2402:	8e 83       	std	Y+6, r24	; 0x06

  or_mask = 0;
    2404:	1c 82       	std	Y+4, r1	; 0x04
  xor_mask = 0;
    2406:	1d 82       	std	Y+5, r1	; 0x05
  if ( u8g2->draw_color <= 1 )
    2408:	89 85       	ldd	r24, Y+9	; 0x09
    240a:	9a 85       	ldd	r25, Y+10	; 0x0a
    240c:	8c 59       	subi	r24, 0x9C	; 156
    240e:	9f 4f       	sbci	r25, 0xFF	; 255
    2410:	fc 01       	movw	r30, r24
    2412:	80 81       	ld	r24, Z
    2414:	82 30       	cpi	r24, 0x02	; 2
    2416:	10 f4       	brcc	.+4      	; 0x241c <u8g2_ll_hvline_vertical_top_lsb+0x60>
    or_mask  = mask;
    2418:	8e 81       	ldd	r24, Y+6	; 0x06
    241a:	8c 83       	std	Y+4, r24	; 0x04
  if ( u8g2->draw_color != 1 )
    241c:	89 85       	ldd	r24, Y+9	; 0x09
    241e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2420:	8c 59       	subi	r24, 0x9C	; 156
    2422:	9f 4f       	sbci	r25, 0xFF	; 255
    2424:	fc 01       	movw	r30, r24
    2426:	80 81       	ld	r24, Z
    2428:	81 30       	cpi	r24, 0x01	; 1
    242a:	11 f0       	breq	.+4      	; 0x2430 <u8g2_ll_hvline_vertical_top_lsb+0x74>
    xor_mask = mask;
    242c:	8e 81       	ldd	r24, Y+6	; 0x06
    242e:	8d 83       	std	Y+5, r24	; 0x05


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
    2430:	8c 85       	ldd	r24, Y+12	; 0x0c
    2432:	88 2f       	mov	r24, r24
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	98 87       	std	Y+8, r25	; 0x08
    2438:	8f 83       	std	Y+7, r24	; 0x07
  offset &= ~7;
    243a:	8f 81       	ldd	r24, Y+7	; 0x07
    243c:	98 85       	ldd	r25, Y+8	; 0x08
    243e:	88 7f       	andi	r24, 0xF8	; 248
    2440:	98 87       	std	Y+8, r25	; 0x08
    2442:	8f 83       	std	Y+7, r24	; 0x07
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    2444:	89 85       	ldd	r24, Y+9	; 0x09
    2446:	9a 85       	ldd	r25, Y+10	; 0x0a
    2448:	fc 01       	movw	r30, r24
    244a:	80 81       	ld	r24, Z
    244c:	91 81       	ldd	r25, Z+1	; 0x01
    244e:	fc 01       	movw	r30, r24
    2450:	80 89       	ldd	r24, Z+16	; 0x10
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	4f 81       	ldd	r20, Y+7	; 0x07
    2458:	58 85       	ldd	r21, Y+8	; 0x08
    245a:	42 9f       	mul	r20, r18
    245c:	c0 01       	movw	r24, r0
    245e:	43 9f       	mul	r20, r19
    2460:	90 0d       	add	r25, r0
    2462:	52 9f       	mul	r21, r18
    2464:	90 0d       	add	r25, r0
    2466:	11 24       	eor	r1, r1
    2468:	98 87       	std	Y+8, r25	; 0x08
    246a:	8f 83       	std	Y+7, r24	; 0x07
  ptr = u8g2->tile_buf_ptr;
    246c:	89 85       	ldd	r24, Y+9	; 0x09
    246e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2470:	fc 01       	movw	r30, r24
    2472:	83 a1       	ldd	r24, Z+35	; 0x23
    2474:	94 a1       	ldd	r25, Z+36	; 0x24
    2476:	9a 83       	std	Y+2, r25	; 0x02
    2478:	89 83       	std	Y+1, r24	; 0x01
  ptr += offset;
    247a:	29 81       	ldd	r18, Y+1	; 0x01
    247c:	3a 81       	ldd	r19, Y+2	; 0x02
    247e:	8f 81       	ldd	r24, Y+7	; 0x07
    2480:	98 85       	ldd	r25, Y+8	; 0x08
    2482:	82 0f       	add	r24, r18
    2484:	93 1f       	adc	r25, r19
    2486:	9a 83       	std	Y+2, r25	; 0x02
    2488:	89 83       	std	Y+1, r24	; 0x01
  ptr += x;
    248a:	8b 85       	ldd	r24, Y+11	; 0x0b
    248c:	88 2f       	mov	r24, r24
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	29 81       	ldd	r18, Y+1	; 0x01
    2492:	3a 81       	ldd	r19, Y+2	; 0x02
    2494:	82 0f       	add	r24, r18
    2496:	93 1f       	adc	r25, r19
    2498:	9a 83       	std	Y+2, r25	; 0x02
    249a:	89 83       	std	Y+1, r24	; 0x01
  
  if ( dir == 0 )
    249c:	8e 85       	ldd	r24, Y+14	; 0x0e
    249e:	88 23       	and	r24, r24
    24a0:	11 f5       	brne	.+68     	; 0x24e6 <u8g2_ll_hvline_vertical_top_lsb+0x12a>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	fc 01       	movw	r30, r24
    24a8:	90 81       	ld	r25, Z
    24aa:	8c 81       	ldd	r24, Y+4	; 0x04
    24ac:	29 2f       	mov	r18, r25
    24ae:	28 2b       	or	r18, r24
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	fc 01       	movw	r30, r24
    24b6:	20 83       	st	Z, r18
	*ptr ^= xor_mask;
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	9a 81       	ldd	r25, Y+2	; 0x02
    24bc:	fc 01       	movw	r30, r24
    24be:	90 81       	ld	r25, Z
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	29 2f       	mov	r18, r25
    24c4:	28 27       	eor	r18, r24
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ca:	fc 01       	movw	r30, r24
    24cc:	20 83       	st	Z, r18
	ptr++;
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	9a 81       	ldd	r25, Y+2	; 0x02
    24d2:	01 96       	adiw	r24, 0x01	; 1
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
	len--;
    24d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24da:	81 50       	subi	r24, 0x01	; 1
    24dc:	8d 87       	std	Y+13, r24	; 0x0d
      } while( len != 0 );
    24de:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e0:	88 23       	and	r24, r24
    24e2:	f9 f6       	brne	.-66     	; 0x24a2 <u8g2_ll_hvline_vertical_top_lsb+0xe6>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
    24e4:	4d c0       	rjmp	.+154    	; 0x2580 <u8g2_ll_hvline_vertical_top_lsb+0x1c4>
    do
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ea:	fc 01       	movw	r30, r24
    24ec:	90 81       	ld	r25, Z
    24ee:	8c 81       	ldd	r24, Y+4	; 0x04
    24f0:	29 2f       	mov	r18, r25
    24f2:	28 2b       	or	r18, r24
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	9a 81       	ldd	r25, Y+2	; 0x02
    24f8:	fc 01       	movw	r30, r24
    24fa:	20 83       	st	Z, r18
      *ptr ^= xor_mask;
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2500:	fc 01       	movw	r30, r24
    2502:	90 81       	ld	r25, Z
    2504:	8d 81       	ldd	r24, Y+5	; 0x05
    2506:	29 2f       	mov	r18, r25
    2508:	28 27       	eor	r18, r24
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	9a 81       	ldd	r25, Y+2	; 0x02
    250e:	fc 01       	movw	r30, r24
    2510:	20 83       	st	Z, r18
      
      bit_pos++;
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	8f 5f       	subi	r24, 0xFF	; 255
    2516:	8b 83       	std	Y+3, r24	; 0x03
      bit_pos &= 7;
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	87 70       	andi	r24, 0x07	; 7
    251c:	8b 83       	std	Y+3, r24	; 0x03

      len--;
    251e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2520:	81 50       	subi	r24, 0x01	; 1
    2522:	8d 87       	std	Y+13, r24	; 0x0d

      if ( bit_pos == 0 )
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	88 23       	and	r24, r24
    2528:	09 f5       	brne	.+66     	; 0x256c <u8g2_ll_hvline_vertical_top_lsb+0x1b0>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    252a:	89 85       	ldd	r24, Y+9	; 0x09
    252c:	9a 85       	ldd	r25, Y+10	; 0x0a
    252e:	fc 01       	movw	r30, r24
    2530:	87 a1       	ldd	r24, Z+39	; 0x27
    2532:	88 2f       	mov	r24, r24
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	29 81       	ldd	r18, Y+1	; 0x01
    2538:	3a 81       	ldd	r19, Y+2	; 0x02
    253a:	82 0f       	add	r24, r18
    253c:	93 1f       	adc	r25, r19
    253e:	9a 83       	std	Y+2, r25	; 0x02
    2540:	89 83       	std	Y+1, r24	; 0x01
		
	if ( u8g2->draw_color <= 1 )
    2542:	89 85       	ldd	r24, Y+9	; 0x09
    2544:	9a 85       	ldd	r25, Y+10	; 0x0a
    2546:	8c 59       	subi	r24, 0x9C	; 156
    2548:	9f 4f       	sbci	r25, 0xFF	; 255
    254a:	fc 01       	movw	r30, r24
    254c:	80 81       	ld	r24, Z
    254e:	82 30       	cpi	r24, 0x02	; 2
    2550:	10 f4       	brcc	.+4      	; 0x2556 <u8g2_ll_hvline_vertical_top_lsb+0x19a>
	  or_mask  = 1;
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	8c 83       	std	Y+4, r24	; 0x04
	if ( u8g2->draw_color != 1 )
    2556:	89 85       	ldd	r24, Y+9	; 0x09
    2558:	9a 85       	ldd	r25, Y+10	; 0x0a
    255a:	8c 59       	subi	r24, 0x9C	; 156
    255c:	9f 4f       	sbci	r25, 0xFF	; 255
    255e:	fc 01       	movw	r30, r24
    2560:	80 81       	ld	r24, Z
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	49 f0       	breq	.+18     	; 0x2578 <u8g2_ll_hvline_vertical_top_lsb+0x1bc>
	  xor_mask = 1;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	8d 83       	std	Y+5, r24	; 0x05
    256a:	06 c0       	rjmp	.+12     	; 0x2578 <u8g2_ll_hvline_vertical_top_lsb+0x1bc>
      }
      else
      {
	or_mask <<= 1;
    256c:	8c 81       	ldd	r24, Y+4	; 0x04
    256e:	88 0f       	add	r24, r24
    2570:	8c 83       	std	Y+4, r24	; 0x04
	xor_mask <<= 1;
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	88 0f       	add	r24, r24
    2576:	8d 83       	std	Y+5, r24	; 0x05
      }
    } while( len != 0 );
    2578:	8d 85       	ldd	r24, Y+13	; 0x0d
    257a:	88 23       	and	r24, r24
    257c:	09 f0       	breq	.+2      	; 0x2580 <u8g2_ll_hvline_vertical_top_lsb+0x1c4>
    257e:	b3 cf       	rjmp	.-154    	; 0x24e6 <u8g2_ll_hvline_vertical_top_lsb+0x12a>
  }
}
    2580:	00 00       	nop
    2582:	2e 96       	adiw	r28, 0x0e	; 14
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	0f 91       	pop	r16
    2594:	08 95       	ret

00002596 <u8g2_SetMaxClipWindow>:
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (pixel_width) */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	00 d0       	rcall	.+0      	; 0x259c <u8g2_SetMaxClipWindow+0x6>
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
    25a0:	9a 83       	std	Y+2, r25	; 0x02
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	9a 81       	ldd	r25, Y+2	; 0x02
    25a8:	fc 01       	movw	r30, r24
    25aa:	12 aa       	std	Z+50, r1	; 0x32
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	9a 81       	ldd	r25, Y+2	; 0x02
    25b0:	fc 01       	movw	r30, r24
    25b2:	14 aa       	std	Z+52, r1	; 0x34
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	9a 81       	ldd	r25, Y+2	; 0x02
    25b8:	2f ef       	ldi	r18, 0xFF	; 255
    25ba:	fc 01       	movw	r30, r24
    25bc:	23 ab       	std	Z+51, r18	; 0x33
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	9a 81       	ldd	r25, Y+2	; 0x02
    25c2:	2f ef       	ldi	r18, 0xFF	; 255
    25c4:	fc 01       	movw	r30, r24
    25c6:	25 ab       	std	Z+53, r18	; 0x35
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	9a 81       	ldd	r25, Y+2	; 0x02
    25cc:	fc 01       	movw	r30, r24
    25ce:	81 a1       	ldd	r24, Z+33	; 0x21
    25d0:	92 a1       	ldd	r25, Z+34	; 0x22
    25d2:	fc 01       	movw	r30, r24
    25d4:	22 81       	ldd	r18, Z+2	; 0x02
    25d6:	33 81       	ldd	r19, Z+3	; 0x03
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	f9 01       	movw	r30, r18
    25de:	09 95       	icall
    25e0:	00 00       	nop
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	08 95       	ret

000025ec <u8g2_SetupBuffer>:
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	29 97       	sbiw	r28, 0x09	; 9
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	cd bf       	out	0x3d, r28	; 61
    2604:	9a 83       	std	Y+2, r25	; 0x02
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	7c 83       	std	Y+4, r23	; 0x04
    260a:	6b 83       	std	Y+3, r22	; 0x03
    260c:	4d 83       	std	Y+5, r20	; 0x05
    260e:	3f 83       	std	Y+7, r19	; 0x07
    2610:	2e 83       	std	Y+6, r18	; 0x06
    2612:	19 87       	std	Y+9, r17	; 0x09
    2614:	08 87       	std	Y+8, r16	; 0x08
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	fc 01       	movw	r30, r24
    261c:	17 aa       	std	Z+55, r1	; 0x37
    261e:	16 aa       	std	Z+54, r1	; 0x36
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	2e 81       	ldd	r18, Y+6	; 0x06
    2626:	3f 81       	ldd	r19, Y+7	; 0x07
    2628:	fc 01       	movw	r30, r24
    262a:	30 a3       	std	Z+32, r19	; 0x20
    262c:	27 8f       	std	Z+31, r18	; 0x1f
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	9a 81       	ldd	r25, Y+2	; 0x02
    2632:	2b 81       	ldd	r18, Y+3	; 0x03
    2634:	3c 81       	ldd	r19, Y+4	; 0x04
    2636:	fc 01       	movw	r30, r24
    2638:	34 a3       	std	Z+36, r19	; 0x24
    263a:	23 a3       	std	Z+35, r18	; 0x23
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	9a 81       	ldd	r25, Y+2	; 0x02
    2640:	2d 81       	ldd	r18, Y+5	; 0x05
    2642:	fc 01       	movw	r30, r24
    2644:	25 a3       	std	Z+37, r18	; 0x25
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	9a 81       	ldd	r25, Y+2	; 0x02
    264a:	fc 01       	movw	r30, r24
    264c:	16 a2       	std	Z+38, r1	; 0x26
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	9a 81       	ldd	r25, Y+2	; 0x02
    2652:	8d 5b       	subi	r24, 0xBD	; 189
    2654:	9f 4f       	sbci	r25, 0xFF	; 255
    2656:	fc 01       	movw	r30, r24
    2658:	10 82       	st	Z, r1
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	8d 59       	subi	r24, 0x9D	; 157
    2660:	9f 4f       	sbci	r25, 0xFF	; 255
    2662:	fc 01       	movw	r30, r24
    2664:	10 82       	st	Z, r1
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	9a 81       	ldd	r25, Y+2	; 0x02
    266a:	8c 59       	subi	r24, 0x9C	; 156
    266c:	9f 4f       	sbci	r25, 0xFF	; 255
    266e:	21 e0       	ldi	r18, 0x01	; 1
    2670:	fc 01       	movw	r30, r24
    2672:	20 83       	st	Z, r18
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	9a 81       	ldd	r25, Y+2	; 0x02
    2678:	8b 59       	subi	r24, 0x9B	; 155
    267a:	9f 4f       	sbci	r25, 0xFF	; 255
    267c:	21 e0       	ldi	r18, 0x01	; 1
    267e:	fc 01       	movw	r30, r24
    2680:	20 83       	st	Z, r18
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	9a 81       	ldd	r25, Y+2	; 0x02
    2686:	28 85       	ldd	r18, Y+8	; 0x08
    2688:	39 85       	ldd	r19, Y+9	; 0x09
    268a:	fc 01       	movw	r30, r24
    268c:	32 a3       	std	Z+34, r19	; 0x22
    268e:	21 a3       	std	Z+33, r18	; 0x21
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	fc 01       	movw	r30, r24
    2696:	81 a1       	ldd	r24, Z+33	; 0x21
    2698:	92 a1       	ldd	r25, Z+34	; 0x22
    269a:	fc 01       	movw	r30, r24
    269c:	20 81       	ld	r18, Z
    269e:	31 81       	ldd	r19, Z+1	; 0x01
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	9a 81       	ldd	r25, Y+2	; 0x02
    26a4:	f9 01       	movw	r30, r18
    26a6:	09 95       	icall
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	74 df       	rcall	.-280    	; 0x2596 <u8g2_SetMaxClipWindow>
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	a3 dc       	rcall	.-1722   	; 0x1ffa <u8g2_SetFontPosBaseline>
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	8a 5b       	subi	r24, 0xBA	; 186
    26ba:	9f 4f       	sbci	r25, 0xFF	; 255
    26bc:	fc 01       	movw	r30, r24
    26be:	10 82       	st	Z, r1
    26c0:	00 00       	nop
    26c2:	29 96       	adiw	r28, 0x09	; 9
    26c4:	0f b6       	in	r0, 0x3f	; 63
    26c6:	f8 94       	cli
    26c8:	de bf       	out	0x3e, r29	; 62
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	cd bf       	out	0x3d, r28	; 61
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	1f 91       	pop	r17
    26d4:	0f 91       	pop	r16
    26d6:	08 95       	ret

000026d8 <u8g2_update_dimension_common>:
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	00 d0       	rcall	.+0      	; 0x26de <u8g2_update_dimension_common+0x6>
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <u8g2_update_dimension_common+0x8>
    26e0:	1f 92       	push	r1
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	9d 83       	std	Y+5, r25	; 0x05
    26e8:	8c 83       	std	Y+4, r24	; 0x04
    26ea:	8c 81       	ldd	r24, Y+4	; 0x04
    26ec:	9d 81       	ldd	r25, Y+5	; 0x05
    26ee:	fc 01       	movw	r30, r24
    26f0:	80 81       	ld	r24, Z
    26f2:	91 81       	ldd	r25, Z+1	; 0x01
    26f4:	9b 83       	std	Y+3, r25	; 0x03
    26f6:	8a 83       	std	Y+2, r24	; 0x02
    26f8:	8c 81       	ldd	r24, Y+4	; 0x04
    26fa:	9d 81       	ldd	r25, Y+5	; 0x05
    26fc:	fc 01       	movw	r30, r24
    26fe:	85 a1       	ldd	r24, Z+37	; 0x25
    2700:	89 83       	std	Y+1, r24	; 0x01
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	88 0f       	add	r24, r24
    2706:	88 0f       	add	r24, r24
    2708:	88 0f       	add	r24, r24
    270a:	89 83       	std	Y+1, r24	; 0x01
    270c:	8c 81       	ldd	r24, Y+4	; 0x04
    270e:	9d 81       	ldd	r25, Y+5	; 0x05
    2710:	29 81       	ldd	r18, Y+1	; 0x01
    2712:	fc 01       	movw	r30, r24
    2714:	20 a7       	std	Z+40, r18	; 0x28
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	9b 81       	ldd	r25, Y+3	; 0x03
    271a:	fc 01       	movw	r30, r24
    271c:	80 89       	ldd	r24, Z+16	; 0x10
    271e:	89 83       	std	Y+1, r24	; 0x01
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	80 32       	cpi	r24, 0x20	; 32
    2724:	10 f0       	brcs	.+4      	; 0x272a <u8g2_update_dimension_common+0x52>
    2726:	8f e1       	ldi	r24, 0x1F	; 31
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	88 0f       	add	r24, r24
    272e:	88 0f       	add	r24, r24
    2730:	88 0f       	add	r24, r24
    2732:	89 83       	std	Y+1, r24	; 0x01
    2734:	8c 81       	ldd	r24, Y+4	; 0x04
    2736:	9d 81       	ldd	r25, Y+5	; 0x05
    2738:	29 81       	ldd	r18, Y+1	; 0x01
    273a:	fc 01       	movw	r30, r24
    273c:	27 a3       	std	Z+39, r18	; 0x27
    273e:	8c 81       	ldd	r24, Y+4	; 0x04
    2740:	9d 81       	ldd	r25, Y+5	; 0x05
    2742:	fc 01       	movw	r30, r24
    2744:	86 a1       	ldd	r24, Z+38	; 0x26
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	88 0f       	add	r24, r24
    274c:	88 0f       	add	r24, r24
    274e:	88 0f       	add	r24, r24
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	8c 81       	ldd	r24, Y+4	; 0x04
    2754:	9d 81       	ldd	r25, Y+5	; 0x05
    2756:	29 81       	ldd	r18, Y+1	; 0x01
    2758:	fc 01       	movw	r30, r24
    275a:	21 a7       	std	Z+41, r18	; 0x29
    275c:	8c 81       	ldd	r24, Y+4	; 0x04
    275e:	9d 81       	ldd	r25, Y+5	; 0x05
    2760:	fc 01       	movw	r30, r24
    2762:	85 a1       	ldd	r24, Z+37	; 0x25
    2764:	89 83       	std	Y+1, r24	; 0x01
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	8c 81       	ldd	r24, Y+4	; 0x04
    276e:	9d 81       	ldd	r25, Y+5	; 0x05
    2770:	fc 01       	movw	r30, r24
    2772:	86 a1       	ldd	r24, Z+38	; 0x26
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	28 0f       	add	r18, r24
    277a:	39 1f       	adc	r19, r25
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	9b 81       	ldd	r25, Y+3	; 0x03
    2780:	fc 01       	movw	r30, r24
    2782:	81 89       	ldd	r24, Z+17	; 0x11
    2784:	88 2f       	mov	r24, r24
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	82 17       	cp	r24, r18
    278a:	93 07       	cpc	r25, r19
    278c:	64 f4       	brge	.+24     	; 0x27a6 <u8g2_update_dimension_common+0xce>
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	9b 81       	ldd	r25, Y+3	; 0x03
    2792:	fc 01       	movw	r30, r24
    2794:	21 89       	ldd	r18, Z+17	; 0x11
    2796:	8c 81       	ldd	r24, Y+4	; 0x04
    2798:	9d 81       	ldd	r25, Y+5	; 0x05
    279a:	fc 01       	movw	r30, r24
    279c:	86 a1       	ldd	r24, Z+38	; 0x26
    279e:	f2 2f       	mov	r31, r18
    27a0:	f8 1b       	sub	r31, r24
    27a2:	8f 2f       	mov	r24, r31
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	88 0f       	add	r24, r24
    27aa:	88 0f       	add	r24, r24
    27ac:	88 0f       	add	r24, r24
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	8c 81       	ldd	r24, Y+4	; 0x04
    27b2:	9d 81       	ldd	r25, Y+5	; 0x05
    27b4:	fc 01       	movw	r30, r24
    27b6:	21 a5       	ldd	r18, Z+41	; 0x29
    27b8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ba:	9d 81       	ldd	r25, Y+5	; 0x05
    27bc:	fc 01       	movw	r30, r24
    27be:	22 a7       	std	Z+42, r18	; 0x2a
    27c0:	8c 81       	ldd	r24, Y+4	; 0x04
    27c2:	9d 81       	ldd	r25, Y+5	; 0x05
    27c4:	fc 01       	movw	r30, r24
    27c6:	22 a5       	ldd	r18, Z+42	; 0x2a
    27c8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ca:	9d 81       	ldd	r25, Y+5	; 0x05
    27cc:	fc 01       	movw	r30, r24
    27ce:	23 a7       	std	Z+43, r18	; 0x2b
    27d0:	8c 81       	ldd	r24, Y+4	; 0x04
    27d2:	9d 81       	ldd	r25, Y+5	; 0x05
    27d4:	fc 01       	movw	r30, r24
    27d6:	93 a5       	ldd	r25, Z+43	; 0x2b
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	29 2f       	mov	r18, r25
    27dc:	28 0f       	add	r18, r24
    27de:	8c 81       	ldd	r24, Y+4	; 0x04
    27e0:	9d 81       	ldd	r25, Y+5	; 0x05
    27e2:	fc 01       	movw	r30, r24
    27e4:	23 a7       	std	Z+43, r18	; 0x2b
    27e6:	8c 81       	ldd	r24, Y+4	; 0x04
    27e8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ea:	20 ef       	ldi	r18, 0xF0	; 240
    27ec:	fc 01       	movw	r30, r24
    27ee:	24 a7       	std	Z+44, r18	; 0x2c
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	9b 81       	ldd	r25, Y+3	; 0x03
    27f4:	fc 01       	movw	r30, r24
    27f6:	84 89       	ldd	r24, Z+20	; 0x14
    27f8:	95 89       	ldd	r25, Z+21	; 0x15
    27fa:	81 3f       	cpi	r24, 0xF1	; 241
    27fc:	91 05       	cpc	r25, r1
    27fe:	50 f4       	brcc	.+20     	; 0x2814 <u8g2_update_dimension_common+0x13c>
    2800:	8a 81       	ldd	r24, Y+2	; 0x02
    2802:	9b 81       	ldd	r25, Y+3	; 0x03
    2804:	fc 01       	movw	r30, r24
    2806:	84 89       	ldd	r24, Z+20	; 0x14
    2808:	95 89       	ldd	r25, Z+21	; 0x15
    280a:	28 2f       	mov	r18, r24
    280c:	8c 81       	ldd	r24, Y+4	; 0x04
    280e:	9d 81       	ldd	r25, Y+5	; 0x05
    2810:	fc 01       	movw	r30, r24
    2812:	24 a7       	std	Z+44, r18	; 0x2c
    2814:	8a 81       	ldd	r24, Y+2	; 0x02
    2816:	9b 81       	ldd	r25, Y+3	; 0x03
    2818:	fc 01       	movw	r30, r24
    281a:	86 89       	ldd	r24, Z+22	; 0x16
    281c:	97 89       	ldd	r25, Z+23	; 0x17
    281e:	28 2f       	mov	r18, r24
    2820:	8c 81       	ldd	r24, Y+4	; 0x04
    2822:	9d 81       	ldd	r25, Y+5	; 0x05
    2824:	fc 01       	movw	r30, r24
    2826:	25 a7       	std	Z+45, r18	; 0x2d
    2828:	00 00       	nop
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	df 91       	pop	r29
    2836:	cf 91       	pop	r28
    2838:	08 95       	ret

0000283a <u8g2_apply_clip_window>:
    283a:	0f 93       	push	r16
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	00 d0       	rcall	.+0      	; 0x2842 <u8g2_apply_clip_window+0x8>
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	9a 83       	std	Y+2, r25	; 0x02
    2848:	89 83       	std	Y+1, r24	; 0x01
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	9a 81       	ldd	r25, Y+2	; 0x02
    284e:	fc 01       	movw	r30, r24
    2850:	55 a9       	ldd	r21, Z+53	; 0x35
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	9a 81       	ldd	r25, Y+2	; 0x02
    2856:	fc 01       	movw	r30, r24
    2858:	23 a9       	ldd	r18, Z+51	; 0x33
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	9a 81       	ldd	r25, Y+2	; 0x02
    285e:	fc 01       	movw	r30, r24
    2860:	44 a9       	ldd	r20, Z+52	; 0x34
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	9a 81       	ldd	r25, Y+2	; 0x02
    2866:	fc 01       	movw	r30, r24
    2868:	32 a9       	ldd	r19, Z+50	; 0x32
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	9a 81       	ldd	r25, Y+2	; 0x02
    286e:	05 2f       	mov	r16, r21
    2870:	63 2f       	mov	r22, r19
    2872:	70 dd       	rcall	.-1312   	; 0x2354 <u8g2_IsIntersection>
    2874:	88 23       	and	r24, r24
    2876:	39 f4       	brne	.+14     	; 0x2886 <u8g2_apply_clip_window+0x4c>
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	9a 81       	ldd	r25, Y+2	; 0x02
    287c:	82 5a       	subi	r24, 0xA2	; 162
    287e:	9f 4f       	sbci	r25, 0xFF	; 255
    2880:	fc 01       	movw	r30, r24
    2882:	10 82       	st	Z, r1
    2884:	4f c0       	rjmp	.+158    	; 0x2924 <u8g2_apply_clip_window+0xea>
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	9a 81       	ldd	r25, Y+2	; 0x02
    288a:	82 5a       	subi	r24, 0xA2	; 162
    288c:	9f 4f       	sbci	r25, 0xFF	; 255
    288e:	21 e0       	ldi	r18, 0x01	; 1
    2890:	fc 01       	movw	r30, r24
    2892:	20 83       	st	Z, r18
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	fc 01       	movw	r30, r24
    289a:	26 a5       	ldd	r18, Z+46	; 0x2e
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	fc 01       	movw	r30, r24
    28a2:	82 a9       	ldd	r24, Z+50	; 0x32
    28a4:	28 17       	cp	r18, r24
    28a6:	40 f4       	brcc	.+16     	; 0x28b8 <u8g2_apply_clip_window+0x7e>
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	9a 81       	ldd	r25, Y+2	; 0x02
    28ac:	fc 01       	movw	r30, r24
    28ae:	22 a9       	ldd	r18, Z+50	; 0x32
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	9a 81       	ldd	r25, Y+2	; 0x02
    28b4:	fc 01       	movw	r30, r24
    28b6:	26 a7       	std	Z+46, r18	; 0x2e
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	fc 01       	movw	r30, r24
    28be:	27 a5       	ldd	r18, Z+47	; 0x2f
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	9a 81       	ldd	r25, Y+2	; 0x02
    28c4:	fc 01       	movw	r30, r24
    28c6:	83 a9       	ldd	r24, Z+51	; 0x33
    28c8:	82 17       	cp	r24, r18
    28ca:	40 f4       	brcc	.+16     	; 0x28dc <u8g2_apply_clip_window+0xa2>
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	9a 81       	ldd	r25, Y+2	; 0x02
    28d0:	fc 01       	movw	r30, r24
    28d2:	23 a9       	ldd	r18, Z+51	; 0x33
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02
    28d8:	fc 01       	movw	r30, r24
    28da:	27 a7       	std	Z+47, r18	; 0x2f
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	9a 81       	ldd	r25, Y+2	; 0x02
    28e0:	fc 01       	movw	r30, r24
    28e2:	20 a9       	ldd	r18, Z+48	; 0x30
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	fc 01       	movw	r30, r24
    28ea:	84 a9       	ldd	r24, Z+52	; 0x34
    28ec:	28 17       	cp	r18, r24
    28ee:	40 f4       	brcc	.+16     	; 0x2900 <u8g2_apply_clip_window+0xc6>
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	9a 81       	ldd	r25, Y+2	; 0x02
    28f4:	fc 01       	movw	r30, r24
    28f6:	24 a9       	ldd	r18, Z+52	; 0x34
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	9a 81       	ldd	r25, Y+2	; 0x02
    28fc:	fc 01       	movw	r30, r24
    28fe:	20 ab       	std	Z+48, r18	; 0x30
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	fc 01       	movw	r30, r24
    2906:	21 a9       	ldd	r18, Z+49	; 0x31
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	9a 81       	ldd	r25, Y+2	; 0x02
    290c:	fc 01       	movw	r30, r24
    290e:	85 a9       	ldd	r24, Z+53	; 0x35
    2910:	82 17       	cp	r24, r18
    2912:	40 f4       	brcc	.+16     	; 0x2924 <u8g2_apply_clip_window+0xea>
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	9a 81       	ldd	r25, Y+2	; 0x02
    2918:	fc 01       	movw	r30, r24
    291a:	25 a9       	ldd	r18, Z+53	; 0x35
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	9a 81       	ldd	r25, Y+2	; 0x02
    2920:	fc 01       	movw	r30, r24
    2922:	21 ab       	std	Z+49, r18	; 0x31
    2924:	00 00       	nop
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	0f 91       	pop	r16
    2930:	08 95       	ret

00002932 <u8g2_update_dimension_r0>:
    2932:	cf 93       	push	r28
    2934:	df 93       	push	r29
    2936:	00 d0       	rcall	.+0      	; 0x2938 <u8g2_update_dimension_r0+0x6>
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	9a 83       	std	Y+2, r25	; 0x02
    293e:	89 83       	std	Y+1, r24	; 0x01
    2940:	89 81       	ldd	r24, Y+1	; 0x01
    2942:	9a 81       	ldd	r25, Y+2	; 0x02
    2944:	c9 de       	rcall	.-622    	; 0x26d8 <u8g2_update_dimension_common>
    2946:	00 00       	nop
    2948:	0f 90       	pop	r0
    294a:	0f 90       	pop	r0
    294c:	df 91       	pop	r29
    294e:	cf 91       	pop	r28
    2950:	08 95       	ret

00002952 <u8g2_update_page_win_r0>:
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	00 d0       	rcall	.+0      	; 0x2958 <u8g2_update_page_win_r0+0x6>
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	9a 83       	std	Y+2, r25	; 0x02
    295e:	89 83       	std	Y+1, r24	; 0x01
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	9a 81       	ldd	r25, Y+2	; 0x02
    2964:	fc 01       	movw	r30, r24
    2966:	16 a6       	std	Z+46, r1	; 0x2e
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	9a 81       	ldd	r25, Y+2	; 0x02
    296c:	fc 01       	movw	r30, r24
    296e:	24 a5       	ldd	r18, Z+44	; 0x2c
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	9a 81       	ldd	r25, Y+2	; 0x02
    2974:	fc 01       	movw	r30, r24
    2976:	27 a7       	std	Z+47, r18	; 0x2f
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	9a 81       	ldd	r25, Y+2	; 0x02
    297c:	fc 01       	movw	r30, r24
    297e:	22 a5       	ldd	r18, Z+42	; 0x2a
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	9a 81       	ldd	r25, Y+2	; 0x02
    2984:	fc 01       	movw	r30, r24
    2986:	20 ab       	std	Z+48, r18	; 0x30
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	9a 81       	ldd	r25, Y+2	; 0x02
    298c:	fc 01       	movw	r30, r24
    298e:	23 a5       	ldd	r18, Z+43	; 0x2b
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	9a 81       	ldd	r25, Y+2	; 0x02
    2994:	fc 01       	movw	r30, r24
    2996:	21 ab       	std	Z+49, r18	; 0x31
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	4e df       	rcall	.-356    	; 0x283a <u8g2_apply_clip_window>
    299e:	00 00       	nop
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	df 91       	pop	r29
    29a6:	cf 91       	pop	r28
    29a8:	08 95       	ret

000029aa <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    29aa:	0f 93       	push	r16
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	00 d0       	rcall	.+0      	; 0x29b2 <u8g2_draw_l90_r0+0x8>
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <u8g2_draw_l90_r0+0xa>
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <u8g2_draw_l90_r0+0xc>
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	89 83       	std	Y+1, r24	; 0x01
    29be:	6b 83       	std	Y+3, r22	; 0x03
    29c0:	4c 83       	std	Y+4, r20	; 0x04
    29c2:	2d 83       	std	Y+5, r18	; 0x05
    29c4:	0e 83       	std	Y+6, r16	; 0x06
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ca:	0e 81       	ldd	r16, Y+6	; 0x06
    29cc:	2d 81       	ldd	r18, Y+5	; 0x05
    29ce:	4c 81       	ldd	r20, Y+4	; 0x04
    29d0:	6b 81       	ldd	r22, Y+3	; 0x03
    29d2:	b5 db       	rcall	.-2198   	; 0x213e <u8g2_draw_hv_line_2dir>
}
    29d4:	00 00       	nop
    29d6:	26 96       	adiw	r28, 0x06	; 6
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	0f 91       	pop	r16
    29e8:	08 95       	ret

000029ea <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <u8x8_utf8_init+0x6>
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	9a 81       	ldd	r25, Y+2	; 0x02
    29fc:	fc 01       	movw	r30, r24
    29fe:	11 8e       	std	Z+25, r1	; 0x19
}
    2a00:	00 00       	nop
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	df 91       	pop	r29
    2a08:	cf 91       	pop	r28
    2a0a:	08 95       	ret

00002a0c <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
    2a0c:	cf 93       	push	r28
    2a0e:	df 93       	push	r29
    2a10:	00 d0       	rcall	.+0      	; 0x2a12 <u8x8_ascii_next+0x6>
    2a12:	1f 92       	push	r1
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	6b 83       	std	Y+3, r22	; 0x03
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	88 23       	and	r24, r24
    2a22:	19 f0       	breq	.+6      	; 0x2a2a <u8x8_ascii_next+0x1e>
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	8a 30       	cpi	r24, 0x0A	; 10
    2a28:	19 f4       	brne	.+6      	; 0x2a30 <u8x8_ascii_next+0x24>
    return 0x0ffff;	/* end of string detected*/
    2a2a:	8f ef       	ldi	r24, 0xFF	; 255
    2a2c:	9f ef       	ldi	r25, 0xFF	; 255
    2a2e:	03 c0       	rjmp	.+6      	; 0x2a36 <u8x8_ascii_next+0x2a>
  return b;
    2a30:	8b 81       	ldd	r24, Y+3	; 0x03
    2a32:	88 2f       	mov	r24, r24
    2a34:	90 e0       	ldi	r25, 0x00	; 0
}
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	df 91       	pop	r29
    2a3e:	cf 91       	pop	r28
    2a40:	08 95       	ret

00002a42 <u8x8_byte_SendBytes>:
      break;
    default:
      return 0;
  }
  return 1;
}
    2a42:	cf 93       	push	r28
    2a44:	df 93       	push	r29
    2a46:	00 d0       	rcall	.+0      	; 0x2a48 <u8x8_byte_SendBytes+0x6>
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <u8x8_byte_SendBytes+0x8>
    2a4a:	1f 92       	push	r1
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	9a 83       	std	Y+2, r25	; 0x02
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	6b 83       	std	Y+3, r22	; 0x03
    2a56:	5d 83       	std	Y+5, r21	; 0x05
    2a58:	4c 83       	std	Y+4, r20	; 0x04
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5e:	dc 01       	movw	r26, r24
    2a60:	18 96       	adiw	r26, 0x08	; 8
    2a62:	ed 91       	ld	r30, X+
    2a64:	fc 91       	ld	r31, X
    2a66:	19 97       	sbiw	r26, 0x09	; 9
    2a68:	2c 81       	ldd	r18, Y+4	; 0x04
    2a6a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a70:	4b 81       	ldd	r20, Y+3	; 0x03
    2a72:	67 e1       	ldi	r22, 0x17	; 23
    2a74:	09 95       	icall
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	df 91       	pop	r29
    2a82:	cf 91       	pop	r28
    2a84:	08 95       	ret

00002a86 <u8x8_byte_SendByte>:
    2a86:	cf 93       	push	r28
    2a88:	df 93       	push	r29
    2a8a:	00 d0       	rcall	.+0      	; 0x2a8c <u8x8_byte_SendByte+0x6>
    2a8c:	1f 92       	push	r1
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	9a 83       	std	Y+2, r25	; 0x02
    2a94:	89 83       	std	Y+1, r24	; 0x01
    2a96:	6b 83       	std	Y+3, r22	; 0x03
    2a98:	9e 01       	movw	r18, r28
    2a9a:	2d 5f       	subi	r18, 0xFD	; 253
    2a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa2:	a9 01       	movw	r20, r18
    2aa4:	61 e0       	ldi	r22, 0x01	; 1
    2aa6:	cd df       	rcall	.-102    	; 0x2a42 <u8x8_byte_SendBytes>
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	0f 90       	pop	r0
    2aae:	df 91       	pop	r29
    2ab0:	cf 91       	pop	r28
    2ab2:	08 95       	ret

00002ab4 <u8x8_byte_StartTransfer>:
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29
    2ab8:	00 d0       	rcall	.+0      	; 0x2aba <u8x8_byte_StartTransfer+0x6>
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	9a 83       	std	Y+2, r25	; 0x02
    2ac0:	89 83       	std	Y+1, r24	; 0x01
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	18 96       	adiw	r26, 0x08	; 8
    2aca:	ed 91       	ld	r30, X+
    2acc:	fc 91       	ld	r31, X
    2ace:	19 97       	sbiw	r26, 0x09	; 9
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e0       	ldi	r20, 0x00	; 0
    2ada:	68 e1       	ldi	r22, 0x18	; 24
    2adc:	09 95       	icall
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	df 91       	pop	r29
    2ae4:	cf 91       	pop	r28
    2ae6:	08 95       	ret

00002ae8 <u8x8_byte_EndTransfer>:
    2ae8:	cf 93       	push	r28
    2aea:	df 93       	push	r29
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <u8x8_byte_EndTransfer+0x6>
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	9a 83       	std	Y+2, r25	; 0x02
    2af4:	89 83       	std	Y+1, r24	; 0x01
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	9a 81       	ldd	r25, Y+2	; 0x02
    2afa:	dc 01       	movw	r26, r24
    2afc:	18 96       	adiw	r26, 0x08	; 8
    2afe:	ed 91       	ld	r30, X+
    2b00:	fc 91       	ld	r31, X
    2b02:	19 97       	sbiw	r26, 0x09	; 9
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	9a 81       	ldd	r25, Y+2	; 0x02
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e0       	ldi	r20, 0x00	; 0
    2b0e:	69 e1       	ldi	r22, 0x19	; 25
    2b10:	09 95       	icall
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	08 95       	ret

00002b1c <i2c_delay>:
  ignores ACK response (which is anyway not provided by some displays)
  also does not allow reading from the device
*/
static void i2c_delay(u8x8_t *u8x8) U8X8_NOINLINE;
static void i2c_delay(u8x8_t *u8x8)
{
    2b1c:	cf 93       	push	r28
    2b1e:	df 93       	push	r29
    2b20:	00 d0       	rcall	.+0      	; 0x2b22 <i2c_delay+0x6>
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	9a 83       	std	Y+2, r25	; 0x02
    2b28:	89 83       	std	Y+1, r24	; 0x01
  //u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_10MICRO, u8x8->display_info->i2c_bus_clock_100kHz);
  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_I2C, u8x8->display_info->i2c_bus_clock_100kHz);
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2e:	fc 01       	movw	r30, r24
    2b30:	80 81       	ld	r24, Z
    2b32:	91 81       	ldd	r25, Z+1	; 0x01
    2b34:	fc 01       	movw	r30, r24
    2b36:	25 85       	ldd	r18, Z+13	; 0x0d
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3c:	42 2f       	mov	r20, r18
    2b3e:	6d e2       	ldi	r22, 0x2D	; 45
    2b40:	ac d5       	rcall	.+2904   	; 0x369a <u8x8_gpio_call>
}
    2b42:	00 00       	nop
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	df 91       	pop	r29
    2b4a:	cf 91       	pop	r28
    2b4c:	08 95       	ret

00002b4e <i2c_init>:

static void i2c_init(u8x8_t *u8x8)
{
    2b4e:	cf 93       	push	r28
    2b50:	df 93       	push	r29
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <i2c_init+0x6>
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	9a 83       	std	Y+2, r25	; 0x02
    2b5a:	89 83       	std	Y+1, r24	; 0x01
  u8x8_gpio_SetI2CClock(u8x8, 1);
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b60:	41 e0       	ldi	r20, 0x01	; 1
    2b62:	6c e4       	ldi	r22, 0x4C	; 76
    2b64:	9a d5       	rcall	.+2868   	; 0x369a <u8x8_gpio_call>
  u8x8_gpio_SetI2CData(u8x8, 1);
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6a:	41 e0       	ldi	r20, 0x01	; 1
    2b6c:	6d e4       	ldi	r22, 0x4D	; 77
    2b6e:	95 d5       	rcall	.+2858   	; 0x369a <u8x8_gpio_call>
  
  i2c_delay(u8x8);
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	9a 81       	ldd	r25, Y+2	; 0x02
    2b74:	d3 df       	rcall	.-90     	; 0x2b1c <i2c_delay>
}
    2b76:	00 00       	nop
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	df 91       	pop	r29
    2b7e:	cf 91       	pop	r28
    2b80:	08 95       	ret

00002b82 <i2c_read_scl_and_delay>:

/* actually, the scl line is not observed, so this procedure does not return a value */

static void i2c_read_scl_and_delay(u8x8_t *u8x8)
{
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	00 d0       	rcall	.+0      	; 0x2b88 <i2c_read_scl_and_delay+0x6>
    2b88:	cd b7       	in	r28, 0x3d	; 61
    2b8a:	de b7       	in	r29, 0x3e	; 62
    2b8c:	9a 83       	std	Y+2, r25	; 0x02
    2b8e:	89 83       	std	Y+1, r24	; 0x01
  /* set as input (line will be high) */
  u8x8_gpio_SetI2CClock(u8x8, 1);
    2b90:	89 81       	ldd	r24, Y+1	; 0x01
    2b92:	9a 81       	ldd	r25, Y+2	; 0x02
    2b94:	41 e0       	ldi	r20, 0x01	; 1
    2b96:	6c e4       	ldi	r22, 0x4C	; 76
    2b98:	80 d5       	rcall	.+2816   	; 0x369a <u8x8_gpio_call>

  i2c_delay(u8x8);
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9e:	be df       	rcall	.-132    	; 0x2b1c <i2c_delay>
}
    2ba0:	00 00       	nop
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	df 91       	pop	r29
    2ba8:	cf 91       	pop	r28
    2baa:	08 95       	ret

00002bac <i2c_clear_scl>:

static void i2c_clear_scl(u8x8_t *u8x8)
{
    2bac:	cf 93       	push	r28
    2bae:	df 93       	push	r29
    2bb0:	00 d0       	rcall	.+0      	; 0x2bb2 <i2c_clear_scl+0x6>
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	9a 83       	std	Y+2, r25	; 0x02
    2bb8:	89 83       	std	Y+1, r24	; 0x01
  u8x8_gpio_SetI2CClock(u8x8, 0);
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbe:	40 e0       	ldi	r20, 0x00	; 0
    2bc0:	6c e4       	ldi	r22, 0x4C	; 76
    2bc2:	6b d5       	rcall	.+2774   	; 0x369a <u8x8_gpio_call>
}
    2bc4:	00 00       	nop
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	08 95       	ret

00002bd0 <i2c_read_sda>:

static void i2c_read_sda(u8x8_t *u8x8)
{
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    2bd4:	00 d0       	rcall	.+0      	; 0x2bd6 <i2c_read_sda+0x6>
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	9a 83       	std	Y+2, r25	; 0x02
    2bdc:	89 83       	std	Y+1, r24	; 0x01
  /* set as input (line will be high) */
  u8x8_gpio_SetI2CData(u8x8, 1);
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	9a 81       	ldd	r25, Y+2	; 0x02
    2be2:	41 e0       	ldi	r20, 0x01	; 1
    2be4:	6d e4       	ldi	r22, 0x4D	; 77
    2be6:	59 d5       	rcall	.+2738   	; 0x369a <u8x8_gpio_call>
}
    2be8:	00 00       	nop
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	df 91       	pop	r29
    2bf0:	cf 91       	pop	r28
    2bf2:	08 95       	ret

00002bf4 <i2c_clear_sda>:

static void i2c_clear_sda(u8x8_t *u8x8)
{
    2bf4:	cf 93       	push	r28
    2bf6:	df 93       	push	r29
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <i2c_clear_sda+0x6>
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	9a 83       	std	Y+2, r25	; 0x02
    2c00:	89 83       	std	Y+1, r24	; 0x01
  /* set open collector and drive low */
  u8x8_gpio_SetI2CData(u8x8, 0);
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	9a 81       	ldd	r25, Y+2	; 0x02
    2c06:	40 e0       	ldi	r20, 0x00	; 0
    2c08:	6d e4       	ldi	r22, 0x4D	; 77
    2c0a:	47 d5       	rcall	.+2702   	; 0x369a <u8x8_gpio_call>
}
    2c0c:	00 00       	nop
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	df 91       	pop	r29
    2c14:	cf 91       	pop	r28
    2c16:	08 95       	ret

00002c18 <i2c_start>:

static void i2c_start(u8x8_t *u8x8)
{
    2c18:	cf 93       	push	r28
    2c1a:	df 93       	push	r29
    2c1c:	00 d0       	rcall	.+0      	; 0x2c1e <i2c_start+0x6>
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
    2c22:	9a 83       	std	Y+2, r25	; 0x02
    2c24:	89 83       	std	Y+1, r24	; 0x01
  if ( u8x8->i2c_started != 0 )
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	87 89       	ldd	r24, Z+23	; 0x17
    2c2e:	88 23       	and	r24, r24
    2c30:	49 f0       	breq	.+18     	; 0x2c44 <i2c_start+0x2c>
  {
    /* if already started: do restart */
    i2c_read_sda(u8x8);     /* SDA = 1 */
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	9a 81       	ldd	r25, Y+2	; 0x02
    2c36:	cc df       	rcall	.-104    	; 0x2bd0 <i2c_read_sda>
    i2c_delay(u8x8);
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3c:	6f df       	rcall	.-290    	; 0x2b1c <i2c_delay>
    i2c_read_scl_and_delay(u8x8);
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	9a 81       	ldd	r25, Y+2	; 0x02
    2c42:	9f df       	rcall	.-194    	; 0x2b82 <i2c_read_scl_and_delay>
  }
  i2c_read_sda(u8x8);
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	9a 81       	ldd	r25, Y+2	; 0x02
    2c48:	c3 df       	rcall	.-122    	; 0x2bd0 <i2c_read_sda>
  /* send the start condition, both lines go from 1 to 0 */
  i2c_clear_sda(u8x8);
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4e:	d2 df       	rcall	.-92     	; 0x2bf4 <i2c_clear_sda>
  i2c_delay(u8x8);
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	9a 81       	ldd	r25, Y+2	; 0x02
    2c54:	63 df       	rcall	.-314    	; 0x2b1c <i2c_delay>
  i2c_clear_scl(u8x8);
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	a8 df       	rcall	.-176    	; 0x2bac <i2c_clear_scl>
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
  u8x8->i2c_started = 1;
    2c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c60:	21 e0       	ldi	r18, 0x01	; 1
    2c62:	fc 01       	movw	r30, r24
    2c64:	27 8b       	std	Z+23, r18	; 0x17
    2c66:	00 00       	nop
}
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    2c70:	08 95       	ret

00002c72 <i2c_stop>:
    2c72:	cf 93       	push	r28


static void i2c_stop(u8x8_t *u8x8)
{
    2c74:	df 93       	push	r29
    2c76:	00 d0       	rcall	.+0      	; 0x2c78 <i2c_stop+0x6>
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	9a 83       	std	Y+2, r25	; 0x02
    2c7e:	89 83       	std	Y+1, r24	; 0x01
  /* set SDA to 0 */
  i2c_clear_sda(u8x8);  
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	9a 81       	ldd	r25, Y+2	; 0x02
    2c84:	b7 df       	rcall	.-146    	; 0x2bf4 <i2c_clear_sda>
  i2c_delay(u8x8);
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8a:	48 df       	rcall	.-368    	; 0x2b1c <i2c_delay>
 
  /* now release all lines */
  i2c_read_scl_and_delay(u8x8);
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c90:	78 df       	rcall	.-272    	; 0x2b82 <i2c_read_scl_and_delay>
 
  /* set SDA to 1 */
  i2c_read_sda(u8x8);
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	9a 81       	ldd	r25, Y+2	; 0x02
    2c96:	9c df       	rcall	.-200    	; 0x2bd0 <i2c_read_sda>
  i2c_delay(u8x8);
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9c:	3f df       	rcall	.-386    	; 0x2b1c <i2c_delay>
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
  u8x8->i2c_started = 0;
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	17 8a       	std	Z+23, r1	; 0x17
    2ca6:	00 00       	nop
}
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	08 95       	ret

00002cb2 <i2c_write_bit>:
    2cb2:	cf 93       	push	r28

static void i2c_write_bit(u8x8_t *u8x8, uint8_t val)
{
    2cb4:	df 93       	push	r29
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <i2c_write_bit+0x6>
    2cb8:	1f 92       	push	r1
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	89 83       	std	Y+1, r24	; 0x01
    2cc2:	6b 83       	std	Y+3, r22	; 0x03
  if (val)
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	88 23       	and	r24, r24
    2cc8:	21 f0       	breq	.+8      	; 0x2cd2 <i2c_write_bit+0x20>
    i2c_read_sda(u8x8);
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cce:	80 df       	rcall	.-256    	; 0x2bd0 <i2c_read_sda>
    2cd0:	03 c0       	rjmp	.+6      	; 0x2cd8 <i2c_write_bit+0x26>
  else
    i2c_clear_sda(u8x8);
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd6:	8e df       	rcall	.-228    	; 0x2bf4 <i2c_clear_sda>
 
  i2c_delay(u8x8);
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	9a 81       	ldd	r25, Y+2	; 0x02
    2cdc:	1f df       	rcall	.-450    	; 0x2b1c <i2c_delay>
  i2c_read_scl_and_delay(u8x8);
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce2:	4f df       	rcall	.-354    	; 0x2b82 <i2c_read_scl_and_delay>
  i2c_clear_scl(u8x8);
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce8:	61 df       	rcall	.-318    	; 0x2bac <i2c_clear_scl>
    2cea:	00 00       	nop
}
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	df 91       	pop	r29
    2cf4:	cf 91       	pop	r28
    2cf6:	08 95       	ret

00002cf8 <i2c_read_bit>:
    2cf8:	cf 93       	push	r28

static void i2c_read_bit(u8x8_t *u8x8)
{
    2cfa:	df 93       	push	r29
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <i2c_read_bit+0x6>
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	89 83       	std	Y+1, r24	; 0x01
  //uint8_t val;
  /* do not drive SDA */
  i2c_read_sda(u8x8);
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0a:	62 df       	rcall	.-316    	; 0x2bd0 <i2c_read_sda>
  i2c_delay(u8x8);
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d10:	05 df       	rcall	.-502    	; 0x2b1c <i2c_delay>
  i2c_read_scl_and_delay(u8x8);
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	9a 81       	ldd	r25, Y+2	; 0x02
    2d16:	35 df       	rcall	.-406    	; 0x2b82 <i2c_read_scl_and_delay>
  i2c_read_sda(u8x8);
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1c:	59 df       	rcall	.-334    	; 0x2bd0 <i2c_read_sda>
  i2c_delay(u8x8);
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	9a 81       	ldd	r25, Y+2	; 0x02
    2d22:	fc de       	rcall	.-520    	; 0x2b1c <i2c_delay>
  i2c_clear_scl(u8x8);
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	9a 81       	ldd	r25, Y+2	; 0x02
    2d28:	41 df       	rcall	.-382    	; 0x2bac <i2c_clear_scl>
    2d2a:	00 00       	nop
  //return val;
}
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	df 91       	pop	r29
    2d32:	cf 91       	pop	r28
    2d34:	08 95       	ret

00002d36 <i2c_write_byte>:
    2d36:	cf 93       	push	r28

static void i2c_write_byte(u8x8_t *u8x8, uint8_t b)
{
    2d38:	df 93       	push	r29
    2d3a:	00 d0       	rcall	.+0      	; 0x2d3c <i2c_write_byte+0x6>
    2d3c:	1f 92       	push	r1
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
    2d42:	9a 83       	std	Y+2, r25	; 0x02
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	6b 83       	std	Y+3, r22	; 0x03
  i2c_write_bit(u8x8, b & 128);
    2d48:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4a:	28 2f       	mov	r18, r24
    2d4c:	20 78       	andi	r18, 0x80	; 128
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	9a 81       	ldd	r25, Y+2	; 0x02
    2d52:	62 2f       	mov	r22, r18
    2d54:	ae df       	rcall	.-164    	; 0x2cb2 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 64);
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	28 2f       	mov	r18, r24
    2d5a:	20 74       	andi	r18, 0x40	; 64
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d60:	62 2f       	mov	r22, r18
    2d62:	a7 df       	rcall	.-178    	; 0x2cb2 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 32);
    2d64:	8b 81       	ldd	r24, Y+3	; 0x03
    2d66:	28 2f       	mov	r18, r24
    2d68:	20 72       	andi	r18, 0x20	; 32
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	62 2f       	mov	r22, r18
    2d70:	a0 df       	rcall	.-192    	; 0x2cb2 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 16);
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	28 2f       	mov	r18, r24
    2d76:	20 71       	andi	r18, 0x10	; 16
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7c:	62 2f       	mov	r22, r18
    2d7e:	99 df       	rcall	.-206    	; 0x2cb2 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 8);
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	28 2f       	mov	r18, r24
    2d84:	28 70       	andi	r18, 0x08	; 8
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8a:	62 2f       	mov	r22, r18
    2d8c:	92 df       	rcall	.-220    	; 0x2cb2 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 4);
    2d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d90:	28 2f       	mov	r18, r24
    2d92:	24 70       	andi	r18, 0x04	; 4
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	9a 81       	ldd	r25, Y+2	; 0x02
    2d98:	62 2f       	mov	r22, r18
    2d9a:	8b df       	rcall	.-234    	; 0x2cb2 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 2);
    2d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9e:	28 2f       	mov	r18, r24
    2da0:	22 70       	andi	r18, 0x02	; 2
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	9a 81       	ldd	r25, Y+2	; 0x02
    2da6:	62 2f       	mov	r22, r18
    2da8:	84 df       	rcall	.-248    	; 0x2cb2 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 1);
    2daa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dac:	28 2f       	mov	r18, r24
    2dae:	21 70       	andi	r18, 0x01	; 1
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	9a 81       	ldd	r25, Y+2	; 0x02
    2db4:	62 2f       	mov	r22, r18
    2db6:	7d df       	rcall	.-262    	; 0x2cb2 <i2c_write_bit>
    
  /* read ack from client */
  /* 0: ack was given by client */
  /* 1: nothing happend during ack cycle */  
  i2c_read_bit(u8x8);
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbc:	9d df       	rcall	.-198    	; 0x2cf8 <i2c_read_bit>
    2dbe:	00 00       	nop
}
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	df 91       	pop	r29
    2dc8:	cf 91       	pop	r28
    2dca:	08 95       	ret

00002dcc <u8x8_byte_sw_i2c>:
    2dcc:	cf 93       	push	r28

uint8_t u8x8_byte_sw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2dce:	df 93       	push	r29
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	28 97       	sbiw	r28, 0x08	; 8
    2dd6:	0f b6       	in	r0, 0x3f	; 63
    2dd8:	f8 94       	cli
    2dda:	de bf       	out	0x3e, r29	; 62
    2ddc:	0f be       	out	0x3f, r0	; 63
    2dde:	cd bf       	out	0x3d, r28	; 61
    2de0:	9c 83       	std	Y+4, r25	; 0x04
    2de2:	8b 83       	std	Y+3, r24	; 0x03
    2de4:	6d 83       	std	Y+5, r22	; 0x05
    2de6:	4e 83       	std	Y+6, r20	; 0x06
    2de8:	38 87       	std	Y+8, r19	; 0x08
    2dea:	2f 83       	std	Y+7, r18	; 0x07
  uint8_t *data;

  switch(msg)
    2dec:	8d 81       	ldd	r24, Y+5	; 0x05
    2dee:	88 2f       	mov	r24, r24
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	88 31       	cpi	r24, 0x18	; 24
    2df4:	91 05       	cpc	r25, r1
    2df6:	61 f1       	breq	.+88     	; 0x2e50 <u8x8_byte_sw_i2c+0x84>
    2df8:	89 31       	cpi	r24, 0x19	; 25
    2dfa:	91 05       	cpc	r25, r1
    2dfc:	34 f4       	brge	.+12     	; 0x2e0a <u8x8_byte_sw_i2c+0x3e>
    2dfe:	84 31       	cpi	r24, 0x14	; 20
    2e00:	91 05       	cpc	r25, r1
    2e02:	11 f1       	breq	.+68     	; 0x2e48 <u8x8_byte_sw_i2c+0x7c>
    2e04:	47 97       	sbiw	r24, 0x17	; 23
    2e06:	39 f0       	breq	.+14     	; 0x2e16 <u8x8_byte_sw_i2c+0x4a>
    2e08:	33 c0       	rjmp	.+102    	; 0x2e70 <u8x8_byte_sw_i2c+0xa4>
    2e0a:	89 31       	cpi	r24, 0x19	; 25
    2e0c:	91 05       	cpc	r25, r1
    2e0e:	61 f1       	breq	.+88     	; 0x2e68 <u8x8_byte_sw_i2c+0x9c>
    2e10:	80 97       	sbiw	r24, 0x20	; 32
    2e12:	81 f1       	breq	.+96     	; 0x2e74 <u8x8_byte_sw_i2c+0xa8>
    2e14:	2d c0       	rjmp	.+90     	; 0x2e70 <u8x8_byte_sw_i2c+0xa4>
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
    2e16:	8f 81       	ldd	r24, Y+7	; 0x07
    2e18:	98 85       	ldd	r25, Y+8	; 0x08
    2e1a:	9a 83       	std	Y+2, r25	; 0x02
    2e1c:	89 83       	std	Y+1, r24	; 0x01
    
      while( arg_int > 0 )
    2e1e:	10 c0       	rjmp	.+32     	; 0x2e40 <u8x8_byte_sw_i2c+0x74>
      {
	i2c_write_byte(u8x8, *data);
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	9a 81       	ldd	r25, Y+2	; 0x02
    2e24:	fc 01       	movw	r30, r24
    2e26:	20 81       	ld	r18, Z
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2c:	62 2f       	mov	r22, r18
    2e2e:	83 df       	rcall	.-250    	; 0x2d36 <i2c_write_byte>
	data++;
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	9a 81       	ldd	r25, Y+2	; 0x02
    2e34:	01 96       	adiw	r24, 0x01	; 1
    2e36:	9a 83       	std	Y+2, r25	; 0x02
    2e38:	89 83       	std	Y+1, r24	; 0x01
	arg_int--;
    2e3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e3c:	81 50       	subi	r24, 0x01	; 1
    2e3e:	8e 83       	std	Y+6, r24	; 0x06
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
    
      while( arg_int > 0 )
    2e40:	8e 81       	ldd	r24, Y+6	; 0x06
    2e42:	88 23       	and	r24, r24
    2e44:	69 f7       	brne	.-38     	; 0x2e20 <u8x8_byte_sw_i2c+0x54>
	i2c_write_byte(u8x8, *data);
	data++;
	arg_int--;
      }
      
      break;
    2e46:	17 c0       	rjmp	.+46     	; 0x2e76 <u8x8_byte_sw_i2c+0xaa>
      
    case U8X8_MSG_BYTE_INIT:
      i2c_init(u8x8);
    2e48:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4c:	80 de       	rcall	.-768    	; 0x2b4e <i2c_init>
      break;
    2e4e:	13 c0       	rjmp	.+38     	; 0x2e76 <u8x8_byte_sw_i2c+0xaa>
    case U8X8_MSG_BYTE_SET_DC:
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      i2c_start(u8x8);
    2e50:	8b 81       	ldd	r24, Y+3	; 0x03
    2e52:	9c 81       	ldd	r25, Y+4	; 0x04
    2e54:	e1 de       	rcall	.-574    	; 0x2c18 <i2c_start>
      i2c_write_byte(u8x8, u8x8_GetI2CAddress(u8x8));
    2e56:	8b 81       	ldd	r24, Y+3	; 0x03
    2e58:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	26 89       	ldd	r18, Z+22	; 0x16
    2e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e60:	9c 81       	ldd	r25, Y+4	; 0x04
    2e62:	62 2f       	mov	r22, r18
    2e64:	68 df       	rcall	.-304    	; 0x2d36 <i2c_write_byte>
      //i2c_write_byte(u8x8, 0x078);
      break;
    2e66:	07 c0       	rjmp	.+14     	; 0x2e76 <u8x8_byte_sw_i2c+0xaa>
    case U8X8_MSG_BYTE_END_TRANSFER:
      i2c_stop(u8x8);
    2e68:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6c:	02 df       	rcall	.-508    	; 0x2c72 <i2c_stop>
    2e6e:	03 c0       	rjmp	.+6      	; 0x2e76 <u8x8_byte_sw_i2c+0xaa>
      break;
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    default:
      return 0;
    2e72:	02 c0       	rjmp	.+4      	; 0x2e78 <u8x8_byte_sw_i2c+0xac>
    2e74:	00 00       	nop
      
    case U8X8_MSG_BYTE_INIT:
      i2c_init(u8x8);
      break;
    case U8X8_MSG_BYTE_SET_DC:
      break;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
      i2c_stop(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    2e78:	28 96       	adiw	r28, 0x08	; 8
}
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	de bf       	out	0x3e, r29	; 62
    2e80:	0f be       	out	0x3f, r0	; 63
    2e82:	cd bf       	out	0x3d, r28	; 61
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	08 95       	ret

00002e8a <u8x8_cad_SendCmd>:
    2e8a:	cf 93       	push	r28
      break;
    default:
      return 0;
  }
  return 1;
}
    2e8c:	df 93       	push	r29
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <u8x8_cad_SendCmd+0x6>
    2e90:	1f 92       	push	r1
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    2e96:	9a 83       	std	Y+2, r25	; 0x02
    2e98:	89 83       	std	Y+1, r24	; 0x01
    2e9a:	6b 83       	std	Y+3, r22	; 0x03
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	16 96       	adiw	r26, 0x06	; 6
    2ea4:	ed 91       	ld	r30, X+
    2ea6:	fc 91       	ld	r31, X
    2ea8:	17 97       	sbiw	r26, 0x07	; 7
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	9a 81       	ldd	r25, Y+2	; 0x02
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	4b 81       	ldd	r20, Y+3	; 0x03
    2eb4:	65 e1       	ldi	r22, 0x15	; 21
    2eb6:	09 95       	icall
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	08 95       	ret

00002ec4 <u8x8_cad_SendArg>:
    2ec4:	cf 93       	push	r28
    2ec6:	df 93       	push	r29
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <u8x8_cad_SendArg+0x6>
    2eca:	1f 92       	push	r1
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	9a 83       	std	Y+2, r25	; 0x02
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    2ed4:	6b 83       	std	Y+3, r22	; 0x03
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eda:	dc 01       	movw	r26, r24
    2edc:	16 96       	adiw	r26, 0x06	; 6
    2ede:	ed 91       	ld	r30, X+
    2ee0:	fc 91       	ld	r31, X
    2ee2:	17 97       	sbiw	r26, 0x07	; 7
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	4b 81       	ldd	r20, Y+3	; 0x03
    2eee:	66 e1       	ldi	r22, 0x16	; 22
    2ef0:	09 95       	icall
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	df 91       	pop	r29
    2efa:	cf 91       	pop	r28
    2efc:	08 95       	ret

00002efe <u8x8_cad_SendData>:
    2efe:	cf 93       	push	r28
    2f00:	df 93       	push	r29
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <u8x8_cad_SendData+0x6>
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <u8x8_cad_SendData+0x8>
    2f06:	1f 92       	push	r1
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	9a 83       	std	Y+2, r25	; 0x02
    2f0e:	89 83       	std	Y+1, r24	; 0x01
    2f10:	6b 83       	std	Y+3, r22	; 0x03
    2f12:	5d 83       	std	Y+5, r21	; 0x05
    2f14:	4c 83       	std	Y+4, r20	; 0x04
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	16 96       	adiw	r26, 0x06	; 6
    2f1e:	ed 91       	ld	r30, X+
    2f20:	fc 91       	ld	r31, X
    2f22:	17 97       	sbiw	r26, 0x07	; 7
    2f24:	2c 81       	ldd	r18, Y+4	; 0x04
    2f26:	3d 81       	ldd	r19, Y+5	; 0x05
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2c:	4b 81       	ldd	r20, Y+3	; 0x03
    2f2e:	67 e1       	ldi	r22, 0x17	; 23
    2f30:	09 95       	icall
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	0f 90       	pop	r0
    2f3c:	df 91       	pop	r29
    2f3e:	cf 91       	pop	r28
    2f40:	08 95       	ret

00002f42 <u8x8_cad_StartTransfer>:
    2f42:	cf 93       	push	r28
    2f44:	df 93       	push	r29
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <u8x8_cad_StartTransfer+0x6>
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
    2f4c:	9a 83       	std	Y+2, r25	; 0x02
    2f4e:	89 83       	std	Y+1, r24	; 0x01
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	9a 81       	ldd	r25, Y+2	; 0x02
    2f54:	dc 01       	movw	r26, r24
    2f56:	16 96       	adiw	r26, 0x06	; 6
    2f58:	ed 91       	ld	r30, X+
    2f5a:	fc 91       	ld	r31, X
    2f5c:	17 97       	sbiw	r26, 0x07	; 7
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
    2f60:	9a 81       	ldd	r25, Y+2	; 0x02
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e0       	ldi	r20, 0x00	; 0
    2f68:	68 e1       	ldi	r22, 0x18	; 24
    2f6a:	09 95       	icall
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	df 91       	pop	r29
    2f72:	cf 91       	pop	r28
    2f74:	08 95       	ret

00002f76 <u8x8_cad_EndTransfer>:
    2f76:	cf 93       	push	r28
    2f78:	df 93       	push	r29
    2f7a:	00 d0       	rcall	.+0      	; 0x2f7c <u8x8_cad_EndTransfer+0x6>
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	9a 83       	std	Y+2, r25	; 0x02
    2f82:	89 83       	std	Y+1, r24	; 0x01
    2f84:	89 81       	ldd	r24, Y+1	; 0x01
    2f86:	9a 81       	ldd	r25, Y+2	; 0x02
    2f88:	dc 01       	movw	r26, r24
    2f8a:	16 96       	adiw	r26, 0x06	; 6
    2f8c:	ed 91       	ld	r30, X+
    2f8e:	fc 91       	ld	r31, X
    2f90:	17 97       	sbiw	r26, 0x07	; 7
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	9a 81       	ldd	r25, Y+2	; 0x02
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e0       	ldi	r20, 0x00	; 0
    2f9c:	69 e1       	ldi	r22, 0x19	; 25
    2f9e:	09 95       	icall
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	df 91       	pop	r29
    2fa6:	cf 91       	pop	r28
    2fa8:	08 95       	ret

00002faa <u8x8_cad_SendSequence>:
    2faa:	cf 93       	push	r28
    2fac:	df 93       	push	r29
    2fae:	00 d0       	rcall	.+0      	; 0x2fb0 <u8x8_cad_SendSequence+0x6>
    2fb0:	00 d0       	rcall	.+0      	; 0x2fb2 <u8x8_cad_SendSequence+0x8>
    2fb2:	00 d0       	rcall	.+0      	; 0x2fb4 <u8x8_cad_SendSequence+0xa>
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
    2fb8:	9c 83       	std	Y+4, r25	; 0x04
    2fba:	8b 83       	std	Y+3, r24	; 0x03
    2fbc:	7e 83       	std	Y+6, r23	; 0x06
    2fbe:	6d 83       	std	Y+5, r22	; 0x05
    2fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	8c 91       	ld	r24, X
    2fc8:	89 83       	std	Y+1, r24	; 0x01
    2fca:	8d 81       	ldd	r24, Y+5	; 0x05
    2fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fce:	01 96       	adiw	r24, 0x01	; 1
    2fd0:	9e 83       	std	Y+6, r25	; 0x06
    2fd2:	8d 83       	std	Y+5, r24	; 0x05
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	88 2f       	mov	r24, r24
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	87 31       	cpi	r24, 0x17	; 23
    2fdc:	91 05       	cpc	r25, r1
    2fde:	39 f1       	breq	.+78     	; 0x302e <u8x8_cad_SendSequence+0x84>
    2fe0:	88 31       	cpi	r24, 0x18	; 24
    2fe2:	91 05       	cpc	r25, r1
    2fe4:	24 f4       	brge	.+8      	; 0x2fee <u8x8_cad_SendSequence+0x44>
    2fe6:	45 97       	sbiw	r24, 0x15	; 21
    2fe8:	0c f4       	brge	.+2      	; 0x2fec <u8x8_cad_SendSequence+0x42>
    2fea:	55 c0       	rjmp	.+170    	; 0x3096 <u8x8_cad_SendSequence+0xec>
    2fec:	07 c0       	rjmp	.+14     	; 0x2ffc <u8x8_cad_SendSequence+0x52>
    2fee:	8a 31       	cpi	r24, 0x1A	; 26
    2ff0:	91 05       	cpc	r25, r1
    2ff2:	84 f1       	brlt	.+96     	; 0x3054 <u8x8_cad_SendSequence+0xaa>
    2ff4:	8e 3f       	cpi	r24, 0xFE	; 254
    2ff6:	91 05       	cpc	r25, r1
    2ff8:	e1 f1       	breq	.+120    	; 0x3072 <u8x8_cad_SendSequence+0xc8>
    2ffa:	4d c0       	rjmp	.+154    	; 0x3096 <u8x8_cad_SendSequence+0xec>
    2ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    3000:	fc 01       	movw	r30, r24
    3002:	80 81       	ld	r24, Z
    3004:	8a 83       	std	Y+2, r24	; 0x02
    3006:	8b 81       	ldd	r24, Y+3	; 0x03
    3008:	9c 81       	ldd	r25, Y+4	; 0x04
    300a:	dc 01       	movw	r26, r24
    300c:	16 96       	adiw	r26, 0x06	; 6
    300e:	ed 91       	ld	r30, X+
    3010:	fc 91       	ld	r31, X
    3012:	17 97       	sbiw	r26, 0x07	; 7
    3014:	4a 81       	ldd	r20, Y+2	; 0x02
    3016:	8b 81       	ldd	r24, Y+3	; 0x03
    3018:	9c 81       	ldd	r25, Y+4	; 0x04
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	69 81       	ldd	r22, Y+1	; 0x01
    3020:	09 95       	icall
    3022:	8d 81       	ldd	r24, Y+5	; 0x05
    3024:	9e 81       	ldd	r25, Y+6	; 0x06
    3026:	01 96       	adiw	r24, 0x01	; 1
    3028:	9e 83       	std	Y+6, r25	; 0x06
    302a:	8d 83       	std	Y+5, r24	; 0x05
    302c:	33 c0       	rjmp	.+102    	; 0x3094 <u8x8_cad_SendSequence+0xea>
    302e:	8d 81       	ldd	r24, Y+5	; 0x05
    3030:	9e 81       	ldd	r25, Y+6	; 0x06
    3032:	fc 01       	movw	r30, r24
    3034:	80 81       	ld	r24, Z
    3036:	8a 83       	std	Y+2, r24	; 0x02
    3038:	9e 01       	movw	r18, r28
    303a:	2e 5f       	subi	r18, 0xFE	; 254
    303c:	3f 4f       	sbci	r19, 0xFF	; 255
    303e:	8b 81       	ldd	r24, Y+3	; 0x03
    3040:	9c 81       	ldd	r25, Y+4	; 0x04
    3042:	a9 01       	movw	r20, r18
    3044:	61 e0       	ldi	r22, 0x01	; 1
    3046:	5b df       	rcall	.-330    	; 0x2efe <u8x8_cad_SendData>
    3048:	8d 81       	ldd	r24, Y+5	; 0x05
    304a:	9e 81       	ldd	r25, Y+6	; 0x06
    304c:	01 96       	adiw	r24, 0x01	; 1
    304e:	9e 83       	std	Y+6, r25	; 0x06
    3050:	8d 83       	std	Y+5, r24	; 0x05
    3052:	20 c0       	rjmp	.+64     	; 0x3094 <u8x8_cad_SendSequence+0xea>
    3054:	8b 81       	ldd	r24, Y+3	; 0x03
    3056:	9c 81       	ldd	r25, Y+4	; 0x04
    3058:	dc 01       	movw	r26, r24
    305a:	16 96       	adiw	r26, 0x06	; 6
    305c:	ed 91       	ld	r30, X+
    305e:	fc 91       	ld	r31, X
    3060:	17 97       	sbiw	r26, 0x07	; 7
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	9c 81       	ldd	r25, Y+4	; 0x04
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	40 e0       	ldi	r20, 0x00	; 0
    306c:	69 81       	ldd	r22, Y+1	; 0x01
    306e:	09 95       	icall
    3070:	11 c0       	rjmp	.+34     	; 0x3094 <u8x8_cad_SendSequence+0xea>
    3072:	8d 81       	ldd	r24, Y+5	; 0x05
    3074:	9e 81       	ldd	r25, Y+6	; 0x06
    3076:	fc 01       	movw	r30, r24
    3078:	80 81       	ld	r24, Z
    307a:	8a 83       	std	Y+2, r24	; 0x02
    307c:	2a 81       	ldd	r18, Y+2	; 0x02
    307e:	8b 81       	ldd	r24, Y+3	; 0x03
    3080:	9c 81       	ldd	r25, Y+4	; 0x04
    3082:	42 2f       	mov	r20, r18
    3084:	69 e2       	ldi	r22, 0x29	; 41
    3086:	09 d3       	rcall	.+1554   	; 0x369a <u8x8_gpio_call>
    3088:	8d 81       	ldd	r24, Y+5	; 0x05
    308a:	9e 81       	ldd	r25, Y+6	; 0x06
    308c:	01 96       	adiw	r24, 0x01	; 1
    308e:	9e 83       	std	Y+6, r25	; 0x06
    3090:	8d 83       	std	Y+5, r24	; 0x05
    3092:	00 00       	nop
    3094:	95 cf       	rjmp	.-214    	; 0x2fc0 <u8x8_cad_SendSequence+0x16>
    3096:	00 00       	nop
    3098:	26 96       	adiw	r28, 0x06	; 6
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	de bf       	out	0x3e, r29	; 62
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	cd bf       	out	0x3d, r28	; 61
    30a4:	df 91       	pop	r29
    30a6:	cf 91       	pop	r28
    30a8:	08 95       	ret

000030aa <u8x8_i2c_data_transfer>:
    30aa:	cf 93       	push	r28
    30ac:	df 93       	push	r29
    30ae:	00 d0       	rcall	.+0      	; 0x30b0 <u8x8_i2c_data_transfer+0x6>
    30b0:	00 d0       	rcall	.+0      	; 0x30b2 <u8x8_i2c_data_transfer+0x8>
    30b2:	1f 92       	push	r1
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	9a 83       	std	Y+2, r25	; 0x02
    30ba:	89 83       	std	Y+1, r24	; 0x01
    30bc:	6b 83       	std	Y+3, r22	; 0x03
    30be:	5d 83       	std	Y+5, r21	; 0x05
    30c0:	4c 83       	std	Y+4, r20	; 0x04
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	9a 81       	ldd	r25, Y+2	; 0x02
    30c6:	f6 dc       	rcall	.-1556   	; 0x2ab4 <u8x8_byte_StartTransfer>
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	9a 81       	ldd	r25, Y+2	; 0x02
    30cc:	60 e4       	ldi	r22, 0x40	; 64
    30ce:	db dc       	rcall	.-1610   	; 0x2a86 <u8x8_byte_SendByte>
    30d0:	89 81       	ldd	r24, Y+1	; 0x01
    30d2:	9a 81       	ldd	r25, Y+2	; 0x02
    30d4:	dc 01       	movw	r26, r24
    30d6:	18 96       	adiw	r26, 0x08	; 8
    30d8:	ed 91       	ld	r30, X+
    30da:	fc 91       	ld	r31, X
    30dc:	19 97       	sbiw	r26, 0x09	; 9
    30de:	2c 81       	ldd	r18, Y+4	; 0x04
    30e0:	3d 81       	ldd	r19, Y+5	; 0x05
    30e2:	89 81       	ldd	r24, Y+1	; 0x01
    30e4:	9a 81       	ldd	r25, Y+2	; 0x02
    30e6:	4b 81       	ldd	r20, Y+3	; 0x03
    30e8:	67 e1       	ldi	r22, 0x17	; 23
    30ea:	09 95       	icall
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	9a 81       	ldd	r25, Y+2	; 0x02
    30f0:	fb dc       	rcall	.-1546   	; 0x2ae8 <u8x8_byte_EndTransfer>
    30f2:	00 00       	nop
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	0f 90       	pop	r0
    30fc:	0f 90       	pop	r0
    30fe:	df 91       	pop	r29
    3100:	cf 91       	pop	r28
    3102:	08 95       	ret

00003104 <u8x8_cad_ssd13xx_fast_i2c>:


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3104:	cf 93       	push	r28
    3106:	df 93       	push	r29
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
    310c:	28 97       	sbiw	r28, 0x08	; 8
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	9c 83       	std	Y+4, r25	; 0x04
    311a:	8b 83       	std	Y+3, r24	; 0x03
    311c:	6d 83       	std	Y+5, r22	; 0x05
    311e:	4e 83       	std	Y+6, r20	; 0x06
    3120:	38 87       	std	Y+8, r19	; 0x08
    3122:	2f 83       	std	Y+7, r18	; 0x07
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    3124:	8d 81       	ldd	r24, Y+5	; 0x05
    3126:	88 2f       	mov	r24, r24
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	86 31       	cpi	r24, 0x16	; 22
    312c:	91 05       	cpc	r25, r1
    312e:	59 f1       	breq	.+86     	; 0x3186 <u8x8_cad_ssd13xx_fast_i2c+0x82>
    3130:	87 31       	cpi	r24, 0x17	; 23
    3132:	91 05       	cpc	r25, r1
    3134:	3c f4       	brge	.+14     	; 0x3144 <u8x8_cad_ssd13xx_fast_i2c+0x40>
    3136:	84 31       	cpi	r24, 0x14	; 20
    3138:	91 05       	cpc	r25, r1
    313a:	09 f4       	brne	.+2      	; 0x313e <u8x8_cad_ssd13xx_fast_i2c+0x3a>
    313c:	51 c0       	rjmp	.+162    	; 0x31e0 <u8x8_cad_ssd13xx_fast_i2c+0xdc>
    313e:	45 97       	sbiw	r24, 0x15	; 21
    3140:	61 f0       	breq	.+24     	; 0x315a <u8x8_cad_ssd13xx_fast_i2c+0x56>
    3142:	76 c0       	rjmp	.+236    	; 0x3230 <u8x8_cad_ssd13xx_fast_i2c+0x12c>
    3144:	88 31       	cpi	r24, 0x18	; 24
    3146:	91 05       	cpc	r25, r1
    3148:	09 f4       	brne	.+2      	; 0x314c <u8x8_cad_ssd13xx_fast_i2c+0x48>
    314a:	65 c0       	rjmp	.+202    	; 0x3216 <u8x8_cad_ssd13xx_fast_i2c+0x112>
    314c:	88 31       	cpi	r24, 0x18	; 24
    314e:	91 05       	cpc	r25, r1
    3150:	fc f0       	brlt	.+62     	; 0x3190 <u8x8_cad_ssd13xx_fast_i2c+0x8c>
    3152:	49 97       	sbiw	r24, 0x19	; 25
    3154:	09 f4       	brne	.+2      	; 0x3158 <u8x8_cad_ssd13xx_fast_i2c+0x54>
    3156:	62 c0       	rjmp	.+196    	; 0x321c <u8x8_cad_ssd13xx_fast_i2c+0x118>
    3158:	6b c0       	rjmp	.+214    	; 0x3230 <u8x8_cad_ssd13xx_fast_i2c+0x12c>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    315a:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <in_transfer.3254>
    315e:	88 23       	and	r24, r24
    3160:	19 f0       	breq	.+6      	; 0x3168 <u8x8_cad_ssd13xx_fast_i2c+0x64>
	 u8x8_byte_EndTransfer(u8x8); 
    3162:	8b 81       	ldd	r24, Y+3	; 0x03
    3164:	9c 81       	ldd	r25, Y+4	; 0x04
    3166:	c0 dc       	rcall	.-1664   	; 0x2ae8 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	9c 81       	ldd	r25, Y+4	; 0x04
    316c:	a3 dc       	rcall	.-1722   	; 0x2ab4 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    316e:	8b 81       	ldd	r24, Y+3	; 0x03
    3170:	9c 81       	ldd	r25, Y+4	; 0x04
    3172:	60 e0       	ldi	r22, 0x00	; 0
    3174:	88 dc       	rcall	.-1776   	; 0x2a86 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    3176:	8b 81       	ldd	r24, Y+3	; 0x03
    3178:	9c 81       	ldd	r25, Y+4	; 0x04
    317a:	6e 81       	ldd	r22, Y+6	; 0x06
    317c:	84 dc       	rcall	.-1784   	; 0x2a86 <u8x8_byte_SendByte>
      in_transfer = 1;
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <in_transfer.3254>
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    3184:	57 c0       	rjmp	.+174    	; 0x3234 <u8x8_cad_ssd13xx_fast_i2c+0x130>
    3186:	8b 81       	ldd	r24, Y+3	; 0x03
    3188:	9c 81       	ldd	r25, Y+4	; 0x04
    318a:	6e 81       	ldd	r22, Y+6	; 0x06
    318c:	7c dc       	rcall	.-1800   	; 0x2a86 <u8x8_byte_SendByte>
      break;      
    318e:	52 c0       	rjmp	.+164    	; 0x3234 <u8x8_cad_ssd13xx_fast_i2c+0x130>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    3190:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <in_transfer.3254>
    3194:	88 23       	and	r24, r24
	u8x8_byte_EndTransfer(u8x8); 
    3196:	19 f0       	breq	.+6      	; 0x319e <u8x8_cad_ssd13xx_fast_i2c+0x9a>
    3198:	8b 81       	ldd	r24, Y+3	; 0x03
    319a:	9c 81       	ldd	r25, Y+4	; 0x04
    319c:	a5 dc       	rcall	.-1718   	; 0x2ae8 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
    319e:	8f 81       	ldd	r24, Y+7	; 0x07
    31a0:	98 85       	ldd	r25, Y+8	; 0x08
    31a2:	9a 83       	std	Y+2, r25	; 0x02
    31a4:	89 83       	std	Y+1, r24	; 0x01
       while( arg_int > 24 )
    31a6:	0f c0       	rjmp	.+30     	; 0x31c6 <u8x8_cad_ssd13xx_fast_i2c+0xc2>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    31a8:	29 81       	ldd	r18, Y+1	; 0x01
    31aa:	3a 81       	ldd	r19, Y+2	; 0x02
    31ac:	8b 81       	ldd	r24, Y+3	; 0x03
    31ae:	9c 81       	ldd	r25, Y+4	; 0x04
    31b0:	a9 01       	movw	r20, r18
    31b2:	68 e1       	ldi	r22, 0x18	; 24
    31b4:	7a df       	rcall	.-268    	; 0x30aa <u8x8_i2c_data_transfer>
	arg_int-=24;
    31b6:	8e 81       	ldd	r24, Y+6	; 0x06
    31b8:	88 51       	subi	r24, 0x18	; 24
    31ba:	8e 83       	std	Y+6, r24	; 0x06
	p+=24;
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	9a 81       	ldd	r25, Y+2	; 0x02
    31c0:	48 96       	adiw	r24, 0x18	; 24
    31c2:	9a 83       	std	Y+2, r25	; 0x02
    31c4:	89 83       	std	Y+1, r24	; 0x01
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    31c6:	8e 81       	ldd	r24, Y+6	; 0x06
    31c8:	89 31       	cpi	r24, 0x19	; 25
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    31ca:	70 f7       	brcc	.-36     	; 0x31a8 <u8x8_cad_ssd13xx_fast_i2c+0xa4>
    31cc:	29 81       	ldd	r18, Y+1	; 0x01
    31ce:	3a 81       	ldd	r19, Y+2	; 0x02
    31d0:	8b 81       	ldd	r24, Y+3	; 0x03
    31d2:	9c 81       	ldd	r25, Y+4	; 0x04
    31d4:	a9 01       	movw	r20, r18
    31d6:	6e 81       	ldd	r22, Y+6	; 0x06
    31d8:	68 df       	rcall	.-304    	; 0x30aa <u8x8_i2c_data_transfer>
      in_transfer = 0;
    31da:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <in_transfer.3254>
      break;
    31de:	2a c0       	rjmp	.+84     	; 0x3234 <u8x8_cad_ssd13xx_fast_i2c+0x130>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	9c 81       	ldd	r25, Y+4	; 0x04
    31e4:	dc 01       	movw	r26, r24
    31e6:	56 96       	adiw	r26, 0x16	; 22
    31e8:	8c 91       	ld	r24, X
    31ea:	8f 3f       	cpi	r24, 0xFF	; 255
    31ec:	29 f4       	brne	.+10     	; 0x31f8 <u8x8_cad_ssd13xx_fast_i2c+0xf4>
	u8x8->i2c_address = 0x078;
    31ee:	8b 81       	ldd	r24, Y+3	; 0x03
    31f0:	9c 81       	ldd	r25, Y+4	; 0x04
    31f2:	28 e7       	ldi	r18, 0x78	; 120
    31f4:	fc 01       	movw	r30, r24
    31f6:	26 8b       	std	Z+22, r18	; 0x16
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    31f8:	8b 81       	ldd	r24, Y+3	; 0x03
    31fa:	9c 81       	ldd	r25, Y+4	; 0x04
    31fc:	dc 01       	movw	r26, r24
    31fe:	18 96       	adiw	r26, 0x08	; 8
    3200:	ed 91       	ld	r30, X+
    3202:	fc 91       	ld	r31, X
    3204:	19 97       	sbiw	r26, 0x09	; 9
    3206:	2f 81       	ldd	r18, Y+7	; 0x07
    3208:	38 85       	ldd	r19, Y+8	; 0x08
    320a:	8b 81       	ldd	r24, Y+3	; 0x03
    320c:	9c 81       	ldd	r25, Y+4	; 0x04
    320e:	4e 81       	ldd	r20, Y+6	; 0x06
    3210:	6d 81       	ldd	r22, Y+5	; 0x05
    3212:	09 95       	icall
    3214:	10 c0       	rjmp	.+32     	; 0x3236 <u8x8_cad_ssd13xx_fast_i2c+0x132>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
    3216:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <in_transfer.3254>
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    321a:	0c c0       	rjmp	.+24     	; 0x3234 <u8x8_cad_ssd13xx_fast_i2c+0x130>
    321c:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <in_transfer.3254>
    3220:	88 23       	and	r24, r24
	u8x8_byte_EndTransfer(u8x8); 
    3222:	19 f0       	breq	.+6      	; 0x322a <u8x8_cad_ssd13xx_fast_i2c+0x126>
    3224:	8b 81       	ldd	r24, Y+3	; 0x03
    3226:	9c 81       	ldd	r25, Y+4	; 0x04
    3228:	5f dc       	rcall	.-1858   	; 0x2ae8 <u8x8_byte_EndTransfer>
      in_transfer = 0;
    322a:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <in_transfer.3254>
      break;
    322e:	02 c0       	rjmp	.+4      	; 0x3234 <u8x8_cad_ssd13xx_fast_i2c+0x130>
    default:
      return 0;
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	01 c0       	rjmp	.+2      	; 0x3236 <u8x8_cad_ssd13xx_fast_i2c+0x132>
  }
  return 1;
    3234:	81 e0       	ldi	r24, 0x01	; 1
}
    3236:	28 96       	adiw	r28, 0x08	; 8
    3238:	0f b6       	in	r0, 0x3f	; 63
    323a:	f8 94       	cli
    323c:	de bf       	out	0x3e, r29	; 62
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	cd bf       	out	0x3d, r28	; 61
    3242:	df 91       	pop	r29
    3244:	cf 91       	pop	r28
    3246:	08 95       	ret

00003248 <u8x8_d_helper_display_setup_memory>:
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}
    3248:	cf 93       	push	r28
    324a:	df 93       	push	r29
    324c:	00 d0       	rcall	.+0      	; 0x324e <u8x8_d_helper_display_setup_memory+0x6>
    324e:	00 d0       	rcall	.+0      	; 0x3250 <u8x8_d_helper_display_setup_memory+0x8>
    3250:	cd b7       	in	r28, 0x3d	; 61
    3252:	de b7       	in	r29, 0x3e	; 62
    3254:	9a 83       	std	Y+2, r25	; 0x02
    3256:	89 83       	std	Y+1, r24	; 0x01
    3258:	7c 83       	std	Y+4, r23	; 0x04
    325a:	6b 83       	std	Y+3, r22	; 0x03
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	9a 81       	ldd	r25, Y+2	; 0x02
    3260:	2b 81       	ldd	r18, Y+3	; 0x03
    3262:	3c 81       	ldd	r19, Y+4	; 0x04
    3264:	fc 01       	movw	r30, r24
    3266:	31 83       	std	Z+1, r19	; 0x01
    3268:	20 83       	st	Z, r18
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	9a 81       	ldd	r25, Y+2	; 0x02
    326e:	fc 01       	movw	r30, r24
    3270:	80 81       	ld	r24, Z
    3272:	91 81       	ldd	r25, Z+1	; 0x01
    3274:	fc 01       	movw	r30, r24
    3276:	22 89       	ldd	r18, Z+18	; 0x12
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	9a 81       	ldd	r25, Y+2	; 0x02
    327c:	fc 01       	movw	r30, r24
    327e:	24 8b       	std	Z+20, r18	; 0x14
    3280:	00 00       	nop
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	0f 90       	pop	r0
    3288:	0f 90       	pop	r0
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	08 95       	ret

00003290 <u8x8_d_helper_display_init>:
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
    3294:	00 d0       	rcall	.+0      	; 0x3296 <u8x8_d_helper_display_init+0x6>
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
    329a:	9a 83       	std	Y+2, r25	; 0x02
    329c:	89 83       	std	Y+1, r24	; 0x01
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	9a 81       	ldd	r25, Y+2	; 0x02
    32a2:	dc 01       	movw	r26, r24
    32a4:	1a 96       	adiw	r26, 0x0a	; 10
    32a6:	ed 91       	ld	r30, X+
    32a8:	fc 91       	ld	r31, X
    32aa:	1b 97       	sbiw	r26, 0x0b	; 11
    32ac:	89 81       	ldd	r24, Y+1	; 0x01
    32ae:	9a 81       	ldd	r25, Y+2	; 0x02
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	40 e0       	ldi	r20, 0x00	; 0
    32b6:	68 e2       	ldi	r22, 0x28	; 40
    32b8:	09 95       	icall
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
    32bc:	9a 81       	ldd	r25, Y+2	; 0x02
    32be:	dc 01       	movw	r26, r24
    32c0:	16 96       	adiw	r26, 0x06	; 6
    32c2:	ed 91       	ld	r30, X+
    32c4:	fc 91       	ld	r31, X
    32c6:	17 97       	sbiw	r26, 0x07	; 7
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	9a 81       	ldd	r25, Y+2	; 0x02
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	40 e0       	ldi	r20, 0x00	; 0
    32d2:	64 e1       	ldi	r22, 0x14	; 20
    32d4:	09 95       	icall
    32d6:	89 81       	ldd	r24, Y+1	; 0x01
    32d8:	9a 81       	ldd	r25, Y+2	; 0x02
    32da:	41 e0       	ldi	r20, 0x01	; 1
    32dc:	6b e4       	ldi	r22, 0x4B	; 75
    32de:	dd d1       	rcall	.+954    	; 0x369a <u8x8_gpio_call>
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	9a 81       	ldd	r25, Y+2	; 0x02
    32e4:	fc 01       	movw	r30, r24
    32e6:	80 81       	ld	r24, Z
    32e8:	91 81       	ldd	r25, Z+1	; 0x01
    32ea:	dc 01       	movw	r26, r24
    32ec:	14 96       	adiw	r26, 0x04	; 4
    32ee:	2c 91       	ld	r18, X
    32f0:	89 81       	ldd	r24, Y+1	; 0x01
    32f2:	9a 81       	ldd	r25, Y+2	; 0x02
    32f4:	42 2f       	mov	r20, r18
    32f6:	69 e2       	ldi	r22, 0x29	; 41
    32f8:	d0 d1       	rcall	.+928    	; 0x369a <u8x8_gpio_call>
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
    32fc:	9a 81       	ldd	r25, Y+2	; 0x02
    32fe:	40 e0       	ldi	r20, 0x00	; 0
    3300:	6b e4       	ldi	r22, 0x4B	; 75
    3302:	cb d1       	rcall	.+918    	; 0x369a <u8x8_gpio_call>
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	9a 81       	ldd	r25, Y+2	; 0x02
    3308:	fc 01       	movw	r30, r24
    330a:	80 81       	ld	r24, Z
    330c:	91 81       	ldd	r25, Z+1	; 0x01
    330e:	dc 01       	movw	r26, r24
    3310:	14 96       	adiw	r26, 0x04	; 4
    3312:	2c 91       	ld	r18, X
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	9a 81       	ldd	r25, Y+2	; 0x02
    3318:	42 2f       	mov	r20, r18
    331a:	69 e2       	ldi	r22, 0x29	; 41
    331c:	be d1       	rcall	.+892    	; 0x369a <u8x8_gpio_call>
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	9a 81       	ldd	r25, Y+2	; 0x02
    3322:	41 e0       	ldi	r20, 0x01	; 1
    3324:	6b e4       	ldi	r22, 0x4B	; 75
    3326:	b9 d1       	rcall	.+882    	; 0x369a <u8x8_gpio_call>
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	9a 81       	ldd	r25, Y+2	; 0x02
    332c:	fc 01       	movw	r30, r24
    332e:	80 81       	ld	r24, Z
    3330:	91 81       	ldd	r25, Z+1	; 0x01
    3332:	dc 01       	movw	r26, r24
    3334:	15 96       	adiw	r26, 0x05	; 5
    3336:	2c 91       	ld	r18, X
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	9a 81       	ldd	r25, Y+2	; 0x02
    333c:	42 2f       	mov	r20, r18
    333e:	69 e2       	ldi	r22, 0x29	; 41
    3340:	ac d1       	rcall	.+856    	; 0x369a <u8x8_gpio_call>
    3342:	00 00       	nop
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	df 91       	pop	r29
    334a:	cf 91       	pop	r28
    334c:	08 95       	ret

0000334e <u8x8_DrawTile>:
    334e:	0f 93       	push	r16
    3350:	1f 93       	push	r17
    3352:	cf 93       	push	r28
    3354:	df 93       	push	r29
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
    335a:	2c 97       	sbiw	r28, 0x0c	; 12
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
    3366:	9f 83       	std	Y+7, r25	; 0x07
    3368:	8e 83       	std	Y+6, r24	; 0x06
    336a:	68 87       	std	Y+8, r22	; 0x08
    336c:	49 87       	std	Y+9, r20	; 0x09
    336e:	2a 87       	std	Y+10, r18	; 0x0a
    3370:	1c 87       	std	Y+12, r17	; 0x0c
    3372:	0b 87       	std	Y+11, r16	; 0x0b
    3374:	88 85       	ldd	r24, Y+8	; 0x08
    3376:	8c 83       	std	Y+4, r24	; 0x04
    3378:	89 85       	ldd	r24, Y+9	; 0x09
    337a:	8d 83       	std	Y+5, r24	; 0x05
    337c:	8a 85       	ldd	r24, Y+10	; 0x0a
    337e:	8b 83       	std	Y+3, r24	; 0x03
    3380:	8b 85       	ldd	r24, Y+11	; 0x0b
    3382:	9c 85       	ldd	r25, Y+12	; 0x0c
    3384:	9a 83       	std	Y+2, r25	; 0x02
    3386:	89 83       	std	Y+1, r24	; 0x01
    3388:	8e 81       	ldd	r24, Y+6	; 0x06
    338a:	9f 81       	ldd	r25, Y+7	; 0x07
    338c:	dc 01       	movw	r26, r24
    338e:	14 96       	adiw	r26, 0x04	; 4
    3390:	ed 91       	ld	r30, X+
    3392:	fc 91       	ld	r31, X
    3394:	15 97       	sbiw	r26, 0x05	; 5
    3396:	8e 81       	ldd	r24, Y+6	; 0x06
    3398:	9f 81       	ldd	r25, Y+7	; 0x07
    339a:	9e 01       	movw	r18, r28
    339c:	2f 5f       	subi	r18, 0xFF	; 255
    339e:	3f 4f       	sbci	r19, 0xFF	; 255
    33a0:	41 e0       	ldi	r20, 0x01	; 1
    33a2:	6f e0       	ldi	r22, 0x0F	; 15
    33a4:	09 95       	icall
    33a6:	2c 96       	adiw	r28, 0x0c	; 12
    33a8:	0f b6       	in	r0, 0x3f	; 63
    33aa:	f8 94       	cli
    33ac:	de bf       	out	0x3e, r29	; 62
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	cd bf       	out	0x3d, r28	; 61
    33b2:	df 91       	pop	r29
    33b4:	cf 91       	pop	r28
    33b6:	1f 91       	pop	r17
    33b8:	0f 91       	pop	r16
    33ba:	08 95       	ret

000033bc <u8x8_SetupMemory>:
    33bc:	cf 93       	push	r28
    33be:	df 93       	push	r29
    33c0:	00 d0       	rcall	.+0      	; 0x33c2 <u8x8_SetupMemory+0x6>
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	9a 83       	std	Y+2, r25	; 0x02
    33c8:	89 83       	std	Y+1, r24	; 0x01
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	9a 81       	ldd	r25, Y+2	; 0x02
    33ce:	dc 01       	movw	r26, r24
    33d0:	14 96       	adiw	r26, 0x04	; 4
    33d2:	ed 91       	ld	r30, X+
    33d4:	fc 91       	ld	r31, X
    33d6:	15 97       	sbiw	r26, 0x05	; 5
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	9a 81       	ldd	r25, Y+2	; 0x02
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e0       	ldi	r20, 0x00	; 0
    33e2:	69 e0       	ldi	r22, 0x09	; 9
    33e4:	09 95       	icall
    33e6:	00 00       	nop
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	df 91       	pop	r29
    33ee:	cf 91       	pop	r28
    33f0:	08 95       	ret

000033f2 <u8x8_InitDisplay>:
    33f2:	cf 93       	push	r28
    33f4:	df 93       	push	r29
    33f6:	00 d0       	rcall	.+0      	; 0x33f8 <u8x8_InitDisplay+0x6>
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
    33fc:	9a 83       	std	Y+2, r25	; 0x02
    33fe:	89 83       	std	Y+1, r24	; 0x01
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	9a 81       	ldd	r25, Y+2	; 0x02
    3404:	dc 01       	movw	r26, r24
    3406:	14 96       	adiw	r26, 0x04	; 4
    3408:	ed 91       	ld	r30, X+
    340a:	fc 91       	ld	r31, X
    340c:	15 97       	sbiw	r26, 0x05	; 5
    340e:	89 81       	ldd	r24, Y+1	; 0x01
    3410:	9a 81       	ldd	r25, Y+2	; 0x02
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	40 e0       	ldi	r20, 0x00	; 0
    3418:	6a e0       	ldi	r22, 0x0A	; 10
    341a:	09 95       	icall
    341c:	00 00       	nop
    341e:	0f 90       	pop	r0
    3420:	0f 90       	pop	r0
    3422:	df 91       	pop	r29
    3424:	cf 91       	pop	r28
    3426:	08 95       	ret

00003428 <u8x8_SetPowerSave>:
    3428:	cf 93       	push	r28
    342a:	df 93       	push	r29
    342c:	00 d0       	rcall	.+0      	; 0x342e <u8x8_SetPowerSave+0x6>
    342e:	1f 92       	push	r1
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    3434:	9a 83       	std	Y+2, r25	; 0x02
    3436:	89 83       	std	Y+1, r24	; 0x01
    3438:	6b 83       	std	Y+3, r22	; 0x03
    343a:	89 81       	ldd	r24, Y+1	; 0x01
    343c:	9a 81       	ldd	r25, Y+2	; 0x02
    343e:	dc 01       	movw	r26, r24
    3440:	14 96       	adiw	r26, 0x04	; 4
    3442:	ed 91       	ld	r30, X+
    3444:	fc 91       	ld	r31, X
    3446:	15 97       	sbiw	r26, 0x05	; 5
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	9a 81       	ldd	r25, Y+2	; 0x02
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	4b 81       	ldd	r20, Y+3	; 0x03
    3452:	6b e0       	ldi	r22, 0x0B	; 11
    3454:	09 95       	icall
    3456:	00 00       	nop
    3458:	0f 90       	pop	r0
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	df 91       	pop	r29
    3460:	cf 91       	pop	r28
    3462:	08 95       	ret

00003464 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
    3464:	cf 93       	push	r28
    3466:	df 93       	push	r29
    3468:	00 d0       	rcall	.+0      	; 0x346a <u8x8_RefreshDisplay+0x6>
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
    346e:	9a 83       	std	Y+2, r25	; 0x02
    3470:	89 83       	std	Y+1, r24	; 0x01
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	9a 81       	ldd	r25, Y+2	; 0x02
    3476:	dc 01       	movw	r26, r24
    3478:	14 96       	adiw	r26, 0x04	; 4
    347a:	ed 91       	ld	r30, X+
    347c:	fc 91       	ld	r31, X
    347e:	15 97       	sbiw	r26, 0x05	; 5
    3480:	89 81       	ldd	r24, Y+1	; 0x01
    3482:	9a 81       	ldd	r25, Y+2	; 0x02
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	40 e0       	ldi	r20, 0x00	; 0
    348a:	60 e1       	ldi	r22, 0x10	; 16
    348c:	09 95       	icall
}
    348e:	00 00       	nop
    3490:	0f 90       	pop	r0
    3492:	0f 90       	pop	r0
    3494:	df 91       	pop	r29
    3496:	cf 91       	pop	r28
    3498:	08 95       	ret

0000349a <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    349a:	cf 93       	push	r28
    349c:	df 93       	push	r29
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    34a2:	2a 97       	sbiw	r28, 0x0a	; 10
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	9e 83       	std	Y+6, r25	; 0x06
    34b0:	8d 83       	std	Y+5, r24	; 0x05
    34b2:	6f 83       	std	Y+7, r22	; 0x07
    34b4:	48 87       	std	Y+8, r20	; 0x08
    34b6:	3a 87       	std	Y+10, r19	; 0x0a
    34b8:	29 87       	std	Y+9, r18	; 0x09
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    34ba:	8f 81       	ldd	r24, Y+7	; 0x07
    34bc:	88 2f       	mov	r24, r24
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	8d 30       	cpi	r24, 0x0D	; 13
    34c2:	91 05       	cpc	r25, r1
    34c4:	e1 f0       	breq	.+56     	; 0x34fe <u8x8_d_ssd1306_sh1106_generic+0x64>
    34c6:	8e 30       	cpi	r24, 0x0E	; 14
    34c8:	91 05       	cpc	r25, r1
    34ca:	1c f4       	brge	.+6      	; 0x34d2 <u8x8_d_ssd1306_sh1106_generic+0x38>
    34cc:	0b 97       	sbiw	r24, 0x0b	; 11
    34ce:	41 f0       	breq	.+16     	; 0x34e0 <u8x8_d_ssd1306_sh1106_generic+0x46>
    34d0:	9d c0       	rjmp	.+314    	; 0x360c <u8x8_d_ssd1306_sh1106_generic+0x172>
    34d2:	8e 30       	cpi	r24, 0x0E	; 14
    34d4:	91 05       	cpc	r25, r1
    34d6:	c1 f1       	breq	.+112    	; 0x3548 <u8x8_d_ssd1306_sh1106_generic+0xae>
    34d8:	0f 97       	sbiw	r24, 0x0f	; 15
    34da:	09 f4       	brne	.+2      	; 0x34de <u8x8_d_ssd1306_sh1106_generic+0x44>
    34dc:	44 c0       	rjmp	.+136    	; 0x3566 <u8x8_d_ssd1306_sh1106_generic+0xcc>
    34de:	96 c0       	rjmp	.+300    	; 0x360c <u8x8_d_ssd1306_sh1106_generic+0x172>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    34e0:	88 85       	ldd	r24, Y+8	; 0x08
    34e2:	88 23       	and	r24, r24
    34e4:	31 f4       	brne	.+12     	; 0x34f2 <u8x8_d_ssd1306_sh1106_generic+0x58>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
    34e6:	8d 81       	ldd	r24, Y+5	; 0x05
    34e8:	9e 81       	ldd	r25, Y+6	; 0x06
    34ea:	67 e4       	ldi	r22, 0x47	; 71
    34ec:	71 e0       	ldi	r23, 0x01	; 1
    34ee:	5d dd       	rcall	.-1350   	; 0x2faa <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    34f0:	8f c0       	rjmp	.+286    	; 0x3610 <u8x8_d_ssd1306_sh1106_generic+0x176>
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
    34f2:	8d 81       	ldd	r24, Y+5	; 0x05
    34f4:	9e 81       	ldd	r25, Y+6	; 0x06
    34f6:	6c e4       	ldi	r22, 0x4C	; 76
    34f8:	71 e0       	ldi	r23, 0x01	; 1
    34fa:	57 dd       	rcall	.-1362   	; 0x2faa <u8x8_cad_SendSequence>
      break;
    34fc:	89 c0       	rjmp	.+274    	; 0x3610 <u8x8_d_ssd1306_sh1106_generic+0x176>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    34fe:	88 85       	ldd	r24, Y+8	; 0x08
    3500:	88 23       	and	r24, r24
    3502:	89 f4       	brne	.+34     	; 0x3526 <u8x8_d_ssd1306_sh1106_generic+0x8c>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
    3504:	8d 81       	ldd	r24, Y+5	; 0x05
    3506:	9e 81       	ldd	r25, Y+6	; 0x06
    3508:	61 e5       	ldi	r22, 0x51	; 81
    350a:	71 e0       	ldi	r23, 0x01	; 1
    350c:	4e dd       	rcall	.-1380   	; 0x2faa <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    350e:	8d 81       	ldd	r24, Y+5	; 0x05
    3510:	9e 81       	ldd	r25, Y+6	; 0x06
    3512:	fc 01       	movw	r30, r24
    3514:	80 81       	ld	r24, Z
    3516:	91 81       	ldd	r25, Z+1	; 0x01
    3518:	fc 01       	movw	r30, r24
    351a:	22 89       	ldd	r18, Z+18	; 0x12
    351c:	8d 81       	ldd	r24, Y+5	; 0x05
    351e:	9e 81       	ldd	r25, Y+6	; 0x06
    3520:	fc 01       	movw	r30, r24
    3522:	24 8b       	std	Z+20, r18	; 0x14
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
    3524:	75 c0       	rjmp	.+234    	; 0x3610 <u8x8_d_ssd1306_sh1106_generic+0x176>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
    3526:	8d 81       	ldd	r24, Y+5	; 0x05
    3528:	9e 81       	ldd	r25, Y+6	; 0x06
    352a:	68 e5       	ldi	r22, 0x58	; 88
    352c:	71 e0       	ldi	r23, 0x01	; 1
    352e:	3d dd       	rcall	.-1414   	; 0x2faa <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    3530:	8d 81       	ldd	r24, Y+5	; 0x05
    3532:	9e 81       	ldd	r25, Y+6	; 0x06
    3534:	fc 01       	movw	r30, r24
    3536:	80 81       	ld	r24, Z
    3538:	91 81       	ldd	r25, Z+1	; 0x01
    353a:	fc 01       	movw	r30, r24
    353c:	23 89       	ldd	r18, Z+19	; 0x13
    353e:	8d 81       	ldd	r24, Y+5	; 0x05
    3540:	9e 81       	ldd	r25, Y+6	; 0x06
    3542:	fc 01       	movw	r30, r24
      }
      break;
    3544:	24 8b       	std	Z+20, r18	; 0x14
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    3546:	64 c0       	rjmp	.+200    	; 0x3610 <u8x8_d_ssd1306_sh1106_generic+0x176>
    3548:	8d 81       	ldd	r24, Y+5	; 0x05
    354a:	9e 81       	ldd	r25, Y+6	; 0x06
      u8x8_cad_SendCmd(u8x8, 0x081 );
    354c:	fa dc       	rcall	.-1548   	; 0x2f42 <u8x8_cad_StartTransfer>
    354e:	8d 81       	ldd	r24, Y+5	; 0x05
    3550:	9e 81       	ldd	r25, Y+6	; 0x06
    3552:	61 e8       	ldi	r22, 0x81	; 129
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    3554:	9a dc       	rcall	.-1740   	; 0x2e8a <u8x8_cad_SendCmd>
    3556:	8d 81       	ldd	r24, Y+5	; 0x05
    3558:	9e 81       	ldd	r25, Y+6	; 0x06
    355a:	68 85       	ldd	r22, Y+8	; 0x08
      u8x8_cad_EndTransfer(u8x8);
    355c:	b3 dc       	rcall	.-1690   	; 0x2ec4 <u8x8_cad_SendArg>
    355e:	8d 81       	ldd	r24, Y+5	; 0x05
    3560:	9e 81       	ldd	r25, Y+6	; 0x06
    3562:	09 dd       	rcall	.-1518   	; 0x2f76 <u8x8_cad_EndTransfer>
      break;
    3564:	55 c0       	rjmp	.+170    	; 0x3610 <u8x8_d_ssd1306_sh1106_generic+0x176>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    3566:	8d 81       	ldd	r24, Y+5	; 0x05
    3568:	9e 81       	ldd	r25, Y+6	; 0x06
    356a:	eb dc       	rcall	.-1578   	; 0x2f42 <u8x8_cad_StartTransfer>
    356c:	89 85       	ldd	r24, Y+9	; 0x09
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    356e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3570:	fc 01       	movw	r30, r24
    3572:	83 81       	ldd	r24, Z+3	; 0x03
    3574:	89 83       	std	Y+1, r24	; 0x01
    3576:	89 81       	ldd	r24, Y+1	; 0x01
      x *= 8;
    3578:	88 0f       	add	r24, r24
    357a:	88 0f       	add	r24, r24
    357c:	88 0f       	add	r24, r24
    357e:	89 83       	std	Y+1, r24	; 0x01
    3580:	8d 81       	ldd	r24, Y+5	; 0x05
      x += u8x8->x_offset;
    3582:	9e 81       	ldd	r25, Y+6	; 0x06
    3584:	fc 01       	movw	r30, r24
    3586:	84 89       	ldd	r24, Z+20	; 0x14
    3588:	99 81       	ldd	r25, Y+1	; 0x01
    358a:	89 0f       	add	r24, r25
    358c:	89 83       	std	Y+1, r24	; 0x01
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    358e:	8d 81       	ldd	r24, Y+5	; 0x05
    3590:	9e 81       	ldd	r25, Y+6	; 0x06
    3592:	60 e4       	ldi	r22, 0x40	; 64
    3594:	7a dc       	rcall	.-1804   	; 0x2e8a <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	82 95       	swap	r24
    359a:	8f 70       	andi	r24, 0x0F	; 15
    359c:	28 2f       	mov	r18, r24
    359e:	20 61       	ori	r18, 0x10	; 16
    35a0:	8d 81       	ldd	r24, Y+5	; 0x05
    35a2:	9e 81       	ldd	r25, Y+6	; 0x06
    35a4:	62 2f       	mov	r22, r18
    35a6:	71 dc       	rcall	.-1822   	; 0x2e8a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	28 2f       	mov	r18, r24
    35ac:	2f 70       	andi	r18, 0x0F	; 15
    35ae:	8d 81       	ldd	r24, Y+5	; 0x05
    35b0:	9e 81       	ldd	r25, Y+6	; 0x06
    35b2:	62 2f       	mov	r22, r18
    35b4:	87 dc       	rcall	.-1778   	; 0x2ec4 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
    35b6:	89 85       	ldd	r24, Y+9	; 0x09
    35b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ba:	fc 01       	movw	r30, r24
    35bc:	84 81       	ldd	r24, Z+4	; 0x04
    35be:	28 2f       	mov	r18, r24
    35c0:	20 6b       	ori	r18, 0xB0	; 176
    35c2:	8d 81       	ldd	r24, Y+5	; 0x05
    35c4:	9e 81       	ldd	r25, Y+6	; 0x06
    35c6:	62 2f       	mov	r22, r18
    35c8:	7d dc       	rcall	.-1798   	; 0x2ec4 <u8x8_cad_SendArg>
    35ca:	89 85       	ldd	r24, Y+9	; 0x09

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
    35cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ce:	fc 01       	movw	r30, r24
    35d0:	82 81       	ldd	r24, Z+2	; 0x02
    35d2:	8a 83       	std	Y+2, r24	; 0x02
    35d4:	89 85       	ldd	r24, Y+9	; 0x09
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
    35d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d8:	fc 01       	movw	r30, r24
    35da:	80 81       	ld	r24, Z
    35dc:	91 81       	ldd	r25, Z+1	; 0x01
    35de:	9c 83       	std	Y+4, r25	; 0x04
    35e0:	8b 83       	std	Y+3, r24	; 0x03
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    35e2:	8a 81       	ldd	r24, Y+2	; 0x02
    35e4:	68 2f       	mov	r22, r24
    35e6:	66 0f       	add	r22, r22
    35e8:	66 0f       	add	r22, r22
    35ea:	66 0f       	add	r22, r22
    35ec:	2b 81       	ldd	r18, Y+3	; 0x03
    35ee:	3c 81       	ldd	r19, Y+4	; 0x04
    35f0:	8d 81       	ldd	r24, Y+5	; 0x05
    35f2:	9e 81       	ldd	r25, Y+6	; 0x06
    35f4:	a9 01       	movw	r20, r18
    35f6:	83 dc       	rcall	.-1786   	; 0x2efe <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    35f8:	88 85       	ldd	r24, Y+8	; 0x08
    35fa:	81 50       	subi	r24, 0x01	; 1
    35fc:	88 87       	std	Y+8, r24	; 0x08
      } while( arg_int > 0 );
    35fe:	88 85       	ldd	r24, Y+8	; 0x08
    3600:	88 23       	and	r24, r24
    3602:	19 f7       	brne	.-58     	; 0x35ca <u8x8_d_ssd1306_sh1106_generic+0x130>
      
      u8x8_cad_EndTransfer(u8x8);
    3604:	8d 81       	ldd	r24, Y+5	; 0x05
    3606:	9e 81       	ldd	r25, Y+6	; 0x06
    3608:	b6 dc       	rcall	.-1684   	; 0x2f76 <u8x8_cad_EndTransfer>
    360a:	02 c0       	rjmp	.+4      	; 0x3610 <u8x8_d_ssd1306_sh1106_generic+0x176>
      break;
    360c:	80 e0       	ldi	r24, 0x00	; 0
    default:
      return 0;
    360e:	01 c0       	rjmp	.+2      	; 0x3612 <u8x8_d_ssd1306_sh1106_generic+0x178>
    3610:	81 e0       	ldi	r24, 0x01	; 1
  }
  return 1;
    3612:	2a 96       	adiw	r28, 0x0a	; 10
}
    3614:	0f b6       	in	r0, 0x3f	; 63
    3616:	f8 94       	cli
    3618:	de bf       	out	0x3e, r29	; 62
    361a:	0f be       	out	0x3f, r0	; 63
    361c:	cd bf       	out	0x3d, r28	; 61
    361e:	df 91       	pop	r29
    3620:	cf 91       	pop	r28
    3622:	08 95       	ret

00003624 <u8x8_d_ssd1306_128x64_noname>:
    3624:	cf 93       	push	r28
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3626:	df 93       	push	r29
    3628:	00 d0       	rcall	.+0      	; 0x362a <u8x8_d_ssd1306_128x64_noname+0x6>
    362a:	00 d0       	rcall	.+0      	; 0x362c <u8x8_d_ssd1306_128x64_noname+0x8>
    362c:	00 d0       	rcall	.+0      	; 0x362e <u8x8_d_ssd1306_128x64_noname+0xa>
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62
    3632:	9a 83       	std	Y+2, r25	; 0x02
    3634:	89 83       	std	Y+1, r24	; 0x01
    3636:	6b 83       	std	Y+3, r22	; 0x03
    3638:	4c 83       	std	Y+4, r20	; 0x04
    363a:	3e 83       	std	Y+6, r19	; 0x06
    363c:	2d 83       	std	Y+5, r18	; 0x05
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    363e:	2d 81       	ldd	r18, Y+5	; 0x05
    3640:	3e 81       	ldd	r19, Y+6	; 0x06
    3642:	89 81       	ldd	r24, Y+1	; 0x01
    3644:	9a 81       	ldd	r25, Y+2	; 0x02
    3646:	4c 81       	ldd	r20, Y+4	; 0x04
    3648:	6b 81       	ldd	r22, Y+3	; 0x03
    364a:	27 df       	rcall	.-434    	; 0x349a <u8x8_d_ssd1306_sh1106_generic>
    364c:	88 23       	and	r24, r24
    364e:	11 f0       	breq	.+4      	; 0x3654 <u8x8_d_ssd1306_128x64_noname+0x30>
    return 1;
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	1a c0       	rjmp	.+52     	; 0x3688 <u8x8_d_ssd1306_128x64_noname+0x64>
  
  switch(msg)
    3654:	8b 81       	ldd	r24, Y+3	; 0x03
    3656:	88 2f       	mov	r24, r24
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	89 30       	cpi	r24, 0x09	; 9
    365c:	91 05       	cpc	r25, r1
    365e:	59 f0       	breq	.+22     	; 0x3676 <u8x8_d_ssd1306_128x64_noname+0x52>
    3660:	0a 97       	sbiw	r24, 0x0a	; 10
    3662:	79 f4       	brne	.+30     	; 0x3682 <u8x8_d_ssd1306_128x64_noname+0x5e>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	9a 81       	ldd	r25, Y+2	; 0x02
    3668:	13 de       	rcall	.-986    	; 0x3290 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	9a 81       	ldd	r25, Y+2	; 0x02
    366e:	62 e1       	ldi	r22, 0x12	; 18
    3670:	71 e0       	ldi	r23, 0x01	; 1
    3672:	9b dc       	rcall	.-1738   	; 0x2faa <u8x8_cad_SendSequence>
      break;
    3674:	08 c0       	rjmp	.+16     	; 0x3686 <u8x8_d_ssd1306_128x64_noname+0x62>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    3676:	89 81       	ldd	r24, Y+1	; 0x01
    3678:	9a 81       	ldd	r25, Y+2	; 0x02
    367a:	6f e5       	ldi	r22, 0x5F	; 95
    367c:	71 e0       	ldi	r23, 0x01	; 1
    367e:	e4 dd       	rcall	.-1080   	; 0x3248 <u8x8_d_helper_display_setup_memory>
      break;
    3680:	02 c0       	rjmp	.+4      	; 0x3686 <u8x8_d_ssd1306_128x64_noname+0x62>
    default:
      return 0;
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	01 c0       	rjmp	.+2      	; 0x3688 <u8x8_d_ssd1306_128x64_noname+0x64>
  }
  return 1;
    3686:	81 e0       	ldi	r24, 0x01	; 1
}
    3688:	26 96       	adiw	r28, 0x06	; 6
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	f8 94       	cli
    368e:	de bf       	out	0x3e, r29	; 62
    3690:	0f be       	out	0x3f, r0	; 63
    3692:	cd bf       	out	0x3d, r28	; 61
    3694:	df 91       	pop	r29
    3696:	cf 91       	pop	r28
    3698:	08 95       	ret

0000369a <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
    369a:	cf 93       	push	r28
    369c:	df 93       	push	r29
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <u8x8_gpio_call+0x6>
    36a0:	00 d0       	rcall	.+0      	; 0x36a2 <u8x8_gpio_call+0x8>
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62
    36a6:	9a 83       	std	Y+2, r25	; 0x02
    36a8:	89 83       	std	Y+1, r24	; 0x01
    36aa:	6b 83       	std	Y+3, r22	; 0x03
    36ac:	4c 83       	std	Y+4, r20	; 0x04
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
    36b0:	9a 81       	ldd	r25, Y+2	; 0x02
    36b2:	dc 01       	movw	r26, r24
    36b4:	1a 96       	adiw	r26, 0x0a	; 10
    36b6:	ed 91       	ld	r30, X+
    36b8:	fc 91       	ld	r31, X
    36ba:	1b 97       	sbiw	r26, 0x0b	; 11
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
    36be:	9a 81       	ldd	r25, Y+2	; 0x02
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	4c 81       	ldd	r20, Y+4	; 0x04
    36c6:	6b 81       	ldd	r22, Y+3	; 0x03
    36c8:	09 95       	icall
}
    36ca:	00 00       	nop
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	df 91       	pop	r29
    36d6:	cf 91       	pop	r28
    36d8:	08 95       	ret

000036da <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    36da:	cf 93       	push	r28
    36dc:	df 93       	push	r29
    36de:	00 d0       	rcall	.+0      	; 0x36e0 <u8x8_dummy_cb+0x6>
    36e0:	00 d0       	rcall	.+0      	; 0x36e2 <u8x8_dummy_cb+0x8>
    36e2:	00 d0       	rcall	.+0      	; 0x36e4 <u8x8_dummy_cb+0xa>
    36e4:	cd b7       	in	r28, 0x3d	; 61
    36e6:	de b7       	in	r29, 0x3e	; 62
    36e8:	9a 83       	std	Y+2, r25	; 0x02
    36ea:	89 83       	std	Y+1, r24	; 0x01
    36ec:	6b 83       	std	Y+3, r22	; 0x03
    36ee:	4c 83       	std	Y+4, r20	; 0x04
    36f0:	3e 83       	std	Y+6, r19	; 0x06
    36f2:	2d 83       	std	Y+5, r18	; 0x05
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	26 96       	adiw	r28, 0x06	; 6
    36f8:	0f b6       	in	r0, 0x3f	; 63
    36fa:	f8 94       	cli
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	cd bf       	out	0x3d, r28	; 61
    3702:	df 91       	pop	r29
    3704:	cf 91       	pop	r28
    3706:	08 95       	ret

00003708 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    3708:	cf 93       	push	r28
    370a:	df 93       	push	r29
    370c:	00 d0       	rcall	.+0      	; 0x370e <u8x8_SetupDefaults+0x6>
    370e:	cd b7       	in	r28, 0x3d	; 61
    3710:	de b7       	in	r29, 0x3e	; 62
    3712:	9a 83       	std	Y+2, r25	; 0x02
    3714:	89 83       	std	Y+1, r24	; 0x01
    u8x8->display_info = NULL;
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	9a 81       	ldd	r25, Y+2	; 0x02
    371a:	fc 01       	movw	r30, r24
    371c:	11 82       	std	Z+1, r1	; 0x01
    371e:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    3720:	89 81       	ldd	r24, Y+1	; 0x01
    3722:	9a 81       	ldd	r25, Y+2	; 0x02
    3724:	2d e6       	ldi	r18, 0x6D	; 109
    3726:	3b e1       	ldi	r19, 0x1B	; 27
    3728:	fc 01       	movw	r30, r24
    372a:	35 83       	std	Z+5, r19	; 0x05
    372c:	24 83       	std	Z+4, r18	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    372e:	89 81       	ldd	r24, Y+1	; 0x01
    3730:	9a 81       	ldd	r25, Y+2	; 0x02
    3732:	2d e6       	ldi	r18, 0x6D	; 109
    3734:	3b e1       	ldi	r19, 0x1B	; 27
    3736:	fc 01       	movw	r30, r24
    3738:	37 83       	std	Z+7, r19	; 0x07
    373a:	26 83       	std	Z+6, r18	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	9a 81       	ldd	r25, Y+2	; 0x02
    3740:	2d e6       	ldi	r18, 0x6D	; 109
    3742:	3b e1       	ldi	r19, 0x1B	; 27
    3744:	fc 01       	movw	r30, r24
    3746:	31 87       	std	Z+9, r19	; 0x09
    3748:	20 87       	std	Z+8, r18	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    374a:	89 81       	ldd	r24, Y+1	; 0x01
    374c:	9a 81       	ldd	r25, Y+2	; 0x02
    374e:	2d e6       	ldi	r18, 0x6D	; 109
    3750:	3b e1       	ldi	r19, 0x1B	; 27
    3752:	fc 01       	movw	r30, r24
    3754:	33 87       	std	Z+11, r19	; 0x0b
    3756:	22 87       	std	Z+10, r18	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    3758:	89 81       	ldd	r24, Y+1	; 0x01
    375a:	9a 81       	ldd	r25, Y+2	; 0x02
    375c:	fc 01       	movw	r30, r24
    375e:	15 8a       	std	Z+21, r1	; 0x15
    u8x8->device_address = 0;
    3760:	89 81       	ldd	r24, Y+1	; 0x01
    3762:	9a 81       	ldd	r25, Y+2	; 0x02
    3764:	fc 01       	movw	r30, r24
    3766:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	9a 81       	ldd	r25, Y+2	; 0x02
    376c:	fc 01       	movw	r30, r24
    376e:	11 8e       	std	Z+25, r1	; 0x19
    u8x8->bus_clock = 0;		/* issue 769 */
    3770:	89 81       	ldd	r24, Y+1	; 0x01
    3772:	9a 81       	ldd	r25, Y+2	; 0x02
    3774:	fc 01       	movw	r30, r24
    3776:	14 86       	std	Z+12, r1	; 0x0c
    3778:	15 86       	std	Z+13, r1	; 0x0d
    377a:	16 86       	std	Z+14, r1	; 0x0e
    377c:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	9a 81       	ldd	r25, Y+2	; 0x02
    3782:	2f ef       	ldi	r18, 0xFF	; 255
    3784:	fc 01       	movw	r30, r24
    3786:	26 8b       	std	Z+22, r18	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	9a 81       	ldd	r25, Y+2	; 0x02
    378c:	2f ef       	ldi	r18, 0xFF	; 255
    378e:	fc 01       	movw	r30, r24
    3790:	23 8f       	std	Z+27, r18	; 0x1b
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
    3792:	00 00       	nop
    3794:	0f 90       	pop	r0
    3796:	0f 90       	pop	r0
    3798:	df 91       	pop	r29
    379a:	cf 91       	pop	r28
    379c:	08 95       	ret

0000379e <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    379e:	0f 93       	push	r16
    37a0:	1f 93       	push	r17
    37a2:	cf 93       	push	r28
    37a4:	df 93       	push	r29
    37a6:	cd b7       	in	r28, 0x3d	; 61
    37a8:	de b7       	in	r29, 0x3e	; 62
    37aa:	2a 97       	sbiw	r28, 0x0a	; 10
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	de bf       	out	0x3e, r29	; 62
    37b2:	0f be       	out	0x3f, r0	; 63
    37b4:	cd bf       	out	0x3d, r28	; 61
    37b6:	9a 83       	std	Y+2, r25	; 0x02
    37b8:	89 83       	std	Y+1, r24	; 0x01
    37ba:	7c 83       	std	Y+4, r23	; 0x04
    37bc:	6b 83       	std	Y+3, r22	; 0x03
    37be:	5e 83       	std	Y+6, r21	; 0x06
    37c0:	4d 83       	std	Y+5, r20	; 0x05
    37c2:	38 87       	std	Y+8, r19	; 0x08
    37c4:	2f 83       	std	Y+7, r18	; 0x07
    37c6:	1a 87       	std	Y+10, r17	; 0x0a
    37c8:	09 87       	std	Y+9, r16	; 0x09
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    37ca:	89 81       	ldd	r24, Y+1	; 0x01
    37cc:	9a 81       	ldd	r25, Y+2	; 0x02
    37ce:	9c df       	rcall	.-200    	; 0x3708 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    37d0:	89 81       	ldd	r24, Y+1	; 0x01
    37d2:	9a 81       	ldd	r25, Y+2	; 0x02
    37d4:	2b 81       	ldd	r18, Y+3	; 0x03
    37d6:	3c 81       	ldd	r19, Y+4	; 0x04
    37d8:	fc 01       	movw	r30, r24
    37da:	35 83       	std	Z+5, r19	; 0x05
    37dc:	24 83       	std	Z+4, r18	; 0x04
  u8x8->cad_cb = cad_cb;
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	9a 81       	ldd	r25, Y+2	; 0x02
    37e2:	2d 81       	ldd	r18, Y+5	; 0x05
    37e4:	3e 81       	ldd	r19, Y+6	; 0x06
    37e6:	fc 01       	movw	r30, r24
    37e8:	37 83       	std	Z+7, r19	; 0x07
    37ea:	26 83       	std	Z+6, r18	; 0x06
  u8x8->byte_cb = byte_cb;
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
    37ee:	9a 81       	ldd	r25, Y+2	; 0x02
    37f0:	2f 81       	ldd	r18, Y+7	; 0x07
    37f2:	38 85       	ldd	r19, Y+8	; 0x08
    37f4:	fc 01       	movw	r30, r24
    37f6:	31 87       	std	Z+9, r19	; 0x09
    37f8:	20 87       	std	Z+8, r18	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    37fa:	89 81       	ldd	r24, Y+1	; 0x01
    37fc:	9a 81       	ldd	r25, Y+2	; 0x02
    37fe:	29 85       	ldd	r18, Y+9	; 0x09
    3800:	3a 85       	ldd	r19, Y+10	; 0x0a
    3802:	fc 01       	movw	r30, r24
    3804:	33 87       	std	Z+11, r19	; 0x0b
    3806:	22 87       	std	Z+10, r18	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	9a 81       	ldd	r25, Y+2	; 0x02
    380c:	d7 dd       	rcall	.-1106   	; 0x33bc <u8x8_SetupMemory>
}
    380e:	00 00       	nop
    3810:	2a 96       	adiw	r28, 0x0a	; 10
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	f8 94       	cli
    3816:	de bf       	out	0x3e, r29	; 62
    3818:	0f be       	out	0x3f, r0	; 63
    381a:	cd bf       	out	0x3d, r28	; 61
    381c:	df 91       	pop	r29
    381e:	cf 91       	pop	r28
    3820:	1f 91       	pop	r17
    3822:	0f 91       	pop	r16
    3824:	08 95       	ret

00003826 <__cmpsf2>:
    3826:	97 d0       	rcall	.+302    	; 0x3956 <__fp_cmp>
    3828:	08 f4       	brcc	.+2      	; 0x382c <__cmpsf2+0x6>
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	08 95       	ret

0000382e <__divsf3>:
    382e:	0c d0       	rcall	.+24     	; 0x3848 <__divsf3x>
    3830:	cd c0       	rjmp	.+410    	; 0x39cc <__fp_round>
    3832:	c5 d0       	rcall	.+394    	; 0x39be <__fp_pscB>
    3834:	40 f0       	brcs	.+16     	; 0x3846 <__divsf3+0x18>
    3836:	bc d0       	rcall	.+376    	; 0x39b0 <__fp_pscA>
    3838:	30 f0       	brcs	.+12     	; 0x3846 <__divsf3+0x18>
    383a:	21 f4       	brne	.+8      	; 0x3844 <__divsf3+0x16>
    383c:	5f 3f       	cpi	r21, 0xFF	; 255
    383e:	19 f0       	breq	.+6      	; 0x3846 <__divsf3+0x18>
    3840:	ae c0       	rjmp	.+348    	; 0x399e <__fp_inf>
    3842:	51 11       	cpse	r21, r1
    3844:	f7 c0       	rjmp	.+494    	; 0x3a34 <__fp_szero>
    3846:	b1 c0       	rjmp	.+354    	; 0x39aa <__fp_nan>

00003848 <__divsf3x>:
    3848:	d2 d0       	rcall	.+420    	; 0x39ee <__fp_split3>
    384a:	98 f3       	brcs	.-26     	; 0x3832 <__divsf3+0x4>

0000384c <__divsf3_pse>:
    384c:	99 23       	and	r25, r25
    384e:	c9 f3       	breq	.-14     	; 0x3842 <__divsf3+0x14>
    3850:	55 23       	and	r21, r21
    3852:	b1 f3       	breq	.-20     	; 0x3840 <__divsf3+0x12>
    3854:	95 1b       	sub	r25, r21
    3856:	55 0b       	sbc	r21, r21
    3858:	bb 27       	eor	r27, r27
    385a:	aa 27       	eor	r26, r26
    385c:	62 17       	cp	r22, r18
    385e:	73 07       	cpc	r23, r19
    3860:	84 07       	cpc	r24, r20
    3862:	38 f0       	brcs	.+14     	; 0x3872 <__divsf3_pse+0x26>
    3864:	9f 5f       	subi	r25, 0xFF	; 255
    3866:	5f 4f       	sbci	r21, 0xFF	; 255
    3868:	22 0f       	add	r18, r18
    386a:	33 1f       	adc	r19, r19
    386c:	44 1f       	adc	r20, r20
    386e:	aa 1f       	adc	r26, r26
    3870:	a9 f3       	breq	.-22     	; 0x385c <__divsf3_pse+0x10>
    3872:	33 d0       	rcall	.+102    	; 0x38da <__divsf3_pse+0x8e>
    3874:	0e 2e       	mov	r0, r30
    3876:	3a f0       	brmi	.+14     	; 0x3886 <__divsf3_pse+0x3a>
    3878:	e0 e8       	ldi	r30, 0x80	; 128
    387a:	30 d0       	rcall	.+96     	; 0x38dc <__divsf3_pse+0x90>
    387c:	91 50       	subi	r25, 0x01	; 1
    387e:	50 40       	sbci	r21, 0x00	; 0
    3880:	e6 95       	lsr	r30
    3882:	00 1c       	adc	r0, r0
    3884:	ca f7       	brpl	.-14     	; 0x3878 <__divsf3_pse+0x2c>
    3886:	29 d0       	rcall	.+82     	; 0x38da <__divsf3_pse+0x8e>
    3888:	fe 2f       	mov	r31, r30
    388a:	27 d0       	rcall	.+78     	; 0x38da <__divsf3_pse+0x8e>
    388c:	66 0f       	add	r22, r22
    388e:	77 1f       	adc	r23, r23
    3890:	88 1f       	adc	r24, r24
    3892:	bb 1f       	adc	r27, r27
    3894:	26 17       	cp	r18, r22
    3896:	37 07       	cpc	r19, r23
    3898:	48 07       	cpc	r20, r24
    389a:	ab 07       	cpc	r26, r27
    389c:	b0 e8       	ldi	r27, 0x80	; 128
    389e:	09 f0       	breq	.+2      	; 0x38a2 <__divsf3_pse+0x56>
    38a0:	bb 0b       	sbc	r27, r27
    38a2:	80 2d       	mov	r24, r0
    38a4:	bf 01       	movw	r22, r30
    38a6:	ff 27       	eor	r31, r31
    38a8:	93 58       	subi	r25, 0x83	; 131
    38aa:	5f 4f       	sbci	r21, 0xFF	; 255
    38ac:	2a f0       	brmi	.+10     	; 0x38b8 <__divsf3_pse+0x6c>
    38ae:	9e 3f       	cpi	r25, 0xFE	; 254
    38b0:	51 05       	cpc	r21, r1
    38b2:	68 f0       	brcs	.+26     	; 0x38ce <__divsf3_pse+0x82>
    38b4:	74 c0       	rjmp	.+232    	; 0x399e <__fp_inf>
    38b6:	be c0       	rjmp	.+380    	; 0x3a34 <__fp_szero>
    38b8:	5f 3f       	cpi	r21, 0xFF	; 255
    38ba:	ec f3       	brlt	.-6      	; 0x38b6 <__divsf3_pse+0x6a>
    38bc:	98 3e       	cpi	r25, 0xE8	; 232
    38be:	dc f3       	brlt	.-10     	; 0x38b6 <__divsf3_pse+0x6a>
    38c0:	86 95       	lsr	r24
    38c2:	77 95       	ror	r23
    38c4:	67 95       	ror	r22
    38c6:	b7 95       	ror	r27
    38c8:	f7 95       	ror	r31
    38ca:	9f 5f       	subi	r25, 0xFF	; 255
    38cc:	c9 f7       	brne	.-14     	; 0x38c0 <__divsf3_pse+0x74>
    38ce:	88 0f       	add	r24, r24
    38d0:	91 1d       	adc	r25, r1
    38d2:	96 95       	lsr	r25
    38d4:	87 95       	ror	r24
    38d6:	97 f9       	bld	r25, 7
    38d8:	08 95       	ret
    38da:	e1 e0       	ldi	r30, 0x01	; 1
    38dc:	66 0f       	add	r22, r22
    38de:	77 1f       	adc	r23, r23
    38e0:	88 1f       	adc	r24, r24
    38e2:	bb 1f       	adc	r27, r27
    38e4:	62 17       	cp	r22, r18
    38e6:	73 07       	cpc	r23, r19
    38e8:	84 07       	cpc	r24, r20
    38ea:	ba 07       	cpc	r27, r26
    38ec:	20 f0       	brcs	.+8      	; 0x38f6 <__divsf3_pse+0xaa>
    38ee:	62 1b       	sub	r22, r18
    38f0:	73 0b       	sbc	r23, r19
    38f2:	84 0b       	sbc	r24, r20
    38f4:	ba 0b       	sbc	r27, r26
    38f6:	ee 1f       	adc	r30, r30
    38f8:	88 f7       	brcc	.-30     	; 0x38dc <__divsf3_pse+0x90>
    38fa:	e0 95       	com	r30
    38fc:	08 95       	ret

000038fe <__fixunssfsi>:
    38fe:	7f d0       	rcall	.+254    	; 0x39fe <__fp_splitA>
    3900:	88 f0       	brcs	.+34     	; 0x3924 <__fixunssfsi+0x26>
    3902:	9f 57       	subi	r25, 0x7F	; 127
    3904:	90 f0       	brcs	.+36     	; 0x392a <__fixunssfsi+0x2c>
    3906:	b9 2f       	mov	r27, r25
    3908:	99 27       	eor	r25, r25
    390a:	b7 51       	subi	r27, 0x17	; 23
    390c:	a0 f0       	brcs	.+40     	; 0x3936 <__fixunssfsi+0x38>
    390e:	d1 f0       	breq	.+52     	; 0x3944 <__fixunssfsi+0x46>
    3910:	66 0f       	add	r22, r22
    3912:	77 1f       	adc	r23, r23
    3914:	88 1f       	adc	r24, r24
    3916:	99 1f       	adc	r25, r25
    3918:	1a f0       	brmi	.+6      	; 0x3920 <__fixunssfsi+0x22>
    391a:	ba 95       	dec	r27
    391c:	c9 f7       	brne	.-14     	; 0x3910 <__fixunssfsi+0x12>
    391e:	12 c0       	rjmp	.+36     	; 0x3944 <__fixunssfsi+0x46>
    3920:	b1 30       	cpi	r27, 0x01	; 1
    3922:	81 f0       	breq	.+32     	; 0x3944 <__fixunssfsi+0x46>
    3924:	86 d0       	rcall	.+268    	; 0x3a32 <__fp_zero>
    3926:	b1 e0       	ldi	r27, 0x01	; 1
    3928:	08 95       	ret
    392a:	83 c0       	rjmp	.+262    	; 0x3a32 <__fp_zero>
    392c:	67 2f       	mov	r22, r23
    392e:	78 2f       	mov	r23, r24
    3930:	88 27       	eor	r24, r24
    3932:	b8 5f       	subi	r27, 0xF8	; 248
    3934:	39 f0       	breq	.+14     	; 0x3944 <__fixunssfsi+0x46>
    3936:	b9 3f       	cpi	r27, 0xF9	; 249
    3938:	cc f3       	brlt	.-14     	; 0x392c <__fixunssfsi+0x2e>
    393a:	86 95       	lsr	r24
    393c:	77 95       	ror	r23
    393e:	67 95       	ror	r22
    3940:	b3 95       	inc	r27
    3942:	d9 f7       	brne	.-10     	; 0x393a <__fixunssfsi+0x3c>
    3944:	3e f4       	brtc	.+14     	; 0x3954 <__fixunssfsi+0x56>
    3946:	90 95       	com	r25
    3948:	80 95       	com	r24
    394a:	70 95       	com	r23
    394c:	61 95       	neg	r22
    394e:	7f 4f       	sbci	r23, 0xFF	; 255
    3950:	8f 4f       	sbci	r24, 0xFF	; 255
    3952:	9f 4f       	sbci	r25, 0xFF	; 255
    3954:	08 95       	ret

00003956 <__fp_cmp>:
    3956:	99 0f       	add	r25, r25
    3958:	00 08       	sbc	r0, r0
    395a:	55 0f       	add	r21, r21
    395c:	aa 0b       	sbc	r26, r26
    395e:	e0 e8       	ldi	r30, 0x80	; 128
    3960:	fe ef       	ldi	r31, 0xFE	; 254
    3962:	16 16       	cp	r1, r22
    3964:	17 06       	cpc	r1, r23
    3966:	e8 07       	cpc	r30, r24
    3968:	f9 07       	cpc	r31, r25
    396a:	c0 f0       	brcs	.+48     	; 0x399c <__fp_cmp+0x46>
    396c:	12 16       	cp	r1, r18
    396e:	13 06       	cpc	r1, r19
    3970:	e4 07       	cpc	r30, r20
    3972:	f5 07       	cpc	r31, r21
    3974:	98 f0       	brcs	.+38     	; 0x399c <__fp_cmp+0x46>
    3976:	62 1b       	sub	r22, r18
    3978:	73 0b       	sbc	r23, r19
    397a:	84 0b       	sbc	r24, r20
    397c:	95 0b       	sbc	r25, r21
    397e:	39 f4       	brne	.+14     	; 0x398e <__fp_cmp+0x38>
    3980:	0a 26       	eor	r0, r26
    3982:	61 f0       	breq	.+24     	; 0x399c <__fp_cmp+0x46>
    3984:	23 2b       	or	r18, r19
    3986:	24 2b       	or	r18, r20
    3988:	25 2b       	or	r18, r21
    398a:	21 f4       	brne	.+8      	; 0x3994 <__fp_cmp+0x3e>
    398c:	08 95       	ret
    398e:	0a 26       	eor	r0, r26
    3990:	09 f4       	brne	.+2      	; 0x3994 <__fp_cmp+0x3e>
    3992:	a1 40       	sbci	r26, 0x01	; 1
    3994:	a6 95       	lsr	r26
    3996:	8f ef       	ldi	r24, 0xFF	; 255
    3998:	81 1d       	adc	r24, r1
    399a:	81 1d       	adc	r24, r1
    399c:	08 95       	ret

0000399e <__fp_inf>:
    399e:	97 f9       	bld	r25, 7
    39a0:	9f 67       	ori	r25, 0x7F	; 127
    39a2:	80 e8       	ldi	r24, 0x80	; 128
    39a4:	70 e0       	ldi	r23, 0x00	; 0
    39a6:	60 e0       	ldi	r22, 0x00	; 0
    39a8:	08 95       	ret

000039aa <__fp_nan>:
    39aa:	9f ef       	ldi	r25, 0xFF	; 255
    39ac:	80 ec       	ldi	r24, 0xC0	; 192
    39ae:	08 95       	ret

000039b0 <__fp_pscA>:
    39b0:	00 24       	eor	r0, r0
    39b2:	0a 94       	dec	r0
    39b4:	16 16       	cp	r1, r22
    39b6:	17 06       	cpc	r1, r23
    39b8:	18 06       	cpc	r1, r24
    39ba:	09 06       	cpc	r0, r25
    39bc:	08 95       	ret

000039be <__fp_pscB>:
    39be:	00 24       	eor	r0, r0
    39c0:	0a 94       	dec	r0
    39c2:	12 16       	cp	r1, r18
    39c4:	13 06       	cpc	r1, r19
    39c6:	14 06       	cpc	r1, r20
    39c8:	05 06       	cpc	r0, r21
    39ca:	08 95       	ret

000039cc <__fp_round>:
    39cc:	09 2e       	mov	r0, r25
    39ce:	03 94       	inc	r0
    39d0:	00 0c       	add	r0, r0
    39d2:	11 f4       	brne	.+4      	; 0x39d8 <__fp_round+0xc>
    39d4:	88 23       	and	r24, r24
    39d6:	52 f0       	brmi	.+20     	; 0x39ec <__fp_round+0x20>
    39d8:	bb 0f       	add	r27, r27
    39da:	40 f4       	brcc	.+16     	; 0x39ec <__fp_round+0x20>
    39dc:	bf 2b       	or	r27, r31
    39de:	11 f4       	brne	.+4      	; 0x39e4 <__fp_round+0x18>
    39e0:	60 ff       	sbrs	r22, 0
    39e2:	04 c0       	rjmp	.+8      	; 0x39ec <__fp_round+0x20>
    39e4:	6f 5f       	subi	r22, 0xFF	; 255
    39e6:	7f 4f       	sbci	r23, 0xFF	; 255
    39e8:	8f 4f       	sbci	r24, 0xFF	; 255
    39ea:	9f 4f       	sbci	r25, 0xFF	; 255
    39ec:	08 95       	ret

000039ee <__fp_split3>:
    39ee:	57 fd       	sbrc	r21, 7
    39f0:	90 58       	subi	r25, 0x80	; 128
    39f2:	44 0f       	add	r20, r20
    39f4:	55 1f       	adc	r21, r21
    39f6:	59 f0       	breq	.+22     	; 0x3a0e <__fp_splitA+0x10>
    39f8:	5f 3f       	cpi	r21, 0xFF	; 255
    39fa:	71 f0       	breq	.+28     	; 0x3a18 <__fp_splitA+0x1a>
    39fc:	47 95       	ror	r20

000039fe <__fp_splitA>:
    39fe:	88 0f       	add	r24, r24
    3a00:	97 fb       	bst	r25, 7
    3a02:	99 1f       	adc	r25, r25
    3a04:	61 f0       	breq	.+24     	; 0x3a1e <__fp_splitA+0x20>
    3a06:	9f 3f       	cpi	r25, 0xFF	; 255
    3a08:	79 f0       	breq	.+30     	; 0x3a28 <__fp_splitA+0x2a>
    3a0a:	87 95       	ror	r24
    3a0c:	08 95       	ret
    3a0e:	12 16       	cp	r1, r18
    3a10:	13 06       	cpc	r1, r19
    3a12:	14 06       	cpc	r1, r20
    3a14:	55 1f       	adc	r21, r21
    3a16:	f2 cf       	rjmp	.-28     	; 0x39fc <__fp_split3+0xe>
    3a18:	46 95       	lsr	r20
    3a1a:	f1 df       	rcall	.-30     	; 0x39fe <__fp_splitA>
    3a1c:	08 c0       	rjmp	.+16     	; 0x3a2e <__fp_splitA+0x30>
    3a1e:	16 16       	cp	r1, r22
    3a20:	17 06       	cpc	r1, r23
    3a22:	18 06       	cpc	r1, r24
    3a24:	99 1f       	adc	r25, r25
    3a26:	f1 cf       	rjmp	.-30     	; 0x3a0a <__fp_splitA+0xc>
    3a28:	86 95       	lsr	r24
    3a2a:	71 05       	cpc	r23, r1
    3a2c:	61 05       	cpc	r22, r1
    3a2e:	08 94       	sec
    3a30:	08 95       	ret

00003a32 <__fp_zero>:
    3a32:	e8 94       	clt

00003a34 <__fp_szero>:
    3a34:	bb 27       	eor	r27, r27
    3a36:	66 27       	eor	r22, r22
    3a38:	77 27       	eor	r23, r23
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	97 f9       	bld	r25, 7
    3a3e:	08 95       	ret

00003a40 <__gesf2>:
    3a40:	8a df       	rcall	.-236    	; 0x3956 <__fp_cmp>
    3a42:	08 f4       	brcc	.+2      	; 0x3a46 <__gesf2+0x6>
    3a44:	8f ef       	ldi	r24, 0xFF	; 255
    3a46:	08 95       	ret

00003a48 <__mulsf3>:
    3a48:	0b d0       	rcall	.+22     	; 0x3a60 <__mulsf3x>
    3a4a:	c0 cf       	rjmp	.-128    	; 0x39cc <__fp_round>
    3a4c:	b1 df       	rcall	.-158    	; 0x39b0 <__fp_pscA>
    3a4e:	28 f0       	brcs	.+10     	; 0x3a5a <__mulsf3+0x12>
    3a50:	b6 df       	rcall	.-148    	; 0x39be <__fp_pscB>
    3a52:	18 f0       	brcs	.+6      	; 0x3a5a <__mulsf3+0x12>
    3a54:	95 23       	and	r25, r21
    3a56:	09 f0       	breq	.+2      	; 0x3a5a <__mulsf3+0x12>
    3a58:	a2 cf       	rjmp	.-188    	; 0x399e <__fp_inf>
    3a5a:	a7 cf       	rjmp	.-178    	; 0x39aa <__fp_nan>
    3a5c:	11 24       	eor	r1, r1
    3a5e:	ea cf       	rjmp	.-44     	; 0x3a34 <__fp_szero>

00003a60 <__mulsf3x>:
    3a60:	c6 df       	rcall	.-116    	; 0x39ee <__fp_split3>
    3a62:	a0 f3       	brcs	.-24     	; 0x3a4c <__mulsf3+0x4>

00003a64 <__mulsf3_pse>:
    3a64:	95 9f       	mul	r25, r21
    3a66:	d1 f3       	breq	.-12     	; 0x3a5c <__mulsf3+0x14>
    3a68:	95 0f       	add	r25, r21
    3a6a:	50 e0       	ldi	r21, 0x00	; 0
    3a6c:	55 1f       	adc	r21, r21
    3a6e:	62 9f       	mul	r22, r18
    3a70:	f0 01       	movw	r30, r0
    3a72:	72 9f       	mul	r23, r18
    3a74:	bb 27       	eor	r27, r27
    3a76:	f0 0d       	add	r31, r0
    3a78:	b1 1d       	adc	r27, r1
    3a7a:	63 9f       	mul	r22, r19
    3a7c:	aa 27       	eor	r26, r26
    3a7e:	f0 0d       	add	r31, r0
    3a80:	b1 1d       	adc	r27, r1
    3a82:	aa 1f       	adc	r26, r26
    3a84:	64 9f       	mul	r22, r20
    3a86:	66 27       	eor	r22, r22
    3a88:	b0 0d       	add	r27, r0
    3a8a:	a1 1d       	adc	r26, r1
    3a8c:	66 1f       	adc	r22, r22
    3a8e:	82 9f       	mul	r24, r18
    3a90:	22 27       	eor	r18, r18
    3a92:	b0 0d       	add	r27, r0
    3a94:	a1 1d       	adc	r26, r1
    3a96:	62 1f       	adc	r22, r18
    3a98:	73 9f       	mul	r23, r19
    3a9a:	b0 0d       	add	r27, r0
    3a9c:	a1 1d       	adc	r26, r1
    3a9e:	62 1f       	adc	r22, r18
    3aa0:	83 9f       	mul	r24, r19
    3aa2:	a0 0d       	add	r26, r0
    3aa4:	61 1d       	adc	r22, r1
    3aa6:	22 1f       	adc	r18, r18
    3aa8:	74 9f       	mul	r23, r20
    3aaa:	33 27       	eor	r19, r19
    3aac:	a0 0d       	add	r26, r0
    3aae:	61 1d       	adc	r22, r1
    3ab0:	23 1f       	adc	r18, r19
    3ab2:	84 9f       	mul	r24, r20
    3ab4:	60 0d       	add	r22, r0
    3ab6:	21 1d       	adc	r18, r1
    3ab8:	82 2f       	mov	r24, r18
    3aba:	76 2f       	mov	r23, r22
    3abc:	6a 2f       	mov	r22, r26
    3abe:	11 24       	eor	r1, r1
    3ac0:	9f 57       	subi	r25, 0x7F	; 127
    3ac2:	50 40       	sbci	r21, 0x00	; 0
    3ac4:	8a f0       	brmi	.+34     	; 0x3ae8 <__mulsf3_pse+0x84>
    3ac6:	e1 f0       	breq	.+56     	; 0x3b00 <__mulsf3_pse+0x9c>
    3ac8:	88 23       	and	r24, r24
    3aca:	4a f0       	brmi	.+18     	; 0x3ade <__mulsf3_pse+0x7a>
    3acc:	ee 0f       	add	r30, r30
    3ace:	ff 1f       	adc	r31, r31
    3ad0:	bb 1f       	adc	r27, r27
    3ad2:	66 1f       	adc	r22, r22
    3ad4:	77 1f       	adc	r23, r23
    3ad6:	88 1f       	adc	r24, r24
    3ad8:	91 50       	subi	r25, 0x01	; 1
    3ada:	50 40       	sbci	r21, 0x00	; 0
    3adc:	a9 f7       	brne	.-22     	; 0x3ac8 <__mulsf3_pse+0x64>
    3ade:	9e 3f       	cpi	r25, 0xFE	; 254
    3ae0:	51 05       	cpc	r21, r1
    3ae2:	70 f0       	brcs	.+28     	; 0x3b00 <__mulsf3_pse+0x9c>
    3ae4:	5c cf       	rjmp	.-328    	; 0x399e <__fp_inf>
    3ae6:	a6 cf       	rjmp	.-180    	; 0x3a34 <__fp_szero>
    3ae8:	5f 3f       	cpi	r21, 0xFF	; 255
    3aea:	ec f3       	brlt	.-6      	; 0x3ae6 <__mulsf3_pse+0x82>
    3aec:	98 3e       	cpi	r25, 0xE8	; 232
    3aee:	dc f3       	brlt	.-10     	; 0x3ae6 <__mulsf3_pse+0x82>
    3af0:	86 95       	lsr	r24
    3af2:	77 95       	ror	r23
    3af4:	67 95       	ror	r22
    3af6:	b7 95       	ror	r27
    3af8:	f7 95       	ror	r31
    3afa:	e7 95       	ror	r30
    3afc:	9f 5f       	subi	r25, 0xFF	; 255
    3afe:	c1 f7       	brne	.-16     	; 0x3af0 <__mulsf3_pse+0x8c>
    3b00:	fe 2b       	or	r31, r30
    3b02:	88 0f       	add	r24, r24
    3b04:	91 1d       	adc	r25, r1
    3b06:	96 95       	lsr	r25
    3b08:	87 95       	ror	r24
    3b0a:	97 f9       	bld	r25, 7
    3b0c:	08 95       	ret

00003b0e <__udivmodsi4>:
    3b0e:	a1 e2       	ldi	r26, 0x21	; 33
    3b10:	1a 2e       	mov	r1, r26
    3b12:	aa 1b       	sub	r26, r26
    3b14:	bb 1b       	sub	r27, r27
    3b16:	fd 01       	movw	r30, r26
    3b18:	0d c0       	rjmp	.+26     	; 0x3b34 <__udivmodsi4_ep>

00003b1a <__udivmodsi4_loop>:
    3b1a:	aa 1f       	adc	r26, r26
    3b1c:	bb 1f       	adc	r27, r27
    3b1e:	ee 1f       	adc	r30, r30
    3b20:	ff 1f       	adc	r31, r31
    3b22:	a2 17       	cp	r26, r18
    3b24:	b3 07       	cpc	r27, r19
    3b26:	e4 07       	cpc	r30, r20
    3b28:	f5 07       	cpc	r31, r21
    3b2a:	20 f0       	brcs	.+8      	; 0x3b34 <__udivmodsi4_ep>
    3b2c:	a2 1b       	sub	r26, r18
    3b2e:	b3 0b       	sbc	r27, r19
    3b30:	e4 0b       	sbc	r30, r20
    3b32:	f5 0b       	sbc	r31, r21

00003b34 <__udivmodsi4_ep>:
    3b34:	66 1f       	adc	r22, r22
    3b36:	77 1f       	adc	r23, r23
    3b38:	88 1f       	adc	r24, r24
    3b3a:	99 1f       	adc	r25, r25
    3b3c:	1a 94       	dec	r1
    3b3e:	69 f7       	brne	.-38     	; 0x3b1a <__udivmodsi4_loop>
    3b40:	60 95       	com	r22
    3b42:	70 95       	com	r23
    3b44:	80 95       	com	r24
    3b46:	90 95       	com	r25
    3b48:	9b 01       	movw	r18, r22
    3b4a:	ac 01       	movw	r20, r24
    3b4c:	bd 01       	movw	r22, r26
    3b4e:	cf 01       	movw	r24, r30
    3b50:	08 95       	ret

00003b52 <__umulhisi3>:
    3b52:	a2 9f       	mul	r26, r18
    3b54:	b0 01       	movw	r22, r0
    3b56:	b3 9f       	mul	r27, r19
    3b58:	c0 01       	movw	r24, r0
    3b5a:	a3 9f       	mul	r26, r19
    3b5c:	70 0d       	add	r23, r0
    3b5e:	81 1d       	adc	r24, r1
    3b60:	11 24       	eor	r1, r1
    3b62:	91 1d       	adc	r25, r1
    3b64:	b2 9f       	mul	r27, r18
    3b66:	70 0d       	add	r23, r0
    3b68:	81 1d       	adc	r24, r1
    3b6a:	11 24       	eor	r1, r1
    3b6c:	91 1d       	adc	r25, r1
    3b6e:	08 95       	ret

00003b70 <__muluhisi3>:
    3b70:	f0 df       	rcall	.-32     	; 0x3b52 <__umulhisi3>
    3b72:	a5 9f       	mul	r26, r21
    3b74:	90 0d       	add	r25, r0
    3b76:	b4 9f       	mul	r27, r20
    3b78:	90 0d       	add	r25, r0
    3b7a:	a4 9f       	mul	r26, r20
    3b7c:	80 0d       	add	r24, r0
    3b7e:	91 1d       	adc	r25, r1
    3b80:	11 24       	eor	r1, r1
    3b82:	08 95       	ret

00003b84 <memset>:
    3b84:	dc 01       	movw	r26, r24
    3b86:	01 c0       	rjmp	.+2      	; 0x3b8a <memset+0x6>
    3b88:	6d 93       	st	X+, r22
    3b8a:	41 50       	subi	r20, 0x01	; 1
    3b8c:	50 40       	sbci	r21, 0x00	; 0
    3b8e:	e0 f7       	brcc	.-8      	; 0x3b88 <memset+0x4>
    3b90:	08 95       	ret

00003b92 <_exit>:
    3b92:	f8 94       	cli

00003b94 <__stop_program>:
    3b94:	ff cf       	rjmp	.-2      	; 0x3b94 <__stop_program>
