
DFPlayer2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  000005f6  0000066a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000079c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a30  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008aa  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b2  00000000  00000000  00001b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00001fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000451  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000217  00000000  00000000  00002525  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ef       	ldi	r30, 0xF6	; 246
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0c d1       	rcall	.+536    	; 0x2cc <main>
  b4:	9e c2       	rjmp	.+1340   	; 0x5f2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <UART_Init>:
	unsigned char arrayChecksum[2];
};


void UART_Init(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
	UCSR0B = 0x18;
  c0:	8a e2       	ldi	r24, 0x2A	; 42
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	28 e1       	ldi	r18, 0x18	; 24
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
	UCSR0C = 0x06;
  ca:	85 e9       	ldi	r24, 0x95	; 149
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	26 e0       	ldi	r18, 0x06	; 6
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
	UBRR0L = 103;
  d4:	89 e2       	ldi	r24, 0x29	; 41
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	27 e6       	ldi	r18, 0x67	; 103
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18

	UCSR1B = 0x08;
  de:	8a e9       	ldi	r24, 0x9A	; 154
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	28 e0       	ldi	r18, 0x08	; 8
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
	UCSR1C = 0x06;
  e8:	8d e9       	ldi	r24, 0x9D	; 157
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	26 e0       	ldi	r18, 0x06	; 6
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
	UBRR1L = 103;
  f2:	89 e9       	ldi	r24, 0x99	; 153
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	27 e6       	ldi	r18, 0x67	; 103
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
}
  fc:	00 00       	nop
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <UART0_Putch>:

void UART0_Putch(char ch)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & 0x20));
 110:	00 00       	nop
 112:	8b e2       	ldi	r24, 0x2B	; 43
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	80 81       	ld	r24, Z
 11a:	88 2f       	mov	r24, r24
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	80 72       	andi	r24, 0x20	; 32
 120:	99 27       	eor	r25, r25
 122:	89 2b       	or	r24, r25
 124:	b1 f3       	breq	.-20     	; 0x112 <UART0_Putch+0xe>

	UDR0 = ch;
 126:	8c e2       	ldi	r24, 0x2C	; 44
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	29 81       	ldd	r18, Y+1	; 0x01
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
}
 130:	00 00       	nop
 132:	0f 90       	pop	r0
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <UART0_Getch>:

char UART0_Getch(void)
{
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSR0A & 0x80));
 142:	00 00       	nop
 144:	8b e2       	ldi	r24, 0x2B	; 43
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	fc 01       	movw	r30, r24
 14a:	80 81       	ld	r24, Z
 14c:	88 23       	and	r24, r24
 14e:	d4 f7       	brge	.-12     	; 0x144 <UART0_Getch+0xa>

	return UDR0;
 150:	8c e2       	ldi	r24, 0x2C	; 44
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	fc 01       	movw	r30, r24
 156:	80 81       	ld	r24, Z
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <UART0_Puts>:

void UART0_Puts(char str[])
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	00 d0       	rcall	.+0      	; 0x164 <UART0_Puts+0x6>
 164:	00 d0       	rcall	.+0      	; 0x166 <UART0_Puts+0x8>
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	9c 83       	std	Y+4, r25	; 0x04
 16c:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
 16e:	1a 82       	std	Y+2, r1	; 0x02
 170:	19 82       	std	Y+1, r1	; 0x01

	while(str[i] != 0)
 172:	0f c0       	rjmp	.+30     	; 0x192 <UART0_Puts+0x34>
	UART0_Putch(str[i++]);
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	9a 81       	ldd	r25, Y+2	; 0x02
 178:	9c 01       	movw	r18, r24
 17a:	2f 5f       	subi	r18, 0xFF	; 255
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
 17e:	3a 83       	std	Y+2, r19	; 0x02
 180:	29 83       	std	Y+1, r18	; 0x01
 182:	9c 01       	movw	r18, r24
 184:	8b 81       	ldd	r24, Y+3	; 0x03
 186:	9c 81       	ldd	r25, Y+4	; 0x04
 188:	82 0f       	add	r24, r18
 18a:	93 1f       	adc	r25, r19
 18c:	fc 01       	movw	r30, r24
 18e:	80 81       	ld	r24, Z
 190:	b9 df       	rcall	.-142    	; 0x104 <UART0_Putch>

void UART0_Puts(char str[])
{
	int i=0;

	while(str[i] != 0)
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	9a 81       	ldd	r25, Y+2	; 0x02
 196:	2b 81       	ldd	r18, Y+3	; 0x03
 198:	3c 81       	ldd	r19, Y+4	; 0x04
 19a:	82 0f       	add	r24, r18
 19c:	93 1f       	adc	r25, r19
 19e:	fc 01       	movw	r30, r24
 1a0:	80 81       	ld	r24, Z
 1a2:	88 23       	and	r24, r24
 1a4:	39 f7       	brne	.-50     	; 0x174 <UART0_Puts+0x16>
	UART0_Putch(str[i++]);
}
 1a6:	00 00       	nop
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <UART1_Putch>:

void UART1_Putch(char ch)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	1f 92       	push	r1
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR1A & 0x20));
 1c2:	00 00       	nop
 1c4:	8b e9       	ldi	r24, 0x9B	; 155
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	80 81       	ld	r24, Z
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	80 72       	andi	r24, 0x20	; 32
 1d2:	99 27       	eor	r25, r25
 1d4:	89 2b       	or	r24, r25
 1d6:	b1 f3       	breq	.-20     	; 0x1c4 <UART1_Putch+0xe>

	UDR1 = ch;
 1d8:	8c e9       	ldi	r24, 0x9C	; 156
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	29 81       	ldd	r18, Y+1	; 0x01
 1de:	fc 01       	movw	r30, r24
 1e0:	20 83       	st	Z, r18
}
 1e2:	00 00       	nop
 1e4:	0f 90       	pop	r0
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <SendCommand>:

void SendCommand(unsigned char cmd)
{
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	67 97       	sbiw	r28, 0x17	; 23
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	8f 8b       	std	Y+23, r24	; 0x17
	unsigned int checksum = 0;
 202:	1a 82       	std	Y+2, r1	; 0x02
 204:	19 82       	std	Y+1, r1	; 0x01
	char temp[20];

	UART1_Putch(0x7E);
 206:	8e e7       	ldi	r24, 0x7E	; 126
 208:	d6 df       	rcall	.-84     	; 0x1b6 <UART1_Putch>
	UART1_Putch(0xFF);
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	d4 df       	rcall	.-88     	; 0x1b6 <UART1_Putch>
	UART1_Putch(0x06);
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	d2 df       	rcall	.-92     	; 0x1b6 <UART1_Putch>
	UART1_Putch(cmd);
 212:	8f 89       	ldd	r24, Y+23	; 0x17
 214:	d0 df       	rcall	.-96     	; 0x1b6 <UART1_Putch>
	UART1_Putch(0x00);
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	ce df       	rcall	.-100    	; 0x1b6 <UART1_Putch>
 21a:	80 e0       	ldi	r24, 0x00	; 0
	UART1_Putch(0x00);
 21c:	cc df       	rcall	.-104    	; 0x1b6 <UART1_Putch>
 21e:	8f 89       	ldd	r24, Y+23	; 0x17
	
	if(cmd != CMD_TF){
 220:	89 30       	cpi	r24, 0x09	; 9
 222:	71 f0       	breq	.+28     	; 0x240 <SendCommand+0x54>
 224:	80 e0       	ldi	r24, 0x00	; 0
		UART1_Putch(0x00);
 226:	c7 df       	rcall	.-114    	; 0x1b6 <UART1_Putch>
 228:	8f 89       	ldd	r24, Y+23	; 0x17
 22a:	88 2f       	mov	r24, r24
		checksum = 0 - (0xFF + 0x06 + cmd);
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	2b ef       	ldi	r18, 0xFB	; 251
 230:	3e ef       	ldi	r19, 0xFE	; 254
 232:	a9 01       	movw	r20, r18
 234:	48 1b       	sub	r20, r24
 236:	59 0b       	sbc	r21, r25
 238:	ca 01       	movw	r24, r20
 23a:	9a 83       	std	Y+2, r25	; 0x02
 23c:	89 83       	std	Y+1, r24	; 0x01
 23e:	0d c0       	rjmp	.+26     	; 0x25a <SendCommand+0x6e>
 240:	82 e0       	ldi	r24, 0x02	; 2
	}
	else{
		UART1_Putch(0x02);
 242:	b9 df       	rcall	.-142    	; 0x1b6 <UART1_Putch>
 244:	8f 89       	ldd	r24, Y+23	; 0x17
 246:	88 2f       	mov	r24, r24
		checksum = 0 - (0xFF + 0x06 + cmd + 0x02);
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	29 ef       	ldi	r18, 0xF9	; 249
 24c:	3e ef       	ldi	r19, 0xFE	; 254
 24e:	a9 01       	movw	r20, r18
 250:	48 1b       	sub	r20, r24
 252:	59 0b       	sbc	r21, r25
 254:	ca 01       	movw	r24, r20
 256:	9a 83       	std	Y+2, r25	; 0x02
 258:	89 83       	std	Y+1, r24	; 0x01
	}

	UART1_Putch((char)(checksum >> 8));
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	9a 81       	ldd	r25, Y+2	; 0x02
 25e:	89 2f       	mov	r24, r25
 260:	99 27       	eor	r25, r25
 262:	a9 df       	rcall	.-174    	; 0x1b6 <UART1_Putch>
	UART1_Putch(checksum&0xFF);
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	a7 df       	rcall	.-178    	; 0x1b6 <UART1_Putch>
 268:	8f ee       	ldi	r24, 0xEF	; 239
	UART1_Putch(0xEF);
 26a:	a5 df       	rcall	.-182    	; 0x1b6 <UART1_Putch>
 26c:	00 00       	nop
 26e:	67 96       	adiw	r28, 0x17	; 23

	UART1_Putch(checksum.arrayChecksum[1]);
	UART1_Putch(checksum.arrayChecksum[0]);
	UART1_Putch(0xEF);
	*/
}
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <DisplayMenu>:
 280:	cf 93       	push	r28
 282:	df 93       	push	r29

void DisplayMenu(void)
{
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
	UART0_Puts("\r\n===========================");
 288:	8a e0       	ldi	r24, 0x0A	; 10
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	68 df       	rcall	.-304    	; 0x15e <UART0_Puts>
	UART0_Puts("\r\n= 1 : Play Music          =");
 28e:	88 e2       	ldi	r24, 0x28	; 40
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	65 df       	rcall	.-310    	; 0x15e <UART0_Puts>
	UART0_Puts("\r\n= 2 : Stop Music          =");
 294:	86 e4       	ldi	r24, 0x46	; 70
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	62 df       	rcall	.-316    	; 0x15e <UART0_Puts>
	UART0_Puts("\r\n= 3 : Pause Music         =");
 29a:	84 e6       	ldi	r24, 0x64	; 100
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	5f df       	rcall	.-322    	; 0x15e <UART0_Puts>
	UART0_Puts("\r\n= 4 : Next Music          =");
 2a0:	82 e8       	ldi	r24, 0x82	; 130
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	5c df       	rcall	.-328    	; 0x15e <UART0_Puts>
	UART0_Puts("\r\n= 5 : Previous Music      =");
 2a6:	80 ea       	ldi	r24, 0xA0	; 160
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	59 df       	rcall	.-334    	; 0x15e <UART0_Puts>
	UART0_Puts("\r\n= 6 : volume up      =");
 2ac:	8e eb       	ldi	r24, 0xBE	; 190
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	56 df       	rcall	.-340    	; 0x15e <UART0_Puts>
	UART0_Puts("\r\n= 7 : volume down       =");
 2b2:	87 ed       	ldi	r24, 0xD7	; 215
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	53 df       	rcall	.-346    	; 0x15e <UART0_Puts>
	UART0_Puts("\r\n===========================");
 2b8:	8a e0       	ldi	r24, 0x0A	; 10
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	50 df       	rcall	.-352    	; 0x15e <UART0_Puts>
 2be:	83 ef       	ldi	r24, 0xF3	; 243
	UART0_Puts("\r\n\r\nCommand > ");
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	4d df       	rcall	.-358    	; 0x15e <UART0_Puts>
 2c4:	00 00       	nop
 2c6:	df 91       	pop	r29
}
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <main>:
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29

int main(void)
{
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	2f 97       	sbiw	r28, 0x0f	; 15
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
	char cmd;

	UART_Init();
 2e0:	eb de       	rcall	.-554    	; 0xb8 <UART_Init>
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	a8 e4       	ldi	r26, 0x48	; 72
 2e8:	b3 e4       	ldi	r27, 0x43	; 67
 2ea:	8a 83       	std	Y+2, r24	; 0x02
 2ec:	9b 83       	std	Y+3, r25	; 0x03
 2ee:	ac 83       	std	Y+4, r26	; 0x04
 2f0:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	4a e7       	ldi	r20, 0x7A	; 122
 2f8:	55 e4       	ldi	r21, 0x45	; 69
 2fa:	6a 81       	ldd	r22, Y+2	; 0x02
 2fc:	7b 81       	ldd	r23, Y+3	; 0x03
 2fe:	8c 81       	ldd	r24, Y+4	; 0x04
 300:	9d 81       	ldd	r25, Y+5	; 0x05
 302:	ec d0       	rcall	.+472    	; 0x4dc <__mulsf3>
 304:	dc 01       	movw	r26, r24
 306:	cb 01       	movw	r24, r22
 308:	8e 83       	std	Y+6, r24	; 0x06
 30a:	9f 83       	std	Y+7, r25	; 0x07
 30c:	a8 87       	std	Y+8, r26	; 0x08
 30e:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	40 e8       	ldi	r20, 0x80	; 128
 316:	5f e3       	ldi	r21, 0x3F	; 63
 318:	6e 81       	ldd	r22, Y+6	; 0x06
 31a:	7f 81       	ldd	r23, Y+7	; 0x07
 31c:	88 85       	ldd	r24, Y+8	; 0x08
 31e:	99 85       	ldd	r25, Y+9	; 0x09
 320:	5c d0       	rcall	.+184    	; 0x3da <__cmpsf2>
 322:	88 23       	and	r24, r24
 324:	2c f4       	brge	.+10     	; 0x330 <main+0x64>
		__ticks = 1;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	9b 87       	std	Y+11, r25	; 0x0b
 32c:	8a 87       	std	Y+10, r24	; 0x0a
 32e:	3b c0       	rjmp	.+118    	; 0x3a6 <main+0xda>
	else if (__tmp > 65535)
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	3f ef       	ldi	r19, 0xFF	; 255
 334:	4f e7       	ldi	r20, 0x7F	; 127
 336:	57 e4       	ldi	r21, 0x47	; 71
 338:	6e 81       	ldd	r22, Y+6	; 0x06
 33a:	7f 81       	ldd	r23, Y+7	; 0x07
 33c:	88 85       	ldd	r24, Y+8	; 0x08
 33e:	99 85       	ldd	r25, Y+9	; 0x09
 340:	c9 d0       	rcall	.+402    	; 0x4d4 <__gesf2>
 342:	18 16       	cp	r1, r24
 344:	3c f5       	brge	.+78     	; 0x394 <main+0xc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	40 e2       	ldi	r20, 0x20	; 32
 34c:	51 e4       	ldi	r21, 0x41	; 65
 34e:	6a 81       	ldd	r22, Y+2	; 0x02
 350:	7b 81       	ldd	r23, Y+3	; 0x03
 352:	8c 81       	ldd	r24, Y+4	; 0x04
 354:	9d 81       	ldd	r25, Y+5	; 0x05
 356:	c2 d0       	rcall	.+388    	; 0x4dc <__mulsf3>
 358:	dc 01       	movw	r26, r24
 35a:	cb 01       	movw	r24, r22
 35c:	bc 01       	movw	r22, r24
 35e:	cd 01       	movw	r24, r26
 360:	40 d0       	rcall	.+128    	; 0x3e2 <__fixunssfsi>
 362:	dc 01       	movw	r26, r24
 364:	cb 01       	movw	r24, r22
 366:	9b 87       	std	Y+11, r25	; 0x0b
 368:	8a 87       	std	Y+10, r24	; 0x0a
 36a:	0f c0       	rjmp	.+30     	; 0x38a <main+0xbe>
 36c:	80 e9       	ldi	r24, 0x90	; 144
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	9d 87       	std	Y+13, r25	; 0x0d
 372:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 374:	8c 85       	ldd	r24, Y+12	; 0x0c
 376:	9d 85       	ldd	r25, Y+13	; 0x0d
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <main+0xac>
 37c:	9d 87       	std	Y+13, r25	; 0x0d
 37e:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 380:	8a 85       	ldd	r24, Y+10	; 0x0a
 382:	9b 85       	ldd	r25, Y+11	; 0x0b
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	9b 87       	std	Y+11, r25	; 0x0b
 388:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 38a:	8a 85       	ldd	r24, Y+10	; 0x0a
 38c:	9b 85       	ldd	r25, Y+11	; 0x0b
 38e:	89 2b       	or	r24, r25
 390:	69 f7       	brne	.-38     	; 0x36c <main+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 392:	13 c0       	rjmp	.+38     	; 0x3ba <main+0xee>
 394:	6e 81       	ldd	r22, Y+6	; 0x06
 396:	7f 81       	ldd	r23, Y+7	; 0x07
 398:	88 85       	ldd	r24, Y+8	; 0x08
 39a:	99 85       	ldd	r25, Y+9	; 0x09
 39c:	22 d0       	rcall	.+68     	; 0x3e2 <__fixunssfsi>
 39e:	dc 01       	movw	r26, r24
 3a0:	cb 01       	movw	r24, r22
 3a2:	9b 87       	std	Y+11, r25	; 0x0b
 3a4:	8a 87       	std	Y+10, r24	; 0x0a
 3a6:	8a 85       	ldd	r24, Y+10	; 0x0a
 3a8:	9b 85       	ldd	r25, Y+11	; 0x0b
 3aa:	9f 87       	std	Y+15, r25	; 0x0f
 3ac:	8e 87       	std	Y+14, r24	; 0x0e
 3ae:	8e 85       	ldd	r24, Y+14	; 0x0e
 3b0:	9f 85       	ldd	r25, Y+15	; 0x0f
 3b2:	01 97       	sbiw	r24, 0x01	; 1

	_delay_ms(200);

	SendCommand(CMD_TF);
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <main+0xe6>
 3b6:	9f 87       	std	Y+15, r25	; 0x0f
 3b8:	8e 87       	std	Y+14, r24	; 0x0e
	
	while(1){
		DisplayMenu();
 3ba:	89 e0       	ldi	r24, 0x09	; 9
 3bc:	17 df       	rcall	.-466    	; 0x1ec <SendCommand>
		cmd = UART0_Getch();
 3be:	60 df       	rcall	.-320    	; 0x280 <DisplayMenu>
 3c0:	bc de       	rcall	.-648    	; 0x13a <UART0_Getch>
		SendCommand(cmd_list[cmd - '0' - 1]);
 3c2:	89 83       	std	Y+1, r24	; 0x01
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
 3c6:	08 2e       	mov	r0, r24
 3c8:	00 0c       	add	r0, r0
 3ca:	99 0b       	sbc	r25, r25
 3cc:	c1 97       	sbiw	r24, 0x31	; 49
 3ce:	80 50       	subi	r24, 0x00	; 0
 3d0:	9f 4f       	sbci	r25, 0xFF	; 255
 3d2:	fc 01       	movw	r30, r24
 3d4:	80 81       	ld	r24, Z
 3d6:	0a df       	rcall	.-492    	; 0x1ec <SendCommand>
		//PORTD = ~PORTD;
	}
 3d8:	f2 cf       	rjmp	.-28     	; 0x3be <main+0xf2>

000003da <__cmpsf2>:
 3da:	2f d0       	rcall	.+94     	; 0x43a <__fp_cmp>
 3dc:	08 f4       	brcc	.+2      	; 0x3e0 <__cmpsf2+0x6>
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	08 95       	ret

000003e2 <__fixunssfsi>:
 3e2:	57 d0       	rcall	.+174    	; 0x492 <__fp_splitA>
 3e4:	88 f0       	brcs	.+34     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e6:	9f 57       	subi	r25, 0x7F	; 127
 3e8:	90 f0       	brcs	.+36     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3ea:	b9 2f       	mov	r27, r25
 3ec:	99 27       	eor	r25, r25
 3ee:	b7 51       	subi	r27, 0x17	; 23
 3f0:	a0 f0       	brcs	.+40     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3f2:	d1 f0       	breq	.+52     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3f4:	66 0f       	add	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	88 1f       	adc	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	1a f0       	brmi	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fe:	ba 95       	dec	r27
 400:	c9 f7       	brne	.-14     	; 0x3f4 <__fixunssfsi+0x12>
 402:	12 c0       	rjmp	.+36     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 404:	b1 30       	cpi	r27, 0x01	; 1
 406:	81 f0       	breq	.+32     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 408:	5e d0       	rcall	.+188    	; 0x4c6 <__fp_zero>
 40a:	b1 e0       	ldi	r27, 0x01	; 1
 40c:	08 95       	ret
 40e:	5b c0       	rjmp	.+182    	; 0x4c6 <__fp_zero>
 410:	67 2f       	mov	r22, r23
 412:	78 2f       	mov	r23, r24
 414:	88 27       	eor	r24, r24
 416:	b8 5f       	subi	r27, 0xF8	; 248
 418:	39 f0       	breq	.+14     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41a:	b9 3f       	cpi	r27, 0xF9	; 249
 41c:	cc f3       	brlt	.-14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 41e:	86 95       	lsr	r24
 420:	77 95       	ror	r23
 422:	67 95       	ror	r22
 424:	b3 95       	inc	r27
 426:	d9 f7       	brne	.-10     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 428:	3e f4       	brtc	.+14     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 42a:	90 95       	com	r25
 42c:	80 95       	com	r24
 42e:	70 95       	com	r23
 430:	61 95       	neg	r22
 432:	7f 4f       	sbci	r23, 0xFF	; 255
 434:	8f 4f       	sbci	r24, 0xFF	; 255
 436:	9f 4f       	sbci	r25, 0xFF	; 255
 438:	08 95       	ret

0000043a <__fp_cmp>:
 43a:	99 0f       	add	r25, r25
 43c:	00 08       	sbc	r0, r0
 43e:	55 0f       	add	r21, r21
 440:	aa 0b       	sbc	r26, r26
 442:	e0 e8       	ldi	r30, 0x80	; 128
 444:	fe ef       	ldi	r31, 0xFE	; 254
 446:	16 16       	cp	r1, r22
 448:	17 06       	cpc	r1, r23
 44a:	e8 07       	cpc	r30, r24
 44c:	f9 07       	cpc	r31, r25
 44e:	c0 f0       	brcs	.+48     	; 0x480 <__fp_cmp+0x46>
 450:	12 16       	cp	r1, r18
 452:	13 06       	cpc	r1, r19
 454:	e4 07       	cpc	r30, r20
 456:	f5 07       	cpc	r31, r21
 458:	98 f0       	brcs	.+38     	; 0x480 <__fp_cmp+0x46>
 45a:	62 1b       	sub	r22, r18
 45c:	73 0b       	sbc	r23, r19
 45e:	84 0b       	sbc	r24, r20
 460:	95 0b       	sbc	r25, r21
 462:	39 f4       	brne	.+14     	; 0x472 <__fp_cmp+0x38>
 464:	0a 26       	eor	r0, r26
 466:	61 f0       	breq	.+24     	; 0x480 <__fp_cmp+0x46>
 468:	23 2b       	or	r18, r19
 46a:	24 2b       	or	r18, r20
 46c:	25 2b       	or	r18, r21
 46e:	21 f4       	brne	.+8      	; 0x478 <__fp_cmp+0x3e>
 470:	08 95       	ret
 472:	0a 26       	eor	r0, r26
 474:	09 f4       	brne	.+2      	; 0x478 <__fp_cmp+0x3e>
 476:	a1 40       	sbci	r26, 0x01	; 1
 478:	a6 95       	lsr	r26
 47a:	8f ef       	ldi	r24, 0xFF	; 255
 47c:	81 1d       	adc	r24, r1
 47e:	81 1d       	adc	r24, r1
 480:	08 95       	ret

00000482 <__fp_split3>:
 482:	57 fd       	sbrc	r21, 7
 484:	90 58       	subi	r25, 0x80	; 128
 486:	44 0f       	add	r20, r20
 488:	55 1f       	adc	r21, r21
 48a:	59 f0       	breq	.+22     	; 0x4a2 <__fp_splitA+0x10>
 48c:	5f 3f       	cpi	r21, 0xFF	; 255
 48e:	71 f0       	breq	.+28     	; 0x4ac <__fp_splitA+0x1a>
 490:	47 95       	ror	r20

00000492 <__fp_splitA>:
 492:	88 0f       	add	r24, r24
 494:	97 fb       	bst	r25, 7
 496:	99 1f       	adc	r25, r25
 498:	61 f0       	breq	.+24     	; 0x4b2 <__fp_splitA+0x20>
 49a:	9f 3f       	cpi	r25, 0xFF	; 255
 49c:	79 f0       	breq	.+30     	; 0x4bc <__fp_splitA+0x2a>
 49e:	87 95       	ror	r24
 4a0:	08 95       	ret
 4a2:	12 16       	cp	r1, r18
 4a4:	13 06       	cpc	r1, r19
 4a6:	14 06       	cpc	r1, r20
 4a8:	55 1f       	adc	r21, r21
 4aa:	f2 cf       	rjmp	.-28     	; 0x490 <__fp_split3+0xe>
 4ac:	46 95       	lsr	r20
 4ae:	f1 df       	rcall	.-30     	; 0x492 <__fp_splitA>
 4b0:	08 c0       	rjmp	.+16     	; 0x4c2 <__fp_splitA+0x30>
 4b2:	16 16       	cp	r1, r22
 4b4:	17 06       	cpc	r1, r23
 4b6:	18 06       	cpc	r1, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	f1 cf       	rjmp	.-30     	; 0x49e <__fp_splitA+0xc>
 4bc:	86 95       	lsr	r24
 4be:	71 05       	cpc	r23, r1
 4c0:	61 05       	cpc	r22, r1
 4c2:	08 94       	sec
 4c4:	08 95       	ret

000004c6 <__fp_zero>:
 4c6:	e8 94       	clt

000004c8 <__fp_szero>:
 4c8:	bb 27       	eor	r27, r27
 4ca:	66 27       	eor	r22, r22
 4cc:	77 27       	eor	r23, r23
 4ce:	cb 01       	movw	r24, r22
 4d0:	97 f9       	bld	r25, 7
 4d2:	08 95       	ret

000004d4 <__gesf2>:
 4d4:	b2 df       	rcall	.-156    	; 0x43a <__fp_cmp>
 4d6:	08 f4       	brcc	.+2      	; 0x4da <__gesf2+0x6>
 4d8:	8f ef       	ldi	r24, 0xFF	; 255
 4da:	08 95       	ret

000004dc <__mulsf3>:
 4dc:	0b d0       	rcall	.+22     	; 0x4f4 <__mulsf3x>
 4de:	78 c0       	rjmp	.+240    	; 0x5d0 <__fp_round>
 4e0:	69 d0       	rcall	.+210    	; 0x5b4 <__fp_pscA>
 4e2:	28 f0       	brcs	.+10     	; 0x4ee <__mulsf3+0x12>
 4e4:	6e d0       	rcall	.+220    	; 0x5c2 <__fp_pscB>
 4e6:	18 f0       	brcs	.+6      	; 0x4ee <__mulsf3+0x12>
 4e8:	95 23       	and	r25, r21
 4ea:	09 f0       	breq	.+2      	; 0x4ee <__mulsf3+0x12>
 4ec:	5a c0       	rjmp	.+180    	; 0x5a2 <__fp_inf>
 4ee:	5f c0       	rjmp	.+190    	; 0x5ae <__fp_nan>
 4f0:	11 24       	eor	r1, r1
 4f2:	ea cf       	rjmp	.-44     	; 0x4c8 <__fp_szero>

000004f4 <__mulsf3x>:
 4f4:	c6 df       	rcall	.-116    	; 0x482 <__fp_split3>
 4f6:	a0 f3       	brcs	.-24     	; 0x4e0 <__mulsf3+0x4>

000004f8 <__mulsf3_pse>:
 4f8:	95 9f       	mul	r25, r21
 4fa:	d1 f3       	breq	.-12     	; 0x4f0 <__mulsf3+0x14>
 4fc:	95 0f       	add	r25, r21
 4fe:	50 e0       	ldi	r21, 0x00	; 0
 500:	55 1f       	adc	r21, r21
 502:	62 9f       	mul	r22, r18
 504:	f0 01       	movw	r30, r0
 506:	72 9f       	mul	r23, r18
 508:	bb 27       	eor	r27, r27
 50a:	f0 0d       	add	r31, r0
 50c:	b1 1d       	adc	r27, r1
 50e:	63 9f       	mul	r22, r19
 510:	aa 27       	eor	r26, r26
 512:	f0 0d       	add	r31, r0
 514:	b1 1d       	adc	r27, r1
 516:	aa 1f       	adc	r26, r26
 518:	64 9f       	mul	r22, r20
 51a:	66 27       	eor	r22, r22
 51c:	b0 0d       	add	r27, r0
 51e:	a1 1d       	adc	r26, r1
 520:	66 1f       	adc	r22, r22
 522:	82 9f       	mul	r24, r18
 524:	22 27       	eor	r18, r18
 526:	b0 0d       	add	r27, r0
 528:	a1 1d       	adc	r26, r1
 52a:	62 1f       	adc	r22, r18
 52c:	73 9f       	mul	r23, r19
 52e:	b0 0d       	add	r27, r0
 530:	a1 1d       	adc	r26, r1
 532:	62 1f       	adc	r22, r18
 534:	83 9f       	mul	r24, r19
 536:	a0 0d       	add	r26, r0
 538:	61 1d       	adc	r22, r1
 53a:	22 1f       	adc	r18, r18
 53c:	74 9f       	mul	r23, r20
 53e:	33 27       	eor	r19, r19
 540:	a0 0d       	add	r26, r0
 542:	61 1d       	adc	r22, r1
 544:	23 1f       	adc	r18, r19
 546:	84 9f       	mul	r24, r20
 548:	60 0d       	add	r22, r0
 54a:	21 1d       	adc	r18, r1
 54c:	82 2f       	mov	r24, r18
 54e:	76 2f       	mov	r23, r22
 550:	6a 2f       	mov	r22, r26
 552:	11 24       	eor	r1, r1
 554:	9f 57       	subi	r25, 0x7F	; 127
 556:	50 40       	sbci	r21, 0x00	; 0
 558:	8a f0       	brmi	.+34     	; 0x57c <__mulsf3_pse+0x84>
 55a:	e1 f0       	breq	.+56     	; 0x594 <__mulsf3_pse+0x9c>
 55c:	88 23       	and	r24, r24
 55e:	4a f0       	brmi	.+18     	; 0x572 <__mulsf3_pse+0x7a>
 560:	ee 0f       	add	r30, r30
 562:	ff 1f       	adc	r31, r31
 564:	bb 1f       	adc	r27, r27
 566:	66 1f       	adc	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	88 1f       	adc	r24, r24
 56c:	91 50       	subi	r25, 0x01	; 1
 56e:	50 40       	sbci	r21, 0x00	; 0
 570:	a9 f7       	brne	.-22     	; 0x55c <__mulsf3_pse+0x64>
 572:	9e 3f       	cpi	r25, 0xFE	; 254
 574:	51 05       	cpc	r21, r1
 576:	70 f0       	brcs	.+28     	; 0x594 <__mulsf3_pse+0x9c>
 578:	14 c0       	rjmp	.+40     	; 0x5a2 <__fp_inf>
 57a:	a6 cf       	rjmp	.-180    	; 0x4c8 <__fp_szero>
 57c:	5f 3f       	cpi	r21, 0xFF	; 255
 57e:	ec f3       	brlt	.-6      	; 0x57a <__mulsf3_pse+0x82>
 580:	98 3e       	cpi	r25, 0xE8	; 232
 582:	dc f3       	brlt	.-10     	; 0x57a <__mulsf3_pse+0x82>
 584:	86 95       	lsr	r24
 586:	77 95       	ror	r23
 588:	67 95       	ror	r22
 58a:	b7 95       	ror	r27
 58c:	f7 95       	ror	r31
 58e:	e7 95       	ror	r30
 590:	9f 5f       	subi	r25, 0xFF	; 255
 592:	c1 f7       	brne	.-16     	; 0x584 <__mulsf3_pse+0x8c>
 594:	fe 2b       	or	r31, r30
 596:	88 0f       	add	r24, r24
 598:	91 1d       	adc	r25, r1
 59a:	96 95       	lsr	r25
 59c:	87 95       	ror	r24
 59e:	97 f9       	bld	r25, 7
 5a0:	08 95       	ret

000005a2 <__fp_inf>:
 5a2:	97 f9       	bld	r25, 7
 5a4:	9f 67       	ori	r25, 0x7F	; 127
 5a6:	80 e8       	ldi	r24, 0x80	; 128
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	08 95       	ret

000005ae <__fp_nan>:
 5ae:	9f ef       	ldi	r25, 0xFF	; 255
 5b0:	80 ec       	ldi	r24, 0xC0	; 192
 5b2:	08 95       	ret

000005b4 <__fp_pscA>:
 5b4:	00 24       	eor	r0, r0
 5b6:	0a 94       	dec	r0
 5b8:	16 16       	cp	r1, r22
 5ba:	17 06       	cpc	r1, r23
 5bc:	18 06       	cpc	r1, r24
 5be:	09 06       	cpc	r0, r25
 5c0:	08 95       	ret

000005c2 <__fp_pscB>:
 5c2:	00 24       	eor	r0, r0
 5c4:	0a 94       	dec	r0
 5c6:	12 16       	cp	r1, r18
 5c8:	13 06       	cpc	r1, r19
 5ca:	14 06       	cpc	r1, r20
 5cc:	05 06       	cpc	r0, r21
 5ce:	08 95       	ret

000005d0 <__fp_round>:
 5d0:	09 2e       	mov	r0, r25
 5d2:	03 94       	inc	r0
 5d4:	00 0c       	add	r0, r0
 5d6:	11 f4       	brne	.+4      	; 0x5dc <__fp_round+0xc>
 5d8:	88 23       	and	r24, r24
 5da:	52 f0       	brmi	.+20     	; 0x5f0 <__fp_round+0x20>
 5dc:	bb 0f       	add	r27, r27
 5de:	40 f4       	brcc	.+16     	; 0x5f0 <__fp_round+0x20>
 5e0:	bf 2b       	or	r27, r31
 5e2:	11 f4       	brne	.+4      	; 0x5e8 <__fp_round+0x18>
 5e4:	60 ff       	sbrs	r22, 0
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__fp_round+0x20>
 5e8:	6f 5f       	subi	r22, 0xFF	; 255
 5ea:	7f 4f       	sbci	r23, 0xFF	; 255
 5ec:	8f 4f       	sbci	r24, 0xFF	; 255
 5ee:	9f 4f       	sbci	r25, 0xFF	; 255
 5f0:	08 95       	ret

000005f2 <_exit>:
 5f2:	f8 94       	cli

000005f4 <__stop_program>:
 5f4:	ff cf       	rjmp	.-2      	; 0x5f4 <__stop_program>
