
DW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  000006ec  00000780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080016a  0080016a  000007ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000efc  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000939  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072f  00000000  00000000  00002109  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004aa  00000000  00000000  000029a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ef  00000000  00000000  00002e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000333d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	b2 c0       	rjmp	.+356    	; 0x17a <__vector_5>
  16:	00 00       	nop
  18:	c3 c0       	rjmp	.+390    	; 0x1a0 <__vector_6>
  1a:	00 00       	nop
  1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__vector_7>
  1e:	00 00       	nop
  20:	e5 c0       	rjmp	.+458    	; 0x1ec <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e8 c0       	rjmp	.+464    	; 0x212 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 36       	cpi	r26, 0x6A	; 106
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e6       	ldi	r26, 0x6A	; 106
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 37       	cpi	r26, 0x7A	; 122
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	32 d2       	rcall	.+1124   	; 0x528 <main>
  c4:	11 c3       	rjmp	.+1570   	; 0x6e8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <UART1_Putch>:


// 한 바이트 송신 mp3에 송신용
void UART1_Putch(char data)
{
	while((UCSR1A & 0x20) == 0x0);//UDRE0 = 1이 될 때까지 대기
  c8:	eb e9       	ldi	r30, 0x9B	; 155
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	95 ff       	sbrs	r25, 5
  d0:	fd cf       	rjmp	.-6      	; 0xcc <UART1_Putch+0x4>
	UDR1 = data; // 데이터 전송
  d2:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  d6:	08 95       	ret

000000d8 <SendCommand>:

void UART1_Putch(char); // 1바이트 송신

// mp3 USART 함수
void SendCommand(unsigned char cmd)
{
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	18 2f       	mov	r17, r24
	unsigned int checksum = 0;
	char temp[20];

	//USART통신으로 DF player에 송신
	UART1_Putch(0x7E);		//START command
  e0:	8e e7       	ldi	r24, 0x7E	; 126
  e2:	f2 df       	rcall	.-28     	; 0xc8 <UART1_Putch>
	UART1_Putch(0xFF);		//Version Information
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	f0 df       	rcall	.-32     	; 0xc8 <UART1_Putch>
	UART1_Putch(0x06);		//data length
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	ee df       	rcall	.-36     	; 0xc8 <UART1_Putch>
	UART1_Putch(cmd);
  ec:	81 2f       	mov	r24, r17
  ee:	ec df       	rcall	.-40     	; 0xc8 <UART1_Putch>
	UART1_Putch(0x00);
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	ea df       	rcall	.-44     	; 0xc8 <UART1_Putch>
  f4:	80 e0       	ldi	r24, 0x00	; 0
	UART1_Putch(0x00);
  f6:	e8 df       	rcall	.-48     	; 0xc8 <UART1_Putch>
  f8:	19 30       	cpi	r17, 0x09	; 9
	
	if(cmd != CMD_TF){
  fa:	39 f0       	breq	.+14     	; 0x10a <SendCommand+0x32>
  fc:	80 e0       	ldi	r24, 0x00	; 0
		UART1_Putch(0x00);
  fe:	e4 df       	rcall	.-56     	; 0xc8 <UART1_Putch>
 100:	cb ef       	ldi	r28, 0xFB	; 251
		checksum = 0 - (0xFF + 0x06 + cmd);
 102:	de ef       	ldi	r29, 0xFE	; 254
 104:	c1 1b       	sub	r28, r17
 106:	d1 09       	sbc	r29, r1
 108:	04 c0       	rjmp	.+8      	; 0x112 <SendCommand+0x3a>
	}
	else{
		UART1_Putch(0x02);
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	dd df       	rcall	.-70     	; 0xc8 <UART1_Putch>
		checksum = 0 - (0xFF + 0x06 + cmd + 0x02);
 10e:	c0 ef       	ldi	r28, 0xF0	; 240
 110:	de ef       	ldi	r29, 0xFE	; 254
	}

	UART1_Putch((char)(checksum >> 8));
 112:	8d 2f       	mov	r24, r29
 114:	d9 df       	rcall	.-78     	; 0xc8 <UART1_Putch>
 116:	8c 2f       	mov	r24, r28
	UART1_Putch(checksum&0xFF);
 118:	d7 df       	rcall	.-82     	; 0xc8 <UART1_Putch>
 11a:	8f ee       	ldi	r24, 0xEF	; 239
 11c:	d5 df       	rcall	.-86     	; 0xc8 <UART1_Putch>
	UART1_Putch(0xEF);
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17

	UART1_Putch(checksum.arrayChecksum[1]);
	UART1_Putch(checksum.arrayChecksum[0]);
	UART1_Putch(0xEF);
	*/
}
 124:	08 95       	ret

00000126 <SendCommand2>:
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28

//원하는 음악 틀때 쓰는 함수
void SendCommand2(unsigned char cmd, unsigned char param1, unsigned char param2)
{
 12c:	df 93       	push	r29
 12e:	c8 2f       	mov	r28, r24
 130:	06 2f       	mov	r16, r22
 132:	14 2f       	mov	r17, r20
	unsigned int checksum = 0;
	char temp[20];

	UART1_Putch(0x7E);
 134:	8e e7       	ldi	r24, 0x7E	; 126
 136:	c8 df       	rcall	.-112    	; 0xc8 <UART1_Putch>
	UART1_Putch(0xFF);
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	c6 df       	rcall	.-116    	; 0xc8 <UART1_Putch>
	UART1_Putch(0x06);
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	c4 df       	rcall	.-120    	; 0xc8 <UART1_Putch>
	UART1_Putch(cmd);
 140:	8c 2f       	mov	r24, r28
 142:	c2 df       	rcall	.-124    	; 0xc8 <UART1_Putch>
	UART1_Putch(0x00);
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	c0 df       	rcall	.-128    	; 0xc8 <UART1_Putch>
	UART1_Putch(param1);
 148:	80 2f       	mov	r24, r16
 14a:	be df       	rcall	.-132    	; 0xc8 <UART1_Putch>
 14c:	81 2f       	mov	r24, r17
	UART1_Putch(param2);
 14e:	bc df       	rcall	.-136    	; 0xc8 <UART1_Putch>
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	cb 5f       	subi	r28, 0xFB	; 251
	
	checksum = 0 - (0xFF + 0x06 + cmd + param1 + param2);
 154:	de 4f       	sbci	r29, 0xFE	; 254
 156:	c0 0f       	add	r28, r16
 158:	d1 1d       	adc	r29, r1
 15a:	c1 0f       	add	r28, r17
 15c:	d1 1d       	adc	r29, r1
 15e:	d1 95       	neg	r29
 160:	c1 95       	neg	r28
 162:	d1 09       	sbc	r29, r1

	UART1_Putch((char)(checksum >> 8));
 164:	8d 2f       	mov	r24, r29
 166:	b0 df       	rcall	.-160    	; 0xc8 <UART1_Putch>
 168:	8c 2f       	mov	r24, r28
	UART1_Putch(checksum&0xFF);
 16a:	ae df       	rcall	.-164    	; 0xc8 <UART1_Putch>
 16c:	8f ee       	ldi	r24, 0xEF	; 239
 16e:	ac df       	rcall	.-168    	; 0xc8 <UART1_Putch>
	UART1_Putch(0xEF);
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17

	UART1_Putch(checksum.arrayChecksum[1]);
	UART1_Putch(checksum.arrayChecksum[0]);
	UART1_Putch(0xEF);
	*/
}
 176:	0f 91       	pop	r16
 178:	08 95       	ret

0000017a <__vector_5>:
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
	UDR1 = data; // 데이터 전송
}


ISR(INT4_vect)		// 오른쪽버튼
{
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
	if(state !=5) state=4;
 186:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <state>
 18a:	85 30       	cpi	r24, 0x05	; 5
 18c:	19 f0       	breq	.+6      	; 0x194 <__vector_5+0x1a>
 18e:	84 e0       	ldi	r24, 0x04	; 4
 190:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <state>
	
}
 194:	8f 91       	pop	r24
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_6>:
ISR(INT5_vect)		// 왼쪽버튼
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
	if(state !=4)state=5;
 1ac:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <state>
 1b0:	84 30       	cpi	r24, 0x04	; 4
 1b2:	19 f0       	breq	.+6      	; 0x1ba <__vector_6+0x1a>
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <state>
		
}
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_7>:
ISR(INT6_vect)		// 위쪽 버튼
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	8f 93       	push	r24
	if(state !=7) state=6;
 1d2:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <state>
 1d6:	87 30       	cpi	r24, 0x07	; 7
 1d8:	19 f0       	breq	.+6      	; 0x1e0 <__vector_7+0x1a>
 1da:	86 e0       	ldi	r24, 0x06	; 6
 1dc:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <state>
	
}
 1e0:	8f 91       	pop	r24
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <__vector_8>:
ISR(INT7_vect)		// 아래 버튼
{
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	8f 93       	push	r24
	if(state !=6) state=7;
 1f8:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <state>
 1fc:	86 30       	cpi	r24, 0x06	; 6
 1fe:	19 f0       	breq	.+6      	; 0x206 <__vector_8+0x1a>
 200:	87 e0       	ldi	r24, 0x07	; 7
 202:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <state>
	
}
 206:	8f 91       	pop	r24
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <__vector_16>:

// 타이머/카운터0 오버플로우 인터럽트 처리, 주기 = 1/16 * 1024 * 256 = 16.384ms
ISR(TIMER0_OVF_vect)
{
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
	TCNT0= 0x0;
 220:	12 be       	out	0x32, r1	; 50
	if(hell_mode==0) cnt1++;
 222:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <hell_mode>
 226:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <hell_mode+0x1>
 22a:	89 2b       	or	r24, r25
 22c:	51 f4       	brne	.+20     	; 0x242 <__vector_16+0x30>
 22e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <cnt1>
 232:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <cnt1+0x1>
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <cnt1+0x1>
 23c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <cnt1>
 240:	09 c0       	rjmp	.+18     	; 0x254 <__vector_16+0x42>
	else cnt2++;
 242:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <cnt2>
 246:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <cnt2+0x1>
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <cnt2+0x1>
 250:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <cnt2>
}
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <way>:

void way(void)		//자동으로 지렁이가 움직임
{
	if((cnt1 >= 15) || (cnt2 >=10))		//cnt가 61이 1초
 262:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <cnt1>
 266:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <cnt1+0x1>
 26a:	0f 97       	sbiw	r24, 0x0f	; 15
 26c:	3c f4       	brge	.+14     	; 0x27c <way+0x1a>
 26e:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <cnt2>
 272:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <cnt2+0x1>
 276:	0a 97       	sbiw	r24, 0x0a	; 10
 278:	0c f4       	brge	.+2      	; 0x27c <way+0x1a>
 27a:	e7 c0       	rjmp	.+462    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	{
		cnt1=0;
 27c:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <cnt1+0x1>
 280:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <cnt1>
		cnt2=0;
 284:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <cnt2+0x1>
 288:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <cnt2>
		if(state==4)		//오른쪽버튼 입력시
 28c:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <state>
 290:	84 30       	cpi	r24, 0x04	; 4
 292:	b1 f5       	brne	.+108    	; 0x300 <way+0x9e>
		{
			for(k=age;k>0;k--)		//먹이 먹은 양에 따라 뒤에 몸통들이 표시됨
 294:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <__data_end>
 298:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <__data_end+0x1>
 29c:	b0 93 74 01 	sts	0x0174, r27	; 0x800174 <k+0x1>
 2a0:	a0 93 73 01 	sts	0x0173, r26	; 0x800173 <k>
 2a4:	1a 16       	cp	r1, r26
 2a6:	1b 06       	cpc	r1, r27
 2a8:	d4 f4       	brge	.+52     	; 0x2de <way+0x7c>
 2aa:	aa 0f       	add	r26, r26
 2ac:	bb 1f       	adc	r27, r27
 2ae:	fd 01       	movw	r30, r26
 2b0:	e4 5c       	subi	r30, 0xC4	; 196
 2b2:	fe 4f       	sbci	r31, 0xFE	; 254
 2b4:	a2 5e       	subi	r26, 0xE2	; 226
 2b6:	be 4f       	sbci	r27, 0xFE	; 254
 2b8:	2c e3       	ldi	r18, 0x3C	; 60
 2ba:	31 e0       	ldi	r19, 0x01	; 1
			{
				i[k] = i[k-1];
 2bc:	92 91       	ld	r25, -Z
 2be:	82 91       	ld	r24, -Z
 2c0:	93 83       	std	Z+3, r25	; 0x03
 2c2:	82 83       	std	Z+2, r24	; 0x02
				j[k] = j[k-1];
 2c4:	9e 91       	ld	r25, -X
 2c6:	8e 91       	ld	r24, -X
 2c8:	13 96       	adiw	r26, 0x03	; 3
 2ca:	9c 93       	st	X, r25
 2cc:	8e 93       	st	-X, r24
 2ce:	12 97       	sbiw	r26, 0x02	; 2
	{
		cnt1=0;
		cnt2=0;
		if(state==4)		//오른쪽버튼 입력시
		{
			for(k=age;k>0;k--)		//먹이 먹은 양에 따라 뒤에 몸통들이 표시됨
 2d0:	e2 17       	cp	r30, r18
 2d2:	f3 07       	cpc	r31, r19
 2d4:	99 f7       	brne	.-26     	; 0x2bc <way+0x5a>
 2d6:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <k+0x1>
 2da:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <k>
			{
				i[k] = i[k-1];
				j[k] = j[k-1];
			}
			if(++(i[0])>=8) ending=1;		//벽에 박으면 죽음
 2de:	ec e3       	ldi	r30, 0x3C	; 60
 2e0:	f1 e0       	ldi	r31, 0x01	; 1
 2e2:	80 81       	ld	r24, Z
 2e4:	91 81       	ldd	r25, Z+1	; 0x01
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	91 83       	std	Z+1, r25	; 0x01
 2ea:	80 83       	st	Z, r24
 2ec:	08 97       	sbiw	r24, 0x08	; 8
 2ee:	0c f4       	brge	.+2      	; 0x2f2 <way+0x90>
 2f0:	ac c0       	rjmp	.+344    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <ending+0x1>
 2fa:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <ending>
 2fe:	08 95       	ret
		}
		else if (state==5)		//왼쪽버튼 입력시
 300:	85 30       	cpi	r24, 0x05	; 5
 302:	b1 f5       	brne	.+108    	; 0x370 <way+0x10e>
		{
			for(k=age;k>0;k--)
 304:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <__data_end>
 308:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <__data_end+0x1>
 30c:	b0 93 74 01 	sts	0x0174, r27	; 0x800174 <k+0x1>
 310:	a0 93 73 01 	sts	0x0173, r26	; 0x800173 <k>
 314:	1a 16       	cp	r1, r26
 316:	1b 06       	cpc	r1, r27
 318:	d4 f4       	brge	.+52     	; 0x34e <way+0xec>
 31a:	aa 0f       	add	r26, r26
 31c:	bb 1f       	adc	r27, r27
 31e:	fd 01       	movw	r30, r26
 320:	e4 5c       	subi	r30, 0xC4	; 196
 322:	fe 4f       	sbci	r31, 0xFE	; 254
 324:	a2 5e       	subi	r26, 0xE2	; 226
 326:	be 4f       	sbci	r27, 0xFE	; 254
 328:	2c e3       	ldi	r18, 0x3C	; 60
 32a:	31 e0       	ldi	r19, 0x01	; 1
			{
				i[k] = i[k-1];
 32c:	92 91       	ld	r25, -Z
 32e:	82 91       	ld	r24, -Z
 330:	93 83       	std	Z+3, r25	; 0x03
 332:	82 83       	std	Z+2, r24	; 0x02
				j[k] = j[k-1];
 334:	9e 91       	ld	r25, -X
 336:	8e 91       	ld	r24, -X
 338:	13 96       	adiw	r26, 0x03	; 3
 33a:	9c 93       	st	X, r25
 33c:	8e 93       	st	-X, r24
 33e:	12 97       	sbiw	r26, 0x02	; 2
			}
			if(++(i[0])>=8) ending=1;		//벽에 박으면 죽음
		}
		else if (state==5)		//왼쪽버튼 입력시
		{
			for(k=age;k>0;k--)
 340:	e2 17       	cp	r30, r18
 342:	f3 07       	cpc	r31, r19
 344:	99 f7       	brne	.-26     	; 0x32c <way+0xca>
 346:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <k+0x1>
 34a:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <k>
			{
				i[k] = i[k-1];
				j[k] = j[k-1];
			}
			
			if(--(i[0])<0) ending=1;
 34e:	ec e3       	ldi	r30, 0x3C	; 60
 350:	f1 e0       	ldi	r31, 0x01	; 1
 352:	80 81       	ld	r24, Z
 354:	91 81       	ldd	r25, Z+1	; 0x01
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	91 83       	std	Z+1, r25	; 0x01
 35a:	80 83       	st	Z, r24
 35c:	99 23       	and	r25, r25
 35e:	0c f0       	brlt	.+2      	; 0x362 <way+0x100>
 360:	74 c0       	rjmp	.+232    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <ending+0x1>
 36a:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <ending>
 36e:	08 95       	ret
		}
		else if (state==6)		//위쪽 버튼 입력시
 370:	86 30       	cpi	r24, 0x06	; 6
 372:	a9 f5       	brne	.+106    	; 0x3de <way+0x17c>
		{
			for(k=age;k>0;k--)
 374:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <__data_end>
 378:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <__data_end+0x1>
 37c:	b0 93 74 01 	sts	0x0174, r27	; 0x800174 <k+0x1>
 380:	a0 93 73 01 	sts	0x0173, r26	; 0x800173 <k>
 384:	1a 16       	cp	r1, r26
 386:	1b 06       	cpc	r1, r27
 388:	d4 f4       	brge	.+52     	; 0x3be <way+0x15c>
 38a:	aa 0f       	add	r26, r26
 38c:	bb 1f       	adc	r27, r27
 38e:	fd 01       	movw	r30, r26
 390:	e4 5c       	subi	r30, 0xC4	; 196
 392:	fe 4f       	sbci	r31, 0xFE	; 254
 394:	a2 5e       	subi	r26, 0xE2	; 226
 396:	be 4f       	sbci	r27, 0xFE	; 254
 398:	2c e3       	ldi	r18, 0x3C	; 60
 39a:	31 e0       	ldi	r19, 0x01	; 1
			{
				i[k] = i[k-1];
 39c:	92 91       	ld	r25, -Z
 39e:	82 91       	ld	r24, -Z
 3a0:	93 83       	std	Z+3, r25	; 0x03
 3a2:	82 83       	std	Z+2, r24	; 0x02
				j[k] = j[k-1];
 3a4:	9e 91       	ld	r25, -X
 3a6:	8e 91       	ld	r24, -X
 3a8:	13 96       	adiw	r26, 0x03	; 3
 3aa:	9c 93       	st	X, r25
 3ac:	8e 93       	st	-X, r24
 3ae:	12 97       	sbiw	r26, 0x02	; 2
			
			if(--(i[0])<0) ending=1;
		}
		else if (state==6)		//위쪽 버튼 입력시
		{
			for(k=age;k>0;k--)
 3b0:	e2 17       	cp	r30, r18
 3b2:	f3 07       	cpc	r31, r19
 3b4:	99 f7       	brne	.-26     	; 0x39c <way+0x13a>
 3b6:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <k+0x1>
 3ba:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <k>
			{
				i[k] = i[k-1];
				j[k] = j[k-1];
			}
			
			if(--(j[0])<0) ending=1;
 3be:	ee e1       	ldi	r30, 0x1E	; 30
 3c0:	f1 e0       	ldi	r31, 0x01	; 1
 3c2:	80 81       	ld	r24, Z
 3c4:	91 81       	ldd	r25, Z+1	; 0x01
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	91 83       	std	Z+1, r25	; 0x01
 3ca:	80 83       	st	Z, r24
 3cc:	99 23       	and	r25, r25
 3ce:	ec f5       	brge	.+122    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <ending+0x1>
 3d8:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <ending>
 3dc:	08 95       	ret
		}
		else if (state==7)		//아래 버튼 입력시
 3de:	87 30       	cpi	r24, 0x07	; 7
 3e0:	a1 f5       	brne	.+104    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		{
			for(k=age;k>0;k--)
 3e2:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <__data_end>
 3e6:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <__data_end+0x1>
 3ea:	b0 93 74 01 	sts	0x0174, r27	; 0x800174 <k+0x1>
 3ee:	a0 93 73 01 	sts	0x0173, r26	; 0x800173 <k>
 3f2:	1a 16       	cp	r1, r26
 3f4:	1b 06       	cpc	r1, r27
 3f6:	d4 f4       	brge	.+52     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3f8:	aa 0f       	add	r26, r26
 3fa:	bb 1f       	adc	r27, r27
 3fc:	fd 01       	movw	r30, r26
 3fe:	e4 5c       	subi	r30, 0xC4	; 196
 400:	fe 4f       	sbci	r31, 0xFE	; 254
 402:	a2 5e       	subi	r26, 0xE2	; 226
 404:	be 4f       	sbci	r27, 0xFE	; 254
 406:	2c e3       	ldi	r18, 0x3C	; 60
 408:	31 e0       	ldi	r19, 0x01	; 1
			{
				i[k] = i[k-1];
 40a:	92 91       	ld	r25, -Z
 40c:	82 91       	ld	r24, -Z
 40e:	93 83       	std	Z+3, r25	; 0x03
 410:	82 83       	std	Z+2, r24	; 0x02
				j[k] = j[k-1];
 412:	9e 91       	ld	r25, -X
 414:	8e 91       	ld	r24, -X
 416:	13 96       	adiw	r26, 0x03	; 3
 418:	9c 93       	st	X, r25
 41a:	8e 93       	st	-X, r24
 41c:	12 97       	sbiw	r26, 0x02	; 2
			
			if(--(j[0])<0) ending=1;
		}
		else if (state==7)		//아래 버튼 입력시
		{
			for(k=age;k>0;k--)
 41e:	e2 17       	cp	r30, r18
 420:	f3 07       	cpc	r31, r19
 422:	99 f7       	brne	.-26     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 424:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <k+0x1>
 428:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <k>
			{
				i[k] = i[k-1];
				j[k] = j[k-1];
			}
			
			if(++(j[0])>=8) ending=1;
 42c:	ee e1       	ldi	r30, 0x1E	; 30
 42e:	f1 e0       	ldi	r31, 0x01	; 1
 430:	80 81       	ld	r24, Z
 432:	91 81       	ldd	r25, Z+1	; 0x01
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	91 83       	std	Z+1, r25	; 0x01
 438:	80 83       	st	Z, r24
 43a:	08 97       	sbiw	r24, 0x08	; 8
 43c:	34 f0       	brlt	.+12     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <ending+0x1>
 446:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <ending>
 44a:	08 95       	ret

0000044c <body_atk>:
		}
	}
}

void body_atk(void)		// 지렁이 머리가 몸통에 부딪칠경우
{
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	0f 93       	push	r16
 452:	1f 93       	push	r17
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
	for(k=1; k<age; k++)
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <k+0x1>
 460:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <k>
 464:	c0 91 6a 01 	lds	r28, 0x016A	; 0x80016a <__data_end>
 468:	d0 91 6b 01 	lds	r29, 0x016B	; 0x80016b <__data_end+0x1>
 46c:	c2 30       	cpi	r28, 0x02	; 2
 46e:	d1 05       	cpc	r29, r1
 470:	8c f1       	brlt	.+98     	; 0x4d4 <body_atk+0x88>
	{
		if((i[0]==i[k]) && (j[0]==j[k]))  ending=1;
 472:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <i>
 476:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <i+0x1>
 47a:	00 91 1e 01 	lds	r16, 0x011E	; 0x80011e <j>
 47e:	10 91 1f 01 	lds	r17, 0x011F	; 0x80011f <j+0x1>
 482:	50 91 76 01 	lds	r21, 0x0176	; 0x800176 <ending>
 486:	40 91 77 01 	lds	r20, 0x0177	; 0x800177 <ending+0x1>
 48a:	ee e3       	ldi	r30, 0x3E	; 62
 48c:	f1 e0       	ldi	r31, 0x01	; 1
 48e:	a0 e2       	ldi	r26, 0x20	; 32
 490:	b1 e0       	ldi	r27, 0x01	; 1
 492:	9e 01       	movw	r18, r28
 494:	22 0f       	add	r18, r18
 496:	33 1f       	adc	r19, r19
 498:	24 5c       	subi	r18, 0xC4	; 196
 49a:	3e 4f       	sbci	r19, 0xFE	; 254
 49c:	ee 24       	eor	r14, r14
 49e:	e3 94       	inc	r14
 4a0:	f1 2c       	mov	r15, r1
 4a2:	81 91       	ld	r24, Z+
 4a4:	91 91       	ld	r25, Z+
 4a6:	68 17       	cp	r22, r24
 4a8:	79 07       	cpc	r23, r25
 4aa:	41 f4       	brne	.+16     	; 0x4bc <body_atk+0x70>
 4ac:	8d 91       	ld	r24, X+
 4ae:	9c 91       	ld	r25, X
 4b0:	11 97       	sbiw	r26, 0x01	; 1
 4b2:	08 17       	cp	r16, r24
 4b4:	19 07       	cpc	r17, r25
 4b6:	11 f4       	brne	.+4      	; 0x4bc <body_atk+0x70>
 4b8:	5e 2d       	mov	r21, r14
 4ba:	4f 2d       	mov	r20, r15
 4bc:	12 96       	adiw	r26, 0x02	; 2
	}
}

void body_atk(void)		// 지렁이 머리가 몸통에 부딪칠경우
{
	for(k=1; k<age; k++)
 4be:	e2 17       	cp	r30, r18
 4c0:	f3 07       	cpc	r31, r19
 4c2:	79 f7       	brne	.-34     	; 0x4a2 <body_atk+0x56>
 4c4:	50 93 76 01 	sts	0x0176, r21	; 0x800176 <ending>
 4c8:	40 93 77 01 	sts	0x0177, r20	; 0x800177 <ending+0x1>
 4cc:	d0 93 74 01 	sts	0x0174, r29	; 0x800174 <k+0x1>
 4d0:	c0 93 73 01 	sts	0x0173, r28	; 0x800173 <k>
	{
		if((i[0]==i[k]) && (j[0]==j[k]))  ending=1;
	}
}
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	ff 90       	pop	r15
 4de:	ef 90       	pop	r14
 4e0:	08 95       	ret

000004e2 <game_over>:

void game_over(void)		//게임 끝나는 함수
{
	if(ending==1)
 4e2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ending>
 4e6:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ending+0x1>
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	e1 f4       	brne	.+56     	; 0x526 <game_over+0x44>
	{	
		//게임이 끝났을 경우 mp3에 엔딩음악 재생
		SendCommand2(0x03,0x00, 0x02); 
 4ee:	42 e0       	ldi	r20, 0x02	; 2
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	83 e0       	ldi	r24, 0x03	; 3
 4f4:	18 de       	rcall	.-976    	; 0x126 <SendCommand2>
		while(1)		// 죽었을 경우 매트릭스에 번쩍번쩍
		{
			PORTC = 0xFF;
 4f6:	8f ef       	ldi	r24, 0xFF	; 255
 4f8:	85 bb       	out	0x15, r24	; 21
			PORTB = 0x00;
 4fa:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fc:	2f ef       	ldi	r18, 0xFF	; 255
 4fe:	39 e6       	ldi	r19, 0x69	; 105
 500:	98 e1       	ldi	r25, 0x18	; 24
 502:	21 50       	subi	r18, 0x01	; 1
 504:	30 40       	sbci	r19, 0x00	; 0
 506:	90 40       	sbci	r25, 0x00	; 0
 508:	e1 f7       	brne	.-8      	; 0x502 <game_over+0x20>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <game_over+0x2a>
 50c:	00 00       	nop
			_delay_ms(500);
			PORTC = 0x00;
 50e:	15 ba       	out	0x15, r1	; 21
			PORTB = 0xFF;
 510:	88 bb       	out	0x18, r24	; 24
 512:	2f ef       	ldi	r18, 0xFF	; 255
 514:	39 e6       	ldi	r19, 0x69	; 105
 516:	98 e1       	ldi	r25, 0x18	; 24
 518:	21 50       	subi	r18, 0x01	; 1
 51a:	30 40       	sbci	r19, 0x00	; 0
 51c:	90 40       	sbci	r25, 0x00	; 0
 51e:	e1 f7       	brne	.-8      	; 0x518 <game_over+0x36>
 520:	00 c0       	rjmp	.+0      	; 0x522 <game_over+0x40>
 522:	00 00       	nop
 524:	e9 cf       	rjmp	.-46     	; 0x4f8 <game_over+0x16>
 526:	08 95       	ret

00000528 <main>:
}

int main(void)
{
	// I/O포트 초기화
	DDRC = 0xFF;		// 출력포트 C 배열 관리 x축
 528:	8f ef       	ldi	r24, 0xFF	; 255
 52a:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xFF;		// 출력포트 R 배열 관리 y축
 52c:	87 bb       	out	0x17, r24	; 23

	PORTC = 0x00;
 52e:	15 ba       	out	0x15, r1	; 21
	PORTB = 0xFF;
 530:	88 bb       	out	0x18, r24	; 24
	
	//인터럽트 초기화
	EICRB = (2<<ISC40) | (2<<ISC50) | (2<<ISC60) | (2<<ISC70);
 532:	8a ea       	ldi	r24, 0xAA	; 170
 534:	8a bf       	out	0x3a, r24	; 58
	//INT 4~7 하강 엣지사용

	EIMSK = (1<<INT4) | (1<<INT5) | (1<<INT6) | (1<<INT7);
 536:	80 ef       	ldi	r24, 0xF0	; 240
 538:	89 bf       	out	0x39, r24	; 57
	//INT 4~7 인터럽트 활성화

	//USART 통신
	//rx,tx1번사용 mp3용
	UCSR1B = 0x08;		//TXEN1=1 송신단자로 동작
 53a:	88 e0       	ldi	r24, 0x08	; 8
 53c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0x06;		//UCSZ11=1, USCZ10=1 8비트 전송
 540:	96 e0       	ldi	r25, 0x06	; 6
 542:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1L = 103;
 546:	87 e6       	ldi	r24, 0x67	; 103
 548:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// X-TAL = 16MHz 일때, BAUD = 9600
	
	//rx,tx0번사용 휴대폰과 블루투스 연경용
	UCSR0A=0x0;
 54c:	1b b8       	out	0x0b, r1	; 11
	//UCSR0B=0b10011000;		//RXCIE0:수신 완료 인터럽트 인에이블
	// 송수신 인에이블 TXEN0 = 1, RXEN0=1
	UCSR0B = 0b00010000; // 수신 인에이블 RXEN0=1
 54e:	20 e1       	ldi	r18, 0x10	; 16
 550:	2a b9       	out	0x0a, r18	; 10

	UCSR0C=0b00000110;	//비동기 데이터 8비트 모드
 552:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H=0;	// X-TAL = 16MHz 일때, BAUD = 9600 
 556:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L=103;
 55a:	89 b9       	out	0x09, r24	; 9

	//타이머/카운터 초기화
	TIMSK = 0x01;		//OCIE0 타이머카운터0 출력 비교매치 인터럽트 인에이블비트
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	87 bf       	out	0x37, r24	; 55
	TCCR0 = 0x07;		//CS02=1,CS01=1,CS00=1 1024분주비를 씀
 560:	87 e0       	ldi	r24, 0x07	; 7
 562:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;		//TCNT0를 0x00으로 초기화
 564:	12 be       	out	0x32, r1	; 50

	sei();
 566:	78 94       	sei
	
	//_delay_ms(200);

	SendCommand(CMD_TF);
 568:	89 e0       	ldi	r24, 0x09	; 9
 56a:	b6 dd       	rcall	.-1172   	; 0xd8 <SendCommand>
 56c:	2f ef       	ldi	r18, 0xFF	; 255
 56e:	83 ec       	ldi	r24, 0xC3	; 195
 570:	99 e0       	ldi	r25, 0x09	; 9
 572:	21 50       	subi	r18, 0x01	; 1
 574:	80 40       	sbci	r24, 0x00	; 0
 576:	90 40       	sbci	r25, 0x00	; 0
 578:	e1 f7       	brne	.-8      	; 0x572 <main+0x4a>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <main+0x54>
 57c:	00 00       	nop
	_delay_ms(200);
	SendCommand2(0x03,0x00, 0x01);		//001 음악을 재생시키겠다.
 57e:	41 e0       	ldi	r20, 0x01	; 1
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	83 e0       	ldi	r24, 0x03	; 3
 584:	d0 dd       	rcall	.-1120   	; 0x126 <SendCommand2>
 586:	ef ef       	ldi	r30, 0xFF	; 255
 588:	f3 ec       	ldi	r31, 0xC3	; 195
 58a:	29 e0       	ldi	r18, 0x09	; 9
 58c:	e1 50       	subi	r30, 0x01	; 1
 58e:	f0 40       	sbci	r31, 0x00	; 0
 590:	20 40       	sbci	r18, 0x00	; 0
 592:	e1 f7       	brne	.-8      	; 0x58c <main+0x64>
 594:	00 c0       	rjmp	.+0      	; 0x596 <main+0x6e>
 596:	00 00       	nop
			_delay_ms(1);
		}
		
		
		//뱀의 머리가 먹이와 만나면
		if((C[i[0]]==C[age1[age]]) && (R[j[0]]==R[age2[age]]))
 598:	cc e3       	ldi	r28, 0x3C	; 60
 59a:	d1 e0       	ldi	r29, 0x01	; 1
 59c:	0e e1       	ldi	r16, 0x1E	; 30
 59e:	11 e0       	ldi	r17, 0x01	; 1
			if(++age == 15) 
			{
				age=0;		//먹이를 15개 이상먹으면 초기화
				state=0;	//난이도 업글 시작하면서 멈춤상태
				SendCommand2(0x03,0x00, 0x03);	//지옥모드음악재생
				hell_mode=1;	//헬모드실행
 5a0:	ee 24       	eor	r14, r14
 5a2:	e3 94       	inc	r14
 5a4:	f1 2c       	mov	r15, r1
	SendCommand2(0x03,0x00, 0x01);		//001 음악을 재생시키겠다.
	_delay_ms(200);
	
	while (1)
	{
		state = UDR0;
 5a6:	8c b1       	in	r24, 0x0c	; 12
 5a8:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <state>
		//i[0] &&j[0]이 뱀의 머리 역할을 한다.
		for(n=0;n<=age;n++)
 5ac:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <n+0x1>
 5b0:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <n>
 5b4:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <__data_end>
 5b8:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <__data_end+0x1>
 5bc:	33 23       	and	r19, r19
 5be:	9c f1       	brlt	.+102    	; 0x626 <main+0xfe>
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTC = C[i[n]];
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	fc 01       	movw	r30, r24
 5ca:	e4 5c       	subi	r30, 0xC4	; 196
 5cc:	fe 4f       	sbci	r31, 0xFE	; 254
 5ce:	01 90       	ld	r0, Z+
 5d0:	f0 81       	ld	r31, Z
 5d2:	e0 2d       	mov	r30, r0
 5d4:	ee 59       	subi	r30, 0x9E	; 158
 5d6:	fe 4f       	sbci	r31, 0xFE	; 254
 5d8:	80 81       	ld	r24, Z
 5da:	85 bb       	out	0x15, r24	; 21
			PORTB = R[j[n]];
 5dc:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <n>
 5e0:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <n+0x1>
 5e4:	ee 0f       	add	r30, r30
 5e6:	ff 1f       	adc	r31, r31
 5e8:	e2 5e       	subi	r30, 0xE2	; 226
 5ea:	fe 4f       	sbci	r31, 0xFE	; 254
 5ec:	01 90       	ld	r0, Z+
 5ee:	f0 81       	ld	r31, Z
 5f0:	e0 2d       	mov	r30, r0
 5f2:	e6 5a       	subi	r30, 0xA6	; 166
 5f4:	fe 4f       	sbci	r31, 0xFE	; 254
 5f6:	80 81       	ld	r24, Z
 5f8:	88 bb       	out	0x18, r24	; 24
 5fa:	8f e9       	ldi	r24, 0x9F	; 159
 5fc:	9f e0       	ldi	r25, 0x0F	; 15
 5fe:	01 97       	sbiw	r24, 0x01	; 1
 600:	f1 f7       	brne	.-4      	; 0x5fe <main+0xd6>
 602:	00 c0       	rjmp	.+0      	; 0x604 <main+0xdc>
 604:	00 00       	nop
	
	while (1)
	{
		state = UDR0;
		//i[0] &&j[0]이 뱀의 머리 역할을 한다.
		for(n=0;n<=age;n++)
 606:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <n>
 60a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <n+0x1>
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <n+0x1>
 614:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <n>
 618:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <__data_end>
 61c:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <__data_end+0x1>
 620:	28 17       	cp	r18, r24
 622:	39 07       	cpc	r19, r25
 624:	7c f6       	brge	.-98     	; 0x5c4 <main+0x9c>
			_delay_ms(1);
		}
		
		
		//뱀의 머리가 먹이와 만나면
		if((C[i[0]]==C[age1[age]]) && (R[j[0]]==R[age2[age]]))
 626:	a8 81       	ld	r26, Y
 628:	b9 81       	ldd	r27, Y+1	; 0x01
 62a:	ae 59       	subi	r26, 0x9E	; 158
 62c:	be 4f       	sbci	r27, 0xFE	; 254
 62e:	f9 01       	movw	r30, r18
 630:	e1 5f       	subi	r30, 0xF1	; 241
 632:	fe 4f       	sbci	r31, 0xFE	; 254
 634:	e0 81       	ld	r30, Z
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	ee 59       	subi	r30, 0x9E	; 158
 63a:	fe 4f       	sbci	r31, 0xFE	; 254
 63c:	9c 91       	ld	r25, X
 63e:	80 81       	ld	r24, Z
 640:	98 13       	cpse	r25, r24
 642:	30 c0       	rjmp	.+96     	; 0x6a4 <main+0x17c>
 644:	f8 01       	movw	r30, r16
 646:	a0 81       	ld	r26, Z
 648:	b1 81       	ldd	r27, Z+1	; 0x01
 64a:	a6 5a       	subi	r26, 0xA6	; 166
 64c:	be 4f       	sbci	r27, 0xFE	; 254
 64e:	f9 01       	movw	r30, r18
 650:	e0 50       	subi	r30, 0x00	; 0
 652:	ff 4f       	sbci	r31, 0xFF	; 255
 654:	e0 81       	ld	r30, Z
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	e6 5a       	subi	r30, 0xA6	; 166
 65a:	fe 4f       	sbci	r31, 0xFE	; 254
 65c:	9c 91       	ld	r25, X
 65e:	80 81       	ld	r24, Z
 660:	98 13       	cpse	r25, r24
 662:	20 c0       	rjmp	.+64     	; 0x6a4 <main+0x17c>
		{
			if(++age == 15) 
 664:	2f 5f       	subi	r18, 0xFF	; 255
 666:	3f 4f       	sbci	r19, 0xFF	; 255
 668:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <__data_end+0x1>
 66c:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <__data_end>
 670:	2f 30       	cpi	r18, 0x0F	; 15
 672:	31 05       	cpc	r19, r1
 674:	b9 f4       	brne	.+46     	; 0x6a4 <main+0x17c>
			{
				age=0;		//먹이를 15개 이상먹으면 초기화
 676:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <__data_end+0x1>
 67a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__data_end>
				state=0;	//난이도 업글 시작하면서 멈춤상태
 67e:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <state>
				SendCommand2(0x03,0x00, 0x03);	//지옥모드음악재생
 682:	43 e0       	ldi	r20, 0x03	; 3
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	83 e0       	ldi	r24, 0x03	; 3
 688:	4e dd       	rcall	.-1380   	; 0x126 <SendCommand2>
				hell_mode=1;	//헬모드실행
 68a:	f0 92 72 01 	sts	0x0172, r15	; 0x800172 <hell_mode+0x1>
 68e:	e0 92 71 01 	sts	0x0171, r14	; 0x800171 <hell_mode>
 692:	ff ef       	ldi	r31, 0xFF	; 255
 694:	29 e6       	ldi	r18, 0x69	; 105
 696:	88 e1       	ldi	r24, 0x18	; 24
 698:	f1 50       	subi	r31, 0x01	; 1
 69a:	20 40       	sbci	r18, 0x00	; 0
 69c:	80 40       	sbci	r24, 0x00	; 0
 69e:	e1 f7       	brne	.-8      	; 0x698 <main+0x170>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <main+0x17a>
 6a2:	00 00       	nop
				_delay_ms(500);		//바로바뀌면 사용자가 어려워하으로 딜레이를줌
			}		
		}

		// 먹이 위치
		PORTC = C[age1[age]];
 6a4:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <__data_end>
 6a8:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <__data_end+0x1>
 6ac:	e1 5f       	subi	r30, 0xF1	; 241
 6ae:	fe 4f       	sbci	r31, 0xFE	; 254
 6b0:	e0 81       	ld	r30, Z
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	ee 59       	subi	r30, 0x9E	; 158
 6b6:	fe 4f       	sbci	r31, 0xFE	; 254
 6b8:	80 81       	ld	r24, Z
 6ba:	85 bb       	out	0x15, r24	; 21
		PORTB = R[age2[age]];
 6bc:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <__data_end>
 6c0:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <__data_end+0x1>
 6c4:	e0 50       	subi	r30, 0x00	; 0
 6c6:	ff 4f       	sbci	r31, 0xFF	; 255
 6c8:	e0 81       	ld	r30, Z
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	e6 5a       	subi	r30, 0xA6	; 166
 6ce:	fe 4f       	sbci	r31, 0xFE	; 254
 6d0:	80 81       	ld	r24, Z
 6d2:	88 bb       	out	0x18, r24	; 24
 6d4:	ef e9       	ldi	r30, 0x9F	; 159
 6d6:	ff e0       	ldi	r31, 0x0F	; 15
 6d8:	31 97       	sbiw	r30, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <main+0x1b0>

		_delay_ms(1);

		way(); //자동으로 지렁이가 움직이게 하기
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <main+0x1b6>
 6de:	00 00       	nop

		body_atk();		// 지렁이 머리가 몸통에 부딪칠경우
 6e0:	c0 dd       	rcall	.-1152   	; 0x262 <way>
 6e2:	b4 de       	rcall	.-664    	; 0x44c <body_atk>

		game_over(); //게임 끝나는 함수
 6e4:	fe de       	rcall	.-516    	; 0x4e2 <game_over>
 6e6:	5f cf       	rjmp	.-322    	; 0x5a6 <main+0x7e>

000006e8 <_exit>:
		

	}
 6e8:	f8 94       	cli

000006ea <__stop_program>:
 6ea:	ff cf       	rjmp	.-2      	; 0x6ea <__stop_program>
