
AVR_Test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00002c14  00002ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  0080011c  0080011c  00002cc4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002cc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00002d38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019d0  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000990  00000000  00000000  000047c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001377  00000000  00000000  00005158  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000064d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050e  00000000  00000000  00006738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000550  00000000  00000000  00006c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00007196  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3b c2       	rjmp	.+1142   	; 0x4b8 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	04 c1       	rjmp	.+520    	; 0x282 <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e1       	ldi	r30, 0x14	; 20
      a0:	fc e2       	ldi	r31, 0x2C	; 44
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 31       	cpi	r26, 0x1C	; 28
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	ac e1       	ldi	r26, 0x1C	; 28
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 34       	cpi	r26, 0x45	; 69
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	a3 d5       	rcall	.+2886   	; 0xc0a <main>
      c4:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <UART_Init>:
void UART1_Putch(char ch)	//송신 기본함수
{
	while(!(UCSR1A & 0x20));

	UDR1 = ch;
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	8a e2       	ldi	r24, 0x2A	; 42
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	28 e1       	ldi	r18, 0x18	; 24
      d8:	fc 01       	movw	r30, r24
      da:	20 83       	st	Z, r18
      dc:	85 e9       	ldi	r24, 0x95	; 149
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	26 e0       	ldi	r18, 0x06	; 6
      e2:	fc 01       	movw	r30, r24
      e4:	20 83       	st	Z, r18
      e6:	80 e9       	ldi	r24, 0x90	; 144
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	fc 01       	movw	r30, r24
      ec:	10 82       	st	Z, r1
      ee:	89 e2       	ldi	r24, 0x29	; 41
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	27 e6       	ldi	r18, 0x67	; 103
      f4:	fc 01       	movw	r30, r24
      f6:	20 83       	st	Z, r18
      f8:	8a e9       	ldi	r24, 0x9A	; 154
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	2a e9       	ldi	r18, 0x9A	; 154
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	f9 01       	movw	r30, r18
     102:	20 81       	ld	r18, Z
     104:	20 69       	ori	r18, 0x90	; 144
     106:	fc 01       	movw	r30, r24
     108:	20 83       	st	Z, r18
     10a:	8d e9       	ldi	r24, 0x9D	; 157
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	26 e0       	ldi	r18, 0x06	; 6
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18
     114:	88 e9       	ldi	r24, 0x98	; 152
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	fc 01       	movw	r30, r24
     11a:	10 82       	st	Z, r1
     11c:	89 e9       	ldi	r24, 0x99	; 153
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	27 e6       	ldi	r18, 0x67	; 103
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18
     126:	00 00       	nop
     128:	df 91       	pop	r29
     12a:	cf 91       	pop	r28
     12c:	08 95       	ret

0000012e <UART0_Putch>:
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	1f 92       	push	r1
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	89 83       	std	Y+1, r24	; 0x01
     13a:	00 00       	nop
     13c:	8b e2       	ldi	r24, 0x2B	; 43
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	fc 01       	movw	r30, r24
     142:	80 81       	ld	r24, Z
     144:	88 2f       	mov	r24, r24
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	80 72       	andi	r24, 0x20	; 32
     14a:	99 27       	eor	r25, r25
     14c:	89 2b       	or	r24, r25
     14e:	b1 f3       	breq	.-20     	; 0x13c <UART0_Putch+0xe>
     150:	8c e2       	ldi	r24, 0x2C	; 44
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	29 81       	ldd	r18, Y+1	; 0x01
     156:	fc 01       	movw	r30, r24
     158:	20 83       	st	Z, r18
     15a:	00 00       	nop
     15c:	0f 90       	pop	r0
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	08 95       	ret

00000164 <SendCommand>:


void SendCommand(unsigned char cmd)
{
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	67 97       	sbiw	r28, 0x17	; 23
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	8f 8b       	std	Y+23, r24	; 0x17
	unsigned int checksum = 0;
     17a:	1a 82       	std	Y+2, r1	; 0x02
     17c:	19 82       	std	Y+1, r1	; 0x01
	char temp[20];

	UART0_Putch(0x7E);
     17e:	8e e7       	ldi	r24, 0x7E	; 126
     180:	d6 df       	rcall	.-84     	; 0x12e <UART0_Putch>
	UART0_Putch(0xFF);
     182:	8f ef       	ldi	r24, 0xFF	; 255
     184:	d4 df       	rcall	.-88     	; 0x12e <UART0_Putch>
	UART0_Putch(0x06);
     186:	86 e0       	ldi	r24, 0x06	; 6
     188:	d2 df       	rcall	.-92     	; 0x12e <UART0_Putch>
	UART0_Putch(cmd);
     18a:	8f 89       	ldd	r24, Y+23	; 0x17
     18c:	d0 df       	rcall	.-96     	; 0x12e <UART0_Putch>
	UART0_Putch(0x00);
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	ce df       	rcall	.-100    	; 0x12e <UART0_Putch>
     192:	80 e0       	ldi	r24, 0x00	; 0
	UART0_Putch(0x00);
     194:	cc df       	rcall	.-104    	; 0x12e <UART0_Putch>
     196:	8f 89       	ldd	r24, Y+23	; 0x17
	
	if(cmd != CMD_TF){
     198:	89 30       	cpi	r24, 0x09	; 9
     19a:	71 f0       	breq	.+28     	; 0x1b8 <SendCommand+0x54>
     19c:	80 e0       	ldi	r24, 0x00	; 0
		UART0_Putch(0x00);
     19e:	c7 df       	rcall	.-114    	; 0x12e <UART0_Putch>
     1a0:	8f 89       	ldd	r24, Y+23	; 0x17
     1a2:	88 2f       	mov	r24, r24
		checksum = 0 - (0xFF + 0x06 + cmd);
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	2b ef       	ldi	r18, 0xFB	; 251
     1a8:	3e ef       	ldi	r19, 0xFE	; 254
     1aa:	a9 01       	movw	r20, r18
     1ac:	48 1b       	sub	r20, r24
     1ae:	59 0b       	sbc	r21, r25
     1b0:	ca 01       	movw	r24, r20
     1b2:	9a 83       	std	Y+2, r25	; 0x02
     1b4:	89 83       	std	Y+1, r24	; 0x01
     1b6:	0d c0       	rjmp	.+26     	; 0x1d2 <SendCommand+0x6e>
     1b8:	82 e0       	ldi	r24, 0x02	; 2
	}
	else{
		UART0_Putch(0x02);
     1ba:	b9 df       	rcall	.-142    	; 0x12e <UART0_Putch>
     1bc:	8f 89       	ldd	r24, Y+23	; 0x17
     1be:	88 2f       	mov	r24, r24
		checksum = 0 - (0xFF + 0x06 + cmd + 0x02);
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	29 ef       	ldi	r18, 0xF9	; 249
     1c4:	3e ef       	ldi	r19, 0xFE	; 254
     1c6:	a9 01       	movw	r20, r18
     1c8:	48 1b       	sub	r20, r24
     1ca:	59 0b       	sbc	r21, r25
     1cc:	ca 01       	movw	r24, r20
     1ce:	9a 83       	std	Y+2, r25	; 0x02
     1d0:	89 83       	std	Y+1, r24	; 0x01
	}

	UART0_Putch((char)(checksum >> 8));
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	9a 81       	ldd	r25, Y+2	; 0x02
     1d6:	89 2f       	mov	r24, r25
     1d8:	99 27       	eor	r25, r25
     1da:	a9 df       	rcall	.-174    	; 0x12e <UART0_Putch>
	UART0_Putch(checksum&0xFF);
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	a7 df       	rcall	.-178    	; 0x12e <UART0_Putch>
     1e0:	8f ee       	ldi	r24, 0xEF	; 239
	UART0_Putch(0xEF);
     1e2:	a5 df       	rcall	.-182    	; 0x12e <UART0_Putch>
     1e4:	00 00       	nop
     1e6:	67 96       	adiw	r28, 0x17	; 23
}
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <SendCommand01>:
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29


void SendCommand01(unsigned char cmd, unsigned char param1, unsigned char param2)
{
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	69 97       	sbiw	r28, 0x19	; 25
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	8f 8b       	std	Y+23, r24	; 0x17
     20e:	68 8f       	std	Y+24, r22	; 0x18
     210:	49 8f       	std	Y+25, r20	; 0x19
	unsigned int checksum = 0;
     212:	1a 82       	std	Y+2, r1	; 0x02
     214:	19 82       	std	Y+1, r1	; 0x01
	char temp[20];

	UART0_Putch(0x7E);
     216:	8e e7       	ldi	r24, 0x7E	; 126
     218:	8a df       	rcall	.-236    	; 0x12e <UART0_Putch>
	UART0_Putch(0xFF);
     21a:	8f ef       	ldi	r24, 0xFF	; 255
     21c:	88 df       	rcall	.-240    	; 0x12e <UART0_Putch>
	UART0_Putch(0x06);
     21e:	86 e0       	ldi	r24, 0x06	; 6
     220:	86 df       	rcall	.-244    	; 0x12e <UART0_Putch>
	UART0_Putch(cmd);
     222:	8f 89       	ldd	r24, Y+23	; 0x17
     224:	84 df       	rcall	.-248    	; 0x12e <UART0_Putch>
	UART0_Putch(0x00);
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	82 df       	rcall	.-252    	; 0x12e <UART0_Putch>
	UART0_Putch(param1);
     22a:	88 8d       	ldd	r24, Y+24	; 0x18
     22c:	80 df       	rcall	.-256    	; 0x12e <UART0_Putch>
     22e:	89 8d       	ldd	r24, Y+25	; 0x19
	UART0_Putch(param2);
     230:	7e df       	rcall	.-260    	; 0x12e <UART0_Putch>
     232:	8f 89       	ldd	r24, Y+23	; 0x17
     234:	88 2f       	mov	r24, r24
	

	checksum = 0 - (0xFF + 0x06 + cmd + param1 + param2);
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	9c 01       	movw	r18, r24
     23a:	2b 5f       	subi	r18, 0xFB	; 251
     23c:	3e 4f       	sbci	r19, 0xFE	; 254
     23e:	88 8d       	ldd	r24, Y+24	; 0x18
     240:	88 2f       	mov	r24, r24
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	28 0f       	add	r18, r24
     246:	39 1f       	adc	r19, r25
     248:	89 8d       	ldd	r24, Y+25	; 0x19
     24a:	88 2f       	mov	r24, r24
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	82 0f       	add	r24, r18
     250:	93 1f       	adc	r25, r19
     252:	91 95       	neg	r25
     254:	81 95       	neg	r24
     256:	91 09       	sbc	r25, r1
     258:	9a 83       	std	Y+2, r25	; 0x02
     25a:	89 83       	std	Y+1, r24	; 0x01
     25c:	89 81       	ldd	r24, Y+1	; 0x01

	UART0_Putch((char)(checksum >> 8));
     25e:	9a 81       	ldd	r25, Y+2	; 0x02
     260:	89 2f       	mov	r24, r25
     262:	99 27       	eor	r25, r25
     264:	64 df       	rcall	.-312    	; 0x12e <UART0_Putch>
     266:	89 81       	ldd	r24, Y+1	; 0x01
	UART0_Putch(checksum&0xFF);
     268:	62 df       	rcall	.-316    	; 0x12e <UART0_Putch>
     26a:	8f ee       	ldi	r24, 0xEF	; 239
     26c:	60 df       	rcall	.-320    	; 0x12e <UART0_Putch>
	UART0_Putch(0xEF);
     26e:	00 00       	nop
     270:	69 96       	adiw	r28, 0x19	; 25
     272:	0f b6       	in	r0, 0x3f	; 63
}
     274:	f8 94       	cli
     276:	de bf       	out	0x3e, r29	; 62
     278:	0f be       	out	0x3f, r0	; 63
     27a:	cd bf       	out	0x3d, r28	; 61
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <__vector_30>:
     282:	1f 92       	push	r1
     284:	0f 92       	push	r0
     286:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
enum{close, open};	//도어락 상태


ISR(USART1_RX_vect)

{
     28a:	0f 92       	push	r0
     28c:	11 24       	eor	r1, r1
     28e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     292:	0f 92       	push	r0
     294:	2f 93       	push	r18
     296:	3f 93       	push	r19
     298:	4f 93       	push	r20
     29a:	5f 93       	push	r21
     29c:	6f 93       	push	r22
     29e:	7f 93       	push	r23
     2a0:	8f 93       	push	r24
     2a2:	9f 93       	push	r25
     2a4:	af 93       	push	r26
     2a6:	bf 93       	push	r27
     2a8:	ef 93       	push	r30
     2aa:	ff 93       	push	r31
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	28 97       	sbiw	r28, 0x08	; 8
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	cd bf       	out	0x3d, r28	; 61
	unsigned char ch;	//수신저장변수
	static char old_index = 0;	//이전 비밀번호 자리
	static char new_index = 0;	//새 비밀번호 자리

	ch = UDR1; // 수신
     2ba:	8c e9       	ldi	r24, 0x9C	; 156
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	fc 01       	movw	r30, r24
     2c0:	80 81       	ld	r24, Z
     2c2:	88 87       	std	Y+8, r24	; 0x08

	if(RX == 0 && ch == 'C') //C를 받았을때
     2c4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <RX>
     2c8:	88 23       	and	r24, r24
     2ca:	59 f5       	brne	.+86     	; 0x322 <__vector_30+0xa0>
     2cc:	88 85       	ldd	r24, Y+8	; 0x08
     2ce:	83 34       	cpi	r24, 0x43	; 67
     2d0:	41 f5       	brne	.+80     	; 0x322 <__vector_30+0xa0>
	{
		RX = 1;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <RX>
		for(int i = 0; i < 11; i++)
     2d8:	1a 82       	std	Y+2, r1	; 0x02
     2da:	19 82       	std	Y+1, r1	; 0x01
     2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <__vector_30+0x72>
		{
			old_password[i] = 0;
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	9a 81       	ldd	r25, Y+2	; 0x02
     2e2:	82 5e       	subi	r24, 0xE2	; 226
     2e4:	9e 4f       	sbci	r25, 0xFE	; 254
     2e6:	fc 01       	movw	r30, r24
     2e8:	10 82       	st	Z, r1
	ch = UDR1; // 수신

	if(RX == 0 && ch == 'C') //C를 받았을때
	{
		RX = 1;
		for(int i = 0; i < 11; i++)
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	9a 81       	ldd	r25, Y+2	; 0x02
     2ee:	01 96       	adiw	r24, 0x01	; 1
     2f0:	9a 83       	std	Y+2, r25	; 0x02
     2f2:	89 83       	std	Y+1, r24	; 0x01
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	9a 81       	ldd	r25, Y+2	; 0x02
     2f8:	0b 97       	sbiw	r24, 0x0b	; 11
     2fa:	8c f3       	brlt	.-30     	; 0x2de <__vector_30+0x5c>
		{
			old_password[i] = 0;
		}
		for(int i = 0; i < 11; i++)
     2fc:	1c 82       	std	Y+4, r1	; 0x04
     2fe:	1b 82       	std	Y+3, r1	; 0x03
     300:	0b c0       	rjmp	.+22     	; 0x318 <__vector_30+0x96>
		{
			new_password[i] = 0;
     302:	8b 81       	ldd	r24, Y+3	; 0x03
     304:	9c 81       	ldd	r25, Y+4	; 0x04
     306:	87 5d       	subi	r24, 0xD7	; 215
     308:	9e 4f       	sbci	r25, 0xFE	; 254
     30a:	fc 01       	movw	r30, r24
     30c:	10 82       	st	Z, r1
		RX = 1;
		for(int i = 0; i < 11; i++)
		{
			old_password[i] = 0;
		}
		for(int i = 0; i < 11; i++)
     30e:	8b 81       	ldd	r24, Y+3	; 0x03
     310:	9c 81       	ldd	r25, Y+4	; 0x04
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	9c 83       	std	Y+4, r25	; 0x04
     316:	8b 83       	std	Y+3, r24	; 0x03
     318:	8b 81       	ldd	r24, Y+3	; 0x03
     31a:	9c 81       	ldd	r25, Y+4	; 0x04
     31c:	0b 97       	sbiw	r24, 0x0b	; 11
     31e:	8c f3       	brlt	.-30     	; 0x302 <__vector_30+0x80>
     320:	4a c0       	rjmp	.+148    	; 0x3b6 <__vector_30+0x134>
		{
			new_password[i] = 0;
		}
	}
	else if(RX == 1)
     322:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <RX>
     326:	81 30       	cpi	r24, 0x01	; 1
     328:	11 f5       	brne	.+68     	; 0x36e <__vector_30+0xec>
	{
		if(ch == 'E')	//E를 받았을때 아직 프로토콜이 완료 안된 상태라 초기화
     32a:	88 85       	ldd	r24, Y+8	; 0x08
     32c:	85 34       	cpi	r24, 0x45	; 69
     32e:	31 f4       	brne	.+12     	; 0x33c <__vector_30+0xba>
		{
			rx_complete = 1;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rx_complete>
			RX = 0;
     336:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RX>
     33a:	3d c0       	rjmp	.+122    	; 0x3b6 <__vector_30+0x134>
		}
		else if(ch == 'R')	//비밀번호가 맞는지 확인하는 단계
     33c:	88 85       	ldd	r24, Y+8	; 0x08
     33e:	82 35       	cpi	r24, 0x52	; 82
     340:	31 f4       	brne	.+12     	; 0x34e <__vector_30+0xcc>
		{
			RX = 2;
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <RX>
			old_index = 0;
     348:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <old_index.1962>
     34c:	34 c0       	rjmp	.+104    	; 0x3b6 <__vector_30+0x134>
		}
		else  //명령어가 아니면 비밀번호로 간주하여 입력값에 넣는다
		{
			old_password[old_index] = ch;
     34e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <old_index.1962>
     352:	08 2e       	mov	r0, r24
     354:	00 0c       	add	r0, r0
     356:	99 0b       	sbc	r25, r25
     358:	28 85       	ldd	r18, Y+8	; 0x08
     35a:	82 5e       	subi	r24, 0xE2	; 226
     35c:	9e 4f       	sbci	r25, 0xFE	; 254
     35e:	fc 01       	movw	r30, r24
     360:	20 83       	st	Z, r18
			old_index++;
     362:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <old_index.1962>
     366:	8f 5f       	subi	r24, 0xFF	; 255
     368:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <old_index.1962>
     36c:	24 c0       	rjmp	.+72     	; 0x3b6 <__vector_30+0x134>
		}
	}
	else if(RX == 2)	//단계 2일 경우
     36e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <RX>
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	01 f5       	brne	.+64     	; 0x3b6 <__vector_30+0x134>
	{
		if(ch == 'E')	//E를 받았을때 블루투스 완료 플래그 온
     376:	88 85       	ldd	r24, Y+8	; 0x08
     378:	85 34       	cpi	r24, 0x45	; 69
     37a:	31 f4       	brne	.+12     	; 0x388 <__vector_30+0x106>
		{
			rx_complete = 1;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rx_complete>
			RX = 0;
     382:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RX>
     386:	17 c0       	rjmp	.+46     	; 0x3b6 <__vector_30+0x134>
		}
		else if(ch == 'R')	//R이 나올 단계 아니므로 초기화
     388:	88 85       	ldd	r24, Y+8	; 0x08
     38a:	82 35       	cpi	r24, 0x52	; 82
     38c:	29 f4       	brne	.+10     	; 0x398 <__vector_30+0x116>
		{
			RX = 0;
     38e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RX>
			new_index = 0;
     392:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <new_index.1963>
     396:	0f c0       	rjmp	.+30     	; 0x3b6 <__vector_30+0x134>
		}
		else  //명령어가 아니면 새로운 비밀번호로 간주하여 입력값에 넣는다
		{
			new_password[new_index] = ch;
     398:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <new_index.1963>
     39c:	08 2e       	mov	r0, r24
     39e:	00 0c       	add	r0, r0
     3a0:	99 0b       	sbc	r25, r25
     3a2:	28 85       	ldd	r18, Y+8	; 0x08
     3a4:	87 5d       	subi	r24, 0xD7	; 215
     3a6:	9e 4f       	sbci	r25, 0xFE	; 254
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 83       	st	Z, r18
			new_index++;
     3ac:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <new_index.1963>
     3b0:	8f 5f       	subi	r24, 0xFF	; 255
     3b2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <new_index.1963>
		}
	}

	if(rx_complete == 1)	//블루투스 완료시 새로운 비밀번호 입력하고 eeprom에도 저장
     3b6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <rx_complete>
     3ba:	81 30       	cpi	r24, 0x01	; 1
     3bc:	09 f0       	breq	.+2      	; 0x3c0 <__vector_30+0x13e>
     3be:	5e c0       	rjmp	.+188    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	{
		if(strcmp(password, old_password) == 0)
     3c0:	6e e1       	ldi	r22, 0x1E	; 30
     3c2:	71 e0       	ldi	r23, 0x01	; 1
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <strcmp>
     3cc:	89 2b       	or	r24, r25
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <__vector_30+0x150>
     3d0:	42 c0       	rjmp	.+132    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		{
			for(int i = 0; i <= new_index; i++)
     3d2:	1e 82       	std	Y+6, r1	; 0x06
     3d4:	1d 82       	std	Y+5, r1	; 0x05
     3d6:	11 c0       	rjmp	.+34     	; 0x3fa <__vector_30+0x178>
			{
				password[i] = new_password[i];
     3d8:	8d 81       	ldd	r24, Y+5	; 0x05
     3da:	9e 81       	ldd	r25, Y+6	; 0x06
     3dc:	87 5d       	subi	r24, 0xD7	; 215
     3de:	9e 4f       	sbci	r25, 0xFE	; 254
     3e0:	fc 01       	movw	r30, r24
     3e2:	20 81       	ld	r18, Z
     3e4:	8d 81       	ldd	r24, Y+5	; 0x05
     3e6:	9e 81       	ldd	r25, Y+6	; 0x06
     3e8:	80 50       	subi	r24, 0x00	; 0
     3ea:	9f 4f       	sbci	r25, 0xFF	; 255
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18

	if(rx_complete == 1)	//블루투스 완료시 새로운 비밀번호 입력하고 eeprom에도 저장
	{
		if(strcmp(password, old_password) == 0)
		{
			for(int i = 0; i <= new_index; i++)
     3f0:	8d 81       	ldd	r24, Y+5	; 0x05
     3f2:	9e 81       	ldd	r25, Y+6	; 0x06
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	9e 83       	std	Y+6, r25	; 0x06
     3f8:	8d 83       	std	Y+5, r24	; 0x05
     3fa:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <new_index.1963>
     3fe:	28 2f       	mov	r18, r24
     400:	88 0f       	add	r24, r24
     402:	33 0b       	sbc	r19, r19
     404:	8d 81       	ldd	r24, Y+5	; 0x05
     406:	9e 81       	ldd	r25, Y+6	; 0x06
     408:	28 17       	cp	r18, r24
     40a:	39 07       	cpc	r19, r25
     40c:	2c f7       	brge	.-54     	; 0x3d8 <__vector_30+0x156>
			{
				password[i] = new_password[i];
			}
			for(uint8_t i = 0; i < 11; i++)
     40e:	1f 82       	std	Y+7, r1	; 0x07
     410:	12 c0       	rjmp	.+36     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			{
				eeprom_update_byte(EEPROM + i,password[i]);
     412:	8f 81       	ldd	r24, Y+7	; 0x07
     414:	88 2f       	mov	r24, r24
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	80 50       	subi	r24, 0x00	; 0
     41a:	9f 4f       	sbci	r25, 0xFF	; 255
     41c:	fc 01       	movw	r30, r24
     41e:	80 81       	ld	r24, Z
     420:	28 2f       	mov	r18, r24
     422:	8f 81       	ldd	r24, Y+7	; 0x07
     424:	88 2f       	mov	r24, r24
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	62 2f       	mov	r22, r18
     42c:	0e 94 f7 15 	call	0x2bee	; 0x2bee <eeprom_update_byte>
		{
			for(int i = 0; i <= new_index; i++)
			{
				password[i] = new_password[i];
			}
			for(uint8_t i = 0; i < 11; i++)
     430:	8f 81       	ldd	r24, Y+7	; 0x07
     432:	8f 5f       	subi	r24, 0xFF	; 255
     434:	8f 83       	std	Y+7, r24	; 0x07
     436:	8f 81       	ldd	r24, Y+7	; 0x07
     438:	8b 30       	cpi	r24, 0x0B	; 11
     43a:	58 f3       	brcs	.-42     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			{
				eeprom_update_byte(EEPROM + i,password[i]);
			}
			Command(ALLCLR);
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	e0 d6       	rcall	.+3520   	; 0x1200 <Command>
			LCD_String("PW :");
     440:	8b e0       	ldi	r24, 0x0B	; 11
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	b2 d6       	rcall	.+3428   	; 0x11aa <LCD_String>
			LCD_String(password);
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	af d6       	rcall	.+3422   	; 0x11aa <LCD_String>
			new_index = 0;	//비밀번호 자리 초기화
     44c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <new_index.1963>
			rx_complete = 0;	//신호분석 플래그 지움
     450:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <rx_complete>
			Command(LINE2);
			LCD_String("RX = 0");
		}

	}
}
     454:	13 c0       	rjmp	.+38     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			new_index = 0;	//비밀번호 자리 초기화
			rx_complete = 0;	//신호분석 플래그 지움
		}
		else
		{
			RX = 0;
     456:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RX>
			rx_complete = 0;	//신호분석 플래그 지움
     45a:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <rx_complete>
			new_index = 0;
     45e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <new_index.1963>
			Command(ALLCLR);
     462:	81 e0       	ldi	r24, 0x01	; 1
			LCD_String("PW :");
     464:	cd d6       	rcall	.+3482   	; 0x1200 <Command>
     466:	8b e0       	ldi	r24, 0x0B	; 11
     468:	91 e0       	ldi	r25, 0x01	; 1
			LCD_String(password);
     46a:	9f d6       	rcall	.+3390   	; 0x11aa <LCD_String>
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	91 e0       	ldi	r25, 0x01	; 1
			Command(LINE2);
     470:	9c d6       	rcall	.+3384   	; 0x11aa <LCD_String>
     472:	80 ec       	ldi	r24, 0xC0	; 192
     474:	c5 d6       	rcall	.+3466   	; 0x1200 <Command>
			LCD_String("RX = 0");
     476:	80 e1       	ldi	r24, 0x10	; 16
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	97 d6       	rcall	.+3374   	; 0x11aa <LCD_String>
     47c:	00 00       	nop
		}

	}
}
     47e:	28 96       	adiw	r28, 0x08	; 8
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	f8 94       	cli
     484:	de bf       	out	0x3e, r29	; 62
     486:	0f be       	out	0x3f, r0	; 63
     488:	cd bf       	out	0x3d, r28	; 61
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	ff 91       	pop	r31
     490:	ef 91       	pop	r30
     492:	bf 91       	pop	r27
     494:	af 91       	pop	r26
     496:	9f 91       	pop	r25
     498:	8f 91       	pop	r24
     49a:	7f 91       	pop	r23
     49c:	6f 91       	pop	r22
     49e:	5f 91       	pop	r21
     4a0:	4f 91       	pop	r20
     4a2:	3f 91       	pop	r19
     4a4:	2f 91       	pop	r18
     4a6:	0f 90       	pop	r0
     4a8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     4ac:	0f 90       	pop	r0
     4ae:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     4b2:	0f 90       	pop	r0
     4b4:	1f 90       	pop	r1
     4b6:	18 95       	reti

000004b8 <__vector_16>:
     4b8:	1f 92       	push	r1


ISR(TIMER0_OVF_vect)
{
     4ba:	0f 92       	push	r0
     4bc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     4c0:	0f 92       	push	r0
     4c2:	11 24       	eor	r1, r1
     4c4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     4c8:	0f 92       	push	r0
     4ca:	2f 93       	push	r18
     4cc:	3f 93       	push	r19
     4ce:	4f 93       	push	r20
     4d0:	5f 93       	push	r21
     4d2:	6f 93       	push	r22
     4d4:	7f 93       	push	r23
     4d6:	8f 93       	push	r24
     4d8:	9f 93       	push	r25
     4da:	af 93       	push	r26
     4dc:	bf 93       	push	r27
     4de:	ef 93       	push	r30
     4e0:	ff 93       	push	r31
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	e0 97       	sbiw	r28, 0x30	; 48
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	cd bf       	out	0x3d, r28	; 61
	static char scan = 0;	//스캔하는 줄, 타이버 인터럽트 발생때마다 스캔줄이 바뀌어서 static으로 초기화 방지
	static char input_spot = 0;	//비밀번호 자리
	char Key=0;	//키패드 입력값 저장소
     4f0:	19 82       	std	Y+1, r1	; 0x01
	DDRA=0xF0;         // 비트0,1,2,3 출력으로 지정
     4f2:	8a e3       	ldi	r24, 0x3A	; 58
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	20 ef       	ldi	r18, 0xF0	; 240
     4f8:	fc 01       	movw	r30, r24
     4fa:	20 83       	st	Z, r18
	PORTA = 0xFF;
     4fc:	8b e3       	ldi	r24, 0x3B	; 59
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	2f ef       	ldi	r18, 0xFF	; 255
     502:	fc 01       	movw	r30, r24
     504:	20 83       	st	Z, r18

	if(scan == 0)
     506:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <scan.1985>
     50a:	88 23       	and	r24, r24
     50c:	91 f5       	brne	.+100    	; 0x572 <__vector_16+0xba>
	{
		PORTA &= ~0x10; // 1번째 줄 선택
     50e:	8b e3       	ldi	r24, 0x3B	; 59
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	2b e3       	ldi	r18, 0x3B	; 59
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	f9 01       	movw	r30, r18
     518:	20 81       	ld	r18, Z
     51a:	2f 7e       	andi	r18, 0xEF	; 239
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
		if((PINA & 0x01)==0)Key='1';
     520:	89 e3       	ldi	r24, 0x39	; 57
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	fc 01       	movw	r30, r24
     526:	80 81       	ld	r24, Z
     528:	88 2f       	mov	r24, r24
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	81 70       	andi	r24, 0x01	; 1
     52e:	99 27       	eor	r25, r25
     530:	89 2b       	or	r24, r25
     532:	11 f4       	brne	.+4      	; 0x538 <__vector_16+0x80>
     534:	81 e3       	ldi	r24, 0x31	; 49
     536:	89 83       	std	Y+1, r24	; 0x01
		if((PINA & 0x02)==0)Key='2';
     538:	89 e3       	ldi	r24, 0x39	; 57
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	fc 01       	movw	r30, r24
     53e:	80 81       	ld	r24, Z
     540:	88 2f       	mov	r24, r24
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	82 70       	andi	r24, 0x02	; 2
     546:	99 27       	eor	r25, r25
     548:	89 2b       	or	r24, r25
     54a:	11 f4       	brne	.+4      	; 0x550 <__vector_16+0x98>
     54c:	82 e3       	ldi	r24, 0x32	; 50
     54e:	89 83       	std	Y+1, r24	; 0x01
		if((PINA & 0x04)==0)Key='3';
     550:	89 e3       	ldi	r24, 0x39	; 57
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	fc 01       	movw	r30, r24
     556:	80 81       	ld	r24, Z
     558:	88 2f       	mov	r24, r24
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	84 70       	andi	r24, 0x04	; 4
     55e:	99 27       	eor	r25, r25
     560:	89 2b       	or	r24, r25
     562:	11 f4       	brne	.+4      	; 0x568 <__vector_16+0xb0>
     564:	83 e3       	ldi	r24, 0x33	; 51
     566:	89 83       	std	Y+1, r24	; 0x01
		PORTA = 0xFF; // 1번째 줄 해제
     568:	8b e3       	ldi	r24, 0x3B	; 59
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	2f ef       	ldi	r18, 0xFF	; 255
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
	}
	
	if(scan == 1)
     572:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <scan.1985>
     576:	81 30       	cpi	r24, 0x01	; 1
     578:	a1 f5       	brne	.+104    	; 0x5e2 <__vector_16+0x12a>
	{
		PORTA &= ~0x20; // 2번째 줄 선택
     57a:	8b e3       	ldi	r24, 0x3B	; 59
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	2b e3       	ldi	r18, 0x3B	; 59
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	f9 01       	movw	r30, r18
     584:	20 81       	ld	r18, Z
     586:	2f 7d       	andi	r18, 0xDF	; 223
     588:	fc 01       	movw	r30, r24
     58a:	20 83       	st	Z, r18
		if((PINA & 0x01)==0)Key='4';
     58c:	89 e3       	ldi	r24, 0x39	; 57
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	fc 01       	movw	r30, r24
     592:	80 81       	ld	r24, Z
     594:	88 2f       	mov	r24, r24
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	81 70       	andi	r24, 0x01	; 1
     59a:	99 27       	eor	r25, r25
     59c:	89 2b       	or	r24, r25
     59e:	19 f4       	brne	.+6      	; 0x5a6 <__vector_16+0xee>
     5a0:	84 e3       	ldi	r24, 0x34	; 52
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	19 c0       	rjmp	.+50     	; 0x5d8 <__vector_16+0x120>
		else if((PINA & 0x02)==0)Key='5';
     5a6:	89 e3       	ldi	r24, 0x39	; 57
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	fc 01       	movw	r30, r24
     5ac:	80 81       	ld	r24, Z
     5ae:	88 2f       	mov	r24, r24
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	82 70       	andi	r24, 0x02	; 2
     5b4:	99 27       	eor	r25, r25
     5b6:	89 2b       	or	r24, r25
     5b8:	19 f4       	brne	.+6      	; 0x5c0 <__vector_16+0x108>
     5ba:	85 e3       	ldi	r24, 0x35	; 53
     5bc:	89 83       	std	Y+1, r24	; 0x01
     5be:	0c c0       	rjmp	.+24     	; 0x5d8 <__vector_16+0x120>
		else if((PINA & 0x04)==0)Key='6';
     5c0:	89 e3       	ldi	r24, 0x39	; 57
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	fc 01       	movw	r30, r24
     5c6:	80 81       	ld	r24, Z
     5c8:	88 2f       	mov	r24, r24
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	84 70       	andi	r24, 0x04	; 4
     5ce:	99 27       	eor	r25, r25
     5d0:	89 2b       	or	r24, r25
     5d2:	11 f4       	brne	.+4      	; 0x5d8 <__vector_16+0x120>
     5d4:	86 e3       	ldi	r24, 0x36	; 54
     5d6:	89 83       	std	Y+1, r24	; 0x01
		PORTA=0xFF; // 2번째 줄 해제
     5d8:	8b e3       	ldi	r24, 0x3B	; 59
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	2f ef       	ldi	r18, 0xFF	; 255
     5de:	fc 01       	movw	r30, r24
     5e0:	20 83       	st	Z, r18
	}
	
	if(scan == 2)
     5e2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <scan.1985>
     5e6:	82 30       	cpi	r24, 0x02	; 2
     5e8:	a1 f5       	brne	.+104    	; 0x652 <__vector_16+0x19a>
	{
		PORTA &= ~0x40; // 3번째 줄 선택
     5ea:	8b e3       	ldi	r24, 0x3B	; 59
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	2b e3       	ldi	r18, 0x3B	; 59
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	f9 01       	movw	r30, r18
     5f4:	20 81       	ld	r18, Z
     5f6:	2f 7b       	andi	r18, 0xBF	; 191
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 83       	st	Z, r18
		if((PINA & 0x01)==0)Key='7';
     5fc:	89 e3       	ldi	r24, 0x39	; 57
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	fc 01       	movw	r30, r24
     602:	80 81       	ld	r24, Z
     604:	88 2f       	mov	r24, r24
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	81 70       	andi	r24, 0x01	; 1
     60a:	99 27       	eor	r25, r25
     60c:	89 2b       	or	r24, r25
     60e:	19 f4       	brne	.+6      	; 0x616 <__vector_16+0x15e>
     610:	87 e3       	ldi	r24, 0x37	; 55
     612:	89 83       	std	Y+1, r24	; 0x01
     614:	19 c0       	rjmp	.+50     	; 0x648 <__vector_16+0x190>
		else if((PINA & 0x02)==0)Key='8';
     616:	89 e3       	ldi	r24, 0x39	; 57
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	fc 01       	movw	r30, r24
     61c:	80 81       	ld	r24, Z
     61e:	88 2f       	mov	r24, r24
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	82 70       	andi	r24, 0x02	; 2
     624:	99 27       	eor	r25, r25
     626:	89 2b       	or	r24, r25
     628:	19 f4       	brne	.+6      	; 0x630 <__vector_16+0x178>
     62a:	88 e3       	ldi	r24, 0x38	; 56
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	0c c0       	rjmp	.+24     	; 0x648 <__vector_16+0x190>
		else if((PINA & 0x04)==0)Key='9';
     630:	89 e3       	ldi	r24, 0x39	; 57
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	fc 01       	movw	r30, r24
     636:	80 81       	ld	r24, Z
     638:	88 2f       	mov	r24, r24
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	84 70       	andi	r24, 0x04	; 4
     63e:	99 27       	eor	r25, r25
     640:	89 2b       	or	r24, r25
     642:	11 f4       	brne	.+4      	; 0x648 <__vector_16+0x190>
     644:	89 e3       	ldi	r24, 0x39	; 57
     646:	89 83       	std	Y+1, r24	; 0x01
		PORTA=0xFF; // 3번째 줄 해제
     648:	8b e3       	ldi	r24, 0x3B	; 59
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	2f ef       	ldi	r18, 0xFF	; 255
     64e:	fc 01       	movw	r30, r24
     650:	20 83       	st	Z, r18
	}
	
	if(scan == 3)
     652:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <scan.1985>
     656:	83 30       	cpi	r24, 0x03	; 3
     658:	a1 f5       	brne	.+104    	; 0x6c2 <__vector_16+0x20a>
	{
		PORTA &= ~0x80; // 4번째 줄 선택
     65a:	8b e3       	ldi	r24, 0x3B	; 59
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	2b e3       	ldi	r18, 0x3B	; 59
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	f9 01       	movw	r30, r18
     664:	20 81       	ld	r18, Z
     666:	2f 77       	andi	r18, 0x7F	; 127
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
		if((PINA & 0x01)==0)Key='0';
     66c:	89 e3       	ldi	r24, 0x39	; 57
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	fc 01       	movw	r30, r24
     672:	80 81       	ld	r24, Z
     674:	88 2f       	mov	r24, r24
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	81 70       	andi	r24, 0x01	; 1
     67a:	99 27       	eor	r25, r25
     67c:	89 2b       	or	r24, r25
     67e:	19 f4       	brne	.+6      	; 0x686 <__vector_16+0x1ce>
     680:	80 e3       	ldi	r24, 0x30	; 48
     682:	89 83       	std	Y+1, r24	; 0x01
     684:	19 c0       	rjmp	.+50     	; 0x6b8 <__vector_16+0x200>
		else if((PINA & 0x02)==0)Key='Y';
     686:	89 e3       	ldi	r24, 0x39	; 57
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	fc 01       	movw	r30, r24
     68c:	80 81       	ld	r24, Z
     68e:	88 2f       	mov	r24, r24
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	82 70       	andi	r24, 0x02	; 2
     694:	99 27       	eor	r25, r25
     696:	89 2b       	or	r24, r25
     698:	19 f4       	brne	.+6      	; 0x6a0 <__vector_16+0x1e8>
     69a:	89 e5       	ldi	r24, 0x59	; 89
     69c:	89 83       	std	Y+1, r24	; 0x01
     69e:	0c c0       	rjmp	.+24     	; 0x6b8 <__vector_16+0x200>
		else if((PINA & 0x04)==0)Key='N';
     6a0:	89 e3       	ldi	r24, 0x39	; 57
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	fc 01       	movw	r30, r24
     6a6:	80 81       	ld	r24, Z
     6a8:	88 2f       	mov	r24, r24
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	84 70       	andi	r24, 0x04	; 4
     6ae:	99 27       	eor	r25, r25
     6b0:	89 2b       	or	r24, r25
     6b2:	11 f4       	brne	.+4      	; 0x6b8 <__vector_16+0x200>
     6b4:	8e e4       	ldi	r24, 0x4E	; 78
     6b6:	89 83       	std	Y+1, r24	; 0x01
		PORTA=0xFF; // 4번째 줄 해제
     6b8:	8b e3       	ldi	r24, 0x3B	; 59
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	2f ef       	ldi	r18, 0xFF	; 255
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18
	}
	scan++;
     6c2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <scan.1985>
     6c6:	8f 5f       	subi	r24, 0xFF	; 255
     6c8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <scan.1985>
	if(scan == 4) scan = 0;
     6cc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <scan.1985>
     6d0:	84 30       	cpi	r24, 0x04	; 4
     6d2:	11 f4       	brne	.+4      	; 0x6d8 <__vector_16+0x220>
     6d4:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <scan.1985>
	ch = Key;
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>

	if(state == close)	//닫혀있는 상태
     6de:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <state>
     6e2:	88 23       	and	r24, r24
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <__vector_16+0x230>
     6e6:	58 c1       	rjmp	.+688    	; 0x998 <__vector_16+0x4e0>
	{
		OCR1A = 2000;	//1ms 펄스, 서보모터 제어
     6e8:	8a e4       	ldi	r24, 0x4A	; 74
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	20 ed       	ldi	r18, 0xD0	; 208
     6ee:	37 e0       	ldi	r19, 0x07	; 7
     6f0:	fc 01       	movw	r30, r24
     6f2:	31 83       	std	Z+1, r19	; 0x01
     6f4:	20 83       	st	Z, r18
		if(ch == 'Y')	//확인버튼 비밀번호 확인
     6f6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     6fa:	89 35       	cpi	r24, 0x59	; 89
     6fc:	09 f0       	breq	.+2      	; 0x700 <__vector_16+0x248>
     6fe:	9b c0       	rjmp	.+310    	; 0x836 <__vector_16+0x37e>
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a8 e4       	ldi	r26, 0x48	; 72
     706:	b3 e4       	ldi	r27, 0x43	; 67
     708:	8f 87       	std	Y+15, r24	; 0x0f
     70a:	98 8b       	std	Y+16, r25	; 0x10
     70c:	a9 8b       	std	Y+17, r26	; 0x11
     70e:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	4a e7       	ldi	r20, 0x7A	; 122
     716:	55 e4       	ldi	r21, 0x45	; 69
     718:	6f 85       	ldd	r22, Y+15	; 0x0f
     71a:	78 89       	ldd	r23, Y+16	; 0x10
     71c:	89 89       	ldd	r24, Y+17	; 0x11
     71e:	9a 89       	ldd	r25, Y+18	; 0x12
     720:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	8b 8b       	std	Y+19, r24	; 0x13
     72a:	9c 8b       	std	Y+20, r25	; 0x14
     72c:	ad 8b       	std	Y+21, r26	; 0x15
     72e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	40 e8       	ldi	r20, 0x80	; 128
     736:	5f e3       	ldi	r21, 0x3F	; 63
     738:	6b 89       	ldd	r22, Y+19	; 0x13
     73a:	7c 89       	ldd	r23, Y+20	; 0x14
     73c:	8d 89       	ldd	r24, Y+21	; 0x15
     73e:	9e 89       	ldd	r25, Y+22	; 0x16
     740:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__cmpsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <__vector_16+0x29a>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 8f       	std	Y+24, r25	; 0x18
     74e:	8f 8b       	std	Y+23, r24	; 0x17
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <__vector_16+0x318>
	else if (__tmp > 65535)
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	3f ef       	ldi	r19, 0xFF	; 255
     756:	4f e7       	ldi	r20, 0x7F	; 127
     758:	57 e4       	ldi	r21, 0x47	; 71
     75a:	6b 89       	ldd	r22, Y+19	; 0x13
     75c:	7c 89       	ldd	r23, Y+20	; 0x14
     75e:	8d 89       	ldd	r24, Y+21	; 0x15
     760:	9e 89       	ldd	r25, Y+22	; 0x16
     762:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <__vector_16+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 e2       	ldi	r20, 0x20	; 32
     770:	51 e4       	ldi	r21, 0x41	; 65
     772:	6f 85       	ldd	r22, Y+15	; 0x0f
     774:	78 89       	ldd	r23, Y+16	; 0x10
     776:	89 89       	ldd	r24, Y+17	; 0x11
     778:	9a 89       	ldd	r25, Y+18	; 0x12
     77a:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 8f       	std	Y+24, r25	; 0x18
     790:	8f 8b       	std	Y+23, r24	; 0x17
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <__vector_16+0x2fa>
     794:	80 e9       	ldi	r24, 0x90	; 144
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9a 8f       	std	Y+26, r25	; 0x1a
     79a:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     79c:	89 8d       	ldd	r24, Y+25	; 0x19
     79e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <__vector_16+0x2e8>
     7a4:	9a 8f       	std	Y+26, r25	; 0x1a
     7a6:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f 89       	ldd	r24, Y+23	; 0x17
     7aa:	98 8d       	ldd	r25, Y+24	; 0x18
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 8f       	std	Y+24, r25	; 0x18
     7b0:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f 89       	ldd	r24, Y+23	; 0x17
     7b4:	98 8d       	ldd	r25, Y+24	; 0x18
     7b6:	89 2b       	or	r24, r25
     7b8:	69 f7       	brne	.-38     	; 0x794 <__vector_16+0x2dc>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <__vector_16+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	6b 89       	ldd	r22, Y+19	; 0x13
     7be:	7c 89       	ldd	r23, Y+20	; 0x14
     7c0:	8d 89       	ldd	r24, Y+21	; 0x15
     7c2:	9e 89       	ldd	r25, Y+22	; 0x16
     7c4:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 8f       	std	Y+24, r25	; 0x18
     7ce:	8f 8b       	std	Y+23, r24	; 0x17
     7d0:	8f 89       	ldd	r24, Y+23	; 0x17
     7d2:	98 8d       	ldd	r25, Y+24	; 0x18
     7d4:	9c 8f       	std	Y+28, r25	; 0x1c
     7d6:	8b 8f       	std	Y+27, r24	; 0x1b
     7d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7da:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <__vector_16+0x324>
     7e0:	9c 8f       	std	Y+28, r25	; 0x1c
     7e2:	8b 8f       	std	Y+27, r24	; 0x1b
		{
			_delay_ms(200);	//이중 입력 방지를 위한 딜레이 수정하고 싶은 부분
			Command(ALLCLR);
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	0c d5       	rcall	.+2584   	; 0x1200 <Command>
			input[input_spot] = '\0';
     7e8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <input_spot.1986>
     7ec:	08 2e       	mov	r0, r24
     7ee:	00 0c       	add	r0, r0
     7f0:	99 0b       	sbc	r25, r25
     7f2:	86 5c       	subi	r24, 0xC6	; 198
     7f4:	9e 4f       	sbci	r25, 0xFE	; 254
     7f6:	fc 01       	movw	r30, r24
     7f8:	10 82       	st	Z, r1
			if(strcmp(password, input) == 0)	//맞으면 열려있는 상태로 전환
     7fa:	6a e3       	ldi	r22, 0x3A	; 58
     7fc:	71 e0       	ldi	r23, 0x01	; 1
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <strcmp>
     806:	89 2b       	or	r24, r25
     808:	59 f4       	brne	.+22     	; 0x820 <__vector_16+0x368>
			{
				state = open;
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <state>
				input_spot = 0;
     810:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <input_spot.1986>
				LCD_String("OPEN");
     814:	87 e1       	ldi	r24, 0x17	; 23
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	c8 d4       	rcall	.+2448   	; 0x11aa <LCD_String>
				Command(LINE2);
     81a:	80 ec       	ldi	r24, 0xC0	; 192
     81c:	f1 d4       	rcall	.+2530   	; 0x1200 <Command>
     81e:	d7 c1       	rjmp	.+942    	; 0xbce <__vector_16+0x716>
			ch = 0;	//입력값 초기화
			_delay_ms(200);	//이중 입력 방지를 위한 딜레이 수정하고 싶은 부분
		}
	}
	
}
     820:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <input_spot.1986>
				Command(LINE2);
			}
			else  //틀리면 초기화
			{
				input_spot = 0;
				LCD_String("PW :");
     824:	8b e0       	ldi	r24, 0x0B	; 11
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	c0 d4       	rcall	.+2432   	; 0x11aa <LCD_String>
				LCD_String(password);
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	bd d4       	rcall	.+2426   	; 0x11aa <LCD_String>
				Command(LINE2);
     830:	80 ec       	ldi	r24, 0xC0	; 192
     832:	e6 d4       	rcall	.+2508   	; 0x1200 <Command>
     834:	cc c1       	rjmp	.+920    	; 0xbce <__vector_16+0x716>
			}


		}
		else if(ch == 'N')	//취소버튼 초기화
     836:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     83a:	8e 34       	cpi	r24, 0x4E	; 78
		{
			Command(ALLCLR);
     83c:	59 f4       	brne	.+22     	; 0x854 <__vector_16+0x39c>
     83e:	81 e0       	ldi	r24, 0x01	; 1
			LCD_String("PW :");
     840:	df d4       	rcall	.+2494   	; 0x1200 <Command>
     842:	8b e0       	ldi	r24, 0x0B	; 11
     844:	91 e0       	ldi	r25, 0x01	; 1
			LCD_String(password);
     846:	b1 d4       	rcall	.+2402   	; 0x11aa <LCD_String>
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	ae d4       	rcall	.+2396   	; 0x11aa <LCD_String>
			Command(LINE2);
     84e:	80 ec       	ldi	r24, 0xC0	; 192
     850:	d7 d4       	rcall	.+2478   	; 0x1200 <Command>
     852:	bd c1       	rjmp	.+890    	; 0xbce <__vector_16+0x716>
			ch = 0;	//입력값 초기화
			_delay_ms(200);	//이중 입력 방지를 위한 딜레이 수정하고 싶은 부분
		}
	}
	
}
     854:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
			Command(ALLCLR);
			LCD_String("PW :");
			LCD_String(password);
			Command(LINE2);
		}
		else if(ch != 0)	//앞에경우와 가만히 있는경우(ch = 0) 제외하면 비밀번호 입력
     858:	88 23       	and	r24, r24
     85a:	09 f4       	brne	.+2      	; 0x85e <__vector_16+0x3a6>
		{
			
			if(input_spot == 10)	//입력자리가 11번째일때 다시 1번째 자리로
     85c:	b8 c1       	rjmp	.+880    	; 0xbce <__vector_16+0x716>
     85e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <input_spot.1986>
			{
				Command(ALLCLR);
     862:	8a 30       	cpi	r24, 0x0A	; 10
     864:	61 f4       	brne	.+24     	; 0x87e <__vector_16+0x3c6>
     866:	81 e0       	ldi	r24, 0x01	; 1
				LCD_String("PW :");
     868:	cb d4       	rcall	.+2454   	; 0x1200 <Command>
     86a:	8b e0       	ldi	r24, 0x0B	; 11
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	9d d4       	rcall	.+2362   	; 0x11aa <LCD_String>
				LCD_String(password);
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	9a d4       	rcall	.+2356   	; 0x11aa <LCD_String>
     876:	80 ec       	ldi	r24, 0xC0	; 192
				Command(LINE2);
     878:	c3 d4       	rcall	.+2438   	; 0x1200 <Command>
     87a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <input_spot.1986>
				input_spot = 0;	//입력자리 초기화
     87e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
			}
			Data(ch);	//입력한거 화면표시
     882:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Data>
     886:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <input_spot.1986>
			input[input_spot] = ch;	//입력값 추가
     88a:	08 2e       	mov	r0, r24
     88c:	00 0c       	add	r0, r0
     88e:	99 0b       	sbc	r25, r25
     890:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     894:	86 5c       	subi	r24, 0xC6	; 198
     896:	9e 4f       	sbci	r25, 0xFE	; 254
     898:	fc 01       	movw	r30, r24
     89a:	20 83       	st	Z, r18
     89c:	43 e0       	ldi	r20, 0x03	; 3
			SendCommand01(0x0F, 0x01, 0x03);	//입력될때 mp3 스위치음
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	8f e0       	ldi	r24, 0x0F	; 15
     8a2:	aa dc       	rcall	.-1708   	; 0x1f8 <SendCommand01>
     8a4:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <input_spot.1986>
			input_spot++;	//입력자리 증가
     8a8:	8f 5f       	subi	r24, 0xFF	; 255
     8aa:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <input_spot.1986>
     8ae:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
			ch = 0;	//입력값 초기화
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	a8 e4       	ldi	r26, 0x48	; 72
     8b8:	b3 e4       	ldi	r27, 0x43	; 67
     8ba:	8f 83       	std	Y+7, r24	; 0x07
     8bc:	98 87       	std	Y+8, r25	; 0x08
     8be:	a9 87       	std	Y+9, r26	; 0x09
     8c0:	ba 87       	std	Y+10, r27	; 0x0a
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8c6:	4a e7       	ldi	r20, 0x7A	; 122
     8c8:	55 e4       	ldi	r21, 0x45	; 69
     8ca:	6f 81       	ldd	r22, Y+7	; 0x07
     8cc:	78 85       	ldd	r23, Y+8	; 0x08
     8ce:	89 85       	ldd	r24, Y+9	; 0x09
     8d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d2:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
     8d6:	dc 01       	movw	r26, r24
     8d8:	cb 01       	movw	r24, r22
     8da:	8d 8f       	std	Y+29, r24	; 0x1d
     8dc:	9e 8f       	std	Y+30, r25	; 0x1e
     8de:	af 8f       	std	Y+31, r26	; 0x1f
     8e0:	b8 a3       	std	Y+32, r27	; 0x20
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     8e6:	40 e8       	ldi	r20, 0x80	; 128
     8e8:	5f e3       	ldi	r21, 0x3F	; 63
     8ea:	6d 8d       	ldd	r22, Y+29	; 0x1d
     8ec:	7e 8d       	ldd	r23, Y+30	; 0x1e
     8ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8f0:	98 a1       	ldd	r25, Y+32	; 0x20
     8f2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__cmpsf2>
     8f6:	88 23       	and	r24, r24
     8f8:	2c f4       	brge	.+10     	; 0x904 <__vector_16+0x44c>
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     8fe:	9a a3       	std	Y+34, r25	; 0x22
     900:	89 a3       	std	Y+33, r24	; 0x21
     902:	3f c0       	rjmp	.+126    	; 0x982 <__vector_16+0x4ca>
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     908:	4f e7       	ldi	r20, 0x7F	; 127
     90a:	57 e4       	ldi	r21, 0x47	; 71
     90c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     90e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     910:	8f 8d       	ldd	r24, Y+31	; 0x1f
     912:	98 a1       	ldd	r25, Y+32	; 0x20
     914:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
     918:	18 16       	cp	r1, r24
     91a:	4c f5       	brge	.+82     	; 0x96e <__vector_16+0x4b6>
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     920:	40 e2       	ldi	r20, 0x20	; 32
     922:	51 e4       	ldi	r21, 0x41	; 65
     924:	6f 81       	ldd	r22, Y+7	; 0x07
     926:	78 85       	ldd	r23, Y+8	; 0x08
     928:	89 85       	ldd	r24, Y+9	; 0x09
     92a:	9a 85       	ldd	r25, Y+10	; 0x0a
     92c:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
     930:	dc 01       	movw	r26, r24
     932:	cb 01       	movw	r24, r22
     934:	bc 01       	movw	r22, r24
     936:	cd 01       	movw	r24, r26
     938:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
     93c:	dc 01       	movw	r26, r24
     93e:	cb 01       	movw	r24, r22
     940:	9a a3       	std	Y+34, r25	; 0x22
     942:	89 a3       	std	Y+33, r24	; 0x21
     944:	0f c0       	rjmp	.+30     	; 0x964 <__vector_16+0x4ac>
     946:	80 e9       	ldi	r24, 0x90	; 144
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	9c a3       	std	Y+36, r25	; 0x24
     94c:	8b a3       	std	Y+35, r24	; 0x23
     94e:	8b a1       	ldd	r24, Y+35	; 0x23
     950:	9c a1       	ldd	r25, Y+36	; 0x24
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	f1 f7       	brne	.-4      	; 0x952 <__vector_16+0x49a>
     956:	9c a3       	std	Y+36, r25	; 0x24
     958:	8b a3       	std	Y+35, r24	; 0x23
     95a:	89 a1       	ldd	r24, Y+33	; 0x21
     95c:	9a a1       	ldd	r25, Y+34	; 0x22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	9a a3       	std	Y+34, r25	; 0x22
     962:	89 a3       	std	Y+33, r24	; 0x21
     964:	89 a1       	ldd	r24, Y+33	; 0x21
     966:	9a a1       	ldd	r25, Y+34	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     968:	89 2b       	or	r24, r25
     96a:	69 f7       	brne	.-38     	; 0x946 <__vector_16+0x48e>
     96c:	30 c1       	rjmp	.+608    	; 0xbce <__vector_16+0x716>
     96e:	6d 8d       	ldd	r22, Y+29	; 0x1d
			ch = 0;	//입력값 초기화
			_delay_ms(200);	//이중 입력 방지를 위한 딜레이 수정하고 싶은 부분
		}
	}
	
}
     970:	7e 8d       	ldd	r23, Y+30	; 0x1e
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     972:	8f 8d       	ldd	r24, Y+31	; 0x1f
     974:	98 a1       	ldd	r25, Y+32	; 0x20
     976:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
     97a:	dc 01       	movw	r26, r24
     97c:	cb 01       	movw	r24, r22
     97e:	9a a3       	std	Y+34, r25	; 0x22
     980:	89 a3       	std	Y+33, r24	; 0x21
     982:	89 a1       	ldd	r24, Y+33	; 0x21
     984:	9a a1       	ldd	r25, Y+34	; 0x22
     986:	9e a3       	std	Y+38, r25	; 0x26
     988:	8d a3       	std	Y+37, r24	; 0x25
     98a:	8d a1       	ldd	r24, Y+37	; 0x25
     98c:	9e a1       	ldd	r25, Y+38	; 0x26
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	f1 f7       	brne	.-4      	; 0x98e <__vector_16+0x4d6>
     992:	9e a3       	std	Y+38, r25	; 0x26
     994:	8d a3       	std	Y+37, r24	; 0x25
     996:	1b c1       	rjmp	.+566    	; 0xbce <__vector_16+0x716>
     998:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <state>
			ch = 0;	//입력값 초기화
			_delay_ms(200);	//이중 입력 방지를 위한 딜레이 수정하고 싶은 부분
		}
	}

	else if(state == open)	//열려있는 상태
     99c:	81 30       	cpi	r24, 0x01	; 1
     99e:	09 f0       	breq	.+2      	; 0x9a2 <__vector_16+0x4ea>
     9a0:	16 c1       	rjmp	.+556    	; 0xbce <__vector_16+0x716>
     9a2:	8a e4       	ldi	r24, 0x4A	; 74
     9a4:	90 e0       	ldi	r25, 0x00	; 0
	{
		OCR1A = 4000;	//2ms 펄스, 서보모터 제어
     9a6:	20 ea       	ldi	r18, 0xA0	; 160
     9a8:	3f e0       	ldi	r19, 0x0F	; 15
     9aa:	fc 01       	movw	r30, r24
     9ac:	31 83       	std	Z+1, r19	; 0x01
     9ae:	20 83       	st	Z, r18
     9b0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
		if(ch == 'Y')	//새로운 비밀번호 입력 완료
     9b4:	89 35       	cpi	r24, 0x59	; 89
     9b6:	09 f0       	breq	.+2      	; 0x9ba <__vector_16+0x502>
     9b8:	56 c0       	rjmp	.+172    	; 0xa66 <__vector_16+0x5ae>
     9ba:	1b 82       	std	Y+3, r1	; 0x03
     9bc:	1a 82       	std	Y+2, r1	; 0x02
		{
			
			for(int i = 0; i <= input_spot; i++)
     9be:	11 c0       	rjmp	.+34     	; 0x9e2 <__vector_16+0x52a>
     9c0:	8a 81       	ldd	r24, Y+2	; 0x02
     9c2:	9b 81       	ldd	r25, Y+3	; 0x03
			{
				password[i] = new_password[i];	//새로운 비밀번호로 갱신
     9c4:	87 5d       	subi	r24, 0xD7	; 215
     9c6:	9e 4f       	sbci	r25, 0xFE	; 254
     9c8:	fc 01       	movw	r30, r24
     9ca:	20 81       	ld	r18, Z
     9cc:	8a 81       	ldd	r24, Y+2	; 0x02
     9ce:	9b 81       	ldd	r25, Y+3	; 0x03
     9d0:	80 50       	subi	r24, 0x00	; 0
     9d2:	9f 4f       	sbci	r25, 0xFF	; 255
     9d4:	fc 01       	movw	r30, r24
     9d6:	20 83       	st	Z, r18
     9d8:	8a 81       	ldd	r24, Y+2	; 0x02
     9da:	9b 81       	ldd	r25, Y+3	; 0x03
	{
		OCR1A = 4000;	//2ms 펄스, 서보모터 제어
		if(ch == 'Y')	//새로운 비밀번호 입력 완료
		{
			
			for(int i = 0; i <= input_spot; i++)
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	9b 83       	std	Y+3, r25	; 0x03
     9e0:	8a 83       	std	Y+2, r24	; 0x02
     9e2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <input_spot.1986>
     9e6:	28 2f       	mov	r18, r24
     9e8:	88 0f       	add	r24, r24
     9ea:	33 0b       	sbc	r19, r19
     9ec:	8a 81       	ldd	r24, Y+2	; 0x02
     9ee:	9b 81       	ldd	r25, Y+3	; 0x03
     9f0:	28 17       	cp	r18, r24
     9f2:	39 07       	cpc	r19, r25
     9f4:	2c f7       	brge	.-54     	; 0x9c0 <__vector_16+0x508>
     9f6:	1d 82       	std	Y+5, r1	; 0x05
     9f8:	1c 82       	std	Y+4, r1	; 0x04
			{
				password[i] = new_password[i];	//새로운 비밀번호로 갱신
			}
			for(int i = 0; i < 11; i++)
     9fa:	0b c0       	rjmp	.+22     	; 0xa12 <__vector_16+0x55a>
     9fc:	8c 81       	ldd	r24, Y+4	; 0x04
     9fe:	9d 81       	ldd	r25, Y+5	; 0x05
			{
				new_password[i] = 0;	//새로운 비밀번호 받는 자리 초기화 마지막 Null값이 되게
     a00:	87 5d       	subi	r24, 0xD7	; 215
     a02:	9e 4f       	sbci	r25, 0xFE	; 254
     a04:	fc 01       	movw	r30, r24
     a06:	10 82       	st	Z, r1
     a08:	8c 81       	ldd	r24, Y+4	; 0x04
     a0a:	9d 81       	ldd	r25, Y+5	; 0x05
			
			for(int i = 0; i <= input_spot; i++)
			{
				password[i] = new_password[i];	//새로운 비밀번호로 갱신
			}
			for(int i = 0; i < 11; i++)
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	9d 83       	std	Y+5, r25	; 0x05
     a10:	8c 83       	std	Y+4, r24	; 0x04
     a12:	8c 81       	ldd	r24, Y+4	; 0x04
     a14:	9d 81       	ldd	r25, Y+5	; 0x05
     a16:	0b 97       	sbiw	r24, 0x0b	; 11
     a18:	8c f3       	brlt	.-30     	; 0x9fc <__vector_16+0x544>
     a1a:	1e 82       	std	Y+6, r1	; 0x06
     a1c:	12 c0       	rjmp	.+36     	; 0xa42 <__vector_16+0x58a>
			{
				new_password[i] = 0;	//새로운 비밀번호 받는 자리 초기화 마지막 Null값이 되게
			}
			for(uint8_t i = 0; i < 11; i++)
     a1e:	8e 81       	ldd	r24, Y+6	; 0x06
     a20:	88 2f       	mov	r24, r24
			{
				eeprom_update_byte(EEPROM + i,password[i]);	//새로운 비밀번호 eeprom으로 저장
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	80 50       	subi	r24, 0x00	; 0
     a26:	9f 4f       	sbci	r25, 0xFF	; 255
     a28:	fc 01       	movw	r30, r24
     a2a:	80 81       	ld	r24, Z
     a2c:	28 2f       	mov	r18, r24
     a2e:	8e 81       	ldd	r24, Y+6	; 0x06
     a30:	88 2f       	mov	r24, r24
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	62 2f       	mov	r22, r18
     a38:	0e 94 f7 15 	call	0x2bee	; 0x2bee <eeprom_update_byte>
     a3c:	8e 81       	ldd	r24, Y+6	; 0x06
			}
			for(int i = 0; i < 11; i++)
			{
				new_password[i] = 0;	//새로운 비밀번호 받는 자리 초기화 마지막 Null값이 되게
			}
			for(uint8_t i = 0; i < 11; i++)
     a3e:	8f 5f       	subi	r24, 0xFF	; 255
     a40:	8e 83       	std	Y+6, r24	; 0x06
     a42:	8e 81       	ldd	r24, Y+6	; 0x06
     a44:	8b 30       	cpi	r24, 0x0B	; 11
			{
				eeprom_update_byte(EEPROM + i,password[i]);	//새로운 비밀번호 eeprom으로 저장
			}

			Command(ALLCLR);	//화면 초기화
     a46:	58 f3       	brcs	.-42     	; 0xa1e <__vector_16+0x566>
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	da d3       	rcall	.+1972   	; 0x1200 <Command>
			state = close;	//새로운 비밀번호 입력후 다시 닫힌상태로
     a4c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <state>
			
			input_spot = 0;	//입력자리 초기화
     a50:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <input_spot.1986>
			LCD_String("PW :");	//닫힌상태 화면 표시
     a54:	8b e0       	ldi	r24, 0x0B	; 11
     a56:	91 e0       	ldi	r25, 0x01	; 1
			LCD_String(password);
     a58:	a8 d3       	rcall	.+1872   	; 0x11aa <LCD_String>
     a5a:	80 e0       	ldi	r24, 0x00	; 0
			Command(LINE2);
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	a5 d3       	rcall	.+1866   	; 0x11aa <LCD_String>
     a60:	80 ec       	ldi	r24, 0xC0	; 192
			ch = 0;	//입력값 초기화
			_delay_ms(200);	//이중 입력 방지를 위한 딜레이 수정하고 싶은 부분
		}
	}
	
}
     a62:	ce d3       	rcall	.+1948   	; 0x1200 <Command>
			input_spot = 0;	//입력자리 초기화
			LCD_String("PW :");	//닫힌상태 화면 표시
			LCD_String(password);
			Command(LINE2);
		}
		else if(ch == 'N')	//취소버튼
     a64:	b4 c0       	rjmp	.+360    	; 0xbce <__vector_16+0x716>
     a66:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     a6a:	8e 34       	cpi	r24, 0x4E	; 78
		{
			Command(ALLCLR);
     a6c:	79 f4       	brne	.+30     	; 0xa8c <__vector_16+0x5d4>
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	c7 d3       	rcall	.+1934   	; 0x1200 <Command>
			LCD_String("PW :");
     a72:	8b e0       	ldi	r24, 0x0B	; 11
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	99 d3       	rcall	.+1842   	; 0x11aa <LCD_String>
			LCD_String(password);
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	96 d3       	rcall	.+1836   	; 0x11aa <LCD_String>
			Command(LINE2);
     a7e:	80 ec       	ldi	r24, 0xC0	; 192
     a80:	bf d3       	rcall	.+1918   	; 0x1200 <Command>
			state = close;	//닫힌상태로
     a82:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <state>
			input_spot = 0;	//입력자리 초기화
     a86:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <input_spot.1986>
		}
		else if(ch != 0)
     a8a:	a1 c0       	rjmp	.+322    	; 0xbce <__vector_16+0x716>
     a8c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     a90:	88 23       	and	r24, r24
     a92:	09 f4       	brne	.+2      	; 0xa96 <__vector_16+0x5de>
		{
			
			if(input_spot == 10)	//입력자리 초기화
     a94:	9c c0       	rjmp	.+312    	; 0xbce <__vector_16+0x716>
     a96:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <input_spot.1986>
     a9a:	8a 30       	cpi	r24, 0x0A	; 10
			{
				Command(ALLCLR);
     a9c:	61 f4       	brne	.+24     	; 0xab6 <__vector_16+0x5fe>
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	af d3       	rcall	.+1886   	; 0x1200 <Command>
				LCD_String("PW :");
     aa2:	8b e0       	ldi	r24, 0x0B	; 11
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	81 d3       	rcall	.+1794   	; 0x11aa <LCD_String>
     aa8:	80 e0       	ldi	r24, 0x00	; 0
				LCD_String(password);
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	7e d3       	rcall	.+1788   	; 0x11aa <LCD_String>
     aae:	80 ec       	ldi	r24, 0xC0	; 192
				Command(LINE2);
     ab0:	a7 d3       	rcall	.+1870   	; 0x1200 <Command>
     ab2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <input_spot.1986>
				input_spot = 0;
     ab6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
			}
			Data(ch);	//입력한거 화면표시
     aba:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <Data>
     abe:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <input_spot.1986>
			new_password[input_spot] = ch;	//입력값 새로운 비밀번호에 추가
     ac2:	08 2e       	mov	r0, r24
     ac4:	00 0c       	add	r0, r0
     ac6:	99 0b       	sbc	r25, r25
     ac8:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     acc:	87 5d       	subi	r24, 0xD7	; 215
     ace:	9e 4f       	sbci	r25, 0xFE	; 254
     ad0:	fc 01       	movw	r30, r24
     ad2:	20 83       	st	Z, r18
     ad4:	43 e0       	ldi	r20, 0x03	; 3
     ad6:	61 e0       	ldi	r22, 0x01	; 1
			SendCommand01(0x0F, 0x01, 0x03);	//입력될때 mp3 스위치 음
     ad8:	8f e0       	ldi	r24, 0x0F	; 15
     ada:	8e db       	rcall	.-2276   	; 0x1f8 <SendCommand01>
     adc:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <input_spot.1986>
     ae0:	8f 5f       	subi	r24, 0xFF	; 255
			input_spot++;	//입력자리 증가
     ae2:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <input_spot.1986>
     ae6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
     aea:	80 e0       	ldi	r24, 0x00	; 0
			ch = 0;	//입력값 초기화
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	a8 e4       	ldi	r26, 0x48	; 72
     af0:	b3 e4       	ldi	r27, 0x43	; 67
     af2:	8b 87       	std	Y+11, r24	; 0x0b
     af4:	9c 87       	std	Y+12, r25	; 0x0c
     af6:	ad 87       	std	Y+13, r26	; 0x0d
     af8:	be 87       	std	Y+14, r27	; 0x0e
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	4a e7       	ldi	r20, 0x7A	; 122

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b00:	55 e4       	ldi	r21, 0x45	; 69
     b02:	6b 85       	ldd	r22, Y+11	; 0x0b
     b04:	7c 85       	ldd	r23, Y+12	; 0x0c
     b06:	8d 85       	ldd	r24, Y+13	; 0x0d
     b08:	9e 85       	ldd	r25, Y+14	; 0x0e
     b0a:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
     b0e:	dc 01       	movw	r26, r24
     b10:	cb 01       	movw	r24, r22
     b12:	8f a3       	std	Y+39, r24	; 0x27
     b14:	98 a7       	std	Y+40, r25	; 0x28
     b16:	a9 a7       	std	Y+41, r26	; 0x29
     b18:	ba a7       	std	Y+42, r27	; 0x2a
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
     b20:	5f e3       	ldi	r21, 0x3F	; 63
     b22:	6f a1       	ldd	r22, Y+39	; 0x27
     b24:	78 a5       	ldd	r23, Y+40	; 0x28
     b26:	89 a5       	ldd	r24, Y+41	; 0x29
     b28:	9a a5       	ldd	r25, Y+42	; 0x2a
     b2a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__cmpsf2>
     b2e:	88 23       	and	r24, r24
     b30:	2c f4       	brge	.+10     	; 0xb3c <__vector_16+0x684>
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	9c a7       	std	Y+44, r25	; 0x2c
		__ticks = 1;
     b38:	8b a7       	std	Y+43, r24	; 0x2b
     b3a:	3f c0       	rjmp	.+126    	; 0xbba <__vector_16+0x702>
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	3f ef       	ldi	r19, 0xFF	; 255
     b40:	4f e7       	ldi	r20, 0x7F	; 127
	else if (__tmp > 65535)
     b42:	57 e4       	ldi	r21, 0x47	; 71
     b44:	6f a1       	ldd	r22, Y+39	; 0x27
     b46:	78 a5       	ldd	r23, Y+40	; 0x28
     b48:	89 a5       	ldd	r24, Y+41	; 0x29
     b4a:	9a a5       	ldd	r25, Y+42	; 0x2a
     b4c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
     b50:	18 16       	cp	r1, r24
     b52:	4c f5       	brge	.+82     	; 0xba6 <__vector_16+0x6ee>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b5a:	51 e4       	ldi	r21, 0x41	; 65
     b5c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b5e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b60:	8d 85       	ldd	r24, Y+13	; 0x0d
     b62:	9e 85       	ldd	r25, Y+14	; 0x0e
     b64:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	bc 01       	movw	r22, r24
     b6e:	cd 01       	movw	r24, r26
     b70:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	9c a7       	std	Y+44, r25	; 0x2c
     b7a:	8b a7       	std	Y+43, r24	; 0x2b
     b7c:	0f c0       	rjmp	.+30     	; 0xb9c <__vector_16+0x6e4>
     b7e:	80 e9       	ldi	r24, 0x90	; 144
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	9e a7       	std	Y+46, r25	; 0x2e
     b84:	8d a7       	std	Y+45, r24	; 0x2d
     b86:	8d a5       	ldd	r24, Y+45	; 0x2d
     b88:	9e a5       	ldd	r25, Y+46	; 0x2e
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <__vector_16+0x6d2>
     b8e:	9e a7       	std	Y+46, r25	; 0x2e
     b90:	8d a7       	std	Y+45, r24	; 0x2d
     b92:	8b a5       	ldd	r24, Y+43	; 0x2b
     b94:	9c a5       	ldd	r25, Y+44	; 0x2c
     b96:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b98:	9c a7       	std	Y+44, r25	; 0x2c
     b9a:	8b a7       	std	Y+43, r24	; 0x2b
     b9c:	8b a5       	ldd	r24, Y+43	; 0x2b
     b9e:	9c a5       	ldd	r25, Y+44	; 0x2c
     ba0:	89 2b       	or	r24, r25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ba2:	69 f7       	brne	.-38     	; 0xb7e <__vector_16+0x6c6>
     ba4:	14 c0       	rjmp	.+40     	; 0xbce <__vector_16+0x716>
     ba6:	6f a1       	ldd	r22, Y+39	; 0x27
     ba8:	78 a5       	ldd	r23, Y+40	; 0x28
			_delay_ms(200);	//이중 입력 방지를 위한 딜레이 수정하고 싶은 부분
		}
	}
	
}
     baa:	89 a5       	ldd	r24, Y+41	; 0x29
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bac:	9a a5       	ldd	r25, Y+42	; 0x2a
     bae:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	9c a7       	std	Y+44, r25	; 0x2c
     bb8:	8b a7       	std	Y+43, r24	; 0x2b
     bba:	8b a5       	ldd	r24, Y+43	; 0x2b
     bbc:	9c a5       	ldd	r25, Y+44	; 0x2c
     bbe:	98 ab       	std	Y+48, r25	; 0x30
     bc0:	8f a7       	std	Y+47, r24	; 0x2f
     bc2:	8f a5       	ldd	r24, Y+47	; 0x2f
     bc4:	98 a9       	ldd	r25, Y+48	; 0x30
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <__vector_16+0x70e>
     bca:	98 ab       	std	Y+48, r25	; 0x30
     bcc:	8f a7       	std	Y+47, r24	; 0x2f
     bce:	00 00       	nop
     bd0:	e0 96       	adiw	r28, 0x30	; 48
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	ff 91       	pop	r31
     be2:	ef 91       	pop	r30
     be4:	bf 91       	pop	r27
     be6:	af 91       	pop	r26
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	7f 91       	pop	r23
     bee:	6f 91       	pop	r22
     bf0:	5f 91       	pop	r21
     bf2:	4f 91       	pop	r20
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	0f 90       	pop	r0
     bfa:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     bfe:	0f 90       	pop	r0
     c00:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c04:	0f 90       	pop	r0
     c06:	1f 90       	pop	r1
     c08:	18 95       	reti

00000c0a <main>:
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28



int main(void)
{
     c10:	df 93       	push	r29
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	2f 97       	sbiw	r28, 0x0f	; 15
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
	char cmd;

	UART_Init();	//UART 초기화
     c22:	53 da       	rcall	.-2906   	; 0xca <UART_Init>

	SendCommand(CMD_TF);	//mp3 준비
     c24:	89 e0       	ldi	r24, 0x09	; 9
     c26:	9e da       	rcall	.-2756   	; 0x164 <SendCommand>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 ea       	ldi	r26, 0xA0	; 160
     c2e:	b1 e4       	ldi	r27, 0x41	; 65
     c30:	8a 83       	std	Y+2, r24	; 0x02
     c32:	9b 83       	std	Y+3, r25	; 0x03
     c34:	ac 83       	std	Y+4, r26	; 0x04
     c36:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	4a e7       	ldi	r20, 0x7A	; 122
     c3e:	55 e4       	ldi	r21, 0x45	; 69
     c40:	6a 81       	ldd	r22, Y+2	; 0x02
     c42:	7b 81       	ldd	r23, Y+3	; 0x03
     c44:	8c 81       	ldd	r24, Y+4	; 0x04
     c46:	9d 81       	ldd	r25, Y+5	; 0x05
     c48:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	8e 83       	std	Y+6, r24	; 0x06
     c52:	9f 83       	std	Y+7, r25	; 0x07
     c54:	a8 87       	std	Y+8, r26	; 0x08
     c56:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	40 e8       	ldi	r20, 0x80	; 128
     c5e:	5f e3       	ldi	r21, 0x3F	; 63
     c60:	6e 81       	ldd	r22, Y+6	; 0x06
     c62:	7f 81       	ldd	r23, Y+7	; 0x07
     c64:	88 85       	ldd	r24, Y+8	; 0x08
     c66:	99 85       	ldd	r25, Y+9	; 0x09
     c68:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__cmpsf2>
     c6c:	88 23       	and	r24, r24
     c6e:	2c f4       	brge	.+10     	; 0xc7a <main+0x70>
		__ticks = 1;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	9b 87       	std	Y+11, r25	; 0x0b
     c76:	8a 87       	std	Y+10, r24	; 0x0a
     c78:	3f c0       	rjmp	.+126    	; 0xcf8 <main+0xee>
	else if (__tmp > 65535)
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	3f ef       	ldi	r19, 0xFF	; 255
     c7e:	4f e7       	ldi	r20, 0x7F	; 127
     c80:	57 e4       	ldi	r21, 0x47	; 71
     c82:	6e 81       	ldd	r22, Y+6	; 0x06
     c84:	7f 81       	ldd	r23, Y+7	; 0x07
     c86:	88 85       	ldd	r24, Y+8	; 0x08
     c88:	99 85       	ldd	r25, Y+9	; 0x09
     c8a:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
     c8e:	18 16       	cp	r1, r24
     c90:	4c f5       	brge	.+82     	; 0xce4 <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e2       	ldi	r20, 0x20	; 32
     c98:	51 e4       	ldi	r21, 0x41	; 65
     c9a:	6a 81       	ldd	r22, Y+2	; 0x02
     c9c:	7b 81       	ldd	r23, Y+3	; 0x03
     c9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ca0:	9d 81       	ldd	r25, Y+5	; 0x05
     ca2:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	bc 01       	movw	r22, r24
     cac:	cd 01       	movw	r24, r26
     cae:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	9b 87       	std	Y+11, r25	; 0x0b
     cb8:	8a 87       	std	Y+10, r24	; 0x0a
     cba:	0f c0       	rjmp	.+30     	; 0xcda <main+0xd0>
     cbc:	80 e9       	ldi	r24, 0x90	; 144
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	9d 87       	std	Y+13, r25	; 0x0d
     cc2:	8c 87       	std	Y+12, r24	; 0x0c
     cc4:	8c 85       	ldd	r24, Y+12	; 0x0c
     cc6:	9d 85       	ldd	r25, Y+13	; 0x0d
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <main+0xbe>
     ccc:	9d 87       	std	Y+13, r25	; 0x0d
     cce:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd0:	8a 85       	ldd	r24, Y+10	; 0x0a
     cd2:	9b 85       	ldd	r25, Y+11	; 0x0b
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	9b 87       	std	Y+11, r25	; 0x0b
     cd8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cda:	8a 85       	ldd	r24, Y+10	; 0x0a
     cdc:	9b 85       	ldd	r25, Y+11	; 0x0b
     cde:	89 2b       	or	r24, r25
     ce0:	69 f7       	brne	.-38     	; 0xcbc <main+0xb2>
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <main+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce4:	6e 81       	ldd	r22, Y+6	; 0x06
     ce6:	7f 81       	ldd	r23, Y+7	; 0x07
     ce8:	88 85       	ldd	r24, Y+8	; 0x08
     cea:	99 85       	ldd	r25, Y+9	; 0x09
     cec:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	9b 87       	std	Y+11, r25	; 0x0b
     cf6:	8a 87       	std	Y+10, r24	; 0x0a
     cf8:	8a 85       	ldd	r24, Y+10	; 0x0a
     cfa:	9b 85       	ldd	r25, Y+11	; 0x0b
     cfc:	9f 87       	std	Y+15, r25	; 0x0f
     cfe:	8e 87       	std	Y+14, r24	; 0x0e
     d00:	8e 85       	ldd	r24, Y+14	; 0x0e
     d02:	9f 85       	ldd	r25, Y+15	; 0x0f
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <main+0xfa>
     d08:	9f 87       	std	Y+15, r25	; 0x0f
     d0a:	8e 87       	std	Y+14, r24	; 0x0e
	_delay_ms(20);
	//SendCommand01(0x06, 0x00, 0x0F);	//mp3 효과음 줄이기 필요하다면
	//_delay_ms(200);
	
	DDRB = 0xFF;	//이걸 안써서 한참동안 뻘짓했다...
     d0c:	87 e3       	ldi	r24, 0x37	; 55
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	2f ef       	ldi	r18, 0xFF	; 255
     d12:	fc 01       	movw	r30, r24
     d14:	20 83       	st	Z, r18
	TCCR0 = 0x07; // 일반모드, 1024분주
     d16:	83 e5       	ldi	r24, 0x53	; 83
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	27 e0       	ldi	r18, 0x07	; 7
     d1c:	fc 01       	movw	r30, r24
     d1e:	20 83       	st	Z, r18
	TCCR1A = 0b10000010;	//비교매치에서 OC1A 출력 클리어 TOP에서 셋
     d20:	8f e4       	ldi	r24, 0x4F	; 79
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	22 e8       	ldi	r18, 0x82	; 130
     d26:	fc 01       	movw	r30, r24
     d28:	20 83       	st	Z, r18
	TCCR1B = 0b00011010;	//Mode 14(Fast PWM ICR1이 TOP을 저장하는 레지스로 사용되는 동작모드 Icn핀 차단), 8분주
     d2a:	8e e4       	ldi	r24, 0x4E	; 78
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	2a e1       	ldi	r18, 0x1A	; 26
     d30:	fc 01       	movw	r30, r24
     d32:	20 83       	st	Z, r18
	TCCR1C = 0x00;
     d34:	8a e7       	ldi	r24, 0x7A	; 122
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	fc 01       	movw	r30, r24
     d3a:	10 82       	st	Z, r1
	ICR1 = 40000;	//Mode 14에서는 Top값이 ICR이므로 65536중에서 20000까지만 올라간다
     d3c:	86 e4       	ldi	r24, 0x46	; 70
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	20 e4       	ldi	r18, 0x40	; 64
     d42:	3c e9       	ldi	r19, 0x9C	; 156
     d44:	fc 01       	movw	r30, r24
     d46:	31 83       	std	Z+1, r19	; 0x01
     d48:	20 83       	st	Z, r18
	OCR1A = 2000;	//처음 high 상태였다가 20000까지 올라가는 중 1000일때 클리어 되어 20000까지 갈때까지 low상태 그래서  8분주라 20ms 1ms PWM 생성
     d4a:	8a e4       	ldi	r24, 0x4A	; 74
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	20 ed       	ldi	r18, 0xD0	; 208
     d50:	37 e0       	ldi	r19, 0x07	; 7
     d52:	fc 01       	movw	r30, r24
     d54:	31 83       	std	Z+1, r19	; 0x01
     d56:	20 83       	st	Z, r18
	TIMSK |= (1 << TOIE0); // TOIE0 = 1(오버플로우 인터럽트 인에이블)
     d58:	87 e5       	ldi	r24, 0x57	; 87
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	27 e5       	ldi	r18, 0x57	; 87
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	f9 01       	movw	r30, r18
     d62:	20 81       	ld	r18, Z
     d64:	21 60       	ori	r18, 0x01	; 1
     d66:	fc 01       	movw	r30, r24
     d68:	20 83       	st	Z, r18
	sei(); // 전역 인터럽트 인에이블 비트 I 셋
     d6a:	78 94       	sei

	

	for(uint8_t i = 0; i < 11; i++)
     d6c:	19 82       	std	Y+1, r1	; 0x01
     d6e:	12 c0       	rjmp	.+36     	; 0xd94 <main+0x18a>
	{
		password[i] = eeprom_read_byte(EEPROM + i);
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	08 2f       	mov	r16, r24
     d74:	10 e0       	ldi	r17, 0x00	; 0
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	88 2f       	mov	r24, r24
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <eeprom_read_byte>
     d82:	28 2f       	mov	r18, r24
     d84:	c8 01       	movw	r24, r16
     d86:	80 50       	subi	r24, 0x00	; 0
     d88:	9f 4f       	sbci	r25, 0xFF	; 255
     d8a:	fc 01       	movw	r30, r24
     d8c:	20 83       	st	Z, r18
	TIMSK |= (1 << TOIE0); // TOIE0 = 1(오버플로우 인터럽트 인에이블)
	sei(); // 전역 인터럽트 인에이블 비트 I 셋

	

	for(uint8_t i = 0; i < 11; i++)
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	8b 30       	cpi	r24, 0x0B	; 11
	{
		password[i] = eeprom_read_byte(EEPROM + i);
	}

	LCD_init();
     d98:	58 f3       	brcs	.-42     	; 0xd70 <main+0x166>
	LCD_String("PW :"); // 첫번째라인에출력
     d9a:	09 d0       	rcall	.+18     	; 0xdae <LCD_init>
     d9c:	8b e0       	ldi	r24, 0x0B	; 11
     d9e:	91 e0       	ldi	r25, 0x01	; 1
	LCD_String(password);
     da0:	04 d2       	rcall	.+1032   	; 0x11aa <LCD_String>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	91 e0       	ldi	r25, 0x01	; 1
	Command(LINE2);
     da6:	01 d2       	rcall	.+1026   	; 0x11aa <LCD_String>
     da8:	80 ec       	ldi	r24, 0xC0	; 192
     daa:	2a d2       	rcall	.+1108   	; 0x1200 <Command>

	while(1);
     dac:	ff cf       	rjmp	.-2      	; 0xdac <main+0x1a2>

00000dae <LCD_init>:
}

// LCD 초기화
void LCD_init(void)
{
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	ec 97       	sbiw	r28, 0x3c	; 60
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF; // 포트 C 출력 설정
     dc2:	84 e3       	ldi	r24, 0x34	; 52
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	2f ef       	ldi	r18, 0xFF	; 255
     dc8:	fc 01       	movw	r30, r24
     dca:	20 83       	st	Z, r18
	PORTC = 0x0;
     dcc:	85 e3       	ldi	r24, 0x35	; 53
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	fc 01       	movw	r30, r24
     dd2:	10 82       	st	Z, r1
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	a0 e7       	ldi	r26, 0x70	; 112
     dda:	b1 e4       	ldi	r27, 0x41	; 65
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	9a 83       	std	Y+2, r25	; 0x02
     de0:	ab 83       	std	Y+3, r26	; 0x03
     de2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	4a e7       	ldi	r20, 0x7A	; 122
     dea:	55 e4       	ldi	r21, 0x45	; 69
     dec:	69 81       	ldd	r22, Y+1	; 0x01
     dee:	7a 81       	ldd	r23, Y+2	; 0x02
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	9c 81       	ldd	r25, Y+4	; 0x04
     df4:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	8b ab       	std	Y+51, r24	; 0x33
     dfe:	9c ab       	std	Y+52, r25	; 0x34
     e00:	ad ab       	std	Y+53, r26	; 0x35
     e02:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e8       	ldi	r20, 0x80	; 128
     e0a:	5f e3       	ldi	r21, 0x3F	; 63
     e0c:	6b a9       	ldd	r22, Y+51	; 0x33
     e0e:	7c a9       	ldd	r23, Y+52	; 0x34
     e10:	8d a9       	ldd	r24, Y+53	; 0x35
     e12:	9e a9       	ldd	r25, Y+54	; 0x36
     e14:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__cmpsf2>
     e18:	88 23       	and	r24, r24
     e1a:	2c f4       	brge	.+10     	; 0xe26 <LCD_init+0x78>
		__ticks = 1;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	98 af       	std	Y+56, r25	; 0x38
     e22:	8f ab       	std	Y+55, r24	; 0x37
     e24:	3f c0       	rjmp	.+126    	; 0xea4 <LCD_init+0xf6>
	else if (__tmp > 65535)
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	3f ef       	ldi	r19, 0xFF	; 255
     e2a:	4f e7       	ldi	r20, 0x7F	; 127
     e2c:	57 e4       	ldi	r21, 0x47	; 71
     e2e:	6b a9       	ldd	r22, Y+51	; 0x33
     e30:	7c a9       	ldd	r23, Y+52	; 0x34
     e32:	8d a9       	ldd	r24, Y+53	; 0x35
     e34:	9e a9       	ldd	r25, Y+54	; 0x36
     e36:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
     e3a:	18 16       	cp	r1, r24
     e3c:	4c f5       	brge	.+82     	; 0xe90 <LCD_init+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e2       	ldi	r20, 0x20	; 32
     e44:	51 e4       	ldi	r21, 0x41	; 65
     e46:	69 81       	ldd	r22, Y+1	; 0x01
     e48:	7a 81       	ldd	r23, Y+2	; 0x02
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	bc 01       	movw	r22, r24
     e58:	cd 01       	movw	r24, r26
     e5a:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	98 af       	std	Y+56, r25	; 0x38
     e64:	8f ab       	std	Y+55, r24	; 0x37
     e66:	0f c0       	rjmp	.+30     	; 0xe86 <LCD_init+0xd8>
     e68:	80 e9       	ldi	r24, 0x90	; 144
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	9a af       	std	Y+58, r25	; 0x3a
     e6e:	89 af       	std	Y+57, r24	; 0x39
     e70:	89 ad       	ldd	r24, Y+57	; 0x39
     e72:	9a ad       	ldd	r25, Y+58	; 0x3a
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <LCD_init+0xc6>
     e78:	9a af       	std	Y+58, r25	; 0x3a
     e7a:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7c:	8f a9       	ldd	r24, Y+55	; 0x37
     e7e:	98 ad       	ldd	r25, Y+56	; 0x38
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	98 af       	std	Y+56, r25	; 0x38
     e84:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e86:	8f a9       	ldd	r24, Y+55	; 0x37
     e88:	98 ad       	ldd	r25, Y+56	; 0x38
     e8a:	89 2b       	or	r24, r25
     e8c:	69 f7       	brne	.-38     	; 0xe68 <LCD_init+0xba>
     e8e:	14 c0       	rjmp	.+40     	; 0xeb8 <LCD_init+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e90:	6b a9       	ldd	r22, Y+51	; 0x33
     e92:	7c a9       	ldd	r23, Y+52	; 0x34
     e94:	8d a9       	ldd	r24, Y+53	; 0x35
     e96:	9e a9       	ldd	r25, Y+54	; 0x36
     e98:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	98 af       	std	Y+56, r25	; 0x38
     ea2:	8f ab       	std	Y+55, r24	; 0x37
     ea4:	8f a9       	ldd	r24, Y+55	; 0x37
     ea6:	98 ad       	ldd	r25, Y+56	; 0x38
     ea8:	9c af       	std	Y+60, r25	; 0x3c
     eaa:	8b af       	std	Y+59, r24	; 0x3b
     eac:	8b ad       	ldd	r24, Y+59	; 0x3b
     eae:	9c ad       	ldd	r25, Y+60	; 0x3c
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <LCD_init+0x102>
     eb4:	9c af       	std	Y+60, r25	; 0x3c
     eb6:	8b af       	std	Y+59, r24	; 0x3b
	_delay_ms(15);
	Command(0x20);
     eb8:	80 e2       	ldi	r24, 0x20	; 32
     eba:	a2 d1       	rcall	.+836    	; 0x1200 <Command>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	a0 ea       	ldi	r26, 0xA0	; 160
     ec2:	b0 e4       	ldi	r27, 0x40	; 64
     ec4:	8d 83       	std	Y+5, r24	; 0x05
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	af 83       	std	Y+7, r26	; 0x07
     eca:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	4a e7       	ldi	r20, 0x7A	; 122
     ed2:	55 e4       	ldi	r21, 0x45	; 69
     ed4:	6d 81       	ldd	r22, Y+5	; 0x05
     ed6:	7e 81       	ldd	r23, Y+6	; 0x06
     ed8:	8f 81       	ldd	r24, Y+7	; 0x07
     eda:	98 85       	ldd	r25, Y+8	; 0x08
     edc:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	89 a7       	std	Y+41, r24	; 0x29
     ee6:	9a a7       	std	Y+42, r25	; 0x2a
     ee8:	ab a7       	std	Y+43, r26	; 0x2b
     eea:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e8       	ldi	r20, 0x80	; 128
     ef2:	5f e3       	ldi	r21, 0x3F	; 63
     ef4:	69 a5       	ldd	r22, Y+41	; 0x29
     ef6:	7a a5       	ldd	r23, Y+42	; 0x2a
     ef8:	8b a5       	ldd	r24, Y+43	; 0x2b
     efa:	9c a5       	ldd	r25, Y+44	; 0x2c
     efc:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__cmpsf2>
     f00:	88 23       	and	r24, r24
     f02:	2c f4       	brge	.+10     	; 0xf0e <LCD_init+0x160>
		__ticks = 1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	9e a7       	std	Y+46, r25	; 0x2e
     f0a:	8d a7       	std	Y+45, r24	; 0x2d
     f0c:	3f c0       	rjmp	.+126    	; 0xf8c <LCD_init+0x1de>
	else if (__tmp > 65535)
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	3f ef       	ldi	r19, 0xFF	; 255
     f12:	4f e7       	ldi	r20, 0x7F	; 127
     f14:	57 e4       	ldi	r21, 0x47	; 71
     f16:	69 a5       	ldd	r22, Y+41	; 0x29
     f18:	7a a5       	ldd	r23, Y+42	; 0x2a
     f1a:	8b a5       	ldd	r24, Y+43	; 0x2b
     f1c:	9c a5       	ldd	r25, Y+44	; 0x2c
     f1e:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
     f22:	18 16       	cp	r1, r24
     f24:	4c f5       	brge	.+82     	; 0xf78 <LCD_init+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e2       	ldi	r20, 0x20	; 32
     f2c:	51 e4       	ldi	r21, 0x41	; 65
     f2e:	6d 81       	ldd	r22, Y+5	; 0x05
     f30:	7e 81       	ldd	r23, Y+6	; 0x06
     f32:	8f 81       	ldd	r24, Y+7	; 0x07
     f34:	98 85       	ldd	r25, Y+8	; 0x08
     f36:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	bc 01       	movw	r22, r24
     f40:	cd 01       	movw	r24, r26
     f42:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	9e a7       	std	Y+46, r25	; 0x2e
     f4c:	8d a7       	std	Y+45, r24	; 0x2d
     f4e:	0f c0       	rjmp	.+30     	; 0xf6e <LCD_init+0x1c0>
     f50:	80 e9       	ldi	r24, 0x90	; 144
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	98 ab       	std	Y+48, r25	; 0x30
     f56:	8f a7       	std	Y+47, r24	; 0x2f
     f58:	8f a5       	ldd	r24, Y+47	; 0x2f
     f5a:	98 a9       	ldd	r25, Y+48	; 0x30
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <LCD_init+0x1ae>
     f60:	98 ab       	std	Y+48, r25	; 0x30
     f62:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f64:	8d a5       	ldd	r24, Y+45	; 0x2d
     f66:	9e a5       	ldd	r25, Y+46	; 0x2e
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	9e a7       	std	Y+46, r25	; 0x2e
     f6c:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6e:	8d a5       	ldd	r24, Y+45	; 0x2d
     f70:	9e a5       	ldd	r25, Y+46	; 0x2e
     f72:	89 2b       	or	r24, r25
     f74:	69 f7       	brne	.-38     	; 0xf50 <LCD_init+0x1a2>
     f76:	14 c0       	rjmp	.+40     	; 0xfa0 <LCD_init+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f78:	69 a5       	ldd	r22, Y+41	; 0x29
     f7a:	7a a5       	ldd	r23, Y+42	; 0x2a
     f7c:	8b a5       	ldd	r24, Y+43	; 0x2b
     f7e:	9c a5       	ldd	r25, Y+44	; 0x2c
     f80:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	9e a7       	std	Y+46, r25	; 0x2e
     f8a:	8d a7       	std	Y+45, r24	; 0x2d
     f8c:	8d a5       	ldd	r24, Y+45	; 0x2d
     f8e:	9e a5       	ldd	r25, Y+46	; 0x2e
     f90:	9a ab       	std	Y+50, r25	; 0x32
     f92:	89 ab       	std	Y+49, r24	; 0x31
     f94:	89 a9       	ldd	r24, Y+49	; 0x31
     f96:	9a a9       	ldd	r25, Y+50	; 0x32
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <LCD_init+0x1ea>
     f9c:	9a ab       	std	Y+50, r25	; 0x32
     f9e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(5);
	Command(0x20);
     fa0:	80 e2       	ldi	r24, 0x20	; 32
     fa2:	2e d1       	rcall	.+604    	; 0x1200 <Command>
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	a8 ec       	ldi	r26, 0xC8	; 200
     faa:	b2 e4       	ldi	r27, 0x42	; 66
     fac:	89 87       	std	Y+9, r24	; 0x09
     fae:	9a 87       	std	Y+10, r25	; 0x0a
     fb0:	ab 87       	std	Y+11, r26	; 0x0b
     fb2:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     fb4:	2b ea       	ldi	r18, 0xAB	; 171
     fb6:	3a ea       	ldi	r19, 0xAA	; 170
     fb8:	4a ea       	ldi	r20, 0xAA	; 170
     fba:	50 e4       	ldi	r21, 0x40	; 64
     fbc:	69 85       	ldd	r22, Y+9	; 0x09
     fbe:	7a 85       	ldd	r23, Y+10	; 0x0a
     fc0:	8b 85       	ldd	r24, Y+11	; 0x0b
     fc2:	9c 85       	ldd	r25, Y+12	; 0x0c
     fc4:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	8d 87       	std	Y+13, r24	; 0x0d
     fce:	9e 87       	std	Y+14, r25	; 0x0e
     fd0:	af 87       	std	Y+15, r26	; 0x0f
     fd2:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e8       	ldi	r20, 0x80	; 128
     fda:	50 e4       	ldi	r21, 0x40	; 64
     fdc:	69 85       	ldd	r22, Y+9	; 0x09
     fde:	7a 85       	ldd	r23, Y+10	; 0x0a
     fe0:	8b 85       	ldd	r24, Y+11	; 0x0b
     fe2:	9c 85       	ldd	r25, Y+12	; 0x0c
     fe4:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	89 8b       	std	Y+17, r24	; 0x11
     fee:	9a 8b       	std	Y+18, r25	; 0x12
     ff0:	ab 8b       	std	Y+19, r26	; 0x13
     ff2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e8       	ldi	r20, 0x80	; 128
     ffa:	5f e3       	ldi	r21, 0x3F	; 63
     ffc:	6d 85       	ldd	r22, Y+13	; 0x0d
     ffe:	7e 85       	ldd	r23, Y+14	; 0x0e
    1000:	8f 85       	ldd	r24, Y+15	; 0x0f
    1002:	98 89       	ldd	r25, Y+16	; 0x10
    1004:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__cmpsf2>
    1008:	88 23       	and	r24, r24
    100a:	1c f4       	brge	.+6      	; 0x1012 <LCD_init+0x264>
		__ticks = 1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	8d 8b       	std	Y+21, r24	; 0x15
    1010:	b2 c0       	rjmp	.+356    	; 0x1176 <__stack+0x77>
	else if (__tmp2 > 65535)
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	3f ef       	ldi	r19, 0xFF	; 255
    1016:	4f e7       	ldi	r20, 0x7F	; 127
    1018:	57 e4       	ldi	r21, 0x47	; 71
    101a:	69 89       	ldd	r22, Y+17	; 0x11
    101c:	7a 89       	ldd	r23, Y+18	; 0x12
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
    1026:	18 16       	cp	r1, r24
    1028:	0c f0       	brlt	.+2      	; 0x102c <LCD_init+0x27e>
    102a:	7b c0       	rjmp	.+246    	; 0x1122 <__stack+0x23>
	{
		_delay_ms(__us / 1000.0);
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	4a e7       	ldi	r20, 0x7A	; 122
    1032:	54 e4       	ldi	r21, 0x44	; 68
    1034:	69 85       	ldd	r22, Y+9	; 0x09
    1036:	7a 85       	ldd	r23, Y+10	; 0x0a
    1038:	8b 85       	ldd	r24, Y+11	; 0x0b
    103a:	9c 85       	ldd	r25, Y+12	; 0x0c
    103c:	0e 94 76 14 	call	0x28ec	; 0x28ec <__divsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	8e 8b       	std	Y+22, r24	; 0x16
    1046:	9f 8b       	std	Y+23, r25	; 0x17
    1048:	a8 8f       	std	Y+24, r26	; 0x18
    104a:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	4a e7       	ldi	r20, 0x7A	; 122
    1052:	55 e4       	ldi	r21, 0x45	; 69
    1054:	6e 89       	ldd	r22, Y+22	; 0x16
    1056:	7f 89       	ldd	r23, Y+23	; 0x17
    1058:	88 8d       	ldd	r24, Y+24	; 0x18
    105a:	99 8d       	ldd	r25, Y+25	; 0x19
    105c:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	8a 8f       	std	Y+26, r24	; 0x1a
    1066:	9b 8f       	std	Y+27, r25	; 0x1b
    1068:	ac 8f       	std	Y+28, r26	; 0x1c
    106a:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e8       	ldi	r20, 0x80	; 128
    1072:	5f e3       	ldi	r21, 0x3F	; 63
    1074:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1076:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1078:	8c 8d       	ldd	r24, Y+28	; 0x1c
    107a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    107c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__cmpsf2>
    1080:	88 23       	and	r24, r24
    1082:	2c f4       	brge	.+10     	; 0x108e <LCD_init+0x2e0>
		__ticks = 1;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	9f 8f       	std	Y+31, r25	; 0x1f
    108a:	8e 8f       	std	Y+30, r24	; 0x1e
    108c:	3f c0       	rjmp	.+126    	; 0x110c <__stack+0xd>
	else if (__tmp > 65535)
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	3f ef       	ldi	r19, 0xFF	; 255
    1092:	4f e7       	ldi	r20, 0x7F	; 127
    1094:	57 e4       	ldi	r21, 0x47	; 71
    1096:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1098:	7b 8d       	ldd	r23, Y+27	; 0x1b
    109a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    109c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    109e:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
    10a2:	18 16       	cp	r1, r24
    10a4:	4c f5       	brge	.+82     	; 0x10f8 <LCD_init+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e2       	ldi	r20, 0x20	; 32
    10ac:	51 e4       	ldi	r21, 0x41	; 65
    10ae:	6e 89       	ldd	r22, Y+22	; 0x16
    10b0:	7f 89       	ldd	r23, Y+23	; 0x17
    10b2:	88 8d       	ldd	r24, Y+24	; 0x18
    10b4:	99 8d       	ldd	r25, Y+25	; 0x19
    10b6:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	9f 8f       	std	Y+31, r25	; 0x1f
    10cc:	8e 8f       	std	Y+30, r24	; 0x1e
    10ce:	0f c0       	rjmp	.+30     	; 0x10ee <LCD_init+0x340>
    10d0:	80 e9       	ldi	r24, 0x90	; 144
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	99 a3       	std	Y+33, r25	; 0x21
    10d6:	88 a3       	std	Y+32, r24	; 0x20
    10d8:	88 a1       	ldd	r24, Y+32	; 0x20
    10da:	99 a1       	ldd	r25, Y+33	; 0x21
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <LCD_init+0x32e>
    10e0:	99 a3       	std	Y+33, r25	; 0x21
    10e2:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	9f 8f       	std	Y+31, r25	; 0x1f
    10ec:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10f2:	89 2b       	or	r24, r25
    10f4:	69 f7       	brne	.-38     	; 0x10d0 <LCD_init+0x322>
    10f6:	3f c0       	rjmp	.+126    	; 0x1176 <__stack+0x77>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    10fa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    10fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10fe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1100:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9f 8f       	std	Y+31, r25	; 0x1f
    110a:	8e 8f       	std	Y+30, r24	; 0x1e
    110c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    110e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1110:	9b a3       	std	Y+35, r25	; 0x23
    1112:	8a a3       	std	Y+34, r24	; 0x22
    1114:	8a a1       	ldd	r24, Y+34	; 0x22
    1116:	9b a1       	ldd	r25, Y+35	; 0x23
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <__stack+0x19>
    111c:	9b a3       	std	Y+35, r25	; 0x23
    111e:	8a a3       	std	Y+34, r24	; 0x22
    1120:	2a c0       	rjmp	.+84     	; 0x1176 <__stack+0x77>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	4f e7       	ldi	r20, 0x7F	; 127
    1128:	53 e4       	ldi	r21, 0x43	; 67
    112a:	6d 85       	ldd	r22, Y+13	; 0x0d
    112c:	7e 85       	ldd	r23, Y+14	; 0x0e
    112e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1130:	98 89       	ldd	r25, Y+16	; 0x10
    1132:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
    1136:	18 16       	cp	r1, r24
    1138:	ac f4       	brge	.+42     	; 0x1164 <__stack+0x65>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    113a:	69 89       	ldd	r22, Y+17	; 0x11
    113c:	7a 89       	ldd	r23, Y+18	; 0x12
    113e:	8b 89       	ldd	r24, Y+19	; 0x13
    1140:	9c 89       	ldd	r25, Y+20	; 0x14
    1142:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	9d a3       	std	Y+37, r25	; 0x25
    114c:	8c a3       	std	Y+36, r24	; 0x24
    114e:	8c a1       	ldd	r24, Y+36	; 0x24
    1150:	9d a1       	ldd	r25, Y+37	; 0x25
    1152:	9f a3       	std	Y+39, r25	; 0x27
    1154:	8e a3       	std	Y+38, r24	; 0x26
    1156:	8e a1       	ldd	r24, Y+38	; 0x26
    1158:	9f a1       	ldd	r25, Y+39	; 0x27
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <__stack+0x5b>
    115e:	9f a3       	std	Y+39, r25	; 0x27
    1160:	8e a3       	std	Y+38, r24	; 0x26
    1162:	0f c0       	rjmp	.+30     	; 0x1182 <__stack+0x83>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1164:	6d 85       	ldd	r22, Y+13	; 0x0d
    1166:	7e 85       	ldd	r23, Y+14	; 0x0e
    1168:	8f 85       	ldd	r24, Y+15	; 0x0f
    116a:	98 89       	ldd	r25, Y+16	; 0x10
    116c:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	8d 8b       	std	Y+21, r24	; 0x15
    1176:	8d 89       	ldd	r24, Y+21	; 0x15
    1178:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    117a:	88 a5       	ldd	r24, Y+40	; 0x28
    117c:	8a 95       	dec	r24
    117e:	f1 f7       	brne	.-4      	; 0x117c <__stack+0x7d>
	_delay_us(100);
	Command(0x20);
    1180:	88 a7       	std	Y+40, r24	; 0x28
    1182:	80 e2       	ldi	r24, 0x20	; 32
	Command(FUNCSET);
    1184:	3d d0       	rcall	.+122    	; 0x1200 <Command>
    1186:	88 e2       	ldi	r24, 0x28	; 40
	Command(DISPON);
    1188:	3b d0       	rcall	.+118    	; 0x1200 <Command>
    118a:	8c e0       	ldi	r24, 0x0C	; 12
	Command(ALLCLR);
    118c:	39 d0       	rcall	.+114    	; 0x1200 <Command>
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	37 d0       	rcall	.+110    	; 0x1200 <Command>
	Command(ENTMODE);
    1192:	86 e0       	ldi	r24, 0x06	; 6
    1194:	35 d0       	rcall	.+106    	; 0x1200 <Command>
    1196:	00 00       	nop
}
    1198:	ec 96       	adiw	r28, 0x3c	; 60
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	08 95       	ret

000011aa <LCD_String>:
    11aa:	cf 93       	push	r28

// 문자열 출력 함수
void LCD_String(char str[])
{
    11ac:	df 93       	push	r29
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <LCD_String+0x6>
    11b0:	1f 92       	push	r1
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	9b 83       	std	Y+3, r25	; 0x03
    11b8:	8a 83       	std	Y+2, r24	; 0x02
	char i=0;
    11ba:	19 82       	std	Y+1, r1	; 0x01

	while(str[i] != 0) Data(str[i++]);
    11bc:	0e c0       	rjmp	.+28     	; 0x11da <LCD_String+0x30>
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	98 2f       	mov	r25, r24
    11c2:	9f 5f       	subi	r25, 0xFF	; 255
    11c4:	99 83       	std	Y+1, r25	; 0x01
    11c6:	08 2e       	mov	r0, r24
    11c8:	00 0c       	add	r0, r0
    11ca:	99 0b       	sbc	r25, r25
    11cc:	2a 81       	ldd	r18, Y+2	; 0x02
    11ce:	3b 81       	ldd	r19, Y+3	; 0x03
    11d0:	82 0f       	add	r24, r18
    11d2:	93 1f       	adc	r25, r19
    11d4:	fc 01       	movw	r30, r24
    11d6:	80 81       	ld	r24, Z
    11d8:	9d d5       	rcall	.+2874   	; 0x1d14 <Data>
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	08 2e       	mov	r0, r24
    11de:	00 0c       	add	r0, r0
    11e0:	99 0b       	sbc	r25, r25
    11e2:	2a 81       	ldd	r18, Y+2	; 0x02
    11e4:	3b 81       	ldd	r19, Y+3	; 0x03
    11e6:	82 0f       	add	r24, r18
    11e8:	93 1f       	adc	r25, r19
    11ea:	fc 01       	movw	r30, r24
    11ec:	80 81       	ld	r24, Z
    11ee:	88 23       	and	r24, r24
    11f0:	31 f7       	brne	.-52     	; 0x11be <LCD_String+0x14>
}
    11f2:	00 00       	nop
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <Command>:

// 인스트럭션 쓰기 함수
void Command(u_char byte)
{
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	c1 58       	subi	r28, 0x81	; 129
    120e:	d1 09       	sbc	r29, r1
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	9e 01       	movw	r18, r28
    121c:	2f 57       	subi	r18, 0x7F	; 127
    121e:	3f 4f       	sbci	r19, 0xFF	; 255
    1220:	f9 01       	movw	r30, r18
    1222:	80 83       	st	Z, r24
	Busy();
    1224:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <Busy>
	// 인스트럭션 상위 4비트
	PORTC = 0x00; // RS=RW=0
    1228:	85 e3       	ldi	r24, 0x35	; 53
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	fc 01       	movw	r30, r24
    122e:	10 82       	st	Z, r1
	PORTC |= (byte & 0xF0); // 명령어 상위 4비트
    1230:	85 e3       	ldi	r24, 0x35	; 53
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	25 e3       	ldi	r18, 0x35	; 53
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	f9 01       	movw	r30, r18
    123a:	20 81       	ld	r18, Z
    123c:	42 2f       	mov	r20, r18
    123e:	9e 01       	movw	r18, r28
    1240:	2f 57       	subi	r18, 0x7F	; 127
    1242:	3f 4f       	sbci	r19, 0xFF	; 255
    1244:	f9 01       	movw	r30, r18
    1246:	20 81       	ld	r18, Z
    1248:	20 7f       	andi	r18, 0xF0	; 240
    124a:	24 2b       	or	r18, r20
    124c:	fc 01       	movw	r30, r24
    124e:	20 83       	st	Z, r18
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	a0 e8       	ldi	r26, 0x80	; 128
    1256:	bf e3       	ldi	r27, 0x3F	; 63
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	ab 83       	std	Y+3, r26	; 0x03
    125e:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1260:	8e 01       	movw	r16, r28
    1262:	0b 59       	subi	r16, 0x9B	; 155
    1264:	1f 4f       	sbci	r17, 0xFF	; 255
    1266:	2b ea       	ldi	r18, 0xAB	; 171
    1268:	3a ea       	ldi	r19, 0xAA	; 170
    126a:	4a ea       	ldi	r20, 0xAA	; 170
    126c:	50 e4       	ldi	r21, 0x40	; 64
    126e:	69 81       	ldd	r22, Y+1	; 0x01
    1270:	7a 81       	ldd	r23, Y+2	; 0x02
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	f8 01       	movw	r30, r16
    1280:	80 83       	st	Z, r24
    1282:	91 83       	std	Z+1, r25	; 0x01
    1284:	a2 83       	std	Z+2, r26	; 0x02
    1286:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1288:	8e 01       	movw	r16, r28
    128a:	07 59       	subi	r16, 0x97	; 151
    128c:	1f 4f       	sbci	r17, 0xFF	; 255
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e8       	ldi	r20, 0x80	; 128
    1294:	50 e4       	ldi	r21, 0x40	; 64
    1296:	69 81       	ldd	r22, Y+1	; 0x01
    1298:	7a 81       	ldd	r23, Y+2	; 0x02
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	f8 01       	movw	r30, r16
    12a8:	80 83       	st	Z, r24
    12aa:	91 83       	std	Z+1, r25	; 0x01
    12ac:	a2 83       	std	Z+2, r26	; 0x02
    12ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12b0:	ce 01       	movw	r24, r28
    12b2:	8b 59       	subi	r24, 0x9B	; 155
    12b4:	9f 4f       	sbci	r25, 0xFF	; 255
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e8       	ldi	r20, 0x80	; 128
    12bc:	5f e3       	ldi	r21, 0x3F	; 63
    12be:	fc 01       	movw	r30, r24
    12c0:	60 81       	ld	r22, Z
    12c2:	71 81       	ldd	r23, Z+1	; 0x01
    12c4:	82 81       	ldd	r24, Z+2	; 0x02
    12c6:	93 81       	ldd	r25, Z+3	; 0x03
    12c8:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__cmpsf2>
    12cc:	88 23       	and	r24, r24
    12ce:	3c f4       	brge	.+14     	; 0x12de <Command+0xde>
		__ticks = 1;
    12d0:	ce 01       	movw	r24, r28
    12d2:	83 59       	subi	r24, 0x93	; 147
    12d4:	9f 4f       	sbci	r25, 0xFF	; 255
    12d6:	21 e0       	ldi	r18, 0x01	; 1
    12d8:	fc 01       	movw	r30, r24
    12da:	20 83       	st	Z, r18
    12dc:	2c c1       	rjmp	.+600    	; 0x1536 <Command+0x336>
	else if (__tmp2 > 65535)
    12de:	ce 01       	movw	r24, r28
    12e0:	87 59       	subi	r24, 0x97	; 151
    12e2:	9f 4f       	sbci	r25, 0xFF	; 255
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	3f ef       	ldi	r19, 0xFF	; 255
    12e8:	4f e7       	ldi	r20, 0x7F	; 127
    12ea:	57 e4       	ldi	r21, 0x47	; 71
    12ec:	fc 01       	movw	r30, r24
    12ee:	60 81       	ld	r22, Z
    12f0:	71 81       	ldd	r23, Z+1	; 0x01
    12f2:	82 81       	ldd	r24, Z+2	; 0x02
    12f4:	93 81       	ldd	r25, Z+3	; 0x03
    12f6:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
    12fa:	18 16       	cp	r1, r24
    12fc:	0c f0       	brlt	.+2      	; 0x1300 <Command+0x100>
    12fe:	cd c0       	rjmp	.+410    	; 0x149a <Command+0x29a>
	{
		_delay_ms(__us / 1000.0);
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	4a e7       	ldi	r20, 0x7A	; 122
    1306:	54 e4       	ldi	r21, 0x44	; 68
    1308:	69 81       	ldd	r22, Y+1	; 0x01
    130a:	7a 81       	ldd	r23, Y+2	; 0x02
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	0e 94 76 14 	call	0x28ec	; 0x28ec <__divsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	9e 01       	movw	r18, r28
    131a:	22 59       	subi	r18, 0x92	; 146
    131c:	3f 4f       	sbci	r19, 0xFF	; 255
    131e:	f9 01       	movw	r30, r18
    1320:	80 83       	st	Z, r24
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	a2 83       	std	Z+2, r26	; 0x02
    1326:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1328:	8e 01       	movw	r16, r28
    132a:	0e 58       	subi	r16, 0x8E	; 142
    132c:	1f 4f       	sbci	r17, 0xFF	; 255
    132e:	ce 01       	movw	r24, r28
    1330:	82 59       	subi	r24, 0x92	; 146
    1332:	9f 4f       	sbci	r25, 0xFF	; 255
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	4a e7       	ldi	r20, 0x7A	; 122
    133a:	55 e4       	ldi	r21, 0x45	; 69
    133c:	fc 01       	movw	r30, r24
    133e:	60 81       	ld	r22, Z
    1340:	71 81       	ldd	r23, Z+1	; 0x01
    1342:	82 81       	ldd	r24, Z+2	; 0x02
    1344:	93 81       	ldd	r25, Z+3	; 0x03
    1346:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	f8 01       	movw	r30, r16
    1350:	80 83       	st	Z, r24
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	a2 83       	std	Z+2, r26	; 0x02
    1356:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1358:	ce 01       	movw	r24, r28
    135a:	8e 58       	subi	r24, 0x8E	; 142
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	40 e8       	ldi	r20, 0x80	; 128
    1364:	5f e3       	ldi	r21, 0x3F	; 63
    1366:	fc 01       	movw	r30, r24
    1368:	60 81       	ld	r22, Z
    136a:	71 81       	ldd	r23, Z+1	; 0x01
    136c:	82 81       	ldd	r24, Z+2	; 0x02
    136e:	93 81       	ldd	r25, Z+3	; 0x03
    1370:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__cmpsf2>
    1374:	88 23       	and	r24, r24
    1376:	4c f4       	brge	.+18     	; 0x138a <Command+0x18a>
		__ticks = 1;
    1378:	ce 01       	movw	r24, r28
    137a:	8a 58       	subi	r24, 0x8A	; 138
    137c:	9f 4f       	sbci	r25, 0xFF	; 255
    137e:	21 e0       	ldi	r18, 0x01	; 1
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	fc 01       	movw	r30, r24
    1384:	31 83       	std	Z+1, r19	; 0x01
    1386:	20 83       	st	Z, r18
    1388:	6d c0       	rjmp	.+218    	; 0x1464 <Command+0x264>
	else if (__tmp > 65535)
    138a:	ce 01       	movw	r24, r28
    138c:	8e 58       	subi	r24, 0x8E	; 142
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	3f ef       	ldi	r19, 0xFF	; 255
    1394:	4f e7       	ldi	r20, 0x7F	; 127
    1396:	57 e4       	ldi	r21, 0x47	; 71
    1398:	fc 01       	movw	r30, r24
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
    13a6:	18 16       	cp	r1, r24
    13a8:	0c f0       	brlt	.+2      	; 0x13ac <Command+0x1ac>
    13aa:	4a c0       	rjmp	.+148    	; 0x1440 <Command+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ac:	ce 01       	movw	r24, r28
    13ae:	82 59       	subi	r24, 0x92	; 146
    13b0:	9f 4f       	sbci	r25, 0xFF	; 255
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e2       	ldi	r20, 0x20	; 32
    13b8:	51 e4       	ldi	r21, 0x41	; 65
    13ba:	fc 01       	movw	r30, r24
    13bc:	60 81       	ld	r22, Z
    13be:	71 81       	ldd	r23, Z+1	; 0x01
    13c0:	82 81       	ldd	r24, Z+2	; 0x02
    13c2:	93 81       	ldd	r25, Z+3	; 0x03
    13c4:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	8e 01       	movw	r16, r28
    13ce:	0a 58       	subi	r16, 0x8A	; 138
    13d0:	1f 4f       	sbci	r17, 0xFF	; 255
    13d2:	bc 01       	movw	r22, r24
    13d4:	cd 01       	movw	r24, r26
    13d6:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	f8 01       	movw	r30, r16
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	80 83       	st	Z, r24
    13e4:	24 c0       	rjmp	.+72     	; 0x142e <Command+0x22e>
    13e6:	ce 01       	movw	r24, r28
    13e8:	88 58       	subi	r24, 0x88	; 136
    13ea:	9f 4f       	sbci	r25, 0xFF	; 255
    13ec:	20 e9       	ldi	r18, 0x90	; 144
    13ee:	31 e0       	ldi	r19, 0x01	; 1
    13f0:	fc 01       	movw	r30, r24
    13f2:	31 83       	std	Z+1, r19	; 0x01
    13f4:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13f6:	ce 01       	movw	r24, r28
    13f8:	88 58       	subi	r24, 0x88	; 136
    13fa:	9f 4f       	sbci	r25, 0xFF	; 255
    13fc:	fc 01       	movw	r30, r24
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <Command+0x202>
    1406:	9e 01       	movw	r18, r28
    1408:	28 58       	subi	r18, 0x88	; 136
    140a:	3f 4f       	sbci	r19, 0xFF	; 255
    140c:	f9 01       	movw	r30, r18
    140e:	91 83       	std	Z+1, r25	; 0x01
    1410:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1412:	ce 01       	movw	r24, r28
    1414:	8a 58       	subi	r24, 0x8A	; 138
    1416:	9f 4f       	sbci	r25, 0xFF	; 255
    1418:	9e 01       	movw	r18, r28
    141a:	2a 58       	subi	r18, 0x8A	; 138
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	f9 01       	movw	r30, r18
    1420:	20 81       	ld	r18, Z
    1422:	31 81       	ldd	r19, Z+1	; 0x01
    1424:	21 50       	subi	r18, 0x01	; 1
    1426:	31 09       	sbc	r19, r1
    1428:	fc 01       	movw	r30, r24
    142a:	31 83       	std	Z+1, r19	; 0x01
    142c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142e:	ce 01       	movw	r24, r28
    1430:	8a 58       	subi	r24, 0x8A	; 138
    1432:	9f 4f       	sbci	r25, 0xFF	; 255
    1434:	fc 01       	movw	r30, r24
    1436:	80 81       	ld	r24, Z
    1438:	91 81       	ldd	r25, Z+1	; 0x01
    143a:	89 2b       	or	r24, r25
    143c:	a1 f6       	brne	.-88     	; 0x13e6 <Command+0x1e6>
    143e:	7b c0       	rjmp	.+246    	; 0x1536 <Command+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1440:	8e 01       	movw	r16, r28
    1442:	0a 58       	subi	r16, 0x8A	; 138
    1444:	1f 4f       	sbci	r17, 0xFF	; 255
    1446:	ce 01       	movw	r24, r28
    1448:	8e 58       	subi	r24, 0x8E	; 142
    144a:	9f 4f       	sbci	r25, 0xFF	; 255
    144c:	fc 01       	movw	r30, r24
    144e:	60 81       	ld	r22, Z
    1450:	71 81       	ldd	r23, Z+1	; 0x01
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	f8 01       	movw	r30, r16
    1460:	91 83       	std	Z+1, r25	; 0x01
    1462:	80 83       	st	Z, r24
    1464:	ce 01       	movw	r24, r28
    1466:	86 58       	subi	r24, 0x86	; 134
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	9e 01       	movw	r18, r28
    146c:	2a 58       	subi	r18, 0x8A	; 138
    146e:	3f 4f       	sbci	r19, 0xFF	; 255
    1470:	f9 01       	movw	r30, r18
    1472:	20 81       	ld	r18, Z
    1474:	31 81       	ldd	r19, Z+1	; 0x01
    1476:	fc 01       	movw	r30, r24
    1478:	31 83       	std	Z+1, r19	; 0x01
    147a:	20 83       	st	Z, r18
    147c:	ce 01       	movw	r24, r28
    147e:	86 58       	subi	r24, 0x86	; 134
    1480:	9f 4f       	sbci	r25, 0xFF	; 255
    1482:	fc 01       	movw	r30, r24
    1484:	80 81       	ld	r24, Z
    1486:	91 81       	ldd	r25, Z+1	; 0x01
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	f1 f7       	brne	.-4      	; 0x1488 <Command+0x288>
    148c:	9e 01       	movw	r18, r28
    148e:	26 58       	subi	r18, 0x86	; 134
    1490:	3f 4f       	sbci	r19, 0xFF	; 255
    1492:	f9 01       	movw	r30, r18
    1494:	91 83       	std	Z+1, r25	; 0x01
    1496:	80 83       	st	Z, r24
    1498:	4e c0       	rjmp	.+156    	; 0x1536 <Command+0x336>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    149a:	ce 01       	movw	r24, r28
    149c:	8b 59       	subi	r24, 0x9B	; 155
    149e:	9f 4f       	sbci	r25, 0xFF	; 255
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	4f e7       	ldi	r20, 0x7F	; 127
    14a6:	53 e4       	ldi	r21, 0x43	; 67
    14a8:	fc 01       	movw	r30, r24
    14aa:	60 81       	ld	r22, Z
    14ac:	71 81       	ldd	r23, Z+1	; 0x01
    14ae:	82 81       	ldd	r24, Z+2	; 0x02
    14b0:	93 81       	ldd	r25, Z+3	; 0x03
    14b2:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	6c f5       	brge	.+90     	; 0x1514 <Command+0x314>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    14ba:	8e 01       	movw	r16, r28
    14bc:	04 58       	subi	r16, 0x84	; 132
    14be:	1f 4f       	sbci	r17, 0xFF	; 255
    14c0:	ce 01       	movw	r24, r28
    14c2:	87 59       	subi	r24, 0x97	; 151
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	fc 01       	movw	r30, r24
    14c8:	60 81       	ld	r22, Z
    14ca:	71 81       	ldd	r23, Z+1	; 0x01
    14cc:	82 81       	ldd	r24, Z+2	; 0x02
    14ce:	93 81       	ldd	r25, Z+3	; 0x03
    14d0:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	f8 01       	movw	r30, r16
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	80 83       	st	Z, r24
    14de:	ce 01       	movw	r24, r28
    14e0:	82 58       	subi	r24, 0x82	; 130
    14e2:	9f 4f       	sbci	r25, 0xFF	; 255
    14e4:	9e 01       	movw	r18, r28
    14e6:	24 58       	subi	r18, 0x84	; 132
    14e8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ea:	f9 01       	movw	r30, r18
    14ec:	20 81       	ld	r18, Z
    14ee:	31 81       	ldd	r19, Z+1	; 0x01
    14f0:	fc 01       	movw	r30, r24
    14f2:	31 83       	std	Z+1, r19	; 0x01
    14f4:	20 83       	st	Z, r18
    14f6:	ce 01       	movw	r24, r28
    14f8:	82 58       	subi	r24, 0x82	; 130
    14fa:	9f 4f       	sbci	r25, 0xFF	; 255
    14fc:	fc 01       	movw	r30, r24
    14fe:	80 81       	ld	r24, Z
    1500:	91 81       	ldd	r25, Z+1	; 0x01
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <Command+0x302>
    1506:	9e 01       	movw	r18, r28
    1508:	22 58       	subi	r18, 0x82	; 130
    150a:	3f 4f       	sbci	r19, 0xFF	; 255
    150c:	f9 01       	movw	r30, r18
    150e:	91 83       	std	Z+1, r25	; 0x01
    1510:	80 83       	st	Z, r24
    1512:	28 c0       	rjmp	.+80     	; 0x1564 <Command+0x364>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1514:	8e 01       	movw	r16, r28
    1516:	03 59       	subi	r16, 0x93	; 147
    1518:	1f 4f       	sbci	r17, 0xFF	; 255
    151a:	ce 01       	movw	r24, r28
    151c:	8b 59       	subi	r24, 0x9B	; 155
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	fc 01       	movw	r30, r24
    1522:	60 81       	ld	r22, Z
    1524:	71 81       	ldd	r23, Z+1	; 0x01
    1526:	82 81       	ldd	r24, Z+2	; 0x02
    1528:	93 81       	ldd	r25, Z+3	; 0x03
    152a:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	f8 01       	movw	r30, r16
    1534:	80 83       	st	Z, r24
    1536:	ce 01       	movw	r24, r28
    1538:	80 58       	subi	r24, 0x80	; 128
    153a:	9f 4f       	sbci	r25, 0xFF	; 255
    153c:	9e 01       	movw	r18, r28
    153e:	23 59       	subi	r18, 0x93	; 147
    1540:	3f 4f       	sbci	r19, 0xFF	; 255
    1542:	f9 01       	movw	r30, r18
    1544:	20 81       	ld	r18, Z
    1546:	fc 01       	movw	r30, r24
    1548:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    154a:	ce 01       	movw	r24, r28
    154c:	80 58       	subi	r24, 0x80	; 128
    154e:	9f 4f       	sbci	r25, 0xFF	; 255
    1550:	fc 01       	movw	r30, r24
    1552:	80 81       	ld	r24, Z
    1554:	28 2f       	mov	r18, r24
    1556:	2a 95       	dec	r18
    1558:	f1 f7       	brne	.-4      	; 0x1556 <Command+0x356>
    155a:	ce 01       	movw	r24, r28
    155c:	80 58       	subi	r24, 0x80	; 128
    155e:	9f 4f       	sbci	r25, 0xFF	; 255
    1560:	fc 01       	movw	r30, r24
    1562:	20 83       	st	Z, r18

	_delay_us(1);
	ENH; // E = 1
    1564:	85 e3       	ldi	r24, 0x35	; 53
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	25 e3       	ldi	r18, 0x35	; 53
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	f9 01       	movw	r30, r18
    156e:	20 81       	ld	r18, Z
    1570:	24 60       	ori	r18, 0x04	; 4
    1572:	fc 01       	movw	r30, r24
    1574:	20 83       	st	Z, r18
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	a0 e8       	ldi	r26, 0x80	; 128
    157c:	bf e3       	ldi	r27, 0x3F	; 63
    157e:	8d 83       	std	Y+5, r24	; 0x05
    1580:	9e 83       	std	Y+6, r25	; 0x06
    1582:	af 83       	std	Y+7, r26	; 0x07
    1584:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1586:	8e 01       	movw	r16, r28
    1588:	07 5b       	subi	r16, 0xB7	; 183
    158a:	1f 4f       	sbci	r17, 0xFF	; 255
    158c:	2b ea       	ldi	r18, 0xAB	; 171
    158e:	3a ea       	ldi	r19, 0xAA	; 170
    1590:	4a ea       	ldi	r20, 0xAA	; 170
    1592:	50 e4       	ldi	r21, 0x40	; 64
    1594:	6d 81       	ldd	r22, Y+5	; 0x05
    1596:	7e 81       	ldd	r23, Y+6	; 0x06
    1598:	8f 81       	ldd	r24, Y+7	; 0x07
    159a:	98 85       	ldd	r25, Y+8	; 0x08
    159c:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	f8 01       	movw	r30, r16
    15a6:	80 83       	st	Z, r24
    15a8:	91 83       	std	Z+1, r25	; 0x01
    15aa:	a2 83       	std	Z+2, r26	; 0x02
    15ac:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    15ae:	8e 01       	movw	r16, r28
    15b0:	03 5b       	subi	r16, 0xB3	; 179
    15b2:	1f 4f       	sbci	r17, 0xFF	; 255
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e8       	ldi	r20, 0x80	; 128
    15ba:	50 e4       	ldi	r21, 0x40	; 64
    15bc:	6d 81       	ldd	r22, Y+5	; 0x05
    15be:	7e 81       	ldd	r23, Y+6	; 0x06
    15c0:	8f 81       	ldd	r24, Y+7	; 0x07
    15c2:	98 85       	ldd	r25, Y+8	; 0x08
    15c4:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	f8 01       	movw	r30, r16
    15ce:	80 83       	st	Z, r24
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	a2 83       	std	Z+2, r26	; 0x02
    15d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15d6:	ce 01       	movw	r24, r28
    15d8:	87 5b       	subi	r24, 0xB7	; 183
    15da:	9f 4f       	sbci	r25, 0xFF	; 255
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e8       	ldi	r20, 0x80	; 128
    15e2:	5f e3       	ldi	r21, 0x3F	; 63
    15e4:	fc 01       	movw	r30, r24
    15e6:	60 81       	ld	r22, Z
    15e8:	71 81       	ldd	r23, Z+1	; 0x01
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__cmpsf2>
    15f2:	88 23       	and	r24, r24
    15f4:	3c f4       	brge	.+14     	; 0x1604 <Command+0x404>
		__ticks = 1;
    15f6:	ce 01       	movw	r24, r28
    15f8:	8f 5a       	subi	r24, 0xAF	; 175
    15fa:	9f 4f       	sbci	r25, 0xFF	; 255
    15fc:	21 e0       	ldi	r18, 0x01	; 1
    15fe:	fc 01       	movw	r30, r24
    1600:	20 83       	st	Z, r18
    1602:	2c c1       	rjmp	.+600    	; 0x185c <Command+0x65c>
	else if (__tmp2 > 65535)
    1604:	ce 01       	movw	r24, r28
    1606:	83 5b       	subi	r24, 0xB3	; 179
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	3f ef       	ldi	r19, 0xFF	; 255
    160e:	4f e7       	ldi	r20, 0x7F	; 127
    1610:	57 e4       	ldi	r21, 0x47	; 71
    1612:	fc 01       	movw	r30, r24
    1614:	60 81       	ld	r22, Z
    1616:	71 81       	ldd	r23, Z+1	; 0x01
    1618:	82 81       	ldd	r24, Z+2	; 0x02
    161a:	93 81       	ldd	r25, Z+3	; 0x03
    161c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
    1620:	18 16       	cp	r1, r24
    1622:	0c f0       	brlt	.+2      	; 0x1626 <Command+0x426>
    1624:	cd c0       	rjmp	.+410    	; 0x17c0 <Command+0x5c0>
	{
		_delay_ms(__us / 1000.0);
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	4a e7       	ldi	r20, 0x7A	; 122
    162c:	54 e4       	ldi	r21, 0x44	; 68
    162e:	6d 81       	ldd	r22, Y+5	; 0x05
    1630:	7e 81       	ldd	r23, Y+6	; 0x06
    1632:	8f 81       	ldd	r24, Y+7	; 0x07
    1634:	98 85       	ldd	r25, Y+8	; 0x08
    1636:	0e 94 76 14 	call	0x28ec	; 0x28ec <__divsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	9e 01       	movw	r18, r28
    1640:	2e 5a       	subi	r18, 0xAE	; 174
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	f9 01       	movw	r30, r18
    1646:	80 83       	st	Z, r24
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	a2 83       	std	Z+2, r26	; 0x02
    164c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    164e:	8e 01       	movw	r16, r28
    1650:	0a 5a       	subi	r16, 0xAA	; 170
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	ce 01       	movw	r24, r28
    1656:	8e 5a       	subi	r24, 0xAE	; 174
    1658:	9f 4f       	sbci	r25, 0xFF	; 255
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	4a e7       	ldi	r20, 0x7A	; 122
    1660:	55 e4       	ldi	r21, 0x45	; 69
    1662:	fc 01       	movw	r30, r24
    1664:	60 81       	ld	r22, Z
    1666:	71 81       	ldd	r23, Z+1	; 0x01
    1668:	82 81       	ldd	r24, Z+2	; 0x02
    166a:	93 81       	ldd	r25, Z+3	; 0x03
    166c:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	f8 01       	movw	r30, r16
    1676:	80 83       	st	Z, r24
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	a2 83       	std	Z+2, r26	; 0x02
    167c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    167e:	ce 01       	movw	r24, r28
    1680:	8a 5a       	subi	r24, 0xAA	; 170
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e8       	ldi	r20, 0x80	; 128
    168a:	5f e3       	ldi	r21, 0x3F	; 63
    168c:	fc 01       	movw	r30, r24
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__cmpsf2>
    169a:	88 23       	and	r24, r24
    169c:	4c f4       	brge	.+18     	; 0x16b0 <Command+0x4b0>
		__ticks = 1;
    169e:	ce 01       	movw	r24, r28
    16a0:	86 5a       	subi	r24, 0xA6	; 166
    16a2:	9f 4f       	sbci	r25, 0xFF	; 255
    16a4:	21 e0       	ldi	r18, 0x01	; 1
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	fc 01       	movw	r30, r24
    16aa:	31 83       	std	Z+1, r19	; 0x01
    16ac:	20 83       	st	Z, r18
    16ae:	6d c0       	rjmp	.+218    	; 0x178a <Command+0x58a>
	else if (__tmp > 65535)
    16b0:	ce 01       	movw	r24, r28
    16b2:	8a 5a       	subi	r24, 0xAA	; 170
    16b4:	9f 4f       	sbci	r25, 0xFF	; 255
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	3f ef       	ldi	r19, 0xFF	; 255
    16ba:	4f e7       	ldi	r20, 0x7F	; 127
    16bc:	57 e4       	ldi	r21, 0x47	; 71
    16be:	fc 01       	movw	r30, r24
    16c0:	60 81       	ld	r22, Z
    16c2:	71 81       	ldd	r23, Z+1	; 0x01
    16c4:	82 81       	ldd	r24, Z+2	; 0x02
    16c6:	93 81       	ldd	r25, Z+3	; 0x03
    16c8:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
    16cc:	18 16       	cp	r1, r24
    16ce:	0c f0       	brlt	.+2      	; 0x16d2 <Command+0x4d2>
    16d0:	4a c0       	rjmp	.+148    	; 0x1766 <Command+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d2:	ce 01       	movw	r24, r28
    16d4:	8e 5a       	subi	r24, 0xAE	; 174
    16d6:	9f 4f       	sbci	r25, 0xFF	; 255
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e2       	ldi	r20, 0x20	; 32
    16de:	51 e4       	ldi	r21, 0x41	; 65
    16e0:	fc 01       	movw	r30, r24
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	93 81       	ldd	r25, Z+3	; 0x03
    16ea:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	8e 01       	movw	r16, r28
    16f4:	06 5a       	subi	r16, 0xA6	; 166
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	f8 01       	movw	r30, r16
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	80 83       	st	Z, r24
    170a:	24 c0       	rjmp	.+72     	; 0x1754 <Command+0x554>
    170c:	ce 01       	movw	r24, r28
    170e:	84 5a       	subi	r24, 0xA4	; 164
    1710:	9f 4f       	sbci	r25, 0xFF	; 255
    1712:	20 e9       	ldi	r18, 0x90	; 144
    1714:	31 e0       	ldi	r19, 0x01	; 1
    1716:	fc 01       	movw	r30, r24
    1718:	31 83       	std	Z+1, r19	; 0x01
    171a:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    171c:	ce 01       	movw	r24, r28
    171e:	84 5a       	subi	r24, 0xA4	; 164
    1720:	9f 4f       	sbci	r25, 0xFF	; 255
    1722:	fc 01       	movw	r30, r24
    1724:	80 81       	ld	r24, Z
    1726:	91 81       	ldd	r25, Z+1	; 0x01
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <Command+0x528>
    172c:	9e 01       	movw	r18, r28
    172e:	24 5a       	subi	r18, 0xA4	; 164
    1730:	3f 4f       	sbci	r19, 0xFF	; 255
    1732:	f9 01       	movw	r30, r18
    1734:	91 83       	std	Z+1, r25	; 0x01
    1736:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1738:	ce 01       	movw	r24, r28
    173a:	86 5a       	subi	r24, 0xA6	; 166
    173c:	9f 4f       	sbci	r25, 0xFF	; 255
    173e:	9e 01       	movw	r18, r28
    1740:	26 5a       	subi	r18, 0xA6	; 166
    1742:	3f 4f       	sbci	r19, 0xFF	; 255
    1744:	f9 01       	movw	r30, r18
    1746:	20 81       	ld	r18, Z
    1748:	31 81       	ldd	r19, Z+1	; 0x01
    174a:	21 50       	subi	r18, 0x01	; 1
    174c:	31 09       	sbc	r19, r1
    174e:	fc 01       	movw	r30, r24
    1750:	31 83       	std	Z+1, r19	; 0x01
    1752:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1754:	ce 01       	movw	r24, r28
    1756:	86 5a       	subi	r24, 0xA6	; 166
    1758:	9f 4f       	sbci	r25, 0xFF	; 255
    175a:	fc 01       	movw	r30, r24
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01
    1760:	89 2b       	or	r24, r25
    1762:	a1 f6       	brne	.-88     	; 0x170c <Command+0x50c>
    1764:	7b c0       	rjmp	.+246    	; 0x185c <Command+0x65c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1766:	8e 01       	movw	r16, r28
    1768:	06 5a       	subi	r16, 0xA6	; 166
    176a:	1f 4f       	sbci	r17, 0xFF	; 255
    176c:	ce 01       	movw	r24, r28
    176e:	8a 5a       	subi	r24, 0xAA	; 170
    1770:	9f 4f       	sbci	r25, 0xFF	; 255
    1772:	fc 01       	movw	r30, r24
    1774:	60 81       	ld	r22, Z
    1776:	71 81       	ldd	r23, Z+1	; 0x01
    1778:	82 81       	ldd	r24, Z+2	; 0x02
    177a:	93 81       	ldd	r25, Z+3	; 0x03
    177c:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	f8 01       	movw	r30, r16
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	80 83       	st	Z, r24
    178a:	ce 01       	movw	r24, r28
    178c:	82 5a       	subi	r24, 0xA2	; 162
    178e:	9f 4f       	sbci	r25, 0xFF	; 255
    1790:	9e 01       	movw	r18, r28
    1792:	26 5a       	subi	r18, 0xA6	; 166
    1794:	3f 4f       	sbci	r19, 0xFF	; 255
    1796:	f9 01       	movw	r30, r18
    1798:	20 81       	ld	r18, Z
    179a:	31 81       	ldd	r19, Z+1	; 0x01
    179c:	fc 01       	movw	r30, r24
    179e:	31 83       	std	Z+1, r19	; 0x01
    17a0:	20 83       	st	Z, r18
    17a2:	ce 01       	movw	r24, r28
    17a4:	82 5a       	subi	r24, 0xA2	; 162
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	fc 01       	movw	r30, r24
    17aa:	80 81       	ld	r24, Z
    17ac:	91 81       	ldd	r25, Z+1	; 0x01
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <Command+0x5ae>
    17b2:	9e 01       	movw	r18, r28
    17b4:	22 5a       	subi	r18, 0xA2	; 162
    17b6:	3f 4f       	sbci	r19, 0xFF	; 255
    17b8:	f9 01       	movw	r30, r18
    17ba:	91 83       	std	Z+1, r25	; 0x01
    17bc:	80 83       	st	Z, r24
    17be:	4e c0       	rjmp	.+156    	; 0x185c <Command+0x65c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    17c0:	ce 01       	movw	r24, r28
    17c2:	87 5b       	subi	r24, 0xB7	; 183
    17c4:	9f 4f       	sbci	r25, 0xFF	; 255
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	4f e7       	ldi	r20, 0x7F	; 127
    17cc:	53 e4       	ldi	r21, 0x43	; 67
    17ce:	fc 01       	movw	r30, r24
    17d0:	60 81       	ld	r22, Z
    17d2:	71 81       	ldd	r23, Z+1	; 0x01
    17d4:	82 81       	ldd	r24, Z+2	; 0x02
    17d6:	93 81       	ldd	r25, Z+3	; 0x03
    17d8:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
    17dc:	18 16       	cp	r1, r24
    17de:	6c f5       	brge	.+90     	; 0x183a <Command+0x63a>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    17e0:	8e 01       	movw	r16, r28
    17e2:	00 5a       	subi	r16, 0xA0	; 160
    17e4:	1f 4f       	sbci	r17, 0xFF	; 255
    17e6:	ce 01       	movw	r24, r28
    17e8:	83 5b       	subi	r24, 0xB3	; 179
    17ea:	9f 4f       	sbci	r25, 0xFF	; 255
    17ec:	fc 01       	movw	r30, r24
    17ee:	60 81       	ld	r22, Z
    17f0:	71 81       	ldd	r23, Z+1	; 0x01
    17f2:	82 81       	ldd	r24, Z+2	; 0x02
    17f4:	93 81       	ldd	r25, Z+3	; 0x03
    17f6:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	f8 01       	movw	r30, r16
    1800:	91 83       	std	Z+1, r25	; 0x01
    1802:	80 83       	st	Z, r24
    1804:	ce 01       	movw	r24, r28
    1806:	8e 59       	subi	r24, 0x9E	; 158
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
    180a:	9e 01       	movw	r18, r28
    180c:	20 5a       	subi	r18, 0xA0	; 160
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	f9 01       	movw	r30, r18
    1812:	20 81       	ld	r18, Z
    1814:	31 81       	ldd	r19, Z+1	; 0x01
    1816:	fc 01       	movw	r30, r24
    1818:	31 83       	std	Z+1, r19	; 0x01
    181a:	20 83       	st	Z, r18
    181c:	ce 01       	movw	r24, r28
    181e:	8e 59       	subi	r24, 0x9E	; 158
    1820:	9f 4f       	sbci	r25, 0xFF	; 255
    1822:	fc 01       	movw	r30, r24
    1824:	80 81       	ld	r24, Z
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <Command+0x628>
    182c:	9e 01       	movw	r18, r28
    182e:	2e 59       	subi	r18, 0x9E	; 158
    1830:	3f 4f       	sbci	r19, 0xFF	; 255
    1832:	f9 01       	movw	r30, r18
    1834:	91 83       	std	Z+1, r25	; 0x01
    1836:	80 83       	st	Z, r24
    1838:	28 c0       	rjmp	.+80     	; 0x188a <Command+0x68a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    183a:	8e 01       	movw	r16, r28
    183c:	0f 5a       	subi	r16, 0xAF	; 175
    183e:	1f 4f       	sbci	r17, 0xFF	; 255
    1840:	ce 01       	movw	r24, r28
    1842:	87 5b       	subi	r24, 0xB7	; 183
    1844:	9f 4f       	sbci	r25, 0xFF	; 255
    1846:	fc 01       	movw	r30, r24
    1848:	60 81       	ld	r22, Z
    184a:	71 81       	ldd	r23, Z+1	; 0x01
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	93 81       	ldd	r25, Z+3	; 0x03
    1850:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	f8 01       	movw	r30, r16
    185a:	80 83       	st	Z, r24
    185c:	ce 01       	movw	r24, r28
    185e:	8c 59       	subi	r24, 0x9C	; 156
    1860:	9f 4f       	sbci	r25, 0xFF	; 255
    1862:	9e 01       	movw	r18, r28
    1864:	2f 5a       	subi	r18, 0xAF	; 175
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	f9 01       	movw	r30, r18
    186a:	20 81       	ld	r18, Z
    186c:	fc 01       	movw	r30, r24
    186e:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1870:	ce 01       	movw	r24, r28
    1872:	8c 59       	subi	r24, 0x9C	; 156
    1874:	9f 4f       	sbci	r25, 0xFF	; 255
    1876:	fc 01       	movw	r30, r24
    1878:	80 81       	ld	r24, Z
    187a:	28 2f       	mov	r18, r24
    187c:	2a 95       	dec	r18
    187e:	f1 f7       	brne	.-4      	; 0x187c <Command+0x67c>
    1880:	ce 01       	movw	r24, r28
    1882:	8c 59       	subi	r24, 0x9C	; 156
    1884:	9f 4f       	sbci	r25, 0xFF	; 255
    1886:	fc 01       	movw	r30, r24
    1888:	20 83       	st	Z, r18

	_delay_us(1);
	ENL; // E = 0
    188a:	85 e3       	ldi	r24, 0x35	; 53
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	25 e3       	ldi	r18, 0x35	; 53
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	f9 01       	movw	r30, r18
    1894:	20 81       	ld	r18, Z
    1896:	2b 7f       	andi	r18, 0xFB	; 251
    1898:	fc 01       	movw	r30, r24
    189a:	20 83       	st	Z, r18

	// 인스트럭션 하위 4비트
	PORTC = 0x00; // RS=RW=0
    189c:	85 e3       	ldi	r24, 0x35	; 53
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	fc 01       	movw	r30, r24
    18a2:	10 82       	st	Z, r1
	PORTC |= (byte << 4); // 명령어 하위 4비트
    18a4:	85 e3       	ldi	r24, 0x35	; 53
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	25 e3       	ldi	r18, 0x35	; 53
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	f9 01       	movw	r30, r18
    18ae:	20 81       	ld	r18, Z
    18b0:	42 2f       	mov	r20, r18
    18b2:	9e 01       	movw	r18, r28
    18b4:	2f 57       	subi	r18, 0x7F	; 127
    18b6:	3f 4f       	sbci	r19, 0xFF	; 255
    18b8:	f9 01       	movw	r30, r18
    18ba:	20 81       	ld	r18, Z
    18bc:	22 2f       	mov	r18, r18
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	22 95       	swap	r18
    18c2:	32 95       	swap	r19
    18c4:	30 7f       	andi	r19, 0xF0	; 240
    18c6:	32 27       	eor	r19, r18
    18c8:	20 7f       	andi	r18, 0xF0	; 240
    18ca:	32 27       	eor	r19, r18
    18cc:	24 2b       	or	r18, r20
    18ce:	fc 01       	movw	r30, r24
    18d0:	20 83       	st	Z, r18
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	a0 e8       	ldi	r26, 0x80	; 128
    18d8:	bf e3       	ldi	r27, 0x3F	; 63
    18da:	89 87       	std	Y+9, r24	; 0x09
    18dc:	9a 87       	std	Y+10, r25	; 0x0a
    18de:	ab 87       	std	Y+11, r26	; 0x0b
    18e0:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    18e2:	2b ea       	ldi	r18, 0xAB	; 171
    18e4:	3a ea       	ldi	r19, 0xAA	; 170
    18e6:	4a ea       	ldi	r20, 0xAA	; 170
    18e8:	50 e4       	ldi	r21, 0x40	; 64
    18ea:	69 85       	ldd	r22, Y+9	; 0x09
    18ec:	7a 85       	ldd	r23, Y+10	; 0x0a
    18ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    18f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    18f2:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	8d a7       	std	Y+45, r24	; 0x2d
    18fc:	9e a7       	std	Y+46, r25	; 0x2e
    18fe:	af a7       	std	Y+47, r26	; 0x2f
    1900:	b8 ab       	std	Y+48, r27	; 0x30
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e8       	ldi	r20, 0x80	; 128
    1908:	50 e4       	ldi	r21, 0x40	; 64
    190a:	69 85       	ldd	r22, Y+9	; 0x09
    190c:	7a 85       	ldd	r23, Y+10	; 0x0a
    190e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1910:	9c 85       	ldd	r25, Y+12	; 0x0c
    1912:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	89 ab       	std	Y+49, r24	; 0x31
    191c:	9a ab       	std	Y+50, r25	; 0x32
    191e:	ab ab       	std	Y+51, r26	; 0x33
    1920:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e8       	ldi	r20, 0x80	; 128
    1928:	5f e3       	ldi	r21, 0x3F	; 63
    192a:	6d a5       	ldd	r22, Y+45	; 0x2d
    192c:	7e a5       	ldd	r23, Y+46	; 0x2e
    192e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1930:	98 a9       	ldd	r25, Y+48	; 0x30
    1932:	d8 d7       	rcall	.+4016   	; 0x28e4 <__cmpsf2>
    1934:	88 23       	and	r24, r24
    1936:	1c f4       	brge	.+6      	; 0x193e <Command+0x73e>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	8d ab       	std	Y+53, r24	; 0x35
    193c:	d8 c0       	rjmp	.+432    	; 0x1aee <Command+0x8ee>
	else if (__tmp2 > 65535)
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	3f ef       	ldi	r19, 0xFF	; 255
    1942:	4f e7       	ldi	r20, 0x7F	; 127
    1944:	57 e4       	ldi	r21, 0x47	; 71
    1946:	69 a9       	ldd	r22, Y+49	; 0x31
    1948:	7a a9       	ldd	r23, Y+50	; 0x32
    194a:	8b a9       	ldd	r24, Y+51	; 0x33
    194c:	9c a9       	ldd	r25, Y+52	; 0x34
    194e:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
    1952:	18 16       	cp	r1, r24
    1954:	0c f0       	brlt	.+2      	; 0x1958 <Command+0x758>
    1956:	8f c0       	rjmp	.+286    	; 0x1a76 <Command+0x876>
	{
		_delay_ms(__us / 1000.0);
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	4a e7       	ldi	r20, 0x7A	; 122
    195e:	54 e4       	ldi	r21, 0x44	; 68
    1960:	69 85       	ldd	r22, Y+9	; 0x09
    1962:	7a 85       	ldd	r23, Y+10	; 0x0a
    1964:	8b 85       	ldd	r24, Y+11	; 0x0b
    1966:	9c 85       	ldd	r25, Y+12	; 0x0c
    1968:	c1 d7       	rcall	.+3970   	; 0x28ec <__divsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	8e ab       	std	Y+54, r24	; 0x36
    1970:	9f ab       	std	Y+55, r25	; 0x37
    1972:	a8 af       	std	Y+56, r26	; 0x38
    1974:	b9 af       	std	Y+57, r27	; 0x39

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	4a e7       	ldi	r20, 0x7A	; 122
    197c:	55 e4       	ldi	r21, 0x45	; 69
    197e:	6e a9       	ldd	r22, Y+54	; 0x36
    1980:	7f a9       	ldd	r23, Y+55	; 0x37
    1982:	88 ad       	ldd	r24, Y+56	; 0x38
    1984:	99 ad       	ldd	r25, Y+57	; 0x39
    1986:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	8a af       	std	Y+58, r24	; 0x3a
    1990:	9b af       	std	Y+59, r25	; 0x3b
    1992:	ac af       	std	Y+60, r26	; 0x3c
    1994:	bd af       	std	Y+61, r27	; 0x3d
	if (__tmp < 1.0)
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e8       	ldi	r20, 0x80	; 128
    199c:	5f e3       	ldi	r21, 0x3F	; 63
    199e:	6a ad       	ldd	r22, Y+58	; 0x3a
    19a0:	7b ad       	ldd	r23, Y+59	; 0x3b
    19a2:	8c ad       	ldd	r24, Y+60	; 0x3c
    19a4:	9d ad       	ldd	r25, Y+61	; 0x3d
    19a6:	9e d7       	rcall	.+3900   	; 0x28e4 <__cmpsf2>
    19a8:	88 23       	and	r24, r24
    19aa:	2c f4       	brge	.+10     	; 0x19b6 <Command+0x7b6>
		__ticks = 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9f af       	std	Y+63, r25	; 0x3f
    19b2:	8e af       	std	Y+62, r24	; 0x3e
    19b4:	49 c0       	rjmp	.+146    	; 0x1a48 <Command+0x848>
	else if (__tmp > 65535)
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	3f ef       	ldi	r19, 0xFF	; 255
    19ba:	4f e7       	ldi	r20, 0x7F	; 127
    19bc:	57 e4       	ldi	r21, 0x47	; 71
    19be:	6a ad       	ldd	r22, Y+58	; 0x3a
    19c0:	7b ad       	ldd	r23, Y+59	; 0x3b
    19c2:	8c ad       	ldd	r24, Y+60	; 0x3c
    19c4:	9d ad       	ldd	r25, Y+61	; 0x3d
    19c6:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
    19ca:	18 16       	cp	r1, r24
    19cc:	a4 f5       	brge	.+104    	; 0x1a36 <Command+0x836>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e2       	ldi	r20, 0x20	; 32
    19d4:	51 e4       	ldi	r21, 0x41	; 65
    19d6:	6e a9       	ldd	r22, Y+54	; 0x36
    19d8:	7f a9       	ldd	r23, Y+55	; 0x37
    19da:	88 ad       	ldd	r24, Y+56	; 0x38
    19dc:	99 ad       	ldd	r25, Y+57	; 0x39
    19de:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	bc 01       	movw	r22, r24
    19e8:	cd 01       	movw	r24, r26
    19ea:	e8 d7       	rcall	.+4048   	; 0x29bc <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9f af       	std	Y+63, r25	; 0x3f
    19f2:	8e af       	std	Y+62, r24	; 0x3e
    19f4:	1b c0       	rjmp	.+54     	; 0x1a2c <Command+0x82c>
    19f6:	ce 01       	movw	r24, r28
    19f8:	80 5c       	subi	r24, 0xC0	; 192
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	20 e9       	ldi	r18, 0x90	; 144
    19fe:	31 e0       	ldi	r19, 0x01	; 1
    1a00:	fc 01       	movw	r30, r24
    1a02:	31 83       	std	Z+1, r19	; 0x01
    1a04:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a06:	ce 01       	movw	r24, r28
    1a08:	80 5c       	subi	r24, 0xC0	; 192
    1a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	80 81       	ld	r24, Z
    1a10:	91 81       	ldd	r25, Z+1	; 0x01
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <Command+0x812>
    1a16:	9e 01       	movw	r18, r28
    1a18:	20 5c       	subi	r18, 0xC0	; 192
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	f9 01       	movw	r30, r18
    1a1e:	91 83       	std	Z+1, r25	; 0x01
    1a20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a22:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a24:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	9f af       	std	Y+63, r25	; 0x3f
    1a2a:	8e af       	std	Y+62, r24	; 0x3e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a30:	89 2b       	or	r24, r25
    1a32:	09 f7       	brne	.-62     	; 0x19f6 <Command+0x7f6>
    1a34:	5c c0       	rjmp	.+184    	; 0x1aee <Command+0x8ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a36:	6a ad       	ldd	r22, Y+58	; 0x3a
    1a38:	7b ad       	ldd	r23, Y+59	; 0x3b
    1a3a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a3c:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a3e:	be d7       	rcall	.+3964   	; 0x29bc <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9f af       	std	Y+63, r25	; 0x3f
    1a46:	8e af       	std	Y+62, r24	; 0x3e
    1a48:	ce 01       	movw	r24, r28
    1a4a:	8e 5b       	subi	r24, 0xBE	; 190
    1a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a50:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a52:	fc 01       	movw	r30, r24
    1a54:	31 83       	std	Z+1, r19	; 0x01
    1a56:	20 83       	st	Z, r18
    1a58:	ce 01       	movw	r24, r28
    1a5a:	8e 5b       	subi	r24, 0xBE	; 190
    1a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5e:	fc 01       	movw	r30, r24
    1a60:	80 81       	ld	r24, Z
    1a62:	91 81       	ldd	r25, Z+1	; 0x01
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <Command+0x864>
    1a68:	9e 01       	movw	r18, r28
    1a6a:	2e 5b       	subi	r18, 0xBE	; 190
    1a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6e:	f9 01       	movw	r30, r18
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	80 83       	st	Z, r24
    1a74:	3c c0       	rjmp	.+120    	; 0x1aee <Command+0x8ee>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	4f e7       	ldi	r20, 0x7F	; 127
    1a7c:	53 e4       	ldi	r21, 0x43	; 67
    1a7e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a80:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a84:	98 a9       	ldd	r25, Y+48	; 0x30
    1a86:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__gesf2>
    1a8a:	18 16       	cp	r1, r24
    1a8c:	44 f5       	brge	.+80     	; 0x1ade <Command+0x8de>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1a8e:	8e 01       	movw	r16, r28
    1a90:	0c 5b       	subi	r16, 0xBC	; 188
    1a92:	1f 4f       	sbci	r17, 0xFF	; 255
    1a94:	69 a9       	ldd	r22, Y+49	; 0x31
    1a96:	7a a9       	ldd	r23, Y+50	; 0x32
    1a98:	8b a9       	ldd	r24, Y+51	; 0x33
    1a9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9c:	8f d7       	rcall	.+3870   	; 0x29bc <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	f8 01       	movw	r30, r16
    1aa4:	91 83       	std	Z+1, r25	; 0x01
    1aa6:	80 83       	st	Z, r24
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	8a 5b       	subi	r24, 0xBA	; 186
    1aac:	9f 4f       	sbci	r25, 0xFF	; 255
    1aae:	9e 01       	movw	r18, r28
    1ab0:	2c 5b       	subi	r18, 0xBC	; 188
    1ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab4:	f9 01       	movw	r30, r18
    1ab6:	20 81       	ld	r18, Z
    1ab8:	31 81       	ldd	r19, Z+1	; 0x01
    1aba:	fc 01       	movw	r30, r24
    1abc:	31 83       	std	Z+1, r19	; 0x01
    1abe:	20 83       	st	Z, r18
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	8a 5b       	subi	r24, 0xBA	; 186
    1ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <Command+0x8cc>
    1ad0:	9e 01       	movw	r18, r28
    1ad2:	2a 5b       	subi	r18, 0xBA	; 186
    1ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad6:	f9 01       	movw	r30, r18
    1ad8:	91 83       	std	Z+1, r25	; 0x01
    1ada:	80 83       	st	Z, r24
    1adc:	1b c0       	rjmp	.+54     	; 0x1b14 <Command+0x914>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ade:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ae0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ae2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae6:	6a d7       	rcall	.+3796   	; 0x29bc <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	8d ab       	std	Y+53, r24	; 0x35
    1aee:	ce 01       	movw	r24, r28
    1af0:	88 5b       	subi	r24, 0xB8	; 184
    1af2:	9f 4f       	sbci	r25, 0xFF	; 255
    1af4:	2d a9       	ldd	r18, Y+53	; 0x35
    1af6:	fc 01       	movw	r30, r24
    1af8:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1afa:	ce 01       	movw	r24, r28
    1afc:	88 5b       	subi	r24, 0xB8	; 184
    1afe:	9f 4f       	sbci	r25, 0xFF	; 255
    1b00:	fc 01       	movw	r30, r24
    1b02:	80 81       	ld	r24, Z
    1b04:	28 2f       	mov	r18, r24
    1b06:	2a 95       	dec	r18
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <Command+0x906>
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	88 5b       	subi	r24, 0xB8	; 184
    1b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b10:	fc 01       	movw	r30, r24
    1b12:	20 83       	st	Z, r18

	_delay_us(1);
	ENH; // E = 1
    1b14:	85 e3       	ldi	r24, 0x35	; 53
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	25 e3       	ldi	r18, 0x35	; 53
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	f9 01       	movw	r30, r18
    1b1e:	20 81       	ld	r18, Z
    1b20:	24 60       	ori	r18, 0x04	; 4
    1b22:	fc 01       	movw	r30, r24
    1b24:	20 83       	st	Z, r18
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a0 e8       	ldi	r26, 0x80	; 128
    1b2c:	bf e3       	ldi	r27, 0x3F	; 63
    1b2e:	8d 87       	std	Y+13, r24	; 0x0d
    1b30:	9e 87       	std	Y+14, r25	; 0x0e
    1b32:	af 87       	std	Y+15, r26	; 0x0f
    1b34:	b8 8b       	std	Y+16, r27	; 0x10
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1b36:	2b ea       	ldi	r18, 0xAB	; 171
    1b38:	3a ea       	ldi	r19, 0xAA	; 170
    1b3a:	4a ea       	ldi	r20, 0xAA	; 170
    1b3c:	50 e4       	ldi	r21, 0x40	; 64
    1b3e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b40:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b44:	98 89       	ldd	r25, Y+16	; 0x10
    1b46:	df d7       	rcall	.+4030   	; 0x2b06 <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	89 8b       	std	Y+17, r24	; 0x11
    1b4e:	9a 8b       	std	Y+18, r25	; 0x12
    1b50:	ab 8b       	std	Y+19, r26	; 0x13
    1b52:	bc 8b       	std	Y+20, r27	; 0x14
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e8       	ldi	r20, 0x80	; 128
    1b5a:	50 e4       	ldi	r21, 0x40	; 64
    1b5c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b5e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b62:	98 89       	ldd	r25, Y+16	; 0x10
    1b64:	d0 d7       	rcall	.+4000   	; 0x2b06 <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	8d 8b       	std	Y+21, r24	; 0x15
    1b6c:	9e 8b       	std	Y+22, r25	; 0x16
    1b6e:	af 8b       	std	Y+23, r26	; 0x17
    1b70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e8       	ldi	r20, 0x80	; 128
    1b78:	5f e3       	ldi	r21, 0x3F	; 63
    1b7a:	69 89       	ldd	r22, Y+17	; 0x11
    1b7c:	7a 89       	ldd	r23, Y+18	; 0x12
    1b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b80:	9c 89       	ldd	r25, Y+20	; 0x14
    1b82:	b0 d6       	rcall	.+3424   	; 0x28e4 <__cmpsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	1c f4       	brge	.+6      	; 0x1b8e <Command+0x98e>
		__ticks = 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	89 8f       	std	Y+25, r24	; 0x19
	else if (__tmp2 > 65535)
    1b8c:	a7 c0       	rjmp	.+334    	; 0x1cdc <Command+0xadc>
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	3f ef       	ldi	r19, 0xFF	; 255
    1b92:	4f e7       	ldi	r20, 0x7F	; 127
    1b94:	57 e4       	ldi	r21, 0x47	; 71
    1b96:	6d 89       	ldd	r22, Y+21	; 0x15
    1b98:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b9e:	af d7       	rcall	.+3934   	; 0x2afe <__gesf2>
    1ba0:	18 16       	cp	r1, r24
    1ba2:	0c f0       	brlt	.+2      	; 0x1ba6 <Command+0x9a6>
    1ba4:	74 c0       	rjmp	.+232    	; 0x1c8e <Command+0xa8e>
	{
		_delay_ms(__us / 1000.0);
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	4a e7       	ldi	r20, 0x7A	; 122
    1bac:	54 e4       	ldi	r21, 0x44	; 68
    1bae:	6d 85       	ldd	r22, Y+13	; 0x0d
    1bb0:	7e 85       	ldd	r23, Y+14	; 0x0e
    1bb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb4:	98 89       	ldd	r25, Y+16	; 0x10
    1bb6:	9a d6       	rcall	.+3380   	; 0x28ec <__divsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	8a 8f       	std	Y+26, r24	; 0x1a
    1bbe:	9b 8f       	std	Y+27, r25	; 0x1b
    1bc0:	ac 8f       	std	Y+28, r26	; 0x1c
    1bc2:	bd 8f       	std	Y+29, r27	; 0x1d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	4a e7       	ldi	r20, 0x7A	; 122
    1bca:	55 e4       	ldi	r21, 0x45	; 69
    1bcc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bce:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bd0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bd2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bd4:	98 d7       	rcall	.+3888   	; 0x2b06 <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	8e 8f       	std	Y+30, r24	; 0x1e
    1bdc:	9f 8f       	std	Y+31, r25	; 0x1f
    1bde:	a8 a3       	std	Y+32, r26	; 0x20
    1be0:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e8       	ldi	r20, 0x80	; 128
    1be8:	5f e3       	ldi	r21, 0x3F	; 63
    1bea:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1bec:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1bee:	88 a1       	ldd	r24, Y+32	; 0x20
    1bf0:	99 a1       	ldd	r25, Y+33	; 0x21
    1bf2:	78 d6       	rcall	.+3312   	; 0x28e4 <__cmpsf2>
    1bf4:	88 23       	and	r24, r24
    1bf6:	2c f4       	brge	.+10     	; 0x1c02 <Command+0xa02>
		__ticks = 1;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	9b a3       	std	Y+35, r25	; 0x23
    1bfe:	8a a3       	std	Y+34, r24	; 0x22
    1c00:	3b c0       	rjmp	.+118    	; 0x1c78 <Command+0xa78>
	else if (__tmp > 65535)
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	3f ef       	ldi	r19, 0xFF	; 255
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	57 e4       	ldi	r21, 0x47	; 71
    1c0a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1c0c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1c0e:	88 a1       	ldd	r24, Y+32	; 0x20
    1c10:	99 a1       	ldd	r25, Y+33	; 0x21
    1c12:	75 d7       	rcall	.+3818   	; 0x2afe <__gesf2>
    1c14:	18 16       	cp	r1, r24
    1c16:	3c f5       	brge	.+78     	; 0x1c66 <Command+0xa66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e2       	ldi	r20, 0x20	; 32
    1c1e:	51 e4       	ldi	r21, 0x41	; 65
    1c20:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c22:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c24:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c26:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c28:	6e d7       	rcall	.+3804   	; 0x2b06 <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	c4 d6       	rcall	.+3464   	; 0x29bc <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	9b a3       	std	Y+35, r25	; 0x23
    1c3a:	8a a3       	std	Y+34, r24	; 0x22
    1c3c:	0f c0       	rjmp	.+30     	; 0x1c5c <Command+0xa5c>
    1c3e:	80 e9       	ldi	r24, 0x90	; 144
    1c40:	91 e0       	ldi	r25, 0x01	; 1
    1c42:	9d a3       	std	Y+37, r25	; 0x25
    1c44:	8c a3       	std	Y+36, r24	; 0x24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c46:	8c a1       	ldd	r24, Y+36	; 0x24
    1c48:	9d a1       	ldd	r25, Y+37	; 0x25
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <Command+0xa4a>
    1c4e:	9d a3       	std	Y+37, r25	; 0x25
    1c50:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c52:	8a a1       	ldd	r24, Y+34	; 0x22
    1c54:	9b a1       	ldd	r25, Y+35	; 0x23
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	9b a3       	std	Y+35, r25	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	8a a3       	std	Y+34, r24	; 0x22
    1c5c:	8a a1       	ldd	r24, Y+34	; 0x22
    1c5e:	9b a1       	ldd	r25, Y+35	; 0x23
    1c60:	89 2b       	or	r24, r25
    1c62:	69 f7       	brne	.-38     	; 0x1c3e <Command+0xa3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c64:	3b c0       	rjmp	.+118    	; 0x1cdc <Command+0xadc>
    1c66:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1c68:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1c6a:	88 a1       	ldd	r24, Y+32	; 0x20
    1c6c:	99 a1       	ldd	r25, Y+33	; 0x21
    1c6e:	a6 d6       	rcall	.+3404   	; 0x29bc <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9b a3       	std	Y+35, r25	; 0x23
    1c76:	8a a3       	std	Y+34, r24	; 0x22
    1c78:	8a a1       	ldd	r24, Y+34	; 0x22
    1c7a:	9b a1       	ldd	r25, Y+35	; 0x23
    1c7c:	9f a3       	std	Y+39, r25	; 0x27
    1c7e:	8e a3       	std	Y+38, r24	; 0x26
    1c80:	8e a1       	ldd	r24, Y+38	; 0x26
    1c82:	9f a1       	ldd	r25, Y+39	; 0x27
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <Command+0xa84>
    1c88:	9f a3       	std	Y+39, r25	; 0x27
    1c8a:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1c8c:	27 c0       	rjmp	.+78     	; 0x1cdc <Command+0xadc>
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4f e7       	ldi	r20, 0x7F	; 127
    1c94:	53 e4       	ldi	r21, 0x43	; 67
    1c96:	69 89       	ldd	r22, Y+17	; 0x11
    1c98:	7a 89       	ldd	r23, Y+18	; 0x12
    1c9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9e:	2f d7       	rcall	.+3678   	; 0x2afe <__gesf2>
    1ca0:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1ca2:	a4 f4       	brge	.+40     	; 0x1ccc <Command+0xacc>
    1ca4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca8:	8f 89       	ldd	r24, Y+23	; 0x17
    1caa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cac:	87 d6       	rcall	.+3342   	; 0x29bc <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	99 a7       	std	Y+41, r25	; 0x29
    1cb4:	88 a7       	std	Y+40, r24	; 0x28
    1cb6:	88 a5       	ldd	r24, Y+40	; 0x28
    1cb8:	99 a5       	ldd	r25, Y+41	; 0x29
    1cba:	9b a7       	std	Y+43, r25	; 0x2b
    1cbc:	8a a7       	std	Y+42, r24	; 0x2a
    1cbe:	8a a5       	ldd	r24, Y+42	; 0x2a
    1cc0:	9b a5       	ldd	r25, Y+43	; 0x2b
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <Command+0xac2>
    1cc6:	9b a7       	std	Y+43, r25	; 0x2b
    1cc8:	8a a7       	std	Y+42, r24	; 0x2a
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cca:	0e c0       	rjmp	.+28     	; 0x1ce8 <Command+0xae8>
    1ccc:	69 89       	ldd	r22, Y+17	; 0x11
    1cce:	7a 89       	ldd	r23, Y+18	; 0x12
    1cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd4:	73 d6       	rcall	.+3302   	; 0x29bc <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	89 8f       	std	Y+25, r24	; 0x19
    1cdc:	89 8d       	ldd	r24, Y+25	; 0x19
    1cde:	8c a7       	std	Y+44, r24	; 0x2c
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ce0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ce2:	8a 95       	dec	r24
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <Command+0xae2>
    1ce6:	8c a7       	std	Y+44, r24	; 0x2c

	_delay_us(1);
	ENL; // E = 0
    1ce8:	85 e3       	ldi	r24, 0x35	; 53
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	25 e3       	ldi	r18, 0x35	; 53
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	f9 01       	movw	r30, r18
    1cf2:	20 81       	ld	r18, Z
    1cf4:	2b 7f       	andi	r18, 0xFB	; 251
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	20 83       	st	Z, r18
}
    1cfa:	00 00       	nop
    1cfc:	cf 57       	subi	r28, 0x7F	; 127
    1cfe:	df 4f       	sbci	r29, 0xFF	; 255
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	1f 91       	pop	r17
    1d10:	0f 91       	pop	r16
    1d12:	08 95       	ret

00001d14 <Data>:

void Data(u_char byte)
{
    1d14:	0f 93       	push	r16
    1d16:	1f 93       	push	r17
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	c1 58       	subi	r28, 0x81	; 129
    1d22:	d1 09       	sbc	r29, r1
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	de bf       	out	0x3e, r29	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	cd bf       	out	0x3d, r28	; 61
    1d2e:	9e 01       	movw	r18, r28
    1d30:	2f 57       	subi	r18, 0x7F	; 127
    1d32:	3f 4f       	sbci	r19, 0xFF	; 255
    1d34:	f9 01       	movw	r30, r18
    1d36:	80 83       	st	Z, r24
	Busy();
    1d38:	55 d5       	rcall	.+2730   	; 0x27e4 <Busy>
	// 데이터 상위 4비트
	PORTC = 0x01; // RS=1, RW=0
    1d3a:	85 e3       	ldi	r24, 0x35	; 53
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	21 e0       	ldi	r18, 0x01	; 1
    1d40:	fc 01       	movw	r30, r24
    1d42:	20 83       	st	Z, r18
	PORTC |= (byte & 0xF0); // 데이터 상위 4비트
    1d44:	85 e3       	ldi	r24, 0x35	; 53
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	25 e3       	ldi	r18, 0x35	; 53
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	f9 01       	movw	r30, r18
    1d4e:	20 81       	ld	r18, Z
    1d50:	42 2f       	mov	r20, r18
    1d52:	9e 01       	movw	r18, r28
    1d54:	2f 57       	subi	r18, 0x7F	; 127
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
    1d58:	f9 01       	movw	r30, r18
    1d5a:	20 81       	ld	r18, Z
    1d5c:	20 7f       	andi	r18, 0xF0	; 240
    1d5e:	24 2b       	or	r18, r20
    1d60:	fc 01       	movw	r30, r24
    1d62:	20 83       	st	Z, r18
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a0 e8       	ldi	r26, 0x80	; 128
    1d6a:	bf e3       	ldi	r27, 0x3F	; 63
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	ab 83       	std	Y+3, r26	; 0x03
    1d72:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1d74:	8e 01       	movw	r16, r28
    1d76:	0b 59       	subi	r16, 0x9B	; 155
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	2b ea       	ldi	r18, 0xAB	; 171
    1d7c:	3a ea       	ldi	r19, 0xAA	; 170
    1d7e:	4a ea       	ldi	r20, 0xAA	; 170
    1d80:	50 e4       	ldi	r21, 0x40	; 64
    1d82:	69 81       	ldd	r22, Y+1	; 0x01
    1d84:	7a 81       	ldd	r23, Y+2	; 0x02
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8a:	bd d6       	rcall	.+3450   	; 0x2b06 <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	f8 01       	movw	r30, r16
    1d92:	80 83       	st	Z, r24
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	a2 83       	std	Z+2, r26	; 0x02
    1d98:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1d9a:	8e 01       	movw	r16, r28
    1d9c:	07 59       	subi	r16, 0x97	; 151
    1d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	50 e4       	ldi	r21, 0x40	; 64
    1da8:	69 81       	ldd	r22, Y+1	; 0x01
    1daa:	7a 81       	ldd	r23, Y+2	; 0x02
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	9c 81       	ldd	r25, Y+4	; 0x04
    1db0:	aa d6       	rcall	.+3412   	; 0x2b06 <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	f8 01       	movw	r30, r16
    1db8:	80 83       	st	Z, r24
    1dba:	91 83       	std	Z+1, r25	; 0x01
    1dbc:	a2 83       	std	Z+2, r26	; 0x02
    1dbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	8b 59       	subi	r24, 0x9B	; 155
    1dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	5f e3       	ldi	r21, 0x3F	; 63
    1dce:	fc 01       	movw	r30, r24
    1dd0:	60 81       	ld	r22, Z
    1dd2:	71 81       	ldd	r23, Z+1	; 0x01
    1dd4:	82 81       	ldd	r24, Z+2	; 0x02
    1dd6:	93 81       	ldd	r25, Z+3	; 0x03
    1dd8:	85 d5       	rcall	.+2826   	; 0x28e4 <__cmpsf2>
    1dda:	88 23       	and	r24, r24
    1ddc:	3c f4       	brge	.+14     	; 0x1dec <Data+0xd8>
		__ticks = 1;
    1dde:	ce 01       	movw	r24, r28
    1de0:	83 59       	subi	r24, 0x93	; 147
    1de2:	9f 4f       	sbci	r25, 0xFF	; 255
    1de4:	21 e0       	ldi	r18, 0x01	; 1
    1de6:	fc 01       	movw	r30, r24
    1de8:	20 83       	st	Z, r18
    1dea:	21 c1       	rjmp	.+578    	; 0x202e <Data+0x31a>
	else if (__tmp2 > 65535)
    1dec:	ce 01       	movw	r24, r28
    1dee:	87 59       	subi	r24, 0x97	; 151
    1df0:	9f 4f       	sbci	r25, 0xFF	; 255
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	3f ef       	ldi	r19, 0xFF	; 255
    1df6:	4f e7       	ldi	r20, 0x7F	; 127
    1df8:	57 e4       	ldi	r21, 0x47	; 71
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	60 81       	ld	r22, Z
    1dfe:	71 81       	ldd	r23, Z+1	; 0x01
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	93 81       	ldd	r25, Z+3	; 0x03
    1e04:	7c d6       	rcall	.+3320   	; 0x2afe <__gesf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	0c f0       	brlt	.+2      	; 0x1e0c <Data+0xf8>
    1e0a:	c6 c0       	rjmp	.+396    	; 0x1f98 <Data+0x284>
	{
		_delay_ms(__us / 1000.0);
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	4a e7       	ldi	r20, 0x7A	; 122
    1e12:	54 e4       	ldi	r21, 0x44	; 68
    1e14:	69 81       	ldd	r22, Y+1	; 0x01
    1e16:	7a 81       	ldd	r23, Y+2	; 0x02
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	67 d5       	rcall	.+2766   	; 0x28ec <__divsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	9e 01       	movw	r18, r28
    1e24:	22 59       	subi	r18, 0x92	; 146
    1e26:	3f 4f       	sbci	r19, 0xFF	; 255
    1e28:	f9 01       	movw	r30, r18
    1e2a:	80 83       	st	Z, r24
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	a2 83       	std	Z+2, r26	; 0x02
    1e30:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e32:	8e 01       	movw	r16, r28
    1e34:	0e 58       	subi	r16, 0x8E	; 142
    1e36:	1f 4f       	sbci	r17, 0xFF	; 255
    1e38:	ce 01       	movw	r24, r28
    1e3a:	82 59       	subi	r24, 0x92	; 146
    1e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4a e7       	ldi	r20, 0x7A	; 122
    1e44:	55 e4       	ldi	r21, 0x45	; 69
    1e46:	fc 01       	movw	r30, r24
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	5a d6       	rcall	.+3252   	; 0x2b06 <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	f8 01       	movw	r30, r16
    1e58:	80 83       	st	Z, r24
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	a2 83       	std	Z+2, r26	; 0x02
    1e5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e60:	ce 01       	movw	r24, r28
    1e62:	8e 58       	subi	r24, 0x8E	; 142
    1e64:	9f 4f       	sbci	r25, 0xFF	; 255
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e8       	ldi	r20, 0x80	; 128
    1e6c:	5f e3       	ldi	r21, 0x3F	; 63
    1e6e:	fc 01       	movw	r30, r24
    1e70:	60 81       	ld	r22, Z
    1e72:	71 81       	ldd	r23, Z+1	; 0x01
    1e74:	82 81       	ldd	r24, Z+2	; 0x02
    1e76:	93 81       	ldd	r25, Z+3	; 0x03
    1e78:	35 d5       	rcall	.+2666   	; 0x28e4 <__cmpsf2>
    1e7a:	88 23       	and	r24, r24
    1e7c:	4c f4       	brge	.+18     	; 0x1e90 <Data+0x17c>
		__ticks = 1;
    1e7e:	ce 01       	movw	r24, r28
    1e80:	8a 58       	subi	r24, 0x8A	; 138
    1e82:	9f 4f       	sbci	r25, 0xFF	; 255
    1e84:	21 e0       	ldi	r18, 0x01	; 1
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	fc 01       	movw	r30, r24
    1e8a:	31 83       	std	Z+1, r19	; 0x01
    1e8c:	20 83       	st	Z, r18
    1e8e:	69 c0       	rjmp	.+210    	; 0x1f62 <Data+0x24e>
	else if (__tmp > 65535)
    1e90:	ce 01       	movw	r24, r28
    1e92:	8e 58       	subi	r24, 0x8E	; 142
    1e94:	9f 4f       	sbci	r25, 0xFF	; 255
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	57 e4       	ldi	r21, 0x47	; 71
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	60 81       	ld	r22, Z
    1ea2:	71 81       	ldd	r23, Z+1	; 0x01
    1ea4:	82 81       	ldd	r24, Z+2	; 0x02
    1ea6:	93 81       	ldd	r25, Z+3	; 0x03
    1ea8:	2a d6       	rcall	.+3156   	; 0x2afe <__gesf2>
    1eaa:	18 16       	cp	r1, r24
    1eac:	0c f0       	brlt	.+2      	; 0x1eb0 <Data+0x19c>
    1eae:	48 c0       	rjmp	.+144    	; 0x1f40 <Data+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	82 59       	subi	r24, 0x92	; 146
    1eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e2       	ldi	r20, 0x20	; 32
    1ebc:	51 e4       	ldi	r21, 0x41	; 65
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	60 81       	ld	r22, Z
    1ec2:	71 81       	ldd	r23, Z+1	; 0x01
    1ec4:	82 81       	ldd	r24, Z+2	; 0x02
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
    1ec8:	1e d6       	rcall	.+3132   	; 0x2b06 <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	8e 01       	movw	r16, r28
    1ed0:	0a 58       	subi	r16, 0x8A	; 138
    1ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	71 d5       	rcall	.+2786   	; 0x29bc <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	f8 01       	movw	r30, r16
    1ee0:	91 83       	std	Z+1, r25	; 0x01
    1ee2:	80 83       	st	Z, r24
    1ee4:	24 c0       	rjmp	.+72     	; 0x1f2e <Data+0x21a>
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	88 58       	subi	r24, 0x88	; 136
    1eea:	9f 4f       	sbci	r25, 0xFF	; 255
    1eec:	20 e9       	ldi	r18, 0x90	; 144
    1eee:	31 e0       	ldi	r19, 0x01	; 1
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	31 83       	std	Z+1, r19	; 0x01
    1ef4:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	88 58       	subi	r24, 0x88	; 136
    1efa:	9f 4f       	sbci	r25, 0xFF	; 255
    1efc:	fc 01       	movw	r30, r24
    1efe:	80 81       	ld	r24, Z
    1f00:	91 81       	ldd	r25, Z+1	; 0x01
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <Data+0x1ee>
    1f06:	9e 01       	movw	r18, r28
    1f08:	28 58       	subi	r18, 0x88	; 136
    1f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0c:	f9 01       	movw	r30, r18
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f12:	ce 01       	movw	r24, r28
    1f14:	8a 58       	subi	r24, 0x8A	; 138
    1f16:	9f 4f       	sbci	r25, 0xFF	; 255
    1f18:	9e 01       	movw	r18, r28
    1f1a:	2a 58       	subi	r18, 0x8A	; 138
    1f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1e:	f9 01       	movw	r30, r18
    1f20:	20 81       	ld	r18, Z
    1f22:	31 81       	ldd	r19, Z+1	; 0x01
    1f24:	21 50       	subi	r18, 0x01	; 1
    1f26:	31 09       	sbc	r19, r1
    1f28:	fc 01       	movw	r30, r24
    1f2a:	31 83       	std	Z+1, r19	; 0x01
    1f2c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2e:	ce 01       	movw	r24, r28
    1f30:	8a 58       	subi	r24, 0x8A	; 138
    1f32:	9f 4f       	sbci	r25, 0xFF	; 255
    1f34:	fc 01       	movw	r30, r24
    1f36:	80 81       	ld	r24, Z
    1f38:	91 81       	ldd	r25, Z+1	; 0x01
    1f3a:	89 2b       	or	r24, r25
    1f3c:	a1 f6       	brne	.-88     	; 0x1ee6 <Data+0x1d2>
    1f3e:	77 c0       	rjmp	.+238    	; 0x202e <Data+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f40:	8e 01       	movw	r16, r28
    1f42:	0a 58       	subi	r16, 0x8A	; 138
    1f44:	1f 4f       	sbci	r17, 0xFF	; 255
    1f46:	ce 01       	movw	r24, r28
    1f48:	8e 58       	subi	r24, 0x8E	; 142
    1f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	60 81       	ld	r22, Z
    1f50:	71 81       	ldd	r23, Z+1	; 0x01
    1f52:	82 81       	ldd	r24, Z+2	; 0x02
    1f54:	93 81       	ldd	r25, Z+3	; 0x03
    1f56:	32 d5       	rcall	.+2660   	; 0x29bc <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	f8 01       	movw	r30, r16
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	80 83       	st	Z, r24
    1f62:	ce 01       	movw	r24, r28
    1f64:	86 58       	subi	r24, 0x86	; 134
    1f66:	9f 4f       	sbci	r25, 0xFF	; 255
    1f68:	9e 01       	movw	r18, r28
    1f6a:	2a 58       	subi	r18, 0x8A	; 138
    1f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6e:	f9 01       	movw	r30, r18
    1f70:	20 81       	ld	r18, Z
    1f72:	31 81       	ldd	r19, Z+1	; 0x01
    1f74:	fc 01       	movw	r30, r24
    1f76:	31 83       	std	Z+1, r19	; 0x01
    1f78:	20 83       	st	Z, r18
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	86 58       	subi	r24, 0x86	; 134
    1f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f80:	fc 01       	movw	r30, r24
    1f82:	80 81       	ld	r24, Z
    1f84:	91 81       	ldd	r25, Z+1	; 0x01
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <Data+0x272>
    1f8a:	9e 01       	movw	r18, r28
    1f8c:	26 58       	subi	r18, 0x86	; 134
    1f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f90:	f9 01       	movw	r30, r18
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24
    1f96:	4b c0       	rjmp	.+150    	; 0x202e <Data+0x31a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1f98:	ce 01       	movw	r24, r28
    1f9a:	8b 59       	subi	r24, 0x9B	; 155
    1f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	4f e7       	ldi	r20, 0x7F	; 127
    1fa4:	53 e4       	ldi	r21, 0x43	; 67
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	60 81       	ld	r22, Z
    1faa:	71 81       	ldd	r23, Z+1	; 0x01
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	a6 d5       	rcall	.+2892   	; 0x2afe <__gesf2>
    1fb2:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1fb4:	64 f5       	brge	.+88     	; 0x200e <Data+0x2fa>
    1fb6:	8e 01       	movw	r16, r28
    1fb8:	04 58       	subi	r16, 0x84	; 132
    1fba:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	87 59       	subi	r24, 0x97	; 151
    1fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	60 81       	ld	r22, Z
    1fc6:	71 81       	ldd	r23, Z+1	; 0x01
    1fc8:	82 81       	ldd	r24, Z+2	; 0x02
    1fca:	93 81       	ldd	r25, Z+3	; 0x03
    1fcc:	f7 d4       	rcall	.+2542   	; 0x29bc <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	f8 01       	movw	r30, r16
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24
    1fd8:	ce 01       	movw	r24, r28
    1fda:	82 58       	subi	r24, 0x82	; 130
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	9e 01       	movw	r18, r28
    1fe0:	24 58       	subi	r18, 0x84	; 132
    1fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe4:	f9 01       	movw	r30, r18
    1fe6:	20 81       	ld	r18, Z
    1fe8:	31 81       	ldd	r19, Z+1	; 0x01
    1fea:	fc 01       	movw	r30, r24
    1fec:	31 83       	std	Z+1, r19	; 0x01
    1fee:	20 83       	st	Z, r18
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	82 58       	subi	r24, 0x82	; 130
    1ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	80 81       	ld	r24, Z
    1ffa:	91 81       	ldd	r25, Z+1	; 0x01
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <Data+0x2e8>
    2000:	9e 01       	movw	r18, r28
    2002:	22 58       	subi	r18, 0x82	; 130
    2004:	3f 4f       	sbci	r19, 0xFF	; 255
    2006:	f9 01       	movw	r30, r18
    2008:	91 83       	std	Z+1, r25	; 0x01
    200a:	80 83       	st	Z, r24
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    200c:	27 c0       	rjmp	.+78     	; 0x205c <Data+0x348>
    200e:	8e 01       	movw	r16, r28
    2010:	03 59       	subi	r16, 0x93	; 147
    2012:	1f 4f       	sbci	r17, 0xFF	; 255
    2014:	ce 01       	movw	r24, r28
    2016:	8b 59       	subi	r24, 0x9B	; 155
    2018:	9f 4f       	sbci	r25, 0xFF	; 255
    201a:	fc 01       	movw	r30, r24
    201c:	60 81       	ld	r22, Z
    201e:	71 81       	ldd	r23, Z+1	; 0x01
    2020:	82 81       	ldd	r24, Z+2	; 0x02
    2022:	93 81       	ldd	r25, Z+3	; 0x03
    2024:	cb d4       	rcall	.+2454   	; 0x29bc <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	f8 01       	movw	r30, r16
    202c:	80 83       	st	Z, r24
    202e:	ce 01       	movw	r24, r28
    2030:	80 58       	subi	r24, 0x80	; 128
    2032:	9f 4f       	sbci	r25, 0xFF	; 255
    2034:	9e 01       	movw	r18, r28
    2036:	23 59       	subi	r18, 0x93	; 147
    2038:	3f 4f       	sbci	r19, 0xFF	; 255
    203a:	f9 01       	movw	r30, r18
    203c:	20 81       	ld	r18, Z
    203e:	fc 01       	movw	r30, r24
    2040:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2042:	ce 01       	movw	r24, r28
    2044:	80 58       	subi	r24, 0x80	; 128
    2046:	9f 4f       	sbci	r25, 0xFF	; 255
    2048:	fc 01       	movw	r30, r24
    204a:	80 81       	ld	r24, Z
    204c:	28 2f       	mov	r18, r24
    204e:	2a 95       	dec	r18
    2050:	f1 f7       	brne	.-4      	; 0x204e <Data+0x33a>
    2052:	ce 01       	movw	r24, r28
    2054:	80 58       	subi	r24, 0x80	; 128
    2056:	9f 4f       	sbci	r25, 0xFF	; 255
    2058:	fc 01       	movw	r30, r24
    205a:	20 83       	st	Z, r18
	_delay_us(1);
	ENH; // E = 1
    205c:	85 e3       	ldi	r24, 0x35	; 53
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	25 e3       	ldi	r18, 0x35	; 53
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	f9 01       	movw	r30, r18
    2066:	20 81       	ld	r18, Z
    2068:	24 60       	ori	r18, 0x04	; 4
    206a:	fc 01       	movw	r30, r24
    206c:	20 83       	st	Z, r18
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a0 e8       	ldi	r26, 0x80	; 128
    2074:	bf e3       	ldi	r27, 0x3F	; 63
    2076:	8d 83       	std	Y+5, r24	; 0x05
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	af 83       	std	Y+7, r26	; 0x07
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    207c:	b8 87       	std	Y+8, r27	; 0x08
    207e:	8e 01       	movw	r16, r28
    2080:	07 5b       	subi	r16, 0xB7	; 183
    2082:	1f 4f       	sbci	r17, 0xFF	; 255
    2084:	2b ea       	ldi	r18, 0xAB	; 171
    2086:	3a ea       	ldi	r19, 0xAA	; 170
    2088:	4a ea       	ldi	r20, 0xAA	; 170
    208a:	50 e4       	ldi	r21, 0x40	; 64
    208c:	6d 81       	ldd	r22, Y+5	; 0x05
    208e:	7e 81       	ldd	r23, Y+6	; 0x06
    2090:	8f 81       	ldd	r24, Y+7	; 0x07
    2092:	98 85       	ldd	r25, Y+8	; 0x08
    2094:	38 d5       	rcall	.+2672   	; 0x2b06 <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	f8 01       	movw	r30, r16
    209c:	80 83       	st	Z, r24
    209e:	91 83       	std	Z+1, r25	; 0x01
    20a0:	a2 83       	std	Z+2, r26	; 0x02
	__tmp2 = ((F_CPU) / 4e6) * __us;
    20a2:	b3 83       	std	Z+3, r27	; 0x03
    20a4:	8e 01       	movw	r16, r28
    20a6:	03 5b       	subi	r16, 0xB3	; 179
    20a8:	1f 4f       	sbci	r17, 0xFF	; 255
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e8       	ldi	r20, 0x80	; 128
    20b0:	50 e4       	ldi	r21, 0x40	; 64
    20b2:	6d 81       	ldd	r22, Y+5	; 0x05
    20b4:	7e 81       	ldd	r23, Y+6	; 0x06
    20b6:	8f 81       	ldd	r24, Y+7	; 0x07
    20b8:	98 85       	ldd	r25, Y+8	; 0x08
    20ba:	25 d5       	rcall	.+2634   	; 0x2b06 <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	f8 01       	movw	r30, r16
    20c2:	80 83       	st	Z, r24
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	a2 83       	std	Z+2, r26	; 0x02
	if (__tmp < 1.0)
    20c8:	b3 83       	std	Z+3, r27	; 0x03
    20ca:	ce 01       	movw	r24, r28
    20cc:	87 5b       	subi	r24, 0xB7	; 183
    20ce:	9f 4f       	sbci	r25, 0xFF	; 255
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e8       	ldi	r20, 0x80	; 128
    20d6:	5f e3       	ldi	r21, 0x3F	; 63
    20d8:	fc 01       	movw	r30, r24
    20da:	60 81       	ld	r22, Z
    20dc:	71 81       	ldd	r23, Z+1	; 0x01
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	93 81       	ldd	r25, Z+3	; 0x03
    20e2:	00 d4       	rcall	.+2048   	; 0x28e4 <__cmpsf2>
    20e4:	88 23       	and	r24, r24
    20e6:	3c f4       	brge	.+14     	; 0x20f6 <Data+0x3e2>
		__ticks = 1;
    20e8:	ce 01       	movw	r24, r28
    20ea:	8f 5a       	subi	r24, 0xAF	; 175
    20ec:	9f 4f       	sbci	r25, 0xFF	; 255
    20ee:	21 e0       	ldi	r18, 0x01	; 1
    20f0:	fc 01       	movw	r30, r24
    20f2:	20 83       	st	Z, r18
	else if (__tmp2 > 65535)
    20f4:	21 c1       	rjmp	.+578    	; 0x2338 <Data+0x624>
    20f6:	ce 01       	movw	r24, r28
    20f8:	83 5b       	subi	r24, 0xB3	; 179
    20fa:	9f 4f       	sbci	r25, 0xFF	; 255
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	fc 01       	movw	r30, r24
    2106:	60 81       	ld	r22, Z
    2108:	71 81       	ldd	r23, Z+1	; 0x01
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	93 81       	ldd	r25, Z+3	; 0x03
    210e:	f7 d4       	rcall	.+2542   	; 0x2afe <__gesf2>
    2110:	18 16       	cp	r1, r24
    2112:	0c f0       	brlt	.+2      	; 0x2116 <Data+0x402>
	{
		_delay_ms(__us / 1000.0);
    2114:	c6 c0       	rjmp	.+396    	; 0x22a2 <Data+0x58e>
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	4a e7       	ldi	r20, 0x7A	; 122
    211c:	54 e4       	ldi	r21, 0x44	; 68
    211e:	6d 81       	ldd	r22, Y+5	; 0x05
    2120:	7e 81       	ldd	r23, Y+6	; 0x06
    2122:	8f 81       	ldd	r24, Y+7	; 0x07
    2124:	98 85       	ldd	r25, Y+8	; 0x08
    2126:	e2 d3       	rcall	.+1988   	; 0x28ec <__divsf3>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	9e 01       	movw	r18, r28
    212e:	2e 5a       	subi	r18, 0xAE	; 174
    2130:	3f 4f       	sbci	r19, 0xFF	; 255
    2132:	f9 01       	movw	r30, r18
    2134:	80 83       	st	Z, r24
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	a2 83       	std	Z+2, r26	; 0x02

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    213a:	b3 83       	std	Z+3, r27	; 0x03
    213c:	8e 01       	movw	r16, r28
    213e:	0a 5a       	subi	r16, 0xAA	; 170
    2140:	1f 4f       	sbci	r17, 0xFF	; 255
    2142:	ce 01       	movw	r24, r28
    2144:	8e 5a       	subi	r24, 0xAE	; 174
    2146:	9f 4f       	sbci	r25, 0xFF	; 255
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	4a e7       	ldi	r20, 0x7A	; 122
    214e:	55 e4       	ldi	r21, 0x45	; 69
    2150:	fc 01       	movw	r30, r24
    2152:	60 81       	ld	r22, Z
    2154:	71 81       	ldd	r23, Z+1	; 0x01
    2156:	82 81       	ldd	r24, Z+2	; 0x02
    2158:	93 81       	ldd	r25, Z+3	; 0x03
    215a:	d5 d4       	rcall	.+2474   	; 0x2b06 <__mulsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	f8 01       	movw	r30, r16
    2162:	80 83       	st	Z, r24
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	a2 83       	std	Z+2, r26	; 0x02
	if (__tmp < 1.0)
    2168:	b3 83       	std	Z+3, r27	; 0x03
    216a:	ce 01       	movw	r24, r28
    216c:	8a 5a       	subi	r24, 0xAA	; 170
    216e:	9f 4f       	sbci	r25, 0xFF	; 255
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e8       	ldi	r20, 0x80	; 128
    2176:	5f e3       	ldi	r21, 0x3F	; 63
    2178:	fc 01       	movw	r30, r24
    217a:	60 81       	ld	r22, Z
    217c:	71 81       	ldd	r23, Z+1	; 0x01
    217e:	82 81       	ldd	r24, Z+2	; 0x02
    2180:	93 81       	ldd	r25, Z+3	; 0x03
    2182:	b0 d3       	rcall	.+1888   	; 0x28e4 <__cmpsf2>
    2184:	88 23       	and	r24, r24
		__ticks = 1;
    2186:	4c f4       	brge	.+18     	; 0x219a <Data+0x486>
    2188:	ce 01       	movw	r24, r28
    218a:	86 5a       	subi	r24, 0xA6	; 166
    218c:	9f 4f       	sbci	r25, 0xFF	; 255
    218e:	21 e0       	ldi	r18, 0x01	; 1
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	fc 01       	movw	r30, r24
    2194:	31 83       	std	Z+1, r19	; 0x01
    2196:	20 83       	st	Z, r18
	else if (__tmp > 65535)
    2198:	69 c0       	rjmp	.+210    	; 0x226c <Data+0x558>
    219a:	ce 01       	movw	r24, r28
    219c:	8a 5a       	subi	r24, 0xAA	; 170
    219e:	9f 4f       	sbci	r25, 0xFF	; 255
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	3f ef       	ldi	r19, 0xFF	; 255
    21a4:	4f e7       	ldi	r20, 0x7F	; 127
    21a6:	57 e4       	ldi	r21, 0x47	; 71
    21a8:	fc 01       	movw	r30, r24
    21aa:	60 81       	ld	r22, Z
    21ac:	71 81       	ldd	r23, Z+1	; 0x01
    21ae:	82 81       	ldd	r24, Z+2	; 0x02
    21b0:	93 81       	ldd	r25, Z+3	; 0x03
    21b2:	a5 d4       	rcall	.+2378   	; 0x2afe <__gesf2>
    21b4:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	0c f0       	brlt	.+2      	; 0x21ba <Data+0x4a6>
    21b8:	48 c0       	rjmp	.+144    	; 0x224a <Data+0x536>
    21ba:	ce 01       	movw	r24, r28
    21bc:	8e 5a       	subi	r24, 0xAE	; 174
    21be:	9f 4f       	sbci	r25, 0xFF	; 255
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e2       	ldi	r20, 0x20	; 32
    21c6:	51 e4       	ldi	r21, 0x41	; 65
    21c8:	fc 01       	movw	r30, r24
    21ca:	60 81       	ld	r22, Z
    21cc:	71 81       	ldd	r23, Z+1	; 0x01
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	99 d4       	rcall	.+2354   	; 0x2b06 <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	8e 01       	movw	r16, r28
    21da:	06 5a       	subi	r16, 0xA6	; 166
    21dc:	1f 4f       	sbci	r17, 0xFF	; 255
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	ec d3       	rcall	.+2008   	; 0x29bc <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	f8 01       	movw	r30, r16
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	80 83       	st	Z, r24
    21ee:	24 c0       	rjmp	.+72     	; 0x2238 <Data+0x524>
    21f0:	ce 01       	movw	r24, r28
    21f2:	84 5a       	subi	r24, 0xA4	; 164
    21f4:	9f 4f       	sbci	r25, 0xFF	; 255
    21f6:	20 e9       	ldi	r18, 0x90	; 144
    21f8:	31 e0       	ldi	r19, 0x01	; 1
    21fa:	fc 01       	movw	r30, r24
    21fc:	31 83       	std	Z+1, r19	; 0x01
    21fe:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2200:	ce 01       	movw	r24, r28
    2202:	84 5a       	subi	r24, 0xA4	; 164
    2204:	9f 4f       	sbci	r25, 0xFF	; 255
    2206:	fc 01       	movw	r30, r24
    2208:	80 81       	ld	r24, Z
    220a:	91 81       	ldd	r25, Z+1	; 0x01
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <Data+0x4f8>
    2210:	9e 01       	movw	r18, r28
    2212:	24 5a       	subi	r18, 0xA4	; 164
    2214:	3f 4f       	sbci	r19, 0xFF	; 255
    2216:	f9 01       	movw	r30, r18
    2218:	91 83       	std	Z+1, r25	; 0x01
    221a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221c:	ce 01       	movw	r24, r28
    221e:	86 5a       	subi	r24, 0xA6	; 166
    2220:	9f 4f       	sbci	r25, 0xFF	; 255
    2222:	9e 01       	movw	r18, r28
    2224:	26 5a       	subi	r18, 0xA6	; 166
    2226:	3f 4f       	sbci	r19, 0xFF	; 255
    2228:	f9 01       	movw	r30, r18
    222a:	20 81       	ld	r18, Z
    222c:	31 81       	ldd	r19, Z+1	; 0x01
    222e:	21 50       	subi	r18, 0x01	; 1
    2230:	31 09       	sbc	r19, r1
    2232:	fc 01       	movw	r30, r24
    2234:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2236:	20 83       	st	Z, r18
    2238:	ce 01       	movw	r24, r28
    223a:	86 5a       	subi	r24, 0xA6	; 166
    223c:	9f 4f       	sbci	r25, 0xFF	; 255
    223e:	fc 01       	movw	r30, r24
    2240:	80 81       	ld	r24, Z
    2242:	91 81       	ldd	r25, Z+1	; 0x01
    2244:	89 2b       	or	r24, r25
    2246:	a1 f6       	brne	.-88     	; 0x21f0 <Data+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2248:	77 c0       	rjmp	.+238    	; 0x2338 <Data+0x624>
    224a:	8e 01       	movw	r16, r28
    224c:	06 5a       	subi	r16, 0xA6	; 166
    224e:	1f 4f       	sbci	r17, 0xFF	; 255
    2250:	ce 01       	movw	r24, r28
    2252:	8a 5a       	subi	r24, 0xAA	; 170
    2254:	9f 4f       	sbci	r25, 0xFF	; 255
    2256:	fc 01       	movw	r30, r24
    2258:	60 81       	ld	r22, Z
    225a:	71 81       	ldd	r23, Z+1	; 0x01
    225c:	82 81       	ldd	r24, Z+2	; 0x02
    225e:	93 81       	ldd	r25, Z+3	; 0x03
    2260:	ad d3       	rcall	.+1882   	; 0x29bc <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	f8 01       	movw	r30, r16
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	80 83       	st	Z, r24
    226c:	ce 01       	movw	r24, r28
    226e:	82 5a       	subi	r24, 0xA2	; 162
    2270:	9f 4f       	sbci	r25, 0xFF	; 255
    2272:	9e 01       	movw	r18, r28
    2274:	26 5a       	subi	r18, 0xA6	; 166
    2276:	3f 4f       	sbci	r19, 0xFF	; 255
    2278:	f9 01       	movw	r30, r18
    227a:	20 81       	ld	r18, Z
    227c:	31 81       	ldd	r19, Z+1	; 0x01
    227e:	fc 01       	movw	r30, r24
    2280:	31 83       	std	Z+1, r19	; 0x01
    2282:	20 83       	st	Z, r18
    2284:	ce 01       	movw	r24, r28
    2286:	82 5a       	subi	r24, 0xA2	; 162
    2288:	9f 4f       	sbci	r25, 0xFF	; 255
    228a:	fc 01       	movw	r30, r24
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <Data+0x57c>
    2294:	9e 01       	movw	r18, r28
    2296:	22 5a       	subi	r18, 0xA2	; 162
    2298:	3f 4f       	sbci	r19, 0xFF	; 255
    229a:	f9 01       	movw	r30, r18
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	80 83       	st	Z, r24
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    22a0:	4b c0       	rjmp	.+150    	; 0x2338 <Data+0x624>
    22a2:	ce 01       	movw	r24, r28
    22a4:	87 5b       	subi	r24, 0xB7	; 183
    22a6:	9f 4f       	sbci	r25, 0xFF	; 255
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	4f e7       	ldi	r20, 0x7F	; 127
    22ae:	53 e4       	ldi	r21, 0x43	; 67
    22b0:	fc 01       	movw	r30, r24
    22b2:	60 81       	ld	r22, Z
    22b4:	71 81       	ldd	r23, Z+1	; 0x01
    22b6:	82 81       	ldd	r24, Z+2	; 0x02
    22b8:	93 81       	ldd	r25, Z+3	; 0x03
    22ba:	21 d4       	rcall	.+2114   	; 0x2afe <__gesf2>
    22bc:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    22be:	64 f5       	brge	.+88     	; 0x2318 <Data+0x604>
    22c0:	8e 01       	movw	r16, r28
    22c2:	00 5a       	subi	r16, 0xA0	; 160
    22c4:	1f 4f       	sbci	r17, 0xFF	; 255
    22c6:	ce 01       	movw	r24, r28
    22c8:	83 5b       	subi	r24, 0xB3	; 179
    22ca:	9f 4f       	sbci	r25, 0xFF	; 255
    22cc:	fc 01       	movw	r30, r24
    22ce:	60 81       	ld	r22, Z
    22d0:	71 81       	ldd	r23, Z+1	; 0x01
    22d2:	82 81       	ldd	r24, Z+2	; 0x02
    22d4:	93 81       	ldd	r25, Z+3	; 0x03
    22d6:	72 d3       	rcall	.+1764   	; 0x29bc <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	f8 01       	movw	r30, r16
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	80 83       	st	Z, r24
    22e2:	ce 01       	movw	r24, r28
    22e4:	8e 59       	subi	r24, 0x9E	; 158
    22e6:	9f 4f       	sbci	r25, 0xFF	; 255
    22e8:	9e 01       	movw	r18, r28
    22ea:	20 5a       	subi	r18, 0xA0	; 160
    22ec:	3f 4f       	sbci	r19, 0xFF	; 255
    22ee:	f9 01       	movw	r30, r18
    22f0:	20 81       	ld	r18, Z
    22f2:	31 81       	ldd	r19, Z+1	; 0x01
    22f4:	fc 01       	movw	r30, r24
    22f6:	31 83       	std	Z+1, r19	; 0x01
    22f8:	20 83       	st	Z, r18
    22fa:	ce 01       	movw	r24, r28
    22fc:	8e 59       	subi	r24, 0x9E	; 158
    22fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2300:	fc 01       	movw	r30, r24
    2302:	80 81       	ld	r24, Z
    2304:	91 81       	ldd	r25, Z+1	; 0x01
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <Data+0x5f2>
    230a:	9e 01       	movw	r18, r28
    230c:	2e 59       	subi	r18, 0x9E	; 158
    230e:	3f 4f       	sbci	r19, 0xFF	; 255
    2310:	f9 01       	movw	r30, r18
    2312:	91 83       	std	Z+1, r25	; 0x01
    2314:	80 83       	st	Z, r24
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2316:	27 c0       	rjmp	.+78     	; 0x2366 <Data+0x652>
    2318:	8e 01       	movw	r16, r28
    231a:	0f 5a       	subi	r16, 0xAF	; 175
    231c:	1f 4f       	sbci	r17, 0xFF	; 255
    231e:	ce 01       	movw	r24, r28
    2320:	87 5b       	subi	r24, 0xB7	; 183
    2322:	9f 4f       	sbci	r25, 0xFF	; 255
    2324:	fc 01       	movw	r30, r24
    2326:	60 81       	ld	r22, Z
    2328:	71 81       	ldd	r23, Z+1	; 0x01
    232a:	82 81       	ldd	r24, Z+2	; 0x02
    232c:	93 81       	ldd	r25, Z+3	; 0x03
    232e:	46 d3       	rcall	.+1676   	; 0x29bc <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	f8 01       	movw	r30, r16
    2336:	80 83       	st	Z, r24
    2338:	ce 01       	movw	r24, r28
    233a:	8c 59       	subi	r24, 0x9C	; 156
    233c:	9f 4f       	sbci	r25, 0xFF	; 255
    233e:	9e 01       	movw	r18, r28
    2340:	2f 5a       	subi	r18, 0xAF	; 175
    2342:	3f 4f       	sbci	r19, 0xFF	; 255
    2344:	f9 01       	movw	r30, r18
    2346:	20 81       	ld	r18, Z
    2348:	fc 01       	movw	r30, r24
    234a:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    234c:	ce 01       	movw	r24, r28
    234e:	8c 59       	subi	r24, 0x9C	; 156
    2350:	9f 4f       	sbci	r25, 0xFF	; 255
    2352:	fc 01       	movw	r30, r24
    2354:	80 81       	ld	r24, Z
    2356:	28 2f       	mov	r18, r24
    2358:	2a 95       	dec	r18
    235a:	f1 f7       	brne	.-4      	; 0x2358 <Data+0x644>
    235c:	ce 01       	movw	r24, r28
    235e:	8c 59       	subi	r24, 0x9C	; 156
    2360:	9f 4f       	sbci	r25, 0xFF	; 255
    2362:	fc 01       	movw	r30, r24
    2364:	20 83       	st	Z, r18
	_delay_us(1);
	ENL; // E = 0
    2366:	85 e3       	ldi	r24, 0x35	; 53
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	25 e3       	ldi	r18, 0x35	; 53
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	f9 01       	movw	r30, r18
    2370:	20 81       	ld	r18, Z
    2372:	2b 7f       	andi	r18, 0xFB	; 251
    2374:	fc 01       	movw	r30, r24
    2376:	20 83       	st	Z, r18

	// 데이터 하위 4비트
	PORTC = 0x01; // RS=1, RW=0
    2378:	85 e3       	ldi	r24, 0x35	; 53
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	21 e0       	ldi	r18, 0x01	; 1
    237e:	fc 01       	movw	r30, r24
    2380:	20 83       	st	Z, r18
	PORTC |= (byte << 4); // 데이터 하위 4비트
    2382:	85 e3       	ldi	r24, 0x35	; 53
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	25 e3       	ldi	r18, 0x35	; 53
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	f9 01       	movw	r30, r18
    238c:	20 81       	ld	r18, Z
    238e:	42 2f       	mov	r20, r18
    2390:	9e 01       	movw	r18, r28
    2392:	2f 57       	subi	r18, 0x7F	; 127
    2394:	3f 4f       	sbci	r19, 0xFF	; 255
    2396:	f9 01       	movw	r30, r18
    2398:	20 81       	ld	r18, Z
    239a:	22 2f       	mov	r18, r18
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	22 95       	swap	r18
    23a0:	32 95       	swap	r19
    23a2:	30 7f       	andi	r19, 0xF0	; 240
    23a4:	32 27       	eor	r19, r18
    23a6:	20 7f       	andi	r18, 0xF0	; 240
    23a8:	32 27       	eor	r19, r18
    23aa:	24 2b       	or	r18, r20
    23ac:	fc 01       	movw	r30, r24
    23ae:	20 83       	st	Z, r18
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	a0 e8       	ldi	r26, 0x80	; 128
    23b6:	bf e3       	ldi	r27, 0x3F	; 63
    23b8:	89 87       	std	Y+9, r24	; 0x09
    23ba:	9a 87       	std	Y+10, r25	; 0x0a
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    23bc:	ab 87       	std	Y+11, r26	; 0x0b
    23be:	bc 87       	std	Y+12, r27	; 0x0c
    23c0:	2b ea       	ldi	r18, 0xAB	; 171
    23c2:	3a ea       	ldi	r19, 0xAA	; 170
    23c4:	4a ea       	ldi	r20, 0xAA	; 170
    23c6:	50 e4       	ldi	r21, 0x40	; 64
    23c8:	69 85       	ldd	r22, Y+9	; 0x09
    23ca:	7a 85       	ldd	r23, Y+10	; 0x0a
    23cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    23ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    23d0:	9a d3       	rcall	.+1844   	; 0x2b06 <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	8d a7       	std	Y+45, r24	; 0x2d
    23d8:	9e a7       	std	Y+46, r25	; 0x2e
	__tmp2 = ((F_CPU) / 4e6) * __us;
    23da:	af a7       	std	Y+47, r26	; 0x2f
    23dc:	b8 ab       	std	Y+48, r27	; 0x30
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e8       	ldi	r20, 0x80	; 128
    23e4:	50 e4       	ldi	r21, 0x40	; 64
    23e6:	69 85       	ldd	r22, Y+9	; 0x09
    23e8:	7a 85       	ldd	r23, Y+10	; 0x0a
    23ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    23ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    23ee:	8b d3       	rcall	.+1814   	; 0x2b06 <__mulsf3>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	89 ab       	std	Y+49, r24	; 0x31
    23f6:	9a ab       	std	Y+50, r25	; 0x32
	if (__tmp < 1.0)
    23f8:	ab ab       	std	Y+51, r26	; 0x33
    23fa:	bc ab       	std	Y+52, r27	; 0x34
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e8       	ldi	r20, 0x80	; 128
    2402:	5f e3       	ldi	r21, 0x3F	; 63
    2404:	6d a5       	ldd	r22, Y+45	; 0x2d
    2406:	7e a5       	ldd	r23, Y+46	; 0x2e
    2408:	8f a5       	ldd	r24, Y+47	; 0x2f
    240a:	98 a9       	ldd	r25, Y+48	; 0x30
    240c:	6b d2       	rcall	.+1238   	; 0x28e4 <__cmpsf2>
		__ticks = 1;
    240e:	88 23       	and	r24, r24
    2410:	1c f4       	brge	.+6      	; 0x2418 <Data+0x704>
    2412:	81 e0       	ldi	r24, 0x01	; 1
	else if (__tmp2 > 65535)
    2414:	8d ab       	std	Y+53, r24	; 0x35
    2416:	d3 c0       	rjmp	.+422    	; 0x25be <Data+0x8aa>
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	3f ef       	ldi	r19, 0xFF	; 255
    241c:	4f e7       	ldi	r20, 0x7F	; 127
    241e:	57 e4       	ldi	r21, 0x47	; 71
    2420:	69 a9       	ldd	r22, Y+49	; 0x31
    2422:	7a a9       	ldd	r23, Y+50	; 0x32
    2424:	8b a9       	ldd	r24, Y+51	; 0x33
    2426:	9c a9       	ldd	r25, Y+52	; 0x34
    2428:	6a d3       	rcall	.+1748   	; 0x2afe <__gesf2>
    242a:	18 16       	cp	r1, r24
	{
		_delay_ms(__us / 1000.0);
    242c:	0c f0       	brlt	.+2      	; 0x2430 <Data+0x71c>
    242e:	8c c0       	rjmp	.+280    	; 0x2548 <Data+0x834>
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	4a e7       	ldi	r20, 0x7A	; 122
    2436:	54 e4       	ldi	r21, 0x44	; 68
    2438:	69 85       	ldd	r22, Y+9	; 0x09
    243a:	7a 85       	ldd	r23, Y+10	; 0x0a
    243c:	8b 85       	ldd	r24, Y+11	; 0x0b
    243e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2440:	55 d2       	rcall	.+1194   	; 0x28ec <__divsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	8e ab       	std	Y+54, r24	; 0x36
    2448:	9f ab       	std	Y+55, r25	; 0x37

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    244a:	a8 af       	std	Y+56, r26	; 0x38
    244c:	b9 af       	std	Y+57, r27	; 0x39
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a e7       	ldi	r20, 0x7A	; 122
    2454:	55 e4       	ldi	r21, 0x45	; 69
    2456:	6e a9       	ldd	r22, Y+54	; 0x36
    2458:	7f a9       	ldd	r23, Y+55	; 0x37
    245a:	88 ad       	ldd	r24, Y+56	; 0x38
    245c:	99 ad       	ldd	r25, Y+57	; 0x39
    245e:	53 d3       	rcall	.+1702   	; 0x2b06 <__mulsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	8a af       	std	Y+58, r24	; 0x3a
    2466:	9b af       	std	Y+59, r25	; 0x3b
	if (__tmp < 1.0)
    2468:	ac af       	std	Y+60, r26	; 0x3c
    246a:	bd af       	std	Y+61, r27	; 0x3d
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e8       	ldi	r20, 0x80	; 128
    2472:	5f e3       	ldi	r21, 0x3F	; 63
    2474:	6a ad       	ldd	r22, Y+58	; 0x3a
    2476:	7b ad       	ldd	r23, Y+59	; 0x3b
    2478:	8c ad       	ldd	r24, Y+60	; 0x3c
    247a:	9d ad       	ldd	r25, Y+61	; 0x3d
		__ticks = 1;
    247c:	33 d2       	rcall	.+1126   	; 0x28e4 <__cmpsf2>
    247e:	88 23       	and	r24, r24
    2480:	2c f4       	brge	.+10     	; 0x248c <Data+0x778>
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	90 e0       	ldi	r25, 0x00	; 0
	else if (__tmp > 65535)
    2486:	9f af       	std	Y+63, r25	; 0x3f
    2488:	8e af       	std	Y+62, r24	; 0x3e
    248a:	47 c0       	rjmp	.+142    	; 0x251a <Data+0x806>
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	3f ef       	ldi	r19, 0xFF	; 255
    2490:	4f e7       	ldi	r20, 0x7F	; 127
    2492:	57 e4       	ldi	r21, 0x47	; 71
    2494:	6a ad       	ldd	r22, Y+58	; 0x3a
    2496:	7b ad       	ldd	r23, Y+59	; 0x3b
    2498:	8c ad       	ldd	r24, Y+60	; 0x3c
    249a:	9d ad       	ldd	r25, Y+61	; 0x3d
    249c:	30 d3       	rcall	.+1632   	; 0x2afe <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249e:	18 16       	cp	r1, r24
    24a0:	9c f5       	brge	.+102    	; 0x2508 <Data+0x7f4>
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e2       	ldi	r20, 0x20	; 32
    24a8:	51 e4       	ldi	r21, 0x41	; 65
    24aa:	6e a9       	ldd	r22, Y+54	; 0x36
    24ac:	7f a9       	ldd	r23, Y+55	; 0x37
    24ae:	88 ad       	ldd	r24, Y+56	; 0x38
    24b0:	99 ad       	ldd	r25, Y+57	; 0x39
    24b2:	29 d3       	rcall	.+1618   	; 0x2b06 <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	7f d2       	rcall	.+1278   	; 0x29bc <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	9f af       	std	Y+63, r25	; 0x3f
    24c4:	8e af       	std	Y+62, r24	; 0x3e
    24c6:	1b c0       	rjmp	.+54     	; 0x24fe <Data+0x7ea>
    24c8:	ce 01       	movw	r24, r28
    24ca:	80 5c       	subi	r24, 0xC0	; 192
    24cc:	9f 4f       	sbci	r25, 0xFF	; 255
    24ce:	20 e9       	ldi	r18, 0x90	; 144
    24d0:	31 e0       	ldi	r19, 0x01	; 1
    24d2:	fc 01       	movw	r30, r24
    24d4:	31 83       	std	Z+1, r19	; 0x01
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24d6:	20 83       	st	Z, r18
    24d8:	ce 01       	movw	r24, r28
    24da:	80 5c       	subi	r24, 0xC0	; 192
    24dc:	9f 4f       	sbci	r25, 0xFF	; 255
    24de:	fc 01       	movw	r30, r24
    24e0:	80 81       	ld	r24, Z
    24e2:	91 81       	ldd	r25, Z+1	; 0x01
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <Data+0x7d0>
    24e8:	9e 01       	movw	r18, r28
    24ea:	20 5c       	subi	r18, 0xC0	; 192
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	f9 01       	movw	r30, r18
    24f0:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f2:	80 83       	st	Z, r24
    24f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    24f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	9f af       	std	Y+63, r25	; 0x3f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fc:	8e af       	std	Y+62, r24	; 0x3e
    24fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2500:	9f ad       	ldd	r25, Y+63	; 0x3f
    2502:	89 2b       	or	r24, r25
    2504:	09 f7       	brne	.-62     	; 0x24c8 <Data+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2506:	5b c0       	rjmp	.+182    	; 0x25be <Data+0x8aa>
    2508:	6a ad       	ldd	r22, Y+58	; 0x3a
    250a:	7b ad       	ldd	r23, Y+59	; 0x3b
    250c:	8c ad       	ldd	r24, Y+60	; 0x3c
    250e:	9d ad       	ldd	r25, Y+61	; 0x3d
    2510:	55 d2       	rcall	.+1194   	; 0x29bc <__fixunssfsi>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	9f af       	std	Y+63, r25	; 0x3f
    2518:	8e af       	std	Y+62, r24	; 0x3e
    251a:	ce 01       	movw	r24, r28
    251c:	8e 5b       	subi	r24, 0xBE	; 190
    251e:	9f 4f       	sbci	r25, 0xFF	; 255
    2520:	2e ad       	ldd	r18, Y+62	; 0x3e
    2522:	3f ad       	ldd	r19, Y+63	; 0x3f
    2524:	fc 01       	movw	r30, r24
    2526:	31 83       	std	Z+1, r19	; 0x01
    2528:	20 83       	st	Z, r18
    252a:	ce 01       	movw	r24, r28
    252c:	8e 5b       	subi	r24, 0xBE	; 190
    252e:	9f 4f       	sbci	r25, 0xFF	; 255
    2530:	fc 01       	movw	r30, r24
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <Data+0x822>
    253a:	9e 01       	movw	r18, r28
    253c:	2e 5b       	subi	r18, 0xBE	; 190
    253e:	3f 4f       	sbci	r19, 0xFF	; 255
    2540:	f9 01       	movw	r30, r18
    2542:	91 83       	std	Z+1, r25	; 0x01
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2544:	80 83       	st	Z, r24
    2546:	3b c0       	rjmp	.+118    	; 0x25be <Data+0x8aa>
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	4f e7       	ldi	r20, 0x7F	; 127
    254e:	53 e4       	ldi	r21, 0x43	; 67
    2550:	6d a5       	ldd	r22, Y+45	; 0x2d
    2552:	7e a5       	ldd	r23, Y+46	; 0x2e
    2554:	8f a5       	ldd	r24, Y+47	; 0x2f
    2556:	98 a9       	ldd	r25, Y+48	; 0x30
    2558:	d2 d2       	rcall	.+1444   	; 0x2afe <__gesf2>
    255a:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    255c:	44 f5       	brge	.+80     	; 0x25ae <Data+0x89a>
    255e:	8e 01       	movw	r16, r28
    2560:	0c 5b       	subi	r16, 0xBC	; 188
    2562:	1f 4f       	sbci	r17, 0xFF	; 255
    2564:	69 a9       	ldd	r22, Y+49	; 0x31
    2566:	7a a9       	ldd	r23, Y+50	; 0x32
    2568:	8b a9       	ldd	r24, Y+51	; 0x33
    256a:	9c a9       	ldd	r25, Y+52	; 0x34
    256c:	27 d2       	rcall	.+1102   	; 0x29bc <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	f8 01       	movw	r30, r16
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	80 83       	st	Z, r24
    2578:	ce 01       	movw	r24, r28
    257a:	8a 5b       	subi	r24, 0xBA	; 186
    257c:	9f 4f       	sbci	r25, 0xFF	; 255
    257e:	9e 01       	movw	r18, r28
    2580:	2c 5b       	subi	r18, 0xBC	; 188
    2582:	3f 4f       	sbci	r19, 0xFF	; 255
    2584:	f9 01       	movw	r30, r18
    2586:	20 81       	ld	r18, Z
    2588:	31 81       	ldd	r19, Z+1	; 0x01
    258a:	fc 01       	movw	r30, r24
    258c:	31 83       	std	Z+1, r19	; 0x01
    258e:	20 83       	st	Z, r18
    2590:	ce 01       	movw	r24, r28
    2592:	8a 5b       	subi	r24, 0xBA	; 186
    2594:	9f 4f       	sbci	r25, 0xFF	; 255
    2596:	fc 01       	movw	r30, r24
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <Data+0x888>
    25a0:	9e 01       	movw	r18, r28
    25a2:	2a 5b       	subi	r18, 0xBA	; 186
    25a4:	3f 4f       	sbci	r19, 0xFF	; 255
    25a6:	f9 01       	movw	r30, r18
    25a8:	91 83       	std	Z+1, r25	; 0x01
    25aa:	80 83       	st	Z, r24
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25ac:	1b c0       	rjmp	.+54     	; 0x25e4 <Data+0x8d0>
    25ae:	6d a5       	ldd	r22, Y+45	; 0x2d
    25b0:	7e a5       	ldd	r23, Y+46	; 0x2e
    25b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b4:	98 a9       	ldd	r25, Y+48	; 0x30
    25b6:	02 d2       	rcall	.+1028   	; 0x29bc <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	8d ab       	std	Y+53, r24	; 0x35
    25be:	ce 01       	movw	r24, r28
    25c0:	88 5b       	subi	r24, 0xB8	; 184
    25c2:	9f 4f       	sbci	r25, 0xFF	; 255
    25c4:	2d a9       	ldd	r18, Y+53	; 0x35
    25c6:	fc 01       	movw	r30, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25c8:	20 83       	st	Z, r18
    25ca:	ce 01       	movw	r24, r28
    25cc:	88 5b       	subi	r24, 0xB8	; 184
    25ce:	9f 4f       	sbci	r25, 0xFF	; 255
    25d0:	fc 01       	movw	r30, r24
    25d2:	80 81       	ld	r24, Z
    25d4:	28 2f       	mov	r18, r24
    25d6:	2a 95       	dec	r18
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <Data+0x8c2>
    25da:	ce 01       	movw	r24, r28
    25dc:	88 5b       	subi	r24, 0xB8	; 184
    25de:	9f 4f       	sbci	r25, 0xFF	; 255
	_delay_us(1);
	ENH; // E = 1
    25e0:	fc 01       	movw	r30, r24
    25e2:	20 83       	st	Z, r18
    25e4:	85 e3       	ldi	r24, 0x35	; 53
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	25 e3       	ldi	r18, 0x35	; 53
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	f9 01       	movw	r30, r18
    25ee:	20 81       	ld	r18, Z
    25f0:	24 60       	ori	r18, 0x04	; 4
    25f2:	fc 01       	movw	r30, r24
    25f4:	20 83       	st	Z, r18
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	a0 e8       	ldi	r26, 0x80	; 128
    25fc:	bf e3       	ldi	r27, 0x3F	; 63
    25fe:	8d 87       	std	Y+13, r24	; 0x0d
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    2600:	9e 87       	std	Y+14, r25	; 0x0e
    2602:	af 87       	std	Y+15, r26	; 0x0f
    2604:	b8 8b       	std	Y+16, r27	; 0x10
    2606:	2b ea       	ldi	r18, 0xAB	; 171
    2608:	3a ea       	ldi	r19, 0xAA	; 170
    260a:	4a ea       	ldi	r20, 0xAA	; 170
    260c:	50 e4       	ldi	r21, 0x40	; 64
    260e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2610:	7e 85       	ldd	r23, Y+14	; 0x0e
    2612:	8f 85       	ldd	r24, Y+15	; 0x0f
    2614:	98 89       	ldd	r25, Y+16	; 0x10
    2616:	77 d2       	rcall	.+1262   	; 0x2b06 <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	89 8b       	std	Y+17, r24	; 0x11
	__tmp2 = ((F_CPU) / 4e6) * __us;
    261e:	9a 8b       	std	Y+18, r25	; 0x12
    2620:	ab 8b       	std	Y+19, r26	; 0x13
    2622:	bc 8b       	std	Y+20, r27	; 0x14
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e8       	ldi	r20, 0x80	; 128
    262a:	50 e4       	ldi	r21, 0x40	; 64
    262c:	6d 85       	ldd	r22, Y+13	; 0x0d
    262e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2630:	8f 85       	ldd	r24, Y+15	; 0x0f
    2632:	98 89       	ldd	r25, Y+16	; 0x10
    2634:	68 d2       	rcall	.+1232   	; 0x2b06 <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	8d 8b       	std	Y+21, r24	; 0x15
	if (__tmp < 1.0)
    263c:	9e 8b       	std	Y+22, r25	; 0x16
    263e:	af 8b       	std	Y+23, r26	; 0x17
    2640:	b8 8f       	std	Y+24, r27	; 0x18
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e8       	ldi	r20, 0x80	; 128
    2648:	5f e3       	ldi	r21, 0x3F	; 63
    264a:	69 89       	ldd	r22, Y+17	; 0x11
    264c:	7a 89       	ldd	r23, Y+18	; 0x12
    264e:	8b 89       	ldd	r24, Y+19	; 0x13
    2650:	9c 89       	ldd	r25, Y+20	; 0x14
		__ticks = 1;
    2652:	48 d1       	rcall	.+656    	; 0x28e4 <__cmpsf2>
    2654:	88 23       	and	r24, r24
    2656:	1c f4       	brge	.+6      	; 0x265e <Data+0x94a>
	else if (__tmp2 > 65535)
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	89 8f       	std	Y+25, r24	; 0x19
    265c:	a7 c0       	rjmp	.+334    	; 0x27ac <Data+0xa98>
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	3f ef       	ldi	r19, 0xFF	; 255
    2662:	4f e7       	ldi	r20, 0x7F	; 127
    2664:	57 e4       	ldi	r21, 0x47	; 71
    2666:	6d 89       	ldd	r22, Y+21	; 0x15
    2668:	7e 89       	ldd	r23, Y+22	; 0x16
    266a:	8f 89       	ldd	r24, Y+23	; 0x17
    266c:	98 8d       	ldd	r25, Y+24	; 0x18
    266e:	47 d2       	rcall	.+1166   	; 0x2afe <__gesf2>
	{
		_delay_ms(__us / 1000.0);
    2670:	18 16       	cp	r1, r24
    2672:	0c f0       	brlt	.+2      	; 0x2676 <Data+0x962>
    2674:	74 c0       	rjmp	.+232    	; 0x275e <Data+0xa4a>
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	4a e7       	ldi	r20, 0x7A	; 122
    267c:	54 e4       	ldi	r21, 0x44	; 68
    267e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2680:	7e 85       	ldd	r23, Y+14	; 0x0e
    2682:	8f 85       	ldd	r24, Y+15	; 0x0f
    2684:	98 89       	ldd	r25, Y+16	; 0x10
    2686:	32 d1       	rcall	.+612    	; 0x28ec <__divsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	8a 8f       	std	Y+26, r24	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    268e:	9b 8f       	std	Y+27, r25	; 0x1b
    2690:	ac 8f       	std	Y+28, r26	; 0x1c
    2692:	bd 8f       	std	Y+29, r27	; 0x1d
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	4a e7       	ldi	r20, 0x7A	; 122
    269a:	55 e4       	ldi	r21, 0x45	; 69
    269c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    269e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    26a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26a4:	30 d2       	rcall	.+1120   	; 0x2b06 <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
	if (__tmp < 1.0)
    26aa:	8e 8f       	std	Y+30, r24	; 0x1e
    26ac:	9f 8f       	std	Y+31, r25	; 0x1f
    26ae:	a8 a3       	std	Y+32, r26	; 0x20
    26b0:	b9 a3       	std	Y+33, r27	; 0x21
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e8       	ldi	r20, 0x80	; 128
    26b8:	5f e3       	ldi	r21, 0x3F	; 63
    26ba:	6e 8d       	ldd	r22, Y+30	; 0x1e
    26bc:	7f 8d       	ldd	r23, Y+31	; 0x1f
    26be:	88 a1       	ldd	r24, Y+32	; 0x20
    26c0:	99 a1       	ldd	r25, Y+33	; 0x21
		__ticks = 1;
    26c2:	10 d1       	rcall	.+544    	; 0x28e4 <__cmpsf2>
    26c4:	88 23       	and	r24, r24
    26c6:	2c f4       	brge	.+10     	; 0x26d2 <Data+0x9be>
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
	else if (__tmp > 65535)
    26cc:	9b a3       	std	Y+35, r25	; 0x23
    26ce:	8a a3       	std	Y+34, r24	; 0x22
    26d0:	3b c0       	rjmp	.+118    	; 0x2748 <Data+0xa34>
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	3f ef       	ldi	r19, 0xFF	; 255
    26d6:	4f e7       	ldi	r20, 0x7F	; 127
    26d8:	57 e4       	ldi	r21, 0x47	; 71
    26da:	6e 8d       	ldd	r22, Y+30	; 0x1e
    26dc:	7f 8d       	ldd	r23, Y+31	; 0x1f
    26de:	88 a1       	ldd	r24, Y+32	; 0x20
    26e0:	99 a1       	ldd	r25, Y+33	; 0x21
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e2:	0d d2       	rcall	.+1050   	; 0x2afe <__gesf2>
    26e4:	18 16       	cp	r1, r24
    26e6:	3c f5       	brge	.+78     	; 0x2736 <Data+0xa22>
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e2       	ldi	r20, 0x20	; 32
    26ee:	51 e4       	ldi	r21, 0x41	; 65
    26f0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    26f2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    26f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26f8:	06 d2       	rcall	.+1036   	; 0x2b06 <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	bc 01       	movw	r22, r24
    2700:	cd 01       	movw	r24, r26
    2702:	5c d1       	rcall	.+696    	; 0x29bc <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9b a3       	std	Y+35, r25	; 0x23
    270a:	8a a3       	std	Y+34, r24	; 0x22
    270c:	0f c0       	rjmp	.+30     	; 0x272c <Data+0xa18>
    270e:	80 e9       	ldi	r24, 0x90	; 144
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2710:	91 e0       	ldi	r25, 0x01	; 1
    2712:	9d a3       	std	Y+37, r25	; 0x25
    2714:	8c a3       	std	Y+36, r24	; 0x24
    2716:	8c a1       	ldd	r24, Y+36	; 0x24
    2718:	9d a1       	ldd	r25, Y+37	; 0x25
    271a:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271c:	f1 f7       	brne	.-4      	; 0x271a <Data+0xa06>
    271e:	9d a3       	std	Y+37, r25	; 0x25
    2720:	8c a3       	std	Y+36, r24	; 0x24
    2722:	8a a1       	ldd	r24, Y+34	; 0x22
    2724:	9b a1       	ldd	r25, Y+35	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	9b a3       	std	Y+35, r25	; 0x23
    272a:	8a a3       	std	Y+34, r24	; 0x22
    272c:	8a a1       	ldd	r24, Y+34	; 0x22
    272e:	9b a1       	ldd	r25, Y+35	; 0x23
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2730:	89 2b       	or	r24, r25
    2732:	69 f7       	brne	.-38     	; 0x270e <Data+0x9fa>
    2734:	3b c0       	rjmp	.+118    	; 0x27ac <Data+0xa98>
    2736:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2738:	7f 8d       	ldd	r23, Y+31	; 0x1f
    273a:	88 a1       	ldd	r24, Y+32	; 0x20
    273c:	99 a1       	ldd	r25, Y+33	; 0x21
    273e:	3e d1       	rcall	.+636    	; 0x29bc <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	9b a3       	std	Y+35, r25	; 0x23
    2746:	8a a3       	std	Y+34, r24	; 0x22
    2748:	8a a1       	ldd	r24, Y+34	; 0x22
    274a:	9b a1       	ldd	r25, Y+35	; 0x23
    274c:	9f a3       	std	Y+39, r25	; 0x27
    274e:	8e a3       	std	Y+38, r24	; 0x26
    2750:	8e a1       	ldd	r24, Y+38	; 0x26
    2752:	9f a1       	ldd	r25, Y+39	; 0x27
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <Data+0xa40>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2758:	9f a3       	std	Y+39, r25	; 0x27
    275a:	8e a3       	std	Y+38, r24	; 0x26
    275c:	27 c0       	rjmp	.+78     	; 0x27ac <Data+0xa98>
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	4f e7       	ldi	r20, 0x7F	; 127
    2764:	53 e4       	ldi	r21, 0x43	; 67
    2766:	69 89       	ldd	r22, Y+17	; 0x11
    2768:	7a 89       	ldd	r23, Y+18	; 0x12
    276a:	8b 89       	ldd	r24, Y+19	; 0x13
    276c:	9c 89       	ldd	r25, Y+20	; 0x14
    276e:	c7 d1       	rcall	.+910    	; 0x2afe <__gesf2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2770:	18 16       	cp	r1, r24
    2772:	a4 f4       	brge	.+40     	; 0x279c <Data+0xa88>
    2774:	6d 89       	ldd	r22, Y+21	; 0x15
    2776:	7e 89       	ldd	r23, Y+22	; 0x16
    2778:	8f 89       	ldd	r24, Y+23	; 0x17
    277a:	98 8d       	ldd	r25, Y+24	; 0x18
    277c:	1f d1       	rcall	.+574    	; 0x29bc <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	99 a7       	std	Y+41, r25	; 0x29
    2784:	88 a7       	std	Y+40, r24	; 0x28
    2786:	88 a5       	ldd	r24, Y+40	; 0x28
    2788:	99 a5       	ldd	r25, Y+41	; 0x29
    278a:	9b a7       	std	Y+43, r25	; 0x2b
    278c:	8a a7       	std	Y+42, r24	; 0x2a
    278e:	8a a5       	ldd	r24, Y+42	; 0x2a
    2790:	9b a5       	ldd	r25, Y+43	; 0x2b
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <Data+0xa7e>
    2796:	9b a7       	std	Y+43, r25	; 0x2b
    2798:	8a a7       	std	Y+42, r24	; 0x2a
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    279a:	0e c0       	rjmp	.+28     	; 0x27b8 <Data+0xaa4>
    279c:	69 89       	ldd	r22, Y+17	; 0x11
    279e:	7a 89       	ldd	r23, Y+18	; 0x12
    27a0:	8b 89       	ldd	r24, Y+19	; 0x13
    27a2:	9c 89       	ldd	r25, Y+20	; 0x14
    27a4:	0b d1       	rcall	.+534    	; 0x29bc <__fixunssfsi>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	89 8f       	std	Y+25, r24	; 0x19
    27ac:	89 8d       	ldd	r24, Y+25	; 0x19
    27ae:	8c a7       	std	Y+44, r24	; 0x2c
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27b0:	8c a5       	ldd	r24, Y+44	; 0x2c
    27b2:	8a 95       	dec	r24
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <Data+0xa9e>
    27b6:	8c a7       	std	Y+44, r24	; 0x2c
	_delay_us(1);
	ENL; // E = 0
    27b8:	85 e3       	ldi	r24, 0x35	; 53
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	25 e3       	ldi	r18, 0x35	; 53
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	f9 01       	movw	r30, r18
    27c2:	20 81       	ld	r18, Z
    27c4:	2b 7f       	andi	r18, 0xFB	; 251
    27c6:	fc 01       	movw	r30, r24
    27c8:	20 83       	st	Z, r18
}
    27ca:	00 00       	nop
    27cc:	cf 57       	subi	r28, 0x7F	; 127
    27ce:	df 4f       	sbci	r29, 0xFF	; 255
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	1f 91       	pop	r17
    27e0:	0f 91       	pop	r16
    27e2:	08 95       	ret

000027e4 <Busy>:
// Busy Flag Check -> 일반적인 BF를 체크하는 것이 아니라
// 일정한 시간 지연을 이용한다.
void Busy(void)
{
    27e4:	cf 93       	push	r28
    27e6:	df 93       	push	r29
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	2e 97       	sbiw	r28, 0x0e	; 14
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	a0 e0       	ldi	r26, 0x00	; 0
    27fe:	b0 e4       	ldi	r27, 0x40	; 64
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	9a 83       	std	Y+2, r25	; 0x02
    2804:	ab 83       	std	Y+3, r26	; 0x03
    2806:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	4a e7       	ldi	r20, 0x7A	; 122
    280e:	55 e4       	ldi	r21, 0x45	; 69
    2810:	69 81       	ldd	r22, Y+1	; 0x01
    2812:	7a 81       	ldd	r23, Y+2	; 0x02
    2814:	8b 81       	ldd	r24, Y+3	; 0x03
    2816:	9c 81       	ldd	r25, Y+4	; 0x04
    2818:	76 d1       	rcall	.+748    	; 0x2b06 <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	8d 83       	std	Y+5, r24	; 0x05
    2820:	9e 83       	std	Y+6, r25	; 0x06
    2822:	af 83       	std	Y+7, r26	; 0x07
    2824:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e8       	ldi	r20, 0x80	; 128
    282c:	5f e3       	ldi	r21, 0x3F	; 63
    282e:	6d 81       	ldd	r22, Y+5	; 0x05
    2830:	7e 81       	ldd	r23, Y+6	; 0x06
    2832:	8f 81       	ldd	r24, Y+7	; 0x07
    2834:	98 85       	ldd	r25, Y+8	; 0x08
    2836:	56 d0       	rcall	.+172    	; 0x28e4 <__cmpsf2>
    2838:	88 23       	and	r24, r24
    283a:	2c f4       	brge	.+10     	; 0x2846 <Busy+0x62>
		__ticks = 1;
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	9a 87       	std	Y+10, r25	; 0x0a
    2842:	89 87       	std	Y+9, r24	; 0x09
    2844:	3b c0       	rjmp	.+118    	; 0x28bc <Busy+0xd8>
	else if (__tmp > 65535)
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	3f ef       	ldi	r19, 0xFF	; 255
    284a:	4f e7       	ldi	r20, 0x7F	; 127
    284c:	57 e4       	ldi	r21, 0x47	; 71
    284e:	6d 81       	ldd	r22, Y+5	; 0x05
    2850:	7e 81       	ldd	r23, Y+6	; 0x06
    2852:	8f 81       	ldd	r24, Y+7	; 0x07
    2854:	98 85       	ldd	r25, Y+8	; 0x08
    2856:	53 d1       	rcall	.+678    	; 0x2afe <__gesf2>
    2858:	18 16       	cp	r1, r24
    285a:	3c f5       	brge	.+78     	; 0x28aa <Busy+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e2       	ldi	r20, 0x20	; 32
    2862:	51 e4       	ldi	r21, 0x41	; 65
    2864:	69 81       	ldd	r22, Y+1	; 0x01
    2866:	7a 81       	ldd	r23, Y+2	; 0x02
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	9c 81       	ldd	r25, Y+4	; 0x04
    286c:	4c d1       	rcall	.+664    	; 0x2b06 <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	a2 d0       	rcall	.+324    	; 0x29bc <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9a 87       	std	Y+10, r25	; 0x0a
    287e:	89 87       	std	Y+9, r24	; 0x09
    2880:	0f c0       	rjmp	.+30     	; 0x28a0 <Busy+0xbc>
    2882:	80 e9       	ldi	r24, 0x90	; 144
    2884:	91 e0       	ldi	r25, 0x01	; 1
    2886:	9c 87       	std	Y+12, r25	; 0x0c
    2888:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    288a:	8b 85       	ldd	r24, Y+11	; 0x0b
    288c:	9c 85       	ldd	r25, Y+12	; 0x0c
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <Busy+0xaa>
    2892:	9c 87       	std	Y+12, r25	; 0x0c
    2894:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2896:	89 85       	ldd	r24, Y+9	; 0x09
    2898:	9a 85       	ldd	r25, Y+10	; 0x0a
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	9a 87       	std	Y+10, r25	; 0x0a
    289e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a4:	89 2b       	or	r24, r25
    28a6:	69 f7       	brne	.-38     	; 0x2882 <Busy+0x9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a8:	13 c0       	rjmp	.+38     	; 0x28d0 <Busy+0xec>
    28aa:	6d 81       	ldd	r22, Y+5	; 0x05
    28ac:	7e 81       	ldd	r23, Y+6	; 0x06
    28ae:	8f 81       	ldd	r24, Y+7	; 0x07
    28b0:	98 85       	ldd	r25, Y+8	; 0x08
    28b2:	84 d0       	rcall	.+264    	; 0x29bc <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	9a 87       	std	Y+10, r25	; 0x0a
    28ba:	89 87       	std	Y+9, r24	; 0x09
    28bc:	89 85       	ldd	r24, Y+9	; 0x09
    28be:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c0:	9e 87       	std	Y+14, r25	; 0x0e
    28c2:	8d 87       	std	Y+13, r24	; 0x0d
    28c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <Busy+0xe4>
    28cc:	9e 87       	std	Y+14, r25	; 0x0e
    28ce:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2);
}
    28d0:	00 00       	nop
    28d2:	2e 96       	adiw	r28, 0x0e	; 14
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	f8 94       	cli
    28d8:	de bf       	out	0x3e, r29	; 62
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	cd bf       	out	0x3d, r28	; 61
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	08 95       	ret

000028e4 <__cmpsf2>:
    28e4:	97 d0       	rcall	.+302    	; 0x2a14 <__fp_cmp>
    28e6:	08 f4       	brcc	.+2      	; 0x28ea <__cmpsf2+0x6>
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	08 95       	ret

000028ec <__divsf3>:
    28ec:	0c d0       	rcall	.+24     	; 0x2906 <__divsf3x>
    28ee:	cd c0       	rjmp	.+410    	; 0x2a8a <__fp_round>
    28f0:	c5 d0       	rcall	.+394    	; 0x2a7c <__fp_pscB>
    28f2:	40 f0       	brcs	.+16     	; 0x2904 <__divsf3+0x18>
    28f4:	bc d0       	rcall	.+376    	; 0x2a6e <__fp_pscA>
    28f6:	30 f0       	brcs	.+12     	; 0x2904 <__divsf3+0x18>
    28f8:	21 f4       	brne	.+8      	; 0x2902 <__divsf3+0x16>
    28fa:	5f 3f       	cpi	r21, 0xFF	; 255
    28fc:	19 f0       	breq	.+6      	; 0x2904 <__divsf3+0x18>
    28fe:	ae c0       	rjmp	.+348    	; 0x2a5c <__fp_inf>
    2900:	51 11       	cpse	r21, r1
    2902:	f7 c0       	rjmp	.+494    	; 0x2af2 <__fp_szero>
    2904:	b1 c0       	rjmp	.+354    	; 0x2a68 <__fp_nan>

00002906 <__divsf3x>:
    2906:	d2 d0       	rcall	.+420    	; 0x2aac <__fp_split3>
    2908:	98 f3       	brcs	.-26     	; 0x28f0 <__divsf3+0x4>

0000290a <__divsf3_pse>:
    290a:	99 23       	and	r25, r25
    290c:	c9 f3       	breq	.-14     	; 0x2900 <__divsf3+0x14>
    290e:	55 23       	and	r21, r21
    2910:	b1 f3       	breq	.-20     	; 0x28fe <__divsf3+0x12>
    2912:	95 1b       	sub	r25, r21
    2914:	55 0b       	sbc	r21, r21
    2916:	bb 27       	eor	r27, r27
    2918:	aa 27       	eor	r26, r26
    291a:	62 17       	cp	r22, r18
    291c:	73 07       	cpc	r23, r19
    291e:	84 07       	cpc	r24, r20
    2920:	38 f0       	brcs	.+14     	; 0x2930 <__divsf3_pse+0x26>
    2922:	9f 5f       	subi	r25, 0xFF	; 255
    2924:	5f 4f       	sbci	r21, 0xFF	; 255
    2926:	22 0f       	add	r18, r18
    2928:	33 1f       	adc	r19, r19
    292a:	44 1f       	adc	r20, r20
    292c:	aa 1f       	adc	r26, r26
    292e:	a9 f3       	breq	.-22     	; 0x291a <__divsf3_pse+0x10>
    2930:	33 d0       	rcall	.+102    	; 0x2998 <__divsf3_pse+0x8e>
    2932:	0e 2e       	mov	r0, r30
    2934:	3a f0       	brmi	.+14     	; 0x2944 <__divsf3_pse+0x3a>
    2936:	e0 e8       	ldi	r30, 0x80	; 128
    2938:	30 d0       	rcall	.+96     	; 0x299a <__divsf3_pse+0x90>
    293a:	91 50       	subi	r25, 0x01	; 1
    293c:	50 40       	sbci	r21, 0x00	; 0
    293e:	e6 95       	lsr	r30
    2940:	00 1c       	adc	r0, r0
    2942:	ca f7       	brpl	.-14     	; 0x2936 <__divsf3_pse+0x2c>
    2944:	29 d0       	rcall	.+82     	; 0x2998 <__divsf3_pse+0x8e>
    2946:	fe 2f       	mov	r31, r30
    2948:	27 d0       	rcall	.+78     	; 0x2998 <__divsf3_pse+0x8e>
    294a:	66 0f       	add	r22, r22
    294c:	77 1f       	adc	r23, r23
    294e:	88 1f       	adc	r24, r24
    2950:	bb 1f       	adc	r27, r27
    2952:	26 17       	cp	r18, r22
    2954:	37 07       	cpc	r19, r23
    2956:	48 07       	cpc	r20, r24
    2958:	ab 07       	cpc	r26, r27
    295a:	b0 e8       	ldi	r27, 0x80	; 128
    295c:	09 f0       	breq	.+2      	; 0x2960 <__divsf3_pse+0x56>
    295e:	bb 0b       	sbc	r27, r27
    2960:	80 2d       	mov	r24, r0
    2962:	bf 01       	movw	r22, r30
    2964:	ff 27       	eor	r31, r31
    2966:	93 58       	subi	r25, 0x83	; 131
    2968:	5f 4f       	sbci	r21, 0xFF	; 255
    296a:	2a f0       	brmi	.+10     	; 0x2976 <__divsf3_pse+0x6c>
    296c:	9e 3f       	cpi	r25, 0xFE	; 254
    296e:	51 05       	cpc	r21, r1
    2970:	68 f0       	brcs	.+26     	; 0x298c <__divsf3_pse+0x82>
    2972:	74 c0       	rjmp	.+232    	; 0x2a5c <__fp_inf>
    2974:	be c0       	rjmp	.+380    	; 0x2af2 <__fp_szero>
    2976:	5f 3f       	cpi	r21, 0xFF	; 255
    2978:	ec f3       	brlt	.-6      	; 0x2974 <__divsf3_pse+0x6a>
    297a:	98 3e       	cpi	r25, 0xE8	; 232
    297c:	dc f3       	brlt	.-10     	; 0x2974 <__divsf3_pse+0x6a>
    297e:	86 95       	lsr	r24
    2980:	77 95       	ror	r23
    2982:	67 95       	ror	r22
    2984:	b7 95       	ror	r27
    2986:	f7 95       	ror	r31
    2988:	9f 5f       	subi	r25, 0xFF	; 255
    298a:	c9 f7       	brne	.-14     	; 0x297e <__divsf3_pse+0x74>
    298c:	88 0f       	add	r24, r24
    298e:	91 1d       	adc	r25, r1
    2990:	96 95       	lsr	r25
    2992:	87 95       	ror	r24
    2994:	97 f9       	bld	r25, 7
    2996:	08 95       	ret
    2998:	e1 e0       	ldi	r30, 0x01	; 1
    299a:	66 0f       	add	r22, r22
    299c:	77 1f       	adc	r23, r23
    299e:	88 1f       	adc	r24, r24
    29a0:	bb 1f       	adc	r27, r27
    29a2:	62 17       	cp	r22, r18
    29a4:	73 07       	cpc	r23, r19
    29a6:	84 07       	cpc	r24, r20
    29a8:	ba 07       	cpc	r27, r26
    29aa:	20 f0       	brcs	.+8      	; 0x29b4 <__divsf3_pse+0xaa>
    29ac:	62 1b       	sub	r22, r18
    29ae:	73 0b       	sbc	r23, r19
    29b0:	84 0b       	sbc	r24, r20
    29b2:	ba 0b       	sbc	r27, r26
    29b4:	ee 1f       	adc	r30, r30
    29b6:	88 f7       	brcc	.-30     	; 0x299a <__divsf3_pse+0x90>
    29b8:	e0 95       	com	r30
    29ba:	08 95       	ret

000029bc <__fixunssfsi>:
    29bc:	7f d0       	rcall	.+254    	; 0x2abc <__fp_splitA>
    29be:	88 f0       	brcs	.+34     	; 0x29e2 <__fixunssfsi+0x26>
    29c0:	9f 57       	subi	r25, 0x7F	; 127
    29c2:	90 f0       	brcs	.+36     	; 0x29e8 <__fixunssfsi+0x2c>
    29c4:	b9 2f       	mov	r27, r25
    29c6:	99 27       	eor	r25, r25
    29c8:	b7 51       	subi	r27, 0x17	; 23
    29ca:	a0 f0       	brcs	.+40     	; 0x29f4 <__fixunssfsi+0x38>
    29cc:	d1 f0       	breq	.+52     	; 0x2a02 <__fixunssfsi+0x46>
    29ce:	66 0f       	add	r22, r22
    29d0:	77 1f       	adc	r23, r23
    29d2:	88 1f       	adc	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	1a f0       	brmi	.+6      	; 0x29de <__fixunssfsi+0x22>
    29d8:	ba 95       	dec	r27
    29da:	c9 f7       	brne	.-14     	; 0x29ce <__fixunssfsi+0x12>
    29dc:	12 c0       	rjmp	.+36     	; 0x2a02 <__fixunssfsi+0x46>
    29de:	b1 30       	cpi	r27, 0x01	; 1
    29e0:	81 f0       	breq	.+32     	; 0x2a02 <__fixunssfsi+0x46>
    29e2:	86 d0       	rcall	.+268    	; 0x2af0 <__fp_zero>
    29e4:	b1 e0       	ldi	r27, 0x01	; 1
    29e6:	08 95       	ret
    29e8:	83 c0       	rjmp	.+262    	; 0x2af0 <__fp_zero>
    29ea:	67 2f       	mov	r22, r23
    29ec:	78 2f       	mov	r23, r24
    29ee:	88 27       	eor	r24, r24
    29f0:	b8 5f       	subi	r27, 0xF8	; 248
    29f2:	39 f0       	breq	.+14     	; 0x2a02 <__fixunssfsi+0x46>
    29f4:	b9 3f       	cpi	r27, 0xF9	; 249
    29f6:	cc f3       	brlt	.-14     	; 0x29ea <__fixunssfsi+0x2e>
    29f8:	86 95       	lsr	r24
    29fa:	77 95       	ror	r23
    29fc:	67 95       	ror	r22
    29fe:	b3 95       	inc	r27
    2a00:	d9 f7       	brne	.-10     	; 0x29f8 <__fixunssfsi+0x3c>
    2a02:	3e f4       	brtc	.+14     	; 0x2a12 <__fixunssfsi+0x56>
    2a04:	90 95       	com	r25
    2a06:	80 95       	com	r24
    2a08:	70 95       	com	r23
    2a0a:	61 95       	neg	r22
    2a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0e:	8f 4f       	sbci	r24, 0xFF	; 255
    2a10:	9f 4f       	sbci	r25, 0xFF	; 255
    2a12:	08 95       	ret

00002a14 <__fp_cmp>:
    2a14:	99 0f       	add	r25, r25
    2a16:	00 08       	sbc	r0, r0
    2a18:	55 0f       	add	r21, r21
    2a1a:	aa 0b       	sbc	r26, r26
    2a1c:	e0 e8       	ldi	r30, 0x80	; 128
    2a1e:	fe ef       	ldi	r31, 0xFE	; 254
    2a20:	16 16       	cp	r1, r22
    2a22:	17 06       	cpc	r1, r23
    2a24:	e8 07       	cpc	r30, r24
    2a26:	f9 07       	cpc	r31, r25
    2a28:	c0 f0       	brcs	.+48     	; 0x2a5a <__fp_cmp+0x46>
    2a2a:	12 16       	cp	r1, r18
    2a2c:	13 06       	cpc	r1, r19
    2a2e:	e4 07       	cpc	r30, r20
    2a30:	f5 07       	cpc	r31, r21
    2a32:	98 f0       	brcs	.+38     	; 0x2a5a <__fp_cmp+0x46>
    2a34:	62 1b       	sub	r22, r18
    2a36:	73 0b       	sbc	r23, r19
    2a38:	84 0b       	sbc	r24, r20
    2a3a:	95 0b       	sbc	r25, r21
    2a3c:	39 f4       	brne	.+14     	; 0x2a4c <__fp_cmp+0x38>
    2a3e:	0a 26       	eor	r0, r26
    2a40:	61 f0       	breq	.+24     	; 0x2a5a <__fp_cmp+0x46>
    2a42:	23 2b       	or	r18, r19
    2a44:	24 2b       	or	r18, r20
    2a46:	25 2b       	or	r18, r21
    2a48:	21 f4       	brne	.+8      	; 0x2a52 <__fp_cmp+0x3e>
    2a4a:	08 95       	ret
    2a4c:	0a 26       	eor	r0, r26
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <__fp_cmp+0x3e>
    2a50:	a1 40       	sbci	r26, 0x01	; 1
    2a52:	a6 95       	lsr	r26
    2a54:	8f ef       	ldi	r24, 0xFF	; 255
    2a56:	81 1d       	adc	r24, r1
    2a58:	81 1d       	adc	r24, r1
    2a5a:	08 95       	ret

00002a5c <__fp_inf>:
    2a5c:	97 f9       	bld	r25, 7
    2a5e:	9f 67       	ori	r25, 0x7F	; 127
    2a60:	80 e8       	ldi	r24, 0x80	; 128
    2a62:	70 e0       	ldi	r23, 0x00	; 0
    2a64:	60 e0       	ldi	r22, 0x00	; 0
    2a66:	08 95       	ret

00002a68 <__fp_nan>:
    2a68:	9f ef       	ldi	r25, 0xFF	; 255
    2a6a:	80 ec       	ldi	r24, 0xC0	; 192
    2a6c:	08 95       	ret

00002a6e <__fp_pscA>:
    2a6e:	00 24       	eor	r0, r0
    2a70:	0a 94       	dec	r0
    2a72:	16 16       	cp	r1, r22
    2a74:	17 06       	cpc	r1, r23
    2a76:	18 06       	cpc	r1, r24
    2a78:	09 06       	cpc	r0, r25
    2a7a:	08 95       	ret

00002a7c <__fp_pscB>:
    2a7c:	00 24       	eor	r0, r0
    2a7e:	0a 94       	dec	r0
    2a80:	12 16       	cp	r1, r18
    2a82:	13 06       	cpc	r1, r19
    2a84:	14 06       	cpc	r1, r20
    2a86:	05 06       	cpc	r0, r21
    2a88:	08 95       	ret

00002a8a <__fp_round>:
    2a8a:	09 2e       	mov	r0, r25
    2a8c:	03 94       	inc	r0
    2a8e:	00 0c       	add	r0, r0
    2a90:	11 f4       	brne	.+4      	; 0x2a96 <__fp_round+0xc>
    2a92:	88 23       	and	r24, r24
    2a94:	52 f0       	brmi	.+20     	; 0x2aaa <__fp_round+0x20>
    2a96:	bb 0f       	add	r27, r27
    2a98:	40 f4       	brcc	.+16     	; 0x2aaa <__fp_round+0x20>
    2a9a:	bf 2b       	or	r27, r31
    2a9c:	11 f4       	brne	.+4      	; 0x2aa2 <__fp_round+0x18>
    2a9e:	60 ff       	sbrs	r22, 0
    2aa0:	04 c0       	rjmp	.+8      	; 0x2aaa <__fp_round+0x20>
    2aa2:	6f 5f       	subi	r22, 0xFF	; 255
    2aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa6:	8f 4f       	sbci	r24, 0xFF	; 255
    2aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aaa:	08 95       	ret

00002aac <__fp_split3>:
    2aac:	57 fd       	sbrc	r21, 7
    2aae:	90 58       	subi	r25, 0x80	; 128
    2ab0:	44 0f       	add	r20, r20
    2ab2:	55 1f       	adc	r21, r21
    2ab4:	59 f0       	breq	.+22     	; 0x2acc <__fp_splitA+0x10>
    2ab6:	5f 3f       	cpi	r21, 0xFF	; 255
    2ab8:	71 f0       	breq	.+28     	; 0x2ad6 <__fp_splitA+0x1a>
    2aba:	47 95       	ror	r20

00002abc <__fp_splitA>:
    2abc:	88 0f       	add	r24, r24
    2abe:	97 fb       	bst	r25, 7
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	61 f0       	breq	.+24     	; 0x2adc <__fp_splitA+0x20>
    2ac4:	9f 3f       	cpi	r25, 0xFF	; 255
    2ac6:	79 f0       	breq	.+30     	; 0x2ae6 <__fp_splitA+0x2a>
    2ac8:	87 95       	ror	r24
    2aca:	08 95       	ret
    2acc:	12 16       	cp	r1, r18
    2ace:	13 06       	cpc	r1, r19
    2ad0:	14 06       	cpc	r1, r20
    2ad2:	55 1f       	adc	r21, r21
    2ad4:	f2 cf       	rjmp	.-28     	; 0x2aba <__fp_split3+0xe>
    2ad6:	46 95       	lsr	r20
    2ad8:	f1 df       	rcall	.-30     	; 0x2abc <__fp_splitA>
    2ada:	08 c0       	rjmp	.+16     	; 0x2aec <__fp_splitA+0x30>
    2adc:	16 16       	cp	r1, r22
    2ade:	17 06       	cpc	r1, r23
    2ae0:	18 06       	cpc	r1, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	f1 cf       	rjmp	.-30     	; 0x2ac8 <__fp_splitA+0xc>
    2ae6:	86 95       	lsr	r24
    2ae8:	71 05       	cpc	r23, r1
    2aea:	61 05       	cpc	r22, r1
    2aec:	08 94       	sec
    2aee:	08 95       	ret

00002af0 <__fp_zero>:
    2af0:	e8 94       	clt

00002af2 <__fp_szero>:
    2af2:	bb 27       	eor	r27, r27
    2af4:	66 27       	eor	r22, r22
    2af6:	77 27       	eor	r23, r23
    2af8:	cb 01       	movw	r24, r22
    2afa:	97 f9       	bld	r25, 7
    2afc:	08 95       	ret

00002afe <__gesf2>:
    2afe:	8a df       	rcall	.-236    	; 0x2a14 <__fp_cmp>
    2b00:	08 f4       	brcc	.+2      	; 0x2b04 <__gesf2+0x6>
    2b02:	8f ef       	ldi	r24, 0xFF	; 255
    2b04:	08 95       	ret

00002b06 <__mulsf3>:
    2b06:	0b d0       	rcall	.+22     	; 0x2b1e <__mulsf3x>
    2b08:	c0 cf       	rjmp	.-128    	; 0x2a8a <__fp_round>
    2b0a:	b1 df       	rcall	.-158    	; 0x2a6e <__fp_pscA>
    2b0c:	28 f0       	brcs	.+10     	; 0x2b18 <__mulsf3+0x12>
    2b0e:	b6 df       	rcall	.-148    	; 0x2a7c <__fp_pscB>
    2b10:	18 f0       	brcs	.+6      	; 0x2b18 <__mulsf3+0x12>
    2b12:	95 23       	and	r25, r21
    2b14:	09 f0       	breq	.+2      	; 0x2b18 <__mulsf3+0x12>
    2b16:	a2 cf       	rjmp	.-188    	; 0x2a5c <__fp_inf>
    2b18:	a7 cf       	rjmp	.-178    	; 0x2a68 <__fp_nan>
    2b1a:	11 24       	eor	r1, r1
    2b1c:	ea cf       	rjmp	.-44     	; 0x2af2 <__fp_szero>

00002b1e <__mulsf3x>:
    2b1e:	c6 df       	rcall	.-116    	; 0x2aac <__fp_split3>
    2b20:	a0 f3       	brcs	.-24     	; 0x2b0a <__mulsf3+0x4>

00002b22 <__mulsf3_pse>:
    2b22:	95 9f       	mul	r25, r21
    2b24:	d1 f3       	breq	.-12     	; 0x2b1a <__mulsf3+0x14>
    2b26:	95 0f       	add	r25, r21
    2b28:	50 e0       	ldi	r21, 0x00	; 0
    2b2a:	55 1f       	adc	r21, r21
    2b2c:	62 9f       	mul	r22, r18
    2b2e:	f0 01       	movw	r30, r0
    2b30:	72 9f       	mul	r23, r18
    2b32:	bb 27       	eor	r27, r27
    2b34:	f0 0d       	add	r31, r0
    2b36:	b1 1d       	adc	r27, r1
    2b38:	63 9f       	mul	r22, r19
    2b3a:	aa 27       	eor	r26, r26
    2b3c:	f0 0d       	add	r31, r0
    2b3e:	b1 1d       	adc	r27, r1
    2b40:	aa 1f       	adc	r26, r26
    2b42:	64 9f       	mul	r22, r20
    2b44:	66 27       	eor	r22, r22
    2b46:	b0 0d       	add	r27, r0
    2b48:	a1 1d       	adc	r26, r1
    2b4a:	66 1f       	adc	r22, r22
    2b4c:	82 9f       	mul	r24, r18
    2b4e:	22 27       	eor	r18, r18
    2b50:	b0 0d       	add	r27, r0
    2b52:	a1 1d       	adc	r26, r1
    2b54:	62 1f       	adc	r22, r18
    2b56:	73 9f       	mul	r23, r19
    2b58:	b0 0d       	add	r27, r0
    2b5a:	a1 1d       	adc	r26, r1
    2b5c:	62 1f       	adc	r22, r18
    2b5e:	83 9f       	mul	r24, r19
    2b60:	a0 0d       	add	r26, r0
    2b62:	61 1d       	adc	r22, r1
    2b64:	22 1f       	adc	r18, r18
    2b66:	74 9f       	mul	r23, r20
    2b68:	33 27       	eor	r19, r19
    2b6a:	a0 0d       	add	r26, r0
    2b6c:	61 1d       	adc	r22, r1
    2b6e:	23 1f       	adc	r18, r19
    2b70:	84 9f       	mul	r24, r20
    2b72:	60 0d       	add	r22, r0
    2b74:	21 1d       	adc	r18, r1
    2b76:	82 2f       	mov	r24, r18
    2b78:	76 2f       	mov	r23, r22
    2b7a:	6a 2f       	mov	r22, r26
    2b7c:	11 24       	eor	r1, r1
    2b7e:	9f 57       	subi	r25, 0x7F	; 127
    2b80:	50 40       	sbci	r21, 0x00	; 0
    2b82:	8a f0       	brmi	.+34     	; 0x2ba6 <__mulsf3_pse+0x84>
    2b84:	e1 f0       	breq	.+56     	; 0x2bbe <__mulsf3_pse+0x9c>
    2b86:	88 23       	and	r24, r24
    2b88:	4a f0       	brmi	.+18     	; 0x2b9c <__mulsf3_pse+0x7a>
    2b8a:	ee 0f       	add	r30, r30
    2b8c:	ff 1f       	adc	r31, r31
    2b8e:	bb 1f       	adc	r27, r27
    2b90:	66 1f       	adc	r22, r22
    2b92:	77 1f       	adc	r23, r23
    2b94:	88 1f       	adc	r24, r24
    2b96:	91 50       	subi	r25, 0x01	; 1
    2b98:	50 40       	sbci	r21, 0x00	; 0
    2b9a:	a9 f7       	brne	.-22     	; 0x2b86 <__mulsf3_pse+0x64>
    2b9c:	9e 3f       	cpi	r25, 0xFE	; 254
    2b9e:	51 05       	cpc	r21, r1
    2ba0:	70 f0       	brcs	.+28     	; 0x2bbe <__mulsf3_pse+0x9c>
    2ba2:	5c cf       	rjmp	.-328    	; 0x2a5c <__fp_inf>
    2ba4:	a6 cf       	rjmp	.-180    	; 0x2af2 <__fp_szero>
    2ba6:	5f 3f       	cpi	r21, 0xFF	; 255
    2ba8:	ec f3       	brlt	.-6      	; 0x2ba4 <__mulsf3_pse+0x82>
    2baa:	98 3e       	cpi	r25, 0xE8	; 232
    2bac:	dc f3       	brlt	.-10     	; 0x2ba4 <__mulsf3_pse+0x82>
    2bae:	86 95       	lsr	r24
    2bb0:	77 95       	ror	r23
    2bb2:	67 95       	ror	r22
    2bb4:	b7 95       	ror	r27
    2bb6:	f7 95       	ror	r31
    2bb8:	e7 95       	ror	r30
    2bba:	9f 5f       	subi	r25, 0xFF	; 255
    2bbc:	c1 f7       	brne	.-16     	; 0x2bae <__mulsf3_pse+0x8c>
    2bbe:	fe 2b       	or	r31, r30
    2bc0:	88 0f       	add	r24, r24
    2bc2:	91 1d       	adc	r25, r1
    2bc4:	96 95       	lsr	r25
    2bc6:	87 95       	ror	r24
    2bc8:	97 f9       	bld	r25, 7
    2bca:	08 95       	ret

00002bcc <strcmp>:
    2bcc:	fb 01       	movw	r30, r22
    2bce:	dc 01       	movw	r26, r24
    2bd0:	8d 91       	ld	r24, X+
    2bd2:	01 90       	ld	r0, Z+
    2bd4:	80 19       	sub	r24, r0
    2bd6:	01 10       	cpse	r0, r1
    2bd8:	d9 f3       	breq	.-10     	; 0x2bd0 <strcmp+0x4>
    2bda:	99 0b       	sbc	r25, r25
    2bdc:	08 95       	ret

00002bde <eeprom_read_byte>:
    2bde:	e1 99       	sbic	0x1c, 1	; 28
    2be0:	fe cf       	rjmp	.-4      	; 0x2bde <eeprom_read_byte>
    2be2:	9f bb       	out	0x1f, r25	; 31
    2be4:	8e bb       	out	0x1e, r24	; 30
    2be6:	e0 9a       	sbi	0x1c, 0	; 28
    2be8:	99 27       	eor	r25, r25
    2bea:	8d b3       	in	r24, 0x1d	; 29
    2bec:	08 95       	ret

00002bee <eeprom_update_byte>:
    2bee:	26 2f       	mov	r18, r22

00002bf0 <eeprom_update_r18>:
    2bf0:	e1 99       	sbic	0x1c, 1	; 28
    2bf2:	fe cf       	rjmp	.-4      	; 0x2bf0 <eeprom_update_r18>
    2bf4:	9f bb       	out	0x1f, r25	; 31
    2bf6:	8e bb       	out	0x1e, r24	; 30
    2bf8:	e0 9a       	sbi	0x1c, 0	; 28
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	0d b2       	in	r0, 0x1d	; 29
    2bfe:	02 16       	cp	r0, r18
    2c00:	31 f0       	breq	.+12     	; 0x2c0e <eeprom_update_r18+0x1e>
    2c02:	2d bb       	out	0x1d, r18	; 29
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	e2 9a       	sbi	0x1c, 2	; 28
    2c0a:	e1 9a       	sbi	0x1c, 1	; 28
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	08 95       	ret

00002c10 <_exit>:
    2c10:	f8 94       	cli

00002c12 <__stop_program>:
    2c12:	ff cf       	rjmp	.-2      	; 0x2c12 <__stop_program>
