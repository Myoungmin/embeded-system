
Snake_game2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005b8  00800100  000027ac  00002840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  008006b8  008006b8  00002df8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a5d  00000000  00000000  00003094  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1c  00000000  00000000  00004af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015ff  00000000  00000000  0000570d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000083c  00000000  00000000  00006d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000828  00000000  00000000  00007548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001178  00000000  00000000  00007d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00008ee8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	35 c1       	rjmp	.+618    	; 0x26c <__ctors_end>
       2:	00 00       	nop
       4:	52 c1       	rjmp	.+676    	; 0x2aa <__bad_interrupt>
       6:	00 00       	nop
       8:	50 c1       	rjmp	.+672    	; 0x2aa <__bad_interrupt>
       a:	00 00       	nop
       c:	4e c1       	rjmp	.+668    	; 0x2aa <__bad_interrupt>
       e:	00 00       	nop
      10:	4c c1       	rjmp	.+664    	; 0x2aa <__bad_interrupt>
      12:	00 00       	nop
      14:	d2 c6       	rjmp	.+3492   	; 0xdba <__vector_5>
      16:	00 00       	nop
      18:	bc c5       	rjmp	.+2936   	; 0xb92 <__vector_6>
      1a:	00 00       	nop
      1c:	16 c6       	rjmp	.+3116   	; 0xc4a <__vector_7>
      1e:	00 00       	nop
      20:	70 c6       	rjmp	.+3296   	; 0xd02 <__vector_8>
      22:	00 00       	nop
      24:	42 c1       	rjmp	.+644    	; 0x2aa <__bad_interrupt>
      26:	00 00       	nop
      28:	40 c1       	rjmp	.+640    	; 0x2aa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3e c1       	rjmp	.+636    	; 0x2aa <__bad_interrupt>
      2e:	00 00       	nop
      30:	3c c1       	rjmp	.+632    	; 0x2aa <__bad_interrupt>
      32:	00 00       	nop
      34:	3a c1       	rjmp	.+628    	; 0x2aa <__bad_interrupt>
      36:	00 00       	nop
      38:	38 c1       	rjmp	.+624    	; 0x2aa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	36 c1       	rjmp	.+620    	; 0x2aa <__bad_interrupt>
      3e:	00 00       	nop
      40:	34 c1       	rjmp	.+616    	; 0x2aa <__bad_interrupt>
      42:	00 00       	nop
      44:	32 c1       	rjmp	.+612    	; 0x2aa <__bad_interrupt>
      46:	00 00       	nop
      48:	30 c1       	rjmp	.+608    	; 0x2aa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2e c1       	rjmp	.+604    	; 0x2aa <__bad_interrupt>
      4e:	00 00       	nop
      50:	2c c1       	rjmp	.+600    	; 0x2aa <__bad_interrupt>
      52:	00 00       	nop
      54:	2a c1       	rjmp	.+596    	; 0x2aa <__bad_interrupt>
      56:	00 00       	nop
      58:	28 c1       	rjmp	.+592    	; 0x2aa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	26 c1       	rjmp	.+588    	; 0x2aa <__bad_interrupt>
      5e:	00 00       	nop
      60:	24 c1       	rjmp	.+584    	; 0x2aa <__bad_interrupt>
      62:	00 00       	nop
      64:	22 c1       	rjmp	.+580    	; 0x2aa <__bad_interrupt>
      66:	00 00       	nop
      68:	20 c1       	rjmp	.+576    	; 0x2aa <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1e c1       	rjmp	.+572    	; 0x2aa <__bad_interrupt>
      6e:	00 00       	nop
      70:	1c c1       	rjmp	.+568    	; 0x2aa <__bad_interrupt>
      72:	00 00       	nop
      74:	1a c1       	rjmp	.+564    	; 0x2aa <__bad_interrupt>
      76:	00 00       	nop
      78:	18 c1       	rjmp	.+560    	; 0x2aa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	16 c1       	rjmp	.+556    	; 0x2aa <__bad_interrupt>
      7e:	00 00       	nop
      80:	14 c1       	rjmp	.+552    	; 0x2aa <__bad_interrupt>
      82:	00 00       	nop
      84:	12 c1       	rjmp	.+548    	; 0x2aa <__bad_interrupt>
      86:	00 00       	nop
      88:	10 c1       	rjmp	.+544    	; 0x2aa <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	00 00       	nop
      92:	00 5f       	subi	r16, 0xF0	; 240
      94:	00 00       	nop
      96:	00 07       	cpc	r16, r16
      98:	00 07       	cpc	r16, r16
      9a:	00 14       	cp	r0, r0
      9c:	7f 14       	cp	r7, r15
      9e:	7f 14       	cp	r7, r15
      a0:	24 2a       	or	r2, r20
      a2:	7f 2a       	or	r7, r31
      a4:	12 23       	and	r17, r18
      a6:	13 08       	sbc	r1, r3
      a8:	64 62       	ori	r22, 0x24	; 36
      aa:	36 49       	sbci	r19, 0x96	; 150
      ac:	55 22       	and	r5, r21
      ae:	50 00       	.word	0x0050	; ????
      b0:	05 03       	mulsu	r16, r21
      b2:	00 00       	nop
      b4:	00 1c       	adc	r0, r0
      b6:	22 41       	sbci	r18, 0x12	; 18
      b8:	00 00       	nop
      ba:	41 22       	and	r4, r17
      bc:	1c 00       	.word	0x001c	; ????
      be:	14 08       	sbc	r1, r4
      c0:	3e 08       	sbc	r3, r14
      c2:	14 08       	sbc	r1, r4
      c4:	08 3e       	cpi	r16, 0xE8	; 232
      c6:	08 08       	sbc	r0, r8
      c8:	00 50       	subi	r16, 0x00	; 0
      ca:	30 00       	.word	0x0030	; ????
      cc:	00 08       	sbc	r0, r0
      ce:	08 08       	sbc	r0, r8
      d0:	08 08       	sbc	r0, r8
      d2:	00 60       	ori	r16, 0x00	; 0
      d4:	60 00       	.word	0x0060	; ????
      d6:	00 20       	and	r0, r0
      d8:	10 08       	sbc	r1, r0
      da:	04 02       	muls	r16, r20
      dc:	3e 51       	subi	r19, 0x1E	; 30
      de:	49 45       	sbci	r20, 0x59	; 89
      e0:	3e 00       	.word	0x003e	; ????
      e2:	42 7f       	andi	r20, 0xF2	; 242
      e4:	40 00       	.word	0x0040	; ????
      e6:	42 61       	ori	r20, 0x12	; 18
      e8:	51 49       	sbci	r21, 0x91	; 145
      ea:	46 21       	and	r20, r6
      ec:	41 45       	sbci	r20, 0x51	; 81
      ee:	4b 31       	cpi	r20, 0x1B	; 27
      f0:	18 14       	cp	r1, r8
      f2:	12 7f       	andi	r17, 0xF2	; 242
      f4:	10 27       	eor	r17, r16
      f6:	45 45       	sbci	r20, 0x55	; 85
      f8:	45 39       	cpi	r20, 0x95	; 149
      fa:	3c 4a       	sbci	r19, 0xAC	; 172
      fc:	49 49       	sbci	r20, 0x99	; 153
      fe:	30 01       	movw	r6, r0
     100:	71 09       	sbc	r23, r1
     102:	05 03       	mulsu	r16, r21
     104:	36 49       	sbci	r19, 0x96	; 150
     106:	49 49       	sbci	r20, 0x99	; 153
     108:	36 06       	cpc	r3, r22
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	29 1e       	adc	r2, r25
     10e:	00 36       	cpi	r16, 0x60	; 96
     110:	36 00       	.word	0x0036	; ????
     112:	00 00       	nop
     114:	56 36       	cpi	r21, 0x66	; 102
     116:	00 00       	nop
     118:	08 14       	cp	r0, r8
     11a:	22 41       	sbci	r18, 0x12	; 18
     11c:	00 14       	cp	r0, r0
     11e:	14 14       	cp	r1, r4
     120:	14 14       	cp	r1, r4
     122:	00 41       	sbci	r16, 0x10	; 16
     124:	22 14       	cp	r2, r2
     126:	08 02       	muls	r16, r24
     128:	01 51       	subi	r16, 0x11	; 17
     12a:	09 06       	cpc	r0, r25
     12c:	32 49       	sbci	r19, 0x92	; 146
     12e:	79 41       	sbci	r23, 0x19	; 25
     130:	3e 7e       	andi	r19, 0xEE	; 238
     132:	11 11       	cpse	r17, r1
     134:	11 7e       	andi	r17, 0xE1	; 225
     136:	7f 49       	sbci	r23, 0x9F	; 159
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	36 3e       	cpi	r19, 0xE6	; 230
     13c:	41 41       	sbci	r20, 0x11	; 17
     13e:	41 22       	and	r4, r17
     140:	7f 41       	sbci	r23, 0x1F	; 31
     142:	41 22       	and	r4, r17
     144:	1c 7f       	andi	r17, 0xFC	; 252
     146:	49 49       	sbci	r20, 0x99	; 153
     148:	49 41       	sbci	r20, 0x19	; 25
     14a:	7f 09       	sbc	r23, r15
     14c:	09 09       	sbc	r16, r9
     14e:	01 3e       	cpi	r16, 0xE1	; 225
     150:	41 49       	sbci	r20, 0x91	; 145
     152:	49 7a       	andi	r20, 0xA9	; 169
     154:	7f 08       	sbc	r7, r15
     156:	08 08       	sbc	r0, r8
     158:	7f 00       	.word	0x007f	; ????
     15a:	41 7f       	andi	r20, 0xF1	; 241
     15c:	41 00       	.word	0x0041	; ????
     15e:	20 40       	sbci	r18, 0x00	; 0
     160:	41 3f       	cpi	r20, 0xF1	; 241
     162:	01 7f       	andi	r16, 0xF1	; 241
     164:	08 14       	cp	r0, r8
     166:	22 41       	sbci	r18, 0x12	; 18
     168:	7f 40       	sbci	r23, 0x0F	; 15
     16a:	40 40       	sbci	r20, 0x00	; 0
     16c:	40 7f       	andi	r20, 0xF0	; 240
     16e:	02 0c       	add	r0, r2
     170:	02 7f       	andi	r16, 0xF2	; 242
     172:	7f 04       	cpc	r7, r15
     174:	08 10       	cpse	r0, r8
     176:	7f 3e       	cpi	r23, 0xEF	; 239
     178:	41 41       	sbci	r20, 0x11	; 17
     17a:	41 3e       	cpi	r20, 0xE1	; 225
     17c:	7f 09       	sbc	r23, r15
     17e:	09 09       	sbc	r16, r9
     180:	06 3e       	cpi	r16, 0xE6	; 230
     182:	41 51       	subi	r20, 0x11	; 17
     184:	21 5e       	subi	r18, 0xE1	; 225
     186:	7f 09       	sbc	r23, r15
     188:	19 29       	or	r17, r9
     18a:	46 46       	sbci	r20, 0x66	; 102
     18c:	49 49       	sbci	r20, 0x99	; 153
     18e:	49 31       	cpi	r20, 0x19	; 25
     190:	01 01       	movw	r0, r2
     192:	7f 01       	movw	r14, r30
     194:	01 3f       	cpi	r16, 0xF1	; 241
     196:	40 40       	sbci	r20, 0x00	; 0
     198:	40 3f       	cpi	r20, 0xF0	; 240
     19a:	1f 20       	and	r1, r15
     19c:	40 20       	and	r4, r0
     19e:	1f 3f       	cpi	r17, 0xFF	; 255
     1a0:	40 38       	cpi	r20, 0x80	; 128
     1a2:	40 3f       	cpi	r20, 0xF0	; 240
     1a4:	63 14       	cp	r6, r3
     1a6:	08 14       	cp	r0, r8
     1a8:	63 07       	cpc	r22, r19
     1aa:	08 70       	andi	r16, 0x08	; 8
     1ac:	08 07       	cpc	r16, r24
     1ae:	61 51       	subi	r22, 0x11	; 17
     1b0:	49 45       	sbci	r20, 0x59	; 89
     1b2:	43 00       	.word	0x0043	; ????
     1b4:	7f 41       	sbci	r23, 0x1F	; 31
     1b6:	41 00       	.word	0x0041	; ????
     1b8:	02 04       	cpc	r0, r2
     1ba:	08 10       	cpse	r0, r8
     1bc:	20 00       	.word	0x0020	; ????
     1be:	41 41       	sbci	r20, 0x11	; 17
     1c0:	7f 00       	.word	0x007f	; ????
     1c2:	04 02       	muls	r16, r20
     1c4:	01 02       	muls	r16, r17
     1c6:	04 40       	sbci	r16, 0x04	; 4
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	40 40       	sbci	r20, 0x00	; 0
     1cc:	00 01       	movw	r0, r0
     1ce:	02 04       	cpc	r0, r2
     1d0:	00 20       	and	r0, r0
     1d2:	54 54       	subi	r21, 0x44	; 68
     1d4:	54 78       	andi	r21, 0x84	; 132
     1d6:	7f 48       	sbci	r23, 0x8F	; 143
     1d8:	44 44       	sbci	r20, 0x44	; 68
     1da:	38 38       	cpi	r19, 0x88	; 136
     1dc:	44 44       	sbci	r20, 0x44	; 68
     1de:	44 20       	and	r4, r4
     1e0:	38 44       	sbci	r19, 0x48	; 72
     1e2:	44 48       	sbci	r20, 0x84	; 132
     1e4:	7f 38       	cpi	r23, 0x8F	; 143
     1e6:	54 54       	subi	r21, 0x44	; 68
     1e8:	54 18       	sub	r5, r4
     1ea:	08 7e       	andi	r16, 0xE8	; 232
     1ec:	09 01       	movw	r0, r18
     1ee:	02 0c       	add	r0, r2
     1f0:	52 52       	subi	r21, 0x22	; 34
     1f2:	52 3e       	cpi	r21, 0xE2	; 226
     1f4:	7f 08       	sbc	r7, r15
     1f6:	04 04       	cpc	r0, r4
     1f8:	78 00       	.word	0x0078	; ????
     1fa:	44 7d       	andi	r20, 0xD4	; 212
     1fc:	40 00       	.word	0x0040	; ????
     1fe:	20 40       	sbci	r18, 0x00	; 0
     200:	44 3d       	cpi	r20, 0xD4	; 212
     202:	00 7f       	andi	r16, 0xF0	; 240
     204:	10 28       	or	r1, r0
     206:	44 00       	.word	0x0044	; ????
     208:	00 41       	sbci	r16, 0x10	; 16
     20a:	7f 40       	sbci	r23, 0x0F	; 15
     20c:	00 7c       	andi	r16, 0xC0	; 192
     20e:	04 18       	sub	r0, r4
     210:	04 78       	andi	r16, 0x84	; 132
     212:	7c 08       	sbc	r7, r12
     214:	04 04       	cpc	r0, r4
     216:	78 38       	cpi	r23, 0x88	; 136
     218:	44 44       	sbci	r20, 0x44	; 68
     21a:	44 38       	cpi	r20, 0x84	; 132
     21c:	7c 14       	cp	r7, r12
     21e:	14 14       	cp	r1, r4
     220:	08 08       	sbc	r0, r8
     222:	14 14       	cp	r1, r4
     224:	18 7c       	andi	r17, 0xC8	; 200
     226:	7c 08       	sbc	r7, r12
     228:	04 04       	cpc	r0, r4
     22a:	08 48       	sbci	r16, 0x88	; 136
     22c:	54 54       	subi	r21, 0x44	; 68
     22e:	54 20       	and	r5, r4
     230:	04 3f       	cpi	r16, 0xF4	; 244
     232:	44 40       	sbci	r20, 0x04	; 4
     234:	20 3c       	cpi	r18, 0xC0	; 192
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	20 7c       	andi	r18, 0xC0	; 192
     23a:	1c 20       	and	r1, r12
     23c:	40 20       	and	r4, r0
     23e:	1c 3c       	cpi	r17, 0xCC	; 204
     240:	40 30       	cpi	r20, 0x00	; 0
     242:	40 3c       	cpi	r20, 0xC0	; 192
     244:	44 28       	or	r4, r4
     246:	10 28       	or	r1, r0
     248:	44 0c       	add	r4, r4
     24a:	50 50       	subi	r21, 0x00	; 0
     24c:	50 3c       	cpi	r21, 0xC0	; 192
     24e:	44 64       	ori	r20, 0x44	; 68
     250:	54 4c       	sbci	r21, 0xC4	; 196
     252:	44 00       	.word	0x0044	; ????
     254:	08 36       	cpi	r16, 0x68	; 104
     256:	41 00       	.word	0x0041	; ????
     258:	00 00       	nop
     25a:	7f 00       	.word	0x007f	; ????
     25c:	00 00       	nop
     25e:	41 36       	cpi	r20, 0x61	; 97
     260:	08 00       	.word	0x0008	; ????
     262:	10 08       	sbc	r1, r0
     264:	08 10       	cpse	r0, r8
     266:	08 78       	andi	r16, 0x88	; 136
     268:	46 41       	sbci	r20, 0x16	; 22
     26a:	46 78       	andi	r20, 0x86	; 134

0000026c <__ctors_end>:
     26c:	11 24       	eor	r1, r1
     26e:	1f be       	out	0x3f, r1	; 63
     270:	cf ef       	ldi	r28, 0xFF	; 255
     272:	d0 e1       	ldi	r29, 0x10	; 16
     274:	de bf       	out	0x3e, r29	; 62
     276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
     278:	16 e0       	ldi	r17, 0x06	; 6
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b1 e0       	ldi	r27, 0x01	; 1
     27e:	ec ea       	ldi	r30, 0xAC	; 172
     280:	f7 e2       	ldi	r31, 0x27	; 39
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	0b bf       	out	0x3b, r16	; 59
     286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
     288:	07 90       	elpm	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	a8 3b       	cpi	r26, 0xB8	; 184
     28e:	b1 07       	cpc	r27, r17
     290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
     292:	27 e0       	ldi	r18, 0x07	; 7
     294:	a8 eb       	ldi	r26, 0xB8	; 184
     296:	b6 e0       	ldi	r27, 0x06	; 6
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	a1 34       	cpi	r26, 0x41	; 65
     29e:	b2 07       	cpc	r27, r18
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
     2a2:	0e 94 13 0c 	call	0x1826	; 0x1826 <main>
     2a6:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <_exit>

000002aa <__bad_interrupt>:
     2aa:	aa ce       	rjmp	.-684    	; 0x0 <__vectors>

000002ac <get_ch_data>:
    {0x10, 0x08, 0x08, 0x10, 0x08}, // 7e ~
    {0x78, 0x46, 0x41, 0x46, 0x78}, // 7f 
};

void get_ch_data(char ch, uint8_t *buffer)
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	28 97       	sbiw	r28, 0x08	; 8
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	8e 83       	std	Y+6, r24	; 0x06
     2c2:	78 87       	std	Y+8, r23	; 0x08
     2c4:	6f 83       	std	Y+7, r22	; 0x07
    int     i;

    for (i=0; i<5; i++)
     2c6:	1a 82       	std	Y+2, r1	; 0x02
     2c8:	19 82       	std	Y+1, r1	; 0x01
     2ca:	29 c0       	rjmp	.+82     	; 0x31e <get_ch_data+0x72>
    {
        *buffer++ = pgm_read_byte(&ASCII[ch - ' '][i]);
     2cc:	2f 81       	ldd	r18, Y+7	; 0x07
     2ce:	38 85       	ldd	r19, Y+8	; 0x08
     2d0:	c9 01       	movw	r24, r18
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	98 87       	std	Y+8, r25	; 0x08
     2d6:	8f 83       	std	Y+7, r24	; 0x07
     2d8:	8e 81       	ldd	r24, Y+6	; 0x06
     2da:	08 2e       	mov	r0, r24
     2dc:	00 0c       	add	r0, r0
     2de:	99 0b       	sbc	r25, r25
     2e0:	ac 01       	movw	r20, r24
     2e2:	40 52       	subi	r20, 0x20	; 32
     2e4:	51 09       	sbc	r21, r1
     2e6:	ca 01       	movw	r24, r20
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	84 0f       	add	r24, r20
     2f2:	95 1f       	adc	r25, r21
     2f4:	49 81       	ldd	r20, Y+1	; 0x01
     2f6:	5a 81       	ldd	r21, Y+2	; 0x02
     2f8:	84 0f       	add	r24, r20
     2fa:	95 1f       	adc	r25, r21
     2fc:	84 57       	subi	r24, 0x74	; 116
     2fe:	9f 4f       	sbci	r25, 0xFF	; 255
     300:	9c 83       	std	Y+4, r25	; 0x04
     302:	8b 83       	std	Y+3, r24	; 0x03
     304:	8b 81       	ldd	r24, Y+3	; 0x03
     306:	9c 81       	ldd	r25, Y+4	; 0x04
     308:	fc 01       	movw	r30, r24
     30a:	84 91       	lpm	r24, Z
     30c:	8d 83       	std	Y+5, r24	; 0x05
     30e:	8d 81       	ldd	r24, Y+5	; 0x05
     310:	f9 01       	movw	r30, r18
     312:	80 83       	st	Z, r24

void get_ch_data(char ch, uint8_t *buffer)
{
    int     i;

    for (i=0; i<5; i++)
     314:	89 81       	ldd	r24, Y+1	; 0x01
     316:	9a 81       	ldd	r25, Y+2	; 0x02
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	9a 83       	std	Y+2, r25	; 0x02
     31c:	89 83       	std	Y+1, r24	; 0x01
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	9a 81       	ldd	r25, Y+2	; 0x02
     322:	05 97       	sbiw	r24, 0x05	; 5
     324:	9c f2       	brlt	.-90     	; 0x2cc <get_ch_data+0x20>
    {
        *buffer++ = pgm_read_byte(&ASCII[ch - ' '][i]);
    }
    *buffer = 0;
     326:	8f 81       	ldd	r24, Y+7	; 0x07
     328:	98 85       	ldd	r25, Y+8	; 0x08
     32a:	fc 01       	movw	r30, r24
     32c:	10 82       	st	Z, r1
}
     32e:	00 00       	nop
     330:	28 96       	adiw	r28, 0x08	; 8
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	de bf       	out	0x3e, r29	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	cd bf       	out	0x3d, r28	; 61
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <twiStart>:
        return -1;

    twi_stop();

    return 0;
}
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	80 e7       	ldi	r24, 0x70	; 112
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	24 ea       	ldi	r18, 0xA4	; 164
     350:	fc 01       	movw	r30, r24
     352:	24 83       	std	Z+4, r18	; 0x04
     354:	00 00       	nop
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <twiStop>:
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	80 e7       	ldi	r24, 0x70	; 112
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	24 e9       	ldi	r18, 0x94	; 148
     36a:	fc 01       	movw	r30, r24
     36c:	24 83       	std	Z+4, r18	; 0x04
     36e:	00 00       	nop
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	08 95       	ret

00000376 <twiWaitAck>:
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	00 00       	nop
     380:	80 e7       	ldi	r24, 0x70	; 112
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	fc 01       	movw	r30, r24
     386:	84 81       	ldd	r24, Z+4	; 0x04
     388:	88 23       	and	r24, r24
     38a:	d4 f7       	brge	.-12     	; 0x380 <twiWaitAck+0xa>
     38c:	00 00       	nop
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <twiChkAck>:
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	80 e7       	ldi	r24, 0x70	; 112
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	fc 01       	movw	r30, r24
     3a2:	81 81       	ldd	r24, Z+1	; 0x01
     3a4:	88 7f       	andi	r24, 0xF8	; 248
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret

000003ac <twiSendByte>:
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	1f 92       	push	r1
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	80 e7       	ldi	r24, 0x70	; 112
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	29 81       	ldd	r18, Y+1	; 0x01
     3be:	fc 01       	movw	r30, r24
     3c0:	23 83       	std	Z+3, r18	; 0x03
     3c2:	80 e7       	ldi	r24, 0x70	; 112
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	24 e8       	ldi	r18, 0x84	; 132
     3c8:	fc 01       	movw	r30, r24
     3ca:	24 83       	std	Z+4, r18	; 0x04
     3cc:	00 00       	nop
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <twi_start>:
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	b1 df       	rcall	.-158    	; 0x342 <twiStart>
     3e0:	ca df       	rcall	.-108    	; 0x376 <twiWaitAck>
     3e2:	d8 df       	rcall	.-80     	; 0x394 <twiChkAck>
     3e4:	88 30       	cpi	r24, 0x08	; 8
     3e6:	19 f0       	breq	.+6      	; 0x3ee <twi_start+0x18>
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
     3ea:	9f ef       	ldi	r25, 0xFF	; 255
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <twi_start+0x1c>
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <twi_stop>:
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	ad df       	rcall	.-166    	; 0x35c <twiStop>
     402:	00 00       	nop
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <twi_send_dev_addr>:
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	00 d0       	rcall	.+0      	; 0x410 <twi_send_dev_addr+0x6>
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	8a 83       	std	Y+2, r24	; 0x02
     416:	8a 81       	ldd	r24, Y+2	; 0x02
     418:	88 2f       	mov	r24, r24
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	81 70       	andi	r24, 0x01	; 1
     41e:	99 27       	eor	r25, r25
     420:	89 2b       	or	r24, r25
     422:	11 f0       	breq	.+4      	; 0x428 <twi_send_dev_addr+0x1e>
     424:	80 e4       	ldi	r24, 0x40	; 64
     426:	01 c0       	rjmp	.+2      	; 0x42a <twi_send_dev_addr+0x20>
     428:	88 e1       	ldi	r24, 0x18	; 24
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	8a 81       	ldd	r24, Y+2	; 0x02
     42e:	be df       	rcall	.-132    	; 0x3ac <twiSendByte>
     430:	a2 df       	rcall	.-188    	; 0x376 <twiWaitAck>
     432:	b0 df       	rcall	.-160    	; 0x394 <twiChkAck>
     434:	98 2f       	mov	r25, r24
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	98 17       	cp	r25, r24
     43a:	19 f0       	breq	.+6      	; 0x442 <twi_send_dev_addr+0x38>
     43c:	8f ef       	ldi	r24, 0xFF	; 255
     43e:	9f ef       	ldi	r25, 0xFF	; 255
     440:	02 c0       	rjmp	.+4      	; 0x446 <twi_send_dev_addr+0x3c>
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <twi_send_data>:
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	1f 92       	push	r1
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	a6 df       	rcall	.-180    	; 0x3ac <twiSendByte>
     460:	8a df       	rcall	.-236    	; 0x376 <twiWaitAck>
     462:	98 df       	rcall	.-208    	; 0x394 <twiChkAck>
     464:	88 32       	cpi	r24, 0x28	; 40
     466:	19 f0       	breq	.+6      	; 0x46e <twi_send_data+0x1e>
     468:	8f ef       	ldi	r24, 0xFF	; 255
     46a:	9f ef       	ldi	r25, 0xFF	; 255
     46c:	02 c0       	rjmp	.+4      	; 0x472 <twi_send_data+0x22>
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0f 90       	pop	r0
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <twi_write>:
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	28 97       	sbiw	r28, 0x08	; 8
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	8b 83       	std	Y+3, r24	; 0x03
     490:	6c 83       	std	Y+4, r22	; 0x04
     492:	5e 83       	std	Y+6, r21	; 0x06
     494:	4d 83       	std	Y+5, r20	; 0x05
     496:	38 87       	std	Y+8, r19	; 0x08
     498:	2f 83       	std	Y+7, r18	; 0x07
     49a:	9d df       	rcall	.-198    	; 0x3d6 <twi_start>
     49c:	89 2b       	or	r24, r25
     49e:	19 f0       	breq	.+6      	; 0x4a6 <twi_write+0x2c>
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	9f ef       	ldi	r25, 0xFF	; 255
     4a4:	30 c0       	rjmp	.+96     	; 0x506 <twi_write+0x8c>
     4a6:	8b 81       	ldd	r24, Y+3	; 0x03
     4a8:	88 0f       	add	r24, r24
     4aa:	af df       	rcall	.-162    	; 0x40a <twi_send_dev_addr>
     4ac:	89 2b       	or	r24, r25
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <twi_write+0x3c>
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	9f ef       	ldi	r25, 0xFF	; 255
     4b4:	28 c0       	rjmp	.+80     	; 0x506 <twi_write+0x8c>
     4b6:	8c 81       	ldd	r24, Y+4	; 0x04
     4b8:	cb df       	rcall	.-106    	; 0x450 <twi_send_data>
     4ba:	89 2b       	or	r24, r25
     4bc:	19 f0       	breq	.+6      	; 0x4c4 <twi_write+0x4a>
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	9f ef       	ldi	r25, 0xFF	; 255
     4c2:	21 c0       	rjmp	.+66     	; 0x506 <twi_write+0x8c>
     4c4:	1a 82       	std	Y+2, r1	; 0x02
     4c6:	19 82       	std	Y+1, r1	; 0x01
     4c8:	14 c0       	rjmp	.+40     	; 0x4f2 <twi_write+0x78>
     4ca:	8d 81       	ldd	r24, Y+5	; 0x05
     4cc:	9e 81       	ldd	r25, Y+6	; 0x06
     4ce:	9c 01       	movw	r18, r24
     4d0:	2f 5f       	subi	r18, 0xFF	; 255
     4d2:	3f 4f       	sbci	r19, 0xFF	; 255
     4d4:	3e 83       	std	Y+6, r19	; 0x06
     4d6:	2d 83       	std	Y+5, r18	; 0x05
     4d8:	fc 01       	movw	r30, r24
     4da:	80 81       	ld	r24, Z
     4dc:	b9 df       	rcall	.-142    	; 0x450 <twi_send_data>
     4de:	89 2b       	or	r24, r25
     4e0:	19 f0       	breq	.+6      	; 0x4e8 <twi_write+0x6e>
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	9f ef       	ldi	r25, 0xFF	; 255
     4e6:	0f c0       	rjmp	.+30     	; 0x506 <twi_write+0x8c>
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	9a 81       	ldd	r25, Y+2	; 0x02
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	9a 83       	std	Y+2, r25	; 0x02
     4f0:	89 83       	std	Y+1, r24	; 0x01
     4f2:	29 81       	ldd	r18, Y+1	; 0x01
     4f4:	3a 81       	ldd	r19, Y+2	; 0x02
     4f6:	8f 81       	ldd	r24, Y+7	; 0x07
     4f8:	98 85       	ldd	r25, Y+8	; 0x08
     4fa:	28 17       	cp	r18, r24
     4fc:	39 07       	cpc	r19, r25
     4fe:	2c f3       	brlt	.-54     	; 0x4ca <twi_write+0x50>
     500:	7b df       	rcall	.-266    	; 0x3f8 <twi_stop>
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	28 96       	adiw	r28, 0x08	; 8
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	cd bf       	out	0x3d, r28	; 61
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <twi_init>:

void twi_init(void)
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
    twi->twbr = 5;
     520:	80 e7       	ldi	r24, 0x70	; 112
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	25 e0       	ldi	r18, 0x05	; 5
     526:	fc 01       	movw	r30, r24
     528:	20 83       	st	Z, r18
    twi->twsr = 0;
     52a:	80 e7       	ldi	r24, 0x70	; 112
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	fc 01       	movw	r30, r24
     530:	11 82       	std	Z+1, r1	; 0x01
}
     532:	00 00       	nop
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <UART_Init>:
static void ssd1306_output_scan_direction2(bool enable)
{
	uint8_t cmd = 0xc0 | enable;

	ssd1306_cmd(&cmd, 1);
}
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
     542:	8a e2       	ldi	r24, 0x2A	; 42
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	28 e1       	ldi	r18, 0x18	; 24
     548:	fc 01       	movw	r30, r24
     54a:	20 83       	st	Z, r18
     54c:	85 e9       	ldi	r24, 0x95	; 149
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	26 e0       	ldi	r18, 0x06	; 6
     552:	fc 01       	movw	r30, r24
     554:	20 83       	st	Z, r18
     556:	89 e2       	ldi	r24, 0x29	; 41
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	27 e6       	ldi	r18, 0x67	; 103
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
     560:	00 00       	nop
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <UART0_Putch>:
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	1f 92       	push	r1
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	89 83       	std	Y+1, r24	; 0x01
     574:	00 00       	nop
     576:	8b e2       	ldi	r24, 0x2B	; 43
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	fc 01       	movw	r30, r24
     57c:	80 81       	ld	r24, Z
     57e:	88 2f       	mov	r24, r24
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	80 72       	andi	r24, 0x20	; 32
     584:	99 27       	eor	r25, r25
     586:	89 2b       	or	r24, r25
     588:	b1 f3       	breq	.-20     	; 0x576 <UART0_Putch+0xe>
     58a:	8c e2       	ldi	r24, 0x2C	; 44
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	29 81       	ldd	r18, Y+1	; 0x01
     590:	fc 01       	movw	r30, r24
     592:	20 83       	st	Z, r18
     594:	00 00       	nop
     596:	0f 90       	pop	r0
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <SendCommand>:
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	67 97       	sbiw	r28, 0x17	; 23
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	8f 8b       	std	Y+23, r24	; 0x17
     5b4:	1a 82       	std	Y+2, r1	; 0x02
     5b6:	19 82       	std	Y+1, r1	; 0x01
     5b8:	8e e7       	ldi	r24, 0x7E	; 126
     5ba:	d6 df       	rcall	.-84     	; 0x568 <UART0_Putch>
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	d4 df       	rcall	.-88     	; 0x568 <UART0_Putch>
     5c0:	86 e0       	ldi	r24, 0x06	; 6
     5c2:	d2 df       	rcall	.-92     	; 0x568 <UART0_Putch>
     5c4:	8f 89       	ldd	r24, Y+23	; 0x17
     5c6:	d0 df       	rcall	.-96     	; 0x568 <UART0_Putch>
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	ce df       	rcall	.-100    	; 0x568 <UART0_Putch>
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	cc df       	rcall	.-104    	; 0x568 <UART0_Putch>
     5d0:	8f 89       	ldd	r24, Y+23	; 0x17
     5d2:	89 30       	cpi	r24, 0x09	; 9
     5d4:	71 f0       	breq	.+28     	; 0x5f2 <SendCommand+0x54>
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	c7 df       	rcall	.-114    	; 0x568 <UART0_Putch>
     5da:	8f 89       	ldd	r24, Y+23	; 0x17
     5dc:	88 2f       	mov	r24, r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	2b ef       	ldi	r18, 0xFB	; 251
     5e2:	3e ef       	ldi	r19, 0xFE	; 254
     5e4:	a9 01       	movw	r20, r18
     5e6:	48 1b       	sub	r20, r24
     5e8:	59 0b       	sbc	r21, r25
     5ea:	ca 01       	movw	r24, r20
     5ec:	9a 83       	std	Y+2, r25	; 0x02
     5ee:	89 83       	std	Y+1, r24	; 0x01
     5f0:	0d c0       	rjmp	.+26     	; 0x60c <SendCommand+0x6e>
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	b9 df       	rcall	.-142    	; 0x568 <UART0_Putch>
     5f6:	8f 89       	ldd	r24, Y+23	; 0x17
     5f8:	88 2f       	mov	r24, r24
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	29 ef       	ldi	r18, 0xF9	; 249
     5fe:	3e ef       	ldi	r19, 0xFE	; 254
     600:	a9 01       	movw	r20, r18
     602:	48 1b       	sub	r20, r24
     604:	59 0b       	sbc	r21, r25
     606:	ca 01       	movw	r24, r20
     608:	9a 83       	std	Y+2, r25	; 0x02
     60a:	89 83       	std	Y+1, r24	; 0x01
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	9a 81       	ldd	r25, Y+2	; 0x02
     610:	89 2f       	mov	r24, r25
     612:	99 27       	eor	r25, r25
     614:	a9 df       	rcall	.-174    	; 0x568 <UART0_Putch>
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	a7 df       	rcall	.-178    	; 0x568 <UART0_Putch>
     61a:	8f ee       	ldi	r24, 0xEF	; 239
     61c:	a5 df       	rcall	.-182    	; 0x568 <UART0_Putch>
     61e:	00 00       	nop
     620:	67 96       	adiw	r28, 0x17	; 23
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <SendCommand01>:
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	69 97       	sbiw	r28, 0x19	; 25
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	8f 8b       	std	Y+23, r24	; 0x17
     648:	68 8f       	std	Y+24, r22	; 0x18
     64a:	49 8f       	std	Y+25, r20	; 0x19
     64c:	1a 82       	std	Y+2, r1	; 0x02
     64e:	19 82       	std	Y+1, r1	; 0x01
     650:	8e e7       	ldi	r24, 0x7E	; 126
     652:	8a df       	rcall	.-236    	; 0x568 <UART0_Putch>
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	88 df       	rcall	.-240    	; 0x568 <UART0_Putch>
     658:	86 e0       	ldi	r24, 0x06	; 6
     65a:	86 df       	rcall	.-244    	; 0x568 <UART0_Putch>
     65c:	8f 89       	ldd	r24, Y+23	; 0x17
     65e:	84 df       	rcall	.-248    	; 0x568 <UART0_Putch>
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	82 df       	rcall	.-252    	; 0x568 <UART0_Putch>
     664:	88 8d       	ldd	r24, Y+24	; 0x18
     666:	80 df       	rcall	.-256    	; 0x568 <UART0_Putch>
     668:	89 8d       	ldd	r24, Y+25	; 0x19
     66a:	7e df       	rcall	.-260    	; 0x568 <UART0_Putch>
     66c:	8f 89       	ldd	r24, Y+23	; 0x17
     66e:	88 2f       	mov	r24, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	9c 01       	movw	r18, r24
     674:	2b 5f       	subi	r18, 0xFB	; 251
     676:	3e 4f       	sbci	r19, 0xFE	; 254
     678:	88 8d       	ldd	r24, Y+24	; 0x18
     67a:	88 2f       	mov	r24, r24
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	28 0f       	add	r18, r24
     680:	39 1f       	adc	r19, r25
     682:	89 8d       	ldd	r24, Y+25	; 0x19
     684:	88 2f       	mov	r24, r24
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	82 0f       	add	r24, r18
     68a:	93 1f       	adc	r25, r19
     68c:	91 95       	neg	r25
     68e:	81 95       	neg	r24
     690:	91 09       	sbc	r25, r1
     692:	9a 83       	std	Y+2, r25	; 0x02
     694:	89 83       	std	Y+1, r24	; 0x01
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	9a 81       	ldd	r25, Y+2	; 0x02
     69a:	89 2f       	mov	r24, r25
     69c:	99 27       	eor	r25, r25
     69e:	64 df       	rcall	.-312    	; 0x568 <UART0_Putch>
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	62 df       	rcall	.-316    	; 0x568 <UART0_Putch>
     6a4:	8f ee       	ldi	r24, 0xEF	; 239
     6a6:	60 df       	rcall	.-320    	; 0x568 <UART0_Putch>
     6a8:	00 00       	nop
     6aa:	69 96       	adiw	r28, 0x19	; 25
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	f8 94       	cli
     6b0:	de bf       	out	0x3e, r29	; 62
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	cd bf       	out	0x3d, r28	; 61
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <ssd1306_cmd>:
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <ssd1306_cmd+0x6>
     6c2:	1f 92       	push	r1
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	9a 83       	std	Y+2, r25	; 0x02
     6ca:	89 83       	std	Y+1, r24	; 0x01
     6cc:	6b 83       	std	Y+3, r22	; 0x03
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	28 2f       	mov	r18, r24
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	9a 81       	ldd	r25, Y+2	; 0x02
     6d8:	ac 01       	movw	r20, r24
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	8c e3       	ldi	r24, 0x3C	; 60
     6de:	cd de       	rcall	.-614    	; 0x47a <twi_write>
     6e0:	00 00       	nop
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <ssd1306_data>:
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	00 d0       	rcall	.+0      	; 0x6f4 <ssd1306_data+0x6>
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <ssd1306_data+0x8>
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	9a 83       	std	Y+2, r25	; 0x02
     6fc:	89 83       	std	Y+1, r24	; 0x01
     6fe:	7c 83       	std	Y+4, r23	; 0x04
     700:	6b 83       	std	Y+3, r22	; 0x03
     702:	2b 81       	ldd	r18, Y+3	; 0x03
     704:	3c 81       	ldd	r19, Y+4	; 0x04
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	9a 81       	ldd	r25, Y+2	; 0x02
     70a:	ac 01       	movw	r20, r24
     70c:	60 e4       	ldi	r22, 0x40	; 64
     70e:	8c e3       	ldi	r24, 0x3C	; 60
     710:	b4 de       	rcall	.-664    	; 0x47a <twi_write>
     712:	00 00       	nop
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <ssd1306_reset>:
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	00 00       	nop
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <ssd1306_chargepump_enable>:
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	00 d0       	rcall	.+0      	; 0x738 <ssd1306_chargepump_enable+0x6>
     738:	00 d0       	rcall	.+0      	; 0x73a <ssd1306_chargepump_enable+0x8>
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	8b 83       	std	Y+3, r24	; 0x03
     742:	8d e8       	ldi	r24, 0x8D	; 141
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	9c 81       	ldd	r25, Y+4	; 0x04
     74a:	89 2b       	or	r24, r25
     74c:	11 f0       	breq	.+4      	; 0x752 <ssd1306_chargepump_enable+0x20>
     74e:	84 e1       	ldi	r24, 0x14	; 20
     750:	01 c0       	rjmp	.+2      	; 0x754 <ssd1306_chargepump_enable+0x22>
     752:	80 e1       	ldi	r24, 0x10	; 16
     754:	8a 83       	std	Y+2, r24	; 0x02
     756:	62 e0       	ldi	r22, 0x02	; 2
     758:	ce 01       	movw	r24, r28
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	af df       	rcall	.-162    	; 0x6bc <ssd1306_cmd>
     75e:	00 00       	nop
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <ssd1306_entire_on>:
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	00 d0       	rcall	.+0      	; 0x774 <ssd1306_entire_on+0x6>
     774:	1f 92       	push	r1
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	9b 83       	std	Y+3, r25	; 0x03
     77c:	8a 83       	std	Y+2, r24	; 0x02
     77e:	8a 81       	ldd	r24, Y+2	; 0x02
     780:	84 6a       	ori	r24, 0xA4	; 164
     782:	89 83       	std	Y+1, r24	; 0x01
     784:	61 e0       	ldi	r22, 0x01	; 1
     786:	ce 01       	movw	r24, r28
     788:	01 96       	adiw	r24, 0x01	; 1
     78a:	98 df       	rcall	.-208    	; 0x6bc <ssd1306_cmd>
     78c:	00 00       	nop
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <ssd1306_display_on>:
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <ssd1306_display_on+0x6>
     7a0:	1f 92       	push	r1
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	9b 83       	std	Y+3, r25	; 0x03
     7a8:	8a 83       	std	Y+2, r24	; 0x02
     7aa:	8a 81       	ldd	r24, Y+2	; 0x02
     7ac:	8e 6a       	ori	r24, 0xAE	; 174
     7ae:	89 83       	std	Y+1, r24	; 0x01
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	82 df       	rcall	.-252    	; 0x6bc <ssd1306_cmd>
     7b8:	00 00       	nop
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	08 95       	ret

000007c6 <ssd1306_set_addr_mode>:
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <ssd1306_set_addr_mode+0x6>
     7cc:	1f 92       	push	r1
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	8b 83       	std	Y+3, r24	; 0x03
     7d4:	80 e2       	ldi	r24, 0x20	; 32
     7d6:	89 83       	std	Y+1, r24	; 0x01
     7d8:	8b 81       	ldd	r24, Y+3	; 0x03
     7da:	8a 83       	std	Y+2, r24	; 0x02
     7dc:	62 e0       	ldi	r22, 0x02	; 2
     7de:	ce 01       	movw	r24, r28
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	6c df       	rcall	.-296    	; 0x6bc <ssd1306_cmd>
     7e4:	00 00       	nop
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <ssd1306_set_page_start>:
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <ssd1306_set_page_start+0x6>
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	8a 83       	std	Y+2, r24	; 0x02
     7fe:	8a 81       	ldd	r24, Y+2	; 0x02
     800:	80 6b       	ori	r24, 0xB0	; 176
     802:	89 83       	std	Y+1, r24	; 0x01
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	ce 01       	movw	r24, r28
     808:	01 96       	adiw	r24, 0x01	; 1
     80a:	58 df       	rcall	.-336    	; 0x6bc <ssd1306_cmd>
     80c:	00 00       	nop
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <ssd1306_set_column_addr>:
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	00 d0       	rcall	.+0      	; 0x81e <ssd1306_set_column_addr+0x6>
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
     822:	8a 83       	std	Y+2, r24	; 0x02
     824:	8a 81       	ldd	r24, Y+2	; 0x02
     826:	8f 70       	andi	r24, 0x0F	; 15
     828:	89 83       	std	Y+1, r24	; 0x01
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	ce 01       	movw	r24, r28
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	45 df       	rcall	.-374    	; 0x6bc <ssd1306_cmd>
     832:	8a 81       	ldd	r24, Y+2	; 0x02
     834:	82 95       	swap	r24
     836:	8f 70       	andi	r24, 0x0F	; 15
     838:	80 61       	ori	r24, 0x10	; 16
     83a:	89 83       	std	Y+1, r24	; 0x01
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	3c df       	rcall	.-392    	; 0x6bc <ssd1306_cmd>
     844:	00 00       	nop
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <ssd1306_reverse>:
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <ssd1306_reverse+0x6>
     856:	1f 92       	push	r1
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	9b 83       	std	Y+3, r25	; 0x03
     85e:	8a 83       	std	Y+2, r24	; 0x02
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	80 6a       	ori	r24, 0xA0	; 160
     864:	89 83       	std	Y+1, r24	; 0x01
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	ce 01       	movw	r24, r28
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	27 df       	rcall	.-434    	; 0x6bc <ssd1306_cmd>
     86e:	00 00       	nop
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <ssd1306_normal_display>:
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	00 d0       	rcall	.+0      	; 0x882 <ssd1306_normal_display+0x6>
     882:	1f 92       	push	r1
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	9b 83       	std	Y+3, r25	; 0x03
     88a:	8a 83       	std	Y+2, r24	; 0x02
     88c:	8a 81       	ldd	r24, Y+2	; 0x02
     88e:	86 6a       	ori	r24, 0xA6	; 166
     890:	89 83       	std	Y+1, r24	; 0x01
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	ce 01       	movw	r24, r28
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	11 df       	rcall	.-478    	; 0x6bc <ssd1306_cmd>
     89a:	00 00       	nop
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <ssd1306_output_scan_direction>:
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <ssd1306_output_scan_direction+0x6>
     8ae:	1f 92       	push	r1
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	9b 83       	std	Y+3, r25	; 0x03
     8b6:	8a 83       	std	Y+2, r24	; 0x02
     8b8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ba:	88 6c       	ori	r24, 0xC8	; 200
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	61 e0       	ldi	r22, 0x01	; 1
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	fb de       	rcall	.-522    	; 0x6bc <ssd1306_cmd>
     8c6:	00 00       	nop
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <ssd1306_init>:


void ssd1306_init(void)
{
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	2e 97       	sbiw	r28, 0x0e	; 14
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	a0 e8       	ldi	r26, 0x80	; 128
     8ee:	bf e3       	ldi	r27, 0x3F	; 63
     8f0:	89 83       	std	Y+1, r24	; 0x01
     8f2:	9a 83       	std	Y+2, r25	; 0x02
     8f4:	ab 83       	std	Y+3, r26	; 0x03
     8f6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	4a e7       	ldi	r20, 0x7A	; 122
     8fe:	55 e4       	ldi	r21, 0x45	; 69
     900:	69 81       	ldd	r22, Y+1	; 0x01
     902:	7a 81       	ldd	r23, Y+2	; 0x02
     904:	8b 81       	ldd	r24, Y+3	; 0x03
     906:	9c 81       	ldd	r25, Y+4	; 0x04
     908:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__mulsf3>
     90c:	dc 01       	movw	r26, r24
     90e:	cb 01       	movw	r24, r22
     910:	8d 83       	std	Y+5, r24	; 0x05
     912:	9e 83       	std	Y+6, r25	; 0x06
     914:	af 83       	std	Y+7, r26	; 0x07
     916:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	40 e8       	ldi	r20, 0x80	; 128
     91e:	5f e3       	ldi	r21, 0x3F	; 63
     920:	6d 81       	ldd	r22, Y+5	; 0x05
     922:	7e 81       	ldd	r23, Y+6	; 0x06
     924:	8f 81       	ldd	r24, Y+7	; 0x07
     926:	98 85       	ldd	r25, Y+8	; 0x08
     928:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__cmpsf2>
     92c:	88 23       	and	r24, r24
     92e:	2c f4       	brge	.+10     	; 0x93a <ssd1306_init+0x66>
		__ticks = 1;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	9a 87       	std	Y+10, r25	; 0x0a
     936:	89 87       	std	Y+9, r24	; 0x09
     938:	3f c0       	rjmp	.+126    	; 0x9b8 <ssd1306_init+0xe4>
	else if (__tmp > 65535)
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	3f ef       	ldi	r19, 0xFF	; 255
     93e:	4f e7       	ldi	r20, 0x7F	; 127
     940:	57 e4       	ldi	r21, 0x47	; 71
     942:	6d 81       	ldd	r22, Y+5	; 0x05
     944:	7e 81       	ldd	r23, Y+6	; 0x06
     946:	8f 81       	ldd	r24, Y+7	; 0x07
     948:	98 85       	ldd	r25, Y+8	; 0x08
     94a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__gesf2>
     94e:	18 16       	cp	r1, r24
     950:	4c f5       	brge	.+82     	; 0x9a4 <ssd1306_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e2       	ldi	r20, 0x20	; 32
     958:	51 e4       	ldi	r21, 0x41	; 65
     95a:	69 81       	ldd	r22, Y+1	; 0x01
     95c:	7a 81       	ldd	r23, Y+2	; 0x02
     95e:	8b 81       	ldd	r24, Y+3	; 0x03
     960:	9c 81       	ldd	r25, Y+4	; 0x04
     962:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__mulsf3>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	bc 01       	movw	r22, r24
     96c:	cd 01       	movw	r24, r26
     96e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__fixunssfsi>
     972:	dc 01       	movw	r26, r24
     974:	cb 01       	movw	r24, r22
     976:	9a 87       	std	Y+10, r25	; 0x0a
     978:	89 87       	std	Y+9, r24	; 0x09
     97a:	0f c0       	rjmp	.+30     	; 0x99a <ssd1306_init+0xc6>
     97c:	80 e9       	ldi	r24, 0x90	; 144
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	9c 87       	std	Y+12, r25	; 0x0c
     982:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     984:	8b 85       	ldd	r24, Y+11	; 0x0b
     986:	9c 85       	ldd	r25, Y+12	; 0x0c
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	f1 f7       	brne	.-4      	; 0x988 <ssd1306_init+0xb4>
     98c:	9c 87       	std	Y+12, r25	; 0x0c
     98e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     990:	89 85       	ldd	r24, Y+9	; 0x09
     992:	9a 85       	ldd	r25, Y+10	; 0x0a
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	9a 87       	std	Y+10, r25	; 0x0a
     998:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     99a:	89 85       	ldd	r24, Y+9	; 0x09
     99c:	9a 85       	ldd	r25, Y+10	; 0x0a
     99e:	89 2b       	or	r24, r25
     9a0:	69 f7       	brne	.-38     	; 0x97c <ssd1306_init+0xa8>
     9a2:	14 c0       	rjmp	.+40     	; 0x9cc <ssd1306_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9a4:	6d 81       	ldd	r22, Y+5	; 0x05
     9a6:	7e 81       	ldd	r23, Y+6	; 0x06
     9a8:	8f 81       	ldd	r24, Y+7	; 0x07
     9aa:	98 85       	ldd	r25, Y+8	; 0x08
     9ac:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__fixunssfsi>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	9a 87       	std	Y+10, r25	; 0x0a
     9b6:	89 87       	std	Y+9, r24	; 0x09
     9b8:	89 85       	ldd	r24, Y+9	; 0x09
     9ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     9bc:	9e 87       	std	Y+14, r25	; 0x0e
     9be:	8d 87       	std	Y+13, r24	; 0x0d
     9c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     9c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <ssd1306_init+0xf0>
     9c8:	9e 87       	std	Y+14, r25	; 0x0e
     9ca:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);

	ssd1306_reset();
     9cc:	aa de       	rcall	.-684    	; 0x722 <ssd1306_reset>

	ssd1306_chargepump_enable(true);
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	af de       	rcall	.-674    	; 0x732 <ssd1306_chargepump_enable>
	ssd1306_entire_on(false);
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	ca de       	rcall	.-620    	; 0x76e <ssd1306_entire_on>
	ssd1306_display_on(true);
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	dd de       	rcall	.-582    	; 0x79a <ssd1306_display_on>
     9e0:	00 00       	nop
}
     9e2:	2e 96       	adiw	r28, 0x0e	; 14
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <clear_screen>:
     9f4:	cf 93       	push	r28
static uint8_t gddram[COL_NUM];



void clear_screen(void)
{
     9f6:	df 93       	push	r29
     9f8:	00 d0       	rcall	.+0      	; 0x9fa <clear_screen+0x6>
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
     9fe:	1a 82       	std	Y+2, r1	; 0x02
     a00:	0a c0       	rjmp	.+20     	; 0xa16 <clear_screen+0x22>
	gddram[col] = 0;
     a02:	8a 81       	ldd	r24, Y+2	; 0x02
     a04:	88 2f       	mov	r24, r24
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	88 54       	subi	r24, 0x48	; 72
     a0a:	99 4f       	sbci	r25, 0xF9	; 249
     a0c:	fc 01       	movw	r30, r24
     a0e:	10 82       	st	Z, r1
void clear_screen(void)
{
	uint8_t page;
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
     a10:	8a 81       	ldd	r24, Y+2	; 0x02
     a12:	8f 5f       	subi	r24, 0xFF	; 255
     a14:	8a 83       	std	Y+2, r24	; 0x02
     a16:	8a 81       	ldd	r24, Y+2	; 0x02
     a18:	88 23       	and	r24, r24
     a1a:	9c f7       	brge	.-26     	; 0xa02 <clear_screen+0xe>
	gddram[col] = 0;

	for (page=0; page<PAGE_NUM; page++)
     a1c:	19 82       	std	Y+1, r1	; 0x01
     a1e:	0a c0       	rjmp	.+20     	; 0xa34 <clear_screen+0x40>
	{
		ssd1306_set_page_start(page);
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	e7 de       	rcall	.-562    	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_data(gddram, COL_NUM);
     a24:	60 e8       	ldi	r22, 0x80	; 128
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	88 eb       	ldi	r24, 0xB8	; 184
     a2a:	96 e0       	ldi	r25, 0x06	; 6
     a2c:	60 de       	rcall	.-832    	; 0x6ee <ssd1306_data>
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
	gddram[col] = 0;

	for (page=0; page<PAGE_NUM; page++)
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	8f 5f       	subi	r24, 0xFF	; 255
     a32:	89 83       	std	Y+1, r24	; 0x01
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	88 30       	cpi	r24, 0x08	; 8
	{
		ssd1306_set_page_start(page);
		ssd1306_data(gddram, COL_NUM);
	}

	ssd1306_set_column_addr(0);
     a38:	98 f3       	brcs	.-26     	; 0xa20 <clear_screen+0x2c>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	ed de       	rcall	.-550    	; 0x818 <ssd1306_set_column_addr>
}
     a3e:	00 00       	nop
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <oled_msg>:



extern void get_ch_data(char ch, uint8_t *buffer);
int oled_msg(int row, int col, const char *fmt, ...)
{
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	6c 97       	sbiw	r28, 0x1c	; 28
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	f8 94       	cli
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	cd bf       	out	0x3d, r28	; 61
	va_list     ap;
	char        buf[MAX_CH_PER_LINE + 1];
	int         rc, i;

	va_start(ap, fmt);
     a5e:	ce 01       	movw	r24, r28
     a60:	87 96       	adiw	r24, 0x27	; 39
     a62:	9e 83       	std	Y+6, r25	; 0x06
     a64:	8d 83       	std	Y+5, r24	; 0x05
	rc = vsprintf(buf, fmt, ap);
     a66:	4d 81       	ldd	r20, Y+5	; 0x05
     a68:	5e 81       	ldd	r21, Y+6	; 0x06
     a6a:	2d a1       	ldd	r18, Y+37	; 0x25
     a6c:	3e a1       	ldd	r19, Y+38	; 0x26
     a6e:	ce 01       	movw	r24, r28
     a70:	07 96       	adiw	r24, 0x07	; 7
     a72:	b9 01       	movw	r22, r18
     a74:	0e 94 a2 10 	call	0x2144	; 0x2144 <vsprintf>
     a78:	9c 83       	std	Y+4, r25	; 0x04
     a7a:	8b 83       	std	Y+3, r24	; 0x03
	va_end(ap);

	if (rc > 0)
     a7c:	8b 81       	ldd	r24, Y+3	; 0x03
     a7e:	9c 81       	ldd	r25, Y+4	; 0x04
     a80:	18 16       	cp	r1, r24
     a82:	19 06       	cpc	r1, r25
     a84:	0c f0       	brlt	.+2      	; 0xa88 <oled_msg+0x3e>
     a86:	3b c0       	rjmp	.+118    	; 0xafe <oled_msg+0xb4>
	{
		for (i=0; i<rc; i++)
     a88:	1a 82       	std	Y+2, r1	; 0x02
     a8a:	19 82       	std	Y+1, r1	; 0x01
     a8c:	1c c0       	rjmp	.+56     	; 0xac6 <oled_msg+0x7c>
		get_ch_data(buf[i], &gddram[i * CHAR_WIDTH]);
     a8e:	29 81       	ldd	r18, Y+1	; 0x01
     a90:	3a 81       	ldd	r19, Y+2	; 0x02
     a92:	c9 01       	movw	r24, r18
     a94:	88 0f       	add	r24, r24
     a96:	99 1f       	adc	r25, r25
     a98:	82 0f       	add	r24, r18
     a9a:	93 1f       	adc	r25, r19
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	ac 01       	movw	r20, r24
     aa2:	48 54       	subi	r20, 0x48	; 72
     aa4:	59 4f       	sbci	r21, 0xF9	; 249
     aa6:	9e 01       	movw	r18, r28
     aa8:	29 5f       	subi	r18, 0xF9	; 249
     aaa:	3f 4f       	sbci	r19, 0xFF	; 255
     aac:	89 81       	ldd	r24, Y+1	; 0x01
     aae:	9a 81       	ldd	r25, Y+2	; 0x02
     ab0:	82 0f       	add	r24, r18
     ab2:	93 1f       	adc	r25, r19
     ab4:	fc 01       	movw	r30, r24
     ab6:	80 81       	ld	r24, Z
     ab8:	ba 01       	movw	r22, r20
     aba:	f8 db       	rcall	.-2064   	; 0x2ac <get_ch_data>
	rc = vsprintf(buf, fmt, ap);
	va_end(ap);

	if (rc > 0)
	{
		for (i=0; i<rc; i++)
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	9a 81       	ldd	r25, Y+2	; 0x02
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	9a 83       	std	Y+2, r25	; 0x02
     ac4:	89 83       	std	Y+1, r24	; 0x01
     ac6:	29 81       	ldd	r18, Y+1	; 0x01
     ac8:	3a 81       	ldd	r19, Y+2	; 0x02
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	9c 81       	ldd	r25, Y+4	; 0x04
     ace:	28 17       	cp	r18, r24
     ad0:	39 07       	cpc	r19, r25
     ad2:	ec f2       	brlt	.-70     	; 0xa8e <oled_msg+0x44>
		get_ch_data(buf[i], &gddram[i * CHAR_WIDTH]);

		ssd1306_set_page_start(row);
     ad4:	89 a1       	ldd	r24, Y+33	; 0x21
     ad6:	8d de       	rcall	.-742    	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_set_column_addr(col * CHAR_WIDTH);
     ad8:	9b a1       	ldd	r25, Y+35	; 0x23
     ada:	89 2f       	mov	r24, r25
     adc:	88 0f       	add	r24, r24
     ade:	89 0f       	add	r24, r25
     ae0:	88 0f       	add	r24, r24
     ae2:	9a de       	rcall	.-716    	; 0x818 <ssd1306_set_column_addr>
		ssd1306_data(gddram, rc * CHAR_WIDTH);
     ae4:	2b 81       	ldd	r18, Y+3	; 0x03
     ae6:	3c 81       	ldd	r19, Y+4	; 0x04
     ae8:	c9 01       	movw	r24, r18
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	82 0f       	add	r24, r18
     af0:	93 1f       	adc	r25, r19
     af2:	88 0f       	add	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	bc 01       	movw	r22, r24
     af8:	88 eb       	ldi	r24, 0xB8	; 184
     afa:	96 e0       	ldi	r25, 0x06	; 6
     afc:	f8 dd       	rcall	.-1040   	; 0x6ee <ssd1306_data>
	}

	return rc;
     afe:	8b 81       	ldd	r24, Y+3	; 0x03
     b00:	9c 81       	ldd	r25, Y+4	; 0x04
}
     b02:	6c 96       	adiw	r28, 0x1c	; 28
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <draw_picture>:




void draw_picture(char array[])
{
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	00 d0       	rcall	.+0      	; 0xb1a <draw_picture+0x6>
     b1a:	1f 92       	push	r1
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	9b 83       	std	Y+3, r25	; 0x03
     b22:	8a 83       	std	Y+2, r24	; 0x02
	//clear_screen();
	unsigned char x,y;
	for(y=0;y<8;y++)
     b24:	19 82       	std	Y+1, r1	; 0x01
     b26:	15 c0       	rjmp	.+42     	; 0xb52 <draw_picture+0x3e>
	{
		ssd1306_set_page_start(y);
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	63 de       	rcall	.-826    	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_data(array+(y*COL_NUM), COL_NUM);
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	88 2f       	mov	r24, r24
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	96 95       	lsr	r25
     b34:	98 2f       	mov	r25, r24
     b36:	88 27       	eor	r24, r24
     b38:	97 95       	ror	r25
     b3a:	87 95       	ror	r24
     b3c:	9c 01       	movw	r18, r24
     b3e:	8a 81       	ldd	r24, Y+2	; 0x02
     b40:	9b 81       	ldd	r25, Y+3	; 0x03
     b42:	82 0f       	add	r24, r18
     b44:	93 1f       	adc	r25, r19
     b46:	60 e8       	ldi	r22, 0x80	; 128
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	d1 dd       	rcall	.-1118   	; 0x6ee <ssd1306_data>

void draw_picture(char array[])
{
	//clear_screen();
	unsigned char x,y;
	for(y=0;y<8;y++)
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	8f 5f       	subi	r24, 0xFF	; 255
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	88 30       	cpi	r24, 0x08	; 8
     b56:	40 f3       	brcs	.-48     	; 0xb28 <draw_picture+0x14>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(array+(y*COL_NUM), COL_NUM);
	}
}
     b58:	00 00       	nop
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <setup>:

void setup(void)
{
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
	twi_init();
     b6e:	d4 dc       	rcall	.-1624   	; 0x518 <twi_init>

	ssd1306_init();
     b70:	b1 de       	rcall	.-670    	; 0x8d4 <ssd1306_init>
	ssd1306_set_addr_mode(PAGE);
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	28 de       	rcall	.-944    	; 0x7c6 <ssd1306_set_addr_mode>
	

	clear_screen();
     b76:	3e df       	rcall	.-388    	; 0x9f4 <clear_screen>
	
	ssd1306_output_scan_direction(0);		//위아래 역전
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	95 de       	rcall	.-726    	; 0x8a8 <ssd1306_output_scan_direction>
	ssd1306_reverse(1);		//왼쪽 오른쪽 역전
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	66 de       	rcall	.-820    	; 0x850 <ssd1306_reverse>
	ssd1306_normal_display(0);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	79 de       	rcall	.-782    	; 0x87c <ssd1306_normal_display>
     b8a:	00 00       	nop

}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <__vector_6>:
     b92:	1f 92       	push	r1
void game_over();
void food();
void clear_map();

ISR(INT5_vect)
{
     b94:	0f 92       	push	r0
     b96:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b9a:	0f 92       	push	r0
     b9c:	11 24       	eor	r1, r1
     b9e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     ba2:	0f 92       	push	r0
     ba4:	2f 93       	push	r18
     ba6:	3f 93       	push	r19
     ba8:	4f 93       	push	r20
     baa:	5f 93       	push	r21
     bac:	6f 93       	push	r22
     bae:	7f 93       	push	r23
     bb0:	8f 93       	push	r24
     bb2:	9f 93       	push	r25
     bb4:	af 93       	push	r26
     bb6:	bf 93       	push	r27
     bb8:	ef 93       	push	r30
     bba:	ff 93       	push	r31
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
	if(game == 0) game = 1;
     bc4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
     bc8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
     bcc:	89 2b       	or	r24, r25
     bce:	31 f4       	brne	.+12     	; 0xbdc <__vector_6+0x4a>
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     bd8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if((dir==LEFT) || (dir==RIGHT)|| (dir==UP))
     bdc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     be0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     be4:	8b 34       	cpi	r24, 0x4B	; 75
     be6:	91 05       	cpc	r25, r1
     be8:	71 f0       	breq	.+28     	; 0xc06 <__vector_6+0x74>
     bea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     bee:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     bf2:	8d 34       	cpi	r24, 0x4D	; 77
     bf4:	91 05       	cpc	r25, r1
     bf6:	39 f0       	breq	.+14     	; 0xc06 <__vector_6+0x74>
     bf8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     bfc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     c00:	88 34       	cpi	r24, 0x48	; 72
     c02:	91 05       	cpc	r25, r1
     c04:	51 f4       	brne	.+20     	; 0xc1a <__vector_6+0x88>
	{
		SendCommand01(0x0F, 0x01, 0x03);
     c06:	43 e0       	ldi	r20, 0x03	; 3
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	8f e0       	ldi	r24, 0x0F	; 15
     c0c:	12 dd       	rcall	.-1500   	; 0x632 <SendCommand01>
		
		dir = UP;
     c0e:	88 e4       	ldi	r24, 0x48	; 72
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     c16:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     c1a:	00 00       	nop
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	ff 91       	pop	r31
     c22:	ef 91       	pop	r30
     c24:	bf 91       	pop	r27
     c26:	af 91       	pop	r26
     c28:	9f 91       	pop	r25
     c2a:	8f 91       	pop	r24
     c2c:	7f 91       	pop	r23
     c2e:	6f 91       	pop	r22
     c30:	5f 91       	pop	r21
     c32:	4f 91       	pop	r20
     c34:	3f 91       	pop	r19
     c36:	2f 91       	pop	r18
     c38:	0f 90       	pop	r0
     c3a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     c3e:	0f 90       	pop	r0
     c40:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c44:	0f 90       	pop	r0
     c46:	1f 90       	pop	r1
     c48:	18 95       	reti

00000c4a <__vector_7>:

ISR(INT6_vect)
{
     c4a:	1f 92       	push	r1
     c4c:	0f 92       	push	r0
     c4e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c52:	0f 92       	push	r0
     c54:	11 24       	eor	r1, r1
     c56:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     c5a:	0f 92       	push	r0
     c5c:	2f 93       	push	r18
     c5e:	3f 93       	push	r19
     c60:	4f 93       	push	r20
     c62:	5f 93       	push	r21
     c64:	6f 93       	push	r22
     c66:	7f 93       	push	r23
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
     c6c:	af 93       	push	r26
     c6e:	bf 93       	push	r27
     c70:	ef 93       	push	r30
     c72:	ff 93       	push	r31
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
	if(game == 0) game = 1;
     c7c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
     c80:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
     c84:	89 2b       	or	r24, r25
     c86:	31 f4       	brne	.+12     	; 0xc94 <__vector_7+0x4a>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     c90:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if((dir==LEFT) || (dir==RIGHT)|| (dir==DOWN))
     c94:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     c98:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     c9c:	8b 34       	cpi	r24, 0x4B	; 75
     c9e:	91 05       	cpc	r25, r1
     ca0:	71 f0       	breq	.+28     	; 0xcbe <__vector_7+0x74>
     ca2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     ca6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     caa:	8d 34       	cpi	r24, 0x4D	; 77
     cac:	91 05       	cpc	r25, r1
     cae:	39 f0       	breq	.+14     	; 0xcbe <__vector_7+0x74>
     cb0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     cb4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     cb8:	80 35       	cpi	r24, 0x50	; 80
     cba:	91 05       	cpc	r25, r1
     cbc:	51 f4       	brne	.+20     	; 0xcd2 <__vector_7+0x88>
	{
		SendCommand01(0x0F, 0x01, 0x03);
     cbe:	43 e0       	ldi	r20, 0x03	; 3
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	8f e0       	ldi	r24, 0x0F	; 15
     cc4:	b6 dc       	rcall	.-1684   	; 0x632 <SendCommand01>
		
		dir = DOWN;
     cc6:	80 e5       	ldi	r24, 0x50	; 80
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     cce:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     cd2:	00 00       	nop
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	ff 91       	pop	r31
     cda:	ef 91       	pop	r30
     cdc:	bf 91       	pop	r27
     cde:	af 91       	pop	r26
     ce0:	9f 91       	pop	r25
     ce2:	8f 91       	pop	r24
     ce4:	7f 91       	pop	r23
     ce6:	6f 91       	pop	r22
     ce8:	5f 91       	pop	r21
     cea:	4f 91       	pop	r20
     cec:	3f 91       	pop	r19
     cee:	2f 91       	pop	r18
     cf0:	0f 90       	pop	r0
     cf2:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     cf6:	0f 90       	pop	r0
     cf8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <__vector_8>:

ISR(INT7_vect)
{	
     d02:	1f 92       	push	r1
     d04:	0f 92       	push	r0
     d06:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d0a:	0f 92       	push	r0
     d0c:	11 24       	eor	r1, r1
     d0e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     d12:	0f 92       	push	r0
     d14:	2f 93       	push	r18
     d16:	3f 93       	push	r19
     d18:	4f 93       	push	r20
     d1a:	5f 93       	push	r21
     d1c:	6f 93       	push	r22
     d1e:	7f 93       	push	r23
     d20:	8f 93       	push	r24
     d22:	9f 93       	push	r25
     d24:	af 93       	push	r26
     d26:	bf 93       	push	r27
     d28:	ef 93       	push	r30
     d2a:	ff 93       	push	r31
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
	if(game == 0) game = 1;
     d34:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
     d38:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
     d3c:	89 2b       	or	r24, r25
     d3e:	31 f4       	brne	.+12     	; 0xd4c <__vector_8+0x4a>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     d48:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if((dir==DOWN) || (dir==LEFT)|| (dir==UP))
     d4c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     d50:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     d54:	80 35       	cpi	r24, 0x50	; 80
     d56:	91 05       	cpc	r25, r1
     d58:	71 f0       	breq	.+28     	; 0xd76 <__vector_8+0x74>
     d5a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     d5e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     d62:	8b 34       	cpi	r24, 0x4B	; 75
     d64:	91 05       	cpc	r25, r1
     d66:	39 f0       	breq	.+14     	; 0xd76 <__vector_8+0x74>
     d68:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     d6c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     d70:	88 34       	cpi	r24, 0x48	; 72
     d72:	91 05       	cpc	r25, r1
     d74:	51 f4       	brne	.+20     	; 0xd8a <__vector_8+0x88>
	{
		SendCommand01(0x0F, 0x01, 0x03);
     d76:	43 e0       	ldi	r20, 0x03	; 3
     d78:	61 e0       	ldi	r22, 0x01	; 1
     d7a:	8f e0       	ldi	r24, 0x0F	; 15
     d7c:	5a dc       	rcall	.-1868   	; 0x632 <SendCommand01>
		
		dir = LEFT;
     d7e:	8b e4       	ldi	r24, 0x4B	; 75
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     d86:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     d8a:	00 00       	nop
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	ff 91       	pop	r31
     d92:	ef 91       	pop	r30
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	7f 91       	pop	r23
     d9e:	6f 91       	pop	r22
     da0:	5f 91       	pop	r21
     da2:	4f 91       	pop	r20
     da4:	3f 91       	pop	r19
     da6:	2f 91       	pop	r18
     da8:	0f 90       	pop	r0
     daa:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     dae:	0f 90       	pop	r0
     db0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <__vector_5>:

ISR(INT4_vect)
{
     dba:	1f 92       	push	r1
     dbc:	0f 92       	push	r0
     dbe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     dca:	0f 92       	push	r0
     dcc:	2f 93       	push	r18
     dce:	3f 93       	push	r19
     dd0:	4f 93       	push	r20
     dd2:	5f 93       	push	r21
     dd4:	6f 93       	push	r22
     dd6:	7f 93       	push	r23
     dd8:	8f 93       	push	r24
     dda:	9f 93       	push	r25
     ddc:	af 93       	push	r26
     dde:	bf 93       	push	r27
     de0:	ef 93       	push	r30
     de2:	ff 93       	push	r31
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
	if(game == 0) game = 1;
     dec:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
     df0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
     df4:	89 2b       	or	r24, r25
     df6:	31 f4       	brne	.+12     	; 0xe04 <__vector_5+0x4a>
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     e00:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if((dir==DOWN) || (dir==RIGHT)|| (dir==UP))
     e04:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     e08:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     e0c:	80 35       	cpi	r24, 0x50	; 80
     e0e:	91 05       	cpc	r25, r1
     e10:	71 f0       	breq	.+28     	; 0xe2e <__vector_5+0x74>
     e12:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     e16:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     e1a:	8d 34       	cpi	r24, 0x4D	; 77
     e1c:	91 05       	cpc	r25, r1
     e1e:	39 f0       	breq	.+14     	; 0xe2e <__vector_5+0x74>
     e20:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     e24:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     e28:	88 34       	cpi	r24, 0x48	; 72
     e2a:	91 05       	cpc	r25, r1
     e2c:	51 f4       	brne	.+20     	; 0xe42 <__vector_5+0x88>
	{
		SendCommand01(0x0F, 0x01, 0x03);
     e2e:	43 e0       	ldi	r20, 0x03	; 3
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	8f e0       	ldi	r24, 0x0F	; 15
     e34:	fe db       	rcall	.-2052   	; 0x632 <SendCommand01>
		
		dir = RIGHT;
     e36:	8d e4       	ldi	r24, 0x4D	; 77
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     e3e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     e42:	00 00       	nop
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	ff 91       	pop	r31
     e4a:	ef 91       	pop	r30
     e4c:	bf 91       	pop	r27
     e4e:	af 91       	pop	r26
     e50:	9f 91       	pop	r25
     e52:	8f 91       	pop	r24
     e54:	7f 91       	pop	r23
     e56:	6f 91       	pop	r22
     e58:	5f 91       	pop	r21
     e5a:	4f 91       	pop	r20
     e5c:	3f 91       	pop	r19
     e5e:	2f 91       	pop	r18
     e60:	0f 90       	pop	r0
     e62:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     e66:	0f 90       	pop	r0
     e68:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e6c:	0f 90       	pop	r0
     e6e:	1f 90       	pop	r1
     e70:	18 95       	reti

00000e72 <title>:


void title()
{
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	00 d0       	rcall	.+0      	; 0xe78 <title+0x6>
     e78:	00 d0       	rcall	.+0      	; 0xe7a <title+0x8>
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
	oled_msg(0, 3, "KMM's SNAKE GAME");
     e7e:	8d e9       	ldi	r24, 0x9D	; 157
     e80:	92 e0       	ldi	r25, 0x02	; 2
     e82:	89 2f       	mov	r24, r25
     e84:	8f 93       	push	r24
     e86:	8d e9       	ldi	r24, 0x9D	; 157
     e88:	92 e0       	ldi	r25, 0x02	; 2
     e8a:	8f 93       	push	r24
     e8c:	1f 92       	push	r1
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	8f 93       	push	r24
     e92:	1f 92       	push	r1
     e94:	1f 92       	push	r1
     e96:	d9 dd       	rcall	.-1102   	; 0xa4a <oled_msg>
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
	for(int i = 0; i < 128; i++)
     ea4:	1a 82       	std	Y+2, r1	; 0x02
     ea6:	19 82       	std	Y+1, r1	; 0x01
     ea8:	17 c0       	rjmp	.+46     	; 0xed8 <title+0x66>
	{
		ssd1306_set_page_start(2);
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	a2 dc       	rcall	.-1724   	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	b3 dc       	rcall	.-1690   	; 0x818 <ssd1306_set_column_addr>
     eb2:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(horizon1, 1);
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	8a e0       	ldi	r24, 0x0A	; 10
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	19 dc       	rcall	.-1998   	; 0x6ee <ssd1306_data>
		ssd1306_set_page_start(7);
     ebc:	87 e0       	ldi	r24, 0x07	; 7
     ebe:	99 dc       	rcall	.-1742   	; 0x7f2 <ssd1306_set_page_start>
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
		ssd1306_set_column_addr(i);
     ec2:	aa dc       	rcall	.-1708   	; 0x818 <ssd1306_set_column_addr>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(horizon2, 1);
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	8b e0       	ldi	r24, 0x0B	; 11
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	10 dc       	rcall	.-2016   	; 0x6ee <ssd1306_data>
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02


void title()
{
	oled_msg(0, 3, "KMM's SNAKE GAME");
	for(int i = 0; i < 128; i++)
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	80 38       	cpi	r24, 0x80	; 128
     ede:	91 05       	cpc	r25, r1
     ee0:	24 f3       	brlt	.-56     	; 0xeaa <title+0x38>
     ee2:	1c 82       	std	Y+4, r1	; 0x04
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
     ee4:	1b 82       	std	Y+3, r1	; 0x03
     ee6:	15 c0       	rjmp	.+42     	; 0xf12 <title+0xa0>
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
	{
		ssd1306_set_page_start(i);
     eea:	83 dc       	rcall	.-1786   	; 0x7f2 <ssd1306_set_page_start>
     eec:	80 e0       	ldi	r24, 0x00	; 0
		ssd1306_set_column_addr(0);
     eee:	94 dc       	rcall	.-1752   	; 0x818 <ssd1306_set_column_addr>
     ef0:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(vertical, 1);
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	8c e0       	ldi	r24, 0x0C	; 12
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	fa db       	rcall	.-2060   	; 0x6ee <ssd1306_data>
     efa:	8f e7       	ldi	r24, 0x7F	; 127
		ssd1306_set_column_addr(127);
     efc:	8d dc       	rcall	.-1766   	; 0x818 <ssd1306_set_column_addr>
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	70 e0       	ldi	r23, 0x00	; 0
		ssd1306_data(vertical, 1);
     f02:	8c e0       	ldi	r24, 0x0C	; 12
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	f3 db       	rcall	.-2074   	; 0x6ee <ssd1306_data>
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
     f0a:	9c 81       	ldd	r25, Y+4	; 0x04
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	9c 83       	std	Y+4, r25	; 0x04
     f10:	8b 83       	std	Y+3, r24	; 0x03
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	08 97       	sbiw	r24, 0x08	; 8
     f18:	3c f3       	brlt	.-50     	; 0xee8 <title+0x76>
     f1a:	09 d0       	rcall	.+18     	; 0xf2e <draw_map>
		ssd1306_data(vertical, 1);
		ssd1306_set_column_addr(127);
		ssd1306_data(vertical, 1);
	}

	draw_map();
     f1c:	2a d3       	rcall	.+1620   	; 0x1572 <food>
     f1e:	00 00       	nop
	
	food(); // food 생성
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0

}
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	08 95       	ret

00000f2e <draw_map>:
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	cd b7       	in	r28, 0x3d	; 61

void draw_map()
{
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	c7 50       	subi	r28, 0x07	; 7
     f38:	d3 40       	sbci	r29, 0x03	; 3
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
	unsigned char MAP [6][128] = {0};
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	33 e0       	ldi	r19, 0x03	; 3
     f48:	ce 01       	movw	r24, r28
     f4a:	08 96       	adiw	r24, 0x08	; 8
     f4c:	dc 01       	movw	r26, r24
     f4e:	f9 01       	movw	r30, r18
     f50:	1d 92       	st	X+, r1
     f52:	31 97       	sbiw	r30, 0x01	; 1
     f54:	e9 f7       	brne	.-6      	; 0xf50 <draw_map+0x22>

	for(int i = 0; i < 6; i++)
     f56:	1a 82       	std	Y+2, r1	; 0x02
     f58:	19 82       	std	Y+1, r1	; 0x01
     f5a:	7b c0       	rjmp	.+246    	; 0x1052 <draw_map+0x124>
	{
		for(int j = 0; j < 128; j++)
     f5c:	1c 82       	std	Y+4, r1	; 0x04
     f5e:	1b 82       	std	Y+3, r1	; 0x03
     f60:	6d c0       	rjmp	.+218    	; 0x103c <draw_map+0x10e>
		{
			if(j == 0) MAP[i][j] = vertical[0];
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	89 2b       	or	r24, r25
     f68:	b1 f4       	brne	.+44     	; 0xf96 <draw_map+0x68>
     f6a:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <vertical>
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	96 95       	lsr	r25
     f74:	98 2f       	mov	r25, r24
     f76:	88 27       	eor	r24, r24
     f78:	97 95       	ror	r25
     f7a:	87 95       	ror	r24
     f7c:	9e 01       	movw	r18, r28
     f7e:	2f 5f       	subi	r18, 0xFF	; 255
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	28 0f       	add	r18, r24
     f84:	39 1f       	adc	r19, r25
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	9c 81       	ldd	r25, Y+4	; 0x04
     f8a:	82 0f       	add	r24, r18
     f8c:	93 1f       	adc	r25, r19
     f8e:	07 96       	adiw	r24, 0x07	; 7
     f90:	dc 01       	movw	r26, r24
     f92:	4c 93       	st	X, r20
     f94:	4e c0       	rjmp	.+156    	; 0x1032 <draw_map+0x104>
			else if(j == 127) MAP[i][j] = vertical[0];
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	9c 81       	ldd	r25, Y+4	; 0x04
     f9a:	8f 37       	cpi	r24, 0x7F	; 127
     f9c:	91 05       	cpc	r25, r1
     f9e:	b1 f4       	brne	.+44     	; 0xfcc <draw_map+0x9e>
     fa0:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <vertical>
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	9a 81       	ldd	r25, Y+2	; 0x02
     fa8:	96 95       	lsr	r25
     faa:	98 2f       	mov	r25, r24
     fac:	88 27       	eor	r24, r24
     fae:	97 95       	ror	r25
     fb0:	87 95       	ror	r24
     fb2:	9e 01       	movw	r18, r28
     fb4:	2f 5f       	subi	r18, 0xFF	; 255
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	28 0f       	add	r18, r24
     fba:	39 1f       	adc	r19, r25
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	82 0f       	add	r24, r18
     fc2:	93 1f       	adc	r25, r19
     fc4:	07 96       	adiw	r24, 0x07	; 7
     fc6:	fc 01       	movw	r30, r24
     fc8:	40 83       	st	Z, r20
     fca:	33 c0       	rjmp	.+102    	; 0x1032 <draw_map+0x104>
			else if(i == 0) MAP[i][j] = horizon1[0];
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
     fd0:	89 2b       	or	r24, r25
     fd2:	b1 f4       	brne	.+44     	; 0x1000 <draw_map+0xd2>
     fd4:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <horizon1>
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	96 95       	lsr	r25
     fde:	98 2f       	mov	r25, r24
     fe0:	88 27       	eor	r24, r24
     fe2:	97 95       	ror	r25
     fe4:	87 95       	ror	r24
     fe6:	9e 01       	movw	r18, r28
     fe8:	2f 5f       	subi	r18, 0xFF	; 255
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	28 0f       	add	r18, r24
     fee:	39 1f       	adc	r19, r25
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	9c 81       	ldd	r25, Y+4	; 0x04
     ff4:	82 0f       	add	r24, r18
     ff6:	93 1f       	adc	r25, r19
     ff8:	07 96       	adiw	r24, 0x07	; 7
     ffa:	dc 01       	movw	r26, r24
     ffc:	4c 93       	st	X, r20
     ffe:	19 c0       	rjmp	.+50     	; 0x1032 <draw_map+0x104>
			else if(i == 5) MAP[i][j] = horizon2[0];
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	9a 81       	ldd	r25, Y+2	; 0x02
    1004:	05 97       	sbiw	r24, 0x05	; 5
    1006:	a9 f4       	brne	.+42     	; 0x1032 <draw_map+0x104>
    1008:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <horizon2>
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
    1010:	96 95       	lsr	r25
    1012:	98 2f       	mov	r25, r24
    1014:	88 27       	eor	r24, r24
    1016:	97 95       	ror	r25
    1018:	87 95       	ror	r24
    101a:	9e 01       	movw	r18, r28
    101c:	2f 5f       	subi	r18, 0xFF	; 255
    101e:	3f 4f       	sbci	r19, 0xFF	; 255
    1020:	28 0f       	add	r18, r24
    1022:	39 1f       	adc	r19, r25
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	9c 81       	ldd	r25, Y+4	; 0x04
    1028:	82 0f       	add	r24, r18
    102a:	93 1f       	adc	r25, r19
    102c:	07 96       	adiw	r24, 0x07	; 7
    102e:	fc 01       	movw	r30, r24
    1030:	40 83       	st	Z, r20
{
	unsigned char MAP [6][128] = {0};

	for(int i = 0; i < 6; i++)
	{
		for(int j = 0; j < 128; j++)
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	9c 83       	std	Y+4, r25	; 0x04
    103a:	8b 83       	std	Y+3, r24	; 0x03
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	80 38       	cpi	r24, 0x80	; 128
    1042:	91 05       	cpc	r25, r1
    1044:	0c f4       	brge	.+2      	; 0x1048 <draw_map+0x11a>
    1046:	8d cf       	rjmp	.-230    	; 0xf62 <draw_map+0x34>

void draw_map()
{
	unsigned char MAP [6][128] = {0};

	for(int i = 0; i < 6; i++)
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	9a 81       	ldd	r25, Y+2	; 0x02
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	9a 81       	ldd	r25, Y+2	; 0x02
    1056:	06 97       	sbiw	r24, 0x06	; 6
    1058:	0c f4       	brge	.+2      	; 0x105c <draw_map+0x12e>
    105a:	80 cf       	rjmp	.-256    	; 0xf5c <draw_map+0x2e>
			else if(i == 0) MAP[i][j] = horizon1[0];
			else if(i == 5) MAP[i][j] = horizon2[0];
		}
	}

	MAP[2*(food_y)/8][2*(food_x)] |= ((0x03 << (2*(food_y) % 8)));
    105c:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    1060:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	99 23       	and	r25, r25
    106a:	0c f4       	brge	.+2      	; 0x106e <draw_map+0x140>
    106c:	07 96       	adiw	r24, 0x07	; 7
    106e:	95 95       	asr	r25
    1070:	87 95       	ror	r24
    1072:	95 95       	asr	r25
    1074:	87 95       	ror	r24
    1076:	95 95       	asr	r25
    1078:	87 95       	ror	r24
    107a:	9c 01       	movw	r18, r24
    107c:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    1080:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    1084:	ac 01       	movw	r20, r24
    1086:	44 0f       	add	r20, r20
    1088:	55 1f       	adc	r21, r21
    108a:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    108e:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	b9 01       	movw	r22, r18
    1098:	76 95       	lsr	r23
    109a:	76 2f       	mov	r23, r22
    109c:	66 27       	eor	r22, r22
    109e:	77 95       	ror	r23
    10a0:	67 95       	ror	r22
    10a2:	fe 01       	movw	r30, r28
    10a4:	31 96       	adiw	r30, 0x01	; 1
    10a6:	6e 0f       	add	r22, r30
    10a8:	7f 1f       	adc	r23, r31
    10aa:	86 0f       	add	r24, r22
    10ac:	97 1f       	adc	r25, r23
    10ae:	07 96       	adiw	r24, 0x07	; 7
    10b0:	dc 01       	movw	r26, r24
    10b2:	8c 91       	ld	r24, X
    10b4:	e8 2f       	mov	r30, r24
    10b6:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    10ba:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	87 70       	andi	r24, 0x07	; 7
    10c4:	90 78       	andi	r25, 0x80	; 128
    10c6:	99 23       	and	r25, r25
    10c8:	24 f4       	brge	.+8      	; 0x10d2 <draw_map+0x1a4>
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	88 6f       	ori	r24, 0xF8	; 248
    10ce:	9f 6f       	ori	r25, 0xFF	; 255
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	bc 01       	movw	r22, r24
    10d4:	83 e0       	ldi	r24, 0x03	; 3
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <draw_map+0x1b0>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	6a 95       	dec	r22
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <draw_map+0x1ac>
    10e2:	8e 2b       	or	r24, r30
    10e4:	68 2f       	mov	r22, r24
    10e6:	c9 01       	movw	r24, r18
    10e8:	96 95       	lsr	r25
    10ea:	98 2f       	mov	r25, r24
    10ec:	88 27       	eor	r24, r24
    10ee:	97 95       	ror	r25
    10f0:	87 95       	ror	r24
    10f2:	9e 01       	movw	r18, r28
    10f4:	2f 5f       	subi	r18, 0xFF	; 255
    10f6:	3f 4f       	sbci	r19, 0xFF	; 255
    10f8:	82 0f       	add	r24, r18
    10fa:	93 1f       	adc	r25, r19
    10fc:	84 0f       	add	r24, r20
    10fe:	95 1f       	adc	r25, r21
    1100:	07 96       	adiw	r24, 0x07	; 7
    1102:	fc 01       	movw	r30, r24
    1104:	60 83       	st	Z, r22
	MAP[2*(food_y)/8][2*(food_x) + 1] |= ((0x03 << (2*(food_y) % 8)));
    1106:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    110a:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	99 23       	and	r25, r25
    1114:	0c f4       	brge	.+2      	; 0x1118 <__stack+0x19>
    1116:	07 96       	adiw	r24, 0x07	; 7
    1118:	95 95       	asr	r25
    111a:	87 95       	ror	r24
    111c:	95 95       	asr	r25
    111e:	87 95       	ror	r24
    1120:	95 95       	asr	r25
    1122:	87 95       	ror	r24
    1124:	9c 01       	movw	r18, r24
    1126:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    112a:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	ac 01       	movw	r20, r24
    1134:	4f 5f       	subi	r20, 0xFF	; 255
    1136:	5f 4f       	sbci	r21, 0xFF	; 255
    1138:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    113c:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	b9 01       	movw	r22, r18
    1148:	76 95       	lsr	r23
    114a:	76 2f       	mov	r23, r22
    114c:	66 27       	eor	r22, r22
    114e:	77 95       	ror	r23
    1150:	67 95       	ror	r22
    1152:	fe 01       	movw	r30, r28
    1154:	31 96       	adiw	r30, 0x01	; 1
    1156:	6e 0f       	add	r22, r30
    1158:	7f 1f       	adc	r23, r31
    115a:	86 0f       	add	r24, r22
    115c:	97 1f       	adc	r25, r23
    115e:	07 96       	adiw	r24, 0x07	; 7
    1160:	dc 01       	movw	r26, r24
    1162:	8c 91       	ld	r24, X
    1164:	e8 2f       	mov	r30, r24
    1166:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    116a:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	87 70       	andi	r24, 0x07	; 7
    1174:	90 78       	andi	r25, 0x80	; 128
    1176:	99 23       	and	r25, r25
    1178:	24 f4       	brge	.+8      	; 0x1182 <__stack+0x83>
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	88 6f       	ori	r24, 0xF8	; 248
    117e:	9f 6f       	ori	r25, 0xFF	; 255
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	bc 01       	movw	r22, r24
    1184:	83 e0       	ldi	r24, 0x03	; 3
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 c0       	rjmp	.+4      	; 0x118e <__stack+0x8f>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	6a 95       	dec	r22
    1190:	e2 f7       	brpl	.-8      	; 0x118a <__stack+0x8b>
    1192:	8e 2b       	or	r24, r30
    1194:	68 2f       	mov	r22, r24
    1196:	c9 01       	movw	r24, r18
    1198:	96 95       	lsr	r25
    119a:	98 2f       	mov	r25, r24
    119c:	88 27       	eor	r24, r24
    119e:	97 95       	ror	r25
    11a0:	87 95       	ror	r24
    11a2:	9e 01       	movw	r18, r28
    11a4:	2f 5f       	subi	r18, 0xFF	; 255
    11a6:	3f 4f       	sbci	r19, 0xFF	; 255
    11a8:	82 0f       	add	r24, r18
    11aa:	93 1f       	adc	r25, r19
    11ac:	84 0f       	add	r24, r20
    11ae:	95 1f       	adc	r25, r21
    11b0:	07 96       	adiw	r24, 0x07	; 7
    11b2:	fc 01       	movw	r30, r24
    11b4:	60 83       	st	Z, r22


	for(int i=0;i<length;i++)	//뱀 몸통값 입력
    11b6:	1e 82       	std	Y+6, r1	; 0x06
    11b8:	1d 82       	std	Y+5, r1	; 0x05
    11ba:	c3 c0       	rjmp	.+390    	; 0x1342 <__stack+0x243>
	{
		MAP[2*(y[i])/8][2*(x[i])] |= ((0x03 << (2*(y[i]) % 8)));
    11bc:	8d 81       	ldd	r24, Y+5	; 0x05
    11be:	9e 81       	ldd	r25, Y+6	; 0x06
    11c0:	8b 52       	subi	r24, 0x2B	; 43
    11c2:	9e 4f       	sbci	r25, 0xFE	; 254
    11c4:	dc 01       	movw	r26, r24
    11c6:	8c 91       	ld	r24, X
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	99 23       	and	r25, r25
    11d2:	0c f4       	brge	.+2      	; 0x11d6 <__stack+0xd7>
    11d4:	07 96       	adiw	r24, 0x07	; 7
    11d6:	95 95       	asr	r25
    11d8:	87 95       	ror	r24
    11da:	95 95       	asr	r25
    11dc:	87 95       	ror	r24
    11de:	95 95       	asr	r25
    11e0:	87 95       	ror	r24
    11e2:	2d 81       	ldd	r18, Y+5	; 0x05
    11e4:	3e 81       	ldd	r19, Y+6	; 0x06
    11e6:	23 5f       	subi	r18, 0xF3	; 243
    11e8:	3e 4f       	sbci	r19, 0xFE	; 254
    11ea:	f9 01       	movw	r30, r18
    11ec:	20 81       	ld	r18, Z
    11ee:	22 2f       	mov	r18, r18
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	22 0f       	add	r18, r18
    11f4:	33 1f       	adc	r19, r19
    11f6:	4d 81       	ldd	r20, Y+5	; 0x05
    11f8:	5e 81       	ldd	r21, Y+6	; 0x06
    11fa:	43 5f       	subi	r20, 0xF3	; 243
    11fc:	5e 4f       	sbci	r21, 0xFE	; 254
    11fe:	da 01       	movw	r26, r20
    1200:	4c 91       	ld	r20, X
    1202:	44 2f       	mov	r20, r20
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	44 0f       	add	r20, r20
    1208:	55 1f       	adc	r21, r21
    120a:	bc 01       	movw	r22, r24
    120c:	76 95       	lsr	r23
    120e:	76 2f       	mov	r23, r22
    1210:	66 27       	eor	r22, r22
    1212:	77 95       	ror	r23
    1214:	67 95       	ror	r22
    1216:	fe 01       	movw	r30, r28
    1218:	31 96       	adiw	r30, 0x01	; 1
    121a:	6e 0f       	add	r22, r30
    121c:	7f 1f       	adc	r23, r31
    121e:	46 0f       	add	r20, r22
    1220:	57 1f       	adc	r21, r23
    1222:	49 5f       	subi	r20, 0xF9	; 249
    1224:	5f 4f       	sbci	r21, 0xFF	; 255
    1226:	fa 01       	movw	r30, r20
    1228:	40 81       	ld	r20, Z
    122a:	e4 2f       	mov	r30, r20
    122c:	4d 81       	ldd	r20, Y+5	; 0x05
    122e:	5e 81       	ldd	r21, Y+6	; 0x06
    1230:	4b 52       	subi	r20, 0x2B	; 43
    1232:	5e 4f       	sbci	r21, 0xFE	; 254
    1234:	da 01       	movw	r26, r20
    1236:	4c 91       	ld	r20, X
    1238:	44 2f       	mov	r20, r20
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	44 0f       	add	r20, r20
    123e:	55 1f       	adc	r21, r21
    1240:	ba 01       	movw	r22, r20
    1242:	66 70       	andi	r22, 0x06	; 6
    1244:	77 27       	eor	r23, r23
    1246:	43 e0       	ldi	r20, 0x03	; 3
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <__stack+0x151>
    124c:	44 0f       	add	r20, r20
    124e:	55 1f       	adc	r21, r21
    1250:	6a 95       	dec	r22
    1252:	e2 f7       	brpl	.-8      	; 0x124c <__stack+0x14d>
    1254:	4e 2b       	or	r20, r30
    1256:	64 2f       	mov	r22, r20
    1258:	96 95       	lsr	r25
    125a:	98 2f       	mov	r25, r24
    125c:	88 27       	eor	r24, r24
    125e:	97 95       	ror	r25
    1260:	87 95       	ror	r24
    1262:	ae 01       	movw	r20, r28
    1264:	4f 5f       	subi	r20, 0xFF	; 255
    1266:	5f 4f       	sbci	r21, 0xFF	; 255
    1268:	84 0f       	add	r24, r20
    126a:	95 1f       	adc	r25, r21
    126c:	82 0f       	add	r24, r18
    126e:	93 1f       	adc	r25, r19
    1270:	07 96       	adiw	r24, 0x07	; 7
    1272:	fc 01       	movw	r30, r24
    1274:	60 83       	st	Z, r22
		MAP[2*(y[i])/8][2*(x[i]) + 1] |= ((0x03 << (2*(y[i]) % 8)));
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	9e 81       	ldd	r25, Y+6	; 0x06
    127a:	8b 52       	subi	r24, 0x2B	; 43
    127c:	9e 4f       	sbci	r25, 0xFE	; 254
    127e:	dc 01       	movw	r26, r24
    1280:	8c 91       	ld	r24, X
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	99 23       	and	r25, r25
    128c:	0c f4       	brge	.+2      	; 0x1290 <__stack+0x191>
    128e:	07 96       	adiw	r24, 0x07	; 7
    1290:	95 95       	asr	r25
    1292:	87 95       	ror	r24
    1294:	95 95       	asr	r25
    1296:	87 95       	ror	r24
    1298:	95 95       	asr	r25
    129a:	87 95       	ror	r24
    129c:	2d 81       	ldd	r18, Y+5	; 0x05
    129e:	3e 81       	ldd	r19, Y+6	; 0x06
    12a0:	23 5f       	subi	r18, 0xF3	; 243
    12a2:	3e 4f       	sbci	r19, 0xFE	; 254
    12a4:	f9 01       	movw	r30, r18
    12a6:	20 81       	ld	r18, Z
    12a8:	22 2f       	mov	r18, r18
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	22 0f       	add	r18, r18
    12ae:	33 1f       	adc	r19, r19
    12b0:	2f 5f       	subi	r18, 0xFF	; 255
    12b2:	3f 4f       	sbci	r19, 0xFF	; 255
    12b4:	4d 81       	ldd	r20, Y+5	; 0x05
    12b6:	5e 81       	ldd	r21, Y+6	; 0x06
    12b8:	43 5f       	subi	r20, 0xF3	; 243
    12ba:	5e 4f       	sbci	r21, 0xFE	; 254
    12bc:	da 01       	movw	r26, r20
    12be:	4c 91       	ld	r20, X
    12c0:	44 2f       	mov	r20, r20
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	44 0f       	add	r20, r20
    12c6:	55 1f       	adc	r21, r21
    12c8:	4f 5f       	subi	r20, 0xFF	; 255
    12ca:	5f 4f       	sbci	r21, 0xFF	; 255
    12cc:	bc 01       	movw	r22, r24
    12ce:	76 95       	lsr	r23
    12d0:	76 2f       	mov	r23, r22
    12d2:	66 27       	eor	r22, r22
    12d4:	77 95       	ror	r23
    12d6:	67 95       	ror	r22
    12d8:	fe 01       	movw	r30, r28
    12da:	31 96       	adiw	r30, 0x01	; 1
    12dc:	6e 0f       	add	r22, r30
    12de:	7f 1f       	adc	r23, r31
    12e0:	46 0f       	add	r20, r22
    12e2:	57 1f       	adc	r21, r23
    12e4:	49 5f       	subi	r20, 0xF9	; 249
    12e6:	5f 4f       	sbci	r21, 0xFF	; 255
    12e8:	fa 01       	movw	r30, r20
    12ea:	40 81       	ld	r20, Z
    12ec:	e4 2f       	mov	r30, r20
    12ee:	4d 81       	ldd	r20, Y+5	; 0x05
    12f0:	5e 81       	ldd	r21, Y+6	; 0x06
    12f2:	4b 52       	subi	r20, 0x2B	; 43
    12f4:	5e 4f       	sbci	r21, 0xFE	; 254
    12f6:	da 01       	movw	r26, r20
    12f8:	4c 91       	ld	r20, X
    12fa:	44 2f       	mov	r20, r20
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	44 0f       	add	r20, r20
    1300:	55 1f       	adc	r21, r21
    1302:	ba 01       	movw	r22, r20
    1304:	66 70       	andi	r22, 0x06	; 6
    1306:	77 27       	eor	r23, r23
    1308:	43 e0       	ldi	r20, 0x03	; 3
    130a:	50 e0       	ldi	r21, 0x00	; 0
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <__stack+0x213>
    130e:	44 0f       	add	r20, r20
    1310:	55 1f       	adc	r21, r21
    1312:	6a 95       	dec	r22
    1314:	e2 f7       	brpl	.-8      	; 0x130e <__stack+0x20f>
    1316:	4e 2b       	or	r20, r30
    1318:	64 2f       	mov	r22, r20
    131a:	96 95       	lsr	r25
    131c:	98 2f       	mov	r25, r24
    131e:	88 27       	eor	r24, r24
    1320:	97 95       	ror	r25
    1322:	87 95       	ror	r24
    1324:	ae 01       	movw	r20, r28
    1326:	4f 5f       	subi	r20, 0xFF	; 255
    1328:	5f 4f       	sbci	r21, 0xFF	; 255
    132a:	84 0f       	add	r24, r20
    132c:	95 1f       	adc	r25, r21
    132e:	82 0f       	add	r24, r18
    1330:	93 1f       	adc	r25, r19
    1332:	07 96       	adiw	r24, 0x07	; 7
    1334:	fc 01       	movw	r30, r24
    1336:	60 83       	st	Z, r22

	MAP[2*(food_y)/8][2*(food_x)] |= ((0x03 << (2*(food_y) % 8)));
	MAP[2*(food_y)/8][2*(food_x) + 1] |= ((0x03 << (2*(food_y) % 8)));


	for(int i=0;i<length;i++)	//뱀 몸통값 입력
    1338:	8d 81       	ldd	r24, Y+5	; 0x05
    133a:	9e 81       	ldd	r25, Y+6	; 0x06
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	9e 83       	std	Y+6, r25	; 0x06
    1340:	8d 83       	std	Y+5, r24	; 0x05
    1342:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    1346:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    134a:	2d 81       	ldd	r18, Y+5	; 0x05
    134c:	3e 81       	ldd	r19, Y+6	; 0x06
    134e:	28 17       	cp	r18, r24
    1350:	39 07       	cpc	r19, r25
    1352:	0c f4       	brge	.+2      	; 0x1356 <__stack+0x257>
    1354:	33 cf       	rjmp	.-410    	; 0x11bc <__stack+0xbd>
		MAP[2*(y[i])/8][2*(x[i])] |= ((0x03 << (2*(y[i]) % 8)));
		MAP[2*(y[i])/8][2*(x[i]) + 1] |= ((0x03 << (2*(y[i]) % 8)));
	}

	unsigned char x,y;
	for(y=2;y<8;y++)
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	8f 83       	std	Y+7, r24	; 0x07
    135a:	16 c0       	rjmp	.+44     	; 0x1388 <__stack+0x289>
	{
		ssd1306_set_page_start(y);
    135c:	8f 81       	ldd	r24, Y+7	; 0x07
    135e:	49 da       	rcall	.-2926   	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_data(MAP[y - 2], COL_NUM);
    1360:	8f 81       	ldd	r24, Y+7	; 0x07
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 97       	sbiw	r24, 0x02	; 2
    1368:	9e 01       	movw	r18, r28
    136a:	28 5f       	subi	r18, 0xF8	; 248
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	96 95       	lsr	r25
    1370:	98 2f       	mov	r25, r24
    1372:	88 27       	eor	r24, r24
    1374:	97 95       	ror	r25
    1376:	87 95       	ror	r24
    1378:	82 0f       	add	r24, r18
    137a:	93 1f       	adc	r25, r19
    137c:	60 e8       	ldi	r22, 0x80	; 128
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	b6 d9       	rcall	.-3220   	; 0x6ee <ssd1306_data>
		MAP[2*(y[i])/8][2*(x[i])] |= ((0x03 << (2*(y[i]) % 8)));
		MAP[2*(y[i])/8][2*(x[i]) + 1] |= ((0x03 << (2*(y[i]) % 8)));
	}

	unsigned char x,y;
	for(y=2;y<8;y++)
    1382:	8f 81       	ldd	r24, Y+7	; 0x07
    1384:	8f 5f       	subi	r24, 0xFF	; 255
    1386:	8f 83       	std	Y+7, r24	; 0x07
    1388:	8f 81       	ldd	r24, Y+7	; 0x07
    138a:	88 30       	cpi	r24, 0x08	; 8
    138c:	38 f3       	brcs	.-50     	; 0x135c <__stack+0x25d>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(MAP[y - 2], COL_NUM);
	}
}
    138e:	00 00       	nop
    1390:	c9 5f       	subi	r28, 0xF9	; 249
    1392:	dc 4f       	sbci	r29, 0xFC	; 252
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	de bf       	out	0x3e, r29	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	cd bf       	out	0x3d, r28	; 61
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	08 95       	ret

000013a4 <move>:


void move(int dir)
{
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <move+0x6>
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <move+0x8>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <move+0xa>
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	9e 83       	std	Y+6, r25	; 0x06
    13b4:	8d 83       	std	Y+5, r24	; 0x05
	
	

	if(x[0]==food_x&&y[0]==food_y)
    13b6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    13c2:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    13c6:	28 17       	cp	r18, r24
    13c8:	39 07       	cpc	r19, r25
    13ca:	d9 f5       	brne	.+118    	; 0x1442 <move+0x9e>
    13cc:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    13d8:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    13dc:	28 17       	cp	r18, r24
    13de:	39 07       	cpc	r19, r25
    13e0:	81 f5       	brne	.+96     	; 0x1442 <move+0x9e>
	{ //food와 충돌했을 경우
		food(); //새로운 food 추가
    13e2:	c7 d0       	rcall	.+398    	; 0x1572 <food>
		length++; //길이증가
    13e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    13e8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <length+0x1>
    13f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <length>
		x[length-1]=x[length-2]; //새로만든 몸통에 값 입력
    13f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    13fa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <length>
    1404:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <length+0x1>
    1408:	22 50       	subi	r18, 0x02	; 2
    140a:	31 09       	sbc	r19, r1
    140c:	23 5f       	subi	r18, 0xF3	; 243
    140e:	3e 4f       	sbci	r19, 0xFE	; 254
    1410:	f9 01       	movw	r30, r18
    1412:	20 81       	ld	r18, Z
    1414:	83 5f       	subi	r24, 0xF3	; 243
    1416:	9e 4f       	sbci	r25, 0xFE	; 254
    1418:	fc 01       	movw	r30, r24
    141a:	20 83       	st	Z, r18
		y[length-1]=y[length-2];
    141c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    1420:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <length>
    142a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <length+0x1>
    142e:	22 50       	subi	r18, 0x02	; 2
    1430:	31 09       	sbc	r19, r1
    1432:	2b 52       	subi	r18, 0x2B	; 43
    1434:	3e 4f       	sbci	r19, 0xFE	; 254
    1436:	f9 01       	movw	r30, r18
    1438:	20 81       	ld	r18, Z
    143a:	8b 52       	subi	r24, 0x2B	; 43
    143c:	9e 4f       	sbci	r25, 0xFE	; 254
    143e:	fc 01       	movw	r30, r24
    1440:	20 83       	st	Z, r18
	}
	if(x[0]==0||x[0]== 63||y[0]==0||y[0]==23)
    1442:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    1446:	88 23       	and	r24, r24
    1448:	61 f0       	breq	.+24     	; 0x1462 <move+0xbe>
    144a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    144e:	8f 33       	cpi	r24, 0x3F	; 63
    1450:	41 f0       	breq	.+16     	; 0x1462 <move+0xbe>
    1452:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    1456:	88 23       	and	r24, r24
    1458:	21 f0       	breq	.+8      	; 0x1462 <move+0xbe>
    145a:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    145e:	87 31       	cpi	r24, 0x17	; 23
	{ //벽과 충돌했을 경우
		game_over();
    1460:	11 f4       	brne	.+4      	; 0x1466 <move+0xc2>
    1462:	f3 d0       	rcall	.+486    	; 0x164a <game_over>
		return; //game_over에서 게임을 다시 시작하게 되면 여기서부터 반복되므로
    1464:	7d c0       	rjmp	.+250    	; 0x1560 <move+0x1bc>
		//return을 사용하여 move의 나머지 부분이 실행되지 않도록 합니다.
	}
	for(int i=1;i<length;i++)
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9a 83       	std	Y+2, r25	; 0x02
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	1b c0       	rjmp	.+54     	; 0x14a6 <move+0x102>
	{ //자기몸과 충돌했는지 검사
		if(x[0]==x[i] && y[0]==y[i])
    1470:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <x>
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	9a 81       	ldd	r25, Y+2	; 0x02
    1478:	83 5f       	subi	r24, 0xF3	; 243
    147a:	9e 4f       	sbci	r25, 0xFE	; 254
    147c:	fc 01       	movw	r30, r24
    147e:	80 81       	ld	r24, Z
    1480:	28 17       	cp	r18, r24
    1482:	61 f4       	brne	.+24     	; 0x149c <move+0xf8>
    1484:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <y>
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	8b 52       	subi	r24, 0x2B	; 43
    148e:	9e 4f       	sbci	r25, 0xFE	; 254
    1490:	fc 01       	movw	r30, r24
    1492:	80 81       	ld	r24, Z
    1494:	28 17       	cp	r18, r24
		{
			game_over();
    1496:	11 f4       	brne	.+4      	; 0x149c <move+0xf8>
    1498:	d8 d0       	rcall	.+432    	; 0x164a <game_over>
			return;
    149a:	62 c0       	rjmp	.+196    	; 0x1560 <move+0x1bc>
	{ //벽과 충돌했을 경우
		game_over();
		return; //game_over에서 게임을 다시 시작하게 되면 여기서부터 반복되므로
		//return을 사용하여 move의 나머지 부분이 실행되지 않도록 합니다.
	}
	for(int i=1;i<length;i++)
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	9a 81       	ldd	r25, Y+2	; 0x02
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    14aa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    14ae:	29 81       	ldd	r18, Y+1	; 0x01
    14b0:	3a 81       	ldd	r19, Y+2	; 0x02
    14b2:	28 17       	cp	r18, r24
    14b4:	39 07       	cpc	r19, r25
    14b6:	e4 f2       	brlt	.-72     	; 0x1470 <move+0xcc>
			return;
		}
	}
	

	for(int i=length - 1;i>0;i--){ //몸통좌표를 한칸씩 옮김
    14b8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    14bc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	9c 83       	std	Y+4, r25	; 0x04
    14c4:	8b 83       	std	Y+3, r24	; 0x03
    14c6:	1f c0       	rjmp	.+62     	; 0x1506 <move+0x162>
		x[i]=x[i-1];
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	83 5f       	subi	r24, 0xF3	; 243
    14d0:	9e 4f       	sbci	r25, 0xFE	; 254
    14d2:	fc 01       	movw	r30, r24
    14d4:	20 81       	ld	r18, Z
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	83 5f       	subi	r24, 0xF3	; 243
    14dc:	9e 4f       	sbci	r25, 0xFE	; 254
    14de:	fc 01       	movw	r30, r24
    14e0:	20 83       	st	Z, r18
		y[i]=y[i-1];
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	8b 52       	subi	r24, 0x2B	; 43
    14ea:	9e 4f       	sbci	r25, 0xFE	; 254
    14ec:	fc 01       	movw	r30, r24
    14ee:	20 81       	ld	r18, Z
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	8b 52       	subi	r24, 0x2B	; 43
    14f6:	9e 4f       	sbci	r25, 0xFE	; 254
    14f8:	fc 01       	movw	r30, r24
    14fa:	20 83       	st	Z, r18
			return;
		}
	}
	

	for(int i=length - 1;i>0;i--){ //몸통좌표를 한칸씩 옮김
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	9c 83       	std	Y+4, r25	; 0x04
    1504:	8b 83       	std	Y+3, r24	; 0x03
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	9c 81       	ldd	r25, Y+4	; 0x04
    150a:	18 16       	cp	r1, r24
    150c:	19 06       	cpc	r1, r25
    150e:	e4 f2       	brlt	.-72     	; 0x14c8 <move+0x124>
		y[i]=y[i-1];
	}

	

	if(dir==LEFT) x[0]--; //방향에 따라 새로운 머리좌표(x[0],y[0])값을 변경
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	8b 34       	cpi	r24, 0x4B	; 75
    1516:	91 05       	cpc	r25, r1
    1518:	29 f4       	brne	.+10     	; 0x1524 <move+0x180>
    151a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    151e:	81 50       	subi	r24, 0x01	; 1
    1520:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <x>
	if(dir==RIGHT) x[0]++;
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	8d 34       	cpi	r24, 0x4D	; 77
    152a:	91 05       	cpc	r25, r1
    152c:	29 f4       	brne	.+10     	; 0x1538 <move+0x194>
    152e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    1532:	8f 5f       	subi	r24, 0xFF	; 255
    1534:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <x>
	if(dir==UP) y[0]--;
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	88 34       	cpi	r24, 0x48	; 72
    153e:	91 05       	cpc	r25, r1
    1540:	29 f4       	brne	.+10     	; 0x154c <move+0x1a8>
    1542:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    1546:	81 50       	subi	r24, 0x01	; 1
    1548:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <y>
	if(dir==DOWN) y[0]++;
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	80 35       	cpi	r24, 0x50	; 80
    1552:	91 05       	cpc	r25, r1
    1554:	29 f4       	brne	.+10     	; 0x1560 <move+0x1bc>
    1556:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    155a:	8f 5f       	subi	r24, 0xFF	; 255
    155c:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <y>
	

	
	
}
    1560:	26 96       	adiw	r28, 0x06	; 6
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <food>:

void food()
{
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	00 d0       	rcall	.+0      	; 0x1578 <food+0x6>
    1578:	00 d0       	rcall	.+0      	; 0x157a <food+0x8>
    157a:	00 d0       	rcall	.+0      	; 0x157c <food+0xa>
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
	int food_crush_on=0;//food가 뱀 몸통좌표에 생길 경우 on
    1580:	1a 82       	std	Y+2, r1	; 0x02
    1582:	19 82       	std	Y+1, r1	; 0x01
	int r=0; //난수 생성에 사동되는 변수
    1584:	1e 82       	std	Y+6, r1	; 0x06
    1586:	1d 82       	std	Y+5, r1	; 0x05
	
	
	
	while(1){
		food_crush_on=0;
    1588:	1a 82       	std	Y+2, r1	; 0x02
    158a:	19 82       	std	Y+1, r1	; 0x01
		srand(TCNT0); //난수표생성
    158c:	82 e5       	ldi	r24, 0x52	; 82
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	fc 01       	movw	r30, r24
    1592:	80 81       	ld	r24, Z
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	ca d5       	rcall	.+2964   	; 0x212e <srand>
		food_x=(rand()%62)+2;    //난수를 좌표값에 넣음
    159a:	c6 d5       	rcall	.+2956   	; 0x2128 <rand>
    159c:	2e e3       	ldi	r18, 0x3E	; 62
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	b9 01       	movw	r22, r18
    15a2:	54 d5       	rcall	.+2728   	; 0x204c <__divmodhi4>
    15a4:	02 96       	adiw	r24, 0x02	; 2
    15a6:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <food_x+0x1>
    15aa:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <food_x>
		food_y=(rand()%22)+2;
    15ae:	bc d5       	rcall	.+2936   	; 0x2128 <rand>
    15b0:	26 e1       	ldi	r18, 0x16	; 22
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	b9 01       	movw	r22, r18
    15b6:	4a d5       	rcall	.+2708   	; 0x204c <__divmodhi4>
    15b8:	02 96       	adiw	r24, 0x02	; 2
    15ba:	90 93 40 07 	sts	0x0740, r25	; 0x800740 <food_y+0x1>
    15be:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <food_y>
    15c2:	1c 82       	std	Y+4, r1	; 0x04
		
		for(int i=0;i<length;i++)
    15c4:	1b 82       	std	Y+3, r1	; 0x03
    15c6:	28 c0       	rjmp	.+80     	; 0x1618 <food+0xa6>
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
		{ //food가 뱀 몸통과 겹치는지 확인
			if(food_x==x[i]&&food_y==y[i])
    15ca:	9c 81       	ldd	r25, Y+4	; 0x04
    15cc:	83 5f       	subi	r24, 0xF3	; 243
    15ce:	9e 4f       	sbci	r25, 0xFE	; 254
    15d0:	fc 01       	movw	r30, r24
    15d2:	80 81       	ld	r24, Z
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    15dc:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    15e0:	28 17       	cp	r18, r24
    15e2:	39 07       	cpc	r19, r25
    15e4:	a1 f4       	brne	.+40     	; 0x160e <food+0x9c>
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	8b 52       	subi	r24, 0x2B	; 43
    15ec:	9e 4f       	sbci	r25, 0xFE	; 254
    15ee:	fc 01       	movw	r30, r24
    15f0:	80 81       	ld	r24, Z
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    15fa:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    15fe:	28 17       	cp	r18, r24
    1600:	39 07       	cpc	r19, r25
    1602:	29 f4       	brne	.+10     	; 0x160e <food+0x9c>
    1604:	81 e0       	ldi	r24, 0x01	; 1
			{
				food_crush_on=1; //겹치면 food_crush_on 를 on
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9a 83       	std	Y+2, r25	; 0x02
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	0e c0       	rjmp	.+28     	; 0x162a <food+0xb8>
				break;
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
		food_crush_on=0;
		srand(TCNT0); //난수표생성
		food_x=(rand()%62)+2;    //난수를 좌표값에 넣음
		food_y=(rand()%22)+2;
		
		for(int i=0;i<length;i++)
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	01 96       	adiw	r24, 0x01	; 1
    1614:	9c 83       	std	Y+4, r25	; 0x04
    1616:	8b 83       	std	Y+3, r24	; 0x03
    1618:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    161c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    1620:	2b 81       	ldd	r18, Y+3	; 0x03
    1622:	3c 81       	ldd	r19, Y+4	; 0x04
    1624:	28 17       	cp	r18, r24
    1626:	39 07       	cpc	r19, r25
    1628:	7c f2       	brlt	.-98     	; 0x15c8 <food+0x56>
    162a:	89 81       	ldd	r24, Y+1	; 0x01
				food_crush_on=1; //겹치면 food_crush_on 를 on
				break;
			}
		}
		
		if(food_crush_on==1) continue; //겹쳤을 경우 while문을 다시 시작
    162c:	9a 81       	ldd	r25, Y+2	; 0x02
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	09 f4       	brne	.+2      	; 0x1634 <food+0xc2>
    1632:	aa cf       	rjmp	.-172    	; 0x1588 <food+0x16>
		
		break;
		
	}
    1634:	00 00       	nop
			}
		}
		
		if(food_crush_on==1) continue; //겹쳤을 경우 while문을 다시 시작
		
		break;
    1636:	00 00       	nop
		
	}
}
    1638:	26 96       	adiw	r28, 0x06	; 6
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	08 95       	ret

0000164a <game_over>:
    164a:	cf 93       	push	r28


void game_over()
{
    164c:	df 93       	push	r29
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	62 97       	sbiw	r28, 0x12	; 18
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
	//SendCommand01(0x06, 0x00, 0x04);
	//_delay_ms(200);
	SendCommand01(0x0F, 0x01, 0x04);
    165e:	44 e0       	ldi	r20, 0x04	; 4
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	8f e0       	ldi	r24, 0x0F	; 15
    1664:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
	game = 0;
    1668:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <game+0x1>
    166c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <game>
	clear_map();
    1670:	80 d3       	rcall	.+1792   	; 0x1d72 <clear_map>
	oled_msg(4, 6, "GAME OVER");
    1672:	8e ea       	ldi	r24, 0xAE	; 174
    1674:	92 e0       	ldi	r25, 0x02	; 2
    1676:	89 2f       	mov	r24, r25
    1678:	8f 93       	push	r24
    167a:	8e ea       	ldi	r24, 0xAE	; 174
    167c:	92 e0       	ldi	r25, 0x02	; 2
    167e:	8f 93       	push	r24
    1680:	1f 92       	push	r1
    1682:	86 e0       	ldi	r24, 0x06	; 6
    1684:	8f 93       	push	r24
    1686:	1f 92       	push	r1
    1688:	84 e0       	ldi	r24, 0x04	; 4
    168a:	8f 93       	push	r24
    168c:	de d9       	rcall	.-3140   	; 0xa4a <oled_msg>
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
	ssd1306_set_column_addr(0);
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	bd d8       	rcall	.-3718   	; 0x818 <ssd1306_set_column_addr>
    169e:	00 00       	nop
	while(game != 1);
    16a0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
    16a4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	d1 f7       	brne	.-12     	; 0x16a0 <game_over+0x56>
    16ac:	80 e2       	ldi	r24, 0x20	; 32

	x[0] = 32;
    16ae:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <x>
    16b2:	8f e1       	ldi	r24, 0x1F	; 31
	x[1] = 31;
    16b4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <x+0x1>
    16b8:	8e e1       	ldi	r24, 0x1E	; 30
	x[2] = 30;
    16ba:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <x+0x2>
    16be:	8c e0       	ldi	r24, 0x0C	; 12
	y[0] = 12;
    16c0:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <y>
    16c4:	8c e0       	ldi	r24, 0x0C	; 12
	y[1] = 12;
    16c6:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <y+0x1>
    16ca:	8c e0       	ldi	r24, 0x0C	; 12
	y[2] = 12;
    16cc:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <y+0x2>
    16d0:	83 e0       	ldi	r24, 0x03	; 3

	for(int i = 3; i < 200; i++)
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	9a 83       	std	Y+2, r25	; 0x02
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	0b c0       	rjmp	.+22     	; 0x16f0 <game_over+0xa6>
    16da:	89 81       	ldd	r24, Y+1	; 0x01
	{
		x[i] = 0;
    16dc:	9a 81       	ldd	r25, Y+2	; 0x02
    16de:	83 5f       	subi	r24, 0xF3	; 243
    16e0:	9e 4f       	sbci	r25, 0xFE	; 254
    16e2:	fc 01       	movw	r30, r24
    16e4:	10 82       	st	Z, r1
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
	x[2] = 30;
	y[0] = 12;
	y[1] = 12;
	y[2] = 12;

	for(int i = 3; i < 200; i++)
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	9a 83       	std	Y+2, r25	; 0x02
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	9a 81       	ldd	r25, Y+2	; 0x02
    16f4:	88 3c       	cpi	r24, 0xC8	; 200
    16f6:	91 05       	cpc	r25, r1
    16f8:	84 f3       	brlt	.-32     	; 0x16da <game_over+0x90>
    16fa:	83 e0       	ldi	r24, 0x03	; 3
	{
		x[i] = 0;
	}
	for(int i = 3; i < 200; i++)
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	9c 83       	std	Y+4, r25	; 0x04
    1700:	8b 83       	std	Y+3, r24	; 0x03
    1702:	0b c0       	rjmp	.+22     	; 0x171a <game_over+0xd0>
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
	{
		y[i] = 0;
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	8b 52       	subi	r24, 0x2B	; 43
    170a:	9e 4f       	sbci	r25, 0xFE	; 254
    170c:	fc 01       	movw	r30, r24
    170e:	10 82       	st	Z, r1
    1710:	8b 81       	ldd	r24, Y+3	; 0x03

	for(int i = 3; i < 200; i++)
	{
		x[i] = 0;
	}
	for(int i = 3; i < 200; i++)
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	9c 83       	std	Y+4, r25	; 0x04
    1718:	8b 83       	std	Y+3, r24	; 0x03
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	88 3c       	cpi	r24, 0xC8	; 200
    1720:	91 05       	cpc	r25, r1
    1722:	84 f3       	brlt	.-32     	; 0x1704 <game_over+0xba>
    1724:	83 e0       	ldi	r24, 0x03	; 3
	{
		y[i] = 0;
	}
	length = 3;
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <length+0x1>
    172c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <length>
	draw_picture(KO);
    1730:	88 eb       	ldi	r24, 0xB8	; 184
    1732:	92 e0       	ldi	r25, 0x02	; 2
    1734:	ef d9       	rcall	.-3106   	; 0xb14 <draw_picture>
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	a8 ec       	ldi	r26, 0xC8	; 200
    173c:	b3 e4       	ldi	r27, 0x43	; 67
    173e:	8d 83       	std	Y+5, r24	; 0x05
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	af 83       	std	Y+7, r26	; 0x07
    1744:	b8 87       	std	Y+8, r27	; 0x08
    1746:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	4a e7       	ldi	r20, 0x7A	; 122
    174c:	55 e4       	ldi	r21, 0x45	; 69
    174e:	6d 81       	ldd	r22, Y+5	; 0x05
    1750:	7e 81       	ldd	r23, Y+6	; 0x06
    1752:	8f 81       	ldd	r24, Y+7	; 0x07
    1754:	98 85       	ldd	r25, Y+8	; 0x08
    1756:	ef d3       	rcall	.+2014   	; 0x1f36 <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	89 87       	std	Y+9, r24	; 0x09
    175e:	9a 87       	std	Y+10, r25	; 0x0a
    1760:	ab 87       	std	Y+11, r26	; 0x0b
    1762:	bc 87       	std	Y+12, r27	; 0x0c
    1764:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e8       	ldi	r20, 0x80	; 128
    176a:	5f e3       	ldi	r21, 0x3F	; 63
    176c:	69 85       	ldd	r22, Y+9	; 0x09
    176e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1770:	8b 85       	ldd	r24, Y+11	; 0x0b
    1772:	9c 85       	ldd	r25, Y+12	; 0x0c
    1774:	5f d3       	rcall	.+1726   	; 0x1e34 <__cmpsf2>
    1776:	88 23       	and	r24, r24
    1778:	2c f4       	brge	.+10     	; 0x1784 <game_over+0x13a>
    177a:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	9e 87       	std	Y+14, r25	; 0x0e
    1780:	8d 87       	std	Y+13, r24	; 0x0d
    1782:	3b c0       	rjmp	.+118    	; 0x17fa <game_over+0x1b0>
    1784:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    1786:	3f ef       	ldi	r19, 0xFF	; 255
    1788:	4f e7       	ldi	r20, 0x7F	; 127
    178a:	57 e4       	ldi	r21, 0x47	; 71
    178c:	69 85       	ldd	r22, Y+9	; 0x09
    178e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1790:	8b 85       	ldd	r24, Y+11	; 0x0b
    1792:	9c 85       	ldd	r25, Y+12	; 0x0c
    1794:	cc d3       	rcall	.+1944   	; 0x1f2e <__gesf2>
    1796:	18 16       	cp	r1, r24
    1798:	3c f5       	brge	.+78     	; 0x17e8 <game_over+0x19e>
    179a:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e2       	ldi	r20, 0x20	; 32
    17a0:	51 e4       	ldi	r21, 0x41	; 65
    17a2:	6d 81       	ldd	r22, Y+5	; 0x05
    17a4:	7e 81       	ldd	r23, Y+6	; 0x06
    17a6:	8f 81       	ldd	r24, Y+7	; 0x07
    17a8:	98 85       	ldd	r25, Y+8	; 0x08
    17aa:	c5 d3       	rcall	.+1930   	; 0x1f36 <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	43 d3       	rcall	.+1670   	; 0x1e3c <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	9e 87       	std	Y+14, r25	; 0x0e
    17bc:	8d 87       	std	Y+13, r24	; 0x0d
    17be:	0f c0       	rjmp	.+30     	; 0x17de <game_over+0x194>
    17c0:	80 e9       	ldi	r24, 0x90	; 144
    17c2:	91 e0       	ldi	r25, 0x01	; 1
    17c4:	98 8b       	std	Y+16, r25	; 0x10
    17c6:	8f 87       	std	Y+15, r24	; 0x0f
    17c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ca:	98 89       	ldd	r25, Y+16	; 0x10
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <game_over+0x182>
    17d0:	98 8b       	std	Y+16, r25	; 0x10
    17d2:	8f 87       	std	Y+15, r24	; 0x0f
    17d4:	8d 85       	ldd	r24, Y+13	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	9e 87       	std	Y+14, r25	; 0x0e
    17dc:	8d 87       	std	Y+13, r24	; 0x0d
    17de:	8d 85       	ldd	r24, Y+13	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e2:	89 2b       	or	r24, r25
    17e4:	69 f7       	brne	.-38     	; 0x17c0 <game_over+0x176>
    17e6:	13 c0       	rjmp	.+38     	; 0x180e <game_over+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e8:	69 85       	ldd	r22, Y+9	; 0x09
    17ea:	7a 85       	ldd	r23, Y+10	; 0x0a
    17ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    17ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    17f0:	25 d3       	rcall	.+1610   	; 0x1e3c <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9e 87       	std	Y+14, r25	; 0x0e
    17f8:	8d 87       	std	Y+13, r24	; 0x0d
    17fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fe:	9a 8b       	std	Y+18, r25	; 0x12
    1800:	89 8b       	std	Y+17, r24	; 0x11
    1802:	89 89       	ldd	r24, Y+17	; 0x11
    1804:	9a 89       	ldd	r25, Y+18	; 0x12
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <game_over+0x1bc>
    180a:	9a 8b       	std	Y+18, r25	; 0x12
	_delay_ms(400);
	clear_screen();
    180c:	89 8b       	std	Y+17, r24	; 0x11
    180e:	f2 d8       	rcall	.-3612   	; 0x9f4 <clear_screen>
	title();
    1810:	30 db       	rcall	.-2464   	; 0xe72 <title>
    1812:	00 00       	nop
}
    1814:	62 96       	adiw	r28, 0x12	; 18
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	08 95       	ret

00001826 <main>:
    1826:	0f 93       	push	r16


int main(void)
{
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	c6 54       	subi	r28, 0x46	; 70
    1834:	d1 09       	sbc	r29, r1
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
	char cmd;

	UART_Init();
    1840:	0e 94 9d 02 	call	0x53a	; 0x53a <UART_Init>
	
	while(1)
	{
		SendCommand(CMD_TF);
    1844:	89 e0       	ldi	r24, 0x09	; 9
    1846:	0e 94 cf 02 	call	0x59e	; 0x59e <SendCommand>
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a0 ea       	ldi	r26, 0xA0	; 160
    1850:	b1 e4       	ldi	r27, 0x41	; 65
    1852:	8d 83       	std	Y+5, r24	; 0x05
    1854:	9e 83       	std	Y+6, r25	; 0x06
    1856:	af 83       	std	Y+7, r26	; 0x07
    1858:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	4a e7       	ldi	r20, 0x7A	; 122
    1860:	55 e4       	ldi	r21, 0x45	; 69
    1862:	6d 81       	ldd	r22, Y+5	; 0x05
    1864:	7e 81       	ldd	r23, Y+6	; 0x06
    1866:	8f 81       	ldd	r24, Y+7	; 0x07
    1868:	98 85       	ldd	r25, Y+8	; 0x08
    186a:	65 d3       	rcall	.+1738   	; 0x1f36 <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	8b ab       	std	Y+51, r24	; 0x33
    1872:	9c ab       	std	Y+52, r25	; 0x34
    1874:	ad ab       	std	Y+53, r26	; 0x35
    1876:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e8       	ldi	r20, 0x80	; 128
    187e:	5f e3       	ldi	r21, 0x3F	; 63
    1880:	6b a9       	ldd	r22, Y+51	; 0x33
    1882:	7c a9       	ldd	r23, Y+52	; 0x34
    1884:	8d a9       	ldd	r24, Y+53	; 0x35
    1886:	9e a9       	ldd	r25, Y+54	; 0x36
    1888:	d5 d2       	rcall	.+1450   	; 0x1e34 <__cmpsf2>
    188a:	88 23       	and	r24, r24
    188c:	2c f4       	brge	.+10     	; 0x1898 <main+0x72>
		__ticks = 1;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	98 af       	std	Y+56, r25	; 0x38
    1894:	8f ab       	std	Y+55, r24	; 0x37
    1896:	3b c0       	rjmp	.+118    	; 0x190e <main+0xe8>
	else if (__tmp > 65535)
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	3f ef       	ldi	r19, 0xFF	; 255
    189c:	4f e7       	ldi	r20, 0x7F	; 127
    189e:	57 e4       	ldi	r21, 0x47	; 71
    18a0:	6b a9       	ldd	r22, Y+51	; 0x33
    18a2:	7c a9       	ldd	r23, Y+52	; 0x34
    18a4:	8d a9       	ldd	r24, Y+53	; 0x35
    18a6:	9e a9       	ldd	r25, Y+54	; 0x36
    18a8:	42 d3       	rcall	.+1668   	; 0x1f2e <__gesf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	3c f5       	brge	.+78     	; 0x18fc <main+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e2       	ldi	r20, 0x20	; 32
    18b4:	51 e4       	ldi	r21, 0x41	; 65
    18b6:	6d 81       	ldd	r22, Y+5	; 0x05
    18b8:	7e 81       	ldd	r23, Y+6	; 0x06
    18ba:	8f 81       	ldd	r24, Y+7	; 0x07
    18bc:	98 85       	ldd	r25, Y+8	; 0x08
    18be:	3b d3       	rcall	.+1654   	; 0x1f36 <__mulsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	bc 01       	movw	r22, r24
    18c6:	cd 01       	movw	r24, r26
    18c8:	b9 d2       	rcall	.+1394   	; 0x1e3c <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	98 af       	std	Y+56, r25	; 0x38
    18d0:	8f ab       	std	Y+55, r24	; 0x37
    18d2:	0f c0       	rjmp	.+30     	; 0x18f2 <main+0xcc>
    18d4:	80 e9       	ldi	r24, 0x90	; 144
    18d6:	91 e0       	ldi	r25, 0x01	; 1
    18d8:	9a af       	std	Y+58, r25	; 0x3a
    18da:	89 af       	std	Y+57, r24	; 0x39
    18dc:	89 ad       	ldd	r24, Y+57	; 0x39
    18de:	9a ad       	ldd	r25, Y+58	; 0x3a
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <main+0xba>
    18e4:	9a af       	std	Y+58, r25	; 0x3a
    18e6:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e8:	8f a9       	ldd	r24, Y+55	; 0x37
    18ea:	98 ad       	ldd	r25, Y+56	; 0x38
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	98 af       	std	Y+56, r25	; 0x38
    18f0:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f2:	8f a9       	ldd	r24, Y+55	; 0x37
    18f4:	98 ad       	ldd	r25, Y+56	; 0x38
    18f6:	89 2b       	or	r24, r25
    18f8:	69 f7       	brne	.-38     	; 0x18d4 <main+0xae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fa:	13 c0       	rjmp	.+38     	; 0x1922 <main+0xfc>
    18fc:	6b a9       	ldd	r22, Y+51	; 0x33
    18fe:	7c a9       	ldd	r23, Y+52	; 0x34
    1900:	8d a9       	ldd	r24, Y+53	; 0x35
    1902:	9e a9       	ldd	r25, Y+54	; 0x36
    1904:	9b d2       	rcall	.+1334   	; 0x1e3c <__fixunssfsi>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	98 af       	std	Y+56, r25	; 0x38
    190c:	8f ab       	std	Y+55, r24	; 0x37
    190e:	8f a9       	ldd	r24, Y+55	; 0x37
    1910:	98 ad       	ldd	r25, Y+56	; 0x38
    1912:	9c af       	std	Y+60, r25	; 0x3c
    1914:	8b af       	std	Y+59, r24	; 0x3b
    1916:	8b ad       	ldd	r24, Y+59	; 0x3b
    1918:	9c ad       	ldd	r25, Y+60	; 0x3c
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <main+0xf4>
    191e:	9c af       	std	Y+60, r25	; 0x3c
    1920:	8b af       	std	Y+59, r24	; 0x3b
		_delay_ms(20);
		SendCommand01(0x06, 0x00, 0x0F);
    1922:	4f e0       	ldi	r20, 0x0F	; 15
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	86 e0       	ldi	r24, 0x06	; 6
    1928:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a8 e4       	ldi	r26, 0x48	; 72
    1932:	b3 e4       	ldi	r27, 0x43	; 67
    1934:	89 87       	std	Y+9, r24	; 0x09
    1936:	9a 87       	std	Y+10, r25	; 0x0a
    1938:	ab 87       	std	Y+11, r26	; 0x0b
    193a:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	4a e7       	ldi	r20, 0x7A	; 122
    1942:	55 e4       	ldi	r21, 0x45	; 69
    1944:	69 85       	ldd	r22, Y+9	; 0x09
    1946:	7a 85       	ldd	r23, Y+10	; 0x0a
    1948:	8b 85       	ldd	r24, Y+11	; 0x0b
    194a:	9c 85       	ldd	r25, Y+12	; 0x0c
    194c:	f4 d2       	rcall	.+1512   	; 0x1f36 <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	89 a7       	std	Y+41, r24	; 0x29
    1954:	9a a7       	std	Y+42, r25	; 0x2a
    1956:	ab a7       	std	Y+43, r26	; 0x2b
    1958:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e8       	ldi	r20, 0x80	; 128
    1960:	5f e3       	ldi	r21, 0x3F	; 63
    1962:	69 a5       	ldd	r22, Y+41	; 0x29
    1964:	7a a5       	ldd	r23, Y+42	; 0x2a
    1966:	8b a5       	ldd	r24, Y+43	; 0x2b
    1968:	9c a5       	ldd	r25, Y+44	; 0x2c
    196a:	64 d2       	rcall	.+1224   	; 0x1e34 <__cmpsf2>
    196c:	88 23       	and	r24, r24
    196e:	2c f4       	brge	.+10     	; 0x197a <main+0x154>
		__ticks = 1;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	9e a7       	std	Y+46, r25	; 0x2e
    1976:	8d a7       	std	Y+45, r24	; 0x2d
    1978:	3b c0       	rjmp	.+118    	; 0x19f0 <main+0x1ca>
	else if (__tmp > 65535)
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	3f ef       	ldi	r19, 0xFF	; 255
    197e:	4f e7       	ldi	r20, 0x7F	; 127
    1980:	57 e4       	ldi	r21, 0x47	; 71
    1982:	69 a5       	ldd	r22, Y+41	; 0x29
    1984:	7a a5       	ldd	r23, Y+42	; 0x2a
    1986:	8b a5       	ldd	r24, Y+43	; 0x2b
    1988:	9c a5       	ldd	r25, Y+44	; 0x2c
    198a:	d1 d2       	rcall	.+1442   	; 0x1f2e <__gesf2>
    198c:	18 16       	cp	r1, r24
    198e:	3c f5       	brge	.+78     	; 0x19de <main+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e2       	ldi	r20, 0x20	; 32
    1996:	51 e4       	ldi	r21, 0x41	; 65
    1998:	69 85       	ldd	r22, Y+9	; 0x09
    199a:	7a 85       	ldd	r23, Y+10	; 0x0a
    199c:	8b 85       	ldd	r24, Y+11	; 0x0b
    199e:	9c 85       	ldd	r25, Y+12	; 0x0c
    19a0:	ca d2       	rcall	.+1428   	; 0x1f36 <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	48 d2       	rcall	.+1168   	; 0x1e3c <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9e a7       	std	Y+46, r25	; 0x2e
    19b2:	8d a7       	std	Y+45, r24	; 0x2d
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <main+0x1ae>
    19b6:	80 e9       	ldi	r24, 0x90	; 144
    19b8:	91 e0       	ldi	r25, 0x01	; 1
    19ba:	98 ab       	std	Y+48, r25	; 0x30
    19bc:	8f a7       	std	Y+47, r24	; 0x2f
    19be:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c0:	98 a9       	ldd	r25, Y+48	; 0x30
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <main+0x19c>
    19c6:	98 ab       	std	Y+48, r25	; 0x30
    19c8:	8f a7       	std	Y+47, r24	; 0x2f
    19ca:	8d a5       	ldd	r24, Y+45	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	9e a7       	std	Y+46, r25	; 0x2e
    19d2:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    19d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    19d8:	89 2b       	or	r24, r25
    19da:	69 f7       	brne	.-38     	; 0x19b6 <main+0x190>
    19dc:	13 c0       	rjmp	.+38     	; 0x1a04 <main+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19de:	69 a5       	ldd	r22, Y+41	; 0x29
    19e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    19e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    19e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    19e6:	2a d2       	rcall	.+1108   	; 0x1e3c <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	9e a7       	std	Y+46, r25	; 0x2e
    19ee:	8d a7       	std	Y+45, r24	; 0x2d
    19f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    19f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    19f4:	9a ab       	std	Y+50, r25	; 0x32
    19f6:	89 ab       	std	Y+49, r24	; 0x31
    19f8:	89 a9       	ldd	r24, Y+49	; 0x31
    19fa:	9a a9       	ldd	r25, Y+50	; 0x32
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <main+0x1d6>
    1a00:	9a ab       	std	Y+50, r25	; 0x32
    1a02:	89 ab       	std	Y+49, r24	; 0x31
    1a04:	41 e0       	ldi	r20, 0x01	; 1
		_delay_ms(200);
		SendCommand01(0x0F, 0x01, 0x01);
    1a06:	61 e0       	ldi	r22, 0x01	; 1
    1a08:	8f e0       	ldi	r24, 0x0F	; 15
    1a0a:	0e 94 19 03 	call	0x632	; 0x632 <SendCommand01>
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a8 e4       	ldi	r26, 0x48	; 72
    1a14:	b3 e4       	ldi	r27, 0x43	; 67
    1a16:	8d 87       	std	Y+13, r24	; 0x0d
    1a18:	9e 87       	std	Y+14, r25	; 0x0e
    1a1a:	af 87       	std	Y+15, r26	; 0x0f
    1a1c:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	4a e7       	ldi	r20, 0x7A	; 122
    1a24:	55 e4       	ldi	r21, 0x45	; 69
    1a26:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a28:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a2c:	98 89       	ldd	r25, Y+16	; 0x10
    1a2e:	83 d2       	rcall	.+1286   	; 0x1f36 <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	8f 8f       	std	Y+31, r24	; 0x1f
    1a36:	98 a3       	std	Y+32, r25	; 0x20
    1a38:	a9 a3       	std	Y+33, r26	; 0x21
    1a3a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	40 e8       	ldi	r20, 0x80	; 128
    1a42:	5f e3       	ldi	r21, 0x3F	; 63
    1a44:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a46:	78 a1       	ldd	r23, Y+32	; 0x20
    1a48:	89 a1       	ldd	r24, Y+33	; 0x21
    1a4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a4c:	f3 d1       	rcall	.+998    	; 0x1e34 <__cmpsf2>
    1a4e:	88 23       	and	r24, r24
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <main+0x236>
		__ticks = 1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9c a3       	std	Y+36, r25	; 0x24
    1a58:	8b a3       	std	Y+35, r24	; 0x23
    1a5a:	3b c0       	rjmp	.+118    	; 0x1ad2 <main+0x2ac>
	else if (__tmp > 65535)
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	3f ef       	ldi	r19, 0xFF	; 255
    1a60:	4f e7       	ldi	r20, 0x7F	; 127
    1a62:	57 e4       	ldi	r21, 0x47	; 71
    1a64:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a66:	78 a1       	ldd	r23, Y+32	; 0x20
    1a68:	89 a1       	ldd	r24, Y+33	; 0x21
    1a6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a6c:	60 d2       	rcall	.+1216   	; 0x1f2e <__gesf2>
    1a6e:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a70:	3c f5       	brge	.+78     	; 0x1ac0 <main+0x29a>
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e2       	ldi	r20, 0x20	; 32
    1a78:	51 e4       	ldi	r21, 0x41	; 65
    1a7a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a7c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a80:	98 89       	ldd	r25, Y+16	; 0x10
    1a82:	59 d2       	rcall	.+1202   	; 0x1f36 <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	bc 01       	movw	r22, r24
    1a8a:	cd 01       	movw	r24, r26
    1a8c:	d7 d1       	rcall	.+942    	; 0x1e3c <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	9c a3       	std	Y+36, r25	; 0x24
    1a94:	8b a3       	std	Y+35, r24	; 0x23
    1a96:	0f c0       	rjmp	.+30     	; 0x1ab6 <main+0x290>
    1a98:	80 e9       	ldi	r24, 0x90	; 144
    1a9a:	91 e0       	ldi	r25, 0x01	; 1
    1a9c:	9e a3       	std	Y+38, r25	; 0x26
    1a9e:	8d a3       	std	Y+37, r24	; 0x25
    1aa0:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa2:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <main+0x27e>
    1aa8:	9e a3       	std	Y+38, r25	; 0x26
    1aaa:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aac:	8b a1       	ldd	r24, Y+35	; 0x23
    1aae:	9c a1       	ldd	r25, Y+36	; 0x24
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	9c a3       	std	Y+36, r25	; 0x24
    1ab4:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab6:	8b a1       	ldd	r24, Y+35	; 0x23
    1ab8:	9c a1       	ldd	r25, Y+36	; 0x24
    1aba:	89 2b       	or	r24, r25
    1abc:	69 f7       	brne	.-38     	; 0x1a98 <main+0x272>
    1abe:	13 c0       	rjmp	.+38     	; 0x1ae6 <main+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ac2:	78 a1       	ldd	r23, Y+32	; 0x20
    1ac4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac8:	b9 d1       	rcall	.+882    	; 0x1e3c <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	9c a3       	std	Y+36, r25	; 0x24
    1ad0:	8b a3       	std	Y+35, r24	; 0x23
    1ad2:	8b a1       	ldd	r24, Y+35	; 0x23
    1ad4:	9c a1       	ldd	r25, Y+36	; 0x24
    1ad6:	98 a7       	std	Y+40, r25	; 0x28
    1ad8:	8f a3       	std	Y+39, r24	; 0x27
    1ada:	8f a1       	ldd	r24, Y+39	; 0x27
    1adc:	98 a5       	ldd	r25, Y+40	; 0x28
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <main+0x2b8>
    1ae2:	98 a7       	std	Y+40, r25	; 0x28
    1ae4:	8f a3       	std	Y+39, r24	; 0x27
    1ae6:	82 e2       	ldi	r24, 0x22	; 34
		_delay_ms(200);

		
		DDRE = 0x00;
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	fc 01       	movw	r30, r24
    1aec:	10 82       	st	Z, r1
		EICRB = (2 << ISC40) | (2 << ISC50) | (2 << ISC60) | (2 << ISC70);
    1aee:	8a e5       	ldi	r24, 0x5A	; 90
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	2a ea       	ldi	r18, 0xAA	; 170
    1af4:	fc 01       	movw	r30, r24
    1af6:	20 83       	st	Z, r18
		EIMSK = (1 << INT4) | (1 << INT5) | (1 << INT6) | (1 << INT7);
    1af8:	89 e5       	ldi	r24, 0x59	; 89
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	20 ef       	ldi	r18, 0xF0	; 240
    1afe:	fc 01       	movw	r30, r24
    1b00:	20 83       	st	Z, r18
		sei();
    1b02:	78 94       	sei

		

		TCCR0 = 0x07;
    1b04:	83 e5       	ldi	r24, 0x53	; 83
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	27 e0       	ldi	r18, 0x07	; 7
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	20 83       	st	Z, r18
		//TCNT0 = 0x00;

		setup();
    1b0e:	2b d8       	rcall	.-4010   	; 0xb66 <setup>
    1b10:	88 eb       	ldi	r24, 0xB8	; 184
		
		draw_picture(KO);
    1b12:	92 e0       	ldi	r25, 0x02	; 2
    1b14:	0e 94 8a 05 	call	0xb14	; 0xb14 <draw_picture>
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e8       	ldi	r25, 0x80	; 128
    1b1c:	ab eb       	ldi	r26, 0xBB	; 187
    1b1e:	b4 e4       	ldi	r27, 0x44	; 68
    1b20:	89 8b       	std	Y+17, r24	; 0x11
    1b22:	9a 8b       	std	Y+18, r25	; 0x12
    1b24:	ab 8b       	std	Y+19, r26	; 0x13
    1b26:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	4a e7       	ldi	r20, 0x7A	; 122
    1b2e:	55 e4       	ldi	r21, 0x45	; 69
    1b30:	69 89       	ldd	r22, Y+17	; 0x11
    1b32:	7a 89       	ldd	r23, Y+18	; 0x12
    1b34:	8b 89       	ldd	r24, Y+19	; 0x13
    1b36:	9c 89       	ldd	r25, Y+20	; 0x14
    1b38:	fe d1       	rcall	.+1020   	; 0x1f36 <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	8d 8b       	std	Y+21, r24	; 0x15
    1b40:	9e 8b       	std	Y+22, r25	; 0x16
    1b42:	af 8b       	std	Y+23, r26	; 0x17
    1b44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e8       	ldi	r20, 0x80	; 128
    1b4c:	5f e3       	ldi	r21, 0x3F	; 63
    1b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b50:	7e 89       	ldd	r23, Y+22	; 0x16
    1b52:	8f 89       	ldd	r24, Y+23	; 0x17
    1b54:	98 8d       	ldd	r25, Y+24	; 0x18
    1b56:	6e d1       	rcall	.+732    	; 0x1e34 <__cmpsf2>
    1b58:	88 23       	and	r24, r24
    1b5a:	2c f4       	brge	.+10     	; 0x1b66 <main+0x340>
		__ticks = 1;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	9a 8f       	std	Y+26, r25	; 0x1a
    1b62:	89 8f       	std	Y+25, r24	; 0x19
	else if (__tmp > 65535)
    1b64:	3b c0       	rjmp	.+118    	; 0x1bdc <main+0x3b6>
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	3f ef       	ldi	r19, 0xFF	; 255
    1b6a:	4f e7       	ldi	r20, 0x7F	; 127
    1b6c:	57 e4       	ldi	r21, 0x47	; 71
    1b6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b70:	7e 89       	ldd	r23, Y+22	; 0x16
    1b72:	8f 89       	ldd	r24, Y+23	; 0x17
    1b74:	98 8d       	ldd	r25, Y+24	; 0x18
    1b76:	db d1       	rcall	.+950    	; 0x1f2e <__gesf2>
    1b78:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7a:	3c f5       	brge	.+78     	; 0x1bca <main+0x3a4>
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e2       	ldi	r20, 0x20	; 32
    1b82:	51 e4       	ldi	r21, 0x41	; 65
    1b84:	69 89       	ldd	r22, Y+17	; 0x11
    1b86:	7a 89       	ldd	r23, Y+18	; 0x12
    1b88:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8c:	d4 d1       	rcall	.+936    	; 0x1f36 <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	52 d1       	rcall	.+676    	; 0x1e3c <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b9e:	89 8f       	std	Y+25, r24	; 0x19
    1ba0:	0f c0       	rjmp	.+30     	; 0x1bc0 <main+0x39a>
    1ba2:	80 e9       	ldi	r24, 0x90	; 144
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	9c 8f       	std	Y+28, r25	; 0x1c
    1ba8:	8b 8f       	std	Y+27, r24	; 0x1b
    1baa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <main+0x388>
    1bb2:	9c 8f       	std	Y+28, r25	; 0x1c
    1bb4:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb6:	89 8d       	ldd	r24, Y+25	; 0x19
    1bb8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	9a 8f       	std	Y+26, r25	; 0x1a
    1bbe:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc0:	89 8d       	ldd	r24, Y+25	; 0x19
    1bc2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bc4:	89 2b       	or	r24, r25
    1bc6:	69 f7       	brne	.-38     	; 0x1ba2 <main+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc8:	13 c0       	rjmp	.+38     	; 0x1bf0 <main+0x3ca>
    1bca:	6d 89       	ldd	r22, Y+21	; 0x15
    1bcc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bce:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd2:	34 d1       	rcall	.+616    	; 0x1e3c <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9a 8f       	std	Y+26, r25	; 0x1a
    1bda:	89 8f       	std	Y+25, r24	; 0x19
    1bdc:	89 8d       	ldd	r24, Y+25	; 0x19
    1bde:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1be0:	9e 8f       	std	Y+30, r25	; 0x1e
    1be2:	8d 8f       	std	Y+29, r24	; 0x1d
    1be4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <main+0x3c2>
		_delay_ms(1500);
		clear_screen();
    1bec:	9e 8f       	std	Y+30, r25	; 0x1e
    1bee:	8d 8f       	std	Y+29, r24	; 0x1d
		title();
    1bf0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <clear_screen>
		

		while(game == 1)
		{
			
			move(dir);
    1bf4:	3e d9       	rcall	.-3460   	; 0xe72 <title>
    1bf6:	b5 c0       	rjmp	.+362    	; 0x1d62 <main+0x53c>
    1bf8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    1bfc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
			draw_map();
    1c00:	d1 db       	rcall	.-2142   	; 0x13a4 <move>
    1c02:	95 d9       	rcall	.-3286   	; 0xf2e <draw_map>
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	a6 e1       	ldi	r26, 0x16	; 22
    1c0a:	b3 e4       	ldi	r27, 0x43	; 67
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	9a 83       	std	Y+2, r25	; 0x02
    1c10:	ab 83       	std	Y+3, r26	; 0x03
    1c12:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	4a e7       	ldi	r20, 0x7A	; 122
    1c1a:	55 e4       	ldi	r21, 0x45	; 69
    1c1c:	69 81       	ldd	r22, Y+1	; 0x01
    1c1e:	7a 81       	ldd	r23, Y+2	; 0x02
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	88 d1       	rcall	.+784    	; 0x1f36 <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9e 01       	movw	r18, r28
    1c2c:	23 5c       	subi	r18, 0xC3	; 195
    1c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c30:	f9 01       	movw	r30, r18
    1c32:	80 83       	st	Z, r24
    1c34:	91 83       	std	Z+1, r25	; 0x01
    1c36:	a2 83       	std	Z+2, r26	; 0x02
    1c38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e8       	ldi	r20, 0x80	; 128
    1c40:	5f e3       	ldi	r21, 0x3F	; 63
    1c42:	ce 01       	movw	r24, r28
    1c44:	cd 96       	adiw	r24, 0x3d	; 61
    1c46:	fc 01       	movw	r30, r24
    1c48:	60 81       	ld	r22, Z
    1c4a:	71 81       	ldd	r23, Z+1	; 0x01
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	f1 d0       	rcall	.+482    	; 0x1e34 <__cmpsf2>
    1c52:	88 23       	and	r24, r24
    1c54:	4c f4       	brge	.+18     	; 0x1c68 <main+0x442>
		__ticks = 1;
    1c56:	ce 01       	movw	r24, r28
    1c58:	8f 5b       	subi	r24, 0xBF	; 191
    1c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5c:	21 e0       	ldi	r18, 0x01	; 1
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	fc 01       	movw	r30, r24
    1c62:	31 83       	std	Z+1, r19	; 0x01
    1c64:	20 83       	st	Z, r18
	else if (__tmp > 65535)
    1c66:	63 c0       	rjmp	.+198    	; 0x1d2e <main+0x508>
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	3f ef       	ldi	r19, 0xFF	; 255
    1c6c:	4f e7       	ldi	r20, 0x7F	; 127
    1c6e:	57 e4       	ldi	r21, 0x47	; 71
    1c70:	ce 01       	movw	r24, r28
    1c72:	cd 96       	adiw	r24, 0x3d	; 61
    1c74:	fc 01       	movw	r30, r24
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	57 d1       	rcall	.+686    	; 0x1f2e <__gesf2>
    1c80:	18 16       	cp	r1, r24
    1c82:	0c f0       	brlt	.+2      	; 0x1c86 <main+0x460>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c84:	44 c0       	rjmp	.+136    	; 0x1d0e <main+0x4e8>
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e2       	ldi	r20, 0x20	; 32
    1c8c:	51 e4       	ldi	r21, 0x41	; 65
    1c8e:	69 81       	ldd	r22, Y+1	; 0x01
    1c90:	7a 81       	ldd	r23, Y+2	; 0x02
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	4f d1       	rcall	.+670    	; 0x1f36 <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	8e 01       	movw	r16, r28
    1c9e:	0f 5b       	subi	r16, 0xBF	; 191
    1ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	cd 01       	movw	r24, r26
    1ca6:	ca d0       	rcall	.+404    	; 0x1e3c <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	f8 01       	movw	r30, r16
    1cae:	91 83       	std	Z+1, r25	; 0x01
    1cb0:	80 83       	st	Z, r24
    1cb2:	24 c0       	rjmp	.+72     	; 0x1cfc <main+0x4d6>
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	8d 5b       	subi	r24, 0xBD	; 189
    1cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cba:	20 e9       	ldi	r18, 0x90	; 144
    1cbc:	31 e0       	ldi	r19, 0x01	; 1
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	31 83       	std	Z+1, r19	; 0x01
    1cc2:	20 83       	st	Z, r18
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	8d 5b       	subi	r24, 0xBD	; 189
    1cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cca:	fc 01       	movw	r30, r24
    1ccc:	80 81       	ld	r24, Z
    1cce:	91 81       	ldd	r25, Z+1	; 0x01
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <main+0x4aa>
    1cd4:	9e 01       	movw	r18, r28
    1cd6:	2d 5b       	subi	r18, 0xBD	; 189
    1cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cda:	f9 01       	movw	r30, r18
    1cdc:	91 83       	std	Z+1, r25	; 0x01
    1cde:	80 83       	st	Z, r24
    1ce0:	ce 01       	movw	r24, r28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	8f 5b       	subi	r24, 0xBF	; 191
    1ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce6:	9e 01       	movw	r18, r28
    1ce8:	2f 5b       	subi	r18, 0xBF	; 191
    1cea:	3f 4f       	sbci	r19, 0xFF	; 255
    1cec:	f9 01       	movw	r30, r18
    1cee:	20 81       	ld	r18, Z
    1cf0:	31 81       	ldd	r19, Z+1	; 0x01
    1cf2:	21 50       	subi	r18, 0x01	; 1
    1cf4:	31 09       	sbc	r19, r1
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	31 83       	std	Z+1, r19	; 0x01
    1cfa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	8f 5b       	subi	r24, 0xBF	; 191
    1d00:	9f 4f       	sbci	r25, 0xFF	; 255
    1d02:	fc 01       	movw	r30, r24
    1d04:	80 81       	ld	r24, Z
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	89 2b       	or	r24, r25
    1d0a:	a1 f6       	brne	.-88     	; 0x1cb4 <main+0x48e>
    1d0c:	2a c0       	rjmp	.+84     	; 0x1d62 <main+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	8e 01       	movw	r16, r28
    1d10:	0f 5b       	subi	r16, 0xBF	; 191
    1d12:	1f 4f       	sbci	r17, 0xFF	; 255
    1d14:	ce 01       	movw	r24, r28
    1d16:	cd 96       	adiw	r24, 0x3d	; 61
    1d18:	fc 01       	movw	r30, r24
    1d1a:	60 81       	ld	r22, Z
    1d1c:	71 81       	ldd	r23, Z+1	; 0x01
    1d1e:	82 81       	ldd	r24, Z+2	; 0x02
    1d20:	93 81       	ldd	r25, Z+3	; 0x03
    1d22:	8c d0       	rcall	.+280    	; 0x1e3c <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	f8 01       	movw	r30, r16
    1d2a:	91 83       	std	Z+1, r25	; 0x01
    1d2c:	80 83       	st	Z, r24
    1d2e:	ce 01       	movw	r24, r28
    1d30:	8b 5b       	subi	r24, 0xBB	; 187
    1d32:	9f 4f       	sbci	r25, 0xFF	; 255
    1d34:	9e 01       	movw	r18, r28
    1d36:	2f 5b       	subi	r18, 0xBF	; 191
    1d38:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3a:	f9 01       	movw	r30, r18
    1d3c:	20 81       	ld	r18, Z
    1d3e:	31 81       	ldd	r19, Z+1	; 0x01
    1d40:	fc 01       	movw	r30, r24
    1d42:	31 83       	std	Z+1, r19	; 0x01
    1d44:	20 83       	st	Z, r18
    1d46:	ce 01       	movw	r24, r28
    1d48:	8b 5b       	subi	r24, 0xBB	; 187
    1d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	80 81       	ld	r24, Z
    1d50:	91 81       	ldd	r25, Z+1	; 0x01
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <main+0x52c>
    1d56:	9e 01       	movw	r18, r28
    1d58:	2b 5b       	subi	r18, 0xBB	; 187
    1d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5c:	f9 01       	movw	r30, r18
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	80 83       	st	Z, r24
    1d62:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
		_delay_ms(1500);
		clear_screen();
		title();
		

		while(game == 1)
    1d66:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <main+0x54a>
    1d6e:	44 cf       	rjmp	.-376    	; 0x1bf8 <main+0x3d2>
    1d70:	69 cd       	rjmp	.-1326   	; 0x1844 <main+0x1e>

00001d72 <clear_map>:
			move(dir);
			draw_map();
			_delay_ms(150);
			
		}
	}
    1d72:	cf 93       	push	r28
	
}

void clear_map()
{
    1d74:	df 93       	push	r29
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <clear_map+0x6>
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <clear_map+0x8>
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <clear_map+0xa>
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
	for(int i = 1; i < 127; i++)
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9a 83       	std	Y+2, r25	; 0x02
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	1f c0       	rjmp	.+62     	; 0x1dc8 <clear_map+0x56>
	{
		
		for(int j = 3; j < 7; j++)
    1d8a:	83 e0       	ldi	r24, 0x03	; 3
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9c 83       	std	Y+4, r25	; 0x04
    1d90:	8b 83       	std	Y+3, r24	; 0x03
    1d92:	11 c0       	rjmp	.+34     	; 0x1db6 <clear_map+0x44>
		{
			ssd1306_set_page_start(j);
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ssd1306_set_page_start>
			ssd1306_set_column_addr(i);
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	0e 94 0c 04 	call	0x818	; 0x818 <ssd1306_set_column_addr>
			ssd1306_data(blank, 1);
    1da0:	61 e0       	ldi	r22, 0x01	; 1
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	88 e3       	ldi	r24, 0x38	; 56
    1da6:	97 e0       	ldi	r25, 0x07	; 7
    1da8:	0e 94 77 03 	call	0x6ee	; 0x6ee <ssd1306_data>
void clear_map()
{
	for(int i = 1; i < 127; i++)
	{
		
		for(int j = 3; j < 7; j++)
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	9c 81       	ldd	r25, Y+4	; 0x04
    1db0:	01 96       	adiw	r24, 0x01	; 1
    1db2:	9c 83       	std	Y+4, r25	; 0x04
    1db4:	8b 83       	std	Y+3, r24	; 0x03
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	07 97       	sbiw	r24, 0x07	; 7
    1dbc:	5c f3       	brlt	.-42     	; 0x1d94 <clear_map+0x22>
	
}

void clear_map()
{
	for(int i = 1; i < 127; i++)
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	01 96       	adiw	r24, 0x01	; 1
    1dc4:	9a 83       	std	Y+2, r25	; 0x02
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	9a 81       	ldd	r25, Y+2	; 0x02
    1dcc:	8f 37       	cpi	r24, 0x7F	; 127
    1dce:	91 05       	cpc	r25, r1
    1dd0:	e4 f2       	brlt	.-72     	; 0x1d8a <clear_map+0x18>
			ssd1306_set_column_addr(i);
			ssd1306_data(blank, 1);
		}
	}

	for(int i = 1; i < 127; i++)
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9e 83       	std	Y+6, r25	; 0x06
    1dd8:	8d 83       	std	Y+5, r24	; 0x05
    1dda:	1d c0       	rjmp	.+58     	; 0x1e16 <clear_map+0xa4>
	{
		ssd1306_set_page_start(2);
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    1de2:	8d 81       	ldd	r24, Y+5	; 0x05
    1de4:	0e 94 0c 04 	call	0x818	; 0x818 <ssd1306_set_column_addr>
		ssd1306_data(horizon1, 1);
    1de8:	61 e0       	ldi	r22, 0x01	; 1
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	8a e0       	ldi	r24, 0x0A	; 10
    1dee:	91 e0       	ldi	r25, 0x01	; 1
    1df0:	0e 94 77 03 	call	0x6ee	; 0x6ee <ssd1306_data>
		ssd1306_set_page_start(7);
    1df4:	87 e0       	ldi	r24, 0x07	; 7
    1df6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    1dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfc:	0e 94 0c 04 	call	0x818	; 0x818 <ssd1306_set_column_addr>
		ssd1306_data(horizon2, 1);
    1e00:	61 e0       	ldi	r22, 0x01	; 1
    1e02:	70 e0       	ldi	r23, 0x00	; 0
    1e04:	8b e0       	ldi	r24, 0x0B	; 11
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	0e 94 77 03 	call	0x6ee	; 0x6ee <ssd1306_data>
			ssd1306_set_column_addr(i);
			ssd1306_data(blank, 1);
		}
	}

	for(int i = 1; i < 127; i++)
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e10:	01 96       	adiw	r24, 0x01	; 1
    1e12:	9e 83       	std	Y+6, r25	; 0x06
    1e14:	8d 83       	std	Y+5, r24	; 0x05
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1a:	8f 37       	cpi	r24, 0x7F	; 127
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	f4 f2       	brlt	.-68     	; 0x1ddc <clear_map+0x6a>
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
    1e20:	00 00       	nop
    1e22:	26 96       	adiw	r28, 0x06	; 6
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	08 95       	ret

00001e34 <__cmpsf2>:
    1e34:	2f d0       	rcall	.+94     	; 0x1e94 <__fp_cmp>
    1e36:	08 f4       	brcc	.+2      	; 0x1e3a <__cmpsf2+0x6>
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	08 95       	ret

00001e3c <__fixunssfsi>:
    1e3c:	57 d0       	rcall	.+174    	; 0x1eec <__fp_splitA>
    1e3e:	88 f0       	brcs	.+34     	; 0x1e62 <__fixunssfsi+0x26>
    1e40:	9f 57       	subi	r25, 0x7F	; 127
    1e42:	90 f0       	brcs	.+36     	; 0x1e68 <__fixunssfsi+0x2c>
    1e44:	b9 2f       	mov	r27, r25
    1e46:	99 27       	eor	r25, r25
    1e48:	b7 51       	subi	r27, 0x17	; 23
    1e4a:	a0 f0       	brcs	.+40     	; 0x1e74 <__fixunssfsi+0x38>
    1e4c:	d1 f0       	breq	.+52     	; 0x1e82 <__fixunssfsi+0x46>
    1e4e:	66 0f       	add	r22, r22
    1e50:	77 1f       	adc	r23, r23
    1e52:	88 1f       	adc	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	1a f0       	brmi	.+6      	; 0x1e5e <__fixunssfsi+0x22>
    1e58:	ba 95       	dec	r27
    1e5a:	c9 f7       	brne	.-14     	; 0x1e4e <__fixunssfsi+0x12>
    1e5c:	12 c0       	rjmp	.+36     	; 0x1e82 <__fixunssfsi+0x46>
    1e5e:	b1 30       	cpi	r27, 0x01	; 1
    1e60:	81 f0       	breq	.+32     	; 0x1e82 <__fixunssfsi+0x46>
    1e62:	5e d0       	rcall	.+188    	; 0x1f20 <__fp_zero>
    1e64:	b1 e0       	ldi	r27, 0x01	; 1
    1e66:	08 95       	ret
    1e68:	5b c0       	rjmp	.+182    	; 0x1f20 <__fp_zero>
    1e6a:	67 2f       	mov	r22, r23
    1e6c:	78 2f       	mov	r23, r24
    1e6e:	88 27       	eor	r24, r24
    1e70:	b8 5f       	subi	r27, 0xF8	; 248
    1e72:	39 f0       	breq	.+14     	; 0x1e82 <__fixunssfsi+0x46>
    1e74:	b9 3f       	cpi	r27, 0xF9	; 249
    1e76:	cc f3       	brlt	.-14     	; 0x1e6a <__fixunssfsi+0x2e>
    1e78:	86 95       	lsr	r24
    1e7a:	77 95       	ror	r23
    1e7c:	67 95       	ror	r22
    1e7e:	b3 95       	inc	r27
    1e80:	d9 f7       	brne	.-10     	; 0x1e78 <__fixunssfsi+0x3c>
    1e82:	3e f4       	brtc	.+14     	; 0x1e92 <__fixunssfsi+0x56>
    1e84:	90 95       	com	r25
    1e86:	80 95       	com	r24
    1e88:	70 95       	com	r23
    1e8a:	61 95       	neg	r22
    1e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e90:	9f 4f       	sbci	r25, 0xFF	; 255
    1e92:	08 95       	ret

00001e94 <__fp_cmp>:
    1e94:	99 0f       	add	r25, r25
    1e96:	00 08       	sbc	r0, r0
    1e98:	55 0f       	add	r21, r21
    1e9a:	aa 0b       	sbc	r26, r26
    1e9c:	e0 e8       	ldi	r30, 0x80	; 128
    1e9e:	fe ef       	ldi	r31, 0xFE	; 254
    1ea0:	16 16       	cp	r1, r22
    1ea2:	17 06       	cpc	r1, r23
    1ea4:	e8 07       	cpc	r30, r24
    1ea6:	f9 07       	cpc	r31, r25
    1ea8:	c0 f0       	brcs	.+48     	; 0x1eda <__fp_cmp+0x46>
    1eaa:	12 16       	cp	r1, r18
    1eac:	13 06       	cpc	r1, r19
    1eae:	e4 07       	cpc	r30, r20
    1eb0:	f5 07       	cpc	r31, r21
    1eb2:	98 f0       	brcs	.+38     	; 0x1eda <__fp_cmp+0x46>
    1eb4:	62 1b       	sub	r22, r18
    1eb6:	73 0b       	sbc	r23, r19
    1eb8:	84 0b       	sbc	r24, r20
    1eba:	95 0b       	sbc	r25, r21
    1ebc:	39 f4       	brne	.+14     	; 0x1ecc <__fp_cmp+0x38>
    1ebe:	0a 26       	eor	r0, r26
    1ec0:	61 f0       	breq	.+24     	; 0x1eda <__fp_cmp+0x46>
    1ec2:	23 2b       	or	r18, r19
    1ec4:	24 2b       	or	r18, r20
    1ec6:	25 2b       	or	r18, r21
    1ec8:	21 f4       	brne	.+8      	; 0x1ed2 <__fp_cmp+0x3e>
    1eca:	08 95       	ret
    1ecc:	0a 26       	eor	r0, r26
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <__fp_cmp+0x3e>
    1ed0:	a1 40       	sbci	r26, 0x01	; 1
    1ed2:	a6 95       	lsr	r26
    1ed4:	8f ef       	ldi	r24, 0xFF	; 255
    1ed6:	81 1d       	adc	r24, r1
    1ed8:	81 1d       	adc	r24, r1
    1eda:	08 95       	ret

00001edc <__fp_split3>:
    1edc:	57 fd       	sbrc	r21, 7
    1ede:	90 58       	subi	r25, 0x80	; 128
    1ee0:	44 0f       	add	r20, r20
    1ee2:	55 1f       	adc	r21, r21
    1ee4:	59 f0       	breq	.+22     	; 0x1efc <__fp_splitA+0x10>
    1ee6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ee8:	71 f0       	breq	.+28     	; 0x1f06 <__fp_splitA+0x1a>
    1eea:	47 95       	ror	r20

00001eec <__fp_splitA>:
    1eec:	88 0f       	add	r24, r24
    1eee:	97 fb       	bst	r25, 7
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	61 f0       	breq	.+24     	; 0x1f0c <__fp_splitA+0x20>
    1ef4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ef6:	79 f0       	breq	.+30     	; 0x1f16 <__fp_splitA+0x2a>
    1ef8:	87 95       	ror	r24
    1efa:	08 95       	ret
    1efc:	12 16       	cp	r1, r18
    1efe:	13 06       	cpc	r1, r19
    1f00:	14 06       	cpc	r1, r20
    1f02:	55 1f       	adc	r21, r21
    1f04:	f2 cf       	rjmp	.-28     	; 0x1eea <__fp_split3+0xe>
    1f06:	46 95       	lsr	r20
    1f08:	f1 df       	rcall	.-30     	; 0x1eec <__fp_splitA>
    1f0a:	08 c0       	rjmp	.+16     	; 0x1f1c <__fp_splitA+0x30>
    1f0c:	16 16       	cp	r1, r22
    1f0e:	17 06       	cpc	r1, r23
    1f10:	18 06       	cpc	r1, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	f1 cf       	rjmp	.-30     	; 0x1ef8 <__fp_splitA+0xc>
    1f16:	86 95       	lsr	r24
    1f18:	71 05       	cpc	r23, r1
    1f1a:	61 05       	cpc	r22, r1
    1f1c:	08 94       	sec
    1f1e:	08 95       	ret

00001f20 <__fp_zero>:
    1f20:	e8 94       	clt

00001f22 <__fp_szero>:
    1f22:	bb 27       	eor	r27, r27
    1f24:	66 27       	eor	r22, r22
    1f26:	77 27       	eor	r23, r23
    1f28:	cb 01       	movw	r24, r22
    1f2a:	97 f9       	bld	r25, 7
    1f2c:	08 95       	ret

00001f2e <__gesf2>:
    1f2e:	b2 df       	rcall	.-156    	; 0x1e94 <__fp_cmp>
    1f30:	08 f4       	brcc	.+2      	; 0x1f34 <__gesf2+0x6>
    1f32:	8f ef       	ldi	r24, 0xFF	; 255
    1f34:	08 95       	ret

00001f36 <__mulsf3>:
    1f36:	0b d0       	rcall	.+22     	; 0x1f4e <__mulsf3x>
    1f38:	78 c0       	rjmp	.+240    	; 0x202a <__fp_round>
    1f3a:	69 d0       	rcall	.+210    	; 0x200e <__fp_pscA>
    1f3c:	28 f0       	brcs	.+10     	; 0x1f48 <__mulsf3+0x12>
    1f3e:	6e d0       	rcall	.+220    	; 0x201c <__fp_pscB>
    1f40:	18 f0       	brcs	.+6      	; 0x1f48 <__mulsf3+0x12>
    1f42:	95 23       	and	r25, r21
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <__mulsf3+0x12>
    1f46:	5a c0       	rjmp	.+180    	; 0x1ffc <__fp_inf>
    1f48:	5f c0       	rjmp	.+190    	; 0x2008 <__fp_nan>
    1f4a:	11 24       	eor	r1, r1
    1f4c:	ea cf       	rjmp	.-44     	; 0x1f22 <__fp_szero>

00001f4e <__mulsf3x>:
    1f4e:	c6 df       	rcall	.-116    	; 0x1edc <__fp_split3>
    1f50:	a0 f3       	brcs	.-24     	; 0x1f3a <__mulsf3+0x4>

00001f52 <__mulsf3_pse>:
    1f52:	95 9f       	mul	r25, r21
    1f54:	d1 f3       	breq	.-12     	; 0x1f4a <__mulsf3+0x14>
    1f56:	95 0f       	add	r25, r21
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	55 1f       	adc	r21, r21
    1f5c:	62 9f       	mul	r22, r18
    1f5e:	f0 01       	movw	r30, r0
    1f60:	72 9f       	mul	r23, r18
    1f62:	bb 27       	eor	r27, r27
    1f64:	f0 0d       	add	r31, r0
    1f66:	b1 1d       	adc	r27, r1
    1f68:	63 9f       	mul	r22, r19
    1f6a:	aa 27       	eor	r26, r26
    1f6c:	f0 0d       	add	r31, r0
    1f6e:	b1 1d       	adc	r27, r1
    1f70:	aa 1f       	adc	r26, r26
    1f72:	64 9f       	mul	r22, r20
    1f74:	66 27       	eor	r22, r22
    1f76:	b0 0d       	add	r27, r0
    1f78:	a1 1d       	adc	r26, r1
    1f7a:	66 1f       	adc	r22, r22
    1f7c:	82 9f       	mul	r24, r18
    1f7e:	22 27       	eor	r18, r18
    1f80:	b0 0d       	add	r27, r0
    1f82:	a1 1d       	adc	r26, r1
    1f84:	62 1f       	adc	r22, r18
    1f86:	73 9f       	mul	r23, r19
    1f88:	b0 0d       	add	r27, r0
    1f8a:	a1 1d       	adc	r26, r1
    1f8c:	62 1f       	adc	r22, r18
    1f8e:	83 9f       	mul	r24, r19
    1f90:	a0 0d       	add	r26, r0
    1f92:	61 1d       	adc	r22, r1
    1f94:	22 1f       	adc	r18, r18
    1f96:	74 9f       	mul	r23, r20
    1f98:	33 27       	eor	r19, r19
    1f9a:	a0 0d       	add	r26, r0
    1f9c:	61 1d       	adc	r22, r1
    1f9e:	23 1f       	adc	r18, r19
    1fa0:	84 9f       	mul	r24, r20
    1fa2:	60 0d       	add	r22, r0
    1fa4:	21 1d       	adc	r18, r1
    1fa6:	82 2f       	mov	r24, r18
    1fa8:	76 2f       	mov	r23, r22
    1faa:	6a 2f       	mov	r22, r26
    1fac:	11 24       	eor	r1, r1
    1fae:	9f 57       	subi	r25, 0x7F	; 127
    1fb0:	50 40       	sbci	r21, 0x00	; 0
    1fb2:	8a f0       	brmi	.+34     	; 0x1fd6 <__mulsf3_pse+0x84>
    1fb4:	e1 f0       	breq	.+56     	; 0x1fee <__mulsf3_pse+0x9c>
    1fb6:	88 23       	and	r24, r24
    1fb8:	4a f0       	brmi	.+18     	; 0x1fcc <__mulsf3_pse+0x7a>
    1fba:	ee 0f       	add	r30, r30
    1fbc:	ff 1f       	adc	r31, r31
    1fbe:	bb 1f       	adc	r27, r27
    1fc0:	66 1f       	adc	r22, r22
    1fc2:	77 1f       	adc	r23, r23
    1fc4:	88 1f       	adc	r24, r24
    1fc6:	91 50       	subi	r25, 0x01	; 1
    1fc8:	50 40       	sbci	r21, 0x00	; 0
    1fca:	a9 f7       	brne	.-22     	; 0x1fb6 <__mulsf3_pse+0x64>
    1fcc:	9e 3f       	cpi	r25, 0xFE	; 254
    1fce:	51 05       	cpc	r21, r1
    1fd0:	70 f0       	brcs	.+28     	; 0x1fee <__mulsf3_pse+0x9c>
    1fd2:	14 c0       	rjmp	.+40     	; 0x1ffc <__fp_inf>
    1fd4:	a6 cf       	rjmp	.-180    	; 0x1f22 <__fp_szero>
    1fd6:	5f 3f       	cpi	r21, 0xFF	; 255
    1fd8:	ec f3       	brlt	.-6      	; 0x1fd4 <__mulsf3_pse+0x82>
    1fda:	98 3e       	cpi	r25, 0xE8	; 232
    1fdc:	dc f3       	brlt	.-10     	; 0x1fd4 <__mulsf3_pse+0x82>
    1fde:	86 95       	lsr	r24
    1fe0:	77 95       	ror	r23
    1fe2:	67 95       	ror	r22
    1fe4:	b7 95       	ror	r27
    1fe6:	f7 95       	ror	r31
    1fe8:	e7 95       	ror	r30
    1fea:	9f 5f       	subi	r25, 0xFF	; 255
    1fec:	c1 f7       	brne	.-16     	; 0x1fde <__mulsf3_pse+0x8c>
    1fee:	fe 2b       	or	r31, r30
    1ff0:	88 0f       	add	r24, r24
    1ff2:	91 1d       	adc	r25, r1
    1ff4:	96 95       	lsr	r25
    1ff6:	87 95       	ror	r24
    1ff8:	97 f9       	bld	r25, 7
    1ffa:	08 95       	ret

00001ffc <__fp_inf>:
    1ffc:	97 f9       	bld	r25, 7
    1ffe:	9f 67       	ori	r25, 0x7F	; 127
    2000:	80 e8       	ldi	r24, 0x80	; 128
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	08 95       	ret

00002008 <__fp_nan>:
    2008:	9f ef       	ldi	r25, 0xFF	; 255
    200a:	80 ec       	ldi	r24, 0xC0	; 192
    200c:	08 95       	ret

0000200e <__fp_pscA>:
    200e:	00 24       	eor	r0, r0
    2010:	0a 94       	dec	r0
    2012:	16 16       	cp	r1, r22
    2014:	17 06       	cpc	r1, r23
    2016:	18 06       	cpc	r1, r24
    2018:	09 06       	cpc	r0, r25
    201a:	08 95       	ret

0000201c <__fp_pscB>:
    201c:	00 24       	eor	r0, r0
    201e:	0a 94       	dec	r0
    2020:	12 16       	cp	r1, r18
    2022:	13 06       	cpc	r1, r19
    2024:	14 06       	cpc	r1, r20
    2026:	05 06       	cpc	r0, r21
    2028:	08 95       	ret

0000202a <__fp_round>:
    202a:	09 2e       	mov	r0, r25
    202c:	03 94       	inc	r0
    202e:	00 0c       	add	r0, r0
    2030:	11 f4       	brne	.+4      	; 0x2036 <__fp_round+0xc>
    2032:	88 23       	and	r24, r24
    2034:	52 f0       	brmi	.+20     	; 0x204a <__fp_round+0x20>
    2036:	bb 0f       	add	r27, r27
    2038:	40 f4       	brcc	.+16     	; 0x204a <__fp_round+0x20>
    203a:	bf 2b       	or	r27, r31
    203c:	11 f4       	brne	.+4      	; 0x2042 <__fp_round+0x18>
    203e:	60 ff       	sbrs	r22, 0
    2040:	04 c0       	rjmp	.+8      	; 0x204a <__fp_round+0x20>
    2042:	6f 5f       	subi	r22, 0xFF	; 255
    2044:	7f 4f       	sbci	r23, 0xFF	; 255
    2046:	8f 4f       	sbci	r24, 0xFF	; 255
    2048:	9f 4f       	sbci	r25, 0xFF	; 255
    204a:	08 95       	ret

0000204c <__divmodhi4>:
    204c:	97 fb       	bst	r25, 7
    204e:	07 2e       	mov	r0, r23
    2050:	16 f4       	brtc	.+4      	; 0x2056 <__divmodhi4+0xa>
    2052:	00 94       	com	r0
    2054:	06 d0       	rcall	.+12     	; 0x2062 <__divmodhi4_neg1>
    2056:	77 fd       	sbrc	r23, 7
    2058:	08 d0       	rcall	.+16     	; 0x206a <__divmodhi4_neg2>
    205a:	0b d0       	rcall	.+22     	; 0x2072 <__udivmodhi4>
    205c:	07 fc       	sbrc	r0, 7
    205e:	05 d0       	rcall	.+10     	; 0x206a <__divmodhi4_neg2>
    2060:	3e f4       	brtc	.+14     	; 0x2070 <__divmodhi4_exit>

00002062 <__divmodhi4_neg1>:
    2062:	90 95       	com	r25
    2064:	81 95       	neg	r24
    2066:	9f 4f       	sbci	r25, 0xFF	; 255
    2068:	08 95       	ret

0000206a <__divmodhi4_neg2>:
    206a:	70 95       	com	r23
    206c:	61 95       	neg	r22
    206e:	7f 4f       	sbci	r23, 0xFF	; 255

00002070 <__divmodhi4_exit>:
    2070:	08 95       	ret

00002072 <__udivmodhi4>:
    2072:	aa 1b       	sub	r26, r26
    2074:	bb 1b       	sub	r27, r27
    2076:	51 e1       	ldi	r21, 0x11	; 17
    2078:	07 c0       	rjmp	.+14     	; 0x2088 <__udivmodhi4_ep>

0000207a <__udivmodhi4_loop>:
    207a:	aa 1f       	adc	r26, r26
    207c:	bb 1f       	adc	r27, r27
    207e:	a6 17       	cp	r26, r22
    2080:	b7 07       	cpc	r27, r23
    2082:	10 f0       	brcs	.+4      	; 0x2088 <__udivmodhi4_ep>
    2084:	a6 1b       	sub	r26, r22
    2086:	b7 0b       	sbc	r27, r23

00002088 <__udivmodhi4_ep>:
    2088:	88 1f       	adc	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	5a 95       	dec	r21
    208e:	a9 f7       	brne	.-22     	; 0x207a <__udivmodhi4_loop>
    2090:	80 95       	com	r24
    2092:	90 95       	com	r25
    2094:	bc 01       	movw	r22, r24
    2096:	cd 01       	movw	r24, r26
    2098:	08 95       	ret

0000209a <do_rand>:
    209a:	8f 92       	push	r8
    209c:	9f 92       	push	r9
    209e:	af 92       	push	r10
    20a0:	bf 92       	push	r11
    20a2:	cf 92       	push	r12
    20a4:	df 92       	push	r13
    20a6:	ef 92       	push	r14
    20a8:	ff 92       	push	r15
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	ec 01       	movw	r28, r24
    20b0:	68 81       	ld	r22, Y
    20b2:	79 81       	ldd	r23, Y+1	; 0x01
    20b4:	8a 81       	ldd	r24, Y+2	; 0x02
    20b6:	9b 81       	ldd	r25, Y+3	; 0x03
    20b8:	61 15       	cp	r22, r1
    20ba:	71 05       	cpc	r23, r1
    20bc:	81 05       	cpc	r24, r1
    20be:	91 05       	cpc	r25, r1
    20c0:	21 f4       	brne	.+8      	; 0x20ca <do_rand+0x30>
    20c2:	64 e2       	ldi	r22, 0x24	; 36
    20c4:	79 ed       	ldi	r23, 0xD9	; 217
    20c6:	8b e5       	ldi	r24, 0x5B	; 91
    20c8:	97 e0       	ldi	r25, 0x07	; 7
    20ca:	2d e1       	ldi	r18, 0x1D	; 29
    20cc:	33 ef       	ldi	r19, 0xF3	; 243
    20ce:	41 e0       	ldi	r20, 0x01	; 1
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	0d d3       	rcall	.+1562   	; 0x26ee <__divmodsi4>
    20d4:	49 01       	movw	r8, r18
    20d6:	5a 01       	movw	r10, r20
    20d8:	9b 01       	movw	r18, r22
    20da:	ac 01       	movw	r20, r24
    20dc:	a7 ea       	ldi	r26, 0xA7	; 167
    20de:	b1 e4       	ldi	r27, 0x41	; 65
    20e0:	22 d3       	rcall	.+1604   	; 0x2726 <__muluhisi3>
    20e2:	6b 01       	movw	r12, r22
    20e4:	7c 01       	movw	r14, r24
    20e6:	ac ee       	ldi	r26, 0xEC	; 236
    20e8:	b4 ef       	ldi	r27, 0xF4	; 244
    20ea:	a5 01       	movw	r20, r10
    20ec:	94 01       	movw	r18, r8
    20ee:	27 d3       	rcall	.+1614   	; 0x273e <__mulohisi3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	8c 0d       	add	r24, r12
    20f6:	9d 1d       	adc	r25, r13
    20f8:	ae 1d       	adc	r26, r14
    20fa:	bf 1d       	adc	r27, r15
    20fc:	b7 ff       	sbrs	r27, 7
    20fe:	03 c0       	rjmp	.+6      	; 0x2106 <do_rand+0x6c>
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	a1 09       	sbc	r26, r1
    2104:	b0 48       	sbci	r27, 0x80	; 128
    2106:	88 83       	st	Y, r24
    2108:	99 83       	std	Y+1, r25	; 0x01
    210a:	aa 83       	std	Y+2, r26	; 0x02
    210c:	bb 83       	std	Y+3, r27	; 0x03
    210e:	9f 77       	andi	r25, 0x7F	; 127
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	ff 90       	pop	r15
    2116:	ef 90       	pop	r14
    2118:	df 90       	pop	r13
    211a:	cf 90       	pop	r12
    211c:	bf 90       	pop	r11
    211e:	af 90       	pop	r10
    2120:	9f 90       	pop	r9
    2122:	8f 90       	pop	r8
    2124:	08 95       	ret

00002126 <rand_r>:
    2126:	b9 cf       	rjmp	.-142    	; 0x209a <do_rand>

00002128 <rand>:
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	91 e0       	ldi	r25, 0x01	; 1
    212c:	b6 cf       	rjmp	.-148    	; 0x209a <do_rand>

0000212e <srand>:
    212e:	a0 e0       	ldi	r26, 0x00	; 0
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    2136:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    213a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    213e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    2142:	08 95       	ret

00002144 <vsprintf>:
    2144:	0f 93       	push	r16
    2146:	1f 93       	push	r17
    2148:	cf 93       	push	r28
    214a:	df 93       	push	r29
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	2e 97       	sbiw	r28, 0x0e	; 14
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	8c 01       	movw	r16, r24
    215e:	86 e0       	ldi	r24, 0x06	; 6
    2160:	8c 83       	std	Y+4, r24	; 0x04
    2162:	1a 83       	std	Y+2, r17	; 0x02
    2164:	09 83       	std	Y+1, r16	; 0x01
    2166:	8f ef       	ldi	r24, 0xFF	; 255
    2168:	9f e7       	ldi	r25, 0x7F	; 127
    216a:	9e 83       	std	Y+6, r25	; 0x06
    216c:	8d 83       	std	Y+5, r24	; 0x05
    216e:	ce 01       	movw	r24, r28
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	10 d0       	rcall	.+32     	; 0x2194 <vfprintf>
    2174:	ef 81       	ldd	r30, Y+7	; 0x07
    2176:	f8 85       	ldd	r31, Y+8	; 0x08
    2178:	e0 0f       	add	r30, r16
    217a:	f1 1f       	adc	r31, r17
    217c:	10 82       	st	Z, r1
    217e:	2e 96       	adiw	r28, 0x0e	; 14
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	1f 91       	pop	r17
    2190:	0f 91       	pop	r16
    2192:	08 95       	ret

00002194 <vfprintf>:
    2194:	2f 92       	push	r2
    2196:	3f 92       	push	r3
    2198:	4f 92       	push	r4
    219a:	5f 92       	push	r5
    219c:	6f 92       	push	r6
    219e:	7f 92       	push	r7
    21a0:	8f 92       	push	r8
    21a2:	9f 92       	push	r9
    21a4:	af 92       	push	r10
    21a6:	bf 92       	push	r11
    21a8:	cf 92       	push	r12
    21aa:	df 92       	push	r13
    21ac:	ef 92       	push	r14
    21ae:	ff 92       	push	r15
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	2b 97       	sbiw	r28, 0x0b	; 11
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	6c 01       	movw	r12, r24
    21ca:	7b 01       	movw	r14, r22
    21cc:	8a 01       	movw	r16, r20
    21ce:	fc 01       	movw	r30, r24
    21d0:	17 82       	std	Z+7, r1	; 0x07
    21d2:	16 82       	std	Z+6, r1	; 0x06
    21d4:	83 81       	ldd	r24, Z+3	; 0x03
    21d6:	81 ff       	sbrs	r24, 1
    21d8:	bf c1       	rjmp	.+894    	; 0x2558 <vfprintf+0x3c4>
    21da:	ce 01       	movw	r24, r28
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	3c 01       	movw	r6, r24
    21e0:	f6 01       	movw	r30, r12
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	f7 01       	movw	r30, r14
    21e6:	93 fd       	sbrc	r25, 3
    21e8:	85 91       	lpm	r24, Z+
    21ea:	93 ff       	sbrs	r25, 3
    21ec:	81 91       	ld	r24, Z+
    21ee:	7f 01       	movw	r14, r30
    21f0:	88 23       	and	r24, r24
    21f2:	09 f4       	brne	.+2      	; 0x21f6 <vfprintf+0x62>
    21f4:	ad c1       	rjmp	.+858    	; 0x2550 <vfprintf+0x3bc>
    21f6:	85 32       	cpi	r24, 0x25	; 37
    21f8:	39 f4       	brne	.+14     	; 0x2208 <vfprintf+0x74>
    21fa:	93 fd       	sbrc	r25, 3
    21fc:	85 91       	lpm	r24, Z+
    21fe:	93 ff       	sbrs	r25, 3
    2200:	81 91       	ld	r24, Z+
    2202:	7f 01       	movw	r14, r30
    2204:	85 32       	cpi	r24, 0x25	; 37
    2206:	21 f4       	brne	.+8      	; 0x2210 <vfprintf+0x7c>
    2208:	b6 01       	movw	r22, r12
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	d6 d1       	rcall	.+940    	; 0x25ba <fputc>
    220e:	e8 cf       	rjmp	.-48     	; 0x21e0 <vfprintf+0x4c>
    2210:	91 2c       	mov	r9, r1
    2212:	21 2c       	mov	r2, r1
    2214:	31 2c       	mov	r3, r1
    2216:	ff e1       	ldi	r31, 0x1F	; 31
    2218:	f3 15       	cp	r31, r3
    221a:	d8 f0       	brcs	.+54     	; 0x2252 <vfprintf+0xbe>
    221c:	8b 32       	cpi	r24, 0x2B	; 43
    221e:	79 f0       	breq	.+30     	; 0x223e <vfprintf+0xaa>
    2220:	38 f4       	brcc	.+14     	; 0x2230 <vfprintf+0x9c>
    2222:	80 32       	cpi	r24, 0x20	; 32
    2224:	79 f0       	breq	.+30     	; 0x2244 <vfprintf+0xb0>
    2226:	83 32       	cpi	r24, 0x23	; 35
    2228:	a1 f4       	brne	.+40     	; 0x2252 <vfprintf+0xbe>
    222a:	23 2d       	mov	r18, r3
    222c:	20 61       	ori	r18, 0x10	; 16
    222e:	1d c0       	rjmp	.+58     	; 0x226a <vfprintf+0xd6>
    2230:	8d 32       	cpi	r24, 0x2D	; 45
    2232:	61 f0       	breq	.+24     	; 0x224c <vfprintf+0xb8>
    2234:	80 33       	cpi	r24, 0x30	; 48
    2236:	69 f4       	brne	.+26     	; 0x2252 <vfprintf+0xbe>
    2238:	23 2d       	mov	r18, r3
    223a:	21 60       	ori	r18, 0x01	; 1
    223c:	16 c0       	rjmp	.+44     	; 0x226a <vfprintf+0xd6>
    223e:	83 2d       	mov	r24, r3
    2240:	82 60       	ori	r24, 0x02	; 2
    2242:	38 2e       	mov	r3, r24
    2244:	e3 2d       	mov	r30, r3
    2246:	e4 60       	ori	r30, 0x04	; 4
    2248:	3e 2e       	mov	r3, r30
    224a:	2a c0       	rjmp	.+84     	; 0x22a0 <vfprintf+0x10c>
    224c:	f3 2d       	mov	r31, r3
    224e:	f8 60       	ori	r31, 0x08	; 8
    2250:	1d c0       	rjmp	.+58     	; 0x228c <vfprintf+0xf8>
    2252:	37 fc       	sbrc	r3, 7
    2254:	2d c0       	rjmp	.+90     	; 0x22b0 <vfprintf+0x11c>
    2256:	20 ed       	ldi	r18, 0xD0	; 208
    2258:	28 0f       	add	r18, r24
    225a:	2a 30       	cpi	r18, 0x0A	; 10
    225c:	40 f0       	brcs	.+16     	; 0x226e <vfprintf+0xda>
    225e:	8e 32       	cpi	r24, 0x2E	; 46
    2260:	b9 f4       	brne	.+46     	; 0x2290 <vfprintf+0xfc>
    2262:	36 fc       	sbrc	r3, 6
    2264:	75 c1       	rjmp	.+746    	; 0x2550 <vfprintf+0x3bc>
    2266:	23 2d       	mov	r18, r3
    2268:	20 64       	ori	r18, 0x40	; 64
    226a:	32 2e       	mov	r3, r18
    226c:	19 c0       	rjmp	.+50     	; 0x22a0 <vfprintf+0x10c>
    226e:	36 fe       	sbrs	r3, 6
    2270:	06 c0       	rjmp	.+12     	; 0x227e <vfprintf+0xea>
    2272:	8a e0       	ldi	r24, 0x0A	; 10
    2274:	98 9e       	mul	r9, r24
    2276:	20 0d       	add	r18, r0
    2278:	11 24       	eor	r1, r1
    227a:	92 2e       	mov	r9, r18
    227c:	11 c0       	rjmp	.+34     	; 0x22a0 <vfprintf+0x10c>
    227e:	ea e0       	ldi	r30, 0x0A	; 10
    2280:	2e 9e       	mul	r2, r30
    2282:	20 0d       	add	r18, r0
    2284:	11 24       	eor	r1, r1
    2286:	22 2e       	mov	r2, r18
    2288:	f3 2d       	mov	r31, r3
    228a:	f0 62       	ori	r31, 0x20	; 32
    228c:	3f 2e       	mov	r3, r31
    228e:	08 c0       	rjmp	.+16     	; 0x22a0 <vfprintf+0x10c>
    2290:	8c 36       	cpi	r24, 0x6C	; 108
    2292:	21 f4       	brne	.+8      	; 0x229c <vfprintf+0x108>
    2294:	83 2d       	mov	r24, r3
    2296:	80 68       	ori	r24, 0x80	; 128
    2298:	38 2e       	mov	r3, r24
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <vfprintf+0x10c>
    229c:	88 36       	cpi	r24, 0x68	; 104
    229e:	41 f4       	brne	.+16     	; 0x22b0 <vfprintf+0x11c>
    22a0:	f7 01       	movw	r30, r14
    22a2:	93 fd       	sbrc	r25, 3
    22a4:	85 91       	lpm	r24, Z+
    22a6:	93 ff       	sbrs	r25, 3
    22a8:	81 91       	ld	r24, Z+
    22aa:	7f 01       	movw	r14, r30
    22ac:	81 11       	cpse	r24, r1
    22ae:	b3 cf       	rjmp	.-154    	; 0x2216 <vfprintf+0x82>
    22b0:	98 2f       	mov	r25, r24
    22b2:	9f 7d       	andi	r25, 0xDF	; 223
    22b4:	95 54       	subi	r25, 0x45	; 69
    22b6:	93 30       	cpi	r25, 0x03	; 3
    22b8:	28 f4       	brcc	.+10     	; 0x22c4 <vfprintf+0x130>
    22ba:	0c 5f       	subi	r16, 0xFC	; 252
    22bc:	1f 4f       	sbci	r17, 0xFF	; 255
    22be:	9f e3       	ldi	r25, 0x3F	; 63
    22c0:	99 83       	std	Y+1, r25	; 0x01
    22c2:	0d c0       	rjmp	.+26     	; 0x22de <vfprintf+0x14a>
    22c4:	83 36       	cpi	r24, 0x63	; 99
    22c6:	31 f0       	breq	.+12     	; 0x22d4 <vfprintf+0x140>
    22c8:	83 37       	cpi	r24, 0x73	; 115
    22ca:	71 f0       	breq	.+28     	; 0x22e8 <vfprintf+0x154>
    22cc:	83 35       	cpi	r24, 0x53	; 83
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <vfprintf+0x13e>
    22d0:	55 c0       	rjmp	.+170    	; 0x237c <vfprintf+0x1e8>
    22d2:	20 c0       	rjmp	.+64     	; 0x2314 <vfprintf+0x180>
    22d4:	f8 01       	movw	r30, r16
    22d6:	80 81       	ld	r24, Z
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	0e 5f       	subi	r16, 0xFE	; 254
    22dc:	1f 4f       	sbci	r17, 0xFF	; 255
    22de:	88 24       	eor	r8, r8
    22e0:	83 94       	inc	r8
    22e2:	91 2c       	mov	r9, r1
    22e4:	53 01       	movw	r10, r6
    22e6:	12 c0       	rjmp	.+36     	; 0x230c <vfprintf+0x178>
    22e8:	28 01       	movw	r4, r16
    22ea:	f2 e0       	ldi	r31, 0x02	; 2
    22ec:	4f 0e       	add	r4, r31
    22ee:	51 1c       	adc	r5, r1
    22f0:	f8 01       	movw	r30, r16
    22f2:	a0 80       	ld	r10, Z
    22f4:	b1 80       	ldd	r11, Z+1	; 0x01
    22f6:	36 fe       	sbrs	r3, 6
    22f8:	03 c0       	rjmp	.+6      	; 0x2300 <vfprintf+0x16c>
    22fa:	69 2d       	mov	r22, r9
    22fc:	70 e0       	ldi	r23, 0x00	; 0
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <vfprintf+0x170>
    2300:	6f ef       	ldi	r22, 0xFF	; 255
    2302:	7f ef       	ldi	r23, 0xFF	; 255
    2304:	c5 01       	movw	r24, r10
    2306:	4e d1       	rcall	.+668    	; 0x25a4 <strnlen>
    2308:	4c 01       	movw	r8, r24
    230a:	82 01       	movw	r16, r4
    230c:	f3 2d       	mov	r31, r3
    230e:	ff 77       	andi	r31, 0x7F	; 127
    2310:	3f 2e       	mov	r3, r31
    2312:	15 c0       	rjmp	.+42     	; 0x233e <vfprintf+0x1aa>
    2314:	28 01       	movw	r4, r16
    2316:	22 e0       	ldi	r18, 0x02	; 2
    2318:	42 0e       	add	r4, r18
    231a:	51 1c       	adc	r5, r1
    231c:	f8 01       	movw	r30, r16
    231e:	a0 80       	ld	r10, Z
    2320:	b1 80       	ldd	r11, Z+1	; 0x01
    2322:	36 fe       	sbrs	r3, 6
    2324:	03 c0       	rjmp	.+6      	; 0x232c <vfprintf+0x198>
    2326:	69 2d       	mov	r22, r9
    2328:	70 e0       	ldi	r23, 0x00	; 0
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <vfprintf+0x19c>
    232c:	6f ef       	ldi	r22, 0xFF	; 255
    232e:	7f ef       	ldi	r23, 0xFF	; 255
    2330:	c5 01       	movw	r24, r10
    2332:	2d d1       	rcall	.+602    	; 0x258e <strnlen_P>
    2334:	4c 01       	movw	r8, r24
    2336:	f3 2d       	mov	r31, r3
    2338:	f0 68       	ori	r31, 0x80	; 128
    233a:	3f 2e       	mov	r3, r31
    233c:	82 01       	movw	r16, r4
    233e:	33 fc       	sbrc	r3, 3
    2340:	19 c0       	rjmp	.+50     	; 0x2374 <vfprintf+0x1e0>
    2342:	82 2d       	mov	r24, r2
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	88 16       	cp	r8, r24
    2348:	99 06       	cpc	r9, r25
    234a:	a0 f4       	brcc	.+40     	; 0x2374 <vfprintf+0x1e0>
    234c:	b6 01       	movw	r22, r12
    234e:	80 e2       	ldi	r24, 0x20	; 32
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	33 d1       	rcall	.+614    	; 0x25ba <fputc>
    2354:	2a 94       	dec	r2
    2356:	f5 cf       	rjmp	.-22     	; 0x2342 <vfprintf+0x1ae>
    2358:	f5 01       	movw	r30, r10
    235a:	37 fc       	sbrc	r3, 7
    235c:	85 91       	lpm	r24, Z+
    235e:	37 fe       	sbrs	r3, 7
    2360:	81 91       	ld	r24, Z+
    2362:	5f 01       	movw	r10, r30
    2364:	b6 01       	movw	r22, r12
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	28 d1       	rcall	.+592    	; 0x25ba <fputc>
    236a:	21 10       	cpse	r2, r1
    236c:	2a 94       	dec	r2
    236e:	21 e0       	ldi	r18, 0x01	; 1
    2370:	82 1a       	sub	r8, r18
    2372:	91 08       	sbc	r9, r1
    2374:	81 14       	cp	r8, r1
    2376:	91 04       	cpc	r9, r1
    2378:	79 f7       	brne	.-34     	; 0x2358 <vfprintf+0x1c4>
    237a:	e1 c0       	rjmp	.+450    	; 0x253e <vfprintf+0x3aa>
    237c:	84 36       	cpi	r24, 0x64	; 100
    237e:	11 f0       	breq	.+4      	; 0x2384 <vfprintf+0x1f0>
    2380:	89 36       	cpi	r24, 0x69	; 105
    2382:	39 f5       	brne	.+78     	; 0x23d2 <vfprintf+0x23e>
    2384:	f8 01       	movw	r30, r16
    2386:	37 fe       	sbrs	r3, 7
    2388:	07 c0       	rjmp	.+14     	; 0x2398 <vfprintf+0x204>
    238a:	60 81       	ld	r22, Z
    238c:	71 81       	ldd	r23, Z+1	; 0x01
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	93 81       	ldd	r25, Z+3	; 0x03
    2392:	0c 5f       	subi	r16, 0xFC	; 252
    2394:	1f 4f       	sbci	r17, 0xFF	; 255
    2396:	08 c0       	rjmp	.+16     	; 0x23a8 <vfprintf+0x214>
    2398:	60 81       	ld	r22, Z
    239a:	71 81       	ldd	r23, Z+1	; 0x01
    239c:	07 2e       	mov	r0, r23
    239e:	00 0c       	add	r0, r0
    23a0:	88 0b       	sbc	r24, r24
    23a2:	99 0b       	sbc	r25, r25
    23a4:	0e 5f       	subi	r16, 0xFE	; 254
    23a6:	1f 4f       	sbci	r17, 0xFF	; 255
    23a8:	f3 2d       	mov	r31, r3
    23aa:	ff 76       	andi	r31, 0x6F	; 111
    23ac:	3f 2e       	mov	r3, r31
    23ae:	97 ff       	sbrs	r25, 7
    23b0:	09 c0       	rjmp	.+18     	; 0x23c4 <vfprintf+0x230>
    23b2:	90 95       	com	r25
    23b4:	80 95       	com	r24
    23b6:	70 95       	com	r23
    23b8:	61 95       	neg	r22
    23ba:	7f 4f       	sbci	r23, 0xFF	; 255
    23bc:	8f 4f       	sbci	r24, 0xFF	; 255
    23be:	9f 4f       	sbci	r25, 0xFF	; 255
    23c0:	f0 68       	ori	r31, 0x80	; 128
    23c2:	3f 2e       	mov	r3, r31
    23c4:	2a e0       	ldi	r18, 0x0A	; 10
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	a3 01       	movw	r20, r6
    23ca:	33 d1       	rcall	.+614    	; 0x2632 <__ultoa_invert>
    23cc:	88 2e       	mov	r8, r24
    23ce:	86 18       	sub	r8, r6
    23d0:	44 c0       	rjmp	.+136    	; 0x245a <vfprintf+0x2c6>
    23d2:	85 37       	cpi	r24, 0x75	; 117
    23d4:	31 f4       	brne	.+12     	; 0x23e2 <vfprintf+0x24e>
    23d6:	23 2d       	mov	r18, r3
    23d8:	2f 7e       	andi	r18, 0xEF	; 239
    23da:	b2 2e       	mov	r11, r18
    23dc:	2a e0       	ldi	r18, 0x0A	; 10
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	25 c0       	rjmp	.+74     	; 0x242c <vfprintf+0x298>
    23e2:	93 2d       	mov	r25, r3
    23e4:	99 7f       	andi	r25, 0xF9	; 249
    23e6:	b9 2e       	mov	r11, r25
    23e8:	8f 36       	cpi	r24, 0x6F	; 111
    23ea:	c1 f0       	breq	.+48     	; 0x241c <vfprintf+0x288>
    23ec:	18 f4       	brcc	.+6      	; 0x23f4 <vfprintf+0x260>
    23ee:	88 35       	cpi	r24, 0x58	; 88
    23f0:	79 f0       	breq	.+30     	; 0x2410 <vfprintf+0x27c>
    23f2:	ae c0       	rjmp	.+348    	; 0x2550 <vfprintf+0x3bc>
    23f4:	80 37       	cpi	r24, 0x70	; 112
    23f6:	19 f0       	breq	.+6      	; 0x23fe <vfprintf+0x26a>
    23f8:	88 37       	cpi	r24, 0x78	; 120
    23fa:	21 f0       	breq	.+8      	; 0x2404 <vfprintf+0x270>
    23fc:	a9 c0       	rjmp	.+338    	; 0x2550 <vfprintf+0x3bc>
    23fe:	e9 2f       	mov	r30, r25
    2400:	e0 61       	ori	r30, 0x10	; 16
    2402:	be 2e       	mov	r11, r30
    2404:	b4 fe       	sbrs	r11, 4
    2406:	0d c0       	rjmp	.+26     	; 0x2422 <vfprintf+0x28e>
    2408:	fb 2d       	mov	r31, r11
    240a:	f4 60       	ori	r31, 0x04	; 4
    240c:	bf 2e       	mov	r11, r31
    240e:	09 c0       	rjmp	.+18     	; 0x2422 <vfprintf+0x28e>
    2410:	34 fe       	sbrs	r3, 4
    2412:	0a c0       	rjmp	.+20     	; 0x2428 <vfprintf+0x294>
    2414:	29 2f       	mov	r18, r25
    2416:	26 60       	ori	r18, 0x06	; 6
    2418:	b2 2e       	mov	r11, r18
    241a:	06 c0       	rjmp	.+12     	; 0x2428 <vfprintf+0x294>
    241c:	28 e0       	ldi	r18, 0x08	; 8
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	05 c0       	rjmp	.+10     	; 0x242c <vfprintf+0x298>
    2422:	20 e1       	ldi	r18, 0x10	; 16
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	02 c0       	rjmp	.+4      	; 0x242c <vfprintf+0x298>
    2428:	20 e1       	ldi	r18, 0x10	; 16
    242a:	32 e0       	ldi	r19, 0x02	; 2
    242c:	f8 01       	movw	r30, r16
    242e:	b7 fe       	sbrs	r11, 7
    2430:	07 c0       	rjmp	.+14     	; 0x2440 <vfprintf+0x2ac>
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	0c 5f       	subi	r16, 0xFC	; 252
    243c:	1f 4f       	sbci	r17, 0xFF	; 255
    243e:	06 c0       	rjmp	.+12     	; 0x244c <vfprintf+0x2b8>
    2440:	60 81       	ld	r22, Z
    2442:	71 81       	ldd	r23, Z+1	; 0x01
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	0e 5f       	subi	r16, 0xFE	; 254
    244a:	1f 4f       	sbci	r17, 0xFF	; 255
    244c:	a3 01       	movw	r20, r6
    244e:	f1 d0       	rcall	.+482    	; 0x2632 <__ultoa_invert>
    2450:	88 2e       	mov	r8, r24
    2452:	86 18       	sub	r8, r6
    2454:	fb 2d       	mov	r31, r11
    2456:	ff 77       	andi	r31, 0x7F	; 127
    2458:	3f 2e       	mov	r3, r31
    245a:	36 fe       	sbrs	r3, 6
    245c:	0d c0       	rjmp	.+26     	; 0x2478 <vfprintf+0x2e4>
    245e:	23 2d       	mov	r18, r3
    2460:	2e 7f       	andi	r18, 0xFE	; 254
    2462:	a2 2e       	mov	r10, r18
    2464:	89 14       	cp	r8, r9
    2466:	58 f4       	brcc	.+22     	; 0x247e <vfprintf+0x2ea>
    2468:	34 fe       	sbrs	r3, 4
    246a:	0b c0       	rjmp	.+22     	; 0x2482 <vfprintf+0x2ee>
    246c:	32 fc       	sbrc	r3, 2
    246e:	09 c0       	rjmp	.+18     	; 0x2482 <vfprintf+0x2ee>
    2470:	83 2d       	mov	r24, r3
    2472:	8e 7e       	andi	r24, 0xEE	; 238
    2474:	a8 2e       	mov	r10, r24
    2476:	05 c0       	rjmp	.+10     	; 0x2482 <vfprintf+0x2ee>
    2478:	b8 2c       	mov	r11, r8
    247a:	a3 2c       	mov	r10, r3
    247c:	03 c0       	rjmp	.+6      	; 0x2484 <vfprintf+0x2f0>
    247e:	b8 2c       	mov	r11, r8
    2480:	01 c0       	rjmp	.+2      	; 0x2484 <vfprintf+0x2f0>
    2482:	b9 2c       	mov	r11, r9
    2484:	a4 fe       	sbrs	r10, 4
    2486:	0f c0       	rjmp	.+30     	; 0x24a6 <vfprintf+0x312>
    2488:	fe 01       	movw	r30, r28
    248a:	e8 0d       	add	r30, r8
    248c:	f1 1d       	adc	r31, r1
    248e:	80 81       	ld	r24, Z
    2490:	80 33       	cpi	r24, 0x30	; 48
    2492:	21 f4       	brne	.+8      	; 0x249c <vfprintf+0x308>
    2494:	9a 2d       	mov	r25, r10
    2496:	99 7e       	andi	r25, 0xE9	; 233
    2498:	a9 2e       	mov	r10, r25
    249a:	09 c0       	rjmp	.+18     	; 0x24ae <vfprintf+0x31a>
    249c:	a2 fe       	sbrs	r10, 2
    249e:	06 c0       	rjmp	.+12     	; 0x24ac <vfprintf+0x318>
    24a0:	b3 94       	inc	r11
    24a2:	b3 94       	inc	r11
    24a4:	04 c0       	rjmp	.+8      	; 0x24ae <vfprintf+0x31a>
    24a6:	8a 2d       	mov	r24, r10
    24a8:	86 78       	andi	r24, 0x86	; 134
    24aa:	09 f0       	breq	.+2      	; 0x24ae <vfprintf+0x31a>
    24ac:	b3 94       	inc	r11
    24ae:	a3 fc       	sbrc	r10, 3
    24b0:	10 c0       	rjmp	.+32     	; 0x24d2 <vfprintf+0x33e>
    24b2:	a0 fe       	sbrs	r10, 0
    24b4:	06 c0       	rjmp	.+12     	; 0x24c2 <vfprintf+0x32e>
    24b6:	b2 14       	cp	r11, r2
    24b8:	80 f4       	brcc	.+32     	; 0x24da <vfprintf+0x346>
    24ba:	28 0c       	add	r2, r8
    24bc:	92 2c       	mov	r9, r2
    24be:	9b 18       	sub	r9, r11
    24c0:	0d c0       	rjmp	.+26     	; 0x24dc <vfprintf+0x348>
    24c2:	b2 14       	cp	r11, r2
    24c4:	58 f4       	brcc	.+22     	; 0x24dc <vfprintf+0x348>
    24c6:	b6 01       	movw	r22, r12
    24c8:	80 e2       	ldi	r24, 0x20	; 32
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	76 d0       	rcall	.+236    	; 0x25ba <fputc>
    24ce:	b3 94       	inc	r11
    24d0:	f8 cf       	rjmp	.-16     	; 0x24c2 <vfprintf+0x32e>
    24d2:	b2 14       	cp	r11, r2
    24d4:	18 f4       	brcc	.+6      	; 0x24dc <vfprintf+0x348>
    24d6:	2b 18       	sub	r2, r11
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <vfprintf+0x34a>
    24da:	98 2c       	mov	r9, r8
    24dc:	21 2c       	mov	r2, r1
    24de:	a4 fe       	sbrs	r10, 4
    24e0:	0f c0       	rjmp	.+30     	; 0x2500 <vfprintf+0x36c>
    24e2:	b6 01       	movw	r22, r12
    24e4:	80 e3       	ldi	r24, 0x30	; 48
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	68 d0       	rcall	.+208    	; 0x25ba <fputc>
    24ea:	a2 fe       	sbrs	r10, 2
    24ec:	16 c0       	rjmp	.+44     	; 0x251a <vfprintf+0x386>
    24ee:	a1 fc       	sbrc	r10, 1
    24f0:	03 c0       	rjmp	.+6      	; 0x24f8 <vfprintf+0x364>
    24f2:	88 e7       	ldi	r24, 0x78	; 120
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	02 c0       	rjmp	.+4      	; 0x24fc <vfprintf+0x368>
    24f8:	88 e5       	ldi	r24, 0x58	; 88
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	b6 01       	movw	r22, r12
    24fe:	0c c0       	rjmp	.+24     	; 0x2518 <vfprintf+0x384>
    2500:	8a 2d       	mov	r24, r10
    2502:	86 78       	andi	r24, 0x86	; 134
    2504:	51 f0       	breq	.+20     	; 0x251a <vfprintf+0x386>
    2506:	a1 fe       	sbrs	r10, 1
    2508:	02 c0       	rjmp	.+4      	; 0x250e <vfprintf+0x37a>
    250a:	8b e2       	ldi	r24, 0x2B	; 43
    250c:	01 c0       	rjmp	.+2      	; 0x2510 <vfprintf+0x37c>
    250e:	80 e2       	ldi	r24, 0x20	; 32
    2510:	a7 fc       	sbrc	r10, 7
    2512:	8d e2       	ldi	r24, 0x2D	; 45
    2514:	b6 01       	movw	r22, r12
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	50 d0       	rcall	.+160    	; 0x25ba <fputc>
    251a:	89 14       	cp	r8, r9
    251c:	30 f4       	brcc	.+12     	; 0x252a <vfprintf+0x396>
    251e:	b6 01       	movw	r22, r12
    2520:	80 e3       	ldi	r24, 0x30	; 48
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	4a d0       	rcall	.+148    	; 0x25ba <fputc>
    2526:	9a 94       	dec	r9
    2528:	f8 cf       	rjmp	.-16     	; 0x251a <vfprintf+0x386>
    252a:	8a 94       	dec	r8
    252c:	f3 01       	movw	r30, r6
    252e:	e8 0d       	add	r30, r8
    2530:	f1 1d       	adc	r31, r1
    2532:	80 81       	ld	r24, Z
    2534:	b6 01       	movw	r22, r12
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	40 d0       	rcall	.+128    	; 0x25ba <fputc>
    253a:	81 10       	cpse	r8, r1
    253c:	f6 cf       	rjmp	.-20     	; 0x252a <vfprintf+0x396>
    253e:	22 20       	and	r2, r2
    2540:	09 f4       	brne	.+2      	; 0x2544 <vfprintf+0x3b0>
    2542:	4e ce       	rjmp	.-868    	; 0x21e0 <vfprintf+0x4c>
    2544:	b6 01       	movw	r22, r12
    2546:	80 e2       	ldi	r24, 0x20	; 32
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	37 d0       	rcall	.+110    	; 0x25ba <fputc>
    254c:	2a 94       	dec	r2
    254e:	f7 cf       	rjmp	.-18     	; 0x253e <vfprintf+0x3aa>
    2550:	f6 01       	movw	r30, r12
    2552:	86 81       	ldd	r24, Z+6	; 0x06
    2554:	97 81       	ldd	r25, Z+7	; 0x07
    2556:	02 c0       	rjmp	.+4      	; 0x255c <vfprintf+0x3c8>
    2558:	8f ef       	ldi	r24, 0xFF	; 255
    255a:	9f ef       	ldi	r25, 0xFF	; 255
    255c:	2b 96       	adiw	r28, 0x0b	; 11
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	de bf       	out	0x3e, r29	; 62
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	cd bf       	out	0x3d, r28	; 61
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	1f 91       	pop	r17
    256e:	0f 91       	pop	r16
    2570:	ff 90       	pop	r15
    2572:	ef 90       	pop	r14
    2574:	df 90       	pop	r13
    2576:	cf 90       	pop	r12
    2578:	bf 90       	pop	r11
    257a:	af 90       	pop	r10
    257c:	9f 90       	pop	r9
    257e:	8f 90       	pop	r8
    2580:	7f 90       	pop	r7
    2582:	6f 90       	pop	r6
    2584:	5f 90       	pop	r5
    2586:	4f 90       	pop	r4
    2588:	3f 90       	pop	r3
    258a:	2f 90       	pop	r2
    258c:	08 95       	ret

0000258e <strnlen_P>:
    258e:	fc 01       	movw	r30, r24
    2590:	05 90       	lpm	r0, Z+
    2592:	61 50       	subi	r22, 0x01	; 1
    2594:	70 40       	sbci	r23, 0x00	; 0
    2596:	01 10       	cpse	r0, r1
    2598:	d8 f7       	brcc	.-10     	; 0x2590 <strnlen_P+0x2>
    259a:	80 95       	com	r24
    259c:	90 95       	com	r25
    259e:	8e 0f       	add	r24, r30
    25a0:	9f 1f       	adc	r25, r31
    25a2:	08 95       	ret

000025a4 <strnlen>:
    25a4:	fc 01       	movw	r30, r24
    25a6:	61 50       	subi	r22, 0x01	; 1
    25a8:	70 40       	sbci	r23, 0x00	; 0
    25aa:	01 90       	ld	r0, Z+
    25ac:	01 10       	cpse	r0, r1
    25ae:	d8 f7       	brcc	.-10     	; 0x25a6 <strnlen+0x2>
    25b0:	80 95       	com	r24
    25b2:	90 95       	com	r25
    25b4:	8e 0f       	add	r24, r30
    25b6:	9f 1f       	adc	r25, r31
    25b8:	08 95       	ret

000025ba <fputc>:
    25ba:	0f 93       	push	r16
    25bc:	1f 93       	push	r17
    25be:	cf 93       	push	r28
    25c0:	df 93       	push	r29
    25c2:	fb 01       	movw	r30, r22
    25c4:	23 81       	ldd	r18, Z+3	; 0x03
    25c6:	21 fd       	sbrc	r18, 1
    25c8:	03 c0       	rjmp	.+6      	; 0x25d0 <fputc+0x16>
    25ca:	8f ef       	ldi	r24, 0xFF	; 255
    25cc:	9f ef       	ldi	r25, 0xFF	; 255
    25ce:	2c c0       	rjmp	.+88     	; 0x2628 <fputc+0x6e>
    25d0:	22 ff       	sbrs	r18, 2
    25d2:	16 c0       	rjmp	.+44     	; 0x2600 <fputc+0x46>
    25d4:	46 81       	ldd	r20, Z+6	; 0x06
    25d6:	57 81       	ldd	r21, Z+7	; 0x07
    25d8:	24 81       	ldd	r18, Z+4	; 0x04
    25da:	35 81       	ldd	r19, Z+5	; 0x05
    25dc:	42 17       	cp	r20, r18
    25de:	53 07       	cpc	r21, r19
    25e0:	44 f4       	brge	.+16     	; 0x25f2 <fputc+0x38>
    25e2:	a0 81       	ld	r26, Z
    25e4:	b1 81       	ldd	r27, Z+1	; 0x01
    25e6:	9d 01       	movw	r18, r26
    25e8:	2f 5f       	subi	r18, 0xFF	; 255
    25ea:	3f 4f       	sbci	r19, 0xFF	; 255
    25ec:	31 83       	std	Z+1, r19	; 0x01
    25ee:	20 83       	st	Z, r18
    25f0:	8c 93       	st	X, r24
    25f2:	26 81       	ldd	r18, Z+6	; 0x06
    25f4:	37 81       	ldd	r19, Z+7	; 0x07
    25f6:	2f 5f       	subi	r18, 0xFF	; 255
    25f8:	3f 4f       	sbci	r19, 0xFF	; 255
    25fa:	37 83       	std	Z+7, r19	; 0x07
    25fc:	26 83       	std	Z+6, r18	; 0x06
    25fe:	14 c0       	rjmp	.+40     	; 0x2628 <fputc+0x6e>
    2600:	8b 01       	movw	r16, r22
    2602:	ec 01       	movw	r28, r24
    2604:	fb 01       	movw	r30, r22
    2606:	00 84       	ldd	r0, Z+8	; 0x08
    2608:	f1 85       	ldd	r31, Z+9	; 0x09
    260a:	e0 2d       	mov	r30, r0
    260c:	09 95       	icall
    260e:	89 2b       	or	r24, r25
    2610:	e1 f6       	brne	.-72     	; 0x25ca <fputc+0x10>
    2612:	d8 01       	movw	r26, r16
    2614:	16 96       	adiw	r26, 0x06	; 6
    2616:	8d 91       	ld	r24, X+
    2618:	9c 91       	ld	r25, X
    261a:	17 97       	sbiw	r26, 0x07	; 7
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	17 96       	adiw	r26, 0x07	; 7
    2620:	9c 93       	st	X, r25
    2622:	8e 93       	st	-X, r24
    2624:	16 97       	sbiw	r26, 0x06	; 6
    2626:	ce 01       	movw	r24, r28
    2628:	df 91       	pop	r29
    262a:	cf 91       	pop	r28
    262c:	1f 91       	pop	r17
    262e:	0f 91       	pop	r16
    2630:	08 95       	ret

00002632 <__ultoa_invert>:
    2632:	fa 01       	movw	r30, r20
    2634:	aa 27       	eor	r26, r26
    2636:	28 30       	cpi	r18, 0x08	; 8
    2638:	51 f1       	breq	.+84     	; 0x268e <__ultoa_invert+0x5c>
    263a:	20 31       	cpi	r18, 0x10	; 16
    263c:	81 f1       	breq	.+96     	; 0x269e <__ultoa_invert+0x6c>
    263e:	e8 94       	clt
    2640:	6f 93       	push	r22
    2642:	6e 7f       	andi	r22, 0xFE	; 254
    2644:	6e 5f       	subi	r22, 0xFE	; 254
    2646:	7f 4f       	sbci	r23, 0xFF	; 255
    2648:	8f 4f       	sbci	r24, 0xFF	; 255
    264a:	9f 4f       	sbci	r25, 0xFF	; 255
    264c:	af 4f       	sbci	r26, 0xFF	; 255
    264e:	b1 e0       	ldi	r27, 0x01	; 1
    2650:	3e d0       	rcall	.+124    	; 0x26ce <__ultoa_invert+0x9c>
    2652:	b4 e0       	ldi	r27, 0x04	; 4
    2654:	3c d0       	rcall	.+120    	; 0x26ce <__ultoa_invert+0x9c>
    2656:	67 0f       	add	r22, r23
    2658:	78 1f       	adc	r23, r24
    265a:	89 1f       	adc	r24, r25
    265c:	9a 1f       	adc	r25, r26
    265e:	a1 1d       	adc	r26, r1
    2660:	68 0f       	add	r22, r24
    2662:	79 1f       	adc	r23, r25
    2664:	8a 1f       	adc	r24, r26
    2666:	91 1d       	adc	r25, r1
    2668:	a1 1d       	adc	r26, r1
    266a:	6a 0f       	add	r22, r26
    266c:	71 1d       	adc	r23, r1
    266e:	81 1d       	adc	r24, r1
    2670:	91 1d       	adc	r25, r1
    2672:	a1 1d       	adc	r26, r1
    2674:	20 d0       	rcall	.+64     	; 0x26b6 <__ultoa_invert+0x84>
    2676:	09 f4       	brne	.+2      	; 0x267a <__ultoa_invert+0x48>
    2678:	68 94       	set
    267a:	3f 91       	pop	r19
    267c:	2a e0       	ldi	r18, 0x0A	; 10
    267e:	26 9f       	mul	r18, r22
    2680:	11 24       	eor	r1, r1
    2682:	30 19       	sub	r19, r0
    2684:	30 5d       	subi	r19, 0xD0	; 208
    2686:	31 93       	st	Z+, r19
    2688:	de f6       	brtc	.-74     	; 0x2640 <__ultoa_invert+0xe>
    268a:	cf 01       	movw	r24, r30
    268c:	08 95       	ret
    268e:	46 2f       	mov	r20, r22
    2690:	47 70       	andi	r20, 0x07	; 7
    2692:	40 5d       	subi	r20, 0xD0	; 208
    2694:	41 93       	st	Z+, r20
    2696:	b3 e0       	ldi	r27, 0x03	; 3
    2698:	0f d0       	rcall	.+30     	; 0x26b8 <__ultoa_invert+0x86>
    269a:	c9 f7       	brne	.-14     	; 0x268e <__ultoa_invert+0x5c>
    269c:	f6 cf       	rjmp	.-20     	; 0x268a <__ultoa_invert+0x58>
    269e:	46 2f       	mov	r20, r22
    26a0:	4f 70       	andi	r20, 0x0F	; 15
    26a2:	40 5d       	subi	r20, 0xD0	; 208
    26a4:	4a 33       	cpi	r20, 0x3A	; 58
    26a6:	18 f0       	brcs	.+6      	; 0x26ae <__ultoa_invert+0x7c>
    26a8:	49 5d       	subi	r20, 0xD9	; 217
    26aa:	31 fd       	sbrc	r19, 1
    26ac:	40 52       	subi	r20, 0x20	; 32
    26ae:	41 93       	st	Z+, r20
    26b0:	02 d0       	rcall	.+4      	; 0x26b6 <__ultoa_invert+0x84>
    26b2:	a9 f7       	brne	.-22     	; 0x269e <__ultoa_invert+0x6c>
    26b4:	ea cf       	rjmp	.-44     	; 0x268a <__ultoa_invert+0x58>
    26b6:	b4 e0       	ldi	r27, 0x04	; 4
    26b8:	a6 95       	lsr	r26
    26ba:	97 95       	ror	r25
    26bc:	87 95       	ror	r24
    26be:	77 95       	ror	r23
    26c0:	67 95       	ror	r22
    26c2:	ba 95       	dec	r27
    26c4:	c9 f7       	brne	.-14     	; 0x26b8 <__ultoa_invert+0x86>
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	61 05       	cpc	r22, r1
    26ca:	71 05       	cpc	r23, r1
    26cc:	08 95       	ret
    26ce:	9b 01       	movw	r18, r22
    26d0:	ac 01       	movw	r20, r24
    26d2:	0a 2e       	mov	r0, r26
    26d4:	06 94       	lsr	r0
    26d6:	57 95       	ror	r21
    26d8:	47 95       	ror	r20
    26da:	37 95       	ror	r19
    26dc:	27 95       	ror	r18
    26de:	ba 95       	dec	r27
    26e0:	c9 f7       	brne	.-14     	; 0x26d4 <__ultoa_invert+0xa2>
    26e2:	62 0f       	add	r22, r18
    26e4:	73 1f       	adc	r23, r19
    26e6:	84 1f       	adc	r24, r20
    26e8:	95 1f       	adc	r25, r21
    26ea:	a0 1d       	adc	r26, r0
    26ec:	08 95       	ret

000026ee <__divmodsi4>:
    26ee:	05 2e       	mov	r0, r21
    26f0:	97 fb       	bst	r25, 7
    26f2:	16 f4       	brtc	.+4      	; 0x26f8 <__divmodsi4+0xa>
    26f4:	00 94       	com	r0
    26f6:	0f d0       	rcall	.+30     	; 0x2716 <__negsi2>
    26f8:	57 fd       	sbrc	r21, 7
    26fa:	05 d0       	rcall	.+10     	; 0x2706 <__divmodsi4_neg2>
    26fc:	24 d0       	rcall	.+72     	; 0x2746 <__udivmodsi4>
    26fe:	07 fc       	sbrc	r0, 7
    2700:	02 d0       	rcall	.+4      	; 0x2706 <__divmodsi4_neg2>
    2702:	46 f4       	brtc	.+16     	; 0x2714 <__divmodsi4_exit>
    2704:	08 c0       	rjmp	.+16     	; 0x2716 <__negsi2>

00002706 <__divmodsi4_neg2>:
    2706:	50 95       	com	r21
    2708:	40 95       	com	r20
    270a:	30 95       	com	r19
    270c:	21 95       	neg	r18
    270e:	3f 4f       	sbci	r19, 0xFF	; 255
    2710:	4f 4f       	sbci	r20, 0xFF	; 255
    2712:	5f 4f       	sbci	r21, 0xFF	; 255

00002714 <__divmodsi4_exit>:
    2714:	08 95       	ret

00002716 <__negsi2>:
    2716:	90 95       	com	r25
    2718:	80 95       	com	r24
    271a:	70 95       	com	r23
    271c:	61 95       	neg	r22
    271e:	7f 4f       	sbci	r23, 0xFF	; 255
    2720:	8f 4f       	sbci	r24, 0xFF	; 255
    2722:	9f 4f       	sbci	r25, 0xFF	; 255
    2724:	08 95       	ret

00002726 <__muluhisi3>:
    2726:	31 d0       	rcall	.+98     	; 0x278a <__umulhisi3>
    2728:	a5 9f       	mul	r26, r21
    272a:	90 0d       	add	r25, r0
    272c:	b4 9f       	mul	r27, r20
    272e:	90 0d       	add	r25, r0
    2730:	a4 9f       	mul	r26, r20
    2732:	80 0d       	add	r24, r0
    2734:	91 1d       	adc	r25, r1
    2736:	11 24       	eor	r1, r1
    2738:	08 95       	ret

0000273a <__mulshisi3>:
    273a:	b7 ff       	sbrs	r27, 7
    273c:	f4 cf       	rjmp	.-24     	; 0x2726 <__muluhisi3>

0000273e <__mulohisi3>:
    273e:	f3 df       	rcall	.-26     	; 0x2726 <__muluhisi3>
    2740:	82 1b       	sub	r24, r18
    2742:	93 0b       	sbc	r25, r19
    2744:	08 95       	ret

00002746 <__udivmodsi4>:
    2746:	a1 e2       	ldi	r26, 0x21	; 33
    2748:	1a 2e       	mov	r1, r26
    274a:	aa 1b       	sub	r26, r26
    274c:	bb 1b       	sub	r27, r27
    274e:	fd 01       	movw	r30, r26
    2750:	0d c0       	rjmp	.+26     	; 0x276c <__udivmodsi4_ep>

00002752 <__udivmodsi4_loop>:
    2752:	aa 1f       	adc	r26, r26
    2754:	bb 1f       	adc	r27, r27
    2756:	ee 1f       	adc	r30, r30
    2758:	ff 1f       	adc	r31, r31
    275a:	a2 17       	cp	r26, r18
    275c:	b3 07       	cpc	r27, r19
    275e:	e4 07       	cpc	r30, r20
    2760:	f5 07       	cpc	r31, r21
    2762:	20 f0       	brcs	.+8      	; 0x276c <__udivmodsi4_ep>
    2764:	a2 1b       	sub	r26, r18
    2766:	b3 0b       	sbc	r27, r19
    2768:	e4 0b       	sbc	r30, r20
    276a:	f5 0b       	sbc	r31, r21

0000276c <__udivmodsi4_ep>:
    276c:	66 1f       	adc	r22, r22
    276e:	77 1f       	adc	r23, r23
    2770:	88 1f       	adc	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	1a 94       	dec	r1
    2776:	69 f7       	brne	.-38     	; 0x2752 <__udivmodsi4_loop>
    2778:	60 95       	com	r22
    277a:	70 95       	com	r23
    277c:	80 95       	com	r24
    277e:	90 95       	com	r25
    2780:	9b 01       	movw	r18, r22
    2782:	ac 01       	movw	r20, r24
    2784:	bd 01       	movw	r22, r26
    2786:	cf 01       	movw	r24, r30
    2788:	08 95       	ret

0000278a <__umulhisi3>:
    278a:	a2 9f       	mul	r26, r18
    278c:	b0 01       	movw	r22, r0
    278e:	b3 9f       	mul	r27, r19
    2790:	c0 01       	movw	r24, r0
    2792:	a3 9f       	mul	r26, r19
    2794:	70 0d       	add	r23, r0
    2796:	81 1d       	adc	r24, r1
    2798:	11 24       	eor	r1, r1
    279a:	91 1d       	adc	r25, r1
    279c:	b2 9f       	mul	r27, r18
    279e:	70 0d       	add	r23, r0
    27a0:	81 1d       	adc	r24, r1
    27a2:	11 24       	eor	r1, r1
    27a4:	91 1d       	adc	r25, r1
    27a6:	08 95       	ret

000027a8 <_exit>:
    27a8:	f8 94       	cli

000027aa <__stop_program>:
    27aa:	ff cf       	rjmp	.-2      	; 0x27aa <__stop_program>
