
DFPlayer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000650  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3a  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000885  00000000  00000000  0000113a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000450  00000000  00000000  000019bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001e10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042b  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000158  00000000  00000000  000022ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002447  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ef       	ldi	r30, 0xFC	; 252
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	af d0       	rcall	.+350    	; 0x212 <main>
  b4:	a1 c2       	rjmp	.+1346   	; 0x5f8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <UART_Init>:

char cmd_list[10] = {CMD_PLAY, CMD_STOP, CMD_PAUSE, CMD_NEXT, CMD_PRE,};


void UART_Init(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
	//UCSR0B = 0x18;
	//UCSR0C = 0x06;
	//UBRR0L = 103;

	UCSR1B = 0x08;
  c0:	8a e9       	ldi	r24, 0x9A	; 154
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	28 e0       	ldi	r18, 0x08	; 8
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
	UCSR1C = 0x06;
  ca:	8d e9       	ldi	r24, 0x9D	; 157
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	26 e0       	ldi	r18, 0x06	; 6
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
	UBRR1L = 103;
  d4:	89 e9       	ldi	r24, 0x99	; 153
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	27 e6       	ldi	r18, 0x67	; 103
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
}
  de:	00 00       	nop
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <UART0_Putch>:

void UART0_Putch(char ch)
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	1f 92       	push	r1
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
  f0:	89 83       	std	Y+1, r24	; 0x01
	while((UCSR1A & 0x20) == 0x0);
  f2:	00 00       	nop
  f4:	8b e9       	ldi	r24, 0x9B	; 155
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	fc 01       	movw	r30, r24
  fa:	80 81       	ld	r24, Z
  fc:	88 2f       	mov	r24, r24
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	80 72       	andi	r24, 0x20	; 32
 102:	99 27       	eor	r25, r25
 104:	89 2b       	or	r24, r25
 106:	b1 f3       	breq	.-20     	; 0xf4 <UART0_Putch+0xe>

	UDR1 = ch;
 108:	8c e9       	ldi	r24, 0x9C	; 156
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	29 81       	ldd	r18, Y+1	; 0x01
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
}
 112:	00 00       	nop
 114:	0f 90       	pop	r0
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <SendCommand>:

void SendCommand(unsigned char cmd)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	67 97       	sbiw	r28, 0x17	; 23
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	cd bf       	out	0x3d, r28	; 61
 130:	8f 8b       	std	Y+23, r24	; 0x17
	unsigned int checksum = 0;
 132:	1a 82       	std	Y+2, r1	; 0x02
 134:	19 82       	std	Y+1, r1	; 0x01
	char temp[20];

	UART0_Putch(0x7E);
 136:	8e e7       	ldi	r24, 0x7E	; 126
 138:	d6 df       	rcall	.-84     	; 0xe6 <UART0_Putch>
	UART0_Putch(0xFF);
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	d4 df       	rcall	.-88     	; 0xe6 <UART0_Putch>
	UART0_Putch(0x06);
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	d2 df       	rcall	.-92     	; 0xe6 <UART0_Putch>
	UART0_Putch(cmd);
 142:	8f 89       	ldd	r24, Y+23	; 0x17
 144:	d0 df       	rcall	.-96     	; 0xe6 <UART0_Putch>
	UART0_Putch(0x00);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	ce df       	rcall	.-100    	; 0xe6 <UART0_Putch>
 14a:	80 e0       	ldi	r24, 0x00	; 0
	UART0_Putch(0x00);
 14c:	cc df       	rcall	.-104    	; 0xe6 <UART0_Putch>
 14e:	8f 89       	ldd	r24, Y+23	; 0x17
	
	if(cmd != CMD_TF){
 150:	89 30       	cpi	r24, 0x09	; 9
 152:	71 f0       	breq	.+28     	; 0x170 <SendCommand+0x54>
 154:	80 e0       	ldi	r24, 0x00	; 0
		UART0_Putch(0x00);
 156:	c7 df       	rcall	.-114    	; 0xe6 <UART0_Putch>
 158:	8f 89       	ldd	r24, Y+23	; 0x17
 15a:	88 2f       	mov	r24, r24
		checksum = 0 - (0xFF + 0x06 + cmd);
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	2b ef       	ldi	r18, 0xFB	; 251
 160:	3e ef       	ldi	r19, 0xFE	; 254
 162:	a9 01       	movw	r20, r18
 164:	48 1b       	sub	r20, r24
 166:	59 0b       	sbc	r21, r25
 168:	ca 01       	movw	r24, r20
 16a:	9a 83       	std	Y+2, r25	; 0x02
 16c:	89 83       	std	Y+1, r24	; 0x01
 16e:	0d c0       	rjmp	.+26     	; 0x18a <SendCommand+0x6e>
 170:	82 e0       	ldi	r24, 0x02	; 2
	}
	else{
		UART0_Putch(0x02);
 172:	b9 df       	rcall	.-142    	; 0xe6 <UART0_Putch>
 174:	8f 89       	ldd	r24, Y+23	; 0x17
 176:	88 2f       	mov	r24, r24
		checksum = 0 - (0xFF + 0x06 + cmd + 0x02);
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	29 ef       	ldi	r18, 0xF9	; 249
 17c:	3e ef       	ldi	r19, 0xFE	; 254
 17e:	a9 01       	movw	r20, r18
 180:	48 1b       	sub	r20, r24
 182:	59 0b       	sbc	r21, r25
 184:	ca 01       	movw	r24, r20
 186:	9a 83       	std	Y+2, r25	; 0x02
 188:	89 83       	std	Y+1, r24	; 0x01
	}

	UART0_Putch((char)(checksum >> 8));
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	9a 81       	ldd	r25, Y+2	; 0x02
 18e:	89 2f       	mov	r24, r25
 190:	99 27       	eor	r25, r25
 192:	a9 df       	rcall	.-174    	; 0xe6 <UART0_Putch>
	UART0_Putch(checksum&0xFF);
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	a7 df       	rcall	.-178    	; 0xe6 <UART0_Putch>
 198:	8f ee       	ldi	r24, 0xEF	; 239
	UART0_Putch(0xEF);
 19a:	a5 df       	rcall	.-182    	; 0xe6 <UART0_Putch>
 19c:	00 00       	nop
 19e:	67 96       	adiw	r28, 0x17	; 23
}
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <SendCommand01>:
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29

void SendCommand01()
{
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	66 97       	sbiw	r28, 0x16	; 22
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
	unsigned int checksum = 0;
 1c4:	1a 82       	std	Y+2, r1	; 0x02
 1c6:	19 82       	std	Y+1, r1	; 0x01
	char temp[20];

	UART0_Putch(0x7E);
 1c8:	8e e7       	ldi	r24, 0x7E	; 126
 1ca:	8d df       	rcall	.-230    	; 0xe6 <UART0_Putch>
	UART0_Putch(0xFF);
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	8b df       	rcall	.-234    	; 0xe6 <UART0_Putch>
	UART0_Putch(0x06);	
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	89 df       	rcall	.-238    	; 0xe6 <UART0_Putch>
	UART0_Putch(0x03);
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	87 df       	rcall	.-242    	; 0xe6 <UART0_Putch>
	UART0_Putch(0x00);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	85 df       	rcall	.-246    	; 0xe6 <UART0_Putch>
	UART0_Putch(0x00);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	83 df       	rcall	.-250    	; 0xe6 <UART0_Putch>
 1e0:	81 e0       	ldi	r24, 0x01	; 1
	UART0_Putch(0x01);
 1e2:	81 df       	rcall	.-254    	; 0xe6 <UART0_Putch>
 1e4:	87 ef       	ldi	r24, 0xF7	; 247
 1e6:	9e ef       	ldi	r25, 0xFE	; 254
	
	checksum = 0 - (0xFF + 0x06 + 0x03 + 0x00 + 0x01);
 1e8:	9a 83       	std	Y+2, r25	; 0x02
 1ea:	89 83       	std	Y+1, r24	; 0x01
 1ec:	89 81       	ldd	r24, Y+1	; 0x01

	UART0_Putch((char)(checksum >> 8));
 1ee:	9a 81       	ldd	r25, Y+2	; 0x02
 1f0:	89 2f       	mov	r24, r25
 1f2:	99 27       	eor	r25, r25
 1f4:	78 df       	rcall	.-272    	; 0xe6 <UART0_Putch>
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
	UART0_Putch(checksum&0xFF);
 1f8:	76 df       	rcall	.-276    	; 0xe6 <UART0_Putch>
 1fa:	8f ee       	ldi	r24, 0xEF	; 239
 1fc:	74 df       	rcall	.-280    	; 0xe6 <UART0_Putch>

	UART0_Putch(0xEF);
 1fe:	00 00       	nop
 200:	66 96       	adiw	r28, 0x16	; 22
 202:	0f b6       	in	r0, 0x3f	; 63
}
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <main>:
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	cd b7       	in	r28, 0x3d	; 61


int main(void)
{
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	6c 97       	sbiw	r28, 0x1c	; 28
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	de bf       	out	0x3e, r29	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	cd bf       	out	0x3d, r28	; 61
    char cmd;

    UART_Init();
 226:	48 df       	rcall	.-368    	; 0xb8 <UART_Init>

    
    
    SendCommand(CMD_TF);
 228:	89 e0       	ldi	r24, 0x09	; 9
 22a:	78 df       	rcall	.-272    	; 0x11c <SendCommand>
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	a8 e4       	ldi	r26, 0x48	; 72
 232:	b3 e4       	ldi	r27, 0x43	; 67
 234:	89 83       	std	Y+1, r24	; 0x01
 236:	9a 83       	std	Y+2, r25	; 0x02
 238:	ab 83       	std	Y+3, r26	; 0x03
 23a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	4a e7       	ldi	r20, 0x7A	; 122
 242:	55 e4       	ldi	r21, 0x45	; 69
 244:	69 81       	ldd	r22, Y+1	; 0x01
 246:	7a 81       	ldd	r23, Y+2	; 0x02
 248:	8b 81       	ldd	r24, Y+3	; 0x03
 24a:	9c 81       	ldd	r25, Y+4	; 0x04
 24c:	4a d1       	rcall	.+660    	; 0x4e2 <__mulsf3>
 24e:	dc 01       	movw	r26, r24
 250:	cb 01       	movw	r24, r22
 252:	8b 8b       	std	Y+19, r24	; 0x13
 254:	9c 8b       	std	Y+20, r25	; 0x14
 256:	ad 8b       	std	Y+21, r26	; 0x15
 258:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	40 e8       	ldi	r20, 0x80	; 128
 260:	5f e3       	ldi	r21, 0x3F	; 63
 262:	6b 89       	ldd	r22, Y+19	; 0x13
 264:	7c 89       	ldd	r23, Y+20	; 0x14
 266:	8d 89       	ldd	r24, Y+21	; 0x15
 268:	9e 89       	ldd	r25, Y+22	; 0x16
 26a:	ba d0       	rcall	.+372    	; 0x3e0 <__cmpsf2>
 26c:	88 23       	and	r24, r24
 26e:	2c f4       	brge	.+10     	; 0x27a <main+0x68>
		__ticks = 1;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	98 8f       	std	Y+24, r25	; 0x18
 276:	8f 8b       	std	Y+23, r24	; 0x17
 278:	3b c0       	rjmp	.+118    	; 0x2f0 <main+0xde>
	else if (__tmp > 65535)
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	3f ef       	ldi	r19, 0xFF	; 255
 27e:	4f e7       	ldi	r20, 0x7F	; 127
 280:	57 e4       	ldi	r21, 0x47	; 71
 282:	6b 89       	ldd	r22, Y+19	; 0x13
 284:	7c 89       	ldd	r23, Y+20	; 0x14
 286:	8d 89       	ldd	r24, Y+21	; 0x15
 288:	9e 89       	ldd	r25, Y+22	; 0x16
 28a:	27 d1       	rcall	.+590    	; 0x4da <__gesf2>
 28c:	18 16       	cp	r1, r24
 28e:	3c f5       	brge	.+78     	; 0x2de <main+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	40 e2       	ldi	r20, 0x20	; 32
 296:	51 e4       	ldi	r21, 0x41	; 65
 298:	69 81       	ldd	r22, Y+1	; 0x01
 29a:	7a 81       	ldd	r23, Y+2	; 0x02
 29c:	8b 81       	ldd	r24, Y+3	; 0x03
 29e:	9c 81       	ldd	r25, Y+4	; 0x04
 2a0:	20 d1       	rcall	.+576    	; 0x4e2 <__mulsf3>
 2a2:	dc 01       	movw	r26, r24
 2a4:	cb 01       	movw	r24, r22
 2a6:	bc 01       	movw	r22, r24
 2a8:	cd 01       	movw	r24, r26
 2aa:	9e d0       	rcall	.+316    	; 0x3e8 <__fixunssfsi>
 2ac:	dc 01       	movw	r26, r24
 2ae:	cb 01       	movw	r24, r22
 2b0:	98 8f       	std	Y+24, r25	; 0x18
 2b2:	8f 8b       	std	Y+23, r24	; 0x17
 2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <main+0xc2>
 2b6:	80 e9       	ldi	r24, 0x90	; 144
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	9a 8f       	std	Y+26, r25	; 0x1a
 2bc:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2be:	89 8d       	ldd	r24, Y+25	; 0x19
 2c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0xb0>
 2c6:	9a 8f       	std	Y+26, r25	; 0x1a
 2c8:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ca:	8f 89       	ldd	r24, Y+23	; 0x17
 2cc:	98 8d       	ldd	r25, Y+24	; 0x18
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	98 8f       	std	Y+24, r25	; 0x18
 2d2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d4:	8f 89       	ldd	r24, Y+23	; 0x17
 2d6:	98 8d       	ldd	r25, Y+24	; 0x18
 2d8:	89 2b       	or	r24, r25
 2da:	69 f7       	brne	.-38     	; 0x2b6 <main+0xa4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2dc:	13 c0       	rjmp	.+38     	; 0x304 <main+0xf2>
 2de:	6b 89       	ldd	r22, Y+19	; 0x13
 2e0:	7c 89       	ldd	r23, Y+20	; 0x14
 2e2:	8d 89       	ldd	r24, Y+21	; 0x15
 2e4:	9e 89       	ldd	r25, Y+22	; 0x16
 2e6:	80 d0       	rcall	.+256    	; 0x3e8 <__fixunssfsi>
 2e8:	dc 01       	movw	r26, r24
 2ea:	cb 01       	movw	r24, r22
 2ec:	98 8f       	std	Y+24, r25	; 0x18
 2ee:	8f 8b       	std	Y+23, r24	; 0x17
 2f0:	8f 89       	ldd	r24, Y+23	; 0x17
 2f2:	98 8d       	ldd	r25, Y+24	; 0x18
 2f4:	9c 8f       	std	Y+28, r25	; 0x1c
 2f6:	8b 8f       	std	Y+27, r24	; 0x1b
 2f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <main+0xea>
 300:	9c 8f       	std	Y+28, r25	; 0x1c
    _delay_ms(200);
    SendCommand01();
 302:	8b 8f       	std	Y+27, r24	; 0x1b
 304:	55 df       	rcall	.-342    	; 0x1b0 <SendCommand01>
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	a8 e4       	ldi	r26, 0x48	; 72
 30c:	b3 e4       	ldi	r27, 0x43	; 67
 30e:	8d 83       	std	Y+5, r24	; 0x05
 310:	9e 83       	std	Y+6, r25	; 0x06
 312:	af 83       	std	Y+7, r26	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 314:	b8 87       	std	Y+8, r27	; 0x08
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	4a e7       	ldi	r20, 0x7A	; 122
 31c:	55 e4       	ldi	r21, 0x45	; 69
 31e:	6d 81       	ldd	r22, Y+5	; 0x05
 320:	7e 81       	ldd	r23, Y+6	; 0x06
 322:	8f 81       	ldd	r24, Y+7	; 0x07
 324:	98 85       	ldd	r25, Y+8	; 0x08
 326:	dd d0       	rcall	.+442    	; 0x4e2 <__mulsf3>
 328:	dc 01       	movw	r26, r24
 32a:	cb 01       	movw	r24, r22
 32c:	89 87       	std	Y+9, r24	; 0x09
 32e:	9a 87       	std	Y+10, r25	; 0x0a
 330:	ab 87       	std	Y+11, r26	; 0x0b
	if (__tmp < 1.0)
 332:	bc 87       	std	Y+12, r27	; 0x0c
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	40 e8       	ldi	r20, 0x80	; 128
 33a:	5f e3       	ldi	r21, 0x3F	; 63
 33c:	69 85       	ldd	r22, Y+9	; 0x09
 33e:	7a 85       	ldd	r23, Y+10	; 0x0a
 340:	8b 85       	ldd	r24, Y+11	; 0x0b
 342:	9c 85       	ldd	r25, Y+12	; 0x0c
 344:	4d d0       	rcall	.+154    	; 0x3e0 <__cmpsf2>
 346:	88 23       	and	r24, r24
 348:	2c f4       	brge	.+10     	; 0x354 <main+0x142>
		__ticks = 1;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	9e 87       	std	Y+14, r25	; 0x0e
 350:	8d 87       	std	Y+13, r24	; 0x0d
	else if (__tmp > 65535)
 352:	3b c0       	rjmp	.+118    	; 0x3ca <main+0x1b8>
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	3f ef       	ldi	r19, 0xFF	; 255
 358:	4f e7       	ldi	r20, 0x7F	; 127
 35a:	57 e4       	ldi	r21, 0x47	; 71
 35c:	69 85       	ldd	r22, Y+9	; 0x09
 35e:	7a 85       	ldd	r23, Y+10	; 0x0a
 360:	8b 85       	ldd	r24, Y+11	; 0x0b
 362:	9c 85       	ldd	r25, Y+12	; 0x0c
 364:	ba d0       	rcall	.+372    	; 0x4da <__gesf2>
 366:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 368:	3c f5       	brge	.+78     	; 0x3b8 <main+0x1a6>
 36a:	20 e0       	ldi	r18, 0x00	; 0
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	40 e2       	ldi	r20, 0x20	; 32
 370:	51 e4       	ldi	r21, 0x41	; 65
 372:	6d 81       	ldd	r22, Y+5	; 0x05
 374:	7e 81       	ldd	r23, Y+6	; 0x06
 376:	8f 81       	ldd	r24, Y+7	; 0x07
 378:	98 85       	ldd	r25, Y+8	; 0x08
 37a:	b3 d0       	rcall	.+358    	; 0x4e2 <__mulsf3>
 37c:	dc 01       	movw	r26, r24
 37e:	cb 01       	movw	r24, r22
 380:	bc 01       	movw	r22, r24
 382:	cd 01       	movw	r24, r26
 384:	31 d0       	rcall	.+98     	; 0x3e8 <__fixunssfsi>
 386:	dc 01       	movw	r26, r24
 388:	cb 01       	movw	r24, r22
 38a:	9e 87       	std	Y+14, r25	; 0x0e
 38c:	8d 87       	std	Y+13, r24	; 0x0d
 38e:	0f c0       	rjmp	.+30     	; 0x3ae <main+0x19c>
 390:	80 e9       	ldi	r24, 0x90	; 144
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	98 8b       	std	Y+16, r25	; 0x10
 396:	8f 87       	std	Y+15, r24	; 0x0f
 398:	8f 85       	ldd	r24, Y+15	; 0x0f
 39a:	98 89       	ldd	r25, Y+16	; 0x10
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <main+0x18a>
 3a0:	98 8b       	std	Y+16, r25	; 0x10
 3a2:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3a4:	8d 85       	ldd	r24, Y+13	; 0x0d
 3a6:	9e 85       	ldd	r25, Y+14	; 0x0e
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	9e 87       	std	Y+14, r25	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3ac:	8d 87       	std	Y+13, r24	; 0x0d
 3ae:	8d 85       	ldd	r24, Y+13	; 0x0d
 3b0:	9e 85       	ldd	r25, Y+14	; 0x0e
 3b2:	89 2b       	or	r24, r25
 3b4:	69 f7       	brne	.-38     	; 0x390 <main+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3b6:	13 c0       	rjmp	.+38     	; 0x3de <main+0x1cc>
 3b8:	69 85       	ldd	r22, Y+9	; 0x09
 3ba:	7a 85       	ldd	r23, Y+10	; 0x0a
 3bc:	8b 85       	ldd	r24, Y+11	; 0x0b
 3be:	9c 85       	ldd	r25, Y+12	; 0x0c
 3c0:	13 d0       	rcall	.+38     	; 0x3e8 <__fixunssfsi>
 3c2:	dc 01       	movw	r26, r24
 3c4:	cb 01       	movw	r24, r22
 3c6:	9e 87       	std	Y+14, r25	; 0x0e
 3c8:	8d 87       	std	Y+13, r24	; 0x0d
 3ca:	8d 85       	ldd	r24, Y+13	; 0x0d
 3cc:	9e 85       	ldd	r25, Y+14	; 0x0e
 3ce:	9a 8b       	std	Y+18, r25	; 0x12
 3d0:	89 8b       	std	Y+17, r24	; 0x11
 3d2:	89 89       	ldd	r24, Y+17	; 0x11
 3d4:	9a 89       	ldd	r25, Y+18	; 0x12
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <main+0x1c4>
 3da:	9a 8b       	std	Y+18, r25	; 0x12
 3dc:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(200);
	while(1);
 3de:	ff cf       	rjmp	.-2      	; 0x3de <main+0x1cc>

000003e0 <__cmpsf2>:
 3e0:	2f d0       	rcall	.+94     	; 0x440 <__fp_cmp>
 3e2:	08 f4       	brcc	.+2      	; 0x3e6 <__cmpsf2+0x6>
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	08 95       	ret

000003e8 <__fixunssfsi>:
 3e8:	57 d0       	rcall	.+174    	; 0x498 <__fp_splitA>
 3ea:	88 f0       	brcs	.+34     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3ec:	9f 57       	subi	r25, 0x7F	; 127
 3ee:	90 f0       	brcs	.+36     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f0:	b9 2f       	mov	r27, r25
 3f2:	99 27       	eor	r25, r25
 3f4:	b7 51       	subi	r27, 0x17	; 23
 3f6:	a0 f0       	brcs	.+40     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3f8:	d1 f0       	breq	.+52     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3fa:	66 0f       	add	r22, r22
 3fc:	77 1f       	adc	r23, r23
 3fe:	88 1f       	adc	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	1a f0       	brmi	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 404:	ba 95       	dec	r27
 406:	c9 f7       	brne	.-14     	; 0x3fa <__fixunssfsi+0x12>
 408:	12 c0       	rjmp	.+36     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 40a:	b1 30       	cpi	r27, 0x01	; 1
 40c:	81 f0       	breq	.+32     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 40e:	5e d0       	rcall	.+188    	; 0x4cc <__fp_zero>
 410:	b1 e0       	ldi	r27, 0x01	; 1
 412:	08 95       	ret
 414:	5b c0       	rjmp	.+182    	; 0x4cc <__fp_zero>
 416:	67 2f       	mov	r22, r23
 418:	78 2f       	mov	r23, r24
 41a:	88 27       	eor	r24, r24
 41c:	b8 5f       	subi	r27, 0xF8	; 248
 41e:	39 f0       	breq	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 420:	b9 3f       	cpi	r27, 0xF9	; 249
 422:	cc f3       	brlt	.-14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 424:	86 95       	lsr	r24
 426:	77 95       	ror	r23
 428:	67 95       	ror	r22
 42a:	b3 95       	inc	r27
 42c:	d9 f7       	brne	.-10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42e:	3e f4       	brtc	.+14     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 430:	90 95       	com	r25
 432:	80 95       	com	r24
 434:	70 95       	com	r23
 436:	61 95       	neg	r22
 438:	7f 4f       	sbci	r23, 0xFF	; 255
 43a:	8f 4f       	sbci	r24, 0xFF	; 255
 43c:	9f 4f       	sbci	r25, 0xFF	; 255
 43e:	08 95       	ret

00000440 <__fp_cmp>:
 440:	99 0f       	add	r25, r25
 442:	00 08       	sbc	r0, r0
 444:	55 0f       	add	r21, r21
 446:	aa 0b       	sbc	r26, r26
 448:	e0 e8       	ldi	r30, 0x80	; 128
 44a:	fe ef       	ldi	r31, 0xFE	; 254
 44c:	16 16       	cp	r1, r22
 44e:	17 06       	cpc	r1, r23
 450:	e8 07       	cpc	r30, r24
 452:	f9 07       	cpc	r31, r25
 454:	c0 f0       	brcs	.+48     	; 0x486 <__fp_cmp+0x46>
 456:	12 16       	cp	r1, r18
 458:	13 06       	cpc	r1, r19
 45a:	e4 07       	cpc	r30, r20
 45c:	f5 07       	cpc	r31, r21
 45e:	98 f0       	brcs	.+38     	; 0x486 <__fp_cmp+0x46>
 460:	62 1b       	sub	r22, r18
 462:	73 0b       	sbc	r23, r19
 464:	84 0b       	sbc	r24, r20
 466:	95 0b       	sbc	r25, r21
 468:	39 f4       	brne	.+14     	; 0x478 <__fp_cmp+0x38>
 46a:	0a 26       	eor	r0, r26
 46c:	61 f0       	breq	.+24     	; 0x486 <__fp_cmp+0x46>
 46e:	23 2b       	or	r18, r19
 470:	24 2b       	or	r18, r20
 472:	25 2b       	or	r18, r21
 474:	21 f4       	brne	.+8      	; 0x47e <__fp_cmp+0x3e>
 476:	08 95       	ret
 478:	0a 26       	eor	r0, r26
 47a:	09 f4       	brne	.+2      	; 0x47e <__fp_cmp+0x3e>
 47c:	a1 40       	sbci	r26, 0x01	; 1
 47e:	a6 95       	lsr	r26
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	81 1d       	adc	r24, r1
 484:	81 1d       	adc	r24, r1
 486:	08 95       	ret

00000488 <__fp_split3>:
 488:	57 fd       	sbrc	r21, 7
 48a:	90 58       	subi	r25, 0x80	; 128
 48c:	44 0f       	add	r20, r20
 48e:	55 1f       	adc	r21, r21
 490:	59 f0       	breq	.+22     	; 0x4a8 <__fp_splitA+0x10>
 492:	5f 3f       	cpi	r21, 0xFF	; 255
 494:	71 f0       	breq	.+28     	; 0x4b2 <__fp_splitA+0x1a>
 496:	47 95       	ror	r20

00000498 <__fp_splitA>:
 498:	88 0f       	add	r24, r24
 49a:	97 fb       	bst	r25, 7
 49c:	99 1f       	adc	r25, r25
 49e:	61 f0       	breq	.+24     	; 0x4b8 <__fp_splitA+0x20>
 4a0:	9f 3f       	cpi	r25, 0xFF	; 255
 4a2:	79 f0       	breq	.+30     	; 0x4c2 <__fp_splitA+0x2a>
 4a4:	87 95       	ror	r24
 4a6:	08 95       	ret
 4a8:	12 16       	cp	r1, r18
 4aa:	13 06       	cpc	r1, r19
 4ac:	14 06       	cpc	r1, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	f2 cf       	rjmp	.-28     	; 0x496 <__fp_split3+0xe>
 4b2:	46 95       	lsr	r20
 4b4:	f1 df       	rcall	.-30     	; 0x498 <__fp_splitA>
 4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <__fp_splitA+0x30>
 4b8:	16 16       	cp	r1, r22
 4ba:	17 06       	cpc	r1, r23
 4bc:	18 06       	cpc	r1, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	f1 cf       	rjmp	.-30     	; 0x4a4 <__fp_splitA+0xc>
 4c2:	86 95       	lsr	r24
 4c4:	71 05       	cpc	r23, r1
 4c6:	61 05       	cpc	r22, r1
 4c8:	08 94       	sec
 4ca:	08 95       	ret

000004cc <__fp_zero>:
 4cc:	e8 94       	clt

000004ce <__fp_szero>:
 4ce:	bb 27       	eor	r27, r27
 4d0:	66 27       	eor	r22, r22
 4d2:	77 27       	eor	r23, r23
 4d4:	cb 01       	movw	r24, r22
 4d6:	97 f9       	bld	r25, 7
 4d8:	08 95       	ret

000004da <__gesf2>:
 4da:	b2 df       	rcall	.-156    	; 0x440 <__fp_cmp>
 4dc:	08 f4       	brcc	.+2      	; 0x4e0 <__gesf2+0x6>
 4de:	8f ef       	ldi	r24, 0xFF	; 255
 4e0:	08 95       	ret

000004e2 <__mulsf3>:
 4e2:	0b d0       	rcall	.+22     	; 0x4fa <__mulsf3x>
 4e4:	78 c0       	rjmp	.+240    	; 0x5d6 <__fp_round>
 4e6:	69 d0       	rcall	.+210    	; 0x5ba <__fp_pscA>
 4e8:	28 f0       	brcs	.+10     	; 0x4f4 <__mulsf3+0x12>
 4ea:	6e d0       	rcall	.+220    	; 0x5c8 <__fp_pscB>
 4ec:	18 f0       	brcs	.+6      	; 0x4f4 <__mulsf3+0x12>
 4ee:	95 23       	and	r25, r21
 4f0:	09 f0       	breq	.+2      	; 0x4f4 <__mulsf3+0x12>
 4f2:	5a c0       	rjmp	.+180    	; 0x5a8 <__fp_inf>
 4f4:	5f c0       	rjmp	.+190    	; 0x5b4 <__fp_nan>
 4f6:	11 24       	eor	r1, r1
 4f8:	ea cf       	rjmp	.-44     	; 0x4ce <__fp_szero>

000004fa <__mulsf3x>:
 4fa:	c6 df       	rcall	.-116    	; 0x488 <__fp_split3>
 4fc:	a0 f3       	brcs	.-24     	; 0x4e6 <__mulsf3+0x4>

000004fe <__mulsf3_pse>:
 4fe:	95 9f       	mul	r25, r21
 500:	d1 f3       	breq	.-12     	; 0x4f6 <__mulsf3+0x14>
 502:	95 0f       	add	r25, r21
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	55 1f       	adc	r21, r21
 508:	62 9f       	mul	r22, r18
 50a:	f0 01       	movw	r30, r0
 50c:	72 9f       	mul	r23, r18
 50e:	bb 27       	eor	r27, r27
 510:	f0 0d       	add	r31, r0
 512:	b1 1d       	adc	r27, r1
 514:	63 9f       	mul	r22, r19
 516:	aa 27       	eor	r26, r26
 518:	f0 0d       	add	r31, r0
 51a:	b1 1d       	adc	r27, r1
 51c:	aa 1f       	adc	r26, r26
 51e:	64 9f       	mul	r22, r20
 520:	66 27       	eor	r22, r22
 522:	b0 0d       	add	r27, r0
 524:	a1 1d       	adc	r26, r1
 526:	66 1f       	adc	r22, r22
 528:	82 9f       	mul	r24, r18
 52a:	22 27       	eor	r18, r18
 52c:	b0 0d       	add	r27, r0
 52e:	a1 1d       	adc	r26, r1
 530:	62 1f       	adc	r22, r18
 532:	73 9f       	mul	r23, r19
 534:	b0 0d       	add	r27, r0
 536:	a1 1d       	adc	r26, r1
 538:	62 1f       	adc	r22, r18
 53a:	83 9f       	mul	r24, r19
 53c:	a0 0d       	add	r26, r0
 53e:	61 1d       	adc	r22, r1
 540:	22 1f       	adc	r18, r18
 542:	74 9f       	mul	r23, r20
 544:	33 27       	eor	r19, r19
 546:	a0 0d       	add	r26, r0
 548:	61 1d       	adc	r22, r1
 54a:	23 1f       	adc	r18, r19
 54c:	84 9f       	mul	r24, r20
 54e:	60 0d       	add	r22, r0
 550:	21 1d       	adc	r18, r1
 552:	82 2f       	mov	r24, r18
 554:	76 2f       	mov	r23, r22
 556:	6a 2f       	mov	r22, r26
 558:	11 24       	eor	r1, r1
 55a:	9f 57       	subi	r25, 0x7F	; 127
 55c:	50 40       	sbci	r21, 0x00	; 0
 55e:	8a f0       	brmi	.+34     	; 0x582 <__mulsf3_pse+0x84>
 560:	e1 f0       	breq	.+56     	; 0x59a <__mulsf3_pse+0x9c>
 562:	88 23       	and	r24, r24
 564:	4a f0       	brmi	.+18     	; 0x578 <__mulsf3_pse+0x7a>
 566:	ee 0f       	add	r30, r30
 568:	ff 1f       	adc	r31, r31
 56a:	bb 1f       	adc	r27, r27
 56c:	66 1f       	adc	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	88 1f       	adc	r24, r24
 572:	91 50       	subi	r25, 0x01	; 1
 574:	50 40       	sbci	r21, 0x00	; 0
 576:	a9 f7       	brne	.-22     	; 0x562 <__mulsf3_pse+0x64>
 578:	9e 3f       	cpi	r25, 0xFE	; 254
 57a:	51 05       	cpc	r21, r1
 57c:	70 f0       	brcs	.+28     	; 0x59a <__mulsf3_pse+0x9c>
 57e:	14 c0       	rjmp	.+40     	; 0x5a8 <__fp_inf>
 580:	a6 cf       	rjmp	.-180    	; 0x4ce <__fp_szero>
 582:	5f 3f       	cpi	r21, 0xFF	; 255
 584:	ec f3       	brlt	.-6      	; 0x580 <__mulsf3_pse+0x82>
 586:	98 3e       	cpi	r25, 0xE8	; 232
 588:	dc f3       	brlt	.-10     	; 0x580 <__mulsf3_pse+0x82>
 58a:	86 95       	lsr	r24
 58c:	77 95       	ror	r23
 58e:	67 95       	ror	r22
 590:	b7 95       	ror	r27
 592:	f7 95       	ror	r31
 594:	e7 95       	ror	r30
 596:	9f 5f       	subi	r25, 0xFF	; 255
 598:	c1 f7       	brne	.-16     	; 0x58a <__mulsf3_pse+0x8c>
 59a:	fe 2b       	or	r31, r30
 59c:	88 0f       	add	r24, r24
 59e:	91 1d       	adc	r25, r1
 5a0:	96 95       	lsr	r25
 5a2:	87 95       	ror	r24
 5a4:	97 f9       	bld	r25, 7
 5a6:	08 95       	ret

000005a8 <__fp_inf>:
 5a8:	97 f9       	bld	r25, 7
 5aa:	9f 67       	ori	r25, 0x7F	; 127
 5ac:	80 e8       	ldi	r24, 0x80	; 128
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	08 95       	ret

000005b4 <__fp_nan>:
 5b4:	9f ef       	ldi	r25, 0xFF	; 255
 5b6:	80 ec       	ldi	r24, 0xC0	; 192
 5b8:	08 95       	ret

000005ba <__fp_pscA>:
 5ba:	00 24       	eor	r0, r0
 5bc:	0a 94       	dec	r0
 5be:	16 16       	cp	r1, r22
 5c0:	17 06       	cpc	r1, r23
 5c2:	18 06       	cpc	r1, r24
 5c4:	09 06       	cpc	r0, r25
 5c6:	08 95       	ret

000005c8 <__fp_pscB>:
 5c8:	00 24       	eor	r0, r0
 5ca:	0a 94       	dec	r0
 5cc:	12 16       	cp	r1, r18
 5ce:	13 06       	cpc	r1, r19
 5d0:	14 06       	cpc	r1, r20
 5d2:	05 06       	cpc	r0, r21
 5d4:	08 95       	ret

000005d6 <__fp_round>:
 5d6:	09 2e       	mov	r0, r25
 5d8:	03 94       	inc	r0
 5da:	00 0c       	add	r0, r0
 5dc:	11 f4       	brne	.+4      	; 0x5e2 <__fp_round+0xc>
 5de:	88 23       	and	r24, r24
 5e0:	52 f0       	brmi	.+20     	; 0x5f6 <__fp_round+0x20>
 5e2:	bb 0f       	add	r27, r27
 5e4:	40 f4       	brcc	.+16     	; 0x5f6 <__fp_round+0x20>
 5e6:	bf 2b       	or	r27, r31
 5e8:	11 f4       	brne	.+4      	; 0x5ee <__fp_round+0x18>
 5ea:	60 ff       	sbrs	r22, 0
 5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <__fp_round+0x20>
 5ee:	6f 5f       	subi	r22, 0xFF	; 255
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255
 5f2:	8f 4f       	sbci	r24, 0xFF	; 255
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	08 95       	ret

000005f8 <_exit>:
 5f8:	f8 94       	cli

000005fa <__stop_program>:
 5fa:	ff cf       	rjmp	.-2      	; 0x5fa <__stop_program>
