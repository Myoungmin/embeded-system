
Tetris_Debug.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000748  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  00800100  00800100  00000748  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b8  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c9  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000305  00000000  00000000  00001961  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000457  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00002113  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002189  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	61 c0       	rjmp	.+194    	; 0xc4 <__ctors_end>
   2:	00 00       	nop
   4:	7c c0       	rjmp	.+248    	; 0xfe <__bad_interrupt>
   6:	00 00       	nop
   8:	7a c0       	rjmp	.+244    	; 0xfe <__bad_interrupt>
   a:	00 00       	nop
   c:	78 c0       	rjmp	.+240    	; 0xfe <__bad_interrupt>
   e:	00 00       	nop
  10:	76 c0       	rjmp	.+236    	; 0xfe <__bad_interrupt>
  12:	00 00       	nop
  14:	74 c0       	rjmp	.+232    	; 0xfe <__bad_interrupt>
  16:	00 00       	nop
  18:	72 c0       	rjmp	.+228    	; 0xfe <__bad_interrupt>
  1a:	00 00       	nop
  1c:	70 c0       	rjmp	.+224    	; 0xfe <__bad_interrupt>
  1e:	00 00       	nop
  20:	6e c0       	rjmp	.+220    	; 0xfe <__bad_interrupt>
  22:	00 00       	nop
  24:	6c c0       	rjmp	.+216    	; 0xfe <__bad_interrupt>
  26:	00 00       	nop
  28:	6a c0       	rjmp	.+212    	; 0xfe <__bad_interrupt>
  2a:	00 00       	nop
  2c:	68 c0       	rjmp	.+208    	; 0xfe <__bad_interrupt>
  2e:	00 00       	nop
  30:	66 c0       	rjmp	.+204    	; 0xfe <__bad_interrupt>
  32:	00 00       	nop
  34:	64 c0       	rjmp	.+200    	; 0xfe <__bad_interrupt>
  36:	00 00       	nop
  38:	62 c0       	rjmp	.+196    	; 0xfe <__bad_interrupt>
  3a:	00 00       	nop
  3c:	60 c0       	rjmp	.+192    	; 0xfe <__bad_interrupt>
  3e:	00 00       	nop
  40:	5e c0       	rjmp	.+188    	; 0xfe <__bad_interrupt>
  42:	00 00       	nop
  44:	5c c0       	rjmp	.+184    	; 0xfe <__bad_interrupt>
  46:	00 00       	nop
  48:	5a c0       	rjmp	.+180    	; 0xfe <__bad_interrupt>
  4a:	00 00       	nop
  4c:	58 c0       	rjmp	.+176    	; 0xfe <__bad_interrupt>
  4e:	00 00       	nop
  50:	56 c0       	rjmp	.+172    	; 0xfe <__bad_interrupt>
  52:	00 00       	nop
  54:	54 c0       	rjmp	.+168    	; 0xfe <__bad_interrupt>
  56:	00 00       	nop
  58:	52 c0       	rjmp	.+164    	; 0xfe <__bad_interrupt>
  5a:	00 00       	nop
  5c:	50 c0       	rjmp	.+160    	; 0xfe <__bad_interrupt>
  5e:	00 00       	nop
  60:	4e c0       	rjmp	.+156    	; 0xfe <__bad_interrupt>
  62:	00 00       	nop
  64:	4c c0       	rjmp	.+152    	; 0xfe <__bad_interrupt>
  66:	00 00       	nop
  68:	4a c0       	rjmp	.+148    	; 0xfe <__bad_interrupt>
  6a:	00 00       	nop
  6c:	48 c0       	rjmp	.+144    	; 0xfe <__bad_interrupt>
  6e:	00 00       	nop
  70:	46 c0       	rjmp	.+140    	; 0xfe <__bad_interrupt>
  72:	00 00       	nop
  74:	44 c0       	rjmp	.+136    	; 0xfe <__bad_interrupt>
  76:	00 00       	nop
  78:	42 c0       	rjmp	.+132    	; 0xfe <__bad_interrupt>
  7a:	00 00       	nop
  7c:	40 c0       	rjmp	.+128    	; 0xfe <__bad_interrupt>
  7e:	00 00       	nop
  80:	3e c0       	rjmp	.+124    	; 0xfe <__bad_interrupt>
  82:	00 00       	nop
  84:	3c c0       	rjmp	.+120    	; 0xfe <__bad_interrupt>
  86:	00 00       	nop
  88:	3a c0       	rjmp	.+116    	; 0xfe <__bad_interrupt>
	...

0000008c <__trampolines_end>:
  8c:	00 66       	ori	r16, 0x60	; 96
  8e:	00 66       	ori	r16, 0x60	; 96
  90:	00 66       	ori	r16, 0x60	; 96
  92:	00 66       	ori	r16, 0x60	; 96
  94:	00 f0       	brcs	.+0      	; 0x96 <__trampolines_end+0xa>
  96:	44 44       	sbci	r20, 0x44	; 68
  98:	00 f0       	brcs	.+0      	; 0x9a <__trampolines_end+0xe>
  9a:	44 44       	sbci	r20, 0x44	; 68
  9c:	00 6c       	ori	r16, 0xC0	; 192
  9e:	40 8c       	ldd	r4, Z+24	; 0x18
  a0:	00 6c       	ori	r16, 0xC0	; 192
  a2:	40 8c       	ldd	r4, Z+24	; 0x18
  a4:	00 c6       	rjmp	.+3072   	; 0xca6 <_etext+0x5d2>
  a6:	80 4c       	sbci	r24, 0xC0	; 192
  a8:	00 c6       	rjmp	.+3072   	; 0xcaa <_etext+0x5d6>
  aa:	80 4c       	sbci	r24, 0xC0	; 192
  ac:	00 4e       	sbci	r16, 0xE0	; 224
  ae:	80 8c       	ldd	r8, Z+24	; 0x18
  b0:	00 e4       	ldi	r16, 0x40	; 64
  b2:	40 4c       	sbci	r20, 0xC0	; 192
  b4:	00 2e       	mov	r0, r16
  b6:	40 c4       	rjmp	.+2176   	; 0x938 <_etext+0x264>
  b8:	00 e8       	ldi	r16, 0x80	; 128
  ba:	c0 88       	ldd	r12, Z+16	; 0x10
  bc:	00 8e       	std	Z+24, r0	; 0x18
  be:	c0 44       	sbci	r28, 0x40	; 64
  c0:	00 e2       	ldi	r16, 0x20	; 32
  c2:	80 c8       	rjmp	.-3840   	; 0xfffff1c4 <__eeprom_end+0xff7ef1c4>

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d0 e1       	ldi	r29, 0x10	; 16
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e4 ed       	ldi	r30, 0xD4	; 212
  d8:	f6 e0       	ldi	r31, 0x06	; 6
  da:	00 e0       	ldi	r16, 0x00	; 0
  dc:	0b bf       	out	0x3b, r16	; 59
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x14>
  e0:	07 90       	elpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a0 30       	cpi	r26, 0x00	; 0
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0x10>

000000ea <__do_clear_bss>:
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	a0 e0       	ldi	r26, 0x00	; 0
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	a6 39       	cpi	r26, 0x96	; 150
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	02 d0       	rcall	.+4      	; 0x100 <main>
  fc:	e9 c2       	rjmp	.+1490   	; 0x6d0 <_exit>

000000fe <__bad_interrupt>:
  fe:	80 cf       	rjmp	.-256    	; 0x0 <__vectors>

00000100 <main>:




int main(void)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
	char cmd;


	TCCR0 = 0x07;	//타이머 카운터 0 1024분주로 켜기
 108:	83 e5       	ldi	r24, 0x53	; 83
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	27 e0       	ldi	r18, 0x07	; 7
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18

	TCCR1A |= (0 << COM1A0) | (0 << WGM10);	//CTC, OC1A핀 차단
 112:	8f e4       	ldi	r24, 0x4F	; 79
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	2f e4       	ldi	r18, 0x4F	; 79
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	20 81       	ld	r18, Z
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM12) | (5 << CS10); //CTC, 1024분주
 122:	8e e4       	ldi	r24, 0x4E	; 78
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	2e e4       	ldi	r18, 0x4E	; 78
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	2d 60       	ori	r18, 0x0D	; 13
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
	OCR1A = 0xFFF;
 134:	8a e4       	ldi	r24, 0x4A	; 74
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	3f e0       	ldi	r19, 0x0F	; 15
 13c:	fc 01       	movw	r30, r24
 13e:	31 83       	std	Z+1, r19	; 0x01
 140:	20 83       	st	Z, r18
	TIMSK |= (1 << OCIE1A);	//타이머 카운터 1 출력비교 A 매치 인터럽트 인에이블
 142:	87 e5       	ldi	r24, 0x57	; 87
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	27 e5       	ldi	r18, 0x57	; 87
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f9 01       	movw	r30, r18
 14c:	20 81       	ld	r18, Z
 14e:	20 61       	ori	r18, 0x10	; 16
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18

	DDRD = 0x00;	//인터럽트 4,5,6,7 켜기위해 포트 입력으로
 154:	81 e3       	ldi	r24, 0x31	; 49
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	fc 01       	movw	r30, r24
 15a:	10 82       	st	Z, r1
	DDRE = 0x00;	//인터럽트 3 켜기위해 포트 입력으로
 15c:	82 e2       	ldi	r24, 0x22	; 34
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	10 82       	st	Z, r1

	EICRB = (2 << ISC40) | (2 << ISC50) | (2 << ISC60) | (2 << ISC70);
 164:	8a e5       	ldi	r24, 0x5A	; 90
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	2a ea       	ldi	r18, 0xAA	; 170
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
	
	EICRA = (2 << ISC30);
 16e:	8a e6       	ldi	r24, 0x6A	; 106
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	20 e8       	ldi	r18, 0x80	; 128
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18

	EIMSK = (1 << INT3) | (1 << INT4) | (1 << INT5) | (1 << INT6) | (1 << INT7);
 178:	89 e5       	ldi	r24, 0x59	; 89
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	28 ef       	ldi	r18, 0xF8	; 248
 17e:	fc 01       	movw	r30, r24
 180:	20 83       	st	Z, r18

	sei();
 182:	78 94       	sei


	while(1)
	{
		new_block = 0;	//새로운 블록 플레그 끄기
 184:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		shape = next_block;
 188:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <next_block>
 18c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <shape>
		next_block = TCNT0 % 7;					//다음에 올 테트리미노스 랜덤 출력
 190:	82 e5       	ldi	r24, 0x52	; 82
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	fc 01       	movw	r30, r24
 196:	20 81       	ld	r18, Z
 198:	85 e2       	ldi	r24, 0x25	; 37
 19a:	28 9f       	mul	r18, r24
 19c:	81 2d       	mov	r24, r1
 19e:	11 24       	eor	r1, r1
 1a0:	92 2f       	mov	r25, r18
 1a2:	98 1b       	sub	r25, r24
 1a4:	96 95       	lsr	r25
 1a6:	89 0f       	add	r24, r25
 1a8:	98 2f       	mov	r25, r24
 1aa:	96 95       	lsr	r25
 1ac:	96 95       	lsr	r25
 1ae:	89 2f       	mov	r24, r25
 1b0:	88 0f       	add	r24, r24
 1b2:	88 0f       	add	r24, r24
 1b4:	88 0f       	add	r24, r24
 1b6:	89 1b       	sub	r24, r25
 1b8:	92 2f       	mov	r25, r18
 1ba:	98 1b       	sub	r25, r24
 1bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <next_block>
		pattern = 1;	//기본 회전모향 설정
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pattern>
		cur_line = 0;                 // 테트리미노스 현재 라인 (최상위 라인)
 1c6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <cur_line>
		cur_col = 2;                // 테트리미노스의 현재 칸
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <cur_col>


		if(cur_col == 2)
 1d0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <cur_col>
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	09 f0       	breq	.+2      	; 0x1da <main+0xda>
 1d8:	e1 c0       	rjmp	.+450    	; 0x39c <main+0x29c>
		{
			temp_line[0] = ((unsigned long int)(tetriminos[shape][pattern] & 0xF000) >> (15 - cur_col));
 1da:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <shape>
 1de:	48 2f       	mov	r20, r24
 1e0:	50 e0       	ldi	r21, 0x00	; 0
 1e2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pattern>
 1e6:	88 2f       	mov	r24, r24
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	2c e8       	ldi	r18, 0x8C	; 140
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	44 0f       	add	r20, r20
 1f0:	55 1f       	adc	r21, r21
 1f2:	44 0f       	add	r20, r20
 1f4:	55 1f       	adc	r21, r21
 1f6:	84 0f       	add	r24, r20
 1f8:	95 1f       	adc	r25, r21
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	82 0f       	add	r24, r18
 200:	93 1f       	adc	r25, r19
 202:	fc 01       	movw	r30, r24
 204:	85 91       	lpm	r24, Z+
 206:	95 91       	lpm	r25, Z+
 208:	32 97       	sbiw	r30, 0x02	; 2
 20a:	cc 01       	movw	r24, r24
 20c:	a0 e0       	ldi	r26, 0x00	; 0
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	88 27       	eor	r24, r24
 212:	90 7f       	andi	r25, 0xF0	; 240
 214:	aa 27       	eor	r26, r26
 216:	bb 27       	eor	r27, r27
 218:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <cur_col>
 21c:	22 2f       	mov	r18, r18
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	4f e0       	ldi	r20, 0x0F	; 15
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	ba 01       	movw	r22, r20
 226:	62 1b       	sub	r22, r18
 228:	73 0b       	sbc	r23, r19
 22a:	9b 01       	movw	r18, r22
 22c:	04 c0       	rjmp	.+8      	; 0x236 <main+0x136>
 22e:	b6 95       	lsr	r27
 230:	a7 95       	ror	r26
 232:	97 95       	ror	r25
 234:	87 95       	ror	r24
 236:	2a 95       	dec	r18
 238:	d2 f7       	brpl	.-12     	; 0x22e <main+0x12e>
 23a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_line>
 23e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <temp_line+0x1>
 242:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <temp_line+0x2>
 246:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <temp_line+0x3>
			temp_line[1] = ((unsigned long int)(tetriminos[shape][pattern] & 0x0F00) >> (11 - cur_col));
 24a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <shape>
 24e:	48 2f       	mov	r20, r24
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pattern>
 256:	88 2f       	mov	r24, r24
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	2c e8       	ldi	r18, 0x8C	; 140
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	44 0f       	add	r20, r20
 260:	55 1f       	adc	r21, r21
 262:	44 0f       	add	r20, r20
 264:	55 1f       	adc	r21, r21
 266:	84 0f       	add	r24, r20
 268:	95 1f       	adc	r25, r21
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	82 0f       	add	r24, r18
 270:	93 1f       	adc	r25, r19
 272:	fc 01       	movw	r30, r24
 274:	85 91       	lpm	r24, Z+
 276:	95 91       	lpm	r25, Z+
 278:	32 97       	sbiw	r30, 0x02	; 2
 27a:	cc 01       	movw	r24, r24
 27c:	a0 e0       	ldi	r26, 0x00	; 0
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	88 27       	eor	r24, r24
 282:	9f 70       	andi	r25, 0x0F	; 15
 284:	aa 27       	eor	r26, r26
 286:	bb 27       	eor	r27, r27
 288:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <cur_col>
 28c:	22 2f       	mov	r18, r18
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	4b e0       	ldi	r20, 0x0B	; 11
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	ba 01       	movw	r22, r20
 296:	62 1b       	sub	r22, r18
 298:	73 0b       	sbc	r23, r19
 29a:	9b 01       	movw	r18, r22
 29c:	04 c0       	rjmp	.+8      	; 0x2a6 <main+0x1a6>
 29e:	b6 95       	lsr	r27
 2a0:	a7 95       	ror	r26
 2a2:	97 95       	ror	r25
 2a4:	87 95       	ror	r24
 2a6:	2a 95       	dec	r18
 2a8:	d2 f7       	brpl	.-12     	; 0x29e <main+0x19e>
 2aa:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temp_line+0x4>
 2ae:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <temp_line+0x5>
 2b2:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <temp_line+0x6>
 2b6:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <temp_line+0x7>
			temp_line[2] = ((unsigned long int)(tetriminos[shape][pattern] & 0x00F0) >> (7 - cur_col));
 2ba:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <shape>
 2be:	48 2f       	mov	r20, r24
 2c0:	50 e0       	ldi	r21, 0x00	; 0
 2c2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pattern>
 2c6:	88 2f       	mov	r24, r24
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	2c e8       	ldi	r18, 0x8C	; 140
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	44 0f       	add	r20, r20
 2d0:	55 1f       	adc	r21, r21
 2d2:	44 0f       	add	r20, r20
 2d4:	55 1f       	adc	r21, r21
 2d6:	84 0f       	add	r24, r20
 2d8:	95 1f       	adc	r25, r21
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	82 0f       	add	r24, r18
 2e0:	93 1f       	adc	r25, r19
 2e2:	fc 01       	movw	r30, r24
 2e4:	85 91       	lpm	r24, Z+
 2e6:	95 91       	lpm	r25, Z+
 2e8:	32 97       	sbiw	r30, 0x02	; 2
 2ea:	cc 01       	movw	r24, r24
 2ec:	a0 e0       	ldi	r26, 0x00	; 0
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	80 7f       	andi	r24, 0xF0	; 240
 2f2:	99 27       	eor	r25, r25
 2f4:	aa 27       	eor	r26, r26
 2f6:	bb 27       	eor	r27, r27
 2f8:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <cur_col>
 2fc:	22 2f       	mov	r18, r18
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	47 e0       	ldi	r20, 0x07	; 7
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	ba 01       	movw	r22, r20
 306:	62 1b       	sub	r22, r18
 308:	73 0b       	sbc	r23, r19
 30a:	9b 01       	movw	r18, r22
 30c:	04 c0       	rjmp	.+8      	; 0x316 <main+0x216>
 30e:	b6 95       	lsr	r27
 310:	a7 95       	ror	r26
 312:	97 95       	ror	r25
 314:	87 95       	ror	r24
 316:	2a 95       	dec	r18
 318:	d2 f7       	brpl	.-12     	; 0x30e <main+0x20e>
 31a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <temp_line+0x8>
 31e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <temp_line+0x9>
 322:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <temp_line+0xa>
 326:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <temp_line+0xb>
			temp_line[3] = ((unsigned long int)(tetriminos[shape][pattern] & 0x000F) >> (3 - cur_col));
 32a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <shape>
 32e:	48 2f       	mov	r20, r24
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pattern>
 336:	88 2f       	mov	r24, r24
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	2c e8       	ldi	r18, 0x8C	; 140
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	44 0f       	add	r20, r20
 340:	55 1f       	adc	r21, r21
 342:	44 0f       	add	r20, r20
 344:	55 1f       	adc	r21, r21
 346:	84 0f       	add	r24, r20
 348:	95 1f       	adc	r25, r21
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	82 0f       	add	r24, r18
 350:	93 1f       	adc	r25, r19
 352:	fc 01       	movw	r30, r24
 354:	85 91       	lpm	r24, Z+
 356:	95 91       	lpm	r25, Z+
 358:	32 97       	sbiw	r30, 0x02	; 2
 35a:	cc 01       	movw	r24, r24
 35c:	a0 e0       	ldi	r26, 0x00	; 0
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	8f 70       	andi	r24, 0x0F	; 15
 362:	99 27       	eor	r25, r25
 364:	aa 27       	eor	r26, r26
 366:	bb 27       	eor	r27, r27
 368:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <cur_col>
 36c:	22 2f       	mov	r18, r18
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	43 e0       	ldi	r20, 0x03	; 3
 372:	50 e0       	ldi	r21, 0x00	; 0
 374:	ba 01       	movw	r22, r20
 376:	62 1b       	sub	r22, r18
 378:	73 0b       	sbc	r23, r19
 37a:	9b 01       	movw	r18, r22
 37c:	04 c0       	rjmp	.+8      	; 0x386 <main+0x286>
 37e:	b6 95       	lsr	r27
 380:	a7 95       	ror	r26
 382:	97 95       	ror	r25
 384:	87 95       	ror	r24
 386:	2a 95       	dec	r18
 388:	d2 f7       	brpl	.-12     	; 0x37e <main+0x27e>
 38a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <temp_line+0xc>
 38e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <temp_line+0xd>
 392:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <temp_line+0xe>
 396:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <temp_line+0xf>
 39a:	e1 c0       	rjmp	.+450    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
		}
		else if(cur_col >= 3)
 39c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <cur_col>
 3a0:	83 30       	cpi	r24, 0x03	; 3
 3a2:	08 f4       	brcc	.+2      	; 0x3a6 <main+0x2a6>
 3a4:	dc c0       	rjmp	.+440    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
		{
			temp_line[0] = ((unsigned long int)(tetriminos[shape][pattern] & 0xF000) >> 12) << (cur_col - 3);	//이 과정이 필요 없고 뒤에서 한번에 충돌감지 이후 넣어줘도 상관없어 보이지만 충돌 여부 판별하는 함수가 temp_line와 메인보드가 겹치는지 파악하기때문에 temp_line에 변화된 사항을 반영해야 한다.
 3a6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <shape>
 3aa:	48 2f       	mov	r20, r24
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pattern>
 3b2:	88 2f       	mov	r24, r24
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	2c e8       	ldi	r18, 0x8C	; 140
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	44 0f       	add	r20, r20
 3bc:	55 1f       	adc	r21, r21
 3be:	44 0f       	add	r20, r20
 3c0:	55 1f       	adc	r21, r21
 3c2:	84 0f       	add	r24, r20
 3c4:	95 1f       	adc	r25, r21
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	82 0f       	add	r24, r18
 3cc:	93 1f       	adc	r25, r19
 3ce:	fc 01       	movw	r30, r24
 3d0:	85 91       	lpm	r24, Z+
 3d2:	95 91       	lpm	r25, Z+
 3d4:	32 97       	sbiw	r30, 0x02	; 2
 3d6:	89 2f       	mov	r24, r25
 3d8:	99 27       	eor	r25, r25
 3da:	82 95       	swap	r24
 3dc:	8f 70       	andi	r24, 0x0F	; 15
 3de:	cc 01       	movw	r24, r24
 3e0:	a0 e0       	ldi	r26, 0x00	; 0
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <cur_col>
 3e8:	22 2f       	mov	r18, r18
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	23 50       	subi	r18, 0x03	; 3
 3ee:	31 09       	sbc	r19, r1
 3f0:	04 c0       	rjmp	.+8      	; 0x3fa <main+0x2fa>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	aa 1f       	adc	r26, r26
 3f8:	bb 1f       	adc	r27, r27
 3fa:	2a 95       	dec	r18
 3fc:	d2 f7       	brpl	.-12     	; 0x3f2 <main+0x2f2>
 3fe:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_line>
 402:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <temp_line+0x1>
 406:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <temp_line+0x2>
 40a:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <temp_line+0x3>
			temp_line[1] = ((unsigned long int)(tetriminos[shape][pattern] & 0x0F00) >> 8) << (cur_col - 3);
 40e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <shape>
 412:	48 2f       	mov	r20, r24
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pattern>
 41a:	88 2f       	mov	r24, r24
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	2c e8       	ldi	r18, 0x8C	; 140
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	44 0f       	add	r20, r20
 424:	55 1f       	adc	r21, r21
 426:	44 0f       	add	r20, r20
 428:	55 1f       	adc	r21, r21
 42a:	84 0f       	add	r24, r20
 42c:	95 1f       	adc	r25, r21
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	82 0f       	add	r24, r18
 434:	93 1f       	adc	r25, r19
 436:	fc 01       	movw	r30, r24
 438:	85 91       	lpm	r24, Z+
 43a:	95 91       	lpm	r25, Z+
 43c:	32 97       	sbiw	r30, 0x02	; 2
 43e:	cc 01       	movw	r24, r24
 440:	a0 e0       	ldi	r26, 0x00	; 0
 442:	b0 e0       	ldi	r27, 0x00	; 0
 444:	88 27       	eor	r24, r24
 446:	9f 70       	andi	r25, 0x0F	; 15
 448:	aa 27       	eor	r26, r26
 44a:	bb 27       	eor	r27, r27
 44c:	89 2f       	mov	r24, r25
 44e:	9a 2f       	mov	r25, r26
 450:	ab 2f       	mov	r26, r27
 452:	bb 27       	eor	r27, r27
 454:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <cur_col>
 458:	22 2f       	mov	r18, r18
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	23 50       	subi	r18, 0x03	; 3
 45e:	31 09       	sbc	r19, r1
 460:	04 c0       	rjmp	.+8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	aa 1f       	adc	r26, r26
 468:	bb 1f       	adc	r27, r27
 46a:	2a 95       	dec	r18
 46c:	d2 f7       	brpl	.-12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 46e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temp_line+0x4>
 472:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <temp_line+0x5>
 476:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <temp_line+0x6>
 47a:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <temp_line+0x7>
			temp_line[2] = ((unsigned long int)(tetriminos[shape][pattern] & 0x00F0) >> 4) << (cur_col - 3);
 47e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <shape>
 482:	48 2f       	mov	r20, r24
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pattern>
 48a:	88 2f       	mov	r24, r24
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	2c e8       	ldi	r18, 0x8C	; 140
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	44 0f       	add	r20, r20
 494:	55 1f       	adc	r21, r21
 496:	44 0f       	add	r20, r20
 498:	55 1f       	adc	r21, r21
 49a:	84 0f       	add	r24, r20
 49c:	95 1f       	adc	r25, r21
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	82 0f       	add	r24, r18
 4a4:	93 1f       	adc	r25, r19
 4a6:	fc 01       	movw	r30, r24
 4a8:	85 91       	lpm	r24, Z+
 4aa:	95 91       	lpm	r25, Z+
 4ac:	32 97       	sbiw	r30, 0x02	; 2
 4ae:	cc 01       	movw	r24, r24
 4b0:	a0 e0       	ldi	r26, 0x00	; 0
 4b2:	b0 e0       	ldi	r27, 0x00	; 0
 4b4:	80 7f       	andi	r24, 0xF0	; 240
 4b6:	99 27       	eor	r25, r25
 4b8:	aa 27       	eor	r26, r26
 4ba:	bb 27       	eor	r27, r27
 4bc:	68 94       	set
 4be:	13 f8       	bld	r1, 3
 4c0:	b6 95       	lsr	r27
 4c2:	a7 95       	ror	r26
 4c4:	97 95       	ror	r25
 4c6:	87 95       	ror	r24
 4c8:	16 94       	lsr	r1
 4ca:	d1 f7       	brne	.-12     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4cc:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <cur_col>
 4d0:	22 2f       	mov	r18, r18
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	23 50       	subi	r18, 0x03	; 3
 4d6:	31 09       	sbc	r19, r1
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	aa 1f       	adc	r26, r26
 4e0:	bb 1f       	adc	r27, r27
 4e2:	2a 95       	dec	r18
 4e4:	d2 f7       	brpl	.-12     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4e6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <temp_line+0x8>
 4ea:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <temp_line+0x9>
 4ee:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <temp_line+0xa>
 4f2:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <temp_line+0xb>
			temp_line[3] = ((unsigned long int)(tetriminos[shape][pattern] & 0x000F)) << (cur_col - 3);
 4f6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <shape>
 4fa:	48 2f       	mov	r20, r24
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pattern>
 502:	88 2f       	mov	r24, r24
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	2c e8       	ldi	r18, 0x8C	; 140
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	44 0f       	add	r20, r20
 50c:	55 1f       	adc	r21, r21
 50e:	44 0f       	add	r20, r20
 510:	55 1f       	adc	r21, r21
 512:	84 0f       	add	r24, r20
 514:	95 1f       	adc	r25, r21
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	82 0f       	add	r24, r18
 51c:	93 1f       	adc	r25, r19
 51e:	fc 01       	movw	r30, r24
 520:	85 91       	lpm	r24, Z+
 522:	95 91       	lpm	r25, Z+
 524:	32 97       	sbiw	r30, 0x02	; 2
 526:	cc 01       	movw	r24, r24
 528:	a0 e0       	ldi	r26, 0x00	; 0
 52a:	b0 e0       	ldi	r27, 0x00	; 0
 52c:	8f 70       	andi	r24, 0x0F	; 15
 52e:	99 27       	eor	r25, r25
 530:	aa 27       	eor	r26, r26
 532:	bb 27       	eor	r27, r27
 534:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <cur_col>
 538:	22 2f       	mov	r18, r18
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	23 50       	subi	r18, 0x03	; 3
 53e:	31 09       	sbc	r19, r1
 540:	04 c0       	rjmp	.+8      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	aa 1f       	adc	r26, r26
 548:	bb 1f       	adc	r27, r27
 54a:	2a 95       	dec	r18
 54c:	d2 f7       	brpl	.-12     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 54e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <temp_line+0xc>
 552:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <temp_line+0xd>
 556:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <temp_line+0xe>
 55a:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <temp_line+0xf>
		}

		game_board[cur_line] |= temp_line[0];	//현재라인 아래로 이동 후 변화하는 보드에 반영
 55e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cur_line>
 562:	68 2f       	mov	r22, r24
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cur_line>
 56a:	88 2f       	mov	r24, r24
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	8a 5e       	subi	r24, 0xEA	; 234
 578:	9e 4f       	sbci	r25, 0xFE	; 254
 57a:	fc 01       	movw	r30, r24
 57c:	20 81       	ld	r18, Z
 57e:	31 81       	ldd	r19, Z+1	; 0x01
 580:	42 81       	ldd	r20, Z+2	; 0x02
 582:	53 81       	ldd	r21, Z+3	; 0x03
 584:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <temp_line>
 588:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <temp_line+0x1>
 58c:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <temp_line+0x2>
 590:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <temp_line+0x3>
 594:	82 2b       	or	r24, r18
 596:	93 2b       	or	r25, r19
 598:	a4 2b       	or	r26, r20
 59a:	b5 2b       	or	r27, r21
 59c:	9b 01       	movw	r18, r22
 59e:	22 0f       	add	r18, r18
 5a0:	33 1f       	adc	r19, r19
 5a2:	22 0f       	add	r18, r18
 5a4:	33 1f       	adc	r19, r19
 5a6:	2a 5e       	subi	r18, 0xEA	; 234
 5a8:	3e 4f       	sbci	r19, 0xFE	; 254
 5aa:	f9 01       	movw	r30, r18
 5ac:	80 83       	st	Z, r24
 5ae:	91 83       	std	Z+1, r25	; 0x01
 5b0:	a2 83       	std	Z+2, r26	; 0x02
 5b2:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 1] |= temp_line[1];
 5b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cur_line>
 5b8:	88 2f       	mov	r24, r24
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	bc 01       	movw	r22, r24
 5be:	6f 5f       	subi	r22, 0xFF	; 255
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cur_line>
 5c6:	88 2f       	mov	r24, r24
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	01 96       	adiw	r24, 0x01	; 1
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	8a 5e       	subi	r24, 0xEA	; 234
 5d6:	9e 4f       	sbci	r25, 0xFE	; 254
 5d8:	fc 01       	movw	r30, r24
 5da:	20 81       	ld	r18, Z
 5dc:	31 81       	ldd	r19, Z+1	; 0x01
 5de:	42 81       	ldd	r20, Z+2	; 0x02
 5e0:	53 81       	ldd	r21, Z+3	; 0x03
 5e2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <temp_line+0x4>
 5e6:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <temp_line+0x5>
 5ea:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <temp_line+0x6>
 5ee:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <temp_line+0x7>
 5f2:	82 2b       	or	r24, r18
 5f4:	93 2b       	or	r25, r19
 5f6:	a4 2b       	or	r26, r20
 5f8:	b5 2b       	or	r27, r21
 5fa:	9b 01       	movw	r18, r22
 5fc:	22 0f       	add	r18, r18
 5fe:	33 1f       	adc	r19, r19
 600:	22 0f       	add	r18, r18
 602:	33 1f       	adc	r19, r19
 604:	2a 5e       	subi	r18, 0xEA	; 234
 606:	3e 4f       	sbci	r19, 0xFE	; 254
 608:	f9 01       	movw	r30, r18
 60a:	80 83       	st	Z, r24
 60c:	91 83       	std	Z+1, r25	; 0x01
 60e:	a2 83       	std	Z+2, r26	; 0x02
 610:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 2] |= temp_line[2];
 612:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cur_line>
 616:	88 2f       	mov	r24, r24
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	bc 01       	movw	r22, r24
 61c:	6e 5f       	subi	r22, 0xFE	; 254
 61e:	7f 4f       	sbci	r23, 0xFF	; 255
 620:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cur_line>
 624:	88 2f       	mov	r24, r24
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 96       	adiw	r24, 0x02	; 2
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	8a 5e       	subi	r24, 0xEA	; 234
 634:	9e 4f       	sbci	r25, 0xFE	; 254
 636:	fc 01       	movw	r30, r24
 638:	20 81       	ld	r18, Z
 63a:	31 81       	ldd	r19, Z+1	; 0x01
 63c:	42 81       	ldd	r20, Z+2	; 0x02
 63e:	53 81       	ldd	r21, Z+3	; 0x03
 640:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <temp_line+0x8>
 644:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <temp_line+0x9>
 648:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <temp_line+0xa>
 64c:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <temp_line+0xb>
 650:	82 2b       	or	r24, r18
 652:	93 2b       	or	r25, r19
 654:	a4 2b       	or	r26, r20
 656:	b5 2b       	or	r27, r21
 658:	9b 01       	movw	r18, r22
 65a:	22 0f       	add	r18, r18
 65c:	33 1f       	adc	r19, r19
 65e:	22 0f       	add	r18, r18
 660:	33 1f       	adc	r19, r19
 662:	2a 5e       	subi	r18, 0xEA	; 234
 664:	3e 4f       	sbci	r19, 0xFE	; 254
 666:	f9 01       	movw	r30, r18
 668:	80 83       	st	Z, r24
 66a:	91 83       	std	Z+1, r25	; 0x01
 66c:	a2 83       	std	Z+2, r26	; 0x02
 66e:	b3 83       	std	Z+3, r27	; 0x03
		game_board[cur_line + 3] |= temp_line[3];
 670:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cur_line>
 674:	88 2f       	mov	r24, r24
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	bc 01       	movw	r22, r24
 67a:	6d 5f       	subi	r22, 0xFD	; 253
 67c:	7f 4f       	sbci	r23, 0xFF	; 255
 67e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cur_line>
 682:	88 2f       	mov	r24, r24
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	03 96       	adiw	r24, 0x03	; 3
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	8a 5e       	subi	r24, 0xEA	; 234
 692:	9e 4f       	sbci	r25, 0xFE	; 254
 694:	fc 01       	movw	r30, r24
 696:	20 81       	ld	r18, Z
 698:	31 81       	ldd	r19, Z+1	; 0x01
 69a:	42 81       	ldd	r20, Z+2	; 0x02
 69c:	53 81       	ldd	r21, Z+3	; 0x03
 69e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <temp_line+0xc>
 6a2:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <temp_line+0xd>
 6a6:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <temp_line+0xe>
 6aa:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <temp_line+0xf>
 6ae:	82 2b       	or	r24, r18
 6b0:	93 2b       	or	r25, r19
 6b2:	a4 2b       	or	r26, r20
 6b4:	b5 2b       	or	r27, r21
 6b6:	9b 01       	movw	r18, r22
 6b8:	22 0f       	add	r18, r18
 6ba:	33 1f       	adc	r19, r19
 6bc:	22 0f       	add	r18, r18
 6be:	33 1f       	adc	r19, r19
 6c0:	2a 5e       	subi	r18, 0xEA	; 234
 6c2:	3e 4f       	sbci	r19, 0xFE	; 254
 6c4:	f9 01       	movw	r30, r18
 6c6:	80 83       	st	Z, r24
 6c8:	91 83       	std	Z+1, r25	; 0x01
 6ca:	a2 83       	std	Z+2, r26	; 0x02
 6cc:	b3 83       	std	Z+3, r27	; 0x03

	}
 6ce:	5a cd       	rjmp	.-1356   	; 0x184 <main+0x84>

000006d0 <_exit>:
 6d0:	f8 94       	cli

000006d2 <__stop_program>:
 6d2:	ff cf       	rjmp	.-2      	; 0x6d2 <__stop_program>
