
Snake_game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005b8  00800100  00002050  000020e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002050  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  008006b8  008006b8  0000269c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000269c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017eb  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c36  00000000  00000000  00004103  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013b0  00000000  00000000  00004d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f0  00000000  00000000  000060ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d1  00000000  00000000  000067dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e44  00000000  00000000  00006fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00007df1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	35 c1       	rjmp	.+618    	; 0x26c <__ctors_end>
       2:	00 00       	nop
       4:	52 c1       	rjmp	.+676    	; 0x2aa <__bad_interrupt>
       6:	00 00       	nop
       8:	50 c1       	rjmp	.+672    	; 0x2aa <__bad_interrupt>
       a:	00 00       	nop
       c:	4e c1       	rjmp	.+668    	; 0x2aa <__bad_interrupt>
       e:	00 00       	nop
      10:	4c c1       	rjmp	.+664    	; 0x2aa <__bad_interrupt>
      12:	00 00       	nop
      14:	b3 c5       	rjmp	.+2918   	; 0xb7c <__vector_5>
      16:	00 00       	nop
      18:	f7 c4       	rjmp	.+2542   	; 0xa08 <__vector_6>
      1a:	00 00       	nop
      1c:	33 c5       	rjmp	.+2662   	; 0xa84 <__vector_7>
      1e:	00 00       	nop
      20:	6f c5       	rjmp	.+2782   	; 0xb00 <__vector_8>
      22:	00 00       	nop
      24:	42 c1       	rjmp	.+644    	; 0x2aa <__bad_interrupt>
      26:	00 00       	nop
      28:	40 c1       	rjmp	.+640    	; 0x2aa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3e c1       	rjmp	.+636    	; 0x2aa <__bad_interrupt>
      2e:	00 00       	nop
      30:	3c c1       	rjmp	.+632    	; 0x2aa <__bad_interrupt>
      32:	00 00       	nop
      34:	3a c1       	rjmp	.+628    	; 0x2aa <__bad_interrupt>
      36:	00 00       	nop
      38:	38 c1       	rjmp	.+624    	; 0x2aa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	36 c1       	rjmp	.+620    	; 0x2aa <__bad_interrupt>
      3e:	00 00       	nop
      40:	34 c1       	rjmp	.+616    	; 0x2aa <__bad_interrupt>
      42:	00 00       	nop
      44:	32 c1       	rjmp	.+612    	; 0x2aa <__bad_interrupt>
      46:	00 00       	nop
      48:	30 c1       	rjmp	.+608    	; 0x2aa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2e c1       	rjmp	.+604    	; 0x2aa <__bad_interrupt>
      4e:	00 00       	nop
      50:	2c c1       	rjmp	.+600    	; 0x2aa <__bad_interrupt>
      52:	00 00       	nop
      54:	2a c1       	rjmp	.+596    	; 0x2aa <__bad_interrupt>
      56:	00 00       	nop
      58:	28 c1       	rjmp	.+592    	; 0x2aa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	26 c1       	rjmp	.+588    	; 0x2aa <__bad_interrupt>
      5e:	00 00       	nop
      60:	24 c1       	rjmp	.+584    	; 0x2aa <__bad_interrupt>
      62:	00 00       	nop
      64:	22 c1       	rjmp	.+580    	; 0x2aa <__bad_interrupt>
      66:	00 00       	nop
      68:	20 c1       	rjmp	.+576    	; 0x2aa <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1e c1       	rjmp	.+572    	; 0x2aa <__bad_interrupt>
      6e:	00 00       	nop
      70:	1c c1       	rjmp	.+568    	; 0x2aa <__bad_interrupt>
      72:	00 00       	nop
      74:	1a c1       	rjmp	.+564    	; 0x2aa <__bad_interrupt>
      76:	00 00       	nop
      78:	18 c1       	rjmp	.+560    	; 0x2aa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	16 c1       	rjmp	.+556    	; 0x2aa <__bad_interrupt>
      7e:	00 00       	nop
      80:	14 c1       	rjmp	.+552    	; 0x2aa <__bad_interrupt>
      82:	00 00       	nop
      84:	12 c1       	rjmp	.+548    	; 0x2aa <__bad_interrupt>
      86:	00 00       	nop
      88:	10 c1       	rjmp	.+544    	; 0x2aa <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	00 00       	nop
      92:	00 5f       	subi	r16, 0xF0	; 240
      94:	00 00       	nop
      96:	00 07       	cpc	r16, r16
      98:	00 07       	cpc	r16, r16
      9a:	00 14       	cp	r0, r0
      9c:	7f 14       	cp	r7, r15
      9e:	7f 14       	cp	r7, r15
      a0:	24 2a       	or	r2, r20
      a2:	7f 2a       	or	r7, r31
      a4:	12 23       	and	r17, r18
      a6:	13 08       	sbc	r1, r3
      a8:	64 62       	ori	r22, 0x24	; 36
      aa:	36 49       	sbci	r19, 0x96	; 150
      ac:	55 22       	and	r5, r21
      ae:	50 00       	.word	0x0050	; ????
      b0:	05 03       	mulsu	r16, r21
      b2:	00 00       	nop
      b4:	00 1c       	adc	r0, r0
      b6:	22 41       	sbci	r18, 0x12	; 18
      b8:	00 00       	nop
      ba:	41 22       	and	r4, r17
      bc:	1c 00       	.word	0x001c	; ????
      be:	14 08       	sbc	r1, r4
      c0:	3e 08       	sbc	r3, r14
      c2:	14 08       	sbc	r1, r4
      c4:	08 3e       	cpi	r16, 0xE8	; 232
      c6:	08 08       	sbc	r0, r8
      c8:	00 50       	subi	r16, 0x00	; 0
      ca:	30 00       	.word	0x0030	; ????
      cc:	00 08       	sbc	r0, r0
      ce:	08 08       	sbc	r0, r8
      d0:	08 08       	sbc	r0, r8
      d2:	00 60       	ori	r16, 0x00	; 0
      d4:	60 00       	.word	0x0060	; ????
      d6:	00 20       	and	r0, r0
      d8:	10 08       	sbc	r1, r0
      da:	04 02       	muls	r16, r20
      dc:	3e 51       	subi	r19, 0x1E	; 30
      de:	49 45       	sbci	r20, 0x59	; 89
      e0:	3e 00       	.word	0x003e	; ????
      e2:	42 7f       	andi	r20, 0xF2	; 242
      e4:	40 00       	.word	0x0040	; ????
      e6:	42 61       	ori	r20, 0x12	; 18
      e8:	51 49       	sbci	r21, 0x91	; 145
      ea:	46 21       	and	r20, r6
      ec:	41 45       	sbci	r20, 0x51	; 81
      ee:	4b 31       	cpi	r20, 0x1B	; 27
      f0:	18 14       	cp	r1, r8
      f2:	12 7f       	andi	r17, 0xF2	; 242
      f4:	10 27       	eor	r17, r16
      f6:	45 45       	sbci	r20, 0x55	; 85
      f8:	45 39       	cpi	r20, 0x95	; 149
      fa:	3c 4a       	sbci	r19, 0xAC	; 172
      fc:	49 49       	sbci	r20, 0x99	; 153
      fe:	30 01       	movw	r6, r0
     100:	71 09       	sbc	r23, r1
     102:	05 03       	mulsu	r16, r21
     104:	36 49       	sbci	r19, 0x96	; 150
     106:	49 49       	sbci	r20, 0x99	; 153
     108:	36 06       	cpc	r3, r22
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	29 1e       	adc	r2, r25
     10e:	00 36       	cpi	r16, 0x60	; 96
     110:	36 00       	.word	0x0036	; ????
     112:	00 00       	nop
     114:	56 36       	cpi	r21, 0x66	; 102
     116:	00 00       	nop
     118:	08 14       	cp	r0, r8
     11a:	22 41       	sbci	r18, 0x12	; 18
     11c:	00 14       	cp	r0, r0
     11e:	14 14       	cp	r1, r4
     120:	14 14       	cp	r1, r4
     122:	00 41       	sbci	r16, 0x10	; 16
     124:	22 14       	cp	r2, r2
     126:	08 02       	muls	r16, r24
     128:	01 51       	subi	r16, 0x11	; 17
     12a:	09 06       	cpc	r0, r25
     12c:	32 49       	sbci	r19, 0x92	; 146
     12e:	79 41       	sbci	r23, 0x19	; 25
     130:	3e 7e       	andi	r19, 0xEE	; 238
     132:	11 11       	cpse	r17, r1
     134:	11 7e       	andi	r17, 0xE1	; 225
     136:	7f 49       	sbci	r23, 0x9F	; 159
     138:	49 49       	sbci	r20, 0x99	; 153
     13a:	36 3e       	cpi	r19, 0xE6	; 230
     13c:	41 41       	sbci	r20, 0x11	; 17
     13e:	41 22       	and	r4, r17
     140:	7f 41       	sbci	r23, 0x1F	; 31
     142:	41 22       	and	r4, r17
     144:	1c 7f       	andi	r17, 0xFC	; 252
     146:	49 49       	sbci	r20, 0x99	; 153
     148:	49 41       	sbci	r20, 0x19	; 25
     14a:	7f 09       	sbc	r23, r15
     14c:	09 09       	sbc	r16, r9
     14e:	01 3e       	cpi	r16, 0xE1	; 225
     150:	41 49       	sbci	r20, 0x91	; 145
     152:	49 7a       	andi	r20, 0xA9	; 169
     154:	7f 08       	sbc	r7, r15
     156:	08 08       	sbc	r0, r8
     158:	7f 00       	.word	0x007f	; ????
     15a:	41 7f       	andi	r20, 0xF1	; 241
     15c:	41 00       	.word	0x0041	; ????
     15e:	20 40       	sbci	r18, 0x00	; 0
     160:	41 3f       	cpi	r20, 0xF1	; 241
     162:	01 7f       	andi	r16, 0xF1	; 241
     164:	08 14       	cp	r0, r8
     166:	22 41       	sbci	r18, 0x12	; 18
     168:	7f 40       	sbci	r23, 0x0F	; 15
     16a:	40 40       	sbci	r20, 0x00	; 0
     16c:	40 7f       	andi	r20, 0xF0	; 240
     16e:	02 0c       	add	r0, r2
     170:	02 7f       	andi	r16, 0xF2	; 242
     172:	7f 04       	cpc	r7, r15
     174:	08 10       	cpse	r0, r8
     176:	7f 3e       	cpi	r23, 0xEF	; 239
     178:	41 41       	sbci	r20, 0x11	; 17
     17a:	41 3e       	cpi	r20, 0xE1	; 225
     17c:	7f 09       	sbc	r23, r15
     17e:	09 09       	sbc	r16, r9
     180:	06 3e       	cpi	r16, 0xE6	; 230
     182:	41 51       	subi	r20, 0x11	; 17
     184:	21 5e       	subi	r18, 0xE1	; 225
     186:	7f 09       	sbc	r23, r15
     188:	19 29       	or	r17, r9
     18a:	46 46       	sbci	r20, 0x66	; 102
     18c:	49 49       	sbci	r20, 0x99	; 153
     18e:	49 31       	cpi	r20, 0x19	; 25
     190:	01 01       	movw	r0, r2
     192:	7f 01       	movw	r14, r30
     194:	01 3f       	cpi	r16, 0xF1	; 241
     196:	40 40       	sbci	r20, 0x00	; 0
     198:	40 3f       	cpi	r20, 0xF0	; 240
     19a:	1f 20       	and	r1, r15
     19c:	40 20       	and	r4, r0
     19e:	1f 3f       	cpi	r17, 0xFF	; 255
     1a0:	40 38       	cpi	r20, 0x80	; 128
     1a2:	40 3f       	cpi	r20, 0xF0	; 240
     1a4:	63 14       	cp	r6, r3
     1a6:	08 14       	cp	r0, r8
     1a8:	63 07       	cpc	r22, r19
     1aa:	08 70       	andi	r16, 0x08	; 8
     1ac:	08 07       	cpc	r16, r24
     1ae:	61 51       	subi	r22, 0x11	; 17
     1b0:	49 45       	sbci	r20, 0x59	; 89
     1b2:	43 00       	.word	0x0043	; ????
     1b4:	7f 41       	sbci	r23, 0x1F	; 31
     1b6:	41 00       	.word	0x0041	; ????
     1b8:	02 04       	cpc	r0, r2
     1ba:	08 10       	cpse	r0, r8
     1bc:	20 00       	.word	0x0020	; ????
     1be:	41 41       	sbci	r20, 0x11	; 17
     1c0:	7f 00       	.word	0x007f	; ????
     1c2:	04 02       	muls	r16, r20
     1c4:	01 02       	muls	r16, r17
     1c6:	04 40       	sbci	r16, 0x04	; 4
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	40 40       	sbci	r20, 0x00	; 0
     1cc:	00 01       	movw	r0, r0
     1ce:	02 04       	cpc	r0, r2
     1d0:	00 20       	and	r0, r0
     1d2:	54 54       	subi	r21, 0x44	; 68
     1d4:	54 78       	andi	r21, 0x84	; 132
     1d6:	7f 48       	sbci	r23, 0x8F	; 143
     1d8:	44 44       	sbci	r20, 0x44	; 68
     1da:	38 38       	cpi	r19, 0x88	; 136
     1dc:	44 44       	sbci	r20, 0x44	; 68
     1de:	44 20       	and	r4, r4
     1e0:	38 44       	sbci	r19, 0x48	; 72
     1e2:	44 48       	sbci	r20, 0x84	; 132
     1e4:	7f 38       	cpi	r23, 0x8F	; 143
     1e6:	54 54       	subi	r21, 0x44	; 68
     1e8:	54 18       	sub	r5, r4
     1ea:	08 7e       	andi	r16, 0xE8	; 232
     1ec:	09 01       	movw	r0, r18
     1ee:	02 0c       	add	r0, r2
     1f0:	52 52       	subi	r21, 0x22	; 34
     1f2:	52 3e       	cpi	r21, 0xE2	; 226
     1f4:	7f 08       	sbc	r7, r15
     1f6:	04 04       	cpc	r0, r4
     1f8:	78 00       	.word	0x0078	; ????
     1fa:	44 7d       	andi	r20, 0xD4	; 212
     1fc:	40 00       	.word	0x0040	; ????
     1fe:	20 40       	sbci	r18, 0x00	; 0
     200:	44 3d       	cpi	r20, 0xD4	; 212
     202:	00 7f       	andi	r16, 0xF0	; 240
     204:	10 28       	or	r1, r0
     206:	44 00       	.word	0x0044	; ????
     208:	00 41       	sbci	r16, 0x10	; 16
     20a:	7f 40       	sbci	r23, 0x0F	; 15
     20c:	00 7c       	andi	r16, 0xC0	; 192
     20e:	04 18       	sub	r0, r4
     210:	04 78       	andi	r16, 0x84	; 132
     212:	7c 08       	sbc	r7, r12
     214:	04 04       	cpc	r0, r4
     216:	78 38       	cpi	r23, 0x88	; 136
     218:	44 44       	sbci	r20, 0x44	; 68
     21a:	44 38       	cpi	r20, 0x84	; 132
     21c:	7c 14       	cp	r7, r12
     21e:	14 14       	cp	r1, r4
     220:	08 08       	sbc	r0, r8
     222:	14 14       	cp	r1, r4
     224:	18 7c       	andi	r17, 0xC8	; 200
     226:	7c 08       	sbc	r7, r12
     228:	04 04       	cpc	r0, r4
     22a:	08 48       	sbci	r16, 0x88	; 136
     22c:	54 54       	subi	r21, 0x44	; 68
     22e:	54 20       	and	r5, r4
     230:	04 3f       	cpi	r16, 0xF4	; 244
     232:	44 40       	sbci	r20, 0x04	; 4
     234:	20 3c       	cpi	r18, 0xC0	; 192
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	20 7c       	andi	r18, 0xC0	; 192
     23a:	1c 20       	and	r1, r12
     23c:	40 20       	and	r4, r0
     23e:	1c 3c       	cpi	r17, 0xCC	; 204
     240:	40 30       	cpi	r20, 0x00	; 0
     242:	40 3c       	cpi	r20, 0xC0	; 192
     244:	44 28       	or	r4, r4
     246:	10 28       	or	r1, r0
     248:	44 0c       	add	r4, r4
     24a:	50 50       	subi	r21, 0x00	; 0
     24c:	50 3c       	cpi	r21, 0xC0	; 192
     24e:	44 64       	ori	r20, 0x44	; 68
     250:	54 4c       	sbci	r21, 0xC4	; 196
     252:	44 00       	.word	0x0044	; ????
     254:	08 36       	cpi	r16, 0x68	; 104
     256:	41 00       	.word	0x0041	; ????
     258:	00 00       	nop
     25a:	7f 00       	.word	0x007f	; ????
     25c:	00 00       	nop
     25e:	41 36       	cpi	r20, 0x61	; 97
     260:	08 00       	.word	0x0008	; ????
     262:	10 08       	sbc	r1, r0
     264:	08 10       	cpse	r0, r8
     266:	08 78       	andi	r16, 0x88	; 136
     268:	46 41       	sbci	r20, 0x16	; 22
     26a:	46 78       	andi	r20, 0x86	; 134

0000026c <__ctors_end>:
     26c:	11 24       	eor	r1, r1
     26e:	1f be       	out	0x3f, r1	; 63
     270:	cf ef       	ldi	r28, 0xFF	; 255
     272:	d0 e1       	ldi	r29, 0x10	; 16
     274:	de bf       	out	0x3e, r29	; 62
     276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
     278:	16 e0       	ldi	r17, 0x06	; 6
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b1 e0       	ldi	r27, 0x01	; 1
     27e:	e0 e5       	ldi	r30, 0x50	; 80
     280:	f0 e2       	ldi	r31, 0x20	; 32
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	0b bf       	out	0x3b, r16	; 59
     286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
     288:	07 90       	elpm	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	a8 3b       	cpi	r26, 0xB8	; 184
     28e:	b1 07       	cpc	r27, r17
     290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
     292:	27 e0       	ldi	r18, 0x07	; 7
     294:	a8 eb       	ldi	r26, 0xB8	; 184
     296:	b6 e0       	ldi	r27, 0x06	; 6
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	a1 34       	cpi	r26, 0x41	; 65
     29e:	b2 07       	cpc	r27, r18
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
     2a2:	0e 94 03 0a 	call	0x1406	; 0x1406 <main>
     2a6:	0c 94 26 10 	jmp	0x204c	; 0x204c <_exit>

000002aa <__bad_interrupt>:
     2aa:	aa ce       	rjmp	.-684    	; 0x0 <__vectors>

000002ac <get_ch_data>:
    {0x10, 0x08, 0x08, 0x10, 0x08}, // 7e ~
    {0x78, 0x46, 0x41, 0x46, 0x78}, // 7f 
};

void get_ch_data(char ch, uint8_t *buffer)
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	28 97       	sbiw	r28, 0x08	; 8
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	8e 83       	std	Y+6, r24	; 0x06
     2c2:	78 87       	std	Y+8, r23	; 0x08
     2c4:	6f 83       	std	Y+7, r22	; 0x07
    int     i;

    for (i=0; i<5; i++)
     2c6:	1a 82       	std	Y+2, r1	; 0x02
     2c8:	19 82       	std	Y+1, r1	; 0x01
     2ca:	29 c0       	rjmp	.+82     	; 0x31e <get_ch_data+0x72>
    {
        *buffer++ = pgm_read_byte(&ASCII[ch - ' '][i]);
     2cc:	2f 81       	ldd	r18, Y+7	; 0x07
     2ce:	38 85       	ldd	r19, Y+8	; 0x08
     2d0:	c9 01       	movw	r24, r18
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	98 87       	std	Y+8, r25	; 0x08
     2d6:	8f 83       	std	Y+7, r24	; 0x07
     2d8:	8e 81       	ldd	r24, Y+6	; 0x06
     2da:	08 2e       	mov	r0, r24
     2dc:	00 0c       	add	r0, r0
     2de:	99 0b       	sbc	r25, r25
     2e0:	ac 01       	movw	r20, r24
     2e2:	40 52       	subi	r20, 0x20	; 32
     2e4:	51 09       	sbc	r21, r1
     2e6:	ca 01       	movw	r24, r20
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	84 0f       	add	r24, r20
     2f2:	95 1f       	adc	r25, r21
     2f4:	49 81       	ldd	r20, Y+1	; 0x01
     2f6:	5a 81       	ldd	r21, Y+2	; 0x02
     2f8:	84 0f       	add	r24, r20
     2fa:	95 1f       	adc	r25, r21
     2fc:	84 57       	subi	r24, 0x74	; 116
     2fe:	9f 4f       	sbci	r25, 0xFF	; 255
     300:	9c 83       	std	Y+4, r25	; 0x04
     302:	8b 83       	std	Y+3, r24	; 0x03
     304:	8b 81       	ldd	r24, Y+3	; 0x03
     306:	9c 81       	ldd	r25, Y+4	; 0x04
     308:	fc 01       	movw	r30, r24
     30a:	84 91       	lpm	r24, Z
     30c:	8d 83       	std	Y+5, r24	; 0x05
     30e:	8d 81       	ldd	r24, Y+5	; 0x05
     310:	f9 01       	movw	r30, r18
     312:	80 83       	st	Z, r24

void get_ch_data(char ch, uint8_t *buffer)
{
    int     i;

    for (i=0; i<5; i++)
     314:	89 81       	ldd	r24, Y+1	; 0x01
     316:	9a 81       	ldd	r25, Y+2	; 0x02
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	9a 83       	std	Y+2, r25	; 0x02
     31c:	89 83       	std	Y+1, r24	; 0x01
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	9a 81       	ldd	r25, Y+2	; 0x02
     322:	05 97       	sbiw	r24, 0x05	; 5
     324:	9c f2       	brlt	.-90     	; 0x2cc <get_ch_data+0x20>
    {
        *buffer++ = pgm_read_byte(&ASCII[ch - ' '][i]);
    }
    *buffer = 0;
     326:	8f 81       	ldd	r24, Y+7	; 0x07
     328:	98 85       	ldd	r25, Y+8	; 0x08
     32a:	fc 01       	movw	r30, r24
     32c:	10 82       	st	Z, r1
}
     32e:	00 00       	nop
     330:	28 96       	adiw	r28, 0x08	; 8
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	de bf       	out	0x3e, r29	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	cd bf       	out	0x3d, r28	; 61
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <twiStart>:
        return -1;

    twi_stop();

    return 0;
}
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	80 e7       	ldi	r24, 0x70	; 112
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	24 ea       	ldi	r18, 0xA4	; 164
     350:	fc 01       	movw	r30, r24
     352:	24 83       	std	Z+4, r18	; 0x04
     354:	00 00       	nop
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <twiStop>:
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	80 e7       	ldi	r24, 0x70	; 112
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	24 e9       	ldi	r18, 0x94	; 148
     36a:	fc 01       	movw	r30, r24
     36c:	24 83       	std	Z+4, r18	; 0x04
     36e:	00 00       	nop
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	08 95       	ret

00000376 <twiWaitAck>:
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	00 00       	nop
     380:	80 e7       	ldi	r24, 0x70	; 112
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	fc 01       	movw	r30, r24
     386:	84 81       	ldd	r24, Z+4	; 0x04
     388:	88 23       	and	r24, r24
     38a:	d4 f7       	brge	.-12     	; 0x380 <twiWaitAck+0xa>
     38c:	00 00       	nop
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <twiChkAck>:
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	80 e7       	ldi	r24, 0x70	; 112
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	fc 01       	movw	r30, r24
     3a2:	81 81       	ldd	r24, Z+1	; 0x01
     3a4:	88 7f       	andi	r24, 0xF8	; 248
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret

000003ac <twiSendByte>:
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	1f 92       	push	r1
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	80 e7       	ldi	r24, 0x70	; 112
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	29 81       	ldd	r18, Y+1	; 0x01
     3be:	fc 01       	movw	r30, r24
     3c0:	23 83       	std	Z+3, r18	; 0x03
     3c2:	80 e7       	ldi	r24, 0x70	; 112
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	24 e8       	ldi	r18, 0x84	; 132
     3c8:	fc 01       	movw	r30, r24
     3ca:	24 83       	std	Z+4, r18	; 0x04
     3cc:	00 00       	nop
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <twi_start>:
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	b1 df       	rcall	.-158    	; 0x342 <twiStart>
     3e0:	ca df       	rcall	.-108    	; 0x376 <twiWaitAck>
     3e2:	d8 df       	rcall	.-80     	; 0x394 <twiChkAck>
     3e4:	88 30       	cpi	r24, 0x08	; 8
     3e6:	19 f0       	breq	.+6      	; 0x3ee <twi_start+0x18>
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
     3ea:	9f ef       	ldi	r25, 0xFF	; 255
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <twi_start+0x1c>
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <twi_stop>:
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	ad df       	rcall	.-166    	; 0x35c <twiStop>
     402:	00 00       	nop
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <twi_send_dev_addr>:
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	00 d0       	rcall	.+0      	; 0x410 <twi_send_dev_addr+0x6>
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	8a 83       	std	Y+2, r24	; 0x02
     416:	8a 81       	ldd	r24, Y+2	; 0x02
     418:	88 2f       	mov	r24, r24
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	81 70       	andi	r24, 0x01	; 1
     41e:	99 27       	eor	r25, r25
     420:	89 2b       	or	r24, r25
     422:	11 f0       	breq	.+4      	; 0x428 <twi_send_dev_addr+0x1e>
     424:	80 e4       	ldi	r24, 0x40	; 64
     426:	01 c0       	rjmp	.+2      	; 0x42a <twi_send_dev_addr+0x20>
     428:	88 e1       	ldi	r24, 0x18	; 24
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	8a 81       	ldd	r24, Y+2	; 0x02
     42e:	be df       	rcall	.-132    	; 0x3ac <twiSendByte>
     430:	a2 df       	rcall	.-188    	; 0x376 <twiWaitAck>
     432:	b0 df       	rcall	.-160    	; 0x394 <twiChkAck>
     434:	98 2f       	mov	r25, r24
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	98 17       	cp	r25, r24
     43a:	19 f0       	breq	.+6      	; 0x442 <twi_send_dev_addr+0x38>
     43c:	8f ef       	ldi	r24, 0xFF	; 255
     43e:	9f ef       	ldi	r25, 0xFF	; 255
     440:	02 c0       	rjmp	.+4      	; 0x446 <twi_send_dev_addr+0x3c>
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <twi_send_data>:
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	1f 92       	push	r1
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	a6 df       	rcall	.-180    	; 0x3ac <twiSendByte>
     460:	8a df       	rcall	.-236    	; 0x376 <twiWaitAck>
     462:	98 df       	rcall	.-208    	; 0x394 <twiChkAck>
     464:	88 32       	cpi	r24, 0x28	; 40
     466:	19 f0       	breq	.+6      	; 0x46e <twi_send_data+0x1e>
     468:	8f ef       	ldi	r24, 0xFF	; 255
     46a:	9f ef       	ldi	r25, 0xFF	; 255
     46c:	02 c0       	rjmp	.+4      	; 0x472 <twi_send_data+0x22>
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0f 90       	pop	r0
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <twi_write>:
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	28 97       	sbiw	r28, 0x08	; 8
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	8b 83       	std	Y+3, r24	; 0x03
     490:	6c 83       	std	Y+4, r22	; 0x04
     492:	5e 83       	std	Y+6, r21	; 0x06
     494:	4d 83       	std	Y+5, r20	; 0x05
     496:	38 87       	std	Y+8, r19	; 0x08
     498:	2f 83       	std	Y+7, r18	; 0x07
     49a:	9d df       	rcall	.-198    	; 0x3d6 <twi_start>
     49c:	89 2b       	or	r24, r25
     49e:	19 f0       	breq	.+6      	; 0x4a6 <twi_write+0x2c>
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	9f ef       	ldi	r25, 0xFF	; 255
     4a4:	30 c0       	rjmp	.+96     	; 0x506 <twi_write+0x8c>
     4a6:	8b 81       	ldd	r24, Y+3	; 0x03
     4a8:	88 0f       	add	r24, r24
     4aa:	af df       	rcall	.-162    	; 0x40a <twi_send_dev_addr>
     4ac:	89 2b       	or	r24, r25
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <twi_write+0x3c>
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	9f ef       	ldi	r25, 0xFF	; 255
     4b4:	28 c0       	rjmp	.+80     	; 0x506 <twi_write+0x8c>
     4b6:	8c 81       	ldd	r24, Y+4	; 0x04
     4b8:	cb df       	rcall	.-106    	; 0x450 <twi_send_data>
     4ba:	89 2b       	or	r24, r25
     4bc:	19 f0       	breq	.+6      	; 0x4c4 <twi_write+0x4a>
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	9f ef       	ldi	r25, 0xFF	; 255
     4c2:	21 c0       	rjmp	.+66     	; 0x506 <twi_write+0x8c>
     4c4:	1a 82       	std	Y+2, r1	; 0x02
     4c6:	19 82       	std	Y+1, r1	; 0x01
     4c8:	14 c0       	rjmp	.+40     	; 0x4f2 <twi_write+0x78>
     4ca:	8d 81       	ldd	r24, Y+5	; 0x05
     4cc:	9e 81       	ldd	r25, Y+6	; 0x06
     4ce:	9c 01       	movw	r18, r24
     4d0:	2f 5f       	subi	r18, 0xFF	; 255
     4d2:	3f 4f       	sbci	r19, 0xFF	; 255
     4d4:	3e 83       	std	Y+6, r19	; 0x06
     4d6:	2d 83       	std	Y+5, r18	; 0x05
     4d8:	fc 01       	movw	r30, r24
     4da:	80 81       	ld	r24, Z
     4dc:	b9 df       	rcall	.-142    	; 0x450 <twi_send_data>
     4de:	89 2b       	or	r24, r25
     4e0:	19 f0       	breq	.+6      	; 0x4e8 <twi_write+0x6e>
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	9f ef       	ldi	r25, 0xFF	; 255
     4e6:	0f c0       	rjmp	.+30     	; 0x506 <twi_write+0x8c>
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	9a 81       	ldd	r25, Y+2	; 0x02
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	9a 83       	std	Y+2, r25	; 0x02
     4f0:	89 83       	std	Y+1, r24	; 0x01
     4f2:	29 81       	ldd	r18, Y+1	; 0x01
     4f4:	3a 81       	ldd	r19, Y+2	; 0x02
     4f6:	8f 81       	ldd	r24, Y+7	; 0x07
     4f8:	98 85       	ldd	r25, Y+8	; 0x08
     4fa:	28 17       	cp	r18, r24
     4fc:	39 07       	cpc	r19, r25
     4fe:	2c f3       	brlt	.-54     	; 0x4ca <twi_write+0x50>
     500:	7b df       	rcall	.-266    	; 0x3f8 <twi_stop>
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	28 96       	adiw	r28, 0x08	; 8
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	cd bf       	out	0x3d, r28	; 61
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <twi_init>:

void twi_init(void)
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
    twi->twbr = 5;
     520:	80 e7       	ldi	r24, 0x70	; 112
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	25 e0       	ldi	r18, 0x05	; 5
     526:	fc 01       	movw	r30, r24
     528:	20 83       	st	Z, r18
    twi->twsr = 0;
     52a:	80 e7       	ldi	r24, 0x70	; 112
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	fc 01       	movw	r30, r24
     530:	11 82       	std	Z+1, r1	; 0x01
}
     532:	00 00       	nop
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <ssd1306_cmd>:
static void ssd1306_output_scan_direction2(bool enable)
{
	uint8_t cmd = 0xc0 | enable;

	ssd1306_cmd(&cmd, 1);
}
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	00 d0       	rcall	.+0      	; 0x540 <ssd1306_cmd+0x6>
     540:	1f 92       	push	r1
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	9a 83       	std	Y+2, r25	; 0x02
     548:	89 83       	std	Y+1, r24	; 0x01
     54a:	6b 83       	std	Y+3, r22	; 0x03
     54c:	8b 81       	ldd	r24, Y+3	; 0x03
     54e:	28 2f       	mov	r18, r24
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	89 81       	ldd	r24, Y+1	; 0x01
     554:	9a 81       	ldd	r25, Y+2	; 0x02
     556:	ac 01       	movw	r20, r24
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	8c e3       	ldi	r24, 0x3C	; 60
     55c:	8e df       	rcall	.-228    	; 0x47a <twi_write>
     55e:	00 00       	nop
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <ssd1306_data>:
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	00 d0       	rcall	.+0      	; 0x572 <ssd1306_data+0x6>
     572:	00 d0       	rcall	.+0      	; 0x574 <ssd1306_data+0x8>
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	9a 83       	std	Y+2, r25	; 0x02
     57a:	89 83       	std	Y+1, r24	; 0x01
     57c:	7c 83       	std	Y+4, r23	; 0x04
     57e:	6b 83       	std	Y+3, r22	; 0x03
     580:	2b 81       	ldd	r18, Y+3	; 0x03
     582:	3c 81       	ldd	r19, Y+4	; 0x04
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	9a 81       	ldd	r25, Y+2	; 0x02
     588:	ac 01       	movw	r20, r24
     58a:	60 e4       	ldi	r22, 0x40	; 64
     58c:	8c e3       	ldi	r24, 0x3C	; 60
     58e:	75 df       	rcall	.-278    	; 0x47a <twi_write>
     590:	00 00       	nop
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <ssd1306_reset>:
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	00 00       	nop
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <ssd1306_chargepump_enable>:
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	00 d0       	rcall	.+0      	; 0x5b6 <ssd1306_chargepump_enable+0x6>
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <ssd1306_chargepump_enable+0x8>
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	9c 83       	std	Y+4, r25	; 0x04
     5be:	8b 83       	std	Y+3, r24	; 0x03
     5c0:	8d e8       	ldi	r24, 0x8D	; 141
     5c2:	89 83       	std	Y+1, r24	; 0x01
     5c4:	8b 81       	ldd	r24, Y+3	; 0x03
     5c6:	9c 81       	ldd	r25, Y+4	; 0x04
     5c8:	89 2b       	or	r24, r25
     5ca:	11 f0       	breq	.+4      	; 0x5d0 <ssd1306_chargepump_enable+0x20>
     5cc:	84 e1       	ldi	r24, 0x14	; 20
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <ssd1306_chargepump_enable+0x22>
     5d0:	80 e1       	ldi	r24, 0x10	; 16
     5d2:	8a 83       	std	Y+2, r24	; 0x02
     5d4:	62 e0       	ldi	r22, 0x02	; 2
     5d6:	ce 01       	movw	r24, r28
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	af df       	rcall	.-162    	; 0x53a <ssd1306_cmd>
     5dc:	00 00       	nop
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret

000005ec <ssd1306_entire_on>:
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	00 d0       	rcall	.+0      	; 0x5f2 <ssd1306_entire_on+0x6>
     5f2:	1f 92       	push	r1
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	9b 83       	std	Y+3, r25	; 0x03
     5fa:	8a 83       	std	Y+2, r24	; 0x02
     5fc:	8a 81       	ldd	r24, Y+2	; 0x02
     5fe:	84 6a       	ori	r24, 0xA4	; 164
     600:	89 83       	std	Y+1, r24	; 0x01
     602:	61 e0       	ldi	r22, 0x01	; 1
     604:	ce 01       	movw	r24, r28
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	98 df       	rcall	.-208    	; 0x53a <ssd1306_cmd>
     60a:	00 00       	nop
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <ssd1306_display_on>:
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	00 d0       	rcall	.+0      	; 0x61e <ssd1306_display_on+0x6>
     61e:	1f 92       	push	r1
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	9b 83       	std	Y+3, r25	; 0x03
     626:	8a 83       	std	Y+2, r24	; 0x02
     628:	8a 81       	ldd	r24, Y+2	; 0x02
     62a:	8e 6a       	ori	r24, 0xAE	; 174
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	ce 01       	movw	r24, r28
     632:	01 96       	adiw	r24, 0x01	; 1
     634:	82 df       	rcall	.-252    	; 0x53a <ssd1306_cmd>
     636:	00 00       	nop
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <ssd1306_set_addr_mode>:
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	00 d0       	rcall	.+0      	; 0x64a <ssd1306_set_addr_mode+0x6>
     64a:	1f 92       	push	r1
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	8b 83       	std	Y+3, r24	; 0x03
     652:	80 e2       	ldi	r24, 0x20	; 32
     654:	89 83       	std	Y+1, r24	; 0x01
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	8a 83       	std	Y+2, r24	; 0x02
     65a:	62 e0       	ldi	r22, 0x02	; 2
     65c:	ce 01       	movw	r24, r28
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	6c df       	rcall	.-296    	; 0x53a <ssd1306_cmd>
     662:	00 00       	nop
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <ssd1306_set_page_start>:
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	00 d0       	rcall	.+0      	; 0x676 <ssd1306_set_page_start+0x6>
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
     67a:	8a 83       	std	Y+2, r24	; 0x02
     67c:	8a 81       	ldd	r24, Y+2	; 0x02
     67e:	80 6b       	ori	r24, 0xB0	; 176
     680:	89 83       	std	Y+1, r24	; 0x01
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	ce 01       	movw	r24, r28
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	58 df       	rcall	.-336    	; 0x53a <ssd1306_cmd>
     68a:	00 00       	nop
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <ssd1306_set_column_addr>:
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	00 d0       	rcall	.+0      	; 0x69c <ssd1306_set_column_addr+0x6>
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	8a 83       	std	Y+2, r24	; 0x02
     6a2:	8a 81       	ldd	r24, Y+2	; 0x02
     6a4:	8f 70       	andi	r24, 0x0F	; 15
     6a6:	89 83       	std	Y+1, r24	; 0x01
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	ce 01       	movw	r24, r28
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	45 df       	rcall	.-374    	; 0x53a <ssd1306_cmd>
     6b0:	8a 81       	ldd	r24, Y+2	; 0x02
     6b2:	82 95       	swap	r24
     6b4:	8f 70       	andi	r24, 0x0F	; 15
     6b6:	80 61       	ori	r24, 0x10	; 16
     6b8:	89 83       	std	Y+1, r24	; 0x01
     6ba:	61 e0       	ldi	r22, 0x01	; 1
     6bc:	ce 01       	movw	r24, r28
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	3c df       	rcall	.-392    	; 0x53a <ssd1306_cmd>
     6c2:	00 00       	nop
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <ssd1306_reverse>:
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	00 d0       	rcall	.+0      	; 0x6d4 <ssd1306_reverse+0x6>
     6d4:	1f 92       	push	r1
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	9b 83       	std	Y+3, r25	; 0x03
     6dc:	8a 83       	std	Y+2, r24	; 0x02
     6de:	8a 81       	ldd	r24, Y+2	; 0x02
     6e0:	80 6a       	ori	r24, 0xA0	; 160
     6e2:	89 83       	std	Y+1, r24	; 0x01
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	ce 01       	movw	r24, r28
     6e8:	01 96       	adiw	r24, 0x01	; 1
     6ea:	27 df       	rcall	.-434    	; 0x53a <ssd1306_cmd>
     6ec:	00 00       	nop
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <ssd1306_normal_display>:
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	00 d0       	rcall	.+0      	; 0x700 <ssd1306_normal_display+0x6>
     700:	1f 92       	push	r1
     702:	cd b7       	in	r28, 0x3d	; 61
     704:	de b7       	in	r29, 0x3e	; 62
     706:	9b 83       	std	Y+3, r25	; 0x03
     708:	8a 83       	std	Y+2, r24	; 0x02
     70a:	8a 81       	ldd	r24, Y+2	; 0x02
     70c:	86 6a       	ori	r24, 0xA6	; 166
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	ce 01       	movw	r24, r28
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	11 df       	rcall	.-478    	; 0x53a <ssd1306_cmd>
     718:	00 00       	nop
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <ssd1306_output_scan_direction>:
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	00 d0       	rcall	.+0      	; 0x72c <ssd1306_output_scan_direction+0x6>
     72c:	1f 92       	push	r1
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	9b 83       	std	Y+3, r25	; 0x03
     734:	8a 83       	std	Y+2, r24	; 0x02
     736:	8a 81       	ldd	r24, Y+2	; 0x02
     738:	88 6c       	ori	r24, 0xC8	; 200
     73a:	89 83       	std	Y+1, r24	; 0x01
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	fb de       	rcall	.-522    	; 0x53a <ssd1306_cmd>
     744:	00 00       	nop
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <ssd1306_init>:


void ssd1306_init(void)
{
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	2e 97       	sbiw	r28, 0x0e	; 14
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	a0 e8       	ldi	r26, 0x80	; 128
     76c:	bf e3       	ldi	r27, 0x3F	; 63
     76e:	89 83       	std	Y+1, r24	; 0x01
     770:	9a 83       	std	Y+2, r25	; 0x02
     772:	ab 83       	std	Y+3, r26	; 0x03
     774:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	4a e7       	ldi	r20, 0x7A	; 122
     77c:	55 e4       	ldi	r21, 0x45	; 69
     77e:	69 81       	ldd	r22, Y+1	; 0x01
     780:	7a 81       	ldd	r23, Y+2	; 0x02
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	9c 81       	ldd	r25, Y+4	; 0x04
     786:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	8d 83       	std	Y+5, r24	; 0x05
     790:	9e 83       	std	Y+6, r25	; 0x06
     792:	af 83       	std	Y+7, r26	; 0x07
     794:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e8       	ldi	r20, 0x80	; 128
     79c:	5f e3       	ldi	r21, 0x3F	; 63
     79e:	6d 81       	ldd	r22, Y+5	; 0x05
     7a0:	7e 81       	ldd	r23, Y+6	; 0x06
     7a2:	8f 81       	ldd	r24, Y+7	; 0x07
     7a4:	98 85       	ldd	r25, Y+8	; 0x08
     7a6:	98 d7       	rcall	.+3888   	; 0x16d8 <__cmpsf2>
     7a8:	88 23       	and	r24, r24
     7aa:	2c f4       	brge	.+10     	; 0x7b6 <ssd1306_init+0x64>
		__ticks = 1;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	9a 87       	std	Y+10, r25	; 0x0a
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	3c c0       	rjmp	.+120    	; 0x82e <ssd1306_init+0xdc>
	else if (__tmp > 65535)
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	3f ef       	ldi	r19, 0xFF	; 255
     7ba:	4f e7       	ldi	r20, 0x7F	; 127
     7bc:	57 e4       	ldi	r21, 0x47	; 71
     7be:	6d 81       	ldd	r22, Y+5	; 0x05
     7c0:	7e 81       	ldd	r23, Y+6	; 0x06
     7c2:	8f 81       	ldd	r24, Y+7	; 0x07
     7c4:	98 85       	ldd	r25, Y+8	; 0x08
     7c6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__gesf2>
     7ca:	18 16       	cp	r1, r24
     7cc:	3c f5       	brge	.+78     	; 0x81c <ssd1306_init+0xca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e2       	ldi	r20, 0x20	; 32
     7d4:	51 e4       	ldi	r21, 0x41	; 65
     7d6:	69 81       	ldd	r22, Y+1	; 0x01
     7d8:	7a 81       	ldd	r23, Y+2	; 0x02
     7da:	8b 81       	ldd	r24, Y+3	; 0x03
     7dc:	9c 81       	ldd	r25, Y+4	; 0x04
     7de:	fd d7       	rcall	.+4090   	; 0x17da <__mulsf3>
     7e0:	dc 01       	movw	r26, r24
     7e2:	cb 01       	movw	r24, r22
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	7b d7       	rcall	.+3830   	; 0x16e0 <__fixunssfsi>
     7ea:	dc 01       	movw	r26, r24
     7ec:	cb 01       	movw	r24, r22
     7ee:	9a 87       	std	Y+10, r25	; 0x0a
     7f0:	89 87       	std	Y+9, r24	; 0x09
     7f2:	0f c0       	rjmp	.+30     	; 0x812 <ssd1306_init+0xc0>
     7f4:	80 e9       	ldi	r24, 0x90	; 144
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	9c 87       	std	Y+12, r25	; 0x0c
     7fa:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     7fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	f1 f7       	brne	.-4      	; 0x800 <ssd1306_init+0xae>
     804:	9c 87       	std	Y+12, r25	; 0x0c
     806:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     808:	89 85       	ldd	r24, Y+9	; 0x09
     80a:	9a 85       	ldd	r25, Y+10	; 0x0a
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	9a 87       	std	Y+10, r25	; 0x0a
     810:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     812:	89 85       	ldd	r24, Y+9	; 0x09
     814:	9a 85       	ldd	r25, Y+10	; 0x0a
     816:	89 2b       	or	r24, r25
     818:	69 f7       	brne	.-38     	; 0x7f4 <ssd1306_init+0xa2>
     81a:	13 c0       	rjmp	.+38     	; 0x842 <ssd1306_init+0xf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     81c:	6d 81       	ldd	r22, Y+5	; 0x05
     81e:	7e 81       	ldd	r23, Y+6	; 0x06
     820:	8f 81       	ldd	r24, Y+7	; 0x07
     822:	98 85       	ldd	r25, Y+8	; 0x08
     824:	5d d7       	rcall	.+3770   	; 0x16e0 <__fixunssfsi>
     826:	dc 01       	movw	r26, r24
     828:	cb 01       	movw	r24, r22
     82a:	9a 87       	std	Y+10, r25	; 0x0a
     82c:	89 87       	std	Y+9, r24	; 0x09
     82e:	89 85       	ldd	r24, Y+9	; 0x09
     830:	9a 85       	ldd	r25, Y+10	; 0x0a
     832:	9e 87       	std	Y+14, r25	; 0x0e
     834:	8d 87       	std	Y+13, r24	; 0x0d
     836:	8d 85       	ldd	r24, Y+13	; 0x0d
     838:	9e 85       	ldd	r25, Y+14	; 0x0e
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	f1 f7       	brne	.-4      	; 0x83a <ssd1306_init+0xe8>
     83e:	9e 87       	std	Y+14, r25	; 0x0e
	_delay_ms(1);

	ssd1306_reset();
     840:	8d 87       	std	Y+13, r24	; 0x0d

	ssd1306_chargepump_enable(true);
     842:	ae de       	rcall	.-676    	; 0x5a0 <ssd1306_reset>
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
	ssd1306_entire_on(false);
     848:	b3 de       	rcall	.-666    	; 0x5b0 <ssd1306_chargepump_enable>
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
	ssd1306_display_on(true);
     84e:	ce de       	rcall	.-612    	; 0x5ec <ssd1306_entire_on>
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	e1 de       	rcall	.-574    	; 0x618 <ssd1306_display_on>
}
     856:	00 00       	nop
     858:	2e 96       	adiw	r28, 0x0e	; 14
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <clear_screen>:
static uint8_t gddram[COL_NUM];



void clear_screen(void)
{
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	00 d0       	rcall	.+0      	; 0x870 <clear_screen+0x6>
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
     874:	1a 82       	std	Y+2, r1	; 0x02
     876:	0a c0       	rjmp	.+20     	; 0x88c <clear_screen+0x22>
	gddram[col] = 0;
     878:	8a 81       	ldd	r24, Y+2	; 0x02
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	88 54       	subi	r24, 0x48	; 72
     880:	99 4f       	sbci	r25, 0xF9	; 249
     882:	fc 01       	movw	r30, r24
     884:	10 82       	st	Z, r1
void clear_screen(void)
{
	uint8_t page;
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
     886:	8a 81       	ldd	r24, Y+2	; 0x02
     888:	8f 5f       	subi	r24, 0xFF	; 255
     88a:	8a 83       	std	Y+2, r24	; 0x02
     88c:	8a 81       	ldd	r24, Y+2	; 0x02
     88e:	88 23       	and	r24, r24
     890:	9c f7       	brge	.-26     	; 0x878 <clear_screen+0xe>
	gddram[col] = 0;

	for (page=0; page<PAGE_NUM; page++)
     892:	19 82       	std	Y+1, r1	; 0x01
     894:	0a c0       	rjmp	.+20     	; 0x8aa <clear_screen+0x40>
	{
		ssd1306_set_page_start(page);
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	eb de       	rcall	.-554    	; 0x670 <ssd1306_set_page_start>
		ssd1306_data(gddram, COL_NUM);
     89a:	60 e8       	ldi	r22, 0x80	; 128
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	88 eb       	ldi	r24, 0xB8	; 184
     8a0:	96 e0       	ldi	r25, 0x06	; 6
     8a2:	64 de       	rcall	.-824    	; 0x56c <ssd1306_data>
	uint8_t col;

	for (col=0; col<COL_NUM; col++)
	gddram[col] = 0;

	for (page=0; page<PAGE_NUM; page++)
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	89 83       	std	Y+1, r24	; 0x01
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	88 30       	cpi	r24, 0x08	; 8
	{
		ssd1306_set_page_start(page);
		ssd1306_data(gddram, COL_NUM);
	}

	ssd1306_set_column_addr(0);
     8ae:	98 f3       	brcs	.-26     	; 0x896 <clear_screen+0x2c>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	f1 de       	rcall	.-542    	; 0x696 <ssd1306_set_column_addr>
}
     8b4:	00 00       	nop
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <oled_msg>:



extern void get_ch_data(char ch, uint8_t *buffer);
int oled_msg(int row, int col, const char *fmt, ...)
{
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	6c 97       	sbiw	r28, 0x1c	; 28
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
	va_list     ap;
	char        buf[MAX_CH_PER_LINE + 1];
	int         rc, i;

	va_start(ap, fmt);
     8d4:	ce 01       	movw	r24, r28
     8d6:	87 96       	adiw	r24, 0x27	; 39
     8d8:	9e 83       	std	Y+6, r25	; 0x06
     8da:	8d 83       	std	Y+5, r24	; 0x05
	rc = vsprintf(buf, fmt, ap);
     8dc:	4d 81       	ldd	r20, Y+5	; 0x05
     8de:	5e 81       	ldd	r21, Y+6	; 0x06
     8e0:	2d a1       	ldd	r18, Y+37	; 0x25
     8e2:	3e a1       	ldd	r19, Y+38	; 0x26
     8e4:	ce 01       	movw	r24, r28
     8e6:	07 96       	adiw	r24, 0x07	; 7
     8e8:	b9 01       	movw	r22, r18
     8ea:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <vsprintf>
     8ee:	9c 83       	std	Y+4, r25	; 0x04
     8f0:	8b 83       	std	Y+3, r24	; 0x03
	va_end(ap);

	if (rc > 0)
     8f2:	8b 81       	ldd	r24, Y+3	; 0x03
     8f4:	9c 81       	ldd	r25, Y+4	; 0x04
     8f6:	18 16       	cp	r1, r24
     8f8:	19 06       	cpc	r1, r25
     8fa:	0c f0       	brlt	.+2      	; 0x8fe <oled_msg+0x3e>
     8fc:	3b c0       	rjmp	.+118    	; 0x974 <oled_msg+0xb4>
	{
		for (i=0; i<rc; i++)
     8fe:	1a 82       	std	Y+2, r1	; 0x02
     900:	19 82       	std	Y+1, r1	; 0x01
     902:	1c c0       	rjmp	.+56     	; 0x93c <oled_msg+0x7c>
		get_ch_data(buf[i], &gddram[i * CHAR_WIDTH]);
     904:	29 81       	ldd	r18, Y+1	; 0x01
     906:	3a 81       	ldd	r19, Y+2	; 0x02
     908:	c9 01       	movw	r24, r18
     90a:	88 0f       	add	r24, r24
     90c:	99 1f       	adc	r25, r25
     90e:	82 0f       	add	r24, r18
     910:	93 1f       	adc	r25, r19
     912:	88 0f       	add	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	ac 01       	movw	r20, r24
     918:	48 54       	subi	r20, 0x48	; 72
     91a:	59 4f       	sbci	r21, 0xF9	; 249
     91c:	9e 01       	movw	r18, r28
     91e:	29 5f       	subi	r18, 0xF9	; 249
     920:	3f 4f       	sbci	r19, 0xFF	; 255
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	9a 81       	ldd	r25, Y+2	; 0x02
     926:	82 0f       	add	r24, r18
     928:	93 1f       	adc	r25, r19
     92a:	fc 01       	movw	r30, r24
     92c:	80 81       	ld	r24, Z
     92e:	ba 01       	movw	r22, r20
     930:	bd dc       	rcall	.-1670   	; 0x2ac <get_ch_data>
	rc = vsprintf(buf, fmt, ap);
	va_end(ap);

	if (rc > 0)
	{
		for (i=0; i<rc; i++)
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	9a 81       	ldd	r25, Y+2	; 0x02
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	9a 83       	std	Y+2, r25	; 0x02
     93a:	89 83       	std	Y+1, r24	; 0x01
     93c:	29 81       	ldd	r18, Y+1	; 0x01
     93e:	3a 81       	ldd	r19, Y+2	; 0x02
     940:	8b 81       	ldd	r24, Y+3	; 0x03
     942:	9c 81       	ldd	r25, Y+4	; 0x04
     944:	28 17       	cp	r18, r24
     946:	39 07       	cpc	r19, r25
     948:	ec f2       	brlt	.-70     	; 0x904 <oled_msg+0x44>
		get_ch_data(buf[i], &gddram[i * CHAR_WIDTH]);

		ssd1306_set_page_start(row);
     94a:	89 a1       	ldd	r24, Y+33	; 0x21
     94c:	91 de       	rcall	.-734    	; 0x670 <ssd1306_set_page_start>
		ssd1306_set_column_addr(col * CHAR_WIDTH);
     94e:	9b a1       	ldd	r25, Y+35	; 0x23
     950:	89 2f       	mov	r24, r25
     952:	88 0f       	add	r24, r24
     954:	89 0f       	add	r24, r25
     956:	88 0f       	add	r24, r24
     958:	9e de       	rcall	.-708    	; 0x696 <ssd1306_set_column_addr>
		ssd1306_data(gddram, rc * CHAR_WIDTH);
     95a:	2b 81       	ldd	r18, Y+3	; 0x03
     95c:	3c 81       	ldd	r19, Y+4	; 0x04
     95e:	c9 01       	movw	r24, r18
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	82 0f       	add	r24, r18
     966:	93 1f       	adc	r25, r19
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	bc 01       	movw	r22, r24
     96e:	88 eb       	ldi	r24, 0xB8	; 184
     970:	96 e0       	ldi	r25, 0x06	; 6
     972:	fc dd       	rcall	.-1032   	; 0x56c <ssd1306_data>
	}

	return rc;
     974:	8b 81       	ldd	r24, Y+3	; 0x03
     976:	9c 81       	ldd	r25, Y+4	; 0x04
}
     978:	6c 96       	adiw	r28, 0x1c	; 28
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	08 95       	ret

0000098a <draw_picture>:




void draw_picture(char array[])
{
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	00 d0       	rcall	.+0      	; 0x990 <draw_picture+0x6>
     990:	1f 92       	push	r1
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	9b 83       	std	Y+3, r25	; 0x03
     998:	8a 83       	std	Y+2, r24	; 0x02
	//clear_screen();
	unsigned char x,y;
	for(y=0;y<8;y++)
     99a:	19 82       	std	Y+1, r1	; 0x01
     99c:	15 c0       	rjmp	.+42     	; 0x9c8 <draw_picture+0x3e>
	{
		ssd1306_set_page_start(y);
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	67 de       	rcall	.-818    	; 0x670 <ssd1306_set_page_start>
		ssd1306_data(array+(y*COL_NUM), COL_NUM);
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	88 2f       	mov	r24, r24
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	96 95       	lsr	r25
     9aa:	98 2f       	mov	r25, r24
     9ac:	88 27       	eor	r24, r24
     9ae:	97 95       	ror	r25
     9b0:	87 95       	ror	r24
     9b2:	9c 01       	movw	r18, r24
     9b4:	8a 81       	ldd	r24, Y+2	; 0x02
     9b6:	9b 81       	ldd	r25, Y+3	; 0x03
     9b8:	82 0f       	add	r24, r18
     9ba:	93 1f       	adc	r25, r19
     9bc:	60 e8       	ldi	r22, 0x80	; 128
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	d5 dd       	rcall	.-1110   	; 0x56c <ssd1306_data>

void draw_picture(char array[])
{
	//clear_screen();
	unsigned char x,y;
	for(y=0;y<8;y++)
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	8f 5f       	subi	r24, 0xFF	; 255
     9c6:	89 83       	std	Y+1, r24	; 0x01
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	88 30       	cpi	r24, 0x08	; 8
     9cc:	40 f3       	brcs	.-48     	; 0x99e <draw_picture+0x14>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(array+(y*COL_NUM), COL_NUM);
	}
}
     9ce:	00 00       	nop
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <setup>:

void setup(void)
{
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
	twi_init();
     9e4:	99 dd       	rcall	.-1230   	; 0x518 <twi_init>

	ssd1306_init();
     9e6:	b5 de       	rcall	.-662    	; 0x752 <ssd1306_init>
	ssd1306_set_addr_mode(PAGE);
     9e8:	82 e0       	ldi	r24, 0x02	; 2
     9ea:	2c de       	rcall	.-936    	; 0x644 <ssd1306_set_addr_mode>
	

	clear_screen();
     9ec:	3e df       	rcall	.-388    	; 0x86a <clear_screen>
	
	ssd1306_output_scan_direction(0);		//위아래 역전
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	99 de       	rcall	.-718    	; 0x726 <ssd1306_output_scan_direction>
	ssd1306_reverse(1);		//왼쪽 오른쪽 역전
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	6a de       	rcall	.-812    	; 0x6ce <ssd1306_reverse>
	ssd1306_normal_display(0);
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	7d de       	rcall	.-774    	; 0x6fa <ssd1306_normal_display>
     a00:	00 00       	nop

}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <__vector_6>:
     a08:	1f 92       	push	r1
void game_over();
void food();
void clear_map();

ISR(INT5_vect)
{
     a0a:	0f 92       	push	r0
     a0c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a10:	0f 92       	push	r0
     a12:	11 24       	eor	r1, r1
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
	if(game == 0) game = 1;
     a20:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
     a24:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
     a28:	89 2b       	or	r24, r25
     a2a:	31 f4       	brne	.+12     	; 0xa38 <__vector_6+0x30>
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     a34:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if((dir==LEFT) || (dir==RIGHT)|| (dir==UP))
     a38:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     a3c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     a40:	8b 34       	cpi	r24, 0x4B	; 75
     a42:	91 05       	cpc	r25, r1
     a44:	71 f0       	breq	.+28     	; 0xa62 <__vector_6+0x5a>
     a46:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     a4a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     a4e:	8d 34       	cpi	r24, 0x4D	; 77
     a50:	91 05       	cpc	r25, r1
     a52:	39 f0       	breq	.+14     	; 0xa62 <__vector_6+0x5a>
     a54:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     a58:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     a5c:	88 34       	cpi	r24, 0x48	; 72
     a5e:	91 05       	cpc	r25, r1
     a60:	31 f4       	brne	.+12     	; 0xa6e <__vector_6+0x66>
	{
		dir = UP;
     a62:	88 e4       	ldi	r24, 0x48	; 72
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     a6a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     a6e:	00 00       	nop
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	9f 91       	pop	r25
     a76:	8f 91       	pop	r24
     a78:	0f 90       	pop	r0
     a7a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a7e:	0f 90       	pop	r0
     a80:	1f 90       	pop	r1
     a82:	18 95       	reti

00000a84 <__vector_7>:

ISR(INT6_vect)
{
     a84:	1f 92       	push	r1
     a86:	0f 92       	push	r0
     a88:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a8c:	0f 92       	push	r0
     a8e:	11 24       	eor	r1, r1
     a90:	8f 93       	push	r24
     a92:	9f 93       	push	r25
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
	if(game == 0) game = 1;
     a9c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
     aa0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
     aa4:	89 2b       	or	r24, r25
     aa6:	31 f4       	brne	.+12     	; 0xab4 <__vector_7+0x30>
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     ab0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if((dir==LEFT) || (dir==RIGHT)|| (dir==DOWN))
     ab4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     ab8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     abc:	8b 34       	cpi	r24, 0x4B	; 75
     abe:	91 05       	cpc	r25, r1
     ac0:	71 f0       	breq	.+28     	; 0xade <__vector_7+0x5a>
     ac2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     ac6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     aca:	8d 34       	cpi	r24, 0x4D	; 77
     acc:	91 05       	cpc	r25, r1
     ace:	39 f0       	breq	.+14     	; 0xade <__vector_7+0x5a>
     ad0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     ad4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     ad8:	80 35       	cpi	r24, 0x50	; 80
     ada:	91 05       	cpc	r25, r1
     adc:	31 f4       	brne	.+12     	; 0xaea <__vector_7+0x66>
	{
		dir = DOWN;
     ade:	80 e5       	ldi	r24, 0x50	; 80
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     ae6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     aea:	00 00       	nop
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	9f 91       	pop	r25
     af2:	8f 91       	pop	r24
     af4:	0f 90       	pop	r0
     af6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     afa:	0f 90       	pop	r0
     afc:	1f 90       	pop	r1
     afe:	18 95       	reti

00000b00 <__vector_8>:

ISR(INT7_vect)
{	
     b00:	1f 92       	push	r1
     b02:	0f 92       	push	r0
     b04:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b08:	0f 92       	push	r0
     b0a:	11 24       	eor	r1, r1
     b0c:	8f 93       	push	r24
     b0e:	9f 93       	push	r25
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
	if(game == 0) game = 1;
     b18:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
     b1c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
     b20:	89 2b       	or	r24, r25
     b22:	31 f4       	brne	.+12     	; 0xb30 <__vector_8+0x30>
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     b2c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if((dir==DOWN) || (dir==LEFT)|| (dir==UP))
     b30:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     b34:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     b38:	80 35       	cpi	r24, 0x50	; 80
     b3a:	91 05       	cpc	r25, r1
     b3c:	71 f0       	breq	.+28     	; 0xb5a <__vector_8+0x5a>
     b3e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     b42:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     b46:	8b 34       	cpi	r24, 0x4B	; 75
     b48:	91 05       	cpc	r25, r1
     b4a:	39 f0       	breq	.+14     	; 0xb5a <__vector_8+0x5a>
     b4c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     b50:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     b54:	88 34       	cpi	r24, 0x48	; 72
     b56:	91 05       	cpc	r25, r1
     b58:	31 f4       	brne	.+12     	; 0xb66 <__vector_8+0x66>
	{
		dir = LEFT;
     b5a:	8b e4       	ldi	r24, 0x4B	; 75
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     b62:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     b66:	00 00       	nop
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	9f 91       	pop	r25
     b6e:	8f 91       	pop	r24
     b70:	0f 90       	pop	r0
     b72:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b76:	0f 90       	pop	r0
     b78:	1f 90       	pop	r1
     b7a:	18 95       	reti

00000b7c <__vector_5>:

ISR(INT4_vect)
{
     b7c:	1f 92       	push	r1
     b7e:	0f 92       	push	r0
     b80:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b84:	0f 92       	push	r0
     b86:	11 24       	eor	r1, r1
     b88:	8f 93       	push	r24
     b8a:	9f 93       	push	r25
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
	if(game == 0) game = 1;
     b94:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
     b98:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
     b9c:	89 2b       	or	r24, r25
     b9e:	31 f4       	brne	.+12     	; 0xbac <__vector_5+0x30>
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <game+0x1>
     ba8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <game>
	if((dir==DOWN) || (dir==RIGHT)|| (dir==UP))
     bac:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     bb0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     bb4:	80 35       	cpi	r24, 0x50	; 80
     bb6:	91 05       	cpc	r25, r1
     bb8:	71 f0       	breq	.+28     	; 0xbd6 <__vector_5+0x5a>
     bba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     bbe:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     bc2:	8d 34       	cpi	r24, 0x4D	; 77
     bc4:	91 05       	cpc	r25, r1
     bc6:	39 f0       	breq	.+14     	; 0xbd6 <__vector_5+0x5a>
     bc8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
     bcc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
     bd0:	88 34       	cpi	r24, 0x48	; 72
     bd2:	91 05       	cpc	r25, r1
     bd4:	31 f4       	brne	.+12     	; 0xbe2 <__vector_5+0x66>
	{
		dir = RIGHT;
     bd6:	8d e4       	ldi	r24, 0x4D	; 77
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <dir+0x1>
     bde:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <dir>
	}
}
     be2:	00 00       	nop
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	0f 90       	pop	r0
     bee:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bf2:	0f 90       	pop	r0
     bf4:	1f 90       	pop	r1
     bf6:	18 95       	reti

00000bf8 <title>:


void title()
{
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <title+0x6>
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <title+0x8>
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
	oled_msg(0, 3, "KMM's SNAKE GAME");
     c04:	8d e9       	ldi	r24, 0x9D	; 157
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	89 2f       	mov	r24, r25
     c0a:	8f 93       	push	r24
     c0c:	8d e9       	ldi	r24, 0x9D	; 157
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	8f 93       	push	r24
     c12:	1f 92       	push	r1
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	8f 93       	push	r24
     c18:	1f 92       	push	r1
     c1a:	1f 92       	push	r1
     c1c:	51 de       	rcall	.-862    	; 0x8c0 <oled_msg>
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
	for(int i = 0; i < 128; i++)
     c2a:	1a 82       	std	Y+2, r1	; 0x02
     c2c:	19 82       	std	Y+1, r1	; 0x01
     c2e:	17 c0       	rjmp	.+46     	; 0xc5e <title+0x66>
	{
		ssd1306_set_page_start(2);
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	1e dd       	rcall	.-1476   	; 0x670 <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	2f dd       	rcall	.-1442   	; 0x696 <ssd1306_set_column_addr>
     c38:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(horizon1, 1);
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	8a e0       	ldi	r24, 0x0A	; 10
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	95 dc       	rcall	.-1750   	; 0x56c <ssd1306_data>
		ssd1306_set_page_start(7);
     c42:	87 e0       	ldi	r24, 0x07	; 7
     c44:	15 dd       	rcall	.-1494   	; 0x670 <ssd1306_set_page_start>
     c46:	89 81       	ldd	r24, Y+1	; 0x01
		ssd1306_set_column_addr(i);
     c48:	26 dd       	rcall	.-1460   	; 0x696 <ssd1306_set_column_addr>
     c4a:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(horizon2, 1);
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	8b e0       	ldi	r24, 0x0B	; 11
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	8c dc       	rcall	.-1768   	; 0x56c <ssd1306_data>
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	9a 81       	ldd	r25, Y+2	; 0x02


void title()
{
	oled_msg(0, 3, "KMM's SNAKE GAME");
	for(int i = 0; i < 128; i++)
     c58:	01 96       	adiw	r24, 0x01	; 1
     c5a:	9a 83       	std	Y+2, r25	; 0x02
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	9a 81       	ldd	r25, Y+2	; 0x02
     c62:	80 38       	cpi	r24, 0x80	; 128
     c64:	91 05       	cpc	r25, r1
     c66:	24 f3       	brlt	.-56     	; 0xc30 <title+0x38>
     c68:	1c 82       	std	Y+4, r1	; 0x04
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
     c6a:	1b 82       	std	Y+3, r1	; 0x03
     c6c:	15 c0       	rjmp	.+42     	; 0xc98 <title+0xa0>
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
	{
		ssd1306_set_page_start(i);
     c70:	ff dc       	rcall	.-1538   	; 0x670 <ssd1306_set_page_start>
     c72:	80 e0       	ldi	r24, 0x00	; 0
		ssd1306_set_column_addr(0);
     c74:	10 dd       	rcall	.-1504   	; 0x696 <ssd1306_set_column_addr>
     c76:	61 e0       	ldi	r22, 0x01	; 1
		ssd1306_data(vertical, 1);
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	8c e0       	ldi	r24, 0x0C	; 12
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	76 dc       	rcall	.-1812   	; 0x56c <ssd1306_data>
     c80:	8f e7       	ldi	r24, 0x7F	; 127
		ssd1306_set_column_addr(127);
     c82:	09 dd       	rcall	.-1518   	; 0x696 <ssd1306_set_column_addr>
     c84:	61 e0       	ldi	r22, 0x01	; 1
     c86:	70 e0       	ldi	r23, 0x00	; 0
		ssd1306_data(vertical, 1);
     c88:	8c e0       	ldi	r24, 0x0C	; 12
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	6f dc       	rcall	.-1826   	; 0x56c <ssd1306_data>
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
	for(int i = 0; i < 8; i++)
     c90:	9c 81       	ldd	r25, Y+4	; 0x04
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	9c 83       	std	Y+4, r25	; 0x04
     c96:	8b 83       	std	Y+3, r24	; 0x03
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	9c 81       	ldd	r25, Y+4	; 0x04
     c9c:	08 97       	sbiw	r24, 0x08	; 8
     c9e:	3c f3       	brlt	.-50     	; 0xc6e <title+0x76>
     ca0:	09 d0       	rcall	.+18     	; 0xcb4 <draw_map>
		ssd1306_data(vertical, 1);
		ssd1306_set_column_addr(127);
		ssd1306_data(vertical, 1);
	}

	draw_map();
     ca2:	5c d2       	rcall	.+1208   	; 0x115c <food>
     ca4:	00 00       	nop
	
	food(); // food 생성
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0

}
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <draw_map>:
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	cd b7       	in	r28, 0x3d	; 61

void draw_map()
{
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	c7 50       	subi	r28, 0x07	; 7
     cbe:	d3 40       	sbci	r29, 0x03	; 3
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
	unsigned char MAP [6][128] = {0};
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	33 e0       	ldi	r19, 0x03	; 3
     cce:	ce 01       	movw	r24, r28
     cd0:	08 96       	adiw	r24, 0x08	; 8
     cd2:	dc 01       	movw	r26, r24
     cd4:	f9 01       	movw	r30, r18
     cd6:	1d 92       	st	X+, r1
     cd8:	31 97       	sbiw	r30, 0x01	; 1
     cda:	e9 f7       	brne	.-6      	; 0xcd6 <draw_map+0x22>

	for(int i = 0; i < 6; i++)
     cdc:	1a 82       	std	Y+2, r1	; 0x02
     cde:	19 82       	std	Y+1, r1	; 0x01
     ce0:	7b c0       	rjmp	.+246    	; 0xdd8 <draw_map+0x124>
	{
		for(int j = 0; j < 128; j++)
     ce2:	1c 82       	std	Y+4, r1	; 0x04
     ce4:	1b 82       	std	Y+3, r1	; 0x03
     ce6:	6d c0       	rjmp	.+218    	; 0xdc2 <draw_map+0x10e>
		{
			if(j == 0) MAP[i][j] = vertical[0];
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	9c 81       	ldd	r25, Y+4	; 0x04
     cec:	89 2b       	or	r24, r25
     cee:	b1 f4       	brne	.+44     	; 0xd1c <draw_map+0x68>
     cf0:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <vertical>
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	96 95       	lsr	r25
     cfa:	98 2f       	mov	r25, r24
     cfc:	88 27       	eor	r24, r24
     cfe:	97 95       	ror	r25
     d00:	87 95       	ror	r24
     d02:	9e 01       	movw	r18, r28
     d04:	2f 5f       	subi	r18, 0xFF	; 255
     d06:	3f 4f       	sbci	r19, 0xFF	; 255
     d08:	28 0f       	add	r18, r24
     d0a:	39 1f       	adc	r19, r25
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	9c 81       	ldd	r25, Y+4	; 0x04
     d10:	82 0f       	add	r24, r18
     d12:	93 1f       	adc	r25, r19
     d14:	07 96       	adiw	r24, 0x07	; 7
     d16:	dc 01       	movw	r26, r24
     d18:	4c 93       	st	X, r20
     d1a:	4e c0       	rjmp	.+156    	; 0xdb8 <draw_map+0x104>
			else if(j == 127) MAP[i][j] = vertical[0];
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	8f 37       	cpi	r24, 0x7F	; 127
     d22:	91 05       	cpc	r25, r1
     d24:	b1 f4       	brne	.+44     	; 0xd52 <draw_map+0x9e>
     d26:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <vertical>
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	9a 81       	ldd	r25, Y+2	; 0x02
     d2e:	96 95       	lsr	r25
     d30:	98 2f       	mov	r25, r24
     d32:	88 27       	eor	r24, r24
     d34:	97 95       	ror	r25
     d36:	87 95       	ror	r24
     d38:	9e 01       	movw	r18, r28
     d3a:	2f 5f       	subi	r18, 0xFF	; 255
     d3c:	3f 4f       	sbci	r19, 0xFF	; 255
     d3e:	28 0f       	add	r18, r24
     d40:	39 1f       	adc	r19, r25
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	82 0f       	add	r24, r18
     d48:	93 1f       	adc	r25, r19
     d4a:	07 96       	adiw	r24, 0x07	; 7
     d4c:	fc 01       	movw	r30, r24
     d4e:	40 83       	st	Z, r20
     d50:	33 c0       	rjmp	.+102    	; 0xdb8 <draw_map+0x104>
			else if(i == 0) MAP[i][j] = horizon1[0];
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	89 2b       	or	r24, r25
     d58:	b1 f4       	brne	.+44     	; 0xd86 <draw_map+0xd2>
     d5a:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <horizon1>
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	9a 81       	ldd	r25, Y+2	; 0x02
     d62:	96 95       	lsr	r25
     d64:	98 2f       	mov	r25, r24
     d66:	88 27       	eor	r24, r24
     d68:	97 95       	ror	r25
     d6a:	87 95       	ror	r24
     d6c:	9e 01       	movw	r18, r28
     d6e:	2f 5f       	subi	r18, 0xFF	; 255
     d70:	3f 4f       	sbci	r19, 0xFF	; 255
     d72:	28 0f       	add	r18, r24
     d74:	39 1f       	adc	r19, r25
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	82 0f       	add	r24, r18
     d7c:	93 1f       	adc	r25, r19
     d7e:	07 96       	adiw	r24, 0x07	; 7
     d80:	dc 01       	movw	r26, r24
     d82:	4c 93       	st	X, r20
     d84:	19 c0       	rjmp	.+50     	; 0xdb8 <draw_map+0x104>
			else if(i == 5) MAP[i][j] = horizon2[0];
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	05 97       	sbiw	r24, 0x05	; 5
     d8c:	a9 f4       	brne	.+42     	; 0xdb8 <draw_map+0x104>
     d8e:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <horizon2>
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	96 95       	lsr	r25
     d98:	98 2f       	mov	r25, r24
     d9a:	88 27       	eor	r24, r24
     d9c:	97 95       	ror	r25
     d9e:	87 95       	ror	r24
     da0:	9e 01       	movw	r18, r28
     da2:	2f 5f       	subi	r18, 0xFF	; 255
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
     da6:	28 0f       	add	r18, r24
     da8:	39 1f       	adc	r19, r25
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	82 0f       	add	r24, r18
     db0:	93 1f       	adc	r25, r19
     db2:	07 96       	adiw	r24, 0x07	; 7
     db4:	fc 01       	movw	r30, r24
     db6:	40 83       	st	Z, r20
{
	unsigned char MAP [6][128] = {0};

	for(int i = 0; i < 6; i++)
	{
		for(int j = 0; j < 128; j++)
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	9c 83       	std	Y+4, r25	; 0x04
     dc0:	8b 83       	std	Y+3, r24	; 0x03
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	9c 81       	ldd	r25, Y+4	; 0x04
     dc6:	80 38       	cpi	r24, 0x80	; 128
     dc8:	91 05       	cpc	r25, r1
     dca:	0c f4       	brge	.+2      	; 0xdce <draw_map+0x11a>
     dcc:	8d cf       	rjmp	.-230    	; 0xce8 <draw_map+0x34>

void draw_map()
{
	unsigned char MAP [6][128] = {0};

	for(int i = 0; i < 6; i++)
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	9a 83       	std	Y+2, r25	; 0x02
     dd6:	89 83       	std	Y+1, r24	; 0x01
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	06 97       	sbiw	r24, 0x06	; 6
     dde:	0c f4       	brge	.+2      	; 0xde2 <draw_map+0x12e>
     de0:	80 cf       	rjmp	.-256    	; 0xce2 <draw_map+0x2e>
			else if(i == 0) MAP[i][j] = horizon1[0];
			else if(i == 5) MAP[i][j] = horizon2[0];
		}
	}

	MAP[food_y / 8][food_x] |= (0x01 << (food_y % 8));
     de2:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
     de6:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
     dea:	99 23       	and	r25, r25
     dec:	0c f4       	brge	.+2      	; 0xdf0 <draw_map+0x13c>
     dee:	07 96       	adiw	r24, 0x07	; 7
     df0:	95 95       	asr	r25
     df2:	87 95       	ror	r24
     df4:	95 95       	asr	r25
     df6:	87 95       	ror	r24
     df8:	95 95       	asr	r25
     dfa:	87 95       	ror	r24
     dfc:	9c 01       	movw	r18, r24
     dfe:	40 91 39 07 	lds	r20, 0x0739	; 0x800739 <food_x>
     e02:	50 91 3a 07 	lds	r21, 0x073A	; 0x80073a <food_x+0x1>
     e06:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
     e0a:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
     e0e:	b9 01       	movw	r22, r18
     e10:	76 95       	lsr	r23
     e12:	76 2f       	mov	r23, r22
     e14:	66 27       	eor	r22, r22
     e16:	77 95       	ror	r23
     e18:	67 95       	ror	r22
     e1a:	fe 01       	movw	r30, r28
     e1c:	31 96       	adiw	r30, 0x01	; 1
     e1e:	6e 0f       	add	r22, r30
     e20:	7f 1f       	adc	r23, r31
     e22:	86 0f       	add	r24, r22
     e24:	97 1f       	adc	r25, r23
     e26:	07 96       	adiw	r24, 0x07	; 7
     e28:	dc 01       	movw	r26, r24
     e2a:	8c 91       	ld	r24, X
     e2c:	e8 2f       	mov	r30, r24
     e2e:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
     e32:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
     e36:	87 70       	andi	r24, 0x07	; 7
     e38:	90 78       	andi	r25, 0x80	; 128
     e3a:	99 23       	and	r25, r25
     e3c:	24 f4       	brge	.+8      	; 0xe46 <draw_map+0x192>
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	88 6f       	ori	r24, 0xF8	; 248
     e42:	9f 6f       	ori	r25, 0xFF	; 255
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	bc 01       	movw	r22, r24
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <draw_map+0x19e>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	6a 95       	dec	r22
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <draw_map+0x19a>
     e56:	8e 2b       	or	r24, r30
     e58:	68 2f       	mov	r22, r24
     e5a:	c9 01       	movw	r24, r18
     e5c:	96 95       	lsr	r25
     e5e:	98 2f       	mov	r25, r24
     e60:	88 27       	eor	r24, r24
     e62:	97 95       	ror	r25
     e64:	87 95       	ror	r24
     e66:	9e 01       	movw	r18, r28
     e68:	2f 5f       	subi	r18, 0xFF	; 255
     e6a:	3f 4f       	sbci	r19, 0xFF	; 255
     e6c:	82 0f       	add	r24, r18
     e6e:	93 1f       	adc	r25, r19
     e70:	84 0f       	add	r24, r20
     e72:	95 1f       	adc	r25, r21
     e74:	07 96       	adiw	r24, 0x07	; 7
     e76:	fc 01       	movw	r30, r24
     e78:	60 83       	st	Z, r22


	for(int i=0;i<length;i++)	//뱀 몸통값 입력
     e7a:	1e 82       	std	Y+6, r1	; 0x06
     e7c:	1d 82       	std	Y+5, r1	; 0x05
     e7e:	56 c0       	rjmp	.+172    	; 0xf2c <draw_map+0x278>
	{
		MAP[y[i]/8][x[i]] |= (0x01 << (y[i] % 8));
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	9e 81       	ldd	r25, Y+6	; 0x06
     e84:	8b 52       	subi	r24, 0x2B	; 43
     e86:	9e 4f       	sbci	r25, 0xFE	; 254
     e88:	dc 01       	movw	r26, r24
     e8a:	8c 91       	ld	r24, X
     e8c:	48 2f       	mov	r20, r24
     e8e:	46 95       	lsr	r20
     e90:	46 95       	lsr	r20
     e92:	46 95       	lsr	r20
     e94:	24 2f       	mov	r18, r20
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	8d 81       	ldd	r24, Y+5	; 0x05
     e9a:	9e 81       	ldd	r25, Y+6	; 0x06
     e9c:	83 5f       	subi	r24, 0xF3	; 243
     e9e:	9e 4f       	sbci	r25, 0xFE	; 254
     ea0:	fc 01       	movw	r30, r24
     ea2:	80 81       	ld	r24, Z
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	64 2f       	mov	r22, r20
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	4d 81       	ldd	r20, Y+5	; 0x05
     eae:	5e 81       	ldd	r21, Y+6	; 0x06
     eb0:	43 5f       	subi	r20, 0xF3	; 243
     eb2:	5e 4f       	sbci	r21, 0xFE	; 254
     eb4:	da 01       	movw	r26, r20
     eb6:	4c 91       	ld	r20, X
     eb8:	44 2f       	mov	r20, r20
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	76 95       	lsr	r23
     ebe:	76 2f       	mov	r23, r22
     ec0:	66 27       	eor	r22, r22
     ec2:	77 95       	ror	r23
     ec4:	67 95       	ror	r22
     ec6:	fe 01       	movw	r30, r28
     ec8:	31 96       	adiw	r30, 0x01	; 1
     eca:	6e 0f       	add	r22, r30
     ecc:	7f 1f       	adc	r23, r31
     ece:	46 0f       	add	r20, r22
     ed0:	57 1f       	adc	r21, r23
     ed2:	49 5f       	subi	r20, 0xF9	; 249
     ed4:	5f 4f       	sbci	r21, 0xFF	; 255
     ed6:	fa 01       	movw	r30, r20
     ed8:	40 81       	ld	r20, Z
     eda:	e4 2f       	mov	r30, r20
     edc:	4d 81       	ldd	r20, Y+5	; 0x05
     ede:	5e 81       	ldd	r21, Y+6	; 0x06
     ee0:	4b 52       	subi	r20, 0x2B	; 43
     ee2:	5e 4f       	sbci	r21, 0xFE	; 254
     ee4:	da 01       	movw	r26, r20
     ee6:	4c 91       	ld	r20, X
     ee8:	44 2f       	mov	r20, r20
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	ba 01       	movw	r22, r20
     eee:	67 70       	andi	r22, 0x07	; 7
     ef0:	77 27       	eor	r23, r23
     ef2:	41 e0       	ldi	r20, 0x01	; 1
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <draw_map+0x248>
     ef8:	44 0f       	add	r20, r20
     efa:	55 1f       	adc	r21, r21
     efc:	6a 95       	dec	r22
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <draw_map+0x244>
     f00:	4e 2b       	or	r20, r30
     f02:	64 2f       	mov	r22, r20
     f04:	36 95       	lsr	r19
     f06:	32 2f       	mov	r19, r18
     f08:	22 27       	eor	r18, r18
     f0a:	37 95       	ror	r19
     f0c:	27 95       	ror	r18
     f0e:	ae 01       	movw	r20, r28
     f10:	4f 5f       	subi	r20, 0xFF	; 255
     f12:	5f 4f       	sbci	r21, 0xFF	; 255
     f14:	24 0f       	add	r18, r20
     f16:	35 1f       	adc	r19, r21
     f18:	82 0f       	add	r24, r18
     f1a:	93 1f       	adc	r25, r19
     f1c:	07 96       	adiw	r24, 0x07	; 7
     f1e:	fc 01       	movw	r30, r24
     f20:	60 83       	st	Z, r22
	}

	MAP[food_y / 8][food_x] |= (0x01 << (food_y % 8));


	for(int i=0;i<length;i++)	//뱀 몸통값 입력
     f22:	8d 81       	ldd	r24, Y+5	; 0x05
     f24:	9e 81       	ldd	r25, Y+6	; 0x06
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	9e 83       	std	Y+6, r25	; 0x06
     f2a:	8d 83       	std	Y+5, r24	; 0x05
     f2c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
     f30:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
     f34:	2d 81       	ldd	r18, Y+5	; 0x05
     f36:	3e 81       	ldd	r19, Y+6	; 0x06
     f38:	28 17       	cp	r18, r24
     f3a:	39 07       	cpc	r19, r25
     f3c:	0c f4       	brge	.+2      	; 0xf40 <draw_map+0x28c>
     f3e:	a0 cf       	rjmp	.-192    	; 0xe80 <draw_map+0x1cc>
	{
		MAP[y[i]/8][x[i]] |= (0x01 << (y[i] % 8));
	}

	unsigned char x,y;
	for(y=2;y<8;y++)
     f40:	82 e0       	ldi	r24, 0x02	; 2
     f42:	8f 83       	std	Y+7, r24	; 0x07
     f44:	16 c0       	rjmp	.+44     	; 0xf72 <draw_map+0x2be>
	{
		ssd1306_set_page_start(y);
     f46:	8f 81       	ldd	r24, Y+7	; 0x07
     f48:	93 db       	rcall	.-2266   	; 0x670 <ssd1306_set_page_start>
		ssd1306_data(MAP[y - 2], COL_NUM);
     f4a:	8f 81       	ldd	r24, Y+7	; 0x07
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 97       	sbiw	r24, 0x02	; 2
     f52:	9e 01       	movw	r18, r28
     f54:	28 5f       	subi	r18, 0xF8	; 248
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	96 95       	lsr	r25
     f5a:	98 2f       	mov	r25, r24
     f5c:	88 27       	eor	r24, r24
     f5e:	97 95       	ror	r25
     f60:	87 95       	ror	r24
     f62:	82 0f       	add	r24, r18
     f64:	93 1f       	adc	r25, r19
     f66:	60 e8       	ldi	r22, 0x80	; 128
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	00 db       	rcall	.-2560   	; 0x56c <ssd1306_data>
	{
		MAP[y[i]/8][x[i]] |= (0x01 << (y[i] % 8));
	}

	unsigned char x,y;
	for(y=2;y<8;y++)
     f6c:	8f 81       	ldd	r24, Y+7	; 0x07
     f6e:	8f 5f       	subi	r24, 0xFF	; 255
     f70:	8f 83       	std	Y+7, r24	; 0x07
     f72:	8f 81       	ldd	r24, Y+7	; 0x07
     f74:	88 30       	cpi	r24, 0x08	; 8
     f76:	38 f3       	brcs	.-50     	; 0xf46 <draw_map+0x292>
	{
		ssd1306_set_page_start(y);
		ssd1306_data(MAP[y - 2], COL_NUM);
	}
}
     f78:	00 00       	nop
     f7a:	c9 5f       	subi	r28, 0xF9	; 249
     f7c:	dc 4f       	sbci	r29, 0xFC	; 252
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	08 95       	ret

00000f8e <move>:


void move(int dir)
{
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	00 d0       	rcall	.+0      	; 0xf94 <move+0x6>
     f94:	00 d0       	rcall	.+0      	; 0xf96 <move+0x8>
     f96:	00 d0       	rcall	.+0      	; 0xf98 <move+0xa>
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	9e 83       	std	Y+6, r25	; 0x06
     f9e:	8d 83       	std	Y+5, r24	; 0x05
	
	

	if(x[0]==food_x&&y[0]==food_y)
     fa0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
     fac:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
     fb0:	28 17       	cp	r18, r24
     fb2:	39 07       	cpc	r19, r25
     fb4:	d9 f5       	brne	.+118    	; 0x102c <move+0x9e>
     fb6:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
     fc2:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
     fc6:	28 17       	cp	r18, r24
     fc8:	39 07       	cpc	r19, r25
     fca:	81 f5       	brne	.+96     	; 0x102c <move+0x9e>
	{ //food와 충돌했을 경우
		food(); //새로운 food 추가
     fcc:	c7 d0       	rcall	.+398    	; 0x115c <food>
		length++; //길이증가
     fce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
     fd2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <length+0x1>
     fdc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <length>
		x[length-1]=x[length-2]; //새로만든 몸통에 값 입력
     fe0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
     fe4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <length>
     fee:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <length+0x1>
     ff2:	22 50       	subi	r18, 0x02	; 2
     ff4:	31 09       	sbc	r19, r1
     ff6:	23 5f       	subi	r18, 0xF3	; 243
     ff8:	3e 4f       	sbci	r19, 0xFE	; 254
     ffa:	f9 01       	movw	r30, r18
     ffc:	20 81       	ld	r18, Z
     ffe:	83 5f       	subi	r24, 0xF3	; 243
    1000:	9e 4f       	sbci	r25, 0xFE	; 254
    1002:	fc 01       	movw	r30, r24
    1004:	20 83       	st	Z, r18
		y[length-1]=y[length-2];
    1006:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    100a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <length>
    1014:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <length+0x1>
    1018:	22 50       	subi	r18, 0x02	; 2
    101a:	31 09       	sbc	r19, r1
    101c:	2b 52       	subi	r18, 0x2B	; 43
    101e:	3e 4f       	sbci	r19, 0xFE	; 254
    1020:	f9 01       	movw	r30, r18
    1022:	20 81       	ld	r18, Z
    1024:	8b 52       	subi	r24, 0x2B	; 43
    1026:	9e 4f       	sbci	r25, 0xFE	; 254
    1028:	fc 01       	movw	r30, r24
    102a:	20 83       	st	Z, r18
	}
	if(x[0]==0||x[0]==127||y[0]==0||y[0]==47)
    102c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    1030:	88 23       	and	r24, r24
    1032:	61 f0       	breq	.+24     	; 0x104c <move+0xbe>
    1034:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    1038:	8f 37       	cpi	r24, 0x7F	; 127
    103a:	41 f0       	breq	.+16     	; 0x104c <move+0xbe>
    103c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    1040:	88 23       	and	r24, r24
    1042:	21 f0       	breq	.+8      	; 0x104c <move+0xbe>
    1044:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    1048:	8f 32       	cpi	r24, 0x2F	; 47
	{ //벽과 충돌했을 경우
		game_over();
    104a:	11 f4       	brne	.+4      	; 0x1050 <move+0xc2>
    104c:	f3 d0       	rcall	.+486    	; 0x1234 <game_over>
		return; //game_over에서 게임을 다시 시작하게 되면 여기서부터 반복되므로
    104e:	7d c0       	rjmp	.+250    	; 0x114a <__stack+0x4b>
		//return을 사용하여 move의 나머지 부분이 실행되지 않도록 합니다.
	}
	for(int i=1;i<length;i++)
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	9a 83       	std	Y+2, r25	; 0x02
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	1b c0       	rjmp	.+54     	; 0x1090 <move+0x102>
	{ //자기몸과 충돌했는지 검사
		if(x[0]==x[i] && y[0]==y[i])
    105a:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <x>
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	9a 81       	ldd	r25, Y+2	; 0x02
    1062:	83 5f       	subi	r24, 0xF3	; 243
    1064:	9e 4f       	sbci	r25, 0xFE	; 254
    1066:	fc 01       	movw	r30, r24
    1068:	80 81       	ld	r24, Z
    106a:	28 17       	cp	r18, r24
    106c:	61 f4       	brne	.+24     	; 0x1086 <move+0xf8>
    106e:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <y>
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	8b 52       	subi	r24, 0x2B	; 43
    1078:	9e 4f       	sbci	r25, 0xFE	; 254
    107a:	fc 01       	movw	r30, r24
    107c:	80 81       	ld	r24, Z
    107e:	28 17       	cp	r18, r24
		{
			game_over();
    1080:	11 f4       	brne	.+4      	; 0x1086 <move+0xf8>
    1082:	d8 d0       	rcall	.+432    	; 0x1234 <game_over>
			return;
    1084:	62 c0       	rjmp	.+196    	; 0x114a <__stack+0x4b>
	{ //벽과 충돌했을 경우
		game_over();
		return; //game_over에서 게임을 다시 시작하게 되면 여기서부터 반복되므로
		//return을 사용하여 move의 나머지 부분이 실행되지 않도록 합니다.
	}
	for(int i=1;i<length;i++)
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	9a 83       	std	Y+2, r25	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    1094:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    1098:	29 81       	ldd	r18, Y+1	; 0x01
    109a:	3a 81       	ldd	r19, Y+2	; 0x02
    109c:	28 17       	cp	r18, r24
    109e:	39 07       	cpc	r19, r25
    10a0:	e4 f2       	brlt	.-72     	; 0x105a <move+0xcc>
			return;
		}
	}
	

	for(int i=length - 1;i>0;i--){ //몸통좌표를 한칸씩 옮김
    10a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    10a6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	9c 83       	std	Y+4, r25	; 0x04
    10ae:	8b 83       	std	Y+3, r24	; 0x03
    10b0:	1f c0       	rjmp	.+62     	; 0x10f0 <move+0x162>
		x[i]=x[i-1];
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	9c 81       	ldd	r25, Y+4	; 0x04
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	83 5f       	subi	r24, 0xF3	; 243
    10ba:	9e 4f       	sbci	r25, 0xFE	; 254
    10bc:	fc 01       	movw	r30, r24
    10be:	20 81       	ld	r18, Z
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	83 5f       	subi	r24, 0xF3	; 243
    10c6:	9e 4f       	sbci	r25, 0xFE	; 254
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18
		y[i]=y[i-1];
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	9c 81       	ldd	r25, Y+4	; 0x04
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	8b 52       	subi	r24, 0x2B	; 43
    10d4:	9e 4f       	sbci	r25, 0xFE	; 254
    10d6:	fc 01       	movw	r30, r24
    10d8:	20 81       	ld	r18, Z
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	8b 52       	subi	r24, 0x2B	; 43
    10e0:	9e 4f       	sbci	r25, 0xFE	; 254
    10e2:	fc 01       	movw	r30, r24
    10e4:	20 83       	st	Z, r18
			return;
		}
	}
	

	for(int i=length - 1;i>0;i--){ //몸통좌표를 한칸씩 옮김
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	9c 83       	std	Y+4, r25	; 0x04
    10ee:	8b 83       	std	Y+3, r24	; 0x03
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	18 16       	cp	r1, r24
    10f6:	19 06       	cpc	r1, r25
    10f8:	e4 f2       	brlt	.-72     	; 0x10b2 <move+0x124>
		x[i]=x[i-1];
		y[i]=y[i-1];
	}

	if(dir==LEFT) x[0]--; //방향에 따라 새로운 머리좌표(x[0],y[0])값을 변경
    10fa:	8d 81       	ldd	r24, Y+5	; 0x05
    10fc:	9e 81       	ldd	r25, Y+6	; 0x06
    10fe:	8b 34       	cpi	r24, 0x4B	; 75
    1100:	91 05       	cpc	r25, r1
    1102:	29 f4       	brne	.+10     	; 0x110e <__stack+0xf>
    1104:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    1108:	81 50       	subi	r24, 0x01	; 1
    110a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <x>
	if(dir==RIGHT) x[0]++;
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	8d 34       	cpi	r24, 0x4D	; 77
    1114:	91 05       	cpc	r25, r1
    1116:	29 f4       	brne	.+10     	; 0x1122 <__stack+0x23>
    1118:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <x>
    111c:	8f 5f       	subi	r24, 0xFF	; 255
    111e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <x>
	if(dir==UP) y[0]--;
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	88 34       	cpi	r24, 0x48	; 72
    1128:	91 05       	cpc	r25, r1
    112a:	29 f4       	brne	.+10     	; 0x1136 <__stack+0x37>
    112c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    1130:	81 50       	subi	r24, 0x01	; 1
    1132:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <y>
	if(dir==DOWN) y[0]++;
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	9e 81       	ldd	r25, Y+6	; 0x06
    113a:	80 35       	cpi	r24, 0x50	; 80
    113c:	91 05       	cpc	r25, r1
    113e:	29 f4       	brne	.+10     	; 0x114a <__stack+0x4b>
    1140:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <y>
    1144:	8f 5f       	subi	r24, 0xFF	; 255
    1146:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <y>
	

	
	
}
    114a:	26 96       	adiw	r28, 0x06	; 6
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <food>:

void food()
{
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	00 d0       	rcall	.+0      	; 0x1162 <food+0x6>
    1162:	00 d0       	rcall	.+0      	; 0x1164 <food+0x8>
    1164:	00 d0       	rcall	.+0      	; 0x1166 <food+0xa>
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
	int food_crush_on=0;//food가 뱀 몸통좌표에 생길 경우 on
    116a:	1a 82       	std	Y+2, r1	; 0x02
    116c:	19 82       	std	Y+1, r1	; 0x01
	int r=0; //난수 생성에 사동되는 변수
    116e:	1e 82       	std	Y+6, r1	; 0x06
    1170:	1d 82       	std	Y+5, r1	; 0x05
	
	
	
	while(1){
		food_crush_on=0;
    1172:	1a 82       	std	Y+2, r1	; 0x02
    1174:	19 82       	std	Y+1, r1	; 0x01
		srand(TCNT0); //난수표생성
    1176:	82 e5       	ldi	r24, 0x52	; 82
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	fc 01       	movw	r30, r24
    117c:	80 81       	ld	r24, Z
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	27 d4       	rcall	.+2126   	; 0x19d2 <srand>
		food_x=(rand()%125)+2;    //난수를 좌표값에 넣음
    1184:	23 d4       	rcall	.+2118   	; 0x19cc <rand>
    1186:	2d e7       	ldi	r18, 0x7D	; 125
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	b9 01       	movw	r22, r18
    118c:	b1 d3       	rcall	.+1890   	; 0x18f0 <__divmodhi4>
    118e:	02 96       	adiw	r24, 0x02	; 2
    1190:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <food_x+0x1>
    1194:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <food_x>
		food_y=(rand()%45)+2;
    1198:	19 d4       	rcall	.+2098   	; 0x19cc <rand>
    119a:	2d e2       	ldi	r18, 0x2D	; 45
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	b9 01       	movw	r22, r18
    11a0:	a7 d3       	rcall	.+1870   	; 0x18f0 <__divmodhi4>
    11a2:	02 96       	adiw	r24, 0x02	; 2
    11a4:	90 93 40 07 	sts	0x0740, r25	; 0x800740 <food_y+0x1>
    11a8:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <food_y>
    11ac:	1c 82       	std	Y+4, r1	; 0x04
		
		for(int i=0;i<length;i++)
    11ae:	1b 82       	std	Y+3, r1	; 0x03
    11b0:	28 c0       	rjmp	.+80     	; 0x1202 <food+0xa6>
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
		{ //food가 뱀 몸통과 겹치는지 확인
			if(food_x==x[i]&&food_y==y[i])
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	83 5f       	subi	r24, 0xF3	; 243
    11b8:	9e 4f       	sbci	r25, 0xFE	; 254
    11ba:	fc 01       	movw	r30, r24
    11bc:	80 81       	ld	r24, Z
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <food_x>
    11c6:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <food_x+0x1>
    11ca:	28 17       	cp	r18, r24
    11cc:	39 07       	cpc	r19, r25
    11ce:	a1 f4       	brne	.+40     	; 0x11f8 <food+0x9c>
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	8b 52       	subi	r24, 0x2B	; 43
    11d6:	9e 4f       	sbci	r25, 0xFE	; 254
    11d8:	fc 01       	movw	r30, r24
    11da:	80 81       	ld	r24, Z
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <food_y>
    11e4:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <food_y+0x1>
    11e8:	28 17       	cp	r18, r24
    11ea:	39 07       	cpc	r19, r25
    11ec:	29 f4       	brne	.+10     	; 0x11f8 <food+0x9c>
    11ee:	81 e0       	ldi	r24, 0x01	; 1
			{
				food_crush_on=1; //겹치면 food_crush_on 를 on
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	0e c0       	rjmp	.+28     	; 0x1214 <food+0xb8>
				break;
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
		food_crush_on=0;
		srand(TCNT0); //난수표생성
		food_x=(rand()%125)+2;    //난수를 좌표값에 넣음
		food_y=(rand()%45)+2;
		
		for(int i=0;i<length;i++)
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	9c 83       	std	Y+4, r25	; 0x04
    1200:	8b 83       	std	Y+3, r24	; 0x03
    1202:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <length>
    1206:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <length+0x1>
    120a:	2b 81       	ldd	r18, Y+3	; 0x03
    120c:	3c 81       	ldd	r19, Y+4	; 0x04
    120e:	28 17       	cp	r18, r24
    1210:	39 07       	cpc	r19, r25
    1212:	7c f2       	brlt	.-98     	; 0x11b2 <food+0x56>
    1214:	89 81       	ldd	r24, Y+1	; 0x01
				food_crush_on=1; //겹치면 food_crush_on 를 on
				break;
			}
		}
		
		if(food_crush_on==1) continue; //겹쳤을 경우 while문을 다시 시작
    1216:	9a 81       	ldd	r25, Y+2	; 0x02
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	09 f4       	brne	.+2      	; 0x121e <food+0xc2>
    121c:	aa cf       	rjmp	.-172    	; 0x1172 <food+0x16>
		
		break;
		
	}
    121e:	00 00       	nop
			}
		}
		
		if(food_crush_on==1) continue; //겹쳤을 경우 while문을 다시 시작
		
		break;
    1220:	00 00       	nop
		
	}
}
    1222:	26 96       	adiw	r28, 0x06	; 6
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	08 95       	ret

00001234 <game_over>:
    1234:	cf 93       	push	r28


void game_over()
{
    1236:	df 93       	push	r29
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	62 97       	sbiw	r28, 0x12	; 18
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
	game = 0;
    1248:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <game+0x1>
    124c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <game>
	clear_map();
    1250:	e5 d1       	rcall	.+970    	; 0x161c <clear_map>
	oled_msg(4, 6, "GAME OVER");
    1252:	8e ea       	ldi	r24, 0xAE	; 174
    1254:	92 e0       	ldi	r25, 0x02	; 2
    1256:	89 2f       	mov	r24, r25
    1258:	8f 93       	push	r24
    125a:	8e ea       	ldi	r24, 0xAE	; 174
    125c:	92 e0       	ldi	r25, 0x02	; 2
    125e:	8f 93       	push	r24
    1260:	1f 92       	push	r1
    1262:	86 e0       	ldi	r24, 0x06	; 6
    1264:	8f 93       	push	r24
    1266:	1f 92       	push	r1
    1268:	84 e0       	ldi	r24, 0x04	; 4
    126a:	8f 93       	push	r24
    126c:	29 db       	rcall	.-2478   	; 0x8c0 <oled_msg>
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
	ssd1306_set_column_addr(0);
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	0c da       	rcall	.-3048   	; 0x696 <ssd1306_set_column_addr>
    127e:	00 00       	nop
	while(game != 1);
    1280:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
    1284:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	d1 f7       	brne	.-12     	; 0x1280 <game_over+0x4c>
    128c:	80 e4       	ldi	r24, 0x40	; 64

	x[0] = 64;
    128e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <x>
    1292:	8f e3       	ldi	r24, 0x3F	; 63
	x[1] = 63;
    1294:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <x+0x1>
    1298:	8e e3       	ldi	r24, 0x3E	; 62
	x[2] = 62;
    129a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <x+0x2>
    129e:	80 e2       	ldi	r24, 0x20	; 32
	y[0] = 32;
    12a0:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <y>
    12a4:	80 e2       	ldi	r24, 0x20	; 32
	y[1] = 32;
    12a6:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <y+0x1>
    12aa:	80 e2       	ldi	r24, 0x20	; 32
	y[2] = 32;
    12ac:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <y+0x2>
    12b0:	83 e0       	ldi	r24, 0x03	; 3

	for(int i = 3; i < 200; i++)
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	0b c0       	rjmp	.+22     	; 0x12d0 <game_over+0x9c>
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
	{
		x[i] = 0;
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	83 5f       	subi	r24, 0xF3	; 243
    12c0:	9e 4f       	sbci	r25, 0xFE	; 254
    12c2:	fc 01       	movw	r30, r24
    12c4:	10 82       	st	Z, r1
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
	x[2] = 62;
	y[0] = 32;
	y[1] = 32;
	y[2] = 32;

	for(int i = 3; i < 200; i++)
    12c8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	9a 83       	std	Y+2, r25	; 0x02
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	88 3c       	cpi	r24, 0xC8	; 200
    12d6:	91 05       	cpc	r25, r1
    12d8:	84 f3       	brlt	.-32     	; 0x12ba <game_over+0x86>
    12da:	83 e0       	ldi	r24, 0x03	; 3
	{
		x[i] = 0;
	}
	for(int i = 3; i < 200; i++)
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	9c 83       	std	Y+4, r25	; 0x04
    12e0:	8b 83       	std	Y+3, r24	; 0x03
    12e2:	0b c0       	rjmp	.+22     	; 0x12fa <game_over+0xc6>
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
	{
		y[i] = 0;
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	8b 52       	subi	r24, 0x2B	; 43
    12ea:	9e 4f       	sbci	r25, 0xFE	; 254
    12ec:	fc 01       	movw	r30, r24
    12ee:	10 82       	st	Z, r1
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03

	for(int i = 3; i < 200; i++)
	{
		x[i] = 0;
	}
	for(int i = 3; i < 200; i++)
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	01 96       	adiw	r24, 0x01	; 1
    12f6:	9c 83       	std	Y+4, r25	; 0x04
    12f8:	8b 83       	std	Y+3, r24	; 0x03
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	88 3c       	cpi	r24, 0xC8	; 200
    1300:	91 05       	cpc	r25, r1
    1302:	84 f3       	brlt	.-32     	; 0x12e4 <game_over+0xb0>
    1304:	83 e0       	ldi	r24, 0x03	; 3
	{
		y[i] = 0;
	}
	length = 3;
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <length+0x1>
    130c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <length>
	draw_picture(KO);
    1310:	88 eb       	ldi	r24, 0xB8	; 184
    1312:	92 e0       	ldi	r25, 0x02	; 2
    1314:	3a db       	rcall	.-2444   	; 0x98a <draw_picture>
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	a8 ec       	ldi	r26, 0xC8	; 200
    131c:	b3 e4       	ldi	r27, 0x43	; 67
    131e:	8d 83       	std	Y+5, r24	; 0x05
    1320:	9e 83       	std	Y+6, r25	; 0x06
    1322:	af 83       	std	Y+7, r26	; 0x07
    1324:	b8 87       	std	Y+8, r27	; 0x08
    1326:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	4a e7       	ldi	r20, 0x7A	; 122
    132c:	55 e4       	ldi	r21, 0x45	; 69
    132e:	6d 81       	ldd	r22, Y+5	; 0x05
    1330:	7e 81       	ldd	r23, Y+6	; 0x06
    1332:	8f 81       	ldd	r24, Y+7	; 0x07
    1334:	98 85       	ldd	r25, Y+8	; 0x08
    1336:	51 d2       	rcall	.+1186   	; 0x17da <__mulsf3>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	89 87       	std	Y+9, r24	; 0x09
    133e:	9a 87       	std	Y+10, r25	; 0x0a
    1340:	ab 87       	std	Y+11, r26	; 0x0b
    1342:	bc 87       	std	Y+12, r27	; 0x0c
    1344:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e8       	ldi	r20, 0x80	; 128
    134a:	5f e3       	ldi	r21, 0x3F	; 63
    134c:	69 85       	ldd	r22, Y+9	; 0x09
    134e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1350:	8b 85       	ldd	r24, Y+11	; 0x0b
    1352:	9c 85       	ldd	r25, Y+12	; 0x0c
    1354:	c1 d1       	rcall	.+898    	; 0x16d8 <__cmpsf2>
    1356:	88 23       	and	r24, r24
    1358:	2c f4       	brge	.+10     	; 0x1364 <game_over+0x130>
    135a:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	9e 87       	std	Y+14, r25	; 0x0e
    1360:	8d 87       	std	Y+13, r24	; 0x0d
    1362:	3b c0       	rjmp	.+118    	; 0x13da <game_over+0x1a6>
    1364:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    1366:	3f ef       	ldi	r19, 0xFF	; 255
    1368:	4f e7       	ldi	r20, 0x7F	; 127
    136a:	57 e4       	ldi	r21, 0x47	; 71
    136c:	69 85       	ldd	r22, Y+9	; 0x09
    136e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1370:	8b 85       	ldd	r24, Y+11	; 0x0b
    1372:	9c 85       	ldd	r25, Y+12	; 0x0c
    1374:	2e d2       	rcall	.+1116   	; 0x17d2 <__gesf2>
    1376:	18 16       	cp	r1, r24
    1378:	3c f5       	brge	.+78     	; 0x13c8 <game_over+0x194>
    137a:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e2       	ldi	r20, 0x20	; 32
    1380:	51 e4       	ldi	r21, 0x41	; 65
    1382:	6d 81       	ldd	r22, Y+5	; 0x05
    1384:	7e 81       	ldd	r23, Y+6	; 0x06
    1386:	8f 81       	ldd	r24, Y+7	; 0x07
    1388:	98 85       	ldd	r25, Y+8	; 0x08
    138a:	27 d2       	rcall	.+1102   	; 0x17da <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	bc 01       	movw	r22, r24
    1392:	cd 01       	movw	r24, r26
    1394:	a5 d1       	rcall	.+842    	; 0x16e0 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9e 87       	std	Y+14, r25	; 0x0e
    139c:	8d 87       	std	Y+13, r24	; 0x0d
    139e:	0f c0       	rjmp	.+30     	; 0x13be <game_over+0x18a>
    13a0:	80 e9       	ldi	r24, 0x90	; 144
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	98 8b       	std	Y+16, r25	; 0x10
    13a6:	8f 87       	std	Y+15, r24	; 0x0f
    13a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13aa:	98 89       	ldd	r25, Y+16	; 0x10
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <game_over+0x178>
    13b0:	98 8b       	std	Y+16, r25	; 0x10
    13b2:	8f 87       	std	Y+15, r24	; 0x0f
    13b4:	8d 85       	ldd	r24, Y+13	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	9e 87       	std	Y+14, r25	; 0x0e
    13bc:	8d 87       	std	Y+13, r24	; 0x0d
    13be:	8d 85       	ldd	r24, Y+13	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c2:	89 2b       	or	r24, r25
    13c4:	69 f7       	brne	.-38     	; 0x13a0 <game_over+0x16c>
    13c6:	13 c0       	rjmp	.+38     	; 0x13ee <game_over+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c8:	69 85       	ldd	r22, Y+9	; 0x09
    13ca:	7a 85       	ldd	r23, Y+10	; 0x0a
    13cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    13d0:	87 d1       	rcall	.+782    	; 0x16e0 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	9e 87       	std	Y+14, r25	; 0x0e
    13d8:	8d 87       	std	Y+13, r24	; 0x0d
    13da:	8d 85       	ldd	r24, Y+13	; 0x0d
    13dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13de:	9a 8b       	std	Y+18, r25	; 0x12
    13e0:	89 8b       	std	Y+17, r24	; 0x11
    13e2:	89 89       	ldd	r24, Y+17	; 0x11
    13e4:	9a 89       	ldd	r25, Y+18	; 0x12
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <game_over+0x1b2>
    13ea:	9a 8b       	std	Y+18, r25	; 0x12
	_delay_ms(400);
	clear_screen();
    13ec:	89 8b       	std	Y+17, r24	; 0x11
    13ee:	3d da       	rcall	.-2950   	; 0x86a <clear_screen>
	title();
    13f0:	03 dc       	rcall	.-2042   	; 0xbf8 <title>
    13f2:	00 00       	nop
}
    13f4:	62 96       	adiw	r28, 0x12	; 18
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <main>:
    1406:	cf 93       	push	r28


int main(void)
{
    1408:	df 93       	push	r29
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	6c 97       	sbiw	r28, 0x1c	; 28
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		DDRE = 0x00;
    141a:	82 e2       	ldi	r24, 0x22	; 34
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	fc 01       	movw	r30, r24
    1420:	10 82       	st	Z, r1
		EICRB = (2 << ISC40) | (2 << ISC50) | (2 << ISC60) | (2 << ISC70);
    1422:	8a e5       	ldi	r24, 0x5A	; 90
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	2a ea       	ldi	r18, 0xAA	; 170
    1428:	fc 01       	movw	r30, r24
    142a:	20 83       	st	Z, r18
		EIMSK = (1 << INT4) | (1 << INT5) | (1 << INT6) | (1 << INT7);
    142c:	89 e5       	ldi	r24, 0x59	; 89
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	20 ef       	ldi	r18, 0xF0	; 240
    1432:	fc 01       	movw	r30, r24
    1434:	20 83       	st	Z, r18
		sei();
    1436:	78 94       	sei

		

		TCCR0 = 0x07;
    1438:	83 e5       	ldi	r24, 0x53	; 83
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	27 e0       	ldi	r18, 0x07	; 7
    143e:	fc 01       	movw	r30, r24
    1440:	20 83       	st	Z, r18
		//TCNT0 = 0x00;

		setup();
    1442:	cc da       	rcall	.-2664   	; 0x9dc <setup>
		draw_picture(KO);
    1444:	88 eb       	ldi	r24, 0xB8	; 184
    1446:	92 e0       	ldi	r25, 0x02	; 2
    1448:	a0 da       	rcall	.-2752   	; 0x98a <draw_picture>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e8       	ldi	r25, 0x80	; 128
    144e:	ab eb       	ldi	r26, 0xBB	; 187
    1450:	b4 e4       	ldi	r27, 0x44	; 68
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	9e 83       	std	Y+6, r25	; 0x06
    1456:	af 83       	std	Y+7, r26	; 0x07
    1458:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	4a e7       	ldi	r20, 0x7A	; 122
    1460:	55 e4       	ldi	r21, 0x45	; 69
    1462:	6d 81       	ldd	r22, Y+5	; 0x05
    1464:	7e 81       	ldd	r23, Y+6	; 0x06
    1466:	8f 81       	ldd	r24, Y+7	; 0x07
    1468:	98 85       	ldd	r25, Y+8	; 0x08
    146a:	b7 d1       	rcall	.+878    	; 0x17da <__mulsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	89 87       	std	Y+9, r24	; 0x09
    1472:	9a 87       	std	Y+10, r25	; 0x0a
    1474:	ab 87       	std	Y+11, r26	; 0x0b
    1476:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e8       	ldi	r20, 0x80	; 128
    147e:	5f e3       	ldi	r21, 0x3F	; 63
    1480:	69 85       	ldd	r22, Y+9	; 0x09
    1482:	7a 85       	ldd	r23, Y+10	; 0x0a
    1484:	8b 85       	ldd	r24, Y+11	; 0x0b
    1486:	9c 85       	ldd	r25, Y+12	; 0x0c
    1488:	27 d1       	rcall	.+590    	; 0x16d8 <__cmpsf2>
    148a:	88 23       	and	r24, r24
    148c:	2c f4       	brge	.+10     	; 0x1498 <main+0x92>
		__ticks = 1;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	9e 87       	std	Y+14, r25	; 0x0e
    1494:	8d 87       	std	Y+13, r24	; 0x0d
    1496:	3b c0       	rjmp	.+118    	; 0x150e <main+0x108>
	else if (__tmp > 65535)
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	3f ef       	ldi	r19, 0xFF	; 255
    149c:	4f e7       	ldi	r20, 0x7F	; 127
    149e:	57 e4       	ldi	r21, 0x47	; 71
    14a0:	69 85       	ldd	r22, Y+9	; 0x09
    14a2:	7a 85       	ldd	r23, Y+10	; 0x0a
    14a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    14a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    14a8:	94 d1       	rcall	.+808    	; 0x17d2 <__gesf2>
    14aa:	18 16       	cp	r1, r24
    14ac:	3c f5       	brge	.+78     	; 0x14fc <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e2       	ldi	r20, 0x20	; 32
    14b4:	51 e4       	ldi	r21, 0x41	; 65
    14b6:	6d 81       	ldd	r22, Y+5	; 0x05
    14b8:	7e 81       	ldd	r23, Y+6	; 0x06
    14ba:	8f 81       	ldd	r24, Y+7	; 0x07
    14bc:	98 85       	ldd	r25, Y+8	; 0x08
    14be:	8d d1       	rcall	.+794    	; 0x17da <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	0b d1       	rcall	.+534    	; 0x16e0 <__fixunssfsi>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	9e 87       	std	Y+14, r25	; 0x0e
    14d0:	8d 87       	std	Y+13, r24	; 0x0d
    14d2:	0f c0       	rjmp	.+30     	; 0x14f2 <main+0xec>
    14d4:	80 e9       	ldi	r24, 0x90	; 144
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	98 8b       	std	Y+16, r25	; 0x10
    14da:	8f 87       	std	Y+15, r24	; 0x0f
    14dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14de:	98 89       	ldd	r25, Y+16	; 0x10
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <main+0xda>
    14e4:	98 8b       	std	Y+16, r25	; 0x10
    14e6:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	9e 87       	std	Y+14, r25	; 0x0e
    14f0:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f6:	89 2b       	or	r24, r25
    14f8:	69 f7       	brne	.-38     	; 0x14d4 <main+0xce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fa:	13 c0       	rjmp	.+38     	; 0x1522 <main+0x11c>
    14fc:	69 85       	ldd	r22, Y+9	; 0x09
    14fe:	7a 85       	ldd	r23, Y+10	; 0x0a
    1500:	8b 85       	ldd	r24, Y+11	; 0x0b
    1502:	9c 85       	ldd	r25, Y+12	; 0x0c
    1504:	ed d0       	rcall	.+474    	; 0x16e0 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	9e 87       	std	Y+14, r25	; 0x0e
    150c:	8d 87       	std	Y+13, r24	; 0x0d
    150e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1510:	9e 85       	ldd	r25, Y+14	; 0x0e
    1512:	9a 8b       	std	Y+18, r25	; 0x12
    1514:	89 8b       	std	Y+17, r24	; 0x11
    1516:	89 89       	ldd	r24, Y+17	; 0x11
    1518:	9a 89       	ldd	r25, Y+18	; 0x12
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	f1 f7       	brne	.-4      	; 0x151a <main+0x114>
		_delay_ms(1500);
		clear_screen();
    151e:	9a 8b       	std	Y+18, r25	; 0x12
		title();
    1520:	89 8b       	std	Y+17, r24	; 0x11
    1522:	a3 d9       	rcall	.-3258   	; 0x86a <clear_screen>
		

		while(game == 1)
    1524:	69 db       	rcall	.-2350   	; 0xbf8 <title>
		{
			
			move(dir);
    1526:	72 c0       	rjmp	.+228    	; 0x160c <main+0x206>
    1528:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dir>
    152c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dir+0x1>
    1530:	2e dd       	rcall	.-1444   	; 0xf8e <move>
			draw_map();
    1532:	c0 db       	rcall	.-2176   	; 0xcb4 <draw_map>
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	a6 e1       	ldi	r26, 0x16	; 22
    153a:	b3 e4       	ldi	r27, 0x43	; 67
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	9a 83       	std	Y+2, r25	; 0x02
    1540:	ab 83       	std	Y+3, r26	; 0x03
    1542:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	4a e7       	ldi	r20, 0x7A	; 122
    154a:	55 e4       	ldi	r21, 0x45	; 69
    154c:	69 81       	ldd	r22, Y+1	; 0x01
    154e:	7a 81       	ldd	r23, Y+2	; 0x02
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	42 d1       	rcall	.+644    	; 0x17da <__mulsf3>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	8b 8b       	std	Y+19, r24	; 0x13
    155c:	9c 8b       	std	Y+20, r25	; 0x14
    155e:	ad 8b       	std	Y+21, r26	; 0x15
    1560:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e8       	ldi	r20, 0x80	; 128
    1568:	5f e3       	ldi	r21, 0x3F	; 63
    156a:	6b 89       	ldd	r22, Y+19	; 0x13
    156c:	7c 89       	ldd	r23, Y+20	; 0x14
    156e:	8d 89       	ldd	r24, Y+21	; 0x15
    1570:	9e 89       	ldd	r25, Y+22	; 0x16
    1572:	b2 d0       	rcall	.+356    	; 0x16d8 <__cmpsf2>
    1574:	88 23       	and	r24, r24
    1576:	2c f4       	brge	.+10     	; 0x1582 <main+0x17c>
		__ticks = 1;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	98 8f       	std	Y+24, r25	; 0x18
    157e:	8f 8b       	std	Y+23, r24	; 0x17
    1580:	3b c0       	rjmp	.+118    	; 0x15f8 <main+0x1f2>
	else if (__tmp > 65535)
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	3f ef       	ldi	r19, 0xFF	; 255
    1586:	4f e7       	ldi	r20, 0x7F	; 127
    1588:	57 e4       	ldi	r21, 0x47	; 71
    158a:	6b 89       	ldd	r22, Y+19	; 0x13
    158c:	7c 89       	ldd	r23, Y+20	; 0x14
    158e:	8d 89       	ldd	r24, Y+21	; 0x15
    1590:	9e 89       	ldd	r25, Y+22	; 0x16
    1592:	1f d1       	rcall	.+574    	; 0x17d2 <__gesf2>
    1594:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1596:	3c f5       	brge	.+78     	; 0x15e6 <main+0x1e0>
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e2       	ldi	r20, 0x20	; 32
    159e:	51 e4       	ldi	r21, 0x41	; 65
    15a0:	69 81       	ldd	r22, Y+1	; 0x01
    15a2:	7a 81       	ldd	r23, Y+2	; 0x02
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	18 d1       	rcall	.+560    	; 0x17da <__mulsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	bc 01       	movw	r22, r24
    15b0:	cd 01       	movw	r24, r26
    15b2:	96 d0       	rcall	.+300    	; 0x16e0 <__fixunssfsi>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	98 8f       	std	Y+24, r25	; 0x18
    15ba:	8f 8b       	std	Y+23, r24	; 0x17
    15bc:	0f c0       	rjmp	.+30     	; 0x15dc <main+0x1d6>
    15be:	80 e9       	ldi	r24, 0x90	; 144
    15c0:	91 e0       	ldi	r25, 0x01	; 1
    15c2:	9a 8f       	std	Y+26, r25	; 0x1a
    15c4:	89 8f       	std	Y+25, r24	; 0x19
    15c6:	89 8d       	ldd	r24, Y+25	; 0x19
    15c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <main+0x1c4>
    15ce:	9a 8f       	std	Y+26, r25	; 0x1a
    15d0:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d2:	8f 89       	ldd	r24, Y+23	; 0x17
    15d4:	98 8d       	ldd	r25, Y+24	; 0x18
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	98 8f       	std	Y+24, r25	; 0x18
    15da:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15dc:	8f 89       	ldd	r24, Y+23	; 0x17
    15de:	98 8d       	ldd	r25, Y+24	; 0x18
    15e0:	89 2b       	or	r24, r25
    15e2:	69 f7       	brne	.-38     	; 0x15be <main+0x1b8>
    15e4:	13 c0       	rjmp	.+38     	; 0x160c <main+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e6:	6b 89       	ldd	r22, Y+19	; 0x13
    15e8:	7c 89       	ldd	r23, Y+20	; 0x14
    15ea:	8d 89       	ldd	r24, Y+21	; 0x15
    15ec:	9e 89       	ldd	r25, Y+22	; 0x16
    15ee:	78 d0       	rcall	.+240    	; 0x16e0 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	98 8f       	std	Y+24, r25	; 0x18
    15f6:	8f 8b       	std	Y+23, r24	; 0x17
    15f8:	8f 89       	ldd	r24, Y+23	; 0x17
    15fa:	98 8d       	ldd	r25, Y+24	; 0x18
    15fc:	9c 8f       	std	Y+28, r25	; 0x1c
    15fe:	8b 8f       	std	Y+27, r24	; 0x1b
    1600:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1602:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <main+0x1fe>
    1608:	9c 8f       	std	Y+28, r25	; 0x1c
    160a:	8b 8f       	std	Y+27, r24	; 0x1b
    160c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <game>
		_delay_ms(1500);
		clear_screen();
		title();
		

		while(game == 1)
    1610:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <game+0x1>
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	09 f4       	brne	.+2      	; 0x161a <main+0x214>
    1618:	87 cf       	rjmp	.-242    	; 0x1528 <main+0x122>
    161a:	ff ce       	rjmp	.-514    	; 0x141a <main+0x14>

0000161c <clear_map>:
			move(dir);
			draw_map();
			_delay_ms(150);
			
		}
	}
    161c:	cf 93       	push	r28
	
}

void clear_map()
{
    161e:	df 93       	push	r29
    1620:	00 d0       	rcall	.+0      	; 0x1622 <clear_map+0x6>
    1622:	00 d0       	rcall	.+0      	; 0x1624 <clear_map+0x8>
    1624:	00 d0       	rcall	.+0      	; 0x1626 <clear_map+0xa>
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
	for(int i = 1; i < 127; i++)
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	1d c0       	rjmp	.+58     	; 0x166e <clear_map+0x52>
	{
		
		for(int j = 3; j < 7; j++)
    1634:	83 e0       	ldi	r24, 0x03	; 3
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	9c 83       	std	Y+4, r25	; 0x04
    163a:	8b 83       	std	Y+3, r24	; 0x03
    163c:	0f c0       	rjmp	.+30     	; 0x165c <clear_map+0x40>
		{
			ssd1306_set_page_start(j);
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	17 d8       	rcall	.-4050   	; 0x670 <ssd1306_set_page_start>
			ssd1306_set_column_addr(i);
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	28 d8       	rcall	.-4016   	; 0x696 <ssd1306_set_column_addr>
			ssd1306_data(blank, 1);
    1646:	61 e0       	ldi	r22, 0x01	; 1
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	88 e3       	ldi	r24, 0x38	; 56
    164c:	97 e0       	ldi	r25, 0x07	; 7
    164e:	0e 94 b6 02 	call	0x56c	; 0x56c <ssd1306_data>
void clear_map()
{
	for(int i = 1; i < 127; i++)
	{
		
		for(int j = 3; j < 7; j++)
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	9c 83       	std	Y+4, r25	; 0x04
    165a:	8b 83       	std	Y+3, r24	; 0x03
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	07 97       	sbiw	r24, 0x07	; 7
    1662:	6c f3       	brlt	.-38     	; 0x163e <clear_map+0x22>
	
}

void clear_map()
{
	for(int i = 1; i < 127; i++)
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	8f 37       	cpi	r24, 0x7F	; 127
    1674:	91 05       	cpc	r25, r1
    1676:	f4 f2       	brlt	.-68     	; 0x1634 <clear_map+0x18>
			ssd1306_set_column_addr(i);
			ssd1306_data(blank, 1);
		}
	}

	for(int i = 1; i < 127; i++)
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	9e 83       	std	Y+6, r25	; 0x06
    167e:	8d 83       	std	Y+5, r24	; 0x05
    1680:	1c c0       	rjmp	.+56     	; 0x16ba <clear_map+0x9e>
	{
		ssd1306_set_page_start(2);
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	0e 94 38 03 	call	0x670	; 0x670 <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	05 d8       	rcall	.-4086   	; 0x696 <ssd1306_set_column_addr>
		ssd1306_data(horizon1, 1);
    168c:	61 e0       	ldi	r22, 0x01	; 1
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	8a e0       	ldi	r24, 0x0A	; 10
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	0e 94 b6 02 	call	0x56c	; 0x56c <ssd1306_data>
		ssd1306_set_page_start(7);
    1698:	87 e0       	ldi	r24, 0x07	; 7
    169a:	0e 94 38 03 	call	0x670	; 0x670 <ssd1306_set_page_start>
		ssd1306_set_column_addr(i);
    169e:	8d 81       	ldd	r24, Y+5	; 0x05
    16a0:	0e 94 4b 03 	call	0x696	; 0x696 <ssd1306_set_column_addr>
		ssd1306_data(horizon2, 1);
    16a4:	61 e0       	ldi	r22, 0x01	; 1
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	8b e0       	ldi	r24, 0x0B	; 11
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	0e 94 b6 02 	call	0x56c	; 0x56c <ssd1306_data>
			ssd1306_set_column_addr(i);
			ssd1306_data(blank, 1);
		}
	}

	for(int i = 1; i < 127; i++)
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	9e 81       	ldd	r25, Y+6	; 0x06
    16b4:	01 96       	adiw	r24, 0x01	; 1
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	8d 83       	std	Y+5, r24	; 0x05
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	8f 37       	cpi	r24, 0x7F	; 127
    16c0:	91 05       	cpc	r25, r1
    16c2:	fc f2       	brlt	.-66     	; 0x1682 <clear_map+0x66>
		ssd1306_data(horizon1, 1);
		ssd1306_set_page_start(7);
		ssd1306_set_column_addr(i);
		ssd1306_data(horizon2, 1);
	}
    16c4:	00 00       	nop
    16c6:	26 96       	adiw	r28, 0x06	; 6
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	08 95       	ret

000016d8 <__cmpsf2>:
    16d8:	2f d0       	rcall	.+94     	; 0x1738 <__fp_cmp>
    16da:	08 f4       	brcc	.+2      	; 0x16de <__cmpsf2+0x6>
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	08 95       	ret

000016e0 <__fixunssfsi>:
    16e0:	57 d0       	rcall	.+174    	; 0x1790 <__fp_splitA>
    16e2:	88 f0       	brcs	.+34     	; 0x1706 <__fixunssfsi+0x26>
    16e4:	9f 57       	subi	r25, 0x7F	; 127
    16e6:	90 f0       	brcs	.+36     	; 0x170c <__fixunssfsi+0x2c>
    16e8:	b9 2f       	mov	r27, r25
    16ea:	99 27       	eor	r25, r25
    16ec:	b7 51       	subi	r27, 0x17	; 23
    16ee:	a0 f0       	brcs	.+40     	; 0x1718 <__fixunssfsi+0x38>
    16f0:	d1 f0       	breq	.+52     	; 0x1726 <__fixunssfsi+0x46>
    16f2:	66 0f       	add	r22, r22
    16f4:	77 1f       	adc	r23, r23
    16f6:	88 1f       	adc	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	1a f0       	brmi	.+6      	; 0x1702 <__fixunssfsi+0x22>
    16fc:	ba 95       	dec	r27
    16fe:	c9 f7       	brne	.-14     	; 0x16f2 <__fixunssfsi+0x12>
    1700:	12 c0       	rjmp	.+36     	; 0x1726 <__fixunssfsi+0x46>
    1702:	b1 30       	cpi	r27, 0x01	; 1
    1704:	81 f0       	breq	.+32     	; 0x1726 <__fixunssfsi+0x46>
    1706:	5e d0       	rcall	.+188    	; 0x17c4 <__fp_zero>
    1708:	b1 e0       	ldi	r27, 0x01	; 1
    170a:	08 95       	ret
    170c:	5b c0       	rjmp	.+182    	; 0x17c4 <__fp_zero>
    170e:	67 2f       	mov	r22, r23
    1710:	78 2f       	mov	r23, r24
    1712:	88 27       	eor	r24, r24
    1714:	b8 5f       	subi	r27, 0xF8	; 248
    1716:	39 f0       	breq	.+14     	; 0x1726 <__fixunssfsi+0x46>
    1718:	b9 3f       	cpi	r27, 0xF9	; 249
    171a:	cc f3       	brlt	.-14     	; 0x170e <__fixunssfsi+0x2e>
    171c:	86 95       	lsr	r24
    171e:	77 95       	ror	r23
    1720:	67 95       	ror	r22
    1722:	b3 95       	inc	r27
    1724:	d9 f7       	brne	.-10     	; 0x171c <__fixunssfsi+0x3c>
    1726:	3e f4       	brtc	.+14     	; 0x1736 <__fixunssfsi+0x56>
    1728:	90 95       	com	r25
    172a:	80 95       	com	r24
    172c:	70 95       	com	r23
    172e:	61 95       	neg	r22
    1730:	7f 4f       	sbci	r23, 0xFF	; 255
    1732:	8f 4f       	sbci	r24, 0xFF	; 255
    1734:	9f 4f       	sbci	r25, 0xFF	; 255
    1736:	08 95       	ret

00001738 <__fp_cmp>:
    1738:	99 0f       	add	r25, r25
    173a:	00 08       	sbc	r0, r0
    173c:	55 0f       	add	r21, r21
    173e:	aa 0b       	sbc	r26, r26
    1740:	e0 e8       	ldi	r30, 0x80	; 128
    1742:	fe ef       	ldi	r31, 0xFE	; 254
    1744:	16 16       	cp	r1, r22
    1746:	17 06       	cpc	r1, r23
    1748:	e8 07       	cpc	r30, r24
    174a:	f9 07       	cpc	r31, r25
    174c:	c0 f0       	brcs	.+48     	; 0x177e <__fp_cmp+0x46>
    174e:	12 16       	cp	r1, r18
    1750:	13 06       	cpc	r1, r19
    1752:	e4 07       	cpc	r30, r20
    1754:	f5 07       	cpc	r31, r21
    1756:	98 f0       	brcs	.+38     	; 0x177e <__fp_cmp+0x46>
    1758:	62 1b       	sub	r22, r18
    175a:	73 0b       	sbc	r23, r19
    175c:	84 0b       	sbc	r24, r20
    175e:	95 0b       	sbc	r25, r21
    1760:	39 f4       	brne	.+14     	; 0x1770 <__fp_cmp+0x38>
    1762:	0a 26       	eor	r0, r26
    1764:	61 f0       	breq	.+24     	; 0x177e <__fp_cmp+0x46>
    1766:	23 2b       	or	r18, r19
    1768:	24 2b       	or	r18, r20
    176a:	25 2b       	or	r18, r21
    176c:	21 f4       	brne	.+8      	; 0x1776 <__fp_cmp+0x3e>
    176e:	08 95       	ret
    1770:	0a 26       	eor	r0, r26
    1772:	09 f4       	brne	.+2      	; 0x1776 <__fp_cmp+0x3e>
    1774:	a1 40       	sbci	r26, 0x01	; 1
    1776:	a6 95       	lsr	r26
    1778:	8f ef       	ldi	r24, 0xFF	; 255
    177a:	81 1d       	adc	r24, r1
    177c:	81 1d       	adc	r24, r1
    177e:	08 95       	ret

00001780 <__fp_split3>:
    1780:	57 fd       	sbrc	r21, 7
    1782:	90 58       	subi	r25, 0x80	; 128
    1784:	44 0f       	add	r20, r20
    1786:	55 1f       	adc	r21, r21
    1788:	59 f0       	breq	.+22     	; 0x17a0 <__fp_splitA+0x10>
    178a:	5f 3f       	cpi	r21, 0xFF	; 255
    178c:	71 f0       	breq	.+28     	; 0x17aa <__fp_splitA+0x1a>
    178e:	47 95       	ror	r20

00001790 <__fp_splitA>:
    1790:	88 0f       	add	r24, r24
    1792:	97 fb       	bst	r25, 7
    1794:	99 1f       	adc	r25, r25
    1796:	61 f0       	breq	.+24     	; 0x17b0 <__fp_splitA+0x20>
    1798:	9f 3f       	cpi	r25, 0xFF	; 255
    179a:	79 f0       	breq	.+30     	; 0x17ba <__fp_splitA+0x2a>
    179c:	87 95       	ror	r24
    179e:	08 95       	ret
    17a0:	12 16       	cp	r1, r18
    17a2:	13 06       	cpc	r1, r19
    17a4:	14 06       	cpc	r1, r20
    17a6:	55 1f       	adc	r21, r21
    17a8:	f2 cf       	rjmp	.-28     	; 0x178e <__fp_split3+0xe>
    17aa:	46 95       	lsr	r20
    17ac:	f1 df       	rcall	.-30     	; 0x1790 <__fp_splitA>
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <__fp_splitA+0x30>
    17b0:	16 16       	cp	r1, r22
    17b2:	17 06       	cpc	r1, r23
    17b4:	18 06       	cpc	r1, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	f1 cf       	rjmp	.-30     	; 0x179c <__fp_splitA+0xc>
    17ba:	86 95       	lsr	r24
    17bc:	71 05       	cpc	r23, r1
    17be:	61 05       	cpc	r22, r1
    17c0:	08 94       	sec
    17c2:	08 95       	ret

000017c4 <__fp_zero>:
    17c4:	e8 94       	clt

000017c6 <__fp_szero>:
    17c6:	bb 27       	eor	r27, r27
    17c8:	66 27       	eor	r22, r22
    17ca:	77 27       	eor	r23, r23
    17cc:	cb 01       	movw	r24, r22
    17ce:	97 f9       	bld	r25, 7
    17d0:	08 95       	ret

000017d2 <__gesf2>:
    17d2:	b2 df       	rcall	.-156    	; 0x1738 <__fp_cmp>
    17d4:	08 f4       	brcc	.+2      	; 0x17d8 <__gesf2+0x6>
    17d6:	8f ef       	ldi	r24, 0xFF	; 255
    17d8:	08 95       	ret

000017da <__mulsf3>:
    17da:	0b d0       	rcall	.+22     	; 0x17f2 <__mulsf3x>
    17dc:	78 c0       	rjmp	.+240    	; 0x18ce <__fp_round>
    17de:	69 d0       	rcall	.+210    	; 0x18b2 <__fp_pscA>
    17e0:	28 f0       	brcs	.+10     	; 0x17ec <__mulsf3+0x12>
    17e2:	6e d0       	rcall	.+220    	; 0x18c0 <__fp_pscB>
    17e4:	18 f0       	brcs	.+6      	; 0x17ec <__mulsf3+0x12>
    17e6:	95 23       	and	r25, r21
    17e8:	09 f0       	breq	.+2      	; 0x17ec <__mulsf3+0x12>
    17ea:	5a c0       	rjmp	.+180    	; 0x18a0 <__fp_inf>
    17ec:	5f c0       	rjmp	.+190    	; 0x18ac <__fp_nan>
    17ee:	11 24       	eor	r1, r1
    17f0:	ea cf       	rjmp	.-44     	; 0x17c6 <__fp_szero>

000017f2 <__mulsf3x>:
    17f2:	c6 df       	rcall	.-116    	; 0x1780 <__fp_split3>
    17f4:	a0 f3       	brcs	.-24     	; 0x17de <__mulsf3+0x4>

000017f6 <__mulsf3_pse>:
    17f6:	95 9f       	mul	r25, r21
    17f8:	d1 f3       	breq	.-12     	; 0x17ee <__mulsf3+0x14>
    17fa:	95 0f       	add	r25, r21
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	55 1f       	adc	r21, r21
    1800:	62 9f       	mul	r22, r18
    1802:	f0 01       	movw	r30, r0
    1804:	72 9f       	mul	r23, r18
    1806:	bb 27       	eor	r27, r27
    1808:	f0 0d       	add	r31, r0
    180a:	b1 1d       	adc	r27, r1
    180c:	63 9f       	mul	r22, r19
    180e:	aa 27       	eor	r26, r26
    1810:	f0 0d       	add	r31, r0
    1812:	b1 1d       	adc	r27, r1
    1814:	aa 1f       	adc	r26, r26
    1816:	64 9f       	mul	r22, r20
    1818:	66 27       	eor	r22, r22
    181a:	b0 0d       	add	r27, r0
    181c:	a1 1d       	adc	r26, r1
    181e:	66 1f       	adc	r22, r22
    1820:	82 9f       	mul	r24, r18
    1822:	22 27       	eor	r18, r18
    1824:	b0 0d       	add	r27, r0
    1826:	a1 1d       	adc	r26, r1
    1828:	62 1f       	adc	r22, r18
    182a:	73 9f       	mul	r23, r19
    182c:	b0 0d       	add	r27, r0
    182e:	a1 1d       	adc	r26, r1
    1830:	62 1f       	adc	r22, r18
    1832:	83 9f       	mul	r24, r19
    1834:	a0 0d       	add	r26, r0
    1836:	61 1d       	adc	r22, r1
    1838:	22 1f       	adc	r18, r18
    183a:	74 9f       	mul	r23, r20
    183c:	33 27       	eor	r19, r19
    183e:	a0 0d       	add	r26, r0
    1840:	61 1d       	adc	r22, r1
    1842:	23 1f       	adc	r18, r19
    1844:	84 9f       	mul	r24, r20
    1846:	60 0d       	add	r22, r0
    1848:	21 1d       	adc	r18, r1
    184a:	82 2f       	mov	r24, r18
    184c:	76 2f       	mov	r23, r22
    184e:	6a 2f       	mov	r22, r26
    1850:	11 24       	eor	r1, r1
    1852:	9f 57       	subi	r25, 0x7F	; 127
    1854:	50 40       	sbci	r21, 0x00	; 0
    1856:	8a f0       	brmi	.+34     	; 0x187a <__mulsf3_pse+0x84>
    1858:	e1 f0       	breq	.+56     	; 0x1892 <__mulsf3_pse+0x9c>
    185a:	88 23       	and	r24, r24
    185c:	4a f0       	brmi	.+18     	; 0x1870 <__mulsf3_pse+0x7a>
    185e:	ee 0f       	add	r30, r30
    1860:	ff 1f       	adc	r31, r31
    1862:	bb 1f       	adc	r27, r27
    1864:	66 1f       	adc	r22, r22
    1866:	77 1f       	adc	r23, r23
    1868:	88 1f       	adc	r24, r24
    186a:	91 50       	subi	r25, 0x01	; 1
    186c:	50 40       	sbci	r21, 0x00	; 0
    186e:	a9 f7       	brne	.-22     	; 0x185a <__mulsf3_pse+0x64>
    1870:	9e 3f       	cpi	r25, 0xFE	; 254
    1872:	51 05       	cpc	r21, r1
    1874:	70 f0       	brcs	.+28     	; 0x1892 <__mulsf3_pse+0x9c>
    1876:	14 c0       	rjmp	.+40     	; 0x18a0 <__fp_inf>
    1878:	a6 cf       	rjmp	.-180    	; 0x17c6 <__fp_szero>
    187a:	5f 3f       	cpi	r21, 0xFF	; 255
    187c:	ec f3       	brlt	.-6      	; 0x1878 <__mulsf3_pse+0x82>
    187e:	98 3e       	cpi	r25, 0xE8	; 232
    1880:	dc f3       	brlt	.-10     	; 0x1878 <__mulsf3_pse+0x82>
    1882:	86 95       	lsr	r24
    1884:	77 95       	ror	r23
    1886:	67 95       	ror	r22
    1888:	b7 95       	ror	r27
    188a:	f7 95       	ror	r31
    188c:	e7 95       	ror	r30
    188e:	9f 5f       	subi	r25, 0xFF	; 255
    1890:	c1 f7       	brne	.-16     	; 0x1882 <__mulsf3_pse+0x8c>
    1892:	fe 2b       	or	r31, r30
    1894:	88 0f       	add	r24, r24
    1896:	91 1d       	adc	r25, r1
    1898:	96 95       	lsr	r25
    189a:	87 95       	ror	r24
    189c:	97 f9       	bld	r25, 7
    189e:	08 95       	ret

000018a0 <__fp_inf>:
    18a0:	97 f9       	bld	r25, 7
    18a2:	9f 67       	ori	r25, 0x7F	; 127
    18a4:	80 e8       	ldi	r24, 0x80	; 128
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	08 95       	ret

000018ac <__fp_nan>:
    18ac:	9f ef       	ldi	r25, 0xFF	; 255
    18ae:	80 ec       	ldi	r24, 0xC0	; 192
    18b0:	08 95       	ret

000018b2 <__fp_pscA>:
    18b2:	00 24       	eor	r0, r0
    18b4:	0a 94       	dec	r0
    18b6:	16 16       	cp	r1, r22
    18b8:	17 06       	cpc	r1, r23
    18ba:	18 06       	cpc	r1, r24
    18bc:	09 06       	cpc	r0, r25
    18be:	08 95       	ret

000018c0 <__fp_pscB>:
    18c0:	00 24       	eor	r0, r0
    18c2:	0a 94       	dec	r0
    18c4:	12 16       	cp	r1, r18
    18c6:	13 06       	cpc	r1, r19
    18c8:	14 06       	cpc	r1, r20
    18ca:	05 06       	cpc	r0, r21
    18cc:	08 95       	ret

000018ce <__fp_round>:
    18ce:	09 2e       	mov	r0, r25
    18d0:	03 94       	inc	r0
    18d2:	00 0c       	add	r0, r0
    18d4:	11 f4       	brne	.+4      	; 0x18da <__fp_round+0xc>
    18d6:	88 23       	and	r24, r24
    18d8:	52 f0       	brmi	.+20     	; 0x18ee <__fp_round+0x20>
    18da:	bb 0f       	add	r27, r27
    18dc:	40 f4       	brcc	.+16     	; 0x18ee <__fp_round+0x20>
    18de:	bf 2b       	or	r27, r31
    18e0:	11 f4       	brne	.+4      	; 0x18e6 <__fp_round+0x18>
    18e2:	60 ff       	sbrs	r22, 0
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <__fp_round+0x20>
    18e6:	6f 5f       	subi	r22, 0xFF	; 255
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	8f 4f       	sbci	r24, 0xFF	; 255
    18ec:	9f 4f       	sbci	r25, 0xFF	; 255
    18ee:	08 95       	ret

000018f0 <__divmodhi4>:
    18f0:	97 fb       	bst	r25, 7
    18f2:	07 2e       	mov	r0, r23
    18f4:	16 f4       	brtc	.+4      	; 0x18fa <__divmodhi4+0xa>
    18f6:	00 94       	com	r0
    18f8:	06 d0       	rcall	.+12     	; 0x1906 <__divmodhi4_neg1>
    18fa:	77 fd       	sbrc	r23, 7
    18fc:	08 d0       	rcall	.+16     	; 0x190e <__divmodhi4_neg2>
    18fe:	0b d0       	rcall	.+22     	; 0x1916 <__udivmodhi4>
    1900:	07 fc       	sbrc	r0, 7
    1902:	05 d0       	rcall	.+10     	; 0x190e <__divmodhi4_neg2>
    1904:	3e f4       	brtc	.+14     	; 0x1914 <__divmodhi4_exit>

00001906 <__divmodhi4_neg1>:
    1906:	90 95       	com	r25
    1908:	81 95       	neg	r24
    190a:	9f 4f       	sbci	r25, 0xFF	; 255
    190c:	08 95       	ret

0000190e <__divmodhi4_neg2>:
    190e:	70 95       	com	r23
    1910:	61 95       	neg	r22
    1912:	7f 4f       	sbci	r23, 0xFF	; 255

00001914 <__divmodhi4_exit>:
    1914:	08 95       	ret

00001916 <__udivmodhi4>:
    1916:	aa 1b       	sub	r26, r26
    1918:	bb 1b       	sub	r27, r27
    191a:	51 e1       	ldi	r21, 0x11	; 17
    191c:	07 c0       	rjmp	.+14     	; 0x192c <__udivmodhi4_ep>

0000191e <__udivmodhi4_loop>:
    191e:	aa 1f       	adc	r26, r26
    1920:	bb 1f       	adc	r27, r27
    1922:	a6 17       	cp	r26, r22
    1924:	b7 07       	cpc	r27, r23
    1926:	10 f0       	brcs	.+4      	; 0x192c <__udivmodhi4_ep>
    1928:	a6 1b       	sub	r26, r22
    192a:	b7 0b       	sbc	r27, r23

0000192c <__udivmodhi4_ep>:
    192c:	88 1f       	adc	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	5a 95       	dec	r21
    1932:	a9 f7       	brne	.-22     	; 0x191e <__udivmodhi4_loop>
    1934:	80 95       	com	r24
    1936:	90 95       	com	r25
    1938:	bc 01       	movw	r22, r24
    193a:	cd 01       	movw	r24, r26
    193c:	08 95       	ret

0000193e <do_rand>:
    193e:	8f 92       	push	r8
    1940:	9f 92       	push	r9
    1942:	af 92       	push	r10
    1944:	bf 92       	push	r11
    1946:	cf 92       	push	r12
    1948:	df 92       	push	r13
    194a:	ef 92       	push	r14
    194c:	ff 92       	push	r15
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	ec 01       	movw	r28, r24
    1954:	68 81       	ld	r22, Y
    1956:	79 81       	ldd	r23, Y+1	; 0x01
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	9b 81       	ldd	r25, Y+3	; 0x03
    195c:	61 15       	cp	r22, r1
    195e:	71 05       	cpc	r23, r1
    1960:	81 05       	cpc	r24, r1
    1962:	91 05       	cpc	r25, r1
    1964:	21 f4       	brne	.+8      	; 0x196e <do_rand+0x30>
    1966:	64 e2       	ldi	r22, 0x24	; 36
    1968:	79 ed       	ldi	r23, 0xD9	; 217
    196a:	8b e5       	ldi	r24, 0x5B	; 91
    196c:	97 e0       	ldi	r25, 0x07	; 7
    196e:	2d e1       	ldi	r18, 0x1D	; 29
    1970:	33 ef       	ldi	r19, 0xF3	; 243
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	0d d3       	rcall	.+1562   	; 0x1f92 <__divmodsi4>
    1978:	49 01       	movw	r8, r18
    197a:	5a 01       	movw	r10, r20
    197c:	9b 01       	movw	r18, r22
    197e:	ac 01       	movw	r20, r24
    1980:	a7 ea       	ldi	r26, 0xA7	; 167
    1982:	b1 e4       	ldi	r27, 0x41	; 65
    1984:	22 d3       	rcall	.+1604   	; 0x1fca <__muluhisi3>
    1986:	6b 01       	movw	r12, r22
    1988:	7c 01       	movw	r14, r24
    198a:	ac ee       	ldi	r26, 0xEC	; 236
    198c:	b4 ef       	ldi	r27, 0xF4	; 244
    198e:	a5 01       	movw	r20, r10
    1990:	94 01       	movw	r18, r8
    1992:	27 d3       	rcall	.+1614   	; 0x1fe2 <__mulohisi3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	8c 0d       	add	r24, r12
    199a:	9d 1d       	adc	r25, r13
    199c:	ae 1d       	adc	r26, r14
    199e:	bf 1d       	adc	r27, r15
    19a0:	b7 ff       	sbrs	r27, 7
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <do_rand+0x6c>
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	a1 09       	sbc	r26, r1
    19a8:	b0 48       	sbci	r27, 0x80	; 128
    19aa:	88 83       	st	Y, r24
    19ac:	99 83       	std	Y+1, r25	; 0x01
    19ae:	aa 83       	std	Y+2, r26	; 0x02
    19b0:	bb 83       	std	Y+3, r27	; 0x03
    19b2:	9f 77       	andi	r25, 0x7F	; 127
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	ff 90       	pop	r15
    19ba:	ef 90       	pop	r14
    19bc:	df 90       	pop	r13
    19be:	cf 90       	pop	r12
    19c0:	bf 90       	pop	r11
    19c2:	af 90       	pop	r10
    19c4:	9f 90       	pop	r9
    19c6:	8f 90       	pop	r8
    19c8:	08 95       	ret

000019ca <rand_r>:
    19ca:	b9 cf       	rjmp	.-142    	; 0x193e <do_rand>

000019cc <rand>:
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	91 e0       	ldi	r25, 0x01	; 1
    19d0:	b6 cf       	rjmp	.-148    	; 0x193e <do_rand>

000019d2 <srand>:
    19d2:	a0 e0       	ldi	r26, 0x00	; 0
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    19da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    19de:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    19e2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    19e6:	08 95       	ret

000019e8 <vsprintf>:
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	2e 97       	sbiw	r28, 0x0e	; 14
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	8c 01       	movw	r16, r24
    1a02:	86 e0       	ldi	r24, 0x06	; 6
    1a04:	8c 83       	std	Y+4, r24	; 0x04
    1a06:	1a 83       	std	Y+2, r17	; 0x02
    1a08:	09 83       	std	Y+1, r16	; 0x01
    1a0a:	8f ef       	ldi	r24, 0xFF	; 255
    1a0c:	9f e7       	ldi	r25, 0x7F	; 127
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	ce 01       	movw	r24, r28
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	10 d0       	rcall	.+32     	; 0x1a38 <vfprintf>
    1a18:	ef 81       	ldd	r30, Y+7	; 0x07
    1a1a:	f8 85       	ldd	r31, Y+8	; 0x08
    1a1c:	e0 0f       	add	r30, r16
    1a1e:	f1 1f       	adc	r31, r17
    1a20:	10 82       	st	Z, r1
    1a22:	2e 96       	adiw	r28, 0x0e	; 14
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	08 95       	ret

00001a38 <vfprintf>:
    1a38:	2f 92       	push	r2
    1a3a:	3f 92       	push	r3
    1a3c:	4f 92       	push	r4
    1a3e:	5f 92       	push	r5
    1a40:	6f 92       	push	r6
    1a42:	7f 92       	push	r7
    1a44:	8f 92       	push	r8
    1a46:	9f 92       	push	r9
    1a48:	af 92       	push	r10
    1a4a:	bf 92       	push	r11
    1a4c:	cf 92       	push	r12
    1a4e:	df 92       	push	r13
    1a50:	ef 92       	push	r14
    1a52:	ff 92       	push	r15
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	2b 97       	sbiw	r28, 0x0b	; 11
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	de bf       	out	0x3e, r29	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	cd bf       	out	0x3d, r28	; 61
    1a6c:	6c 01       	movw	r12, r24
    1a6e:	7b 01       	movw	r14, r22
    1a70:	8a 01       	movw	r16, r20
    1a72:	fc 01       	movw	r30, r24
    1a74:	17 82       	std	Z+7, r1	; 0x07
    1a76:	16 82       	std	Z+6, r1	; 0x06
    1a78:	83 81       	ldd	r24, Z+3	; 0x03
    1a7a:	81 ff       	sbrs	r24, 1
    1a7c:	bf c1       	rjmp	.+894    	; 0x1dfc <vfprintf+0x3c4>
    1a7e:	ce 01       	movw	r24, r28
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	3c 01       	movw	r6, r24
    1a84:	f6 01       	movw	r30, r12
    1a86:	93 81       	ldd	r25, Z+3	; 0x03
    1a88:	f7 01       	movw	r30, r14
    1a8a:	93 fd       	sbrc	r25, 3
    1a8c:	85 91       	lpm	r24, Z+
    1a8e:	93 ff       	sbrs	r25, 3
    1a90:	81 91       	ld	r24, Z+
    1a92:	7f 01       	movw	r14, r30
    1a94:	88 23       	and	r24, r24
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <vfprintf+0x62>
    1a98:	ad c1       	rjmp	.+858    	; 0x1df4 <vfprintf+0x3bc>
    1a9a:	85 32       	cpi	r24, 0x25	; 37
    1a9c:	39 f4       	brne	.+14     	; 0x1aac <vfprintf+0x74>
    1a9e:	93 fd       	sbrc	r25, 3
    1aa0:	85 91       	lpm	r24, Z+
    1aa2:	93 ff       	sbrs	r25, 3
    1aa4:	81 91       	ld	r24, Z+
    1aa6:	7f 01       	movw	r14, r30
    1aa8:	85 32       	cpi	r24, 0x25	; 37
    1aaa:	21 f4       	brne	.+8      	; 0x1ab4 <vfprintf+0x7c>
    1aac:	b6 01       	movw	r22, r12
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	d6 d1       	rcall	.+940    	; 0x1e5e <fputc>
    1ab2:	e8 cf       	rjmp	.-48     	; 0x1a84 <vfprintf+0x4c>
    1ab4:	91 2c       	mov	r9, r1
    1ab6:	21 2c       	mov	r2, r1
    1ab8:	31 2c       	mov	r3, r1
    1aba:	ff e1       	ldi	r31, 0x1F	; 31
    1abc:	f3 15       	cp	r31, r3
    1abe:	d8 f0       	brcs	.+54     	; 0x1af6 <vfprintf+0xbe>
    1ac0:	8b 32       	cpi	r24, 0x2B	; 43
    1ac2:	79 f0       	breq	.+30     	; 0x1ae2 <vfprintf+0xaa>
    1ac4:	38 f4       	brcc	.+14     	; 0x1ad4 <vfprintf+0x9c>
    1ac6:	80 32       	cpi	r24, 0x20	; 32
    1ac8:	79 f0       	breq	.+30     	; 0x1ae8 <vfprintf+0xb0>
    1aca:	83 32       	cpi	r24, 0x23	; 35
    1acc:	a1 f4       	brne	.+40     	; 0x1af6 <vfprintf+0xbe>
    1ace:	23 2d       	mov	r18, r3
    1ad0:	20 61       	ori	r18, 0x10	; 16
    1ad2:	1d c0       	rjmp	.+58     	; 0x1b0e <vfprintf+0xd6>
    1ad4:	8d 32       	cpi	r24, 0x2D	; 45
    1ad6:	61 f0       	breq	.+24     	; 0x1af0 <vfprintf+0xb8>
    1ad8:	80 33       	cpi	r24, 0x30	; 48
    1ada:	69 f4       	brne	.+26     	; 0x1af6 <vfprintf+0xbe>
    1adc:	23 2d       	mov	r18, r3
    1ade:	21 60       	ori	r18, 0x01	; 1
    1ae0:	16 c0       	rjmp	.+44     	; 0x1b0e <vfprintf+0xd6>
    1ae2:	83 2d       	mov	r24, r3
    1ae4:	82 60       	ori	r24, 0x02	; 2
    1ae6:	38 2e       	mov	r3, r24
    1ae8:	e3 2d       	mov	r30, r3
    1aea:	e4 60       	ori	r30, 0x04	; 4
    1aec:	3e 2e       	mov	r3, r30
    1aee:	2a c0       	rjmp	.+84     	; 0x1b44 <vfprintf+0x10c>
    1af0:	f3 2d       	mov	r31, r3
    1af2:	f8 60       	ori	r31, 0x08	; 8
    1af4:	1d c0       	rjmp	.+58     	; 0x1b30 <vfprintf+0xf8>
    1af6:	37 fc       	sbrc	r3, 7
    1af8:	2d c0       	rjmp	.+90     	; 0x1b54 <vfprintf+0x11c>
    1afa:	20 ed       	ldi	r18, 0xD0	; 208
    1afc:	28 0f       	add	r18, r24
    1afe:	2a 30       	cpi	r18, 0x0A	; 10
    1b00:	40 f0       	brcs	.+16     	; 0x1b12 <vfprintf+0xda>
    1b02:	8e 32       	cpi	r24, 0x2E	; 46
    1b04:	b9 f4       	brne	.+46     	; 0x1b34 <vfprintf+0xfc>
    1b06:	36 fc       	sbrc	r3, 6
    1b08:	75 c1       	rjmp	.+746    	; 0x1df4 <vfprintf+0x3bc>
    1b0a:	23 2d       	mov	r18, r3
    1b0c:	20 64       	ori	r18, 0x40	; 64
    1b0e:	32 2e       	mov	r3, r18
    1b10:	19 c0       	rjmp	.+50     	; 0x1b44 <vfprintf+0x10c>
    1b12:	36 fe       	sbrs	r3, 6
    1b14:	06 c0       	rjmp	.+12     	; 0x1b22 <vfprintf+0xea>
    1b16:	8a e0       	ldi	r24, 0x0A	; 10
    1b18:	98 9e       	mul	r9, r24
    1b1a:	20 0d       	add	r18, r0
    1b1c:	11 24       	eor	r1, r1
    1b1e:	92 2e       	mov	r9, r18
    1b20:	11 c0       	rjmp	.+34     	; 0x1b44 <vfprintf+0x10c>
    1b22:	ea e0       	ldi	r30, 0x0A	; 10
    1b24:	2e 9e       	mul	r2, r30
    1b26:	20 0d       	add	r18, r0
    1b28:	11 24       	eor	r1, r1
    1b2a:	22 2e       	mov	r2, r18
    1b2c:	f3 2d       	mov	r31, r3
    1b2e:	f0 62       	ori	r31, 0x20	; 32
    1b30:	3f 2e       	mov	r3, r31
    1b32:	08 c0       	rjmp	.+16     	; 0x1b44 <vfprintf+0x10c>
    1b34:	8c 36       	cpi	r24, 0x6C	; 108
    1b36:	21 f4       	brne	.+8      	; 0x1b40 <vfprintf+0x108>
    1b38:	83 2d       	mov	r24, r3
    1b3a:	80 68       	ori	r24, 0x80	; 128
    1b3c:	38 2e       	mov	r3, r24
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <vfprintf+0x10c>
    1b40:	88 36       	cpi	r24, 0x68	; 104
    1b42:	41 f4       	brne	.+16     	; 0x1b54 <vfprintf+0x11c>
    1b44:	f7 01       	movw	r30, r14
    1b46:	93 fd       	sbrc	r25, 3
    1b48:	85 91       	lpm	r24, Z+
    1b4a:	93 ff       	sbrs	r25, 3
    1b4c:	81 91       	ld	r24, Z+
    1b4e:	7f 01       	movw	r14, r30
    1b50:	81 11       	cpse	r24, r1
    1b52:	b3 cf       	rjmp	.-154    	; 0x1aba <vfprintf+0x82>
    1b54:	98 2f       	mov	r25, r24
    1b56:	9f 7d       	andi	r25, 0xDF	; 223
    1b58:	95 54       	subi	r25, 0x45	; 69
    1b5a:	93 30       	cpi	r25, 0x03	; 3
    1b5c:	28 f4       	brcc	.+10     	; 0x1b68 <vfprintf+0x130>
    1b5e:	0c 5f       	subi	r16, 0xFC	; 252
    1b60:	1f 4f       	sbci	r17, 0xFF	; 255
    1b62:	9f e3       	ldi	r25, 0x3F	; 63
    1b64:	99 83       	std	Y+1, r25	; 0x01
    1b66:	0d c0       	rjmp	.+26     	; 0x1b82 <vfprintf+0x14a>
    1b68:	83 36       	cpi	r24, 0x63	; 99
    1b6a:	31 f0       	breq	.+12     	; 0x1b78 <vfprintf+0x140>
    1b6c:	83 37       	cpi	r24, 0x73	; 115
    1b6e:	71 f0       	breq	.+28     	; 0x1b8c <vfprintf+0x154>
    1b70:	83 35       	cpi	r24, 0x53	; 83
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <vfprintf+0x13e>
    1b74:	55 c0       	rjmp	.+170    	; 0x1c20 <vfprintf+0x1e8>
    1b76:	20 c0       	rjmp	.+64     	; 0x1bb8 <vfprintf+0x180>
    1b78:	f8 01       	movw	r30, r16
    1b7a:	80 81       	ld	r24, Z
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	0e 5f       	subi	r16, 0xFE	; 254
    1b80:	1f 4f       	sbci	r17, 0xFF	; 255
    1b82:	88 24       	eor	r8, r8
    1b84:	83 94       	inc	r8
    1b86:	91 2c       	mov	r9, r1
    1b88:	53 01       	movw	r10, r6
    1b8a:	12 c0       	rjmp	.+36     	; 0x1bb0 <vfprintf+0x178>
    1b8c:	28 01       	movw	r4, r16
    1b8e:	f2 e0       	ldi	r31, 0x02	; 2
    1b90:	4f 0e       	add	r4, r31
    1b92:	51 1c       	adc	r5, r1
    1b94:	f8 01       	movw	r30, r16
    1b96:	a0 80       	ld	r10, Z
    1b98:	b1 80       	ldd	r11, Z+1	; 0x01
    1b9a:	36 fe       	sbrs	r3, 6
    1b9c:	03 c0       	rjmp	.+6      	; 0x1ba4 <vfprintf+0x16c>
    1b9e:	69 2d       	mov	r22, r9
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <vfprintf+0x170>
    1ba4:	6f ef       	ldi	r22, 0xFF	; 255
    1ba6:	7f ef       	ldi	r23, 0xFF	; 255
    1ba8:	c5 01       	movw	r24, r10
    1baa:	4e d1       	rcall	.+668    	; 0x1e48 <strnlen>
    1bac:	4c 01       	movw	r8, r24
    1bae:	82 01       	movw	r16, r4
    1bb0:	f3 2d       	mov	r31, r3
    1bb2:	ff 77       	andi	r31, 0x7F	; 127
    1bb4:	3f 2e       	mov	r3, r31
    1bb6:	15 c0       	rjmp	.+42     	; 0x1be2 <vfprintf+0x1aa>
    1bb8:	28 01       	movw	r4, r16
    1bba:	22 e0       	ldi	r18, 0x02	; 2
    1bbc:	42 0e       	add	r4, r18
    1bbe:	51 1c       	adc	r5, r1
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	a0 80       	ld	r10, Z
    1bc4:	b1 80       	ldd	r11, Z+1	; 0x01
    1bc6:	36 fe       	sbrs	r3, 6
    1bc8:	03 c0       	rjmp	.+6      	; 0x1bd0 <vfprintf+0x198>
    1bca:	69 2d       	mov	r22, r9
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <vfprintf+0x19c>
    1bd0:	6f ef       	ldi	r22, 0xFF	; 255
    1bd2:	7f ef       	ldi	r23, 0xFF	; 255
    1bd4:	c5 01       	movw	r24, r10
    1bd6:	2d d1       	rcall	.+602    	; 0x1e32 <strnlen_P>
    1bd8:	4c 01       	movw	r8, r24
    1bda:	f3 2d       	mov	r31, r3
    1bdc:	f0 68       	ori	r31, 0x80	; 128
    1bde:	3f 2e       	mov	r3, r31
    1be0:	82 01       	movw	r16, r4
    1be2:	33 fc       	sbrc	r3, 3
    1be4:	19 c0       	rjmp	.+50     	; 0x1c18 <vfprintf+0x1e0>
    1be6:	82 2d       	mov	r24, r2
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	88 16       	cp	r8, r24
    1bec:	99 06       	cpc	r9, r25
    1bee:	a0 f4       	brcc	.+40     	; 0x1c18 <vfprintf+0x1e0>
    1bf0:	b6 01       	movw	r22, r12
    1bf2:	80 e2       	ldi	r24, 0x20	; 32
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	33 d1       	rcall	.+614    	; 0x1e5e <fputc>
    1bf8:	2a 94       	dec	r2
    1bfa:	f5 cf       	rjmp	.-22     	; 0x1be6 <vfprintf+0x1ae>
    1bfc:	f5 01       	movw	r30, r10
    1bfe:	37 fc       	sbrc	r3, 7
    1c00:	85 91       	lpm	r24, Z+
    1c02:	37 fe       	sbrs	r3, 7
    1c04:	81 91       	ld	r24, Z+
    1c06:	5f 01       	movw	r10, r30
    1c08:	b6 01       	movw	r22, r12
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	28 d1       	rcall	.+592    	; 0x1e5e <fputc>
    1c0e:	21 10       	cpse	r2, r1
    1c10:	2a 94       	dec	r2
    1c12:	21 e0       	ldi	r18, 0x01	; 1
    1c14:	82 1a       	sub	r8, r18
    1c16:	91 08       	sbc	r9, r1
    1c18:	81 14       	cp	r8, r1
    1c1a:	91 04       	cpc	r9, r1
    1c1c:	79 f7       	brne	.-34     	; 0x1bfc <vfprintf+0x1c4>
    1c1e:	e1 c0       	rjmp	.+450    	; 0x1de2 <vfprintf+0x3aa>
    1c20:	84 36       	cpi	r24, 0x64	; 100
    1c22:	11 f0       	breq	.+4      	; 0x1c28 <vfprintf+0x1f0>
    1c24:	89 36       	cpi	r24, 0x69	; 105
    1c26:	39 f5       	brne	.+78     	; 0x1c76 <vfprintf+0x23e>
    1c28:	f8 01       	movw	r30, r16
    1c2a:	37 fe       	sbrs	r3, 7
    1c2c:	07 c0       	rjmp	.+14     	; 0x1c3c <vfprintf+0x204>
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	0c 5f       	subi	r16, 0xFC	; 252
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	08 c0       	rjmp	.+16     	; 0x1c4c <vfprintf+0x214>
    1c3c:	60 81       	ld	r22, Z
    1c3e:	71 81       	ldd	r23, Z+1	; 0x01
    1c40:	07 2e       	mov	r0, r23
    1c42:	00 0c       	add	r0, r0
    1c44:	88 0b       	sbc	r24, r24
    1c46:	99 0b       	sbc	r25, r25
    1c48:	0e 5f       	subi	r16, 0xFE	; 254
    1c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4c:	f3 2d       	mov	r31, r3
    1c4e:	ff 76       	andi	r31, 0x6F	; 111
    1c50:	3f 2e       	mov	r3, r31
    1c52:	97 ff       	sbrs	r25, 7
    1c54:	09 c0       	rjmp	.+18     	; 0x1c68 <vfprintf+0x230>
    1c56:	90 95       	com	r25
    1c58:	80 95       	com	r24
    1c5a:	70 95       	com	r23
    1c5c:	61 95       	neg	r22
    1c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c60:	8f 4f       	sbci	r24, 0xFF	; 255
    1c62:	9f 4f       	sbci	r25, 0xFF	; 255
    1c64:	f0 68       	ori	r31, 0x80	; 128
    1c66:	3f 2e       	mov	r3, r31
    1c68:	2a e0       	ldi	r18, 0x0A	; 10
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	a3 01       	movw	r20, r6
    1c6e:	33 d1       	rcall	.+614    	; 0x1ed6 <__ultoa_invert>
    1c70:	88 2e       	mov	r8, r24
    1c72:	86 18       	sub	r8, r6
    1c74:	44 c0       	rjmp	.+136    	; 0x1cfe <vfprintf+0x2c6>
    1c76:	85 37       	cpi	r24, 0x75	; 117
    1c78:	31 f4       	brne	.+12     	; 0x1c86 <vfprintf+0x24e>
    1c7a:	23 2d       	mov	r18, r3
    1c7c:	2f 7e       	andi	r18, 0xEF	; 239
    1c7e:	b2 2e       	mov	r11, r18
    1c80:	2a e0       	ldi	r18, 0x0A	; 10
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	25 c0       	rjmp	.+74     	; 0x1cd0 <vfprintf+0x298>
    1c86:	93 2d       	mov	r25, r3
    1c88:	99 7f       	andi	r25, 0xF9	; 249
    1c8a:	b9 2e       	mov	r11, r25
    1c8c:	8f 36       	cpi	r24, 0x6F	; 111
    1c8e:	c1 f0       	breq	.+48     	; 0x1cc0 <vfprintf+0x288>
    1c90:	18 f4       	brcc	.+6      	; 0x1c98 <vfprintf+0x260>
    1c92:	88 35       	cpi	r24, 0x58	; 88
    1c94:	79 f0       	breq	.+30     	; 0x1cb4 <vfprintf+0x27c>
    1c96:	ae c0       	rjmp	.+348    	; 0x1df4 <vfprintf+0x3bc>
    1c98:	80 37       	cpi	r24, 0x70	; 112
    1c9a:	19 f0       	breq	.+6      	; 0x1ca2 <vfprintf+0x26a>
    1c9c:	88 37       	cpi	r24, 0x78	; 120
    1c9e:	21 f0       	breq	.+8      	; 0x1ca8 <vfprintf+0x270>
    1ca0:	a9 c0       	rjmp	.+338    	; 0x1df4 <vfprintf+0x3bc>
    1ca2:	e9 2f       	mov	r30, r25
    1ca4:	e0 61       	ori	r30, 0x10	; 16
    1ca6:	be 2e       	mov	r11, r30
    1ca8:	b4 fe       	sbrs	r11, 4
    1caa:	0d c0       	rjmp	.+26     	; 0x1cc6 <vfprintf+0x28e>
    1cac:	fb 2d       	mov	r31, r11
    1cae:	f4 60       	ori	r31, 0x04	; 4
    1cb0:	bf 2e       	mov	r11, r31
    1cb2:	09 c0       	rjmp	.+18     	; 0x1cc6 <vfprintf+0x28e>
    1cb4:	34 fe       	sbrs	r3, 4
    1cb6:	0a c0       	rjmp	.+20     	; 0x1ccc <vfprintf+0x294>
    1cb8:	29 2f       	mov	r18, r25
    1cba:	26 60       	ori	r18, 0x06	; 6
    1cbc:	b2 2e       	mov	r11, r18
    1cbe:	06 c0       	rjmp	.+12     	; 0x1ccc <vfprintf+0x294>
    1cc0:	28 e0       	ldi	r18, 0x08	; 8
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	05 c0       	rjmp	.+10     	; 0x1cd0 <vfprintf+0x298>
    1cc6:	20 e1       	ldi	r18, 0x10	; 16
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <vfprintf+0x298>
    1ccc:	20 e1       	ldi	r18, 0x10	; 16
    1cce:	32 e0       	ldi	r19, 0x02	; 2
    1cd0:	f8 01       	movw	r30, r16
    1cd2:	b7 fe       	sbrs	r11, 7
    1cd4:	07 c0       	rjmp	.+14     	; 0x1ce4 <vfprintf+0x2ac>
    1cd6:	60 81       	ld	r22, Z
    1cd8:	71 81       	ldd	r23, Z+1	; 0x01
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	0c 5f       	subi	r16, 0xFC	; 252
    1ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce2:	06 c0       	rjmp	.+12     	; 0x1cf0 <vfprintf+0x2b8>
    1ce4:	60 81       	ld	r22, Z
    1ce6:	71 81       	ldd	r23, Z+1	; 0x01
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	0e 5f       	subi	r16, 0xFE	; 254
    1cee:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf0:	a3 01       	movw	r20, r6
    1cf2:	f1 d0       	rcall	.+482    	; 0x1ed6 <__ultoa_invert>
    1cf4:	88 2e       	mov	r8, r24
    1cf6:	86 18       	sub	r8, r6
    1cf8:	fb 2d       	mov	r31, r11
    1cfa:	ff 77       	andi	r31, 0x7F	; 127
    1cfc:	3f 2e       	mov	r3, r31
    1cfe:	36 fe       	sbrs	r3, 6
    1d00:	0d c0       	rjmp	.+26     	; 0x1d1c <vfprintf+0x2e4>
    1d02:	23 2d       	mov	r18, r3
    1d04:	2e 7f       	andi	r18, 0xFE	; 254
    1d06:	a2 2e       	mov	r10, r18
    1d08:	89 14       	cp	r8, r9
    1d0a:	58 f4       	brcc	.+22     	; 0x1d22 <vfprintf+0x2ea>
    1d0c:	34 fe       	sbrs	r3, 4
    1d0e:	0b c0       	rjmp	.+22     	; 0x1d26 <vfprintf+0x2ee>
    1d10:	32 fc       	sbrc	r3, 2
    1d12:	09 c0       	rjmp	.+18     	; 0x1d26 <vfprintf+0x2ee>
    1d14:	83 2d       	mov	r24, r3
    1d16:	8e 7e       	andi	r24, 0xEE	; 238
    1d18:	a8 2e       	mov	r10, r24
    1d1a:	05 c0       	rjmp	.+10     	; 0x1d26 <vfprintf+0x2ee>
    1d1c:	b8 2c       	mov	r11, r8
    1d1e:	a3 2c       	mov	r10, r3
    1d20:	03 c0       	rjmp	.+6      	; 0x1d28 <vfprintf+0x2f0>
    1d22:	b8 2c       	mov	r11, r8
    1d24:	01 c0       	rjmp	.+2      	; 0x1d28 <vfprintf+0x2f0>
    1d26:	b9 2c       	mov	r11, r9
    1d28:	a4 fe       	sbrs	r10, 4
    1d2a:	0f c0       	rjmp	.+30     	; 0x1d4a <vfprintf+0x312>
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e8 0d       	add	r30, r8
    1d30:	f1 1d       	adc	r31, r1
    1d32:	80 81       	ld	r24, Z
    1d34:	80 33       	cpi	r24, 0x30	; 48
    1d36:	21 f4       	brne	.+8      	; 0x1d40 <vfprintf+0x308>
    1d38:	9a 2d       	mov	r25, r10
    1d3a:	99 7e       	andi	r25, 0xE9	; 233
    1d3c:	a9 2e       	mov	r10, r25
    1d3e:	09 c0       	rjmp	.+18     	; 0x1d52 <vfprintf+0x31a>
    1d40:	a2 fe       	sbrs	r10, 2
    1d42:	06 c0       	rjmp	.+12     	; 0x1d50 <vfprintf+0x318>
    1d44:	b3 94       	inc	r11
    1d46:	b3 94       	inc	r11
    1d48:	04 c0       	rjmp	.+8      	; 0x1d52 <vfprintf+0x31a>
    1d4a:	8a 2d       	mov	r24, r10
    1d4c:	86 78       	andi	r24, 0x86	; 134
    1d4e:	09 f0       	breq	.+2      	; 0x1d52 <vfprintf+0x31a>
    1d50:	b3 94       	inc	r11
    1d52:	a3 fc       	sbrc	r10, 3
    1d54:	10 c0       	rjmp	.+32     	; 0x1d76 <vfprintf+0x33e>
    1d56:	a0 fe       	sbrs	r10, 0
    1d58:	06 c0       	rjmp	.+12     	; 0x1d66 <vfprintf+0x32e>
    1d5a:	b2 14       	cp	r11, r2
    1d5c:	80 f4       	brcc	.+32     	; 0x1d7e <vfprintf+0x346>
    1d5e:	28 0c       	add	r2, r8
    1d60:	92 2c       	mov	r9, r2
    1d62:	9b 18       	sub	r9, r11
    1d64:	0d c0       	rjmp	.+26     	; 0x1d80 <vfprintf+0x348>
    1d66:	b2 14       	cp	r11, r2
    1d68:	58 f4       	brcc	.+22     	; 0x1d80 <vfprintf+0x348>
    1d6a:	b6 01       	movw	r22, r12
    1d6c:	80 e2       	ldi	r24, 0x20	; 32
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	76 d0       	rcall	.+236    	; 0x1e5e <fputc>
    1d72:	b3 94       	inc	r11
    1d74:	f8 cf       	rjmp	.-16     	; 0x1d66 <vfprintf+0x32e>
    1d76:	b2 14       	cp	r11, r2
    1d78:	18 f4       	brcc	.+6      	; 0x1d80 <vfprintf+0x348>
    1d7a:	2b 18       	sub	r2, r11
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <vfprintf+0x34a>
    1d7e:	98 2c       	mov	r9, r8
    1d80:	21 2c       	mov	r2, r1
    1d82:	a4 fe       	sbrs	r10, 4
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <vfprintf+0x36c>
    1d86:	b6 01       	movw	r22, r12
    1d88:	80 e3       	ldi	r24, 0x30	; 48
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	68 d0       	rcall	.+208    	; 0x1e5e <fputc>
    1d8e:	a2 fe       	sbrs	r10, 2
    1d90:	16 c0       	rjmp	.+44     	; 0x1dbe <vfprintf+0x386>
    1d92:	a1 fc       	sbrc	r10, 1
    1d94:	03 c0       	rjmp	.+6      	; 0x1d9c <vfprintf+0x364>
    1d96:	88 e7       	ldi	r24, 0x78	; 120
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <vfprintf+0x368>
    1d9c:	88 e5       	ldi	r24, 0x58	; 88
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	b6 01       	movw	r22, r12
    1da2:	0c c0       	rjmp	.+24     	; 0x1dbc <vfprintf+0x384>
    1da4:	8a 2d       	mov	r24, r10
    1da6:	86 78       	andi	r24, 0x86	; 134
    1da8:	51 f0       	breq	.+20     	; 0x1dbe <vfprintf+0x386>
    1daa:	a1 fe       	sbrs	r10, 1
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <vfprintf+0x37a>
    1dae:	8b e2       	ldi	r24, 0x2B	; 43
    1db0:	01 c0       	rjmp	.+2      	; 0x1db4 <vfprintf+0x37c>
    1db2:	80 e2       	ldi	r24, 0x20	; 32
    1db4:	a7 fc       	sbrc	r10, 7
    1db6:	8d e2       	ldi	r24, 0x2D	; 45
    1db8:	b6 01       	movw	r22, r12
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	50 d0       	rcall	.+160    	; 0x1e5e <fputc>
    1dbe:	89 14       	cp	r8, r9
    1dc0:	30 f4       	brcc	.+12     	; 0x1dce <vfprintf+0x396>
    1dc2:	b6 01       	movw	r22, r12
    1dc4:	80 e3       	ldi	r24, 0x30	; 48
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	4a d0       	rcall	.+148    	; 0x1e5e <fputc>
    1dca:	9a 94       	dec	r9
    1dcc:	f8 cf       	rjmp	.-16     	; 0x1dbe <vfprintf+0x386>
    1dce:	8a 94       	dec	r8
    1dd0:	f3 01       	movw	r30, r6
    1dd2:	e8 0d       	add	r30, r8
    1dd4:	f1 1d       	adc	r31, r1
    1dd6:	80 81       	ld	r24, Z
    1dd8:	b6 01       	movw	r22, r12
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	40 d0       	rcall	.+128    	; 0x1e5e <fputc>
    1dde:	81 10       	cpse	r8, r1
    1de0:	f6 cf       	rjmp	.-20     	; 0x1dce <vfprintf+0x396>
    1de2:	22 20       	and	r2, r2
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <vfprintf+0x3b0>
    1de6:	4e ce       	rjmp	.-868    	; 0x1a84 <vfprintf+0x4c>
    1de8:	b6 01       	movw	r22, r12
    1dea:	80 e2       	ldi	r24, 0x20	; 32
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	37 d0       	rcall	.+110    	; 0x1e5e <fputc>
    1df0:	2a 94       	dec	r2
    1df2:	f7 cf       	rjmp	.-18     	; 0x1de2 <vfprintf+0x3aa>
    1df4:	f6 01       	movw	r30, r12
    1df6:	86 81       	ldd	r24, Z+6	; 0x06
    1df8:	97 81       	ldd	r25, Z+7	; 0x07
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <vfprintf+0x3c8>
    1dfc:	8f ef       	ldi	r24, 0xFF	; 255
    1dfe:	9f ef       	ldi	r25, 0xFF	; 255
    1e00:	2b 96       	adiw	r28, 0x0b	; 11
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	ff 90       	pop	r15
    1e16:	ef 90       	pop	r14
    1e18:	df 90       	pop	r13
    1e1a:	cf 90       	pop	r12
    1e1c:	bf 90       	pop	r11
    1e1e:	af 90       	pop	r10
    1e20:	9f 90       	pop	r9
    1e22:	8f 90       	pop	r8
    1e24:	7f 90       	pop	r7
    1e26:	6f 90       	pop	r6
    1e28:	5f 90       	pop	r5
    1e2a:	4f 90       	pop	r4
    1e2c:	3f 90       	pop	r3
    1e2e:	2f 90       	pop	r2
    1e30:	08 95       	ret

00001e32 <strnlen_P>:
    1e32:	fc 01       	movw	r30, r24
    1e34:	05 90       	lpm	r0, Z+
    1e36:	61 50       	subi	r22, 0x01	; 1
    1e38:	70 40       	sbci	r23, 0x00	; 0
    1e3a:	01 10       	cpse	r0, r1
    1e3c:	d8 f7       	brcc	.-10     	; 0x1e34 <strnlen_P+0x2>
    1e3e:	80 95       	com	r24
    1e40:	90 95       	com	r25
    1e42:	8e 0f       	add	r24, r30
    1e44:	9f 1f       	adc	r25, r31
    1e46:	08 95       	ret

00001e48 <strnlen>:
    1e48:	fc 01       	movw	r30, r24
    1e4a:	61 50       	subi	r22, 0x01	; 1
    1e4c:	70 40       	sbci	r23, 0x00	; 0
    1e4e:	01 90       	ld	r0, Z+
    1e50:	01 10       	cpse	r0, r1
    1e52:	d8 f7       	brcc	.-10     	; 0x1e4a <strnlen+0x2>
    1e54:	80 95       	com	r24
    1e56:	90 95       	com	r25
    1e58:	8e 0f       	add	r24, r30
    1e5a:	9f 1f       	adc	r25, r31
    1e5c:	08 95       	ret

00001e5e <fputc>:
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	fb 01       	movw	r30, r22
    1e68:	23 81       	ldd	r18, Z+3	; 0x03
    1e6a:	21 fd       	sbrc	r18, 1
    1e6c:	03 c0       	rjmp	.+6      	; 0x1e74 <fputc+0x16>
    1e6e:	8f ef       	ldi	r24, 0xFF	; 255
    1e70:	9f ef       	ldi	r25, 0xFF	; 255
    1e72:	2c c0       	rjmp	.+88     	; 0x1ecc <fputc+0x6e>
    1e74:	22 ff       	sbrs	r18, 2
    1e76:	16 c0       	rjmp	.+44     	; 0x1ea4 <fputc+0x46>
    1e78:	46 81       	ldd	r20, Z+6	; 0x06
    1e7a:	57 81       	ldd	r21, Z+7	; 0x07
    1e7c:	24 81       	ldd	r18, Z+4	; 0x04
    1e7e:	35 81       	ldd	r19, Z+5	; 0x05
    1e80:	42 17       	cp	r20, r18
    1e82:	53 07       	cpc	r21, r19
    1e84:	44 f4       	brge	.+16     	; 0x1e96 <fputc+0x38>
    1e86:	a0 81       	ld	r26, Z
    1e88:	b1 81       	ldd	r27, Z+1	; 0x01
    1e8a:	9d 01       	movw	r18, r26
    1e8c:	2f 5f       	subi	r18, 0xFF	; 255
    1e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e90:	31 83       	std	Z+1, r19	; 0x01
    1e92:	20 83       	st	Z, r18
    1e94:	8c 93       	st	X, r24
    1e96:	26 81       	ldd	r18, Z+6	; 0x06
    1e98:	37 81       	ldd	r19, Z+7	; 0x07
    1e9a:	2f 5f       	subi	r18, 0xFF	; 255
    1e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9e:	37 83       	std	Z+7, r19	; 0x07
    1ea0:	26 83       	std	Z+6, r18	; 0x06
    1ea2:	14 c0       	rjmp	.+40     	; 0x1ecc <fputc+0x6e>
    1ea4:	8b 01       	movw	r16, r22
    1ea6:	ec 01       	movw	r28, r24
    1ea8:	fb 01       	movw	r30, r22
    1eaa:	00 84       	ldd	r0, Z+8	; 0x08
    1eac:	f1 85       	ldd	r31, Z+9	; 0x09
    1eae:	e0 2d       	mov	r30, r0
    1eb0:	09 95       	icall
    1eb2:	89 2b       	or	r24, r25
    1eb4:	e1 f6       	brne	.-72     	; 0x1e6e <fputc+0x10>
    1eb6:	d8 01       	movw	r26, r16
    1eb8:	16 96       	adiw	r26, 0x06	; 6
    1eba:	8d 91       	ld	r24, X+
    1ebc:	9c 91       	ld	r25, X
    1ebe:	17 97       	sbiw	r26, 0x07	; 7
    1ec0:	01 96       	adiw	r24, 0x01	; 1
    1ec2:	17 96       	adiw	r26, 0x07	; 7
    1ec4:	9c 93       	st	X, r25
    1ec6:	8e 93       	st	-X, r24
    1ec8:	16 97       	sbiw	r26, 0x06	; 6
    1eca:	ce 01       	movw	r24, r28
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	1f 91       	pop	r17
    1ed2:	0f 91       	pop	r16
    1ed4:	08 95       	ret

00001ed6 <__ultoa_invert>:
    1ed6:	fa 01       	movw	r30, r20
    1ed8:	aa 27       	eor	r26, r26
    1eda:	28 30       	cpi	r18, 0x08	; 8
    1edc:	51 f1       	breq	.+84     	; 0x1f32 <__ultoa_invert+0x5c>
    1ede:	20 31       	cpi	r18, 0x10	; 16
    1ee0:	81 f1       	breq	.+96     	; 0x1f42 <__ultoa_invert+0x6c>
    1ee2:	e8 94       	clt
    1ee4:	6f 93       	push	r22
    1ee6:	6e 7f       	andi	r22, 0xFE	; 254
    1ee8:	6e 5f       	subi	r22, 0xFE	; 254
    1eea:	7f 4f       	sbci	r23, 0xFF	; 255
    1eec:	8f 4f       	sbci	r24, 0xFF	; 255
    1eee:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef0:	af 4f       	sbci	r26, 0xFF	; 255
    1ef2:	b1 e0       	ldi	r27, 0x01	; 1
    1ef4:	3e d0       	rcall	.+124    	; 0x1f72 <__ultoa_invert+0x9c>
    1ef6:	b4 e0       	ldi	r27, 0x04	; 4
    1ef8:	3c d0       	rcall	.+120    	; 0x1f72 <__ultoa_invert+0x9c>
    1efa:	67 0f       	add	r22, r23
    1efc:	78 1f       	adc	r23, r24
    1efe:	89 1f       	adc	r24, r25
    1f00:	9a 1f       	adc	r25, r26
    1f02:	a1 1d       	adc	r26, r1
    1f04:	68 0f       	add	r22, r24
    1f06:	79 1f       	adc	r23, r25
    1f08:	8a 1f       	adc	r24, r26
    1f0a:	91 1d       	adc	r25, r1
    1f0c:	a1 1d       	adc	r26, r1
    1f0e:	6a 0f       	add	r22, r26
    1f10:	71 1d       	adc	r23, r1
    1f12:	81 1d       	adc	r24, r1
    1f14:	91 1d       	adc	r25, r1
    1f16:	a1 1d       	adc	r26, r1
    1f18:	20 d0       	rcall	.+64     	; 0x1f5a <__ultoa_invert+0x84>
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <__ultoa_invert+0x48>
    1f1c:	68 94       	set
    1f1e:	3f 91       	pop	r19
    1f20:	2a e0       	ldi	r18, 0x0A	; 10
    1f22:	26 9f       	mul	r18, r22
    1f24:	11 24       	eor	r1, r1
    1f26:	30 19       	sub	r19, r0
    1f28:	30 5d       	subi	r19, 0xD0	; 208
    1f2a:	31 93       	st	Z+, r19
    1f2c:	de f6       	brtc	.-74     	; 0x1ee4 <__ultoa_invert+0xe>
    1f2e:	cf 01       	movw	r24, r30
    1f30:	08 95       	ret
    1f32:	46 2f       	mov	r20, r22
    1f34:	47 70       	andi	r20, 0x07	; 7
    1f36:	40 5d       	subi	r20, 0xD0	; 208
    1f38:	41 93       	st	Z+, r20
    1f3a:	b3 e0       	ldi	r27, 0x03	; 3
    1f3c:	0f d0       	rcall	.+30     	; 0x1f5c <__ultoa_invert+0x86>
    1f3e:	c9 f7       	brne	.-14     	; 0x1f32 <__ultoa_invert+0x5c>
    1f40:	f6 cf       	rjmp	.-20     	; 0x1f2e <__ultoa_invert+0x58>
    1f42:	46 2f       	mov	r20, r22
    1f44:	4f 70       	andi	r20, 0x0F	; 15
    1f46:	40 5d       	subi	r20, 0xD0	; 208
    1f48:	4a 33       	cpi	r20, 0x3A	; 58
    1f4a:	18 f0       	brcs	.+6      	; 0x1f52 <__ultoa_invert+0x7c>
    1f4c:	49 5d       	subi	r20, 0xD9	; 217
    1f4e:	31 fd       	sbrc	r19, 1
    1f50:	40 52       	subi	r20, 0x20	; 32
    1f52:	41 93       	st	Z+, r20
    1f54:	02 d0       	rcall	.+4      	; 0x1f5a <__ultoa_invert+0x84>
    1f56:	a9 f7       	brne	.-22     	; 0x1f42 <__ultoa_invert+0x6c>
    1f58:	ea cf       	rjmp	.-44     	; 0x1f2e <__ultoa_invert+0x58>
    1f5a:	b4 e0       	ldi	r27, 0x04	; 4
    1f5c:	a6 95       	lsr	r26
    1f5e:	97 95       	ror	r25
    1f60:	87 95       	ror	r24
    1f62:	77 95       	ror	r23
    1f64:	67 95       	ror	r22
    1f66:	ba 95       	dec	r27
    1f68:	c9 f7       	brne	.-14     	; 0x1f5c <__ultoa_invert+0x86>
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	61 05       	cpc	r22, r1
    1f6e:	71 05       	cpc	r23, r1
    1f70:	08 95       	ret
    1f72:	9b 01       	movw	r18, r22
    1f74:	ac 01       	movw	r20, r24
    1f76:	0a 2e       	mov	r0, r26
    1f78:	06 94       	lsr	r0
    1f7a:	57 95       	ror	r21
    1f7c:	47 95       	ror	r20
    1f7e:	37 95       	ror	r19
    1f80:	27 95       	ror	r18
    1f82:	ba 95       	dec	r27
    1f84:	c9 f7       	brne	.-14     	; 0x1f78 <__ultoa_invert+0xa2>
    1f86:	62 0f       	add	r22, r18
    1f88:	73 1f       	adc	r23, r19
    1f8a:	84 1f       	adc	r24, r20
    1f8c:	95 1f       	adc	r25, r21
    1f8e:	a0 1d       	adc	r26, r0
    1f90:	08 95       	ret

00001f92 <__divmodsi4>:
    1f92:	05 2e       	mov	r0, r21
    1f94:	97 fb       	bst	r25, 7
    1f96:	16 f4       	brtc	.+4      	; 0x1f9c <__divmodsi4+0xa>
    1f98:	00 94       	com	r0
    1f9a:	0f d0       	rcall	.+30     	; 0x1fba <__negsi2>
    1f9c:	57 fd       	sbrc	r21, 7
    1f9e:	05 d0       	rcall	.+10     	; 0x1faa <__divmodsi4_neg2>
    1fa0:	24 d0       	rcall	.+72     	; 0x1fea <__udivmodsi4>
    1fa2:	07 fc       	sbrc	r0, 7
    1fa4:	02 d0       	rcall	.+4      	; 0x1faa <__divmodsi4_neg2>
    1fa6:	46 f4       	brtc	.+16     	; 0x1fb8 <__divmodsi4_exit>
    1fa8:	08 c0       	rjmp	.+16     	; 0x1fba <__negsi2>

00001faa <__divmodsi4_neg2>:
    1faa:	50 95       	com	r21
    1fac:	40 95       	com	r20
    1fae:	30 95       	com	r19
    1fb0:	21 95       	neg	r18
    1fb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb4:	4f 4f       	sbci	r20, 0xFF	; 255
    1fb6:	5f 4f       	sbci	r21, 0xFF	; 255

00001fb8 <__divmodsi4_exit>:
    1fb8:	08 95       	ret

00001fba <__negsi2>:
    1fba:	90 95       	com	r25
    1fbc:	80 95       	com	r24
    1fbe:	70 95       	com	r23
    1fc0:	61 95       	neg	r22
    1fc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc8:	08 95       	ret

00001fca <__muluhisi3>:
    1fca:	31 d0       	rcall	.+98     	; 0x202e <__umulhisi3>
    1fcc:	a5 9f       	mul	r26, r21
    1fce:	90 0d       	add	r25, r0
    1fd0:	b4 9f       	mul	r27, r20
    1fd2:	90 0d       	add	r25, r0
    1fd4:	a4 9f       	mul	r26, r20
    1fd6:	80 0d       	add	r24, r0
    1fd8:	91 1d       	adc	r25, r1
    1fda:	11 24       	eor	r1, r1
    1fdc:	08 95       	ret

00001fde <__mulshisi3>:
    1fde:	b7 ff       	sbrs	r27, 7
    1fe0:	f4 cf       	rjmp	.-24     	; 0x1fca <__muluhisi3>

00001fe2 <__mulohisi3>:
    1fe2:	f3 df       	rcall	.-26     	; 0x1fca <__muluhisi3>
    1fe4:	82 1b       	sub	r24, r18
    1fe6:	93 0b       	sbc	r25, r19
    1fe8:	08 95       	ret

00001fea <__udivmodsi4>:
    1fea:	a1 e2       	ldi	r26, 0x21	; 33
    1fec:	1a 2e       	mov	r1, r26
    1fee:	aa 1b       	sub	r26, r26
    1ff0:	bb 1b       	sub	r27, r27
    1ff2:	fd 01       	movw	r30, r26
    1ff4:	0d c0       	rjmp	.+26     	; 0x2010 <__udivmodsi4_ep>

00001ff6 <__udivmodsi4_loop>:
    1ff6:	aa 1f       	adc	r26, r26
    1ff8:	bb 1f       	adc	r27, r27
    1ffa:	ee 1f       	adc	r30, r30
    1ffc:	ff 1f       	adc	r31, r31
    1ffe:	a2 17       	cp	r26, r18
    2000:	b3 07       	cpc	r27, r19
    2002:	e4 07       	cpc	r30, r20
    2004:	f5 07       	cpc	r31, r21
    2006:	20 f0       	brcs	.+8      	; 0x2010 <__udivmodsi4_ep>
    2008:	a2 1b       	sub	r26, r18
    200a:	b3 0b       	sbc	r27, r19
    200c:	e4 0b       	sbc	r30, r20
    200e:	f5 0b       	sbc	r31, r21

00002010 <__udivmodsi4_ep>:
    2010:	66 1f       	adc	r22, r22
    2012:	77 1f       	adc	r23, r23
    2014:	88 1f       	adc	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	1a 94       	dec	r1
    201a:	69 f7       	brne	.-38     	; 0x1ff6 <__udivmodsi4_loop>
    201c:	60 95       	com	r22
    201e:	70 95       	com	r23
    2020:	80 95       	com	r24
    2022:	90 95       	com	r25
    2024:	9b 01       	movw	r18, r22
    2026:	ac 01       	movw	r20, r24
    2028:	bd 01       	movw	r22, r26
    202a:	cf 01       	movw	r24, r30
    202c:	08 95       	ret

0000202e <__umulhisi3>:
    202e:	a2 9f       	mul	r26, r18
    2030:	b0 01       	movw	r22, r0
    2032:	b3 9f       	mul	r27, r19
    2034:	c0 01       	movw	r24, r0
    2036:	a3 9f       	mul	r26, r19
    2038:	70 0d       	add	r23, r0
    203a:	81 1d       	adc	r24, r1
    203c:	11 24       	eor	r1, r1
    203e:	91 1d       	adc	r25, r1
    2040:	b2 9f       	mul	r27, r18
    2042:	70 0d       	add	r23, r0
    2044:	81 1d       	adc	r24, r1
    2046:	11 24       	eor	r1, r1
    2048:	91 1d       	adc	r25, r1
    204a:	08 95       	ret

0000204c <_exit>:
    204c:	f8 94       	cli

0000204e <__stop_program>:
    204e:	ff cf       	rjmp	.-2      	; 0x204e <__stop_program>
